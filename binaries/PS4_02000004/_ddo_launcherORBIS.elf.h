/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library '_ddo_launcherORBIS.elf'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct sce::Json::String;
struct sce::Json::Object;
struct sce::Json::Array;
struct MtString::STRING;
struct rArchive;
struct cArcLoaderBase;
struct MtOscillator;
struct rArchive::CIPHER_KEY;
struct rArchiveListArray;
struct rArchiveListArray::stHeader;
struct cArchiveListNode;
struct cArchiveListNode::stDbgResData;
struct rLanguageResIDConverter;
struct rLanguageResIDConverter::stHeader;
struct nDraw::BlendState;
struct nDraw::RasterizerState;
struct nDraw::DepthStencilState;
struct nDraw::Material::STATE;
struct nDraw::Material::PROCEDURAL_TEXTURE;
struct nDraw::Texture;
struct sce::Gnm::Texture;
struct nDraw::RenderTargetView;
struct sce::Gnm::RenderTarget;
struct nDraw::DepthStencilView;
struct sce::Gnm::DepthRenderTarget;
struct nDraw::Animation;
struct nDraw::Animation::ANIMATION_LIST;
struct nDraw::Animation::ANIMATION;
struct nDraw::Animation::PARAM;
struct nDraw::CBufferSystem;
struct nDraw::CBuffer;
struct nDraw::VARIABLE;
struct nDraw::SHADER_PARAM;
struct nPS4::VertexShaderObject;
struct sce::Gnmx::VsShader;
struct sce::Gnmx::EsShader;
struct nPS4::PixelShaderObject;
struct sce::Gnmx::PsShader;
struct nPS4::GeometryShaderObject;
struct sce::Gnmx::GsShader;
struct nDraw::InputLayouts;
struct nDraw::Layout;
union nGUI::MTAG::$A738E89CC3E255D9231517AFFC0BD6D2;
struct rGUIFont;
struct rGUIFont::SRC_CHAR;
struct rTexture;
struct rGUIFont::CHAR;
struct nGUI::PROP_SETTER;
struct rGUI;
struct cDraw::TAG;
struct cDraw::CMD;
struct cDraw::CMD_BRANCH;
struct cGUIFontFilter;
struct uGUI;
struct sce::Gnmx::LightweightGfxContext;
struct sce::Gnmx::BaseGfxContext;
struct sce::Gnm::CommandBuffer;
struct sce::Gnmx::ComputeQueue;
struct sce::Gnmx::BaseConstantUpdateEngine;
struct sce::Gnmx::ComputeContext;
struct sRender::PhotoExportThread;
struct uCamera;
struct rSceneTexture;
struct sCommonDialog::CommonDialogData;
struct SceSaveDataTitleId;
struct SceSaveDataFingerprint;
struct sToolExt;
struct sUnitExt;
struct sResourceExt;
struct sEffect;
struct sCollision;
struct sShader2;
struct sSound;
struct sCapture;
struct sGpuParticle;
struct sMouseExt;
struct sKeyboardExt;
struct sVibration;
struct sAI;
struct sZone;
struct sRemoteProcedure;
struct sNetworkExt;
struct sGuideExt;
struct sHttpClient;
struct sDialogBase;
struct rGUIMessage;
struct rGUIMessage::INDEX;
struct sGUIExt;
struct sGrass;
struct sScene;
struct sOccluder;
struct sShadow;
struct sPlatformUtil;
struct sHttpPatch;
struct sSavedataExt;
struct sFile;
struct sUserManager;
struct sExceptionHandler;
struct sPrimitive;
struct sSyncPoint;
struct sHID;
struct sCoprocessor;
struct sKeyboardInterface;
struct sWorkRate;
struct sBrowser;
struct sMovie;
struct MtDataWriter::Label;
struct SceImeEvent;
struct SceSaveDataDirName;
struct SceSaveDataParam;
struct SceSaveDataSearchInfo;
struct rSoundStreamRequest;
struct rSoundStreamRequest::Element;
struct rSoundStreamRequest::SoundSource;
struct rSoundSource;
struct rSoundSource::FUNDAMENTAL_PERIOD;
struct rSoundSource::SoundFile;
struct MtFile;
struct rSoundSource::MARKER;
struct rSoundStreamSourcePackage;
struct MtNetCore;
struct MtNetContext;
struct MtNetRequest;
struct MtNetFriendList;
struct nNetwork::Session;
struct nNetwork::SessionDatabase;
struct nNetwork::Transport;
struct nNetwork::Connect;
struct nNetwork::Match;
struct nNetwork::SessionListener;
struct nNetwork::SessionDriver;
struct MtNetSession;
struct nNetwork::TagChecker::Record;
struct nNetwork::nRanking::Object;
struct nNetwork::VoiceChat;
struct nNetwork::nSharedMemory2::Object;
struct MtMap::Cell;
struct nNetwork::nSharedMemory2::CProtocol;
struct nNetwork::nSharedMemory2::CListener;
struct std::_Container_proxy;
struct std::_Container_base12;
struct std::_Iterator_base12;
struct std::_List_node<value_type,_Voidptr>;
struct nNetwork::nAchievement::Object;
struct nNetwork::Storage;
struct MtNetSocket;
struct SceNpAgeRestriction;
struct cBrowser;
struct cBrowserApplicationTask;
struct cBrowserRenderDevicePS4;
struct cBrowserKeepString::stString;
struct rTextureMemory;
struct via::module::http_patch::FileController;
struct via::module::http_patch::FileController::LinkList<via::module::http_patch::FileController::Controller>;
struct via::module::http_patch::HttpPatchManager;
struct via::module::http_patch::ResultBase;
struct via::module::http_patch::VersionResult;
struct via::module::http_patch::ExeVersionResult;
struct via::module::http_patch::HttpPatchManager::RequestProcParam;
struct via::module::http_patch::FileControlManager;
struct via::module::http_patch::ParallelsFileData;
struct via::module::http_patch::RequestParam;
struct via::module::http_patch::UpdateResult;
struct via::module::http_patch::ExeUpdateResult;
struct via::module::http_patch::DetailedUpdateResult;
struct via::module::http_patch::FullListResult;
struct via::module::http_patch::PurgeListResult;
struct via::module::http_patch::BootListResult;
struct via::module::http_patch::SimpleResult;
struct via::HttpPatchModule;
struct cHttpClient;
struct MtNetP2p;
struct MtNetRanking;
struct MtNetStorage2;
struct MtNetStorageList;
struct MtCollisionUtil::MtLocalBlockAllocator::BlockInfo;
struct MtGeometry;
struct cDynamicBVHCollision::Node;
union cDynamicBVHCollision::Node::$B9B188958E8216E0E3FEDE19D4F5FBC8;
struct rCollision::MaterialList;
struct sCollision::Sbc;
struct rCollision;
struct cBVHCollision;
struct cBVHCollision::NodeBinaryBasic;
struct cBVHCollision::NodeBinaryOptimize;
struct cBVHCollision::NodeQuad;
struct cBVHCollision::cWorkBuildOnlineFast;
struct cBVHCollision::JobParamOfLine;
struct cGridCollision;
struct cGridCollision::cCellRegisterArrayBase;
struct cGridCollision::StaticGridInfo;
struct cGridCollisionRegistInfo;
struct rCollision::PartsInfo;
struct rCollision::MaterialInfo;
struct rCollision::Leaf;
struct rCollision::Triangle;
struct rCollision::Vertex;
struct sCollision::Sbc::Parts;
struct sCollision::SbcObject::cRegisterInfo;
struct uScrollCollisionGeometry;
struct sCollision::cSbcSkinMesh::cRegisterInfo;
struct uDynamicSbc;
struct rCollisionHeightField;
struct rCollisionHeightField::cCellGroup;
struct sCollision::Node;
struct sCollision::TriangleInfo;
struct sCollision::SbcInfo;
struct sCollision::ScrCollisionInfo;
struct sCollision::ScrCollisionInfoBase;
struct sCollision::TraverseInfo;
struct sCollision::PreTraverseInfo;
struct sCollision::PreTraverseInfo::PreTraverseData;
struct cGridCollision::cCellRegisterArray<u16,2>;
struct cGridCollision::cCellRegisterArray<u32,2>;
struct uBlurFilterExt;
struct uGUIDbgPrint;
struct uGUIDbgRect;
struct rSoundRequest;
struct uGUIBase;
struct sGUIExt::cChat;
struct sGUIExt::cMap;
struct cPrim;
struct via::module::http_patch::FileListener;
struct HttpClient;
struct via::module::http_patch::FileController::Controller;
struct std::allocator<char>;
struct std::_Wrap_alloc<_Alloc>;
struct via::crc_optimal<64,2620502051,4207869677,3735928559>;
struct std::chrono::time_point<std::chrono::system_clock,duration>;
struct SceNpCommunicationId;
struct SceNpCommunicationPassphrase;
struct MtNetCom::INative;
struct sApp::Item;
struct MtMemoryAllocator::MemoryCfg::SectionAttrib;
struct MtMemoryAllocator::Initializer::Entry;
struct MtScalableAllocator::CTRL;
union MtScalableAllocator::CTRL::$9B2A9AE12905DF9294F321A66BE8E27A;
struct nDraw::SHADER_KEY;
struct nDraw::D3D11_INPUT_ELEMENT_DESC;
struct nDraw::INPUT_ELEMENT;
struct nDraw::ST_BASE;
struct nDraw::ST_EXPRESSION;
struct rShader2;
struct rShaderCache;
struct rShaderPackage;
struct rShaderPackage::CORE;
struct rShaderPackage::SHADER_TABLE;
struct MtNetCom::IRichPresence;
struct rGUI::HEADER;
struct nGUI::FLOW;
struct nGUI::FLOW_INPUT;
struct nGUI::INPUT_CONDITION;
struct nGUI::FLOW_SWITCH;
struct nGUI::SWITCH_CONDITION;
struct nGUI::SWITCH_OPERATOR;
struct nGUI::FLOW_FUNCTION;
struct nGUI::ANIMATION;
struct nGUI::SEQUENCE;
struct nGUI::OBJECT;
struct nGUI::INIT_PARAM;
struct nGUI::OBJ_SEQUENCE;
struct nGUI::PARAM;
struct nGUI::KEY;
struct nGUI::INSTANCE;
struct nGUI::FLOW_PROCESS;
struct nGUI::ACTION;
struct nGUI::VARIABLE;
struct nGUI::TEXTURE;
struct nGUI::FONT;
struct nGUI::MESSAGE;
struct nGUI::GUIRESOURCE;
struct nGUI::GENERALRESOURCE;
struct nGUI::CAMERA_SETTING;
struct nGUI::VERTEX;
struct rGUI::InstanceNeedObjectInfo;
struct cGUIInstRoot;
struct cGUIInstScissorMask;
struct cGUIInstAnimation;
struct nGUI::PARAM_WORK;
struct cGUIObjRoot;
struct nGUI::DRAW_LIST;
struct cGUIInstAnimVariable;
struct cGUIVariable;
struct cGUIInstAnimControl;
struct nGUI::ANIM_SECTION;
struct cGUIObjText;
struct cGUIObjMessage;
struct cGUIObjChildAnimationRoot;
struct cGUIObjNull;
struct cGUIObjTextureSet;
struct cGUIObjTexture;
struct cGUIObjPolygon;
struct cGUIObjTextureSet::DATA;
struct cGUIObjScissorMask;
struct cGUIObjColorAdjust;
struct cGUIVarInt;
struct cGUIVarFloat;
struct uGUI::DuplicateBuffer;
struct nGUI::PROCESS_WORK;
struct rSoundRequest::Element;
struct rSoundBank;
struct nGUI::Draw;
struct uGUIBase::cControl;
struct uGUIBase::cControl::Message;
struct std::_Tree_node<value_type,_Voidptr>;
struct uLight;
struct cLightVolume;
struct uShadow;
struct uMultiFilter;
struct rShader2::HEADER;
struct sSound::NativeVoicePool;
struct sSound::NativeVoice;
struct sSound::NativeSystem;
struct cSoundPicolaPitchShift;
struct cSoundPicolaPitchShift::Resample;
struct sSound::Voice;
struct sSound::VoiceAccessor;
struct rSoundBank::Program;
struct rSoundBank::Element;
struct rSoundBank::Bus;
struct sSound::SeEntry;
struct sSound::StreamEntry;
struct sSound::EffectBase;
struct sSound::EffectUnitBase;
struct rSoundCurveSet;
struct rSoundDirectionalSet;
struct rSoundDirectionalSet::List;
struct rSoundDirectionalSet::DirectionalCurve;
struct rSoundDirectionalSet::Element;
struct rSoundReverb;
struct sSound::ReverbResource::ReverbResourceWork;
struct rSoundEQ;
struct sSound::EQResource::EQResourceWork;
struct sGpuParticle::Context;
struct sGpuParticle::PacketBuffer;
struct rVibration;
struct nPhysics::System;
struct nPhysics::RigidBody;
struct nPhysics::CURRENT_RIGID_BODY_DATA;
struct nPhysics::RIGID_BODY_DATA;
struct nPhysics::SHAPES;
struct nPhysics::AABB;
struct nPhysics::POWER;
struct nPhysics::RIGID_BODY_INFORMATION;
struct nPhysics::RIGID_BODY_STATUS;
struct nPhysics::COLLISION_INFORMATION;
struct nPhysics::Listener::Status;
struct nPhysics::Listener::Collision;
struct nPhysics::Event::Collide;
struct nPhysics::SORTED_PAIR;
struct nPhysics::SORT_DATA;
struct nPhysics::CONTACT_PAIR;
struct nPhysics::Event::Contact;
struct nPhysics::Event::Separate;
struct nPhysics::RIGID_BODY_LINK;
struct nPhysics::CONSTRAINT_HEADER;
struct nPhysics::CONSTRAINT;
struct nPhysics::StackMemory::MEMORY_BLOCK;
struct nPhysics::Constraint::Object;
struct nPhysics::Phantom;
struct nPhysics::CONTACT_INFO;
struct nPhysics::MATERIAL;
struct nPhysics::Callback::INFO;
struct nPhysics::QUANTIZATION_AABB;
struct nPhysics::MERGE_SORT_INFO;
struct nPhysics::RIGID_BODY_ID;
struct nPhysics::ORDERED_ID;
struct nPhysics::IoSPU::PROFILER_DATA;
struct nPhysics::DELTA_VELOCITY;
struct rSoundPhysicsList;
struct csSoundPhysicsRigidBody;
struct cAIService;
struct cAITask;
struct cAITaskJobPrim;
struct nAI::TaskPerformanceInfo;
struct nAI::TaskPerformanceInfo::LOD;
struct rOccluder;
struct rOccluder::cQuad;
struct sShadow::Resource;
struct sShadow::ViewConsistentResource;
struct sShadow::Node;
struct cShadowPriorityState;
struct rHDDPrefetchList;
struct sFile::PREFETCH_LIST;
struct nAutomation::Ticket;
struct cPrimTagList;
struct cPrimTagList::PrimTag;
struct cPrimBuffer;
struct cPrimTagList::IndexTag;
struct rModel;
struct rModel::JOINT_INFO;
struct rModel::PRIMITIVE_INFO;
struct rModel::BOUNDARY_INFO;
struct rModel::PARTS_INFO;
struct rMaterial;
struct rMaterial::HEADER;
struct rMaterial::TEXTURE_INFO;
struct rMaterial::MATERIAL_INFO;
struct rModel::MATERIAL_NAME;
struct cPrimTexHandleManager;
struct cPrimBufferManager;
struct cPrimTagManager;
struct sSyncPoint::callbackInfo;
struct cHID;
struct sce::Vectormath::Simd::Aos::Vector2;
struct sce::Vectormath::Simd::Aos::Vector3;
struct sce::Vectormath::Simd::Aos::Point3;
struct sce::Vectormath::Simd::Aos::Quat;
struct sce::Vectormath::Simd::Aos::Matrix3;
struct sce::Vectormath::Simd::floatInVec;
struct sce::Vectormath::Simd::boolInVec;
struct sSound::SOUNDDRIVER_INIT_PARAM;
struct sSound::NGS2Routing;
struct nAI::TASK_PERFORMANCE_LOD_INFO;
struct cZoneListener;
struct cZoneLayout::cInGameGroupManager;
struct cZoneLayout;
struct rZone;
struct nZone::cLayoutElement;
struct nZone::ShapeInfoBase;
struct nZone::cContentsPool;
struct rZone::cGroupManager;
struct cZoneLayout::cDynamicBVHMaster;
struct rZone::cMemoryHeader::cLayoutInfo;
struct rZone::cMemoryHeader::cGroupInfo;
struct sRemoteProcedure::SNode;
struct cRemoteProcedure;
struct MtStlAllocator<sRemoteProcedure::SNode>;
struct std::_Wrap_alloc<_Alloc>_2;
struct MtStlAllocator<std::pair<const unsigned int,unsigned int> >;
struct rEffectList;
struct rEffectList::ResourceInfo;
struct rEffectAnim;
struct rEffectAnim::SEQ_INDEX;
struct rEffectStrip;
struct cParticleManager;
struct cEffectJoint;
struct rEffectList::EFL_JOINT;
struct cEffectJointKeyframe;
struct cEffectJointAngle;
struct rEffectList::EFL_GENERATOR;
struct rEffectList::EFL_PARTICLE_COMMON;
struct rEffectList::EFL_LIFE_FRAME;
struct rEffectList::EFL_MOVE_COMMON;
struct rEffectList::EFL_INDEX;
struct rEffectList::EFL_PARAM_RPATH;
struct rEffectList::EFL_PARAM_BOUNDARY;
struct rEffectList::EFL_PARAM_CULLING;
struct rEffectList::EFL_PARAM_LEVEL_CORRECTION;
struct rEffectList::EFL_PARAM_COLL;
struct rEffectList::EFL_PARAM_SUB_EFFECT;
struct rEffectList::EFL_JOINT_INDEX;
struct rEffectList::EFL_PARAM_ANGLE_RANGE;
struct rEffectList::EFL_UNIT;
struct rEffectList::EFL_PARTICLE_CUSTOM;
struct rEffectList::EFL_PARAM_LINE_FIX;
struct rEffectList::EFL_PARAM_LINE_LENGTH;
struct rEffectList::EFL_PARAM_CLOTH_CHAIN;
struct rEffectList::EFL_PARAM_CLOTH_CURVE;
struct rEffectAnim::SEQ_PAT;
struct rEffectStrip::PARTS_PARAM;
struct rEffectStrip::VERTEX_PARAM;
struct rEffectStrip::INDEX_PARAM;
struct nEffect::KEYFRAME_INDEX;
struct cParticle;
struct cEffectCulling;
struct cEffectPath;
struct cEffectShadeLight;
struct cClothVertex;
struct uModel;
struct uModel::Joint;
struct uModel::Constraint;
struct nMotion::MOTION_PARAM;
struct nMotion::SEQUENCE_INFO;
struct uModel::MJOINT_WORK;
struct nMotion::KEYFRAME_INFO;
struct nMotion::KEYINFO_U32;
struct uModel::Motion::KeyFrameData;
struct uModel::InterpolationJoint;
struct rMotionList;
struct rMotionList::MOTION_LIST_HDR;
struct nMotion::MOTION_INFO;
struct uConstraint;
struct vec_uint2;
struct vec_float3_ext;
struct rGrassWind;
struct rGrassWind::cParamSet;
struct rGrassWind::cParams;
struct uScheduler;
struct uScheduler::TRACK_WORK;
struct rScheduler::TRACK;
struct rScheduler::KEY;
struct rScheduler;
struct rScheduler::HEADER;
struct MtVirtualAllocator::HEAP_INFO;
struct MtHeapAllocator::HEAP_INFO;
struct MtExHeapAllocator::HEAP_INFO;
struct MtExHeapAllocator::HEAP_HEADER;
struct MtSerializer::CLASS_ID;
struct MtSerializer::OBJECTDATA;
struct MtTree::Node;
struct SceWebBrowserDialogCallbackInitParam;
struct SceWebBrowserDialogImeParam;
struct SceWebBrowserDialogWebViewParam;
struct SceMsgDialogUserMessageParam;
struct SceMsgDialogProgressBarParam;
struct SceMsgDialogSystemMessageParam;
union SceInvitationDialogDataParam;
struct SceWebBrowserDialogCallbackResultParam;
struct SceInvitationDialogOnlineIdList;
struct _multi_ptr::_p64;
struct _multi_ptr::_p128;
struct MtCollisionUtil::EpaFace;
struct rHDDPrefetchList::cPrefetchData;
struct cGameLiveStream::SocialFeedbackControl::UpdateSocialFeedbackControlThread;
struct cGameLiveStream::LiveControl::UpdateStatusThread;
struct SceSaveDataDialogAnimationParam;
struct SceSaveDataDialogItems;
struct SceSaveDataDialogNewItem;
struct SceSaveDataDialogUserMessageParam;
struct SceSaveDataDialogSystemMessageParam;
struct SceSaveDataDialogErrorCodeParam;
struct SceSaveDataDialogProgressBarParam;
struct SceSaveDataDialogOptionParam;
struct D3D11_INPUT_ELEMENT_DESC;
struct cDraw::CMD_DRAW;
struct nDraw::CommandCache::LIST_STACK;
struct std::_Tree_node<value_type,_Voidptr>_0;
struct uAdhesion::ADHESION_INFO;
struct uAdhesion::ADHESION_NODE;
struct nJointAnimator::JA_JOINT_BUFF;
struct rChain;
struct nChain::ChainInfo;
struct nChain::JointWork;
struct rChainCol;
struct nChain::ColInfo;
struct nChain::CollisionWork;
struct uCloudControl;
struct rCloud;
struct uCloud::Particle;
struct rCnsLookAtEyeball;
struct rCnsLookAt;
struct rCnsRotateLimit;
struct rRenderTargetTexture;
struct rFacialPattern;
struct rFacialPattern::FACIAL_HDR;
struct rFacialAnimation;
struct rFacialAnimation::TrackParam;
struct MtFCurve::DescKey;
struct uFacial::JointInfo;
struct rImplicitSurface;
struct rImplicitSurface::PRIMITIVE_INFO;
struct uFullbodyIKHuman2;
struct uCnsIK;
struct rCnsIK;
struct uCnsIK::JointInfo;
struct rCnsMatrix;
struct rFullbodyIKHuman2;
struct rGraphPatch;
struct nGraphComponent::Base;
struct nGraphComponent::Port;
struct nGraphComponent::Edge;
struct rGrass2;
struct rGrass2::Cluster;
struct rGrass2::Triangle;
struct rGrass2::VertexFormat;
struct rGrass2Setting;
struct cTree<rGrass::cCluster>::cNode;
struct rGrass::cCluster;
struct cNodeParam<rGrass::cCluster>;
struct uWind;
struct uGUISubtitles;
struct cGUIInstMessage;
struct rISC;
struct uMaterialControl;
struct rMetaSet;
struct rModelMontage;
struct rModelMontage::HEADER;
struct rModelMontage::PARTS;
struct rModelMontage::MONTAGE;
struct rCameraList;
struct rCameraList::CAMERA_LIST_HDR;
struct rCameraList::CAMERA_INFO;
struct nMotion::CURVE_PARAM;
struct rMovie;
struct uMovie::soundDecode;
struct SceAvPlayerFrameInfoEx;
struct rDeformWeightMap;
struct rDeformWeightMap::LOD;
struct rSoundPhysicsSoftBody;
struct cSoundPhysicsSoftBody;
struct uSimSoftBody::LOCAL_PRIMITIVE_INFO;
struct uSimSoftBody::LOD;
struct uSimSoftBody::MtHalf4x2;
struct uSky;
struct rSky;
struct rStarCatalog;
struct rStarCatalog::StarData;
struct rSwingModel;
struct rSwingModel::PRIMITIVE_QUANT_INFO;
struct uWater::Animation;
struct rEffectList::EFL_PARTICLE_CLOTH_POLYGON;
struct rEffectList::EFL_PARTICLE_POLYGON;
struct rEffectList::EFL_PARTICLE_TRAIL;
struct nEffect::FilterParam;
struct uCnsChain::cCnsChild;
struct rCnsJointOffset;
struct rCnsParent;
struct uCnsSkeleton::cCnsChild;
struct uCnsSkeleton::cNode;
struct rCnsParentN;
struct uCnsParentN::cParentNode;
struct rCnsScaleNormalize;
struct uCnsGroup;
struct uCnsGroup::cGroup;
struct uCnsGroup::cNode;
struct uCnsGroup::cCnsChild;
struct rCnsTinyChain;
struct rCnsTinyChain::ChainGroup;
struct rCnsTinyChain::ChainNode;
struct uCnsTinyChain::cChainGroup;
struct uCnsTinyChain::cChainNode;
struct uCnsTinyIK;
struct rCnsTinyIK;
struct rEffectList::EFL_PARTICLE_POLYGON_STRIP;
struct rEffectList::EFL_PARAM_SHADE_LIGHT;
struct rEffectList::EFL_PARTICLE_RADIAL_BLUR_FILTER;
struct rEffectList::EFL_PARTICLE_COLOR_CORRECT_FILTER;
struct rEffectList::EFL_PARTICLE_GOD_RAYS_FILTER;
struct rEffectList::EFL_PARTICLE_BLOOM_FILTER;
struct rEffectList::EFL_PARAM_LENS_FLARE;
struct rEffectList::EFL_PARTICLE_LIGHT;
struct rEffectList::EFL_PARTICLE_LINE;
struct rEffectList::EFL_PARAM_PAT_ANIM;
struct rEffectList::EFL_PARTICLE_POLYLINE;
struct rEffectList::EFL_PARTICLE_PRIM_MODEL;
struct rEffectList::EFL_PARTICLE_TEXLINE;
struct sGpuParticle::StaticBuffer;
struct nMotion::CPARAM_FLOATKEY_16;
struct nMotion::CPARAM_FLOATKEY_8;
struct rSoundPhysicsRigidBody;
struct rConvexHull;
struct nNetwork::Protocol;
struct internal_state;
struct gz_header_s;
struct rVibration::VIB_INDEX;
struct rVibration::VIB_COMMON;
struct rSoundSpeakerSetXml::SpeakerSet;
struct rSoundSpeakerSetXml::Speaker;
struct rSoundSpeakerSetXml::DirectionalCurve;
struct rSoundSpeakerSetXml::DirectionalCurveElement;
struct std::_Wrap_alloc<_Alloc>_3;
struct std::_Wrap_alloc<_Alloc>_4;
struct rAI::TaskPerformanceInfo;
struct rAI::TaskPerformanceInfo::LOD;
struct cParticle2DGenerator;
struct rEffect2D::ResourceInfo;
struct rEffect2D::E2D_GENERATOR;
struct rEffect2D::E2D_PARTICLE_COMMON;
struct rEffect2D::E2D_LIFE_FRAME;
struct rEffect2D::E2D_MOVE_COMMON;
struct cParticle2D;
struct rEffect2D;
struct rEffect2D::E2D_UNIT;
struct rEffect2D::E2D_INDEX;
struct rEffect2D::E2D_PARAM_LEVEL_CORRECTION;
struct rEffect2D::E2D_PARTICLE_MODEL;
struct rEffect2D::E2D_PARAM_TEX_SCROLL;
struct rEffect2D::E2D_PARTICLE_POLYLINE;
struct rEffect2D::E2D_PARTICLE_TEXLINE;
struct rEffect2D::E2D_PARTICLE_LINE;
struct uSimpleEffect::Particle;
struct rVertices;
struct cTree<uGrassWind>::cNode;
struct nNetwork::nRanking::Listener;
struct std::_Tree_node<value_type,_Voidptr>_1;
struct std::_Tree_node<value_type,_Voidptr>_2;
struct std::_Tree_const_iterator<_Myt>_1;
struct std::_Tree_iterator<_Myt>_0;
struct std::pair<iterator,iterator>_0;
struct std::pair<iterator,bool>_0;
struct std::pair<iterator,iterator>_1;
struct std::_Tree_node<value_type,_Voidptr>_3;
struct std::_Tree_iterator<_Myt>_1;
struct std::pair<iterator,bool>_1;
struct std::_Vector_iterator<_Myt>_0;
struct std::_Wrap_alloc<_Alloc>_5;
struct std::pair<iterator,iterator>_2;
struct internal_state_0;
struct std::_Vector_iterator<_Myt>_1;
struct std::_Wrap_alloc<std::allocator<char *> >;
struct std::_Vector_iterator<_Myt>_2;
struct std::_Wrap_alloc<_Alloc>_6;
struct std::_Vector_iterator<_Myt>_3;
struct std::_Wrap_alloc<_Alloc>_7;
struct std::_Vector_iterator<_Myt>_4;
struct std::_Wrap_alloc<_Alloc>_8;
struct rShaderCache::HEADER;
struct nPS4::ShaderDesc::ConstantBuffer;
struct nPS4::ShaderDesc::ConstantBuffer::Element;
struct nPS4::ShaderDesc::SamplerState;
struct nPS4::ShaderDesc::TextureBuffer;
struct nPS4::ShaderDesc::Attribute;
struct nDraw::OcclusionQuery;
struct rSoundCurveSet::List;
struct rSoundCurveSet::Curve;
struct cSoundMeterRms;
struct rSoundSourceStreamAT9;
struct SceNgs2SamplerRackOption;
struct SceNgs2SystemOption;
struct SceNgs2ReverbRackOption;
struct SceNgs2SubmixerRackOption;
struct SceNgs2MasteringRackOption;
struct SceNgs2SamplerVoiceState;
struct SceNgs2UserFxProcessContext;
struct rDynamicSbc;
struct rDynamicSbc::Triangle;
struct rDynamicSbc::VertexJointInfo;
struct rDynamicSbc::JointInfo;
struct rDynamicSbc::PartsInfo;
struct uDynamicSbc::cPartsInfo;
struct rCollisionObj::cPartsData;
struct rGeometry2::cGeometryArray;
struct rGeometry2Group;
struct cTree<MtTriangle>::cNode;
struct uGeometry2Group;
struct cColliderNodeParam;
struct cColliderGeometryParam;
struct cRemoteProcedureAsync;
struct cRemoteProcedureAsync::MsgMTFN_Async;
struct std::pair<iterator,bool>_2;
struct sRemoteProcedure::SNode_0;
struct cUnitPtrBase;
struct nAutomation::nExec::Job::JOB_PARAMETER;
struct rNulls::Null;
struct std::_List_node<value_type,_Voidptr>_0;
struct SNJ_BROWSER_JSFUNC_INFO;
struct std::_List_iterator<_Myt>_0;
struct std::_Wrap_alloc<std::allocator<std::_List_node<value_type,_Voidptr> > >;
struct std::_Simple_types<SNJ_BROWSER_EVENT>::value_type;
struct std::_Deque_iterator<_Myt>;
struct std::_Wrap_alloc<std::allocator<SNJ_BROWSER_EVENT *> >;
struct std::allocator<SNJ_BROWSER_EVENT>;
struct std::_Wrap_alloc<_Alloc>_9;
struct snj_browser_event_queue;
struct TCertListImportInfo_;
struct TColorSpecInfo_;
struct iTTabSelectInfo_;
struct iTFixedString_;
struct iTApplication_;
struct TApplicationClass_;
struct TApplicationManager_;
struct slim_pix_;
struct TExtEvent_;
struct slim_opaque_;
struct TApplicationEvent_;
struct iTStandardBrowser_;
struct TBrowser_;
struct TBrowserPane_;
struct TBrowserPaneClass_;
struct TContentRequest_;
struct TContentClass_;
struct TContentChannelClass_;
struct iTContentChannel_;
struct iTContentSpec_;
struct iTPostData_;
struct slim_vhandle_;
struct iTString_;
struct iTContentCoreSpec_;
struct slim_time_;
struct iTCertList_;
struct TCertDB_;
struct TCertStoreItem_;
struct TCertFindInfo_;
struct TCertDN_;
struct TCert_;
struct TCRL_;
struct iTContentAuth_;
struct TURLSchemeInfoClass_;
struct TContentDeterminerClass_;
struct TI18NConverterClass_;
struct iTContent_;
struct iTMultiContent_;
struct TMultiContentReviverClass_;
struct iTMultiContentReviver_;
struct TMultiContentItem_;
struct TMultiContentInfo_;
struct TDRMMediaObject_;
struct TDRMUsageContext_;
struct TDRMManager_;
struct TContentSpecFactory_;
struct TNetDocClass_;
struct TNetDoc_;
struct TContentParserClass_;
struct TContentParser_;
struct TPageOutline_;
struct TxxMLSchemaStore_;
struct TToken_;
struct TxxMLItem_;
struct slim_split_ss_;
struct TxxMLSchema_;
struct TxxMLElementInfo_;
struct TxxMLAttrInfo_;
struct TOutlineNameID_;
struct TCDATAFormatterClass_;
struct TInvokerInfo_;
struct TPageDepotScriptEngine_;
struct TDOMMethodInfo_;
struct TJSCCodeInfo_;
struct iTJSThread_;
struct TJSClass_;
struct TListItemHolder_;
struct iTJSObject_;
union TJSValue_;
struct TJSAddr_;
struct TJSDelayObjectBase_;
struct iTJSScope_;
struct TJSCanPutInfo_;
struct TJSEnumCookie_;
struct TJSRegArray_;
struct iTJSContainerArray_;
struct THashTableNode_;
struct iTJSBind_;
struct iTJSContext_;
struct TJSDelayCConsObject_;
struct TJSDelayObject_;
struct TJSCCodeTable_;
struct TJSDelayPrototype_;
struct TDOMAttrInfo_;
struct TDOMBind_;
struct TDOMIFInfo_;
struct TNSPlugin_;
union TContentParserStore_;
struct TTokenizer_;
struct TxxToken_;
struct TReaderInput_;
struct TIOBuffer_;
struct TTokenHandler_;
struct THTMLAttrBuilderClass_;
struct THTMLElementInfo_;
struct TXMLContentParser_;
struct TXMLReaderClass_;
struct TXMLReaderInput_;
struct TXMLLocator_;
struct TSAXParseException_;
struct TXMLContentHandler_;
struct TXMLAttributes_;
struct TXMLDTDHandler_;
struct TXMLDTDHandlerClass_;
struct TXMLErrorHandler_;
struct TXMLDeclHandler_;
struct TXMLDeclHandlerClass_;
struct TXMLLexicalHandler_;
struct TXMLReaderCallbacks_;
struct TXMLTokenizeModule_;
struct TPageScriptInfo_;
struct TPageEvent_;
struct TPageEventType_;
struct TBrowserWindow_;
struct TBrowserHistoryClass_;
struct TBrowserHistory_;
struct THistoryRequestInfo_;
struct TBrowserVisitClass_;
struct TBrowserVisitInfo_;
struct TSerializable_;
struct TSerializeVersionInfo_;
struct TSerializeOutput_;
union TSerializeReadWriteVal_;
struct TDeserializable_;
struct TDeserializeInput_;
struct TBrowserWindowProgressInfo_;
struct TAWSInterface_;
struct TFontDatabase_;
struct TFontDatabaseFont_;
struct TFontMetricsInfo_;
struct TFontCharWidthInfo_;
struct TFontStyle_;
struct TWWWPixelMap_;
struct TWWWPixelMapClassPool_;
struct TWWWPixelMapClass_;
struct TFrameSetSchema_;
struct TAWSControlInfo_;
struct TPageInputValue_;
struct TAWSNextSelectItemInfo_;
struct TAWSCursorInfo_;
struct TAWSEmbedInterface_;
struct TAWSEmbedInfo_;
struct TPWSContext_;
struct TPageThread_Event_;
struct TImageDecoderClass_;
struct iTImageDecoder_;
struct iTWWWImage_;
struct TCSSPropInfo_;
struct TCSSParser_;
struct TPageDepot_;
struct TElementStyleClass_;
struct TElementStylePreference_;
struct TCSSDict_;
struct TCSSStyleCascade_;
struct TCSSStyleCascadeItem_;
struct TCSSRuleDecl_;
struct TCSSRuleValue_;
struct TPageInclusion_Image_;
struct TPageInclusion_NPStream_;
struct iTStreamContent_;
struct TPageImage_;
struct TElementStyle_;
struct TEditorCompactStylePref_;
struct TPageEditor_;
struct TPageLayout_;
struct TAWSEvent_;
struct TElementStyleReader_;
struct TElementStyleTuple_;
struct TEditorReplacedInfo_;
struct TPanePrefAdjuster_;
struct TPageMaker_;
union TOutlineItem_;
struct TOutlineItemType_;
struct TElementStyleInitializer_;
struct THTMLPageMaker_;
struct THTMLPageMakerProgressState_;
struct slim_ip_addr_;
struct TSSLSocketInfo_;
struct iTSSL_;
struct TSSLClass_;
struct TSSLSessionDBKey_;
struct TSSLSessionDBRecord_;
struct TCertStoreDesc_;
struct iTClientCertList_;
union TMDCtx_;
struct iTSSLCipherContext_;
union TSymCipherCtx_;
union TStrmCipherCtx_;
union TBlkCipherCtx_;
union TBlkCipherBaseCtx_;
struct TSymCipherInfo_;
struct THTTPAuthInfo_;
struct iTHTTPCookieEntry_;
struct THTTPCookie_;
struct iTHTTPStream_;
struct TPostDataCursor_;
struct THTTPStreamInflate_;
struct iTHTTPChannel_;
struct THTTPCacheKey_;
struct TContentCoreSpecInfo_;
struct iTFilepChannel_;
struct iTAboutChannel_;
struct TPictgramInfo_;
struct TInetMsgTokenizer_;
struct iTUserContent_;
struct TUserContentItem_;
struct TBrowserPageSaveInfo_;
struct TBrowserPageSaveItem_;
struct iTPageSaveContent_;
struct TSavedPageDataFeeder_;
struct TTextXMLReaderClass_;
struct THTMLTokenizerClass_;
union THTMLBox_;
struct TBRFetchedCommandHolder_;
union TBrowserReply_;
struct TBRCmdMatchParam_;
struct TDummyAWSInstance_;
struct TPWSGlobalContext_;
struct TWebDataManager_;
struct TDialogTemplate_;
struct TDialogTemplateItem_;
struct TDialogTemplateItemLayout_;
struct iTToolBar_;
struct iTBrowserMenu_;
struct iTTitleArea_;
struct iTBookmarkDialog_;
struct iTURLHistoryDialog_;
struct iTPageMemoDialog_;
struct iTBrowserCertDialog_;
struct iTClientCertDialog_;
struct iTCertInfoDialog_;
struct iTClientCertSelectDialog_;
struct iTVisitHistoryDialog_;
struct iTEnterURLDialog_;
struct iTTextSearchDialog_;
struct iTWebSearchDialog_;
struct iTTranslateDialog_;
struct iTDownloadDialog_;
struct TStringFormatCookie_;
struct TFocusMoveInfo_;
struct TAppBrowserClass_;
struct TRepository_;
struct TProfile_;
struct TBrowserLib_;
struct TBrowserTimerImpl_;
struct TBrowserLibCallBacks_;
struct TBrowserLibNotifyError_;
struct TBrowserLibNotifyContentError_;
struct TBrowserLibRequestConnection_;
struct TBrowserLibRequestConnectionPaneList_;
struct TBrowserLibRequestExScheme_;
struct TBrowserLibRequestAuth_;
struct TBrowserLibRequestRedirectConfirm_;
struct TBrowserLibRequestCookieConfirm_;
struct TBrowserLibRequestHistoryBackForwConfirm_;
struct TBrowserLibRequestServerCertConfirm_;
struct TBrowserLibRequestClientCertSelect_;
struct TBrowserLibRequestStartScript_;
struct TBrowserLibHelper_;
struct TBrowserLibHelperData_;
struct TBrowserLibHelperDone_;
struct TBrowserLibRequestJSAlert_;
struct TBrowserLibRequestJSConfirm_;
struct TBrowserLibRequestJSPrompt_;
struct TBrowserLibRequestOpenWindow_;
struct TBrowserLibRequestCloseWindow_;
struct TBrowserLibRequestDeleteWindow_;
struct TBrowserLibNotifyInputFormatError_;
struct TBrowserLibNotifyXMLSAXError_;
struct TBrowserLibRequestRequestPost_;
struct TBrowserLibNotifyPaneState_;
struct TBrowserLibNotifyWindowState_;
struct TBrowserLibNotifyFrameSetState_;
struct TBrowserLibRequestSendHTTPRequest_;
struct TBrowserLibNotifyContentState_;
struct TBrowserLibNotifyStreamState_;
struct TBrowserLibNotifyChangeBrowsingMode_;
struct TBrowserLibBrCmdHandler_;
struct TBrowserLibWindow_;
struct TBrowserLibDownloadInfo_;
struct TBrowserLibNotifyUIGuidance_;
struct TBrowserLibNotifyStateChange_;
struct TUIEventHandler_;
struct TUIEvent_;
struct TWave_;
struct TScreen_;
struct iTRegion_;
struct TWndClass_;
struct TEvent_;
struct EventCommandProcList_;
struct TFontMetrics_;
struct TBrowserPrefSet_;
struct TPWSPrefSet_;
struct GameBrowser_LocalParam_;
struct TGraphics_;
struct TQueryFormatIterator_;
struct TAccelerator_;
struct TNetIF_;
struct TNetIFProperty_;
struct TNetIPAddr_;
struct TRepositoryData_;
struct _tAPPExJSParam;
struct TBrowserLibPageInfo_;
struct TDecoPrefDialogItem_;
struct TCharsetDialogInfo_;
struct TSaveLinkTargetInfo_;
struct TWWWAutoCrawler_;
struct TListCompoMode_;
struct TListCompoStyle_;
struct TDecoPrefDialog_;
struct slim_date_;
struct iTClientCertImportDialog_;
struct TNetManager_;
struct TNetManagerDlgCtrl_;
struct TDecoPrefDialogListItem_;
struct TDecoPrefWizardItem_;
struct TDecoPrefWizard_;
struct TAppNetManagerClass_;
struct TRepositoryCollItem_;
struct TGraphicsCaps_;
struct TCandidateCompoStyle_;
struct TCandidateCompoMode_;
struct TCandidateCompoItem_;
struct TCandidateCompoContext_;
struct TCandidateCompoAuxData_;
struct TTreeVisit_;
struct TTreeItemHolder_;
struct TItemboxCompoContext_;
struct TItemboxCompoAuxData_;
struct TItemboxCompoMarqueeArg_;
struct TSkinPart_;
struct iTAccessPointDialog_;
struct TDecoDialupSelect_;
struct APPExIMEParam_;
struct TPWSInterface_;
struct TPWSEmbedInterface_;
struct SceNetEpollEvent;
struct SceNetSockaddrIn;
struct TPPPConnectionParam_;
struct TPPPNetParam_;
struct __sFILE_0;
struct TFBCCICommand_;
struct TBookmarkDialogInfo_;
struct TListViewInfo_;
struct TTableCompoCellInfo_;
struct TTabbedMenuInfo_;
struct TTabbedMenuPageInfo_;
struct TTabbedMenuPageItemInfo_;
struct iTTabbedMenuHandler_;
struct iTListViewHandler_;
struct TBookTree_;
struct TBookmarkSubmenu_;
struct iTBookmarkSubWndUserItem_;
struct TBookTreeEntry_;
struct TBookmarkMenuItem_;
struct TBackButtonContext_;
struct TForwardButtonContext_;
struct TPageLoadButtonContext_;
struct TCertInfoDialogInfo_;
struct TBrowserCertDialogInfo_;
struct TBrowserCertSubmenu_;
struct TClientCertDialogInfo_;
struct TClientCertSubmenu_;
struct TClientCertImportDialogInfo_;
struct TClientCertSelectDialogInfo_;
struct TDownloadDialogInfo_;
struct TEnterURLDialogInfo_;
struct iTAlignedButtonInfo_;
struct TPushSkin_;
struct TButtonCompoStyle_;
struct TConnectionIconContext_;
struct TConnectStateIconContext_;
struct TSSLIconContext_;
struct TPageMemoDialogInfo_;
struct TPageMemoList_;
struct TPageMemoSubmenu_;
struct TPageMemoListEntry_;
struct TTabSelectFrameInfo_;
struct TTabSelectWndSubMenuInfo_;
struct iTTabSelectWnd_;
struct TLabelCompoMode_;
struct TTabMenuButtonContext_;
struct TTextSearchDialogInfo_;
struct TTitleAreaInfo_;
struct TToolBarInfo_;
struct TTranslateDialogInfo_;
struct TURLHistoryDialogInfo_;
struct TURLHistorySubmenu_;
struct TVisitHistoryDialogInfo_;
struct TVisitHistorySubmenu_;
struct TBrowserVisitEntry_;
struct TWebSearchDialogInfo_;
struct TCertFlags_;
struct TTabbedMenuPageImage_;
struct TLabelCompoStyle_;
struct TAccessPointDialogInfo_;
struct TAccessPointSubmenu_;
struct SceRtcDateTime;
struct TAnimationIconContext_;
struct SceNpPeerAddress;
struct SceNpMatching2RoomDataInternal;
struct SceNpMatching2RoomGroup;
struct SceNpMatching2RoomBinAttrInternal;
struct SceNpMatching2RoomMemberDataInternalList;
struct SceNpMatching2RoomMemberDataInternal;
struct SceNpMatching2RoomMemberBinAttrInternal;
struct SceNpMatching2RoomDataInternalUpdateInfo;
struct SceNpMatching2RoomMemberDataInternalUpdateInfo;
struct SceNpMatching2RoomOwnerUpdateInfo;
struct SceNpMatching2SessionPassword;
struct SceNpMatching2RoomGroupConfig;
struct SceNpMatching2RoomGroupPasswordConfig;
struct SceNpMatching2RoomDataExternal;
struct SceNpMatching2RoomGroupInfo;

struct Symbol
{
  int name;
  char info;
  char other;
  __int16 shtndx;
  __int64 value;
  __int64 size;
};

struct Jump
{
  void *offset;
  __int64 info;
  void *addend;
};

struct Relocation
{
  void *offset;
  __int64 info;
  void *addend;
};

struct Hash
{
  __int16 bucket;
  __int16 chain;
  __int16 buckets;
  __int16 chains;
};

struct Tag
{
  __int64 tag;
  __int64 value;
};

enum PS4_ERROR_CODES : __int32
{
  SCE_KERNEL_ERROR_EPERM = 0x80020001,
  SCE_KERNEL_ERROR_ENOENT = 0x80020002,
  SCE_KERNEL_ERROR_ESRCH = 0x80020003,
  SCE_KERNEL_ERROR_EINTR = 0x80020004,
  SCE_KERNEL_ERROR_EIO = 0x80020005,
  SCE_KERNEL_ERROR_ENXIO = 0x80020006,
  SCE_KERNEL_ERROR_E2BIG = 0x80020007,
  SCE_KERNEL_ERROR_ENOEXEC = 0x80020008,
  SCE_KERNEL_ERROR_EBADF = 0x80020009,
  SCE_KERNEL_ERROR_ECHILD = 0x8002000A,
  SCE_KERNEL_ERROR_EDEADLK = 0x8002000B,
  SCE_KERNEL_ERROR_ENOMEM = 0x8002000C,
  SCE_KERNEL_ERROR_EACCES = 0x8002000D,
  SCE_KERNEL_ERROR_EFAULT = 0x8002000E,
  SCE_KERNEL_ERROR_ENOTBLK = 0x8002000F,
  SCE_KERNEL_ERROR_EBUSY = 0x80020010,
  SCE_KERNEL_ERROR_EEXIST = 0x80020011,
  SCE_KERNEL_ERROR_EXDEV = 0x80020012,
  SCE_KERNEL_ERROR_ENODEV = 0x80020013,
  SCE_KERNEL_ERROR_ENOTDIR = 0x80020014,
  SCE_KERNEL_ERROR_EISDIR = 0x80020015,
  SCE_KERNEL_ERROR_EINVAL = 0x80020016,
  SCE_KERNEL_ERROR_ENFILE = 0x80020017,
  SCE_KERNEL_ERROR_EMFILE = 0x80020018,
  SCE_KERNEL_ERROR_ENOTTY = 0x80020019,
  SCE_KERNEL_ERROR_ETXTBSY = 0x8002001A,
  SCE_KERNEL_ERROR_EFBIG = 0x8002001B,
  SCE_KERNEL_ERROR_ENOSPC = 0x8002001C,
  SCE_KERNEL_ERROR_ESPIPE = 0x8002001D,
  SCE_KERNEL_ERROR_EROFS = 0x8002001E,
  SCE_KERNEL_ERROR_EMLINK = 0x8002001F,
  SCE_KERNEL_ERROR_EPIPE = 0x80020020,
  SCE_KERNEL_ERROR_EDOM = 0x80020021,
  SCE_KERNEL_ERROR_ERANGE = 0x80020022,
  SCE_KERNEL_ERROR_EAGAIN = 0x80020023,
  SCE_KERNEL_ERROR_EWOULDBLOCK = 0x80020023,
  SCE_KERNEL_ERROR_EINPROGRESS = 0x80020024,
  SCE_KERNEL_ERROR_EALREADY = 0x80020025,
  SCE_KERNEL_ERROR_ENOTSOCK = 0x80020026,
  SCE_KERNEL_ERROR_EDESTADDRREQ = 0x80020027,
  SCE_KERNEL_ERROR_EMSGSIZE = 0x80020028,
  SCE_KERNEL_ERROR_EPROTOTYPE = 0x80020029,
  SCE_KERNEL_ERROR_ENOPROTOOPT = 0x8002002A,
  SCE_KERNEL_ERROR_EPROTONOSUPPORT = 0x8002002B,
  SCE_KERNEL_ERROR_ESOCKTNOSUPPORT = 0x8002002C,
  SCE_KERNEL_ERROR_ENOTSUP = 0x8002002D,
  SCE_KERNEL_ERROR_EOPNOTSUPP = 0x8002002D,
  SCE_KERNEL_ERROR_EPFNOSUPPORT = 0x8002002E,
  SCE_KERNEL_ERROR_EAFNOSUPPORT = 0x8002002F,
  SCE_KERNEL_ERROR_EADDRINUSE = 0x80020030,
  SCE_KERNEL_ERROR_EADDRNOTAVAIL = 0x80020031,
  SCE_KERNEL_ERROR_ENETDOWN = 0x80020032,
  SCE_KERNEL_ERROR_ENETUNREACH = 0x80020033,
  SCE_KERNEL_ERROR_ENETRESET = 0x80020034,
  SCE_KERNEL_ERROR_ECONNABORTED = 0x80020035,
  SCE_KERNEL_ERROR_ECONNRESET = 0x80020036,
  SCE_KERNEL_ERROR_ENOBUFS = 0x80020037,
  SCE_KERNEL_ERROR_EISCONN = 0x80020038,
  SCE_KERNEL_ERROR_ENOTCONN = 0x80020039,
  SCE_KERNEL_ERROR_ESHUTDOWN = 0x8002003A,
  SCE_KERNEL_ERROR_ETOOMANYREFS = 0x8002003B,
  SCE_KERNEL_ERROR_ETIMEDOUT = 0x8002003C,
  SCE_KERNEL_ERROR_ECONNREFUSED = 0x8002003D,
  SCE_KERNEL_ERROR_ELOOP = 0x8002003E,
  SCE_KERNEL_ERROR_ENAMETOOLONG = 0x8002003F,
  SCE_KERNEL_ERROR_EHOSTDOWN = 0x80020040,
  SCE_KERNEL_ERROR_EHOSTUNREACH = 0x80020041,
  SCE_KERNEL_ERROR_ENOTEMPTY = 0x80020042,
  SCE_KERNEL_ERROR_EPROCLIM = 0x80020043,
  SCE_KERNEL_ERROR_EUSERS = 0x80020044,
  SCE_KERNEL_ERROR_EDQUOT = 0x80020045,
  SCE_KERNEL_ERROR_ESTALE = 0x80020046,
  SCE_KERNEL_ERROR_EREMOTE = 0x80020047,
  SCE_KERNEL_ERROR_EBADRPC = 0x80020048,
  SCE_KERNEL_ERROR_ERPCMISMATCH = 0x80020049,
  SCE_KERNEL_ERROR_EPROGUNAVAIL = 0x8002004A,
  SCE_KERNEL_ERROR_EPROGMISMATCH = 0x8002004B,
  SCE_KERNEL_ERROR_EPROCUNAVAIL = 0x8002004C,
  SCE_KERNEL_ERROR_ENOLCK = 0x8002004D,
  SCE_KERNEL_ERROR_ENOSYS = 0x8002004E,
  SCE_KERNEL_ERROR_EFTYPE = 0x8002004F,
  SCE_KERNEL_ERROR_EAUTH = 0x80020050,
  SCE_KERNEL_ERROR_ENEEDAUTH = 0x80020051,
  SCE_KERNEL_ERROR_EIDRM = 0x80020052,
  SCE_KERNEL_ERROR_ENOMSG = 0x80020053,
  SCE_KERNEL_ERROR_EOVERFLOW = 0x80020054,
  SCE_KERNEL_ERROR_ECANCELED = 0x80020055,
  SCE_KERNEL_ERROR_EILSEQ = 0x80020056,
  SCE_KERNEL_ERROR_ENOATTR = 0x80020057,
  SCE_KERNEL_ERROR_EDOOFUS = 0x80020058,
  SCE_KERNEL_ERROR_EBADMSG = 0x80020059,
  SCE_KERNEL_ERROR_EMULTIHOP = 0x8002005A,
  SCE_KERNEL_ERROR_ENOLINK = 0x8002005B,
  SCE_KERNEL_ERROR_EPROTO = 0x8002005C,
  SCE_KERNEL_ERROR_ENOTCAPABLE = 0x8002005D,
  SCE_KERNEL_ERROR_ECAPMODE = 0x8002005E,
  SCE_KERNEL_ERROR_ENOBLK = 0x8002005F,
  SCE_KERNEL_ERROR_EICV = 0x80020060,
  SCE_KERNEL_ERROR_ENOPLAYGOENT = 0x80020061,
  SCE_KERNEL_ERROR_EREVOKE = 0x80020062,
  SCE_KERNEL_ERROR_ESDKVERSION = 0x80020063,
  SCE_DECI4H_ERROR_UNKNOWN = 0x80080800,
  SCE_DECI4H_ERROR_ALREADYUSE_PROTOCOL = 0x80080801,
  SCE_DECI4H_ERROR_ILLEGAL_SID = 0x80080802,
  SCE_DECI4H_ERROR_INVALID_ARGUMENT = 0x80080804,
  SCE_DECI4H_ERROR_ILLEGAL_PROTOCOL = 0x80080806,
  SCE_DECI4H_ERROR_TOOMANY_PROTOCOL = 0x80080809,
  SCE_DECI4H_ERROR_INTERRUPTED = 0x8008080C,
  SCE_DECI4H_ERROR_NO_CONNECTED = 0x8008080E,
  SCE_DECI4H_ERROR_HOST_PROCESS_DISABLED = 0x80080820,
  SCE_DECI4H_ERROR_HOST_CREATE_PROCESS = 0x80080821,
  SCE_DECI4H_ERROR_HOST_TOOMANY_PROCESS = 0x80080822,
  SCE_REGMGR_ERROR_MGR_BROKEN_MIN = 0x800D0000,
  SCE_REGMGR_ERROR_NONVSDATA = 0x800D0001,
  SCE_REGMGR_ERROR_ERRNVSDATA = 0x800D0002,
  SCE_REGMGR_ERROR_ERREAPHEAD = 0x800D0003,
  SCE_REGMGR_ERROR_ERREAPCONT = 0x800D0004,
  SCE_REGMGR_ERROR_ERREAPDATA = 0x800D0005,
  SCE_REGMGR_ERROR_BACKUPVERSION = 0x800D0006,
  SCE_REGMGR_ERROR_MGR_BROKEN_MAX = 0x800D00FF,
  SCE_REGMGR_ERROR_MGR_UPDATE_MIN = 0x800D0100,
  SCE_REGMGR_ERROR_NOINITDB = 0x800D0101,
  SCE_REGMGR_ERROR_NODATA = 0x800D0102,
  SCE_REGMGR_ERROR_FORMAT = 0x800D0103,
  SCE_REGMGR_ERROR_OVERCNT = 0x800D0104,
  SCE_REGMGR_ERROR_REGIDERR = 0x800D0105,
  SCE_REGMGR_ERROR_MACNERR = 0x800D0106,
  SCE_REGMGR_ERROR_TYPEERR = 0x800D0107,
  SCE_REGMGR_ERROR_SIZEERR = 0x800D0108,
  SCE_REGMGR_ERROR_CACHEFLAG = 0x800D0109,
  SCE_REGMGR_ERROR_LEVELERR = 0x800D010A,
  SCE_REGMGR_ERROR_DBPOS = 0x800D010B,
  SCE_REGMGR_ERROR_EAPWRITE = 0x800D010C,
  SCE_REGMGR_ERROR_BKUPLEVEL = 0x800D010D,
  SCE_REGMGR_ERROR_GPSGERR = 0x800D010E,
  SCE_REGMGR_ERROR_NPSGERR = 0x800D010F,
  SCE_REGMGR_ERROR_HOSTERR = 0x800D0110,
  SCE_REGMGR_ERROR_HOWTOERR = 0x800D0111,
  SCE_REGMGR_ERROR_NUMCATERR = 0x800D0112,
  SCE_REGMGR_ERROR_VALUEERR = 0x800D0113,
  SCE_REGMGR_ERROR_PRODUCTCODE = 0x800D0114,
  SCE_REGMGR_ERROR_SPSGERR = 0x800D0115,
  SCE_REGMGR_ERROR_PRISTRFIL = 0x800D0116,
  SCE_REGMGR_ERROR_PRISTRDIR = 0x800D0117,
  SCE_REGMGR_ERROR_DANGOFLAG = 0x800D0118,
  SCE_REGMGR_ERROR_MGR_UPDATE_MAX = 0x800D01FF,
  SCE_REGMGR_ERROR_MGR_PRGBUG_MIN = 0x800D0200,
  SCE_REGMGR_ERROR_UNINITIALIZED = 0x800D0201,
  SCE_REGMGR_ERROR_PARAM = 0x800D0202,
  SCE_REGMGR_ERROR_PRM_REGID = 0x800D0203,
  SCE_REGMGR_ERROR_PRM_HASH = 0x800D0204,
  SCE_REGMGR_ERROR_PRM_PROPRG = 0x800D0205,
  SCE_REGMGR_ERROR_PRM_REGID_NUM = 0x800D0206,
  SCE_REGMGR_ERROR_PRM_TYPE = 0x800D0207,
  SCE_REGMGR_ERROR_PRM_SIZE = 0x800D0208,
  SCE_REGMGR_ERROR_PRM_INITLEVEL = 0x800D0209,
  SCE_REGMGR_ERROR_PRM_BKUPLEVEL = 0x800D020A,
  SCE_REGMGR_ERROR_PRM_PATH = 0x800D020B,
  SCE_REGMGR_ERROR_PRM_CANTRESET = 0x800D020C,
  SCE_REGMGR_ERROR_PRM_ERRORCODE = 0x800D020D,
  SCE_REGMGR_ERROR_NOTHING = 0x800D020E,
  SCE_REGMGR_ERROR_COPYIN = 0x800D020F,
  SCE_REGMGR_ERROR_COPYOUT = 0x800D0210,
  SCE_REGMGR_ERROR_NOMEMORY = 0x800D0211,
  SCE_REGMGR_ERROR_CACHEAREA = 0x800D0212,
  SCE_REGMGR_ERROR_HANDLER_REGIST = 0x800D0213,
  SCE_REGMGR_ERROR_PRM_PROC_GAME_LIB = 0x800D0214,
  SCE_REGMGR_ERROR_PRM_PROC_GAME_SDK = 0x800D0215,
  SCE_REGMGR_ERROR_PRM_PROC_NGAME_LIB = 0x800D0216,
  SCE_REGMGR_ERROR_PRM_PROC_NGAME_SDK = 0x800D0217,
  SCE_REGMGR_ERROR_PRM_PROC_HOST = 0x800D0218,
  SCE_REGMGR_ERROR_NOTSUPPORTED = 0x800D0219,
  SCE_REGMGR_ERROR_MTX_SLEEP = 0x800D021A,
  SCE_REGMGR_ERROR_IO_READ = 0x800D021B,
  SCE_REGMGR_ERROR_IO_SEEK = 0x800D021C,
  SCE_REGMGR_ERROR_IO_WRITE = 0x800D021D,
  SCE_REGMGR_ERROR_PRM_PROC_DISCPLAYER = 0x800D021E,
  SCE_REGMGR_ERROR_PRM_PROC_WEBCORE = 0x800D021F,
  SCE_REGMGR_ERROR_PRM_BKUP_ADDR = 0x800D0220,
  SCE_REGMGR_ERROR_PRM_BKUP_SIZE = 0x800D0221,
  SCE_REGMGR_ERROR_BRK_BKUP_HEAD = 0x800D0222,
  SCE_REGMGR_ERROR_BRK_BKUP_DATA = 0x800D0223,
  SCE_REGMGR_ERROR_MGR_PRGBUG_MAX = 0x800D03FF,
  SCE_REGMGR_ERROR_DRV_BROKEN_MIN = 0x800D0400,
  SCE_REGMGR_ERROR_DRV_CONTDATA = 0x800D0401,
  SCE_REGMGR_ERROR_DRV_DATAFILE = 0x800D0402,
  SCE_REGMGR_ERROR_DRV_NOENT = 0x800D0403,
  SCE_REGMGR_ERROR_DRV_ERRIO = 0x800D0404,
  SCE_REGMGR_ERROR_DRV_READ = 0x800D0405,
  SCE_REGMGR_ERROR_DRV_WRITE = 0x800D0406,
  SCE_REGMGR_ERROR_DRV_FLUSH = 0x800D0407,
  SCE_REGMGR_ERROR_DRV_SYNC = 0x800D0408,
  SCE_REGMGR_ERROR_DRV_MKDIR = 0x800D0409,
  SCE_REGMGR_ERROR_DRV_IO_BASE = 0x800D0480,
  SCE_REGMGR_ERROR_DRV_IO_BUG_WHENCE = 0x800D0481,
  SCE_REGMGR_ERROR_DRV_IO_BUG_SIZE = 0x800D0482,
  SCE_REGMGR_ERROR_DRV_IO_BUG_NOMEM = 0x800D0483,
  SCE_REGMGR_ERROR_DRV_IO_BUG_NOINIT = 0x800D0484,
  SCE_REGMGR_ERROR_DRV_IO_BUG_TOOBIG = 0x800D0485,
  SCE_REGMGR_ERROR_DRV_BROKEN_MAX = 0x800D04FF,
  SCE_REGMGR_ERROR_DRV_UPDATE_MIN = 0x800D0500,
  SCE_REGMGR_ERROR_DRV_UPDATE_MAX = 0x800D05FF,
  SCE_REGMGR_ERROR_DRV_PRGBUG_MIN = 0x800D0600,
  SCE_REGMGR_ERROR_DRV_REINIT = 0x800D0601,
  SCE_REGMGR_ERROR_DRV_FILENAME = 0x800D0602,
  SCE_REGMGR_ERROR_DRV_NOINIT = 0x800D0603,
  SCE_REGMGR_ERROR_DRV_OVERCNT = 0x800D0604,
  SCE_REGMGR_ERROR_DRV_UNIQUEID = 0x800D0605,
  SCE_REGMGR_ERROR_DRV_DATASIZE = 0x800D0606,
  SCE_REGMGR_ERROR_DRV_DATATYPE = 0x800D0607,
  SCE_REGMGR_ERROR_DRV_FILEPOS = 0x800D0608,
  SCE_REGMGR_ERROR_DRV_FORMAT = 0x800D0609,
  SCE_REGMGR_ERROR_DRV_PRGBUG_MAX = 0x800D06FF,
  SCE_REGMGR_ERROR_INIT_MASK = 0x800D8000,
  SCE_REGMGR_ERROR_MGR_BROKEN_MIN_I = 0x800D8000,
  SCE_REGMGR_ERROR_NONVSDATA_I = 0x800D8001,
  SCE_REGMGR_ERROR_ERRNVSDATA_I = 0x800D8002,
  SCE_REGMGR_ERROR_ERREAPHEAD_I = 0x800D8003,
  SCE_REGMGR_ERROR_ERREAPCONT_I = 0x800D8004,
  SCE_REGMGR_ERROR_ERREAPDATA_I = 0x800D8005,
  SCE_REGMGR_ERROR_BACKUPVERSION_I = 0x800D8006,
  SCE_REGMGR_ERROR_MGR_BROKEN_MAX_I = 0x800D80FF,
  SCE_REGMGR_ERROR_MGR_UPDATE_MIN_I = 0x800D8100,
  SCE_REGMGR_ERROR_NOINITDB_I = 0x800D8101,
  SCE_REGMGR_ERROR_NODATA_I = 0x800D8102,
  SCE_REGMGR_ERROR_FORMAT_I = 0x800D8103,
  SCE_REGMGR_ERROR_OVERCNT_I = 0x800D8104,
  SCE_REGMGR_ERROR_REGIDERR_I = 0x800D8105,
  SCE_REGMGR_ERROR_MACNERR_I = 0x800D8106,
  SCE_REGMGR_ERROR_TYPEERR_I = 0x800D8107,
  SCE_REGMGR_ERROR_SIZEERR_I = 0x800D8108,
  SCE_REGMGR_ERROR_CACHEFLAG_I = 0x800D8109,
  SCE_REGMGR_ERROR_LEVELERR_I = 0x800D810A,
  SCE_REGMGR_ERROR_DBPOS_I = 0x800D810B,
  SCE_REGMGR_ERROR_EAPWRITE_I = 0x800D810C,
  SCE_REGMGR_ERROR_BKUPLEVEL_I = 0x800D810D,
  SCE_REGMGR_ERROR_GPSGERR_I = 0x800D810E,
  SCE_REGMGR_ERROR_NPSGERR_I = 0x800D810F,
  SCE_REGMGR_ERROR_HOSTERR_I = 0x800D8110,
  SCE_REGMGR_ERROR_HOWTOERR_I = 0x800D8111,
  SCE_REGMGR_ERROR_NUMCATERR_I = 0x800D8112,
  SCE_REGMGR_ERROR_VALUEERR_I = 0x800D8113,
  SCE_REGMGR_ERROR_PRODUCTCODE_I = 0x800D8114,
  SCE_REGMGR_ERROR_SPSGERR_I = 0x800D8115,
  SCE_REGMGR_ERROR_PRISTRFIL_I = 0x800D8116,
  SCE_REGMGR_ERROR_PRISTRDIR_I = 0x800D8117,
  SCE_REGMGR_ERROR_DANGOFLAG_I = 0x800D8118,
  SCE_REGMGR_ERROR_MGR_UPDATE_MAX_I = 0x800D81FF,
  SCE_REGMGR_ERROR_MGR_PRGBUG_MIN_I = 0x800D8200,
  SCE_REGMGR_ERROR_UNINITIALIZED_I = 0x800D8201,
  SCE_REGMGR_ERROR_PARAM_I = 0x800D8202,
  SCE_REGMGR_ERROR_PRM_REGID_I = 0x800D8203,
  SCE_REGMGR_ERROR_PRM_HASH_I = 0x800D8204,
  SCE_REGMGR_ERROR_PRM_PROPRG_I = 0x800D8205,
  SCE_REGMGR_ERROR_PRM_REGID_NUM_I = 0x800D8206,
  SCE_REGMGR_ERROR_PRM_TYPE_I = 0x800D8207,
  SCE_REGMGR_ERROR_PRM_SIZE_I = 0x800D8208,
  SCE_REGMGR_ERROR_PRM_INITLEVEL_I = 0x800D8209,
  SCE_REGMGR_ERROR_PRM_BKUPLEVEL_I = 0x800D820A,
  SCE_REGMGR_ERROR_PRM_PATH_I = 0x800D820B,
  SCE_REGMGR_ERROR_PRM_CANTRESET_I = 0x800D820C,
  SCE_REGMGR_ERROR_PRM_ERRORCODE_I = 0x800D820D,
  SCE_REGMGR_ERROR_NOTHING_I = 0x800D820E,
  SCE_REGMGR_ERROR_COPYIN_I = 0x800D820F,
  SCE_REGMGR_ERROR_COPYOUT_I = 0x800D8210,
  SCE_REGMGR_ERROR_NOMEMORY_I = 0x800D8211,
  SCE_REGMGR_ERROR_CACHEAREA_I = 0x800D8212,
  SCE_REGMGR_ERROR_HANDLER_REGIST_I = 0x800D8213,
  SCE_REGMGR_ERROR_PRM_PROC_GAME_LIB_I = 0x800D8214,
  SCE_REGMGR_ERROR_PRM_PROC_GAME_SDK_I = 0x800D8215,
  SCE_REGMGR_ERROR_PRM_PROC_NGAME_LIB_I = 0x800D8216,
  SCE_REGMGR_ERROR_PRM_PROC_NGAME_SDK_I = 0x800D8217,
  SCE_REGMGR_ERROR_PRM_PROC_HOST_I = 0x800D8218,
  SCE_REGMGR_ERROR_NOTSUPPORTED_I = 0x800D8219,
  SCE_REGMGR_ERROR_MTX_SLEEP_I = 0x800D821A,
  SCE_REGMGR_ERROR_IO_READ_I = 0x800D821B,
  SCE_REGMGR_ERROR_IO_SEEK_I = 0x800D821C,
  SCE_REGMGR_ERROR_IO_WRITE_I = 0x800D821D,
  SCE_REGMGR_ERROR_PRM_PROC_DISCPLAYER_I = 0x800D821E,
  SCE_REGMGR_ERROR_PRM_PROC_WEBCORE_I = 0x800D821F,
  SCE_REGMGR_ERROR_MGR_PRGBUG_MAX_I = 0x800D83FF,
  SCE_REGMGR_ERROR_DRV_BROKEN_MIN_I = 0x800D8400,
  SCE_REGMGR_ERROR_DRV_CONTDATA_I = 0x800D8401,
  SCE_REGMGR_ERROR_DRV_DATAFILE_I = 0x800D8402,
  SCE_REGMGR_ERROR_DRV_NOENT_I = 0x800D8403,
  SCE_REGMGR_ERROR_DRV_ERRIO_I = 0x800D8404,
  SCE_REGMGR_ERROR_DRV_READ_I = 0x800D8405,
  SCE_REGMGR_ERROR_DRV_WRITE_I = 0x800D8406,
  SCE_REGMGR_ERROR_DRV_FLUSH_I = 0x800D8407,
  SCE_REGMGR_ERROR_DRV_SYNC_I = 0x800D8408,
  SCE_REGMGR_ERROR_DRV_MKDIR_I = 0x800D8409,
  SCE_REGMGR_ERROR_DRV_IO_BASE_I = 0x800D8480,
  SCE_REGMGR_ERROR_DRV_IO_BUG_WHENCE_I = 0x800D8481,
  SCE_REGMGR_ERROR_DRV_IO_BUG_SIZE_I = 0x800D8482,
  SCE_REGMGR_ERROR_DRV_IO_BUG_NOMEM_I = 0x800D8483,
  SCE_REGMGR_ERROR_DRV_IO_BUG_NOINIT_I = 0x800D8484,
  SCE_REGMGR_ERROR_DRV_IO_BUG_TOOBIG_I = 0x800D8485,
  SCE_REGMGR_ERROR_DRV_BROKEN_MAX_I = 0x800D84FF,
  SCE_REGMGR_ERROR_DRV_UPDATE_MIN_I = 0x800D8500,
  SCE_REGMGR_ERROR_DRV_UPDATE_MAX_I = 0x800D85FF,
  SCE_REGMGR_ERROR_DRV_PRGBUG_MIN_I = 0x800D8600,
  SCE_REGMGR_ERROR_DRV_REINIT_I = 0x800D8601,
  SCE_REGMGR_ERROR_DRV_FILENAME_I = 0x800D8602,
  SCE_REGMGR_ERROR_DRV_NOINIT_I = 0x800D8603,
  SCE_REGMGR_ERROR_DRV_OVERCNT_I = 0x800D8604,
  SCE_REGMGR_ERROR_DRV_UNIQUEID_I = 0x800D8605,
  SCE_REGMGR_ERROR_DRV_DATASIZE_I = 0x800D8606,
  SCE_REGMGR_ERROR_DRV_DATATYPE_I = 0x800D8607,
  SCE_REGMGR_ERROR_DRV_FILEPOS_I = 0x800D8608,
  SCE_REGMGR_ERROR_DRV_FORMAT_I = 0x800D8609,
  SCE_REGMGR_ERROR_DRV_PRGBUG_MAX_I = 0x800D86FF,
  SCE_IPMIMGR_ERROR_ERROR = 0x800E0000,
  SCE_IPMIMGR_ERROR_ILLEGAL_SIZE = 0x800E0001,
  SCE_IPMIMGR_ERROR_COPYIN = 0x800E0020,
  SCE_IPMIMGR_ERROR_COPYOUT = 0x800E0021,
  SCE_IPMIMGR_ERROR_REGISTER_HANDLER = 0x800E0040,
  SCE_SBL_ERROR_COMMON_EPERM = 0x800F0001,
  SCE_SBL_ERROR_COMMON_ENOENT = 0x800F0002,
  SCE_SBL_ERROR_COMMON_ESRCH = 0x800F0003,
  SCE_SBL_ERROR_COMMON_EINTR = 0x800F0004,
  SCE_SBL_ERROR_COMMON_EIO = 0x800F0005,
  SCE_SBL_ERROR_COMMON_ENOEXEC = 0x800F0008,
  SCE_SBL_ERROR_COMMON_EAGAIN = 0x800F000B,
  SCE_SBL_ERROR_COMMON_ENOMEM = 0x800F000C,
  SCE_SBL_ERROR_COMMON_EACCES = 0x800F000D,
  SCE_SBL_ERROR_COMMON_EFAULT = 0x800F000E,
  SCE_SBL_ERROR_COMMON_EBUSY = 0x800F0010,
  SCE_SBL_ERROR_COMMON_EEXIST = 0x800F0011,
  SCE_SBL_ERROR_COMMON_ENODEV = 0x800F0013,
  SCE_SBL_ERROR_COMMON_EINVAL = 0x800F0016,
  SCE_SBL_ERROR_COMMON_ENOSPC = 0x800F001C,
  SCE_SBL_ERROR_COMMON_ERANGE = 0x800F0022,
  SCE_SBL_ERROR_COMMON_EFMT = 0x800F0023,
  SCE_SBL_ERROR_COMMON_ESIGN = 0x800F0024,
  SCE_SBL_ERROR_COMMON_ENOTSUP = 0x800F0025,
  SCE_SBL_ERROR_COMMON_EDATA = 0x800F0026,
  SCE_SBL_ERROR_COMMON_ETIMEDOUT = 0x800F0027,
  SCE_SBL_ERROR_COMMON_ESTAT = 0x800F0028,
  SCE_SBL_ERROR_COMMON_ESTACK = 0x800F0029,
  SCE_SBL_ERROR_COMMON_ENEEDAUTH = 0x800F002A,
  SCE_SBL_ERROR_COMMON_EBADMSG = 0x800F002B,
  SCE_SBL_ERROR_COMMON_EREVOKED = 0x800F002C,
  SCE_SBL_ERROR_COMMON_ENOATTR = 0x800F002D,
  SCE_SBL_ERROR_COMMON_EVER = 0x800F002E,
  SCE_SBL_ERROR_COMMON_EPLATFORM = 0x800F002F,
  SCE_SBL_ERROR_COMMON_EPOWER = 0x800F0030,
  SCE_SBL_ERROR_COMMON_ECLOCK = 0x800F0031,
  SCE_SBL_ERROR_COMMON_ENOTINITIALIZED = 0x800F0032,
  SCE_SBL_ERROR_COMMON_EXPIRED = 0x800F0033,
  SCE_SBL_ERROR_COMMON_EFORMAT = 0x800F0034,
  SCE_SBL_ERROR_COMMON_EAUTHFAIL = 0x800F0035,
  SCE_SBL_ERROR_COMMON_KEY_DIFFER = 0x800F0036,
  SCE_SBL_ERROR_COMMON_ESYSVER = 0x800F0037,
  SCE_SBL_ERROR_COMMON_ESYSEXVER = 0x800F0038,
  SCE_SBL_ERROR_COMMON_EPURPOSE = 0x800F0039,
  SCE_SBL_ERROR_COMMON_EPATH = 0x800F003A,
  SCE_SBL_ERROR_COMMON_EMODE = 0x800F003B,
  SCE_SBL_ERROR_COMMON_EQAF = 0x800F003C,
  SCE_SBL_ERROR_COMMON_UNOPENED_LICENSE = 0x800F003D,
  SCE_SBL_ERROR_SK_EPERM = 0x800F0101,
  SCE_SBL_ERROR_SK_ENOENT = 0x800F0102,
  SCE_SBL_ERROR_SK_ESRCH = 0x800F0103,
  SCE_SBL_ERROR_SK_EINTR = 0x800F0104,
  SCE_SBL_ERROR_SK_EIO = 0x800F0105,
  SCE_SBL_ERROR_SK_ENOEXEC = 0x800F0108,
  SCE_SBL_ERROR_SK_EAGAIN = 0x800F010B,
  SCE_SBL_ERROR_SK_ENOMEM = 0x800F010C,
  SCE_SBL_ERROR_SK_EACCES = 0x800F010D,
  SCE_SBL_ERROR_SK_EFAULT = 0x800F010E,
  SCE_SBL_ERROR_SK_EBUSY = 0x800F0110,
  SCE_SBL_ERROR_SK_EEXIST = 0x800F0111,
  SCE_SBL_ERROR_SK_ENODEV = 0x800F0113,
  SCE_SBL_ERROR_SK_EINVAL = 0x800F0116,
  SCE_SBL_ERROR_SK_ENOSPC = 0x800F011C,
  SCE_SBL_ERROR_SK_ERANGE = 0x800F0122,
  SCE_SBL_ERROR_SK_EFMT = 0x800F0123,
  SCE_SBL_ERROR_SK_ESIGN = 0x800F0124,
  SCE_SBL_ERROR_SK_ENOTSUP = 0x800F0125,
  SCE_SBL_ERROR_SK_EDATA = 0x800F0126,
  SCE_SBL_ERROR_SK_ETIMEDOUT = 0x800F0127,
  SCE_SBL_ERROR_SK_ESTAT = 0x800F0128,
  SCE_SBL_ERROR_SK_ESTACK = 0x800F0129,
  SCE_SBL_ERROR_SK_ENEEDAUTH = 0x800F012A,
  SCE_SBL_ERROR_SK_EBADMSG = 0x800F012B,
  SCE_SBL_ERROR_SK_EREVOKED = 0x800F012C,
  SCE_SBL_ERROR_SK_ENOATTR = 0x800F012D,
  SCE_SBL_ERROR_SK_EVER = 0x800F012E,
  SCE_SBL_ERROR_SK_EPLATFORM = 0x800F012F,
  SCE_SBL_ERROR_SK_EPOWER = 0x800F0130,
  SCE_SBL_ERROR_SK_ECLOCK = 0x800F0131,
  SCE_SBL_ERROR_SK_ENOTINITIALIZED = 0x800F0132,
  SCE_SBL_ERROR_SK_EXPIRED = 0x800F0133,
  SCE_SBL_ERROR_SK_EFORMAT = 0x800F0134,
  SCE_SBL_ERROR_SK_EAUTHFAIL = 0x800F0135,
  SCE_SBL_ERROR_SK_KEY_DIFFER = 0x800F0136,
  SCE_SBL_ERROR_SK_ESYSVER = 0x800F0137,
  SCE_SBL_ERROR_SK_ESYSEXVER = 0x800F0138,
  SCE_SBL_ERROR_SK_EPURPOSE = 0x800F0139,
  SCE_SBL_ERROR_SK_EPATH = 0x800F013A,
  SCE_SBL_ERROR_SK_EMODE = 0x800F013B,
  SCE_SBL_ERROR_SK_EQAF = 0x800F013C,
  SCE_SBL_ERROR_SK_UNOPENED_LICENSE = 0x800F013D,
  SCE_SBL_ERROR_SL_EPERM = 0x800F0201,
  SCE_SBL_ERROR_SL_ENOENT = 0x800F0202,
  SCE_SBL_ERROR_SL_ESRCH = 0x800F0203,
  SCE_SBL_ERROR_SL_EINTR = 0x800F0204,
  SCE_SBL_ERROR_SL_EIO = 0x800F0205,
  SCE_SBL_ERROR_SL_ENOEXEC = 0x800F0208,
  SCE_SBL_ERROR_SL_EAGAIN = 0x800F020B,
  SCE_SBL_ERROR_SL_ENOMEM = 0x800F020C,
  SCE_SBL_ERROR_SL_EACCES = 0x800F020D,
  SCE_SBL_ERROR_SL_EFAULT = 0x800F020E,
  SCE_SBL_ERROR_SL_EBUSY = 0x800F0210,
  SCE_SBL_ERROR_SL_EEXIST = 0x800F0211,
  SCE_SBL_ERROR_SL_ENODEV = 0x800F0213,
  SCE_SBL_ERROR_SL_EINVAL = 0x800F0216,
  SCE_SBL_ERROR_SL_ENOSPC = 0x800F021C,
  SCE_SBL_ERROR_SL_ERANGE = 0x800F0222,
  SCE_SBL_ERROR_SL_EFMT = 0x800F0223,
  SCE_SBL_ERROR_SL_ESIGN = 0x800F0224,
  SCE_SBL_ERROR_SL_ENOTSUP = 0x800F0225,
  SCE_SBL_ERROR_SL_EDATA = 0x800F0226,
  SCE_SBL_ERROR_SL_ETIMEDOUT = 0x800F0227,
  SCE_SBL_ERROR_SL_ESTAT = 0x800F0228,
  SCE_SBL_ERROR_SL_ESTACK = 0x800F0229,
  SCE_SBL_ERROR_SL_ENEEDAUTH = 0x800F022A,
  SCE_SBL_ERROR_SL_EBADMSG = 0x800F022B,
  SCE_SBL_ERROR_SL_EREVOKED = 0x800F022C,
  SCE_SBL_ERROR_SL_ENOATTR = 0x800F022D,
  SCE_SBL_ERROR_SL_EVER = 0x800F022E,
  SCE_SBL_ERROR_SL_EPLATFORM = 0x800F022F,
  SCE_SBL_ERROR_SL_EPOWER = 0x800F0230,
  SCE_SBL_ERROR_SL_ECLOCK = 0x800F0231,
  SCE_SBL_ERROR_SL_ENOTINITIALIZED = 0x800F0232,
  SCE_SBL_ERROR_SL_EXPIRED = 0x800F0233,
  SCE_SBL_ERROR_SL_EFORMAT = 0x800F0234,
  SCE_SBL_ERROR_SL_EAUTHFAIL = 0x800F0235,
  SCE_SBL_ERROR_SL_KEY_DIFFER = 0x800F0236,
  SCE_SBL_ERROR_SL_ESYSVER = 0x800F0237,
  SCE_SBL_ERROR_SL_ESYSEXVER = 0x800F0238,
  SCE_SBL_ERROR_SL_EPURPOSE = 0x800F0239,
  SCE_SBL_ERROR_SL_EPATH = 0x800F023A,
  SCE_SBL_ERROR_SL_EMODE = 0x800F023B,
  SCE_SBL_ERROR_SL_EQAF = 0x800F023C,
  SCE_SBL_ERROR_SL_UNOPENED_LICENSE = 0x800F023D,
  SCE_SBL_ERROR_DRV_EPERM = 0x800F0301,
  SCE_SBL_ERROR_DRV_ENOENT = 0x800F0302,
  SCE_SBL_ERROR_DRV_ESRCH = 0x800F0303,
  SCE_SBL_ERROR_DRV_EINTR = 0x800F0304,
  SCE_SBL_ERROR_DRV_EIO = 0x800F0305,
  SCE_SBL_ERROR_DRV_ENOEXEC = 0x800F0308,
  SCE_SBL_ERROR_DRV_EAGAIN = 0x800F030B,
  SCE_SBL_ERROR_DRV_ENOMEM = 0x800F030C,
  SCE_SBL_ERROR_DRV_EACCES = 0x800F030D,
  SCE_SBL_ERROR_DRV_EFAULT = 0x800F030E,
  SCE_SBL_ERROR_DRV_EBUSY = 0x800F0310,
  SCE_SBL_ERROR_DRV_EEXIST = 0x800F0311,
  SCE_SBL_ERROR_DRV_ENODEV = 0x800F0313,
  SCE_SBL_ERROR_DRV_EINVAL = 0x800F0316,
  SCE_SBL_ERROR_DRV_ENOSPC = 0x800F031C,
  SCE_SBL_ERROR_DRV_ERANGE = 0x800F0322,
  SCE_SBL_ERROR_DRV_EFMT = 0x800F0323,
  SCE_SBL_ERROR_DRV_ESIGN = 0x800F0324,
  SCE_SBL_ERROR_DRV_ENOTSUP = 0x800F0325,
  SCE_SBL_ERROR_DRV_EDATA = 0x800F0326,
  SCE_SBL_ERROR_DRV_ETIMEDOUT = 0x800F0327,
  SCE_SBL_ERROR_DRV_ESTAT = 0x800F0328,
  SCE_SBL_ERROR_DRV_ESTACK = 0x800F0329,
  SCE_SBL_ERROR_DRV_ENEEDAUTH = 0x800F032A,
  SCE_SBL_ERROR_DRV_EBADMSG = 0x800F032B,
  SCE_SBL_ERROR_DRV_EREVOKED = 0x800F032C,
  SCE_SBL_ERROR_DRV_ENOATTR = 0x800F032D,
  SCE_SBL_ERROR_DRV_EVER = 0x800F032E,
  SCE_SBL_ERROR_DRV_EPLATFORM = 0x800F032F,
  SCE_SBL_ERROR_DRV_EPOWER = 0x800F0330,
  SCE_SBL_ERROR_DRV_ECLOCK = 0x800F0331,
  SCE_SBL_ERROR_DRV_ENOTINITIALIZED = 0x800F0332,
  SCE_SBL_ERROR_DRV_EXPIRED = 0x800F0333,
  SCE_SBL_ERROR_DRV_EFORMAT = 0x800F0334,
  SCE_SBL_ERROR_DRV_EAUTHFAIL = 0x800F0335,
  SCE_SBL_ERROR_DRV_KEY_DIFFER = 0x800F0336,
  SCE_SBL_ERROR_DRV_ESYSVER = 0x800F0337,
  SCE_SBL_ERROR_DRV_ESYSEXVER = 0x800F0338,
  SCE_SBL_ERROR_DRV_EPURPOSE = 0x800F0339,
  SCE_SBL_ERROR_DRV_EPATH = 0x800F033A,
  SCE_SBL_ERROR_DRV_EMODE = 0x800F033B,
  SCE_SBL_ERROR_DRV_EQAF = 0x800F033C,
  SCE_SBL_ERROR_DRV_UNOPENED_LICENSE = 0x800F033D,
  SCE_SBL_ERROR_SERV_EPERM = 0x800F0401,
  SCE_SBL_ERROR_SERV_ENOENT = 0x800F0402,
  SCE_SBL_ERROR_SERV_ESRCH = 0x800F0403,
  SCE_SBL_ERROR_SERV_EINTR = 0x800F0404,
  SCE_SBL_ERROR_SERV_EIO = 0x800F0405,
  SCE_SBL_ERROR_SERV_ENOEXEC = 0x800F0408,
  SCE_SBL_ERROR_SERV_EAGAIN = 0x800F040B,
  SCE_SBL_ERROR_SERV_ENOMEM = 0x800F040C,
  SCE_SBL_ERROR_SERV_EACCES = 0x800F040D,
  SCE_SBL_ERROR_SERV_EFAULT = 0x800F040E,
  SCE_SBL_ERROR_SERV_EBUSY = 0x800F0410,
  SCE_SBL_ERROR_SERV_EEXIST = 0x800F0411,
  SCE_SBL_ERROR_SERV_ENODEV = 0x800F0413,
  SCE_SBL_ERROR_SERV_EINVAL = 0x800F0416,
  SCE_SBL_ERROR_SERV_ENOSPC = 0x800F041C,
  SCE_SBL_ERROR_SERV_ERANGE = 0x800F0422,
  SCE_SBL_ERROR_SERV_EFMT = 0x800F0423,
  SCE_SBL_ERROR_SERV_ESIGN = 0x800F0424,
  SCE_SBL_ERROR_SERV_ENOTSUP = 0x800F0425,
  SCE_SBL_ERROR_SERV_EDATA = 0x800F0426,
  SCE_SBL_ERROR_SERV_ETIMEDOUT = 0x800F0427,
  SCE_SBL_ERROR_SERV_ESTAT = 0x800F0428,
  SCE_SBL_ERROR_SERV_ESTACK = 0x800F0429,
  SCE_SBL_ERROR_SERV_ENEEDAUTH = 0x800F042A,
  SCE_SBL_ERROR_SERV_EBADMSG = 0x800F042B,
  SCE_SBL_ERROR_SERV_EREVOKED = 0x800F042C,
  SCE_SBL_ERROR_SERV_ENOATTR = 0x800F042D,
  SCE_SBL_ERROR_SERV_EVER = 0x800F042E,
  SCE_SBL_ERROR_SERV_EPLATFORM = 0x800F042F,
  SCE_SBL_ERROR_SERV_EPOWER = 0x800F0430,
  SCE_SBL_ERROR_SERV_ECLOCK = 0x800F0431,
  SCE_SBL_ERROR_SERV_ENOTINITIALIZED = 0x800F0432,
  SCE_SBL_ERROR_SERV_EXPIRED = 0x800F0433,
  SCE_SBL_ERROR_SERV_EFORMAT = 0x800F0434,
  SCE_SBL_ERROR_SERV_EAUTHFAIL = 0x800F0435,
  SCE_SBL_ERROR_SERV_KEY_DIFFER = 0x800F0436,
  SCE_SBL_ERROR_SERV_ESYSVER = 0x800F0437,
  SCE_SBL_ERROR_SERV_ESYSEXVER = 0x800F0438,
  SCE_SBL_ERROR_SERV_EPURPOSE = 0x800F0439,
  SCE_SBL_ERROR_SERV_EPATH = 0x800F043A,
  SCE_SBL_ERROR_SERV_EMODE = 0x800F043B,
  SCE_SBL_ERROR_SERV_EQAF = 0x800F043C,
  SCE_SBL_ERROR_SERV_UNOPENED_LICENSE = 0x800F043D,
  SCE_SBL_ERROR_SRTC_EPERM = 0x800F0501,
  SCE_SBL_ERROR_SRTC_ENOENT = 0x800F0502,
  SCE_SBL_ERROR_SRTC_ESRCH = 0x800F0503,
  SCE_SBL_ERROR_SRTC_EINTR = 0x800F0504,
  SCE_SBL_ERROR_SRTC_EIO = 0x800F0505,
  SCE_SBL_ERROR_SRTC_ENOEXEC = 0x800F0508,
  SCE_SBL_ERROR_SRTC_EAGAIN = 0x800F050B,
  SCE_SBL_ERROR_SRTC_ENOMEM = 0x800F050C,
  SCE_SBL_ERROR_SRTC_EACCES = 0x800F050D,
  SCE_SBL_ERROR_SRTC_EFAULT = 0x800F050E,
  SCE_SBL_ERROR_SRTC_EBUSY = 0x800F0510,
  SCE_SBL_ERROR_SRTC_EEXIST = 0x800F0511,
  SCE_SBL_ERROR_SRTC_ENODEV = 0x800F0513,
  SCE_SBL_ERROR_SRTC_EINVAL = 0x800F0516,
  SCE_SBL_ERROR_SRTC_ENOSPC = 0x800F051C,
  SCE_SBL_ERROR_SRTC_ERANGE = 0x800F0522,
  SCE_SBL_ERROR_SRTC_EFMT = 0x800F0523,
  SCE_SBL_ERROR_SRTC_ESIGN = 0x800F0524,
  SCE_SBL_ERROR_SRTC_ENOTSUP = 0x800F0525,
  SCE_SBL_ERROR_SRTC_EDATA = 0x800F0526,
  SCE_SBL_ERROR_SRTC_ETIMEDOUT = 0x800F0527,
  SCE_SBL_ERROR_SRTC_ESTAT = 0x800F0528,
  SCE_SBL_ERROR_SRTC_ESTACK = 0x800F0529,
  SCE_SBL_ERROR_SRTC_ENEEDAUTH = 0x800F052A,
  SCE_SBL_ERROR_SRTC_EBADMSG = 0x800F052B,
  SCE_SBL_ERROR_SRTC_EREVOKED = 0x800F052C,
  SCE_SBL_ERROR_SRTC_ENOATTR = 0x800F052D,
  SCE_SBL_ERROR_SRTC_EVER = 0x800F052E,
  SCE_SBL_ERROR_SRTC_EPLATFORM = 0x800F052F,
  SCE_SBL_ERROR_SRTC_EPOWER = 0x800F0530,
  SCE_SBL_ERROR_SRTC_ECLOCK = 0x800F0531,
  SCE_SBL_ERROR_SRTC_ENOTINITIALIZED = 0x800F0532,
  SCE_SBL_ERROR_SRTC_EXPIRED = 0x800F0533,
  SCE_SBL_ERROR_SRTC_EFORMAT = 0x800F0534,
  SCE_SBL_ERROR_SRTC_EAUTHFAIL = 0x800F0535,
  SCE_SBL_ERROR_SRTC_KEY_DIFFER = 0x800F0536,
  SCE_SBL_ERROR_SRTC_ESYSVER = 0x800F0537,
  SCE_SBL_ERROR_SRTC_ESYSEXVER = 0x800F0538,
  SCE_SBL_ERROR_SRTC_EPURPOSE = 0x800F0539,
  SCE_SBL_ERROR_SRTC_EPATH = 0x800F053A,
  SCE_SBL_ERROR_SRTC_EMODE = 0x800F053B,
  SCE_SBL_ERROR_SRTC_EQAF = 0x800F053C,
  SCE_SBL_ERROR_SRTC_UNOPENED_LICENSE = 0x800F053D,
  SCE_SBL_ERROR_DEVACT_EPERM = 0x800F0601,
  SCE_SBL_ERROR_DEVACT_ENOENT = 0x800F0602,
  SCE_SBL_ERROR_DEVACT_ESRCH = 0x800F0603,
  SCE_SBL_ERROR_DEVACT_EINTR = 0x800F0604,
  SCE_SBL_ERROR_DEVACT_EIO = 0x800F0605,
  SCE_SBL_ERROR_DEVACT_ENOEXEC = 0x800F0608,
  SCE_SBL_ERROR_DEVACT_EAGAIN = 0x800F060B,
  SCE_SBL_ERROR_DEVACT_ENOMEM = 0x800F060C,
  SCE_SBL_ERROR_DEVACT_EACCES = 0x800F060D,
  SCE_SBL_ERROR_DEVACT_EFAULT = 0x800F060E,
  SCE_SBL_ERROR_DEVACT_EBUSY = 0x800F0610,
  SCE_SBL_ERROR_DEVACT_EEXIST = 0x800F0611,
  SCE_SBL_ERROR_DEVACT_ENODEV = 0x800F0613,
  SCE_SBL_ERROR_DEVACT_EINVAL = 0x800F0616,
  SCE_SBL_ERROR_DEVACT_ENOSPC = 0x800F061C,
  SCE_SBL_ERROR_DEVACT_ERANGE = 0x800F0622,
  SCE_SBL_ERROR_DEVACT_EFMT = 0x800F0623,
  SCE_SBL_ERROR_DEVACT_ESIGN = 0x800F0624,
  SCE_SBL_ERROR_DEVACT_ENOTSUP = 0x800F0625,
  SCE_SBL_ERROR_DEVACT_EDATA = 0x800F0626,
  SCE_SBL_ERROR_DEVACT_ETIMEDOUT = 0x800F0627,
  SCE_SBL_ERROR_DEVACT_ESTAT = 0x800F0628,
  SCE_SBL_ERROR_DEVACT_ESTACK = 0x800F0629,
  SCE_SBL_ERROR_DEVACT_ENEEDAUTH = 0x800F062A,
  SCE_SBL_ERROR_DEVACT_EBADMSG = 0x800F062B,
  SCE_SBL_ERROR_DEVACT_EREVOKED = 0x800F062C,
  SCE_SBL_ERROR_DEVACT_ENOATTR = 0x800F062D,
  SCE_SBL_ERROR_DEVACT_EVER = 0x800F062E,
  SCE_SBL_ERROR_DEVACT_EPLATFORM = 0x800F062F,
  SCE_SBL_ERROR_DEVACT_EPOWER = 0x800F0630,
  SCE_SBL_ERROR_DEVACT_ECLOCK = 0x800F0631,
  SCE_SBL_ERROR_DEVACT_ENOTINITIALIZED = 0x800F0632,
  SCE_SBL_ERROR_DEVACT_EXPIRED = 0x800F0633,
  SCE_SBL_ERROR_DEVACT_EFORMAT = 0x800F0634,
  SCE_SBL_ERROR_DEVACT_EAUTHFAIL = 0x800F0635,
  SCE_SBL_ERROR_DEVACT_KEY_DIFFER = 0x800F0636,
  SCE_SBL_ERROR_DEVACT_ESYSVER = 0x800F0637,
  SCE_SBL_ERROR_DEVACT_ESYSEXVER = 0x800F0638,
  SCE_SBL_ERROR_DEVACT_EPURPOSE = 0x800F0639,
  SCE_SBL_ERROR_DEVACT_EPATH = 0x800F063A,
  SCE_SBL_ERROR_DEVACT_EMODE = 0x800F063B,
  SCE_SBL_ERROR_DEVACT_EQAF = 0x800F063C,
  SCE_SBL_ERROR_DEVACT_UNOPENED_LICENSE = 0x800F063D,
  SCE_SBL_ERROR_VTRM_EPERM = 0x800F0701,
  SCE_SBL_ERROR_VTRM_ENOENT = 0x800F0702,
  SCE_SBL_ERROR_VTRM_ESRCH = 0x800F0703,
  SCE_SBL_ERROR_VTRM_EINTR = 0x800F0704,
  SCE_SBL_ERROR_VTRM_EIO = 0x800F0705,
  SCE_SBL_ERROR_VTRM_ENOEXEC = 0x800F0708,
  SCE_SBL_ERROR_VTRM_EAGAIN = 0x800F070B,
  SCE_SBL_ERROR_VTRM_ENOMEM = 0x800F070C,
  SCE_SBL_ERROR_VTRM_EACCES = 0x800F070D,
  SCE_SBL_ERROR_VTRM_EFAULT = 0x800F070E,
  SCE_SBL_ERROR_VTRM_EBUSY = 0x800F0710,
  SCE_SBL_ERROR_VTRM_EEXIST = 0x800F0711,
  SCE_SBL_ERROR_VTRM_ENODEV = 0x800F0713,
  SCE_SBL_ERROR_VTRM_EINVAL = 0x800F0716,
  SCE_SBL_ERROR_VTRM_ENOSPC = 0x800F071C,
  SCE_SBL_ERROR_VTRM_ERANGE = 0x800F0722,
  SCE_SBL_ERROR_VTRM_EFMT = 0x800F0723,
  SCE_SBL_ERROR_VTRM_ESIGN = 0x800F0724,
  SCE_SBL_ERROR_VTRM_ENOTSUP = 0x800F0725,
  SCE_SBL_ERROR_VTRM_EDATA = 0x800F0726,
  SCE_SBL_ERROR_VTRM_ETIMEDOUT = 0x800F0727,
  SCE_SBL_ERROR_VTRM_ESTAT = 0x800F0728,
  SCE_SBL_ERROR_VTRM_ESTACK = 0x800F0729,
  SCE_SBL_ERROR_VTRM_ENEEDAUTH = 0x800F072A,
  SCE_SBL_ERROR_VTRM_EBADMSG = 0x800F072B,
  SCE_SBL_ERROR_VTRM_EREVOKED = 0x800F072C,
  SCE_SBL_ERROR_VTRM_ENOATTR = 0x800F072D,
  SCE_SBL_ERROR_VTRM_EVER = 0x800F072E,
  SCE_SBL_ERROR_VTRM_EPLATFORM = 0x800F072F,
  SCE_SBL_ERROR_VTRM_EPOWER = 0x800F0730,
  SCE_SBL_ERROR_VTRM_ECLOCK = 0x800F0731,
  SCE_SBL_ERROR_VTRM_ENOTINITIALIZED = 0x800F0732,
  SCE_SBL_ERROR_VTRM_EXPIRED = 0x800F0733,
  SCE_SBL_ERROR_VTRM_EFORMAT = 0x800F0734,
  SCE_SBL_ERROR_VTRM_EAUTHFAIL = 0x800F0735,
  SCE_SBL_ERROR_VTRM_KEY_DIFFER = 0x800F0736,
  SCE_SBL_ERROR_VTRM_ESYSVER = 0x800F0737,
  SCE_SBL_ERROR_VTRM_ESYSEXVER = 0x800F0738,
  SCE_SBL_ERROR_VTRM_EPURPOSE = 0x800F0739,
  SCE_SBL_ERROR_VTRM_EPATH = 0x800F073A,
  SCE_SBL_ERROR_VTRM_EMODE = 0x800F073B,
  SCE_SBL_ERROR_VTRM_EQAF = 0x800F073C,
  SCE_SBL_ERROR_VTRM_UNOPENED_LICENSE = 0x800F073D,
  SCE_SBL_ERROR_IDATA_EPERM = 0x800F0801,
  SCE_SBL_ERROR_IDATA_ENOENT = 0x800F0802,
  SCE_SBL_ERROR_IDATA_ESRCH = 0x800F0803,
  SCE_SBL_ERROR_IDATA_EINTR = 0x800F0804,
  SCE_SBL_ERROR_IDATA_EIO = 0x800F0805,
  SCE_SBL_ERROR_IDATA_ENOEXEC = 0x800F0808,
  SCE_SBL_ERROR_IDATA_EAGAIN = 0x800F080B,
  SCE_SBL_ERROR_IDATA_ENOMEM = 0x800F080C,
  SCE_SBL_ERROR_IDATA_EACCES = 0x800F080D,
  SCE_SBL_ERROR_IDATA_EFAULT = 0x800F080E,
  SCE_SBL_ERROR_IDATA_EBUSY = 0x800F0810,
  SCE_SBL_ERROR_IDATA_EEXIST = 0x800F0811,
  SCE_SBL_ERROR_IDATA_ENODEV = 0x800F0813,
  SCE_SBL_ERROR_IDATA_EINVAL = 0x800F0816,
  SCE_SBL_ERROR_IDATA_ENOSPC = 0x800F081C,
  SCE_SBL_ERROR_IDATA_ERANGE = 0x800F0822,
  SCE_SBL_ERROR_IDATA_EFMT = 0x800F0823,
  SCE_SBL_ERROR_IDATA_ESIGN = 0x800F0824,
  SCE_SBL_ERROR_IDATA_ENOTSUP = 0x800F0825,
  SCE_SBL_ERROR_IDATA_EDATA = 0x800F0826,
  SCE_SBL_ERROR_IDATA_ETIMEDOUT = 0x800F0827,
  SCE_SBL_ERROR_IDATA_ESTAT = 0x800F0828,
  SCE_SBL_ERROR_IDATA_ESTACK = 0x800F0829,
  SCE_SBL_ERROR_IDATA_ENEEDAUTH = 0x800F082A,
  SCE_SBL_ERROR_IDATA_EBADMSG = 0x800F082B,
  SCE_SBL_ERROR_IDATA_EREVOKED = 0x800F082C,
  SCE_SBL_ERROR_IDATA_ENOATTR = 0x800F082D,
  SCE_SBL_ERROR_IDATA_EVER = 0x800F082E,
  SCE_SBL_ERROR_IDATA_EPLATFORM = 0x800F082F,
  SCE_SBL_ERROR_IDATA_EPOWER = 0x800F0830,
  SCE_SBL_ERROR_IDATA_ECLOCK = 0x800F0831,
  SCE_SBL_ERROR_IDATA_ENOTINITIALIZED = 0x800F0832,
  SCE_SBL_ERROR_IDATA_EXPIRED = 0x800F0833,
  SCE_SBL_ERROR_IDATA_EFORMAT = 0x800F0834,
  SCE_SBL_ERROR_IDATA_EAUTHFAIL = 0x800F0835,
  SCE_SBL_ERROR_IDATA_KEY_DIFFER = 0x800F0836,
  SCE_SBL_ERROR_IDATA_ESYSVER = 0x800F0837,
  SCE_SBL_ERROR_IDATA_ESYSEXVER = 0x800F0838,
  SCE_SBL_ERROR_IDATA_EPURPOSE = 0x800F0839,
  SCE_SBL_ERROR_IDATA_EPATH = 0x800F083A,
  SCE_SBL_ERROR_IDATA_EMODE = 0x800F083B,
  SCE_SBL_ERROR_IDATA_EQAF = 0x800F083C,
  SCE_SBL_ERROR_IDATA_UNOPENED_LICENSE = 0x800F083D,
  SCE_SBL_ERROR_RNG_EPERM = 0x800F0901,
  SCE_SBL_ERROR_RNG_ENOENT = 0x800F0902,
  SCE_SBL_ERROR_RNG_ESRCH = 0x800F0903,
  SCE_SBL_ERROR_RNG_EINTR = 0x800F0904,
  SCE_SBL_ERROR_RNG_EIO = 0x800F0905,
  SCE_SBL_ERROR_RNG_ENOEXEC = 0x800F0908,
  SCE_SBL_ERROR_RNG_EAGAIN = 0x800F090B,
  SCE_SBL_ERROR_RNG_ENOMEM = 0x800F090C,
  SCE_SBL_ERROR_RNG_EACCES = 0x800F090D,
  SCE_SBL_ERROR_RNG_EFAULT = 0x800F090E,
  SCE_SBL_ERROR_RNG_EBUSY = 0x800F0910,
  SCE_SBL_ERROR_RNG_EEXIST = 0x800F0911,
  SCE_SBL_ERROR_RNG_ENODEV = 0x800F0913,
  SCE_SBL_ERROR_RNG_EINVAL = 0x800F0916,
  SCE_SBL_ERROR_RNG_ENOSPC = 0x800F091C,
  SCE_SBL_ERROR_RNG_ERANGE = 0x800F0922,
  SCE_SBL_ERROR_RNG_EFMT = 0x800F0923,
  SCE_SBL_ERROR_RNG_ESIGN = 0x800F0924,
  SCE_SBL_ERROR_RNG_ENOTSUP = 0x800F0925,
  SCE_SBL_ERROR_RNG_EDATA = 0x800F0926,
  SCE_SBL_ERROR_RNG_ETIMEDOUT = 0x800F0927,
  SCE_SBL_ERROR_RNG_ESTAT = 0x800F0928,
  SCE_SBL_ERROR_RNG_ESTACK = 0x800F0929,
  SCE_SBL_ERROR_RNG_ENEEDAUTH = 0x800F092A,
  SCE_SBL_ERROR_RNG_EBADMSG = 0x800F092B,
  SCE_SBL_ERROR_RNG_EREVOKED = 0x800F092C,
  SCE_SBL_ERROR_RNG_ENOATTR = 0x800F092D,
  SCE_SBL_ERROR_RNG_EVER = 0x800F092E,
  SCE_SBL_ERROR_RNG_EPLATFORM = 0x800F092F,
  SCE_SBL_ERROR_RNG_EPOWER = 0x800F0930,
  SCE_SBL_ERROR_RNG_ECLOCK = 0x800F0931,
  SCE_SBL_ERROR_RNG_ENOTINITIALIZED = 0x800F0932,
  SCE_SBL_ERROR_RNG_EXPIRED = 0x800F0933,
  SCE_SBL_ERROR_RNG_EFORMAT = 0x800F0934,
  SCE_SBL_ERROR_RNG_EAUTHFAIL = 0x800F0935,
  SCE_SBL_ERROR_RNG_KEY_DIFFER = 0x800F0936,
  SCE_SBL_ERROR_RNG_ESYSVER = 0x800F0937,
  SCE_SBL_ERROR_RNG_ESYSEXVER = 0x800F0938,
  SCE_SBL_ERROR_RNG_EPURPOSE = 0x800F0939,
  SCE_SBL_ERROR_RNG_EPATH = 0x800F093A,
  SCE_SBL_ERROR_RNG_EMODE = 0x800F093B,
  SCE_SBL_ERROR_RNG_EQAF = 0x800F093C,
  SCE_SBL_ERROR_RNG_UNOPENED_LICENSE = 0x800F093D,
  SCE_SBL_ERROR_NPDRM_EPERM = 0x800F0A01,
  SCE_SBL_ERROR_NPDRM_ENOENT = 0x800F0A02,
  SCE_SBL_ERROR_NPDRM_ESRCH = 0x800F0A03,
  SCE_SBL_ERROR_NPDRM_EINTR = 0x800F0A04,
  SCE_SBL_ERROR_NPDRM_EIO = 0x800F0A05,
  SCE_SBL_ERROR_NPDRM_ENOEXEC = 0x800F0A08,
  SCE_SBL_ERROR_NPDRM_EAGAIN = 0x800F0A0B,
  SCE_SBL_ERROR_NPDRM_ENOMEM = 0x800F0A0C,
  SCE_SBL_ERROR_NPDRM_EACCES = 0x800F0A0D,
  SCE_SBL_ERROR_NPDRM_EFAULT = 0x800F0A0E,
  SCE_SBL_ERROR_NPDRM_EBUSY = 0x800F0A10,
  SCE_SBL_ERROR_NPDRM_EEXIST = 0x800F0A11,
  SCE_SBL_ERROR_NPDRM_ENODEV = 0x800F0A13,
  SCE_SBL_ERROR_NPDRM_EINVAL = 0x800F0A16,
  SCE_SBL_ERROR_NPDRM_ENOSPC = 0x800F0A1C,
  SCE_SBL_ERROR_NPDRM_ERANGE = 0x800F0A22,
  SCE_SBL_ERROR_NPDRM_EFMT = 0x800F0A23,
  SCE_SBL_ERROR_NPDRM_ESIGN = 0x800F0A24,
  SCE_SBL_ERROR_NPDRM_ENOTSUP = 0x800F0A25,
  SCE_SBL_ERROR_NPDRM_EDATA = 0x800F0A26,
  SCE_SBL_ERROR_NPDRM_ETIMEDOUT = 0x800F0A27,
  SCE_SBL_ERROR_NPDRM_ESTAT = 0x800F0A28,
  SCE_SBL_ERROR_NPDRM_ESTACK = 0x800F0A29,
  SCE_SBL_ERROR_NPDRM_ENEEDAUTH = 0x800F0A2A,
  SCE_SBL_ERROR_NPDRM_EBADMSG = 0x800F0A2B,
  SCE_SBL_ERROR_NPDRM_EREVOKED = 0x800F0A2C,
  SCE_SBL_ERROR_NPDRM_ENOATTR = 0x800F0A2D,
  SCE_SBL_ERROR_NPDRM_EVER = 0x800F0A2E,
  SCE_SBL_ERROR_NPDRM_EPLATFORM = 0x800F0A2F,
  SCE_SBL_ERROR_NPDRM_EPOWER = 0x800F0A30,
  SCE_SBL_ERROR_NPDRM_ECLOCK = 0x800F0A31,
  SCE_SBL_ERROR_NPDRM_ENOTINITIALIZED = 0x800F0A32,
  SCE_SBL_ERROR_NPDRM_EXPIRED = 0x800F0A33,
  SCE_SBL_ERROR_NPDRM_EFORMAT = 0x800F0A34,
  SCE_SBL_ERROR_NPDRM_EAUTHFAIL = 0x800F0A35,
  SCE_SBL_ERROR_NPDRM_KEY_DIFFER = 0x800F0A36,
  SCE_SBL_ERROR_NPDRM_ESYSVER = 0x800F0A37,
  SCE_SBL_ERROR_NPDRM_ESYSEXVER = 0x800F0A38,
  SCE_SBL_ERROR_NPDRM_EPURPOSE = 0x800F0A39,
  SCE_SBL_ERROR_NPDRM_EPATH = 0x800F0A3A,
  SCE_SBL_ERROR_NPDRM_EMODE = 0x800F0A3B,
  SCE_SBL_ERROR_NPDRM_EQAF = 0x800F0A3C,
  SCE_SBL_ERROR_NPDRM_UNOPENED_LICENSE = 0x800F0A3D,
  SCE_SBL_ERROR_AUTHMGR_EPERM = 0x800F0B01,
  SCE_SBL_ERROR_AUTHMGR_ENOENT = 0x800F0B02,
  SCE_SBL_ERROR_AUTHMGR_ESRCH = 0x800F0B03,
  SCE_SBL_ERROR_AUTHMGR_EINTR = 0x800F0B04,
  SCE_SBL_ERROR_AUTHMGR_EIO = 0x800F0B05,
  SCE_SBL_ERROR_AUTHMGR_ENOEXEC = 0x800F0B08,
  SCE_SBL_ERROR_AUTHMGR_EAGAIN = 0x800F0B0B,
  SCE_SBL_ERROR_AUTHMGR_ENOMEM = 0x800F0B0C,
  SCE_SBL_ERROR_AUTHMGR_EACCES = 0x800F0B0D,
  SCE_SBL_ERROR_AUTHMGR_EFAULT = 0x800F0B0E,
  SCE_SBL_ERROR_AUTHMGR_EBUSY = 0x800F0B10,
  SCE_SBL_ERROR_AUTHMGR_EEXIST = 0x800F0B11,
  SCE_SBL_ERROR_AUTHMGR_ENODEV = 0x800F0B13,
  SCE_SBL_ERROR_AUTHMGR_EINVAL = 0x800F0B16,
  SCE_SBL_ERROR_AUTHMGR_ENOSPC = 0x800F0B1C,
  SCE_SBL_ERROR_AUTHMGR_ERANGE = 0x800F0B22,
  SCE_SBL_ERROR_AUTHMGR_EFMT = 0x800F0B23,
  SCE_SBL_ERROR_AUTHMGR_ESIGN = 0x800F0B24,
  SCE_SBL_ERROR_AUTHMGR_ENOTSUP = 0x800F0B25,
  SCE_SBL_ERROR_AUTHMGR_EDATA = 0x800F0B26,
  SCE_SBL_ERROR_AUTHMGR_ETIMEDOUT = 0x800F0B27,
  SCE_SBL_ERROR_AUTHMGR_ESTAT = 0x800F0B28,
  SCE_SBL_ERROR_AUTHMGR_ESTACK = 0x800F0B29,
  SCE_SBL_ERROR_AUTHMGR_ENEEDAUTH = 0x800F0B2A,
  SCE_SBL_ERROR_AUTHMGR_EBADMSG = 0x800F0B2B,
  SCE_SBL_ERROR_AUTHMGR_EREVOKED = 0x800F0B2C,
  SCE_SBL_ERROR_AUTHMGR_ENOATTR = 0x800F0B2D,
  SCE_SBL_ERROR_AUTHMGR_EVER = 0x800F0B2E,
  SCE_SBL_ERROR_AUTHMGR_EPLATFORM = 0x800F0B2F,
  SCE_SBL_ERROR_AUTHMGR_EPOWER = 0x800F0B30,
  SCE_SBL_ERROR_AUTHMGR_ECLOCK = 0x800F0B31,
  SCE_SBL_ERROR_AUTHMGR_ENOTINITIALIZED = 0x800F0B32,
  SCE_SBL_ERROR_AUTHMGR_EXPIRED = 0x800F0B33,
  SCE_SBL_ERROR_AUTHMGR_EFORMAT = 0x800F0B34,
  SCE_SBL_ERROR_AUTHMGR_EAUTHFAIL = 0x800F0B35,
  SCE_SBL_ERROR_AUTHMGR_KEY_DIFFER = 0x800F0B36,
  SCE_SBL_ERROR_AUTHMGR_ESYSVER = 0x800F0B37,
  SCE_SBL_ERROR_AUTHMGR_ESYSEXVER = 0x800F0B38,
  SCE_SBL_ERROR_AUTHMGR_EPURPOSE = 0x800F0B39,
  SCE_SBL_ERROR_AUTHMGR_EPATH = 0x800F0B3A,
  SCE_SBL_ERROR_AUTHMGR_EMODE = 0x800F0B3B,
  SCE_SBL_ERROR_AUTHMGR_EQAF = 0x800F0B3C,
  SCE_SBL_ERROR_AUTHMGR_UNOPENED_LICENSE = 0x800F0B3D,
  SCE_SBL_ERROR_DONGLE_EPERM = 0x800F0C01,
  SCE_SBL_ERROR_DONGLE_ENOENT = 0x800F0C02,
  SCE_SBL_ERROR_DONGLE_ESRCH = 0x800F0C03,
  SCE_SBL_ERROR_DONGLE_EINTR = 0x800F0C04,
  SCE_SBL_ERROR_DONGLE_EIO = 0x800F0C05,
  SCE_SBL_ERROR_DONGLE_ENOEXEC = 0x800F0C08,
  SCE_SBL_ERROR_DONGLE_EAGAIN = 0x800F0C0B,
  SCE_SBL_ERROR_DONGLE_ENOMEM = 0x800F0C0C,
  SCE_SBL_ERROR_DONGLE_EACCES = 0x800F0C0D,
  SCE_SBL_ERROR_DONGLE_EFAULT = 0x800F0C0E,
  SCE_SBL_ERROR_DONGLE_EBUSY = 0x800F0C10,
  SCE_SBL_ERROR_DONGLE_EEXIST = 0x800F0C11,
  SCE_SBL_ERROR_DONGLE_ENODEV = 0x800F0C13,
  SCE_SBL_ERROR_DONGLE_EINVAL = 0x800F0C16,
  SCE_SBL_ERROR_DONGLE_ENOSPC = 0x800F0C1C,
  SCE_SBL_ERROR_DONGLE_ERANGE = 0x800F0C22,
  SCE_SBL_ERROR_DONGLE_EFMT = 0x800F0C23,
  SCE_SBL_ERROR_DONGLE_ESIGN = 0x800F0C24,
  SCE_SBL_ERROR_DONGLE_ENOTSUP = 0x800F0C25,
  SCE_SBL_ERROR_DONGLE_EDATA = 0x800F0C26,
  SCE_SBL_ERROR_DONGLE_ETIMEDOUT = 0x800F0C27,
  SCE_SBL_ERROR_DONGLE_ESTAT = 0x800F0C28,
  SCE_SBL_ERROR_DONGLE_ESTACK = 0x800F0C29,
  SCE_SBL_ERROR_DONGLE_ENEEDAUTH = 0x800F0C2A,
  SCE_SBL_ERROR_DONGLE_EBADMSG = 0x800F0C2B,
  SCE_SBL_ERROR_DONGLE_EREVOKED = 0x800F0C2C,
  SCE_SBL_ERROR_DONGLE_ENOATTR = 0x800F0C2D,
  SCE_SBL_ERROR_DONGLE_EVER = 0x800F0C2E,
  SCE_SBL_ERROR_DONGLE_EPLATFORM = 0x800F0C2F,
  SCE_SBL_ERROR_DONGLE_EPOWER = 0x800F0C30,
  SCE_SBL_ERROR_DONGLE_ECLOCK = 0x800F0C31,
  SCE_SBL_ERROR_DONGLE_ENOTINITIALIZED = 0x800F0C32,
  SCE_SBL_ERROR_DONGLE_EXPIRED = 0x800F0C33,
  SCE_SBL_ERROR_DONGLE_EFORMAT = 0x800F0C34,
  SCE_SBL_ERROR_DONGLE_EAUTHFAIL = 0x800F0C35,
  SCE_SBL_ERROR_DONGLE_KEY_DIFFER = 0x800F0C36,
  SCE_SBL_ERROR_DONGLE_ESYSVER = 0x800F0C37,
  SCE_SBL_ERROR_DONGLE_ESYSEXVER = 0x800F0C38,
  SCE_SBL_ERROR_DONGLE_EPURPOSE = 0x800F0C39,
  SCE_SBL_ERROR_DONGLE_EPATH = 0x800F0C3A,
  SCE_SBL_ERROR_DONGLE_EMODE = 0x800F0C3B,
  SCE_SBL_ERROR_DONGLE_EQAF = 0x800F0C3C,
  SCE_SBL_ERROR_DONGLE_UNOPENED_LICENSE = 0x800F0C3D,
  SCE_SBL_ERROR_ACLIB_EPERM = 0x800F0D01,
  SCE_SBL_ERROR_ACLIB_ENOENT = 0x800F0D02,
  SCE_SBL_ERROR_ACLIB_ESRCH = 0x800F0D03,
  SCE_SBL_ERROR_ACLIB_EINTR = 0x800F0D04,
  SCE_SBL_ERROR_ACLIB_EIO = 0x800F0D05,
  SCE_SBL_ERROR_ACLIB_ENOEXEC = 0x800F0D08,
  SCE_SBL_ERROR_ACLIB_EAGAIN = 0x800F0D0B,
  SCE_SBL_ERROR_ACLIB_ENOMEM = 0x800F0D0C,
  SCE_SBL_ERROR_ACLIB_EACCES = 0x800F0D0D,
  SCE_SBL_ERROR_ACLIB_EFAULT = 0x800F0D0E,
  SCE_SBL_ERROR_ACLIB_EBUSY = 0x800F0D10,
  SCE_SBL_ERROR_ACLIB_EEXIST = 0x800F0D11,
  SCE_SBL_ERROR_ACLIB_ENODEV = 0x800F0D13,
  SCE_SBL_ERROR_ACLIB_EINVAL = 0x800F0D16,
  SCE_SBL_ERROR_ACLIB_ENOSPC = 0x800F0D1C,
  SCE_SBL_ERROR_ACLIB_ERANGE = 0x800F0D22,
  SCE_SBL_ERROR_ACLIB_EFMT = 0x800F0D23,
  SCE_SBL_ERROR_ACLIB_ESIGN = 0x800F0D24,
  SCE_SBL_ERROR_ACLIB_ENOTSUP = 0x800F0D25,
  SCE_SBL_ERROR_ACLIB_EDATA = 0x800F0D26,
  SCE_SBL_ERROR_ACLIB_ETIMEDOUT = 0x800F0D27,
  SCE_SBL_ERROR_ACLIB_ESTAT = 0x800F0D28,
  SCE_SBL_ERROR_ACLIB_ESTACK = 0x800F0D29,
  SCE_SBL_ERROR_ACLIB_ENEEDAUTH = 0x800F0D2A,
  SCE_SBL_ERROR_ACLIB_EBADMSG = 0x800F0D2B,
  SCE_SBL_ERROR_ACLIB_EREVOKED = 0x800F0D2C,
  SCE_SBL_ERROR_ACLIB_ENOATTR = 0x800F0D2D,
  SCE_SBL_ERROR_ACLIB_EVER = 0x800F0D2E,
  SCE_SBL_ERROR_ACLIB_EPLATFORM = 0x800F0D2F,
  SCE_SBL_ERROR_ACLIB_EPOWER = 0x800F0D30,
  SCE_SBL_ERROR_ACLIB_ECLOCK = 0x800F0D31,
  SCE_SBL_ERROR_ACLIB_ENOTINITIALIZED = 0x800F0D32,
  SCE_SBL_ERROR_ACLIB_EXPIRED = 0x800F0D33,
  SCE_SBL_ERROR_ACLIB_EFORMAT = 0x800F0D34,
  SCE_SBL_ERROR_ACLIB_EAUTHFAIL = 0x800F0D35,
  SCE_SBL_ERROR_ACLIB_KEY_DIFFER = 0x800F0D36,
  SCE_SBL_ERROR_ACLIB_ESYSVER = 0x800F0D37,
  SCE_SBL_ERROR_ACLIB_ESYSEXVER = 0x800F0D38,
  SCE_SBL_ERROR_ACLIB_EPURPOSE = 0x800F0D39,
  SCE_SBL_ERROR_ACLIB_EPATH = 0x800F0D3A,
  SCE_SBL_ERROR_ACLIB_EMODE = 0x800F0D3B,
  SCE_SBL_ERROR_ACLIB_EQAF = 0x800F0D3C,
  SCE_SBL_ERROR_ACLIB_UNOPENED_LICENSE = 0x800F0D3D,
  SCE_SBL_ERROR_DRIVEAUTH_EPERM = 0x800F0E01,
  SCE_SBL_ERROR_DRIVEAUTH_ENOENT = 0x800F0E02,
  SCE_SBL_ERROR_DRIVEAUTH_ESRCH = 0x800F0E03,
  SCE_SBL_ERROR_DRIVEAUTH_EINTR = 0x800F0E04,
  SCE_SBL_ERROR_DRIVEAUTH_EIO = 0x800F0E05,
  SCE_SBL_ERROR_DRIVEAUTH_ENOEXEC = 0x800F0E08,
  SCE_SBL_ERROR_DRIVEAUTH_EAGAIN = 0x800F0E0B,
  SCE_SBL_ERROR_DRIVEAUTH_ENOMEM = 0x800F0E0C,
  SCE_SBL_ERROR_DRIVEAUTH_EACCES = 0x800F0E0D,
  SCE_SBL_ERROR_DRIVEAUTH_EFAULT = 0x800F0E0E,
  SCE_SBL_ERROR_DRIVEAUTH_EBUSY = 0x800F0E10,
  SCE_SBL_ERROR_DRIVEAUTH_EEXIST = 0x800F0E11,
  SCE_SBL_ERROR_DRIVEAUTH_ENODEV = 0x800F0E13,
  SCE_SBL_ERROR_DRIVEAUTH_EINVAL = 0x800F0E16,
  SCE_SBL_ERROR_DRIVEAUTH_ENOSPC = 0x800F0E1C,
  SCE_SBL_ERROR_DRIVEAUTH_ERANGE = 0x800F0E22,
  SCE_SBL_ERROR_DRIVEAUTH_EFMT = 0x800F0E23,
  SCE_SBL_ERROR_DRIVEAUTH_ESIGN = 0x800F0E24,
  SCE_SBL_ERROR_DRIVEAUTH_ENOTSUP = 0x800F0E25,
  SCE_SBL_ERROR_DRIVEAUTH_EDATA = 0x800F0E26,
  SCE_SBL_ERROR_DRIVEAUTH_ETIMEDOUT = 0x800F0E27,
  SCE_SBL_ERROR_DRIVEAUTH_ESTAT = 0x800F0E28,
  SCE_SBL_ERROR_DRIVEAUTH_ESTACK = 0x800F0E29,
  SCE_SBL_ERROR_DRIVEAUTH_ENEEDAUTH = 0x800F0E2A,
  SCE_SBL_ERROR_DRIVEAUTH_EBADMSG = 0x800F0E2B,
  SCE_SBL_ERROR_DRIVEAUTH_EREVOKED = 0x800F0E2C,
  SCE_SBL_ERROR_DRIVEAUTH_ENOATTR = 0x800F0E2D,
  SCE_SBL_ERROR_DRIVEAUTH_EVER = 0x800F0E2E,
  SCE_SBL_ERROR_DRIVEAUTH_EPLATFORM = 0x800F0E2F,
  SCE_SBL_ERROR_DRIVEAUTH_EPOWER = 0x800F0E30,
  SCE_SBL_ERROR_DRIVEAUTH_ECLOCK = 0x800F0E31,
  SCE_SBL_ERROR_DRIVEAUTH_ENOTINITIALIZED = 0x800F0E32,
  SCE_SBL_ERROR_DRIVEAUTH_EXPIRED = 0x800F0E33,
  SCE_SBL_ERROR_DRIVEAUTH_EFORMAT = 0x800F0E34,
  SCE_SBL_ERROR_DRIVEAUTH_EAUTHFAIL = 0x800F0E35,
  SCE_SBL_ERROR_DRIVEAUTH_KEY_DIFFER = 0x800F0E36,
  SCE_SBL_ERROR_DRIVEAUTH_ESYSVER = 0x800F0E37,
  SCE_SBL_ERROR_DRIVEAUTH_ESYSEXVER = 0x800F0E38,
  SCE_SBL_ERROR_DRIVEAUTH_EPURPOSE = 0x800F0E39,
  SCE_SBL_ERROR_DRIVEAUTH_EPATH = 0x800F0E3A,
  SCE_SBL_ERROR_DRIVEAUTH_EMODE = 0x800F0E3B,
  SCE_SBL_ERROR_DRIVEAUTH_EQAF = 0x800F0E3C,
  SCE_SBL_ERROR_DRIVEAUTH_UNOPENED_LICENSE = 0x800F0E3D,
  SCE_SBL_ERROR_ENVELOPE_EPERM = 0x800F0F01,
  SCE_SBL_ERROR_ENVELOPE_ENOENT = 0x800F0F02,
  SCE_SBL_ERROR_ENVELOPE_ESRCH = 0x800F0F03,
  SCE_SBL_ERROR_ENVELOPE_EINTR = 0x800F0F04,
  SCE_SBL_ERROR_ENVELOPE_EIO = 0x800F0F05,
  SCE_SBL_ERROR_ENVELOPE_ENOEXEC = 0x800F0F08,
  SCE_SBL_ERROR_ENVELOPE_EAGAIN = 0x800F0F0B,
  SCE_SBL_ERROR_ENVELOPE_ENOMEM = 0x800F0F0C,
  SCE_SBL_ERROR_ENVELOPE_EACCES = 0x800F0F0D,
  SCE_SBL_ERROR_ENVELOPE_EFAULT = 0x800F0F0E,
  SCE_SBL_ERROR_ENVELOPE_EBUSY = 0x800F0F10,
  SCE_SBL_ERROR_ENVELOPE_EEXIST = 0x800F0F11,
  SCE_SBL_ERROR_ENVELOPE_ENODEV = 0x800F0F13,
  SCE_SBL_ERROR_ENVELOPE_EINVAL = 0x800F0F16,
  SCE_SBL_ERROR_ENVELOPE_ENOSPC = 0x800F0F1C,
  SCE_SBL_ERROR_ENVELOPE_ERANGE = 0x800F0F22,
  SCE_SBL_ERROR_ENVELOPE_EFMT = 0x800F0F23,
  SCE_SBL_ERROR_ENVELOPE_ESIGN = 0x800F0F24,
  SCE_SBL_ERROR_ENVELOPE_ENOTSUP = 0x800F0F25,
  SCE_SBL_ERROR_ENVELOPE_EDATA = 0x800F0F26,
  SCE_SBL_ERROR_ENVELOPE_ETIMEDOUT = 0x800F0F27,
  SCE_SBL_ERROR_ENVELOPE_ESTAT = 0x800F0F28,
  SCE_SBL_ERROR_ENVELOPE_ESTACK = 0x800F0F29,
  SCE_SBL_ERROR_ENVELOPE_ENEEDAUTH = 0x800F0F2A,
  SCE_SBL_ERROR_ENVELOPE_EBADMSG = 0x800F0F2B,
  SCE_SBL_ERROR_ENVELOPE_EREVOKED = 0x800F0F2C,
  SCE_SBL_ERROR_ENVELOPE_ENOATTR = 0x800F0F2D,
  SCE_SBL_ERROR_ENVELOPE_EVER = 0x800F0F2E,
  SCE_SBL_ERROR_ENVELOPE_EPLATFORM = 0x800F0F2F,
  SCE_SBL_ERROR_ENVELOPE_EPOWER = 0x800F0F30,
  SCE_SBL_ERROR_ENVELOPE_ECLOCK = 0x800F0F31,
  SCE_SBL_ERROR_ENVELOPE_ENOTINITIALIZED = 0x800F0F32,
  SCE_SBL_ERROR_ENVELOPE_EXPIRED = 0x800F0F33,
  SCE_SBL_ERROR_ENVELOPE_EFORMAT = 0x800F0F34,
  SCE_SBL_ERROR_ENVELOPE_EAUTHFAIL = 0x800F0F35,
  SCE_SBL_ERROR_ENVELOPE_KEY_DIFFER = 0x800F0F36,
  SCE_SBL_ERROR_ENVELOPE_ESYSVER = 0x800F0F37,
  SCE_SBL_ERROR_ENVELOPE_ESYSEXVER = 0x800F0F38,
  SCE_SBL_ERROR_ENVELOPE_EPURPOSE = 0x800F0F39,
  SCE_SBL_ERROR_ENVELOPE_EPATH = 0x800F0F3A,
  SCE_SBL_ERROR_ENVELOPE_EMODE = 0x800F0F3B,
  SCE_SBL_ERROR_ENVELOPE_EQAF = 0x800F0F3C,
  SCE_SBL_ERROR_ENVELOPE_UNOPENED_LICENSE = 0x800F0F3D,
  SCE_SBL_ERROR_PUPEXP_EPERM = 0x800F1001,
  SCE_SBL_ERROR_PUPEXP_ENOENT = 0x800F1002,
  SCE_SBL_ERROR_PUPEXP_ESRCH = 0x800F1003,
  SCE_SBL_ERROR_PUPEXP_EINTR = 0x800F1004,
  SCE_SBL_ERROR_PUPEXP_EIO = 0x800F1005,
  SCE_SBL_ERROR_PUPEXP_ENOEXEC = 0x800F1008,
  SCE_SBL_ERROR_PUPEXP_EAGAIN = 0x800F100B,
  SCE_SBL_ERROR_PUPEXP_ENOMEM = 0x800F100C,
  SCE_SBL_ERROR_PUPEXP_EACCES = 0x800F100D,
  SCE_SBL_ERROR_PUPEXP_EFAULT = 0x800F100E,
  SCE_SBL_ERROR_PUPEXP_EBUSY = 0x800F1010,
  SCE_SBL_ERROR_PUPEXP_EEXIST = 0x800F1011,
  SCE_SBL_ERROR_PUPEXP_ENODEV = 0x800F1013,
  SCE_SBL_ERROR_PUPEXP_EINVAL = 0x800F1016,
  SCE_SBL_ERROR_PUPEXP_ENOSPC = 0x800F101C,
  SCE_SBL_ERROR_PUPEXP_ERANGE = 0x800F1022,
  SCE_SBL_ERROR_PUPEXP_EFMT = 0x800F1023,
  SCE_SBL_ERROR_PUPEXP_ESIGN = 0x800F1024,
  SCE_SBL_ERROR_PUPEXP_ENOTSUP = 0x800F1025,
  SCE_SBL_ERROR_PUPEXP_EDATA = 0x800F1026,
  SCE_SBL_ERROR_PUPEXP_ETIMEDOUT = 0x800F1027,
  SCE_SBL_ERROR_PUPEXP_ESTAT = 0x800F1028,
  SCE_SBL_ERROR_PUPEXP_ESTACK = 0x800F1029,
  SCE_SBL_ERROR_PUPEXP_ENEEDAUTH = 0x800F102A,
  SCE_SBL_ERROR_PUPEXP_EBADMSG = 0x800F102B,
  SCE_SBL_ERROR_PUPEXP_EREVOKED = 0x800F102C,
  SCE_SBL_ERROR_PUPEXP_ENOATTR = 0x800F102D,
  SCE_SBL_ERROR_PUPEXP_EVER = 0x800F102E,
  SCE_SBL_ERROR_PUPEXP_EPLATFORM = 0x800F102F,
  SCE_SBL_ERROR_PUPEXP_EPOWER = 0x800F1030,
  SCE_SBL_ERROR_PUPEXP_ECLOCK = 0x800F1031,
  SCE_SBL_ERROR_PUPEXP_ENOTINITIALIZED = 0x800F1032,
  SCE_SBL_ERROR_PUPEXP_EXPIRED = 0x800F1033,
  SCE_SBL_ERROR_PUPEXP_EFORMAT = 0x800F1034,
  SCE_SBL_ERROR_PUPEXP_EAUTHFAIL = 0x800F1035,
  SCE_SBL_ERROR_PUPEXP_KEY_DIFFER = 0x800F1036,
  SCE_SBL_ERROR_PUPEXP_ESYSVER = 0x800F1037,
  SCE_SBL_ERROR_PUPEXP_ESYSEXVER = 0x800F1038,
  SCE_SBL_ERROR_PUPEXP_EPURPOSE = 0x800F1039,
  SCE_SBL_ERROR_PUPEXP_EPATH = 0x800F103A,
  SCE_SBL_ERROR_PUPEXP_EMODE = 0x800F103B,
  SCE_SBL_ERROR_PUPEXP_EQAF = 0x800F103C,
  SCE_SBL_ERROR_PUPEXP_UNOPENED_LICENSE = 0x800F103D,
  SCE_SBL_ERROR_RNPS_EPERM = 0x800F1101,
  SCE_SBL_ERROR_RNPS_ENOENT = 0x800F1102,
  SCE_SBL_ERROR_RNPS_ESRCH = 0x800F1103,
  SCE_SBL_ERROR_RNPS_EINTR = 0x800F1104,
  SCE_SBL_ERROR_RNPS_EIO = 0x800F1105,
  SCE_SBL_ERROR_RNPS_ENOEXEC = 0x800F1108,
  SCE_SBL_ERROR_RNPS_EAGAIN = 0x800F110B,
  SCE_SBL_ERROR_RNPS_ENOMEM = 0x800F110C,
  SCE_SBL_ERROR_RNPS_EACCES = 0x800F110D,
  SCE_SBL_ERROR_RNPS_EFAULT = 0x800F110E,
  SCE_SBL_ERROR_RNPS_EBUSY = 0x800F1110,
  SCE_SBL_ERROR_RNPS_EEXIST = 0x800F1111,
  SCE_SBL_ERROR_RNPS_ENODEV = 0x800F1113,
  SCE_SBL_ERROR_RNPS_EINVAL = 0x800F1116,
  SCE_SBL_ERROR_RNPS_ENOSPC = 0x800F111C,
  SCE_SBL_ERROR_RNPS_ERANGE = 0x800F1122,
  SCE_SBL_ERROR_RNPS_EFMT = 0x800F1123,
  SCE_SBL_ERROR_RNPS_ESIGN = 0x800F1124,
  SCE_SBL_ERROR_RNPS_ENOTSUP = 0x800F1125,
  SCE_SBL_ERROR_RNPS_EDATA = 0x800F1126,
  SCE_SBL_ERROR_RNPS_ETIMEDOUT = 0x800F1127,
  SCE_SBL_ERROR_RNPS_ESTAT = 0x800F1128,
  SCE_SBL_ERROR_RNPS_ESTACK = 0x800F1129,
  SCE_SBL_ERROR_RNPS_ENEEDAUTH = 0x800F112A,
  SCE_SBL_ERROR_RNPS_EBADMSG = 0x800F112B,
  SCE_SBL_ERROR_RNPS_EREVOKED = 0x800F112C,
  SCE_SBL_ERROR_RNPS_ENOATTR = 0x800F112D,
  SCE_SBL_ERROR_RNPS_EVER = 0x800F112E,
  SCE_SBL_ERROR_RNPS_EPLATFORM = 0x800F112F,
  SCE_SBL_ERROR_RNPS_EPOWER = 0x800F1130,
  SCE_SBL_ERROR_RNPS_ECLOCK = 0x800F1131,
  SCE_SBL_ERROR_RNPS_ENOTINITIALIZED = 0x800F1132,
  SCE_SBL_ERROR_RNPS_EXPIRED = 0x800F1133,
  SCE_SBL_ERROR_RNPS_EFORMAT = 0x800F1134,
  SCE_SBL_ERROR_RNPS_EAUTHFAIL = 0x800F1135,
  SCE_SBL_ERROR_RNPS_KEY_DIFFER = 0x800F1136,
  SCE_SBL_ERROR_RNPS_ESYSVER = 0x800F1137,
  SCE_SBL_ERROR_RNPS_ESYSEXVER = 0x800F1138,
  SCE_SBL_ERROR_RNPS_EPURPOSE = 0x800F1139,
  SCE_SBL_ERROR_RNPS_EPATH = 0x800F113A,
  SCE_SBL_ERROR_RNPS_EMODE = 0x800F113B,
  SCE_SBL_ERROR_RNPS_EQAF = 0x800F113C,
  SCE_SBL_ERROR_RNPS_UNOPENED_LICENSE = 0x800F113D,
  SCE_SYSFILE_ERROR_NOMEM = 0x80120001,
  SCE_SYSFILE_ERROR_IO = 0x80120002,
  SCE_SYSFILE_ERROR_INVAL = 0x80120003,
  SCE_SYSFILE_ERROR_BADMAGIC = 0x80120004,
  SCE_SYSFILE_ERROR_KEYNOTFOUND = 0x80120005,
  SCE_SYSFILE_ERROR_KEYDUPLICATION = 0x80120006,
  SCE_SYSFILE_ERROR_BADVERSION = 0x80120007,
  SCE_SYSFILE_ERROR_OVER_DATABUFSIZE = 0x80120008,
  SCE_UPDATER_CORE_ERROR_GENERAL = 0x80180000,
  SCE_UPDATER_CORE_ERROR_INVAL = 0x80180001,
  SCE_UPDATER_CORE_ERROR_NOMEM = 0x80180002,
  SCE_UPDATER_CORE_ERROR_WRONG_FORMAT = 0x80180003,
  SCE_UPDATER_CORE_ERROR_NOT_FOUND = 0x80180004,
  SCE_UPDATER_CORE_ERROR_IO = 0x80180005,
  SCE_UPDATER_CORE_ERROR_BAD_STATE = 0x80180006,
  SCE_UPDATER_CORE_ERROR_NOENT = 0x80180007,
  SCE_UPDATER_CORE_ERROR_HDD_PART = 0x80180008,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE = 0x80180009,
  SCE_UPDATER_CORE_ERROR_SYSTEM_VERSION = 0x8018000A,
  SCE_UPDATER_CORE_ERROR_VERIFY_ONLY = 0x8018000B,
  SCE_UPDATER_CORE_ERROR_SHORT_FILE = 0x8018000C,
  SCE_UPDATER_CORE_ERROR_CANCELLED = 0x8018000D,
  SCE_UPDATER_CORE_ERROR_SYSTEM_BETA_VERSION = 0x8018000E,
  SCE_UPDATER_CORE_ERROR_BDEV_OPEN = 0x8018000F,
  SCE_UPDATER_CORE_ERROR_FILE_OPEN = 0x80180010,
  SCE_UPDATER_CORE_ERROR_BDEV_IO = 0x80180011,
  SCE_UPDATER_CORE_ERROR_INVAL_IO = 0x80180012,
  SCE_UPDATER_CORE_ERROR_UNKOWN_CPUID = 0x80180013,
  SCE_UPDATER_CORE_ERROR_GET_SUBSYSID = 0x80180014,
  SCE_UPDATER_CORE_ERROR_BUSY = 0x80180015,
  SCE_UPDATER_CORE_ERROR_PERM = 0x80180016,
  SCE_UPDATER_CORE_ERROR_NVS_OPEN = 0x80180017,
  SCE_UPDATER_CORE_ERROR_NVS_READ = 0x80180018,
  SCE_UPDATER_CORE_ERROR_NVS_WRITE = 0x80180019,
  SCE_UPDATER_CORE_ERROR_WLANBT_HAS = 0x8018001A,
  SCE_UPDATER_CORE_ERROR_WLANBT_OPEN = 0x8018001B,
  SCE_UPDATER_CORE_ERROR_WLANBT_GET_DEVID = 0x8018001C,
  SCE_UPDATER_CORE_ERROR_WLANBT_UNKNOWN_DEVID = 0x8018001D,
  SCE_UPDATER_CORE_ERROR_UNEXPECTED_PKG = 0x8018001E,
  SCE_UPDATER_CORE_ERROR_MOUNT = 0x8018001F,
  SCE_UPDATER_CORE_ERROR_UNMOUNT = 0x80180020,
  SCE_UPDATER_CORE_ERROR_GET_ACTIVE_BANK = 0x80180021,
  SCE_UPDATER_CORE_ERROR_NOT_BLS_PUP = 0x80180022,
  SCE_UPDATER_CORE_ERROR_ALREADY_INIT = 0x80180023,
  SCE_UPDATER_CORE_ERROR_UNKNOWN_ID = 0x80180024,
  SCE_UPDATER_CORE_ERROR_NOT_INITIALIZED = 0x80180025,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_HDD = 0x80180100,
  SCE_UPDATER_CORE_ERROR_VERIFY_ONLY_HDD = 0x80180101,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_WRITE_GENERAL = 0x80180102,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_WRITE_IO = 0x80180103,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_READ_GENERAL = 0x80180104,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_READ_IO = 0x80180105,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_WRITE_HDD_GENERAL = 0x80180106,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_WRITE_HDD_IO = 0x80180107,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_READ_HDD_GENERAL = 0x80180108,
  SCE_UPDATER_CORE_ERROR_VERIFY_WRITE_READ_HDD_IO = 0x80180109,
  SCE_UPDATER_CORE_ERROR_IO_READ = 0x80180200,
  SCE_UPDATER_CORE_ERROR_IO_READ_BADF = 0x80180201,
  SCE_UPDATER_CORE_ERROR_IO_READ_IO = 0x80180202,
  SCE_UPDATER_CORE_ERROR_IO_READ_INVAL = 0x80180203,
  SCE_UPDATER_CORE_ERROR_IO_SEEK = 0x80180204,
  SCE_UPDATER_CORE_ERROR_IO_STAT = 0x80180205,
  SCE_UPDATER_CORE_ERROR_PUP_US_GENERAL = 0x80180850,
  SCE_UPDATER_CORE_ERROR_PUP_US_PERM = 0x80180851,
  SCE_UPDATER_CORE_ERROR_PUP_US_BUSY = 0x80180852,
  SCE_UPDATER_CORE_ERROR_PUP_US_INVAL = 0x80180853,
  SCE_UPDATER_CORE_ERROR_PUP_US_NOMEM = 0x80180854,
  SCE_UPDATER_CORE_ERROR_PUP_US_IO = 0x80180855,
  SCE_UPDATER_CORE_ERROR_PUP_US_BADF = 0x80180856,
  SCE_UPDATER_CORE_ERROR_PUP_US_FAULT = 0x80180857,
  SCE_UPDATER_CORE_ERROR_PUP_US_FTYPE = 0x80180858,
  SCE_UPDATER_CORE_ERROR_PUP_US_AUTH = 0x80180859,
  SCE_UPDATER_CORE_ERROR_PUP_US_BADMSG = 0x8018085A,
  SCE_UPDATER_CORE_ERROR_PUP_US_REVOKED = 0x8018085B,
  SCE_UPDATER_CORE_ERROR_PUP_US_NOATTR = 0x8018085C,
  SCE_UPDATER_CORE_ERROR_PUP_US_VER = 0x8018085D,
  SCE_UPDATER_CORE_ERROR_PUP_US_PLATFORM = 0x8018085E,
  SCE_UPDATER_CORE_ERROR_PUP_US_NEEDAUTH = 0x8018085F,
  SCE_UPDATER_CORE_ERROR_PUP_US_NOENT = 0x80180860,
  SCE_UPDATER_CORE_ERROR_PUP_US_ALREADY = 0x80180861,
  SCE_UPDATER_CORE_ERROR_PUP_US_UPD_VER = 0x80180862,
  SCE_UPDATER_CORE_ERROR_PUP_US_EXPIRED = 0x80180863,
  SCE_UPDATER_CORE_ERROR_PUP_US_BUSY_OPEN = 0x80180864,
  SCE_UPDATER_CORE_ERROR_PUP_US_NOEXEC = 0x80180865,
  SCE_UPDATER_CORE_ERROR_PUP_US_INCONSISTENCY = 0x80180866,
  SCE_UPDATER_CORE_ERROR_PUP_US_SDKVERSION = 0x80180867,
  SCE_UPDATER_CORE_ERROR_PUP_US_NXIO = 0x80180868,
  SCE_UPDATER_CORE_ERROR_PUP_US_ALREADY_INIT = 0x80180869,
  SCE_UPDATER_CORE_ERROR_UNCOMPRESS_GENERAL = 0x80180900,
  SCE_UPDATER_CORE_ERROR_UNCOMPRESS_STREAM = 0x80180901,
  SCE_UPDATER_CORE_ERROR_UNCOMPRESS_DATA = 0x80180902,
  SCE_UPDATER_CORE_ERROR_UNCOMPRESS_NOMEM = 0x80180903,
  SCE_UPDATER_CORE_ERROR_UNCOMPRESS_BUF = 0x80180904,
  SCE_UPDATER_CORE_ERROR_SC_FW_GENERAL = 0x80180950,
  SCE_UPDATER_CORE_ERROR_SC_FW_PERM = 0x80180951,
  SCE_UPDATER_CORE_ERROR_SC_FW_BUSY = 0x80180952,
  SCE_UPDATER_CORE_ERROR_SC_FW_INVAL = 0x80180953,
  SCE_UPDATER_CORE_ERROR_SC_FW_NOMEM = 0x80180954,
  SCE_UPDATER_CORE_ERROR_SC_FW_IO = 0x80180955,
  SCE_UPDATER_CORE_ERROR_SC_FW_BADF = 0x80180956,
  SCE_UPDATER_CORE_ERROR_SC_FW_FAULT = 0x80180957,
  SCE_UPDATER_CORE_ERROR_SC_FW_NXIO = 0x80180958,
  SCE_UPDATER_CORE_ERROR_SC_FW_TIMEOUT = 0x80180959,
  SCE_UPDATER_CORE_ERROR_BD_FW_GENERAL = 0x801809A0,
  SCE_UPDATER_CORE_ERROR_BD_FW_NOMEM = 0x801809A1,
  SCE_UPDATER_CORE_ERROR_BD_FW_OPEN = 0x801809A2,
  SCE_UPDATER_CORE_ERROR_BD_FW_SEND = 0x801809A3,
  SCE_UPDATER_CORE_ERROR_BD_FW_WRONG_FORMAT = 0x801809A4,
  SCE_UPDATER_CORE_ERROR_BD_FW_INVALID = 0x801809A5,
  SCE_UPDATER_CORE_ERROR_BD_FW_TIMEOUT = 0x801809A6,
  SCE_UPDATER_CORE_ERROR_BD_FW_REQ_INCOMPLETE = 0x801809A7,
  SCE_UPDATER_CORE_ERROR_BD_FW_NO_DRIVE = 0x801809A8,
  SCE_UPDATER_CORE_ERROR_BD_FW_UNKNOWN_DRIVE = 0x801809A9,
  SCE_UPDATER_CORE_ERROR_BD_FW_SK_SEQ_ERROR = 0x801809C0,
  SCE_UPDATER_CORE_ERROR_BD_FW_SK_INVALID_COMMAND = 0x801809C1,
  SCE_UPDATER_CORE_ERROR_BD_FW_SK_INVALID_PARAM = 0x801809C2,
  SCE_UPDATER_CORE_ERROR_BD_FW_SK_INVALID_VERSION = 0x801809C3,
  SCE_UPDATER_CORE_ERROR_BD_FW_SK_UNIT_FAILURE = 0x801809C4,
  SCE_UPDATER_CORE_ERROR_BD_FW_SK_NOT_READY = 0x801809C5,
  SCE_UPDATER_CORE_ERROR_SATABR_FW_GENERAL = 0x80180A00,
  SCE_UPDATER_CORE_ERROR_SATABR_FW_NOMEM = 0x80180A01,
  SCE_UPDATER_CORE_ERROR_SATABR_FW_OPEN = 0x80180A02,
  SCE_UPDATER_CORE_ERROR_SATABR_FW_SEND = 0x80180A03,
  SCE_UPDATER_CORE_ERROR_SATABR_FW_WRONG_FORMAT = 0x80180A04,
  SCE_UPDATER_CORE_ERROR_SATABR_FW_TIMEOUT = 0x80180A05,
  SCE_UPDATER_CORE_ERROR_SATABR_FW_REQ_INCOMPLETE = 0x80180A06,
  SCE_UPDATER_CORE_ERROR_SATABR_FW_VERIFY = 0x80180A07,
  SCE_UPDATER_CORE_ERROR_CP_FW_GENERAL = 0x80180A50,
  SCE_UPDATER_CORE_ERROR_CP_FW_TRANSFER = 0x80180A51,
  SCE_UPDATER_CORE_ERROR_CP_FW_UPDATE = 0x80180A52,
  SCE_UPDATER_CORE_ERROR_CP_FW_WRONG_DECI_HEADER = 0x80180A53,
  SCE_UPDATER_CORE_ERROR_CP_FW_DECI_HEADER_VERSION = 0x80180A54,
  SCE_UPDATER_CORE_ERROR_CP_FW_DECI_HEADER_TOO_SMALL = 0x80180A55,
  SCE_UPDATER_CORE_ERROR_CP_FW_DECI_HEADER_TOO_LARGE = 0x80180A56,
  SCE_UPDATER_CORE_ERROR_CP_FW_RETRY_RES_OVER = 0x80180A57,
  SCE_UPDATER_CORE_ERROR_CP_FW_RETRY_NTF_OVER = 0x80180A58,
  SCE_UPDATER_CORE_ERROR_CP_FW_DEVUSB_CP_READ = 0x80180A59,
  SCE_UPDATER_CORE_ERROR_CP_FW_DEVUSB_CP_WRITE = 0x80180A5A,
  SCE_UPDATER_CORE_ERROR_CP_FW_DEVUSB_CP_UNKNOWN = 0x80180A5B,
  SCE_UPDATER_CORE_ERROR_CP_UPDATE_INVALID = 0x80180A5C,
  SCE_UPDATER_CORE_ERROR_CP_UPDATE_COMM = 0x80180A5D,
  SCE_UPDATER_CORE_ERROR_CP_UPDATE_UNSUPPORTED = 0x80180A5E,
  SCE_UPDATER_CORE_ERROR_CP_UPDATE_NOT_INITIALIZED = 0x80180A5F,
  SCE_UPDATER_CORE_ERROR_CP_UPDATE_ALREADY_INITIALIZED = 0x80180A60,
  SCE_UPDATER_CORE_ERROR_AW_INVAL = 0x80180B00,
  SCE_UPDATER_CORE_ERROR_AW_NOMEM = 0x80180B01,
  SCE_UPDATER_CORE_ERROR_AW_INVALID_ARCHIVE = 0x80180B02,
  SCE_UPDATER_CORE_ERROR_AW_INVALID_SIZE = 0x80180B03,
  SCE_UPDATER_CORE_ERROR_AW_WRITE_FAILED = 0x80180B04,
  SCE_UPDATER_CORE_ERROR_AW_INVALID_STATE = 0x80180B05,
  SCE_UPDATER_CORE_ERROR_DUM_FILELIST_UNSUPPORTED_PKG = 0x80180B10,
  SCE_UPDATER_CORE_ERROR_DUM_FILELIST_NOT_FOUND = 0x80180B11,
  SCE_UPDATER_CORE_ERROR_DUM_NOMEM = 0x80180B12,
  SCE_UPDATER_CORE_ERROR_DUM_NOT_INITIALIZED = 0x80180B13,
  SCE_UPDATER_CORE_ERROR_DUM_INVAL = 0x80180B14,
  SCE_UPDATER_CORE_ERROR_DUM_INVALID_FILELIST = 0x80180B15,
  SCE_UPDATER_CORE_ERROR_DUM_LINE_FEED_CODE_NOT_FOUND = 0x80180B16,
  SCE_UPDATER_CORE_ERROR_DUM_INVALID_MODE = 0x80180B17,
  SCE_UPDATER_CORE_ERROR_DUM_INVALID_PARAM = 0x80180B18,
  SCE_UPDATER_CORE_ERROR_DUM_FS_WORK_BUF_NOT_ENOUGH = 0x80180B19,
  SCE_UPDATER_CORE_ERROR_DUM_UNSUPPORTED_FS_TYPE = 0x80180B1A,
  SCE_UPDATER_CORE_ERROR_DUM_INVALID_FILE_ENTRY = 0x80180B1B,
  SCE_UPDATER_CORE_ERROR_DUM_INVALID_DIR_ENTRY = 0x80180B1C,
  SCE_UPDATER_CORE_ERROR_DUM_INVALID_UNKNOWN_ENTRY = 0x80180B1D,
  SCE_UPDATER_CORE_ERROR_DUM_VOLUME_TS_PARSE_ERROR = 0x80180B1E,
  SCE_UPDATER_CORE_ERROR_DUM_FILELIST_READ_ERROR = 0x80180B1F,
  SCE_UPDATER_CORE_ERROR_DUM_ENTRY_PARAM_PARSE_ERROR = 0x80180B20,
  SCE_UPDATER_CORE_ERROR_PO_DIGEST_NOT_MATCH = 0x80180B30,
  SCE_UPDATER_CORE_ERROR_PO_INVAL = 0x80180B31,
  SCE_UPDATER_CORE_ERROR_PO_NOT_SUPPORTED = 0x80180B32,
  SCE_UPDATER_CORE_ERROR_PO_NOMEM = 0x80180B33,
  SCE_UPDATER_CORE_ERROR_PO_NOT_INITIALIZED = 0x80180B34,
  SCE_UPDATER_CORE_ERROR_PO_READ_DIGEST_FAILED = 0x80180B35,
  SCE_UPDATER_CORE_ERROR_PO_UNKNOWN_DIRENT_TYPE = 0x80180B36,
  SCE_UPDATER_CORE_ERROR_PO_INVALID_DIRENT_LENGTH = 0x80180B37,
  SCE_UPDATER_CORE_ERROR_PO_FATAL = 0x80180B38,
  SCE_UPDATER_CORE_ERROR_MBUF_CANCEL = 0x80180B80,
  SCE_UPDATER_CORE_ERROR_MBUF_TIMEDOUT = 0x80180B81,
  SCE_UPDATER_CORE_ERROR_MBUF_INVAL = 0x80180B82,
  SCE_UPDATER_CORE_ERROR_MBUF_RB_TIMEDOUT = 0x80180B83,
  SCE_UPDATER_CORE_ERROR_TEST_GENERAL = 0x80180FF0,
  SCE_UPDATER_CORE_ERROR_TEST_SWITCH_BANK = 0x80180FF1,
  SCE_UPDATER_CORE_ERROR_FATAL = 0x80180FFF,
  SCE_HDD_INFO_WRITER_ERROR_GENERAL = 0x80182000,
  SCE_HDD_INFO_WRITER_ERROR_INVAL = 0x80182001,
  SCE_HDD_INFO_WRITER_ERROR_NOMEM = 0x80182002,
  SCE_HDD_INFO_WRITER_ERROR_CAM_OPEN = 0x80182003,
  SCE_HDD_INFO_WRITER_ERROR_CAM_SEND = 0x80182004,
  SCE_HDD_INFO_WRITER_ERROR_CAM_INCOMPLETE = 0x80182005,
  SCE_HDD_INFO_WRITER_ERROR_NVS_OPEN = 0x80182010,
  SCE_HDD_INFO_WRITER_ERROR_NVS_READ = 0x80182011,
  SCE_HDD_INFO_WRITER_ERROR_NVS_WRITE = 0x80182012,
  SCE_UPDATE_PUS_ERROR_SERVER_GENERAL = 0x80182100,
  SCE_UPDATE_PUS_ERROR_SERVER_INVAL = 0x80182101,
  SCE_UPDATE_PUS_ERROR_SERVER_NOMEM = 0x80182102,
  SCE_UPDATE_PUS_ERROR_SERVER_ALREADY_INITIALIZED = 0x80182103,
  SCE_UPDATE_PUS_ERROR_SERVER_NOT_INITIALIZED = 0x80182104,
  SCE_UPDATE_PUS_ERROR_SERVER_BUSY = 0x80182105,
  SCE_UPDATE_PUS_ERROR_SERVER_ALREADY_EXIST = 0x80182106,
  SCE_UPDATE_PUS_ERROR_SERVER_NOT_EXIST = 0x80182107,
  SCE_UPDATE_PUS_ERROR_SERVER_FATAL = 0x8018217F,
  SCE_UPDATE_PUS_ERROR_CLIENT_GENERAL = 0x80182180,
  SCE_UPDATE_PUS_ERROR_CLIENT_INVAL = 0x80182181,
  SCE_UPDATE_PUS_ERROR_CLIENT_NOMEM = 0x80182182,
  SCE_UPDATE_PUS_ERROR_CLIENT_ALREADY_INITIALIZED = 0x80182183,
  SCE_UPDATE_PUS_ERROR_CLIENT_NOT_INITIALIZED = 0x80182184,
  SCE_UPDATE_PUS_ERROR_CLIENT_BUSY = 0x80182185,
  SCE_UPDATE_CHECKER_ERROR_INVAL_TYPE = 0x80182200,
  SCE_UPDATE_CHECKER_ERROR_INVAL_URL_SIZE = 0x80182201,
  SCE_UPDATE_CHECKER_ERROR_INVAL_REGION_ATT = 0x80182202,
  SCE_UPDATE_CHECKER_ERROR_INVAL_SYSTEM_ATT = 0x80182203,
  SCE_UPDATE_CHECKER_ERROR_INVAL_SYSTEM_EX_ATT = 0x80182204,
  SCE_UPDATE_CHECKER_ERROR_INVAL_PRODUCT_REQ_ATT = 0x80182205,
  SCE_UPDATE_CHECKER_ERROR_INVAL_UPDATE_DATA_ATT = 0x80182206,
  SCE_UPDATE_CHECKER_ERROR_INVAL_SYSTEM_PUP_ATT = 0x80182207,
  SCE_UPDATE_CHECKER_ERROR_INVAL_SYSTEM_EX_PUP_ATT = 0x80182208,
  SCE_UPDATE_CHECKER_ERROR_INVAL_RECOVERY_PUP_ATT = 0x80182209,
  SCE_UPDATE_CHECKER_ERROR_INVAL_PREINST_PUP_ATT = 0x8018220A,
  SCE_UPDATE_CHECKER_ERROR_INVAL_IMAGE_ATT = 0x8018220B,
  SCE_UPDATE_CHECKER_ERROR_NOTFOUND_ROOT = 0x8018220C,
  SCE_UPDATE_CHECKER_ERROR_NOTFOUND_REGION = 0x8018220D,
  SCE_UPDATE_CHECKER_ERROR_NOTFOUND_REGION_CHILD = 0x8018220E,
  SCE_UPDATE_CHECKER_ERROR_NOTFOUND_UPDATE_DATA = 0x8018220F,
  SCE_UPDATE_CHECKER_ERROR_CRITICAL = 0x80182210,
  SCE_UPDATE_CHECKER_ERROR_BAD_STATE = 0x80182211,
  SCE_UPDATE_CHECKER_ERROR_SYS_CTL_BY_NAME = 0x80182212,
  SCE_UPDATE_CHECKER_ERROR_NOT_FOUND_DATA = 0x80182213,
  SCE_UPDATE_CHECKER_ERROR_NOTFOUND_ROOT_NO_REDIRECT = 0x80182214,
  SCE_UPDATE_CHECKER_ERROR_PARSER_INITIALIZE = 0x80182240,
  SCE_UPDATE_CHECKER_ERROR_ERRNO_ENOMEM = 0x80182241,
  SCE_UPDATE_CHECKER_ERROR_INVAL_ARG = 0x80182242,
  SCE_UPDATE_CHECKER_ERROR_URL = 0x80182243,
  SCE_UPDATE_CHECKER_ERROR_NO_SIGNUP_USER = 0x80182244,
  SCE_UPDATE_CHECKER_ERROR_CDN_INVAL_PSCODE = 0x80182245,
  SCE_UPDATE_CHECKER_ERROR_FATAL = 0x80182246,
  SCE_UPDATE_CHECKER_ERROR_NO_CACHE = 0x80182247,
  SCE_UPDATE_CHECKER_ERROR_CACHE_EXPIRED = 0x80182248,
  SCE_UPDATE_CHECKER_ERROR_QUEUE_FULL = 0x80182249,
  SCE_UPDATE_CHECKER_ERROR_CANCELED = 0x8018224A,
  SCE_UPDATE_CHECKER_ERROR_NOT_SUPPORTED = 0x8018224B,
  SCE_UPDATE_CHECKER_ERROR_VERSIONDOWN_TO_BETA_UNAVAILABLE = 0x8018224C,
  SCE_UPDATE_CHECKER_ERROR_DL_HTTP_STATUS_CODE = 0x80182260,
  SCE_UPDATE_CHECKER_ERROR_DL_INVAL_STATUS = 0x80182261,
  SCE_UPDATE_CHECKER_ERROR_CONTENTLEN_CHUNK_ENC = 0x80182262,
  SCE_UPDATE_CHECKER_ERROR_CONTENTLEN_NOT_FOUND = 0x80182263,
  SCE_UPDATE_CHECKER_ERROR_SERVER_MAINTENANCE = 0x80182264,
  SCE_UPDATE_CHECKER_ERROR_UNKNOWN_TITLE_ID = 0x80182265,
  SCE_UPDATE_CHECKER_ERROR_SSL_VERIFY = 0x80182266,
  SCE_UPDATE_CHECKER_ERROR_TOO_LONG_STRING = 0x80182267,
  SCE_UPDATE_CHECKER_ERROR_NO_OBFUSCATED_STRING = 0x80182268,
  SCE_UPDATE_CHECKER_ERROR_UPDATE_LIST_NOT_FOUND = 0x80182269,
  SCE_UPDATE_CHECKER_ERROR_INVAL_VERSION = 0x8018226A,
  SCE_UPDATE_CHECKER_ERROR_MISSING_REQUIRED_ATT = 0x8018226B,
  SCE_UPDATE_CHECKER_ERROR_BETA_CLOSED = 0x8018226C,
  SCE_UPSRV_CLIENT_ERROR_INTERNAL = 0x80182400,
  SCE_UPSRV_CLIENT_ERROR_ALREADY_INITIALIZED = 0x80182401,
  SCE_UPSRV_CLIENT_ERROR_NOT_INITIALIZED = 0x80182402,
  SCE_UPSRV_CLIENT_ERROR_OUT_OF_MEMORY = 0x80182403,
  SCE_UPSRV_CLIENT_ERROR_INVALID_ARGUMENT = 0x80182404,
  SCE_UPSRV_CLIENT_ERROR_BUSY = 0x80182405,
  SCE_UPSRV_SERVER_ERROR_INTERNAL = 0x80182500,
  SCE_UPSRV_SERVER_ERROR_ALREADY_INITIALIZED = 0x80182501,
  SCE_UPSRV_SERVER_ERROR_NOT_INITIALIZED = 0x80182502,
  SCE_UPSRV_SERVER_ERROR_OUT_OF_MEMORY = 0x80182503,
  SCE_UPSRV_SERVER_ERROR_INVALID_ARGUMENT = 0x80182504,
  SCE_UPSRV_SERVER_ERROR_INVALID_OPERATION = 0x80182505,
  SCE_UPSRV_SERVER_ERROR_TASK_ID_NOT_FOUND = 0x80182506,
  SCE_UPSRV_SERVER_ERROR_TASK_CANCELED = 0x80182507,
  SCE_UPSRV_SERVER_ERROR_TASK_SHUTDOWN = 0x80182508,
  SCE_UPSRV_SERVER_ERROR_FATAL = 0x80182509,
  SCE_UPSRV_ERROR_INTERNAL = 0x80182600,
  SCE_UPSRV_ERROR_ALREADY_INITIALIZED = 0x80182601,
  SCE_UPSRV_ERROR_INVALID_ARGUMENT = 0x80182602,
  SCE_UPSRV_ERROR_OUT_OF_MEMORY = 0x80182603,
  SCE_UPSRV_ERROR_UPDATE_FILE_NOT_FOUND = 0x80182604,
  SCE_UPSRV_ERROR_LASTEST_VER_SYSTEM = 0x80182605,
  SCE_UPSRV_ERROR_UPDATE_FILE_CORRUPTED = 0x80182606,
  SCE_UPSRV_ERROR_NOT_ACCESS_SYSTEM_STORAGE = 0x80182607,
  SCE_UPSRV_ERROR_UPDATE_FILE_NOT_USE = 0x80182608,
  SCE_UPSRV_ERROR_REGISTRY_ERROR = 0x80182609,
  SCE_UPSRV_ERROR_REBOOT_ERROR = 0x8018260A,
  SCE_UPSRV_ERROR_WAIT_DOWNLOAD_PHASE_TIMEOUT = 0x8018260B,
  SCE_UPSRV_ERROR_WAIT_IMAGE_WRITE_PHASE_TIMEOUT = 0x8018260C,
  SCE_UPSRV_ERROR_WAIT_REBOOT_PHASE_TIMEOUT = 0x8018260D,
  SCE_UPSRV_ERROR_WAIT_WAITING_FOR_EULA_PHASE_TIMEOUT = 0x8018260E,
  SCE_UPSRV_ERROR_WAIT_WAITING_FOR_UPDATE_PHASE_TIMEOUT = 0x8018260F,
  SCE_UPSRV_ERROR_WAIT_GET_EULA_TEXT_TIMEOUT = 0x80182610,
  SCE_UPSRV_ERROR_WAIT_LOAD_FEATURES_LIST_TIMEOUT = 0x80182611,
  SCE_UPSRV_ERROR_CURRENT_TASK_NOT_FOUND = 0x80182612,
  SCE_UPSRV_ERROR_USB_STORAGE_NOT_MOUNTED = 0x80182613,
  SCE_UPSRV_ERROR_CANCELED = 0x80182614,
  SCE_UPSRV_ERROR_NOT_SUPPORTED = 0x80182615,
  SCE_UPSRV_ERROR_WAIT_PHASE_CHANGE_TIMEOUT = 0x80182616,
  SCE_UPSRV_ERROR_BETA_UNAVAILABLE = 0x80182617,
  SCE_UPSRV_ERROR_BETA_NO_ENTITLEMENT = 0x80182618,
  SCE_UPSRV_ERROR_UPDATE_FILE_IS_NOT_OFFICIAL = 0x80182619,
  SCE_UPSRV_ERROR_UPDATE_FILE_IS_UNEXPECTED_VERSION = 0x8018261A,
  SCE_UPSRV_ERROR_INVALID_HANDLER = 0x8018261B,
  SCE_UPSRV_ERROR_HANDLER_IS_BUSY = 0x8018261C,
  SCE_UPSRV_ERROR_APPDB_NOT_READY = 0x8018261D,
  SCE_UPSRV_ERROR_REQUEST_WAKEUP_MAINSOC = 0x8018261E,
  SCE_UPSRV_ERROR_BETA_NO_PSN_MASTER_ACCOUNT = 0x8018261F,
  SCE_UPSRV_ERROR_UPDATE_FILE_IS_NOT_BETA = 0x80182620,
  SCE_UPSRV_ERROR_OUT_OF_SERVICE_DUE_TO_DATA_TRANSFER_MODE = 0x80182621,
  SCE_UPSRV_ERROR_NO_REQUESTED_UPDATE = 0x80182622,
  SCE_UPSRV_ERROR_NO_UPDATE_TASK = 0x80182623,
  SCE_UPSRV_ERROR_INVALID_FILE_FORMAT = 0x80182624,
  SCE_UPSRV_ERROR_UNSUPPORTED_PUP_TYPE = 0x80182625,
  SCE_UPSRV_ERROR_VERIFY_TIMEOUT = 0x80182626,
  SCE_UPSRV_ERROR_EXCEED_VERIFY_RETRY_LIMIT = 0x80182627,
  SCE_ORBIS_SWU_ERROR_KILL = 0x80182901,
  SCE_ORBIS_SWU_ERROR_SOCKET = 0x80182902,
  SCE_ORBIS_SWU_ERROR_CONNECT = 0x80182903,
  SCE_ORBIS_SWU_ERROR_SOCKET_CLOSE = 0x80182904,
  SCE_ORBIS_SWU_ERROR_SEND = 0x80182905,
  SCE_ORBIS_SWU_ERROR_UNLINK = 0x80182960,
  SCE_ORBIS_SWU_ERROR_STAT = 0x80182961,
  SCE_ORBIS_SWU_ERROR_NOT_FOUND = 0x80182980,
  SCE_ORBIS_SWU_ERROR_WRONG_PUP = 0x80182981,
  SCE_ORBIS_SWU_ERROR_NOT_FOUND_BUT_OK = 0x80182982,
  SCE_ORBIS_SWU_ERROR_UNSUPPORTED_PUP_BETA = 0x80182983,
  SCE_ORBIS_SWU_ERROR_OPEN_POWER_BUTTON = 0x80182990,
  SCE_ORBIS_SWU_ERROR_CLOSE_POWER_BUTTON = 0x80182991,
  SCE_ORBIS_SWU_ERROR_READ_POWER_BUTTON = 0x80182992,
  SCE_SET_UPPER_ERROR_ENOMEM = 0x80182A01,
  SCE_SET_UPPER_ERROR_KILL = 0x80182A02,
  SCE_SET_UPPER_ERROR_SOCKET = 0x80182A03,
  SCE_SET_UPPER_ERROR_CONNECT = 0x80182A04,
  SCE_SET_UPPER_ERROR_SOCKET_CLOSE = 0x80182A05,
  SCE_SET_UPPER_ERROR_SEND = 0x80182A06,
  SCE_SET_UPPER_ERROR_NOT_FOUND = 0x80182A30,
  SCE_SET_UPPER_ERROR_INVAL = 0x80182A31,
  SCE_SET_UPPER_ERROR_STAT = 0x80182A60,
  SCE_SET_UPPER_ERROR_OPEN_READ = 0x80182A61,
  SCE_SET_UPPER_ERROR_OPEN_WRITE = 0x80182A62,
  SCE_SET_UPPER_ERROR_CLOSE = 0x80182A63,
  SCE_SET_UPPER_ERROR_READ = 0x80182A64,
  SCE_SET_UPPER_ERROR_WRITE = 0x80182A65,
  SCE_SET_UPPER_ERROR_MKDIR = 0x80182A66,
  SCE_SET_UPPER_ERROR_RENAME = 0x80182A67,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_PAD_INIT = 0x80182B01,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_TILE_MODE = 0x80182B02,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_ENOMEM = 0x80182B03,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_EINVAL = 0x80182B04,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_ALREADY_INITIALIZED = 0x80182B05,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_USB = 0x80182B06,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_UPDATE = 0x80182B07,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_UNMOUNT = 0x80182B08,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_SYSTEM_DATA = 0x80182B09,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_USER = 0x80182B0A,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_PREINST = 0x80182B0B,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_DISC = 0x80182B0C,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_GETMNTINFO = 0x80182B0D,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_PWRITE = 0x80182B0E,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_EAP_USER = 0x80182B0F,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_USB_EINVAL = 0x80182B10,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_USB_EIO = 0x80182B11,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_USB_ENXIO = 0x80182B12,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_STAT_USB_EIO = 0x80182B13,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_STAT_USB_ENXIO = 0x80182B14,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_FCNTL_OPEN_FAILED = 0x80182B15,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_MULTIPLE_USB_STORAGE_DEVICES_CONNECTED = 0x80182B16,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NOT_FOUND = 0x80182B17,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_ALREADY_MOUNTED = 0x80182B18,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_CAM_OPEN = 0x80182B19,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_CAM_NOMEM = 0x80182B1A,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_CAM_SEND_CCB = 0x80182B1B,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_CAM_REQ_CCB = 0x80182B1C,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NOT_INITIALIZE = 0x80182B1D,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_NMOUNT_SYSTEM = 0x80182B1E,
  SCE_UPDATE_APP_FRAMEWORK_ERROR_CANCELED = 0x80182B1F,
  SCE_UPDATE_EULA_ERROR_PARSER_INITIALIZE = 0x80182C01,
  SCE_UPDATE_EULA_ERROR_ERRNO_ENOMEM = 0x80182C02,
  SCE_UPDATE_EULA_ERROR_INVALID = 0x80182C03,
  SCE_UPDATE_EULA_ERROR_BAD_STATE = 0x80182C10,
  SCE_UPDATE_EULA_ERROR_NOTFOUND_ROOT = 0x80182C11,
  SCE_UPDATE_EULA_ERROR_INVAL_EULA_VERSION_ATT = 0x80182C12,
  SCE_UPDATE_EULA_ERROR_INVAL_LANG_ATT = 0x80182C13,
  SCE_UPDATE_EULA_ERROR_CRITICAL = 0x80182C14,
  SCE_UPDATE_EULA_ERROR_INVAL_EULA_VERSION_VALUE = 0x80182C15,
  SCE_UPDATE_INFO_ERROR_FILE_NOT_FOUND = 0x80182D01,
  SCE_UPDATE_INFO_ERROR_EACCES = 0x80182D02,
  SCE_UPDATE_INFO_ERROR_EIO = 0x80182D03,
  SCE_UPDATE_INFO_ERROR_EBUSY = 0x80182D04,
  SCE_UPDATE_INFO_ERROR_INVALID_ARGUMENT = 0x80182D05,
  SCE_UPDATE_INFO_ERROR_NO_MEMORY = 0x80182D06,
  SCE_UPDATE_INFO_ERROR_INVALID_INFO_FILE = 0x80182D07,
  SCE_UPDATE_INFO_ERROR_MAJOR_VERSION_MISMATCH = 0x80182D08,
  SCE_UPDATE_INFO_ERROR_FAILED_TO_GET_INFO_VERSION = 0x80182D09,
  SCE_UPDATE_INFO_ERROR_DUPLICATE_KEY = 0x80182D0A,
  SCE_UPDATE_INFO_ERROR_INFO_VERSION_NOT_FOUND = 0x80182D0B,
  SCE_UPDATE_INFO_ERROR_LASTVER_NOT_FOUND = 0x80182D0C,
  SCE_UPDATE_INFO_ERROR_NOT_HEX_NUMBER = 0x80182D0D,
  SCE_UPDATE_INFO_ERROR_UPDATE_FAILURE_VERSION_NOT_FOUND = 0x80182D0E,
  SCE_UPDATE_INFO_ERROR_UPDATE_VERSION_NOT_FOUND = 0x80182D0F,
  SCE_UPDATE_INFO_ERROR_SYSTEM_EX_UPDATE_FAILURE_VERSION_NOT_FOUND = 0x80182D10,
  SCE_MANU_UPDATER_ERROR_GENERAL = 0x80182E00,
  SCE_MANU_UPDATER_ERROR_INVAL = 0x80182E01,
  SCE_MANU_UPDATER_ERROR_WRONG_ARG = 0x80182E02,
  SCE_MANU_UPDATER_ERROR_NOMEM = 0x80182E03,
  SCE_MANU_UPDATER_ERROR_SNVS_OPEN = 0x80182E20,
  SCE_MANU_UPDATER_ERROR_START_MANU_MODE = 0x80182E21,
  SCE_MANU_UPDATER_ERROR_SET_MANU_MODE = 0x80182E22,
  SCE_MANU_UPDATER_ERROR_GET_MANU_MODE = 0x80182E23,
  SCE_MANU_UPDATER_ERROR_MANU_MODE = 0x80182E24,
  SCE_MANU_UPDATER_ERROR_EXIT_MANU_MODE = 0x80182E25,
  SCE_MANU_UPDATER_ERROR_MANU_MODE_OFF = 0x80182E26,
  SCE_SAFEMODE_ERROR_ENOMEM = 0x80190001,
  SCE_SAFEMODE_ERROR_KILL = 0x80190002,
  SCE_SAFEMODE_ERROR_NOT_FOUND = 0x80190030,
  SCE_SAFEMODE_ERROR_INVAL = 0x80190031,
  SCE_SAFEMODE_ERROR_NOT_RECOVERY_PUP = 0x80190032,
  SCE_SAFEMODE_ERROR_UNSUPPORTED_PUP_BETA = 0x80190033,
  SCE_SAFEMODE_ERROR_IO_UPDATE_FILE_USB = 0x80190034,
  SCE_SAFEMODE_ERROR_IO_UPDATE_FILE_DISC = 0x80190035,
  SCE_SAFEMODE_ERROR_MULTIPLE_USB_STORAGE_DEVICES_CONNECTED = 0x80190036,
  SCE_SAFEMODE_ERROR_LATEST_VERSION_SYSTEM_ALREADY_INSTALLED = 0x80190037,
  SCE_SAFEMODE_ERROR_GET_SYSTEM_VERSION_FAILED = 0x80190038,
  SCE_SAFEMODE_ERROR_NOT_SUPPORTED_PUP = 0x80190039,
  SCE_SAFEMODE_ERROR_STAT = 0x80190060,
  SCE_SAFEMODE_ERROR_OPEN_READ = 0x80190061,
  SCE_SAFEMODE_ERROR_OPEN_WRITE = 0x80190062,
  SCE_SAFEMODE_ERROR_CLOSE = 0x80190063,
  SCE_SAFEMODE_ERROR_READ = 0x80190064,
  SCE_SAFEMODE_ERROR_WRITE = 0x80190065,
  SCE_SAFEMODE_ERROR_UNLINK = 0x80190066,
  SCE_SAFEMODE_ERROR_MKDIR = 0x80190067,
  SCE_SAFEMODE_ERROR_NMOUNT_USB = 0x80190068,
  SCE_SAFEMODE_ERROR_NMOUNT_UPDATE = 0x80190069,
  SCE_SAFEMODE_ERROR_UNMOUNT = 0x8019006A,
  SCE_SAFEMODE_ERROR_NMOUNT_SYSTEM_DATA = 0x8019006B,
  SCE_SAFEMODE_ERROR_NMOUNT_USER = 0x8019006C,
  SCE_SAFEMODE_ERROR_NMOUNT_PREINST = 0x8019006D,
  SCE_SAFEMODE_ERROR_NMOUNT_DISC = 0x8019006E,
  SCE_SAFEMODE_ERROR_GETMNTINFO = 0x8019006F,
  SCE_SAFEMODE_ERROR_PWRITE = 0x80190070,
  SCE_SAFEMODE_ERROR_NMOUNT_EAP_USER = 0x80190071,
  SCE_SAFEMODE_ERROR_HDD_STAT = 0x80190090,
  SCE_SAFEMODE_ERROR_HDD_OPEN = 0x80190091,
  SCE_SAFEMODE_ERROR_HDD_IOCTL = 0x80190092,
  SCE_SAFEMODE_ERROR_HDD_NONE = 0x80190093,
  SCE_SAFEMODE_ERROR_HDD_SIZE_ERROR = 0x80190094,
  SCE_SAFEMODE_ERROR_HDD_SATA_BRIDGE = 0x80190095,
  SCE_SAFEMODE_ERROR_OPEN_POWER_BUTTON = 0x801900A0,
  SCE_SAFEMODE_ERROR_CLOSE_POWER_BUTTON = 0x801900A1,
  SCE_SAFEMODE_ERROR_READ_POWER_BUTTON = 0x801900A2,
  SCE_SAFEMODE_ERROR_OPEN_ICC_CONFIGURATION = 0x801900A3,
  SCE_SAFEMODE_ERROR_CLOSE_ICC_CONFIGURATION = 0x801900A4,
  SCE_SAFEMODE_ERROR_IOCTL_ICC_CONFIGURATION = 0x801900A5,
  SCE_SAFEMODE_ERROR_NETCTL_CONNECT_TIME_OUT = 0x801900B0,
  SCE_SAFEMODE_ERROR_NETWORK_CONNECTION_DISABLED = 0x801900B1,
  SCE_SAFEMODE_ERROR_CONN_TEST_CONNECTING_TIMEOUT = 0x801900B2,
  SCE_SAFEMODE_ERROR_NMOUNT_USB_EINVAL = 0x80190100,
  SCE_SAFEMODE_ERROR_NMOUNT_USB_EIO = 0x80190101,
  SCE_SAFEMODE_ERROR_NMOUNT_USB_ENXIO = 0x80190102,
  SCE_SAFEMODE_ERROR_STAT_USB_EIO = 0x80190110,
  SCE_SAFEMODE_ERROR_STAT_USB_ENXIO = 0x80190111,
  SCE_SAFEMODE_ERROR_CHK_UPDATE_FORMAT_MAX_DEPTH = 0x80190200,
  SCE_SAFEMODE_ERROR_CHK_UPDATE_FORMAT_OPENDIR = 0x80190201,
  SCE_SAFEMODE_ERROR_CHK_UPDATE_FORMAT_STAT = 0x80190202,
  SCE_SAFEMODE_ERROR_CHK_UPDATE_FORMAT_UNSUPPORTED_TYPE = 0x80190203,
  SCE_SAFEMODE_ERROR_CHK_UPDATE_FORMAT_STATFS = 0x80190204,
  SCE_SAFEMODE_ERROR_CHK_UPDATE_FORMAT_WRONG_FSINFO = 0x80190205,
  SCE_SAFEMODE_ERROR_CHK_UPDATE_FORMAT_BLOCK_COUNT = 0x80190206,
  SCE_USBD_ERROR_IO = 0x80240001,
  SCE_USBD_ERROR_INVALID_ARG = 0x80240002,
  SCE_USBD_ERROR_ACCESS = 0x80240003,
  SCE_USBD_ERROR_NO_DEVICE = 0x80240004,
  SCE_USBD_ERROR_NOT_FOUND = 0x80240005,
  SCE_USBD_ERROR_BUSY = 0x80240006,
  SCE_USBD_ERROR_TIMEOUT = 0x80240007,
  SCE_USBD_ERROR_OVERFLOW = 0x80240008,
  SCE_USBD_ERROR_PIPE = 0x80240009,
  SCE_USBD_ERROR_INTERRUPTED = 0x8024000A,
  SCE_USBD_ERROR_NO_MEM = 0x8024000B,
  SCE_USBD_ERROR_NOT_SUPPORTED = 0x8024000C,
  SCE_USBD_ERROR_FATAL = 0x802400FF,
  SCE_AUDIO_OUT_ERROR_NOT_OPENED = 0x80260001,
  SCE_AUDIO_OUT_ERROR_BUSY = 0x80260002,
  SCE_AUDIO_OUT_ERROR_INVALID_PORT = 0x80260003,
  SCE_AUDIO_OUT_ERROR_INVALID_POINTER = 0x80260004,
  SCE_AUDIO_OUT_ERROR_PORT_FULL = 0x80260005,
  SCE_AUDIO_OUT_ERROR_INVALID_SIZE = 0x80260006,
  SCE_AUDIO_OUT_ERROR_INVALID_FORMAT = 0x80260007,
  SCE_AUDIO_OUT_ERROR_INVALID_SAMPLE_FREQ = 0x80260008,
  SCE_AUDIO_OUT_ERROR_INVALID_VOLUME = 0x80260009,
  SCE_AUDIO_OUT_ERROR_INVALID_PORT_TYPE = 0x8026000A,
  SCE_AUDIO_OUT_ERROR_INVALID_CONF_TYPE = 0x8026000C,
  SCE_AUDIO_OUT_ERROR_OUT_OF_MEMORY = 0x8026000D,
  SCE_AUDIO_OUT_ERROR_ALREADY_INIT = 0x8026000E,
  SCE_AUDIO_OUT_ERROR_NOT_INIT = 0x8026000F,
  SCE_AUDIO_OUT_ERROR_MEMORY = 0x80260010,
  SCE_AUDIO_OUT_ERROR_SYSTEM_RESOURCE = 0x80260011,
  SCE_AUDIO_OUT_ERROR_TRANS_EVENT = 0x80260012,
  SCE_AUDIO_OUT_ERROR_INVALID_FLAG = 0x80260013,
  SCE_AUDIO_OUT_ERROR_INVALID_MIXLEVEL = 0x80260014,
  SCE_AUDIO_OUT_ERROR_INVALID_ARG = 0x80260015,
  SCE_AUDIO_OUT_ERROR_INVALID_PARAM = 0x80260016,
  SCE_AUDIO_IN_ERROR_FATAL = 0x80260100,
  SCE_AUDIO_IN_ERROR_INVALID_HANDLE = 0x80260101,
  SCE_AUDIO_IN_ERROR_INVALID_SIZE = 0x80260102,
  SCE_AUDIO_IN_ERROR_INVALID_FREQ = 0x80260103,
  SCE_AUDIO_IN_ERROR_INVALID_TYPE = 0x80260104,
  SCE_AUDIO_IN_ERROR_INVALID_POINTER = 0x80260105,
  SCE_AUDIO_IN_ERROR_INVALID_PARAM = 0x80260106,
  SCE_AUDIO_IN_ERROR_PORT_FULL = 0x80260107,
  SCE_AUDIO_IN_ERROR_OUT_OF_MEMORY = 0x80260108,
  SCE_AUDIO_IN_ERROR_NOT_OPENED = 0x80260109,
  SCE_AUDIO_IN_ERROR_BUSY = 0x8026010A,
  SCE_AUDIO_IN_ERROR_SYSTEM_MEMORY = 0x8026010B,
  SCE_AUDIO_IN_ERROR_SYSTEM_IPC = 0x8026010C,
  SCE_AUDIO_OUT_ERROR_MASTERING_FATAL = 0x80260200,
  SCE_AUDIO_OUT_ERROR_MASTERING_INVALID_API_PARAM = 0x80260201,
  SCE_AUDIO_OUT_ERROR_MASTERING_INVALID_CONFIG = 0x80260202,
  SCE_AUDIO_OUT_ERROR_MASTERING_NOT_INITIALIZED = 0x80260203,
  SCE_AUDIO_OUT_ERROR_MASTERING_INVALID_STATES_ID = 0x80260204,
  SCE_AUDIO_OUT_ERROR_MASTERING_INVALID_FLAGS = 0x80260205,
  SCE_AUDIO_LATENCY_ESTIMATION_ERROR_FATAL = 0x80260300,
  SCE_AUDIO_LATENCY_ESTIMATION_ERROR_INVALID_HANDLE = 0x80260301,
  SCE_AUDIO_LATENCY_ESTIMATION_ERROR_INVALID_POINTER = 0x80260302,
  SCE_DISPLAY_ERROR_INVALID_HEAD = 0x80290000,
  SCE_VIDEO_OUT_ERROR_INVALID_VALUE = 0x80290001,
  SCE_VIDEO_OUT_ERROR_INVALID_ADDRESS = 0x80290002,
  SCE_VIDEO_OUT_ERROR_INVALID_PIXEL_FORMAT = 0x80290003,
  SCE_VIDEO_OUT_ERROR_INVALID_PITCH = 0x80290004,
  SCE_VIDEO_OUT_ERROR_INVALID_RESOLUTION = 0x80290005,
  SCE_VIDEO_OUT_ERROR_INVALID_FLIP_MODE = 0x80290006,
  SCE_VIDEO_OUT_ERROR_INVALID_TILING_MODE = 0x80290007,
  SCE_VIDEO_OUT_ERROR_INVALID_ASPECT_RATIO = 0x80290008,
  SCE_VIDEO_OUT_ERROR_RESOURCE_BUSY = 0x80290009,
  SCE_VIDEO_OUT_ERROR_INVALID_INDEX = 0x8029000A,
  SCE_VIDEO_OUT_ERROR_INVALID_HANDLE = 0x8029000B,
  SCE_VIDEO_OUT_ERROR_INVALID_EVENT_QUEUE = 0x8029000C,
  SCE_VIDEO_OUT_ERROR_INVALID_EVENT = 0x8029000D,
  SCE_VIDEO_OUT_ERROR_NO_EMPTY_SLOT = 0x8029000F,
  SCE_VIDEO_OUT_ERROR_SLOT_OCCUPIED = 0x80290010,
  SCE_VIDEO_OUT_ERROR_FLIP_QUEUE_FULL = 0x80290012,
  SCE_VIDEO_OUT_ERROR_INVALID_MEMORY = 0x80290013,
  SCE_VIDEO_OUT_ERROR_MEMORY_NOT_PHYSICALLY_CONTIGUOUS = 0x80290014,
  SCE_VIDEO_OUT_ERROR_MEMORY_INVALID_ALIGNMENT = 0x80290015,
  SCE_VIDEO_OUT_ERROR_UNSUPPORTED_OUTPUT_MODE = 0x80290016,
  SCE_VIDEO_OUT_ERROR_OVERFLOW = 0x80290017,
  SCE_VIDEO_OUT_ERROR_NO_DEVICE = 0x80290018,
  SCE_VIDEO_OUT_ERROR_UNAVAILABLE_OUTPUT_MODE = 0x80290019,
  SCE_VIDEO_OUT_ERROR_INVALID_OPTION = 0x8029001A,
  SCE_VIDEO_OUT_ERROR_PORT_UNSUPPORTED_FUNCTION = 0x8029001B,
  SCE_VIDEO_OUT_ERROR_UNSUPPORTED_OPERATION = 0x8029001C,
  SCE_VIDEO_OUT_ERROR_UNKNOWN = 0x802900FE,
  SCE_VIDEO_OUT_ERROR_FATAL = 0x802900FF,
  SCE_VIDEO_OUT_ERROR_ENOMEM = 0x8029100C,
  SCE_AV_CONTROL_ERROR_INVALID_PARAM = 0x802A0001,
  SCE_AV_CONTROL_ERROR_INVALID_PITCH = 0x802A0002,
  SCE_AV_CONTROL_ERROR_INVALID_MODE = 0x802A0003,
  SCE_AV_CONTROL_ERROR_PLL_FAIL = 0x802A0004,
  SCE_AV_CONTROL_ERROR_DP_LINK_TRAINING_FAIL = 0x802A0005,
  SCE_AV_CONTROL_ERROR_BLANK_TIMEOUT = 0x802A0006,
  SCE_AV_CONTROL_ERROR_INIT_FAIL = 0x802A0007,
  SCE_AV_CONTROL_ERROR_DP_BW_LIMIT = 0x802A0008,
  SCE_CAMERA_ERROR_PARAM = 0x802E0000,
  SCE_CAMERA_ERROR_ALREADY_INIT = 0x802E0001,
  SCE_CAMERA_ERROR_NOT_INIT = 0x802E0002,
  SCE_CAMERA_ERROR_ALREADY_OPEN = 0x802E0003,
  SCE_CAMERA_ERROR_NOT_OPEN = 0x802E0004,
  SCE_CAMERA_ERROR_ALREADY_START = 0x802E0005,
  SCE_CAMERA_ERROR_NOT_START = 0x802E0006,
  SCE_CAMERA_ERROR_FORMAT_UNKNOWN = 0x802E0007,
  SCE_CAMERA_ERROR_RESOLUTION_UNKNOWN = 0x802E0008,
  SCE_CAMERA_ERROR_BAD_FRAMERATE = 0x802E0009,
  SCE_CAMERA_ERROR_TIMEOUT = 0x802E000A,
  SCE_CAMERA_ERROR_ATTRIBUTE_UNKNOWN = 0x802E000B,
  SCE_CAMERA_ERROR_BUSY = 0x802E000C,
  SCE_CAMERA_ERROR_UNKNOWN_CONFIG = 0x802E000D,
  SCE_CAMERA_ERROR_ALREADY_READ = 0x802E000F,
  SCE_CAMERA_ERROR_NOT_CONNECTED = 0x802E0010,
  SCE_CAMERA_ERROR_NOT_SUPPORTED = 0x802E0011,
  SCE_CAMERA_ERROR_INVALID_CONFIG = 0x802E0013,
  SCE_CAMERA_ERROR_MAX_HANDLE = 0x802E0014,
  SCE_CAMERA_ERROR_MAX_PROCESS = 0x802E00FB,
  SCE_CAMERA_ERROR_COPYOUT_FAILED = 0x802E00FC,
  SCE_CAMERA_ERROR_COPYIN_FAILED = 0x802E00FD,
  SCE_CAMERA_ERROR_KPROC_CREATE = 0x802E00FE,
  SCE_CAMERA_ERROR_FATAL = 0x802E00FF,
  SCE_BT_ERROR_REG_NOT_READY = 0x802F0101,
  SCE_BT_ERROR_REG_DELETE_NO_ENTRY = 0x802F0102,
  SCE_BT_ERROR_REG_UPDATE_CANNOT_SAVE = 0x802F0103,
  SCE_BT_ERROR_REG_SET_HID_DESC_BAD_ARG = 0x802F0105,
  SCE_BT_ERROR_REG_SET_HID_DESC_NO_REG = 0x802F0106,
  SCE_BT_ERROR_REG_GET_HID_DESC_NO_REG = 0x802F0107,
  SCE_BT_ERROR_REG_GET_HID_DESC_TOO_SHORT = 0x802F0108,
  SCE_BT_ERROR_REG_DELETE_CONNECTING = 0x802F0109,
  SCE_BT_ERROR_REG_CANNOT_LOAD = 0x802F010A,
  SCE_BT_ERROR_REG_CANNOT_OPEN = 0x802F010B,
  SCE_BT_ERROR_REG_CANNOT_READ = 0x802F010C,
  SCE_BT_ERROR_REG_CANNOT_WRITE = 0x802F010D,
  SCE_BT_ERROR_REG_SET_REVOKE_FLAG_NO_ENTRY = 0x802F010E,
  SCE_BT_ERROR_INQUIRY_START_BUSY = 0x802F0201,
  SCE_BT_ERROR_CONNECT_START_NO_REG = 0x802F0202,
  SCE_BT_ERROR_CONNECT_START_NOT_CONNECTABLE = 0x802F0203,
  SCE_BT_ERROR_CONNECT_START_BUSY = 0x802F0204,
  SCE_BT_ERROR_DISCONNECT_START_NOT_CONNECTED = 0x802F0205,
  SCE_BT_ERROR_PIN_INVALID_LENGTH = 0x802F0206,
  SCE_BT_ERROR_USER_CONFIRM_NOT_CONNECTED = 0x802F0207,
  SCE_BT_ERROR_SDP_OPEN_NO_L2C = 0x802F0208,
  SCE_BT_ERROR_CONNECT_START_REG_FULL = 0x802F0209,
  SCE_BT_ERROR_CONNECT_START_CONNECTED = 0x802F020A,
  SCE_BT_ERROR_CONNECT_START_TOO_MANY = 0x802F020D,
  SCE_BT_ERROR_CONNECT_START_DELETING = 0x802F020E,
  SCE_BT_ERROR_AVDTP_OPEN_NO_L2C = 0x802F0501,
  SCE_BT_ERROR_AVDTP_CLOSE_BAD_SERV = 0x802F0502,
  SCE_BT_ERROR_AVDTP_CLOSE_BAD_STATE = 0x802F0503,
  SCE_BT_ERROR_AVDTP_START_BAD_SERV = 0x802F0504,
  SCE_BT_ERROR_AVDTP_START_BAD_STATE = 0x802F0505,
  SCE_BT_ERROR_AVDTP_STOP_BAD_SERV = 0x802F0506,
  SCE_BT_ERROR_AVDTP_STOP_BAD_STATE = 0x802F0507,
  SCE_BT_ERROR_AVDTP_SEND_BAD_STATE = 0x802F0508,
  SCE_BT_ERROR_AVDTP_RECONF_BAD_SERV = 0x802F0509,
  SCE_BT_ERROR_AVDTP_RECONF_BAD_STATE = 0x802F050A,
  SCE_BT_ERROR_AVCTP_OPEN_NO_L2C = 0x802F0601,
  SCE_BT_ERROR_AVCTP_CLOSE_NO_L2C = 0x802F0602,
  SCE_BT_ERROR_AVCTP_SEND_NO_L2C = 0x802F0603,
  SCE_BT_ERROR_AVCTP_NOT_CONNECTED = 0x802F0604,
  SCE_BT_ERROR_AVCTP_SEND_BUSY = 0x802F0605,
  SCE_BT_ERROR_AVCTP_SEND_NO_PRESS = 0x802F0606,
  SCE_BT_ERROR_AVCTP_SEND_NO_RELEASE = 0x802F0607,
  SCE_BT_ERROR_AVCTP_READ_NO_VOLUME = 0x802F0608,
  SCE_BT_ERROR_AVCTP_SEND_NOT_RUBY = 0x802F0609,
  SCE_BT_ERROR_HID_OPEN_NO_L2C = 0x802F0901,
  SCE_BT_ERROR_HID_CLOSE_NO_L2C = 0x802F0902,
  SCE_BT_ERROR_HID_SEND_NO_L2C = 0x802F0903,
  SCE_BT_ERROR_HID_NOT_CONNECTED = 0x802F0904,
  SCE_BT_ERROR_HID_NO_CAP = 0x802F0905,
  SCE_BT_ERROR_HID_INVALID_REQUEST_TYPE = 0x802F0906,
  SCE_BT_ERROR_HID_INVALID_BUFFER_ADDRESS = 0x802F0907,
  SCE_BT_ERROR_HID_INVALID_PROTOCOL = 0x802F0908,
  SCE_BT_ERROR_HID_INVALID_IDLE = 0x802F0909,
  SCE_BT_ERROR_HID_NOT_YET = 0x802F090C,
  SCE_BT_ERROR_HID_INVALID_LENGTH = 0x802F090D,
  SCE_BT_ERROR_HID_INVALID_REPORT_ID = 0x802F090E,
  SCE_BT_ERROR_HID_OVERWRITE_REQ = 0x802F090F,
  SCE_BT_ERROR_HID_INVALID_VID_PID = 0x802F0910,
  SCE_BT_ERROR_HID_BUSY = 0x802F0911,
  SCE_BT_ERROR_JUMBO_UNLOCK_NOT_OWNER = 0x802F0B01,
  SCE_BT_ERROR_HCI_TX_OVERFLOW = 0x802F0B02,
  SCE_BT_ERROR_ACL_TX_BUF_OVERFLOW = 0x802F0B03,
  SCE_BT_ERROR_ACL_TX_CB_OVERFLOW = 0x802F0B04,
  SCE_BT_ERROR_TIMER_CANCEL_BAD_ID = 0x802F0B05,
  SCE_BT_ERROR_TIMER_CANCEL_NOT_INITIALIZED = 0x802F0B06,
  SCE_BT_ERROR_TIMER_SET_NOT_INITIALIZED = 0x802F0B07,
  SCE_BT_ERROR_TIMER_SET_NO_SPACE = 0x802F0B08,
  SCE_BT_ERROR_COPYIN_FAILED = 0x802F0B09,
  SCE_BT_ERROR_COPYOUT_FAILED = 0x802F0B0A,
  SCE_BT_ERROR_GET_NAME_NO_DEVICE = 0x802F0C01,
  SCE_BT_ERROR_CB_TOO_MANY = 0x802F0C02,
  SCE_BT_ERROR_CB_NOT_REGISTERED = 0x802F0C03,
  SCE_BT_ERROR_CB_OVERFLOW = 0x802F0C04,
  SCE_BT_ERROR_AUDIO_START_NOT_CONNECTED = 0x802F0D01,
  SCE_BT_ERROR_AUDIO_START_NO_CAP = 0x802F0D02,
  SCE_BT_ERROR_AUDIO_STOP_NOT_CONNECTED = 0x802F0D03,
  SCE_BT_ERROR_AUDIO_STOP_NO_CAP = 0x802F0D04,
  SCE_BT_ERROR_AUDIO_SEND_NOT_CONNECTED = 0x802F0D05,
  SCE_BT_ERROR_AUDIO_SEND_NOT_STARTED = 0x802F0D06,
  SCE_BT_ERROR_AUDIO_SEND_INVALID_LENGTH = 0x802F0D07,
  SCE_BT_ERROR_AUDIO_RECV_NOT_CONNECTED = 0x802F0D08,
  SCE_BT_ERROR_AUDIO_RECV_NOT_STARTED = 0x802F0D09,
  SCE_BT_ERROR_AUDIO_RECV_INVALID_LENGTH = 0x802F0D0A,
  SCE_BT_ERROR_AUDIO_START_INVALID_SERV = 0x802F0D0B,
  SCE_BT_ERROR_AUDIO_STOP_INVALID_SERV = 0x802F0D0C,
  SCE_BT_ERROR_AUDIO_START_SERV_FAILED = 0x802F0D0D,
  SCE_BT_ERROR_AUDIO_STOP_SERV_FAILED = 0x802F0D0E,
  SCE_BT_ERROR_AUDIO_FREQ_NOT_CONNECTED = 0x802F0D0F,
  SCE_BT_ERROR_AUDIO_SEND_NO_CP = 0x802F0D10,
  SCE_BT_ERROR_AUDIO_SEND_BAD_TYPE = 0x802F0D11,
  SCE_BT_ERROR_AUDIO_RECV_BAD_TYPE = 0x802F0D12,
  SCE_BT_ERROR_AUDIO_COMBI_NOT_FOUND = 0x802F0D16,
  SCE_BT_ERROR_AUDIO_SEND_NO_L2C = 0x802F0D17,
  SCE_BT_ERROR_AUDIO_INTERNAL_1 = 0x802F0D18,
  SCE_BT_ERROR_AUDIO_SEND_BUSY = 0x802F0D19,
  SCE_BT_ERROR_AUDIO_RECV_BUSY = 0x802F0D1A,
  SCE_BT_ERROR_AUDIO_SEND_NO_CAP = 0x802F0D1B,
  SCE_BT_ERROR_AUDIO_SEND_SERV_FAILED = 0x802F0D1C,
  SCE_BT_ERROR_AUDIO_RECV_NO_CAP = 0x802F0D1D,
  SCE_BT_ERROR_AUDIO_RECV_SERV_FAILED = 0x802F0D1E,
  SCE_BT_ERROR_HID_RECV_NOT_CONNECTED = 0x802F0E01,
  SCE_BT_ERROR_HID_RECV_INVALID_LENGTH = 0x802F0E02,
  SCE_BT_ERROR_AVRCP_TOO_LONG_TITLE = 0x802F1201,
  SCE_BT_ERROR_AVRCP_INVALID_PLAY_STATUS = 0x802F1202,
  SCE_BT_ERROR_CONF_NOT_READY = 0x802F1501,
  SCE_BT_ERROR_CONF_INVALID_VALUE = 0x802F1502,
  SCE_BT_ERROR_CONF_BT_INACTIVE = 0x802F1503,
  SCE_BT_ERROR_CONF_TIMEOUT = 0x802F1504,
  SCE_BT_ERROR_CONF_CARD_NOT_FOUND = 0x802F1505,
  SCE_BT_ERROR_CONF_FUNCTION_NOT_FOUND = 0x802F1506,
  SCE_BT_ERROR_CONF_CANT_ENABLE_FUNCTION = 0x802F1507,
  SCE_BT_ERROR_CONF_CANT_DISABLE_FUNCTION = 0x802F1508,
  SCE_BT_ERROR_CONF_REGISTER_SUBINTR_HANDLER = 0x802F1509,
  SCE_BT_ERROR_CONF_RELEASE_SUBINTR_HANDLER = 0x802F150A,
  SCE_BT_ERROR_CONF_ENABLE_SUBINTR = 0x802F150B,
  SCE_BT_ERROR_CONF_DISABLE_SUBINTR = 0x802F150C,
  SCE_BT_ERROR_CONF_ON_TIMEOUT = 0x802F150D,
  SCE_BT_ERROR_CONF_OFF_TIMEOUT = 0x802F150E,
  SCE_BT_ERROR_CONF_SUSPEND_TIMEOUT = 0x802F150F,
  SCE_BT_ERROR_CONF_CANT_ENTER = 0x802F1520,
  SCE_BT_ERROR_NOTIMP = 0x802F2001,
  SCE_BT_ERROR_KPROC_CREATE = 0x802F2002,
  SCE_BT_ERROR_SDIO_GET_FUNCTION = 0x802F2003,
  SCE_BT_ERROR_SDIO_REGISTER_INTR_HANDLER = 0x802F2004,
  SCE_BT_ERROR_SDIO_UNREGISTER_INTR_HANDLER = 0x802F2005,
  SCE_BT_ERROR_SDIO_LOCK = 0x802F2006,
  SCE_BT_ERROR_SDIO_UNLOCK = 0x802F2007,
  SCE_BT_ERROR_SDIO_ENABLE_FUNCTION = 0x802F2008,
  SCE_BT_ERROR_SDIO_DISABLE_FUNCTION = 0x802F2009,
  SCE_BT_ERROR_SDIO_SET_BLOCK_LEN = 0x802F200A,
  SCE_BT_ERROR_SDIO_SET_BUS_SPEED = 0x802F200B,
  SCE_BT_ERROR_SDIO_READ_DIR = 0x802F200C,
  SCE_BT_ERROR_SDIO_WRITE_DIR = 0x802F200D,
  SCE_BT_ERROR_SDIO_READ_FIX = 0x802F200E,
  SCE_BT_ERROR_SDIO_WRITE_FIX = 0x802F200F,
  SCE_BT_ERROR_TSLEEP = 0x802F2010,
  SCE_BT_ERROR_GET_DEBUG_INFO_INVALID_REQUEST = 0x802F2101,
  SCE_BT_ERROR_SET_DEBUG_INFO_INVALID_REQUEST = 0x802F2102,
  SCE_BT_ERROR_GET_DEBUG_INFO_INVALID_SIZE = 0x802F2103,
  SCE_BT_ERROR_SET_DEBUG_INFO_INVALID_SIZE = 0x802F2104,
  SCE_BT_ERROR_GET_DEBUG_INFO_INVALID_ARGUMENT = 0x802F2105,
  SCE_BT_ERROR_SET_DEBUG_INFO_INVALID_ARGUMENT = 0x802F2106,
  SCE_BT_ERROR_GET_DEBUG_INFO_INVALID_STATE = 0x802F2107,
  SCE_BT_ERROR_SET_DEBUG_INFO_INVALID_STATE = 0x802F2108,
  SCE_BT_ERROR_GET_DEBUG_INFO_NOT_CONNECTED = 0x802F2109,
  SCE_BT_ERROR_SET_DEBUG_INFO_NOT_CONNECTED = 0x802F210A,
  SCE_BT_ERROR_PIN_IS_LE = 0x802F2201,
  SCE_BT_ERROR_CONNECT_START_IS_LE = 0x802F2202,
  SCE_BT_ERROR_AVCTP_IS_LE = 0x802F2203,
  SCE_BT_ERROR_HID_IS_LE = 0x802F2204,
  SCE_BT_ERROR_AUDIO_START_IS_LE = 0x802F2205,
  SCE_BT_ERROR_AUDIO_STOP_IS_LE = 0x802F2206,
  SCE_BT_ERROR_AUDIO_SEND_IS_LE = 0x802F2207,
  SCE_BT_ERROR_AUDIO_RECV_IS_LE = 0x802F2208,
  SCE_BT_ERROR_AUDIO_FREQ_IS_LE = 0x802F2209,
  SCE_BT_ERROR_CONNECT_START_IS_RA = 0x802F220A,
  SCE_BT_ERROR_ATT_BASE = 0x802F2300,
  SCE_BT_ERROR_ATT_INVALID_HANDLE = 0x802F2301,
  SCE_BT_ERROR_ATT_READ_NOT_PERMITTED = 0x802F2302,
  SCE_BT_ERROR_ATT_WRITE_NOT_PERMITTED = 0x802F2303,
  SCE_BT_ERROR_ATT_INVALID_PDU = 0x802F2304,
  SCE_BT_ERROR_ATT_INSUFFICIENT_AUTHENTICATION = 0x802F2305,
  SCE_BT_ERROR_ATT_REQUEST_NOT_SUPPORTED = 0x802F2306,
  SCE_BT_ERROR_ATT_INVALID_OFFSET = 0x802F2307,
  SCE_BT_ERROR_ATT_INSUFFICIENT_AUTHORIZATION = 0x802F2308,
  SCE_BT_ERROR_ATT_PEPARE_QUEUE_FULL = 0x802F2309,
  SCE_BT_ERROR_ATT_ATTRIBUTE_NOT_FOUND = 0x802F230A,
  SCE_BT_ERROR_ATT_ATTRIBUTE_NOT_LONG = 0x802F230B,
  SCE_BT_ERROR_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE = 0x802F230C,
  SCE_BT_ERROR_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH = 0x802F230D,
  SCE_BT_ERROR_ATT_UNLIKELY_ERROR = 0x802F230E,
  SCE_BT_ERROR_ATT_INSUFFICIENT_ENCRYPTION = 0x802F230F,
  SCE_BT_ERROR_ATT_UNSUPPORTED_GROUP_TYPE = 0x802F2310,
  SCE_BT_ERROR_ATT_INSUFFICIENT_RESOURCES = 0x802F2311,
  SCE_BT_ERROR_ATT_APPLICATION_ERROR_LO = 0x802F2380,
  SCE_BT_ERROR_ATT_APPLICATION_ERROR_HI = 0x802F23FF,
  SCE_BT_ERROR_GATT_INVALID_NO = 0x802F2401,
  SCE_BT_ERROR_GATT_NOT_CONNECTED = 0x802F2402,
  SCE_BT_ERROR_GATT_BUSY = 0x802F2403,
  SCE_BT_ERROR_GATT_INVALID_HANDLE = 0x802F2404,
  SCE_BT_ERROR_GATT_INVALID_FLAGS = 0x802F2405,
  SCE_BT_ERROR_GATT_INVALID_SIZE = 0x802F2406,
  SCE_BT_ERROR_GATT_NOT_LE = 0x802F2407,
  SCE_BT_ERROR_GATT_TOO_BIG_RECORD = 0x802F2408,
  SCE_BT_ERROR_GATT_NOT_YET = 0x802F2409,
  SCE_BT_ERROR_GATT_DISCONNECT = 0x802F240A,
  SCE_BT_ERROR_GATT_TSLEEP = 0x802F240B,
  SCE_BT_ERROR_GATT_ENTER = 0x802F240C,
  SCE_BT_ERROR_GATT_TOO_BIG_BUFFER = 0x802F240D,
  SCE_BT_ERROR_GATT_INVALID_RESPONSE = 0x802F240E,
  SCE_BT_ERROR_GATT_TIMEOUT = 0x802F240F,
  SCE_BT_ERROR_GATT_VU = 0x802F2410,
  SCE_BT_ERROR_SM_INVALID_KEY_LENGTH = 0x802F2501,
  SCE_BT_ERROR_SM_NOT_DIGIT = 0x802F2502,
  SCE_BT_ERROR_SM_NO_REQ = 0x802F2503,
  SCE_BT_ERROR_SM_NOT_NEEDED_PIN = 0x802F2504,
  SCE_BT_ERROR_SM_INVALID_CONFIRM_REPLY = 0x802F2505,
  SCE_BT_ERROR_LE_SET_ADVERTISING_INVALID_REQ = 0x802F2601,
  SCE_BT_ERROR_LE_SET_ADVERTISING_INVALID_LENGTH = 0x802F2602,
  SCE_BT_ERROR_LE_SET_ADVERTISING_INVALID_INTERVAL_MIN = 0x802F2603,
  SCE_BT_ERROR_LE_SET_ADVERTISING_INVALID_INTERVAL_MAX = 0x802F2604,
  SCE_BT_ERROR_LE_SET_ADVERTISING_INVALID_OWN_ADDRESS_TYPE = 0x802F2605,
  SCE_BT_ERROR_LE_SET_ADVERTISING_INVALID_DIRECT_ADDRESS_TYPE = 0x802F2606,
  SCE_BT_ERROR_LE_SET_ADVERTISING_INVALID_DIRECT_ADDRESS = 0x802F2607,
  SCE_BT_ERROR_LE_SET_SCAN_INVALID_REQ = 0x802F2701,
  SCE_BT_ERROR_LE_SET_SCAN_INVALID_LENGTH = 0x802F2702,
  SCE_BT_ERROR_LE_SET_SCAN_INVALID_INTERVAL = 0x802F2703,
  SCE_BT_ERROR_LE_SET_SCAN_INVALID_WINDOW = 0x802F2704,
  SCE_BT_ERROR_LE_SET_SCAN_INVALID_OWN_ADDRESS_TYPE = 0x802F2705,
  SCE_BT_ERROR_LE_GET_ADVERTISING_NOT_FOUND = 0x802F2801,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_INVALID_SCAN_INTERVAL = 0x802F2901,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_INVALID_SCAN_WINDOW = 0x802F2902,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_INVALID_PEER_ADDRESS = 0x802F2903,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_INVALID_OWN_ADDRESS_TYPE = 0x802F2904,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_INVALID_INTERVAL_MIN = 0x802F2905,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_INVALID_INTERVAL_MAX = 0x802F2906,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_INVALID_LATENCY = 0x802F2907,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_INVALID_TIMEOUT = 0x802F2908,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_REG_FULL = 0x802F2909,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_REG_ERROR = 0x802F290A,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_CONNECTED = 0x802F290B,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_FULL = 0x802F290C,
  SCE_BT_ERROR_LE_CREATE_CONNECTION_BUSY = 0x802F290D,
  SCE_BT_ERROR_ATT_READ_INVALID_NO = 0x802F2A01,
  SCE_BT_ERROR_ATT_READ_INVALID_LENGTH = 0x802F2A02,
  SCE_BT_ERROR_ATT_READ_INVALID_INTERNAL = 0x802F2A03,
  SCE_BT_ERROR_ATT_WRITE_INVALID_NO = 0x802F2A04,
  SCE_BT_ERROR_ATT_WRITE_INVALID_LENGTH = 0x802F2A05,
  SCE_BT_ERROR_ATT_WRITE_INVALID_INTERNAL = 0x802F2A06,
  SCE_BT_ERROR_ATT_NOT_YET = 0x802F2A07,
  SCE_BT_ERROR_LE_NOT_SUPPORTED = 0x802F2B01,
  SCE_BT_ERROR_PAIRING_OOB_TIMEOUT = 0x802F3101,
  SCE_BT_ERROR_PAIRING_OOB_FULL = 0x802F3102,
  SCE_BT_ERROR_PAIRING_OOB_CAN_NOT_DISCONNECT = 0x802F3103,
  SCE_BT_ERROR_PAIRING_OOB_INTERNAL_ERROR = 0x802F3104,
  SCE_BT_ERROR_PAIRING_OOB_SUSPEND = 0x802F3105,
  SCE_BT_ERROR_NOT_READY = 0x802F3201,
  SCE_BT_ERROR_GET_JACK_STATUS_NOT_CONNECTED = 0x802F3301,
  SCE_BT_ERROR_TOO_MANY_CONNECTION = 0x802F3401,
  SCE_BT_ERROR_TOO_MANY_HID = 0x802F3402,
  SCE_BT_ERROR_NOT_SUPPORTED_DEVICE = 0x802F3403,
  SCE_BT_ERROR_JEDI_VOLUME_GAIN_NOT_CONNECTED = 0x802F3501,
  SCE_BT_ERROR_JEDI_SNIFF_NOT_CONNECTED = 0x802F3601,
  SCE_BT_ERROR_JEDI_SNIFF_NOT_JEDI = 0x802F3602,
  SCE_BT_ERROR_VU_INVALID_VID_PID = 0x802F3701,
  SCE_BT_ERROR_VU_NOT_REGISTERED = 0x802F3702,
  SCE_BT_ERROR_VU_NOT_ALLOCED = 0x802F3703,
  SCE_BT_ERROR_VU_NOT_PAIRED = 0x802F3704,
  SCE_BT_ERROR_VU_TOO_SHORT = 0x802F3705,
  SCE_BT_ERROR_VU_NOT_CONNECTED = 0x802F3706,
  SCE_BT_ERROR_VU_TRANSFER_BUSY = 0x802F3707,
  SCE_BT_ERROR_VU_NO_L2C = 0x802F3708,
  SCE_BT_ERROR_VU_TOO_BIG = 0x802F3709,
  SCE_BT_ERROR_VU_INVALID_PARAMETER = 0x802F370A,
  SCE_BT_ERROR_VU_L2C_NOT_READY = 0x802F370B,
  SCE_BT_ERROR_VU_MISSING_REPORT_ID = 0x802F370C,
  SCE_BT_ERROR_GET_DID_NO_ID = 0x802F5001,
  SCE_HID_ERROR_INVALID_ARGUMENT = 0x803B0001,
  SCE_HID_ERROR_INVALID_HANDLE = 0x803B0002,
  SCE_HID_ERROR_DEVICE_NOT_FOUND = 0x803B0003,
  SCE_HID_ERROR_NOT_SUPPORTED = 0x803B0004,
  SCE_HID_ERROR_KPROC_CREATE = 0x803B0005,
  SCE_HID_ERROR_COPYOUT_FAILED = 0x803B0006,
  SCE_HID_ERROR_COPYIN_FAILED = 0x803B0007,
  SCE_HID_ERROR_ALREADY_INITIALIZED = 0x803B0008,
  SCE_HID_ERROR_NOT_INITIALIZED = 0x803B0009,
  SCE_HID_ERROR_RESOURCE_SHORTAGE = 0x803B000A,
  SCE_HID_ERROR_DEVICE_BUSY = 0x803B000B,
  SCE_HID_ERROR_ENTRY_NOT_FOUND = 0x803B000C,
  SCE_HID_ERROR_REGISTRY_INIT_FAILED = 0x803B000D,
  SCE_HID_ERROR_INVALID_DATA_FORMAT = 0x803B000E,
  SCE_HID_ERROR_REQUEST_TIMEOUT = 0x803B000F,
  SCE_HID_ERROR_REQUEST_CANCELED = 0x803B0010,
  SCE_HID_ERROR_INTR = 0x803B0011,
  SCE_HID_ERROR_RESTART = 0x803B0012,
  SCE_HID_ERROR_STATUS_MISMATCH = 0x803B0013,
  SCE_HID_ERROR_ALREADY_LOGGED_OUT = 0x803B0101,
  SCE_HID_CONTROL_ERROR_INVALID_ARG = 0x803B1001,
  SCE_HID_CONTROL_ERROR_NOT_INITIALIZED = 0x803B1002,
  SCE_NET_ERROR_EPERM = 0x80410101,
  SCE_NET_ERROR_ENOENT = 0x80410102,
  SCE_NET_ERROR_ESRCH = 0x80410103,
  SCE_NET_ERROR_EINTR = 0x80410104,
  SCE_NET_ERROR_EIO = 0x80410105,
  SCE_NET_ERROR_ENXIO = 0x80410106,
  SCE_NET_ERROR_E2BIG = 0x80410107,
  SCE_NET_ERROR_ENOEXEC = 0x80410108,
  SCE_NET_ERROR_EBADF = 0x80410109,
  SCE_NET_ERROR_ECHILD = 0x8041010A,
  SCE_NET_ERROR_EDEADLK = 0x8041010B,
  SCE_NET_ERROR_ENOMEM = 0x8041010C,
  SCE_NET_ERROR_EACCES = 0x8041010D,
  SCE_NET_ERROR_EFAULT = 0x8041010E,
  SCE_NET_ERROR_ENOTBLK = 0x8041010F,
  SCE_NET_ERROR_EBUSY = 0x80410110,
  SCE_NET_ERROR_EEXIST = 0x80410111,
  SCE_NET_ERROR_EXDEV = 0x80410112,
  SCE_NET_ERROR_ENODEV = 0x80410113,
  SCE_NET_ERROR_ENOTDIR = 0x80410114,
  SCE_NET_ERROR_EISDIR = 0x80410115,
  SCE_NET_ERROR_EINVAL = 0x80410116,
  SCE_NET_ERROR_ENFILE = 0x80410117,
  SCE_NET_ERROR_EMFILE = 0x80410118,
  SCE_NET_ERROR_ENOTTY = 0x80410119,
  SCE_NET_ERROR_ETXTBSY = 0x8041011A,
  SCE_NET_ERROR_EFBIG = 0x8041011B,
  SCE_NET_ERROR_ENOSPC = 0x8041011C,
  SCE_NET_ERROR_ESPIPE = 0x8041011D,
  SCE_NET_ERROR_EROFS = 0x8041011E,
  SCE_NET_ERROR_EMLINK = 0x8041011F,
  SCE_NET_ERROR_EPIPE = 0x80410120,
  SCE_NET_ERROR_EDOM = 0x80410121,
  SCE_NET_ERROR_ERANGE = 0x80410122,
  SCE_NET_ERROR_EAGAIN = 0x80410123,
  SCE_NET_ERROR_EWOULDBLOCK = 0x80410123,
  SCE_NET_ERROR_EINPROGRESS = 0x80410124,
  SCE_NET_ERROR_EALREADY = 0x80410125,
  SCE_NET_ERROR_ENOTSOCK = 0x80410126,
  SCE_NET_ERROR_EDESTADDRREQ = 0x80410127,
  SCE_NET_ERROR_EMSGSIZE = 0x80410128,
  SCE_NET_ERROR_EPROTOTYPE = 0x80410129,
  SCE_NET_ERROR_ENOPROTOOPT = 0x8041012A,
  SCE_NET_ERROR_EPROTONOSUPPORT = 0x8041012B,
  SCE_NET_ERROR_ESOCKTNOSUPPORT = 0x8041012C,
  SCE_NET_ERROR_ENOTSUP = 0x8041012D,
  SCE_NET_ERROR_EOPNOTSUPP = 0x8041012D,
  SCE_NET_ERROR_EPFNOSUPPORT = 0x8041012E,
  SCE_NET_ERROR_EAFNOSUPPORT = 0x8041012F,
  SCE_NET_ERROR_EADDRINUSE = 0x80410130,
  SCE_NET_ERROR_EADDRNOTAVAIL = 0x80410131,
  SCE_NET_ERROR_ENETDOWN = 0x80410132,
  SCE_NET_ERROR_ENETUNREACH = 0x80410133,
  SCE_NET_ERROR_ENETRESET = 0x80410134,
  SCE_NET_ERROR_ECONNABORTED = 0x80410135,
  SCE_NET_ERROR_ECONNRESET = 0x80410136,
  SCE_NET_ERROR_ENOBUFS = 0x80410137,
  SCE_NET_ERROR_EISCONN = 0x80410138,
  SCE_NET_ERROR_ENOTCONN = 0x80410139,
  SCE_NET_ERROR_ESHUTDOWN = 0x8041013A,
  SCE_NET_ERROR_ETOOMANYREFS = 0x8041013B,
  SCE_NET_ERROR_ETIMEDOUT = 0x8041013C,
  SCE_NET_ERROR_ECONNREFUSED = 0x8041013D,
  SCE_NET_ERROR_ELOOP = 0x8041013E,
  SCE_NET_ERROR_ENAMETOOLONG = 0x8041013F,
  SCE_NET_ERROR_EHOSTDOWN = 0x80410140,
  SCE_NET_ERROR_EHOSTUNREACH = 0x80410141,
  SCE_NET_ERROR_ENOTEMPTY = 0x80410142,
  SCE_NET_ERROR_EPROCLIM = 0x80410143,
  SCE_NET_ERROR_EUSERS = 0x80410144,
  SCE_NET_ERROR_EDQUOT = 0x80410145,
  SCE_NET_ERROR_ESTALE = 0x80410146,
  SCE_NET_ERROR_EREMOTE = 0x80410147,
  SCE_NET_ERROR_EBADRPC = 0x80410148,
  SCE_NET_ERROR_ERPCMISMATCH = 0x80410149,
  SCE_NET_ERROR_EPROGUNAVAIL = 0x8041014A,
  SCE_NET_ERROR_EPROGMISMATCH = 0x8041014B,
  SCE_NET_ERROR_EPROCUNAVAIL = 0x8041014C,
  SCE_NET_ERROR_ENOLCK = 0x8041014D,
  SCE_NET_ERROR_ENOSYS = 0x8041014E,
  SCE_NET_ERROR_EFTYPE = 0x8041014F,
  SCE_NET_ERROR_EAUTH = 0x80410150,
  SCE_NET_ERROR_ENEEDAUTH = 0x80410151,
  SCE_NET_ERROR_EIDRM = 0x80410152,
  SCE_NET_ERROR_ENOMS = 0x80410153,
  SCE_NET_ERROR_EOVERFLOW = 0x80410154,
  SCE_NET_ERROR_ECANCELED = 0x80410155,
  SCE_NET_ERROR_EPROTO = 0x8041015C,
  SCE_NET_ERROR_EADHOC = 0x804101A0,
  SCE_NET_ERROR_ERESERVED161 = 0x804101A1,
  SCE_NET_ERROR_ERESERVED162 = 0x804101A2,
  SCE_NET_ERROR_EINACTIVEDISABLED = 0x804101A3,
  SCE_NET_ERROR_ENODATA = 0x804101A4,
  SCE_NET_ERROR_EDESC = 0x804101A5,
  SCE_NET_ERROR_EDESCTIMEDOUT = 0x804101A6,
  SCE_NET_ERROR_ENETINTR = 0x804101A7,
  SCE_NET_ERROR_ENOTINIT = 0x804101C8,
  SCE_NET_ERROR_ENOLIBMEM = 0x804101C9,
  SCE_NET_ERROR_ERESERVED202 = 0x804101CA,
  SCE_NET_ERROR_ECALLBACK = 0x804101CB,
  SCE_NET_ERROR_EINTERNAL = 0x804101CC,
  SCE_NET_ERROR_ERETURN = 0x804101CD,
  SCE_NET_ERROR_ENOALLOCMEM = 0x804101CE,
  SCE_NET_ERROR_RESOLVER_EINTERNAL = 0x804101DC,
  SCE_NET_ERROR_RESOLVER_EBUSY = 0x804101DD,
  SCE_NET_ERROR_RESOLVER_ENOSPACE = 0x804101DE,
  SCE_NET_ERROR_RESOLVER_EPACKET = 0x804101DF,
  SCE_NET_ERROR_RESOLVER_ERESERVED224 = 0x804101E0,
  SCE_NET_ERROR_RESOLVER_ENODNS = 0x804101E1,
  SCE_NET_ERROR_RESOLVER_ETIMEDOUT = 0x804101E2,
  SCE_NET_ERROR_RESOLVER_ENOSUPPORT = 0x804101E3,
  SCE_NET_ERROR_RESOLVER_EFORMAT = 0x804101E4,
  SCE_NET_ERROR_RESOLVER_ESERVERFAILURE = 0x804101E5,
  SCE_NET_ERROR_RESOLVER_ENOHOST = 0x804101E6,
  SCE_NET_ERROR_RESOLVER_ENOTIMPLEMENTED = 0x804101E7,
  SCE_NET_ERROR_RESOLVER_ESERVERREFUSED = 0x804101E8,
  SCE_NET_ERROR_RESOLVER_ENORECORD = 0x804101E9,
  SCE_NET_ERROR_RESOLVER_EALIGNMENT = 0x804101EA,
  SCE_NET_ERROR_CONFIG_SOCKET = 0x80411301,
  SCE_NET_ERROR_CONFIG_UP_IF = 0x80411302,
  SCE_NET_ERROR_CONFIG_DOWN_IF = 0x80411303,
  SCE_NET_ERROR_CONFIG_GET_IFMTU = 0x80411304,
  SCE_NET_ERROR_CONFIG_SET_IFMTU = 0x80411305,
  SCE_NET_ERROR_CONFIG_GET_IFADDR = 0x80411306,
  SCE_NET_ERROR_CONFIG_SET_IFADDR = 0x80411307,
  SCE_NET_ERROR_CONFIG_DEL_IFADDR = 0x80411308,
  SCE_NET_ERROR_CONFIG_SET_ROUTE = 0x80411309,
  SCE_NET_ERROR_CONFIG_GET_ROUTE = 0x8041130A,
  SCE_NET_ERROR_CONFIG_NO_DEFAULT_ROUTE = 0x8041130C,
  SCE_NET_ERROR_CONFIG_INVALID_ARG = 0x8041130E,
  SCE_NET_ERROR_CONFIG_ADD_ARP = 0x8041130F,
  SCE_NET_ERROR_CONFIG_DEL_ARP = 0x80411310,
  SCE_NET_ERROR_CONFIG_SET_ARP = 0x80411311,
  SCE_NET_ERROR_CONFIG_GET_ARP = 0x80411312,
  SCE_NET_ERROR_CONFIG_NO_MEMORY = 0x80411313,
  SCE_NET_ERROR_CONFIG_NO_ROUTE = 0x80411314,
  SCE_NET_ERROR_CONFIG_SETUP = 0x80411315,
  SCE_NET_ERROR_CONFIG_SET_DEFAULT_SCOPE = 0x80411316,
  SCE_NET_ERROR_CONFIG_SET_LINKLOCAL_ADDR6 = 0x80411317,
  SCE_NET_ERROR_PPPOE_ALREADY_STARTED = 0x80411401,
  SCE_NET_ERROR_PPPOE_SOCKET = 0x80411402,
  SCE_NET_ERROR_PPPOE_IFCREATE = 0x80411403,
  SCE_NET_ERROR_PPPOE_SET_AUTHCFG = 0x80411404,
  SCE_NET_ERROR_PPPOE_SET_DNSOPTS = 0x80411405,
  SCE_NET_ERROR_PPPOE_NOT_STARTED = 0x80411406,
  SCE_NET_ERROR_PPPOE_GET_PPP_STATUS = 0x80411407,
  SCE_NET_ERROR_PPPOE_GET_SESSION_PHASE = 0x80411408,
  SCE_NET_ERROR_PPPOE_SESSION_INIT = 0x80411409,
  SCE_NET_ERROR_PPPOE_SESSION_NO_PADO = 0x8041140A,
  SCE_NET_ERROR_PPPOE_SESSION_NO_PADS = 0x8041140B,
  SCE_NET_ERROR_PPPOE_SESSION_NO_PADR = 0x8041140C,
  SCE_NET_ERROR_PPPOE_SESSION_GET_PADT = 0x8041140D,
  SCE_NET_ERROR_PPPOE_GET_SESSION_ERROR = 0x8041140E,
  SCE_NET_ERROR_PPPOE_SESSION_SERVICE_NAME = 0x8041140F,
  SCE_NET_ERROR_PPPOE_SESSION_AC_SYSTEM = 0x80411410,
  SCE_NET_ERROR_PPPOE_SESSION_GENERIC = 0x80411411,
  SCE_NET_ERROR_PPPOE_STATUS_AUTH = 0x80411412,
  SCE_NET_ERROR_PPPOE_STATUS_NETWORK = 0x80411413,
  SCE_NET_ERROR_PPPOE_STATUS_TERMINATE = 0x80411414,
  SCE_NET_ERROR_PPPOE_GET_DNS_ADDRS = 0x80411415,
  SCE_NET_ERROR_PPPOE_SET_PARAMS = 0x80411416,
  SCE_NET_ERROR_DHCP_INVALID_PACKET = 0x80411501,
  SCE_NET_ERROR_DHCP_NO_SERVER = 0x80411502,
  SCE_NET_ERROR_DHCP_SENT_DECLINE = 0x80411503,
  SCE_NET_ERROR_DHCP_LEASE_TIME = 0x80411504,
  SCE_NET_ERROR_DHCP_GET_NAK = 0x80411505,
  SCE_NET_ERROR_DHCP_INVALID_ARG = 0x80411506,
  SCE_NET_ERROR_DHCP_NOT_READY = 0x80411507,
  SCE_NET_ERROR_DHCP_INVALID_HOSTNAME = 0x80411508,
  SCE_NET_ERROR_DHCP_NO_MEMORY = 0x80411509,
  SCE_NET_ERROR_DHCP_NOT_INITIALIZED = 0x8041150A,
  SCE_NET_ERROR_DHCP_INVALID_IFNAME = 0x8041150B,
  SCE_NET_ERROR_DHCP_BUSY = 0x8041150C,
  SCE_NET_ERROR_DHCP_INVALID_VENDOR_ID = 0x8041150D,
  SCE_NET_ERROR_DHCP_RECV_FAILED = 0x8041150E,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_NOT_FOUND = 0x80411601,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_AUTH_PROTO_MISMATCH = 0x80411602,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_AUTH_REFUSED = 0x80411603,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_ASSOC_RESP_TIMEOUT = 0x80411604,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_AUTH_RESP_TIMEOUT = 0x80411605,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_WEP_DECRYPTION = 0x80411606,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_KEY_EXCHANGE = 0x80411607,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_DISASSOCIATED = 0x80411608,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_FW_INTERNAL = 0x80411609,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_UNKNOWN = 0x8041160A,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_IEEE_STATUS_CODE = 0x8041160C,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_INT_AP_CONNECTED = 0x8041160D,
  SCE_NET_ERROR_CONFIG_WLAN_JOIN_IEEE_NOT_SUPPORT_ALL_RATES = 0x8041160E,
  SCE_NET_ERROR_CONFIG_WLAN_AP_CHANNEL_CONFLICT = 0x80411641,
  SCE_NET_ERROR_DUPLICATE_IP_INVALID_ARG = 0x80411A01,
  SCE_NET_ERROR_DUPLICATE_IP_NO_MEMORY = 0x80411A02,
  SCE_NET_ERROR_DUPLICATE_IP_NOT_INITIALIZED = 0x80411A03,
  SCE_NET_ERROR_DUPLICATE_IP_INVALID_IFNAME = 0x80411A04,
  SCE_NET_ERROR_DUPLICATE_IP_BUSY = 0x80411A05,
  SCE_NET_ERROR_DUPLICATE_IP_REQUEST_ARP = 0x80411A06,
  SCE_NET_ERROR_CONFIG_ROUTING_ALREADY_STARTED = 0x80411B01,
  SCE_NET_ERROR_CONFIG_ROUTING_INVALID_LAN_IF = 0x80411B02,
  SCE_NET_ERROR_CONFIG_ROUTING_INVALID_WAN_IF = 0x80411B03,
  SCE_NET_ERROR_CONFIG_ROUTING_INVALID_LANWAN_IF = 0x80411B04,
  SCE_NET_ERROR_CONFIG_ROUTING_INVALID_LAN_INFO = 0x80411B05,
  SCE_NET_ERROR_CONFIG_ROUTING_INVALID_DNS_INFO = 0x80411B06,
  SCE_NET_ERROR_CONFIG_ROUTING_INVALID_PR_REQ = 0x80411B07,
  SCE_NET_ERROR_CONFIG_ROUTING_DISABLE_ROUTING = 0x80411B08,
  SCE_NET_ERROR_CONFIG_ROUTING_SET_NAT_CONFIG = 0x80411B09,
  SCE_NET_ERROR_CONFIG_ROUTING_SET_PACKET_FILTERING_CONFIG = 0x80411B0A,
  SCE_NET_ERROR_CONFIG_ROUTING_ENABLE_ROUTING = 0x80411B0B,
  SCE_NET_ERROR_CONFIG_ROUTING_NOT_STARTED = 0x80411B0C,
  SCE_NET_CTL_ERROR_NOT_INITIALIZED = 0x80412101,
  SCE_NET_CTL_ERROR_CALLBACK_MAX = 0x80412103,
  SCE_NET_CTL_ERROR_ID_NOT_FOUND = 0x80412104,
  SCE_NET_CTL_ERROR_INVALID_ID = 0x80412105,
  SCE_NET_CTL_ERROR_INVALID_CODE = 0x80412106,
  SCE_NET_CTL_ERROR_INVALID_ADDR = 0x80412107,
  SCE_NET_CTL_ERROR_NOT_CONNECTED = 0x80412108,
  SCE_NET_CTL_ERROR_NOT_AVAIL = 0x80412109,
  SCE_NET_CTL_ERROR_NETWORK_DISABLED = 0x8041210D,
  SCE_NET_CTL_ERROR_DISCONNECT_REQ = 0x8041210E,
  SCE_NET_CTL_ERROR_INVALID_TYPE = 0x8041210F,
  SCE_NET_CTL_ERROR_INVALID_SIZE = 0x80412111,
  SCE_NET_CTL_ERROR_ETHERNET_PLUGOUT = 0x80412115,
  SCE_NET_CTL_ERROR_WIFI_DEAUTHED = 0x80412116,
  SCE_NET_CTL_ERROR_WIFI_BEACON_LOST = 0x80412117,
  SCE_NET_CTL_ERROR_VSH_NOT_INITIALIZED = 0x80412181,
  SCE_NET_CTL_ERROR_VSH_NOT_TERMINATED = 0x80412182,
  SCE_NET_CTL_ERROR_IPCINT_OUT_OF_MEMORY = 0x80412183,
  SCE_NET_CTL_ERROR_VSH_INVALID_ADDR = 0x80412184,
  SCE_NET_CTL_ERROR_VSH_CALLBACK_MAX = 0x80412185,
  SCE_NET_CTL_ERROR_VSH_INVALID_ID = 0x80412186,
  SCE_NET_CTL_ERROR_VSH_BUSY = 0x80412187,
  SCE_NET_CTL_ERROR_IPCINT_BUSY = 0x80412187,
  SCE_NET_CTL_ERROR_VSH_UNKNOWN_DEVICE = 0x80412188,
  SCE_NET_CTL_ERROR_VSH_INVALID_MTU = 0x80412189,
  SCE_NET_CTL_ERROR_VSH_UNKNOWN_WIFI_SECURITY = 0x8041218A,
  SCE_NET_CTL_ERROR_VSH_INVALID_WIFI_SECURITY_KEY_LEN = 0x8041218B,
  SCE_NET_CTL_ERROR_VSH_UNKNOWN_IP_CONFIG = 0x8041218C,
  SCE_NET_CTL_ERROR_VSH_UNKNOWN_DNS_CONFIG = 0x8041218D,
  SCE_NET_CTL_ERROR_VSH_UNKNOWN_HTTP_PROXY_CONFIG = 0x8041218E,
  SCE_NET_CTL_ERROR_VSH_INVALID_IPADDR = 0x8041218F,
  SCE_NET_CTL_ERROR_VSH_INVALID_SSID = 0x80412190,
  SCE_NET_CTL_ERROR_IPCINT_INVALID_SSID = 0x80412190,
  SCE_NET_CTL_ERROR_VSH_INVALID_SSIDS_NUM = 0x80412191,
  SCE_NET_CTL_ERROR_IPCINT_INVALID_SSIDS_NUM = 0x80412191,
  SCE_NET_CTL_ERROR_VSH_INVALID_WIFI_SECURITY_KEY = 0x80412193,
  SCE_NET_CTL_ERROR_VSH_WIFI_ALREADY_USED = 0x80412196,
  SCE_NET_CTL_ERROR_VSH_NO_AOSS_AP = 0x80412197,
  SCE_NET_CTL_ERROR_VSH_SCANINFO_LOCKED = 0x80412199,
  SCE_NET_CTL_ERROR_IPCINT_SCANINFO_LOCKED = 0x80412199,
  SCE_NET_CTL_ERROR_VSH_INVALID_WIFI_LOCK = 0x8041219A,
  SCE_NET_CTL_ERROR_VSH_INVALID_SCANINFO_BSSID = 0x8041219D,
  SCE_NET_CTL_ERROR_IPCINT_INVALID_SCANINFO_BSSID = 0x8041219D,
  SCE_NET_CTL_ERROR_VSH_INVALID_SIZE = 0x8041219E,
  SCE_NET_CTL_ERROR_IPCINT_INVALID_SIZE = 0x8041219E,
  SCE_NET_CTL_ERROR_VSH_NO_SCANINFO = 0x8041219F,
  SCE_NET_CTL_ERROR_IPCINT_NO_SCANINFO = 0x8041219F,
  SCE_NET_CTL_ERROR_VSH_UNSUPPORTED = 0x804121A0,
  SCE_NET_CTL_ERROR_IPCINT_PROHIBITED = 0x804121A1,
  SCE_NET_AOSS_ERROR_LIB_NO_AP = 0x80412201,
  SCE_NET_AOSS_ERROR_LIB_MULTI_AP = 0x80412202,
  SCE_NET_AOSS_ERROR_LIB_NO_PACKET_INIT = 0x80412203,
  SCE_NET_AOSS_ERROR_LIB_NO_PACKET_SEQ = 0x80412204,
  SCE_NET_AOSS_ERROR_LIB_NOT_RESTART = 0x80412205,
  SCE_NET_AOSS_ERROR_LIB_INVALID_CHAR = 0x80412206,
  SCE_NET_AOSS_ERROR_LIB_MULTI_STA = 0x80412207,
  SCE_NET_AOSS_ERROR_LIB_PROHIBIT_KEY = 0x80412208,
  SCE_NET_AOSS_ERROR_LIB_OTHER_ERROR = 0x8041220F,
  SCE_NET_AOSS_ERROR_BUSY = 0x80412221,
  SCE_NET_AOSS_ERROR_STOPPED = 0x80412222,
  SCE_NET_AOSS_ERROR_WLAN0_CANNOT_BE_FOUND = 0x80412223,
  SCE_NET_AOSS_ERROR_INVALID_ALGO = 0x80412224,
  SCE_NET_AOSS_ERROR_INVALID_IP = 0x80412225,
  SCE_NET_AOSS_ERROR_INVALID_ARGUMENT = 0x80412226,
  SCE_NET_WPS_ERROR_SONY_WPS_LIB_E_FAILED = 0x80412301,
  SCE_NET_WPS_ERROR_SONY_WPS_LIB_E_PROTOCOL_TIMEOUT = 0x80412302,
  SCE_NET_WPS_ERROR_SONY_WPS_LIB_E_CANCELED = 0x80412303,
  SCE_NET_WPS_ERROR_SONY_WPS_LIB_E_SCAN_TIMEOUT = 0x80412304,
  SCE_NET_WPS_ERROR_SONY_WPS_LIB_E_SESSION_OVERLAP = 0x80412305,
  SCE_NET_WPS_ERROR_SONY_WPS_LIB_E_PINMISMATCHED = 0x80412306,
  SCE_NET_WPS_ERROR_SONY_WPS_LIB_E_UNKNOWN = 0x80412307,
  SCE_NET_WPS_ERROR_BUSY = 0x80412321,
  SCE_NET_WPS_ERROR_INVALID_MODE = 0x80412322,
  SCE_NET_WPS_ERROR_INVALID_ARG = 0x80412323,
  SCE_NET_WPS_ERROR_WLAN_NOT_FOUND = 0x80412324,
  SCE_NET_WPS_ERROR_DEVICE_OPEN = 0x80412325,
  SCE_NET_WPS_ERROR_ENROLLEE_OPEN = 0x80412326,
  SCE_NET_WPS_ERROR_NO_SETTING = 0x80412327,
  SCE_NET_WPS_ERROR_NO_SUITABLE_SETTING = 0x80412328,
  SCE_NET_WPS_ERROR_INVALID_SETTING = 0x80412329,
  SCE_NET_STUN_ERROR_ALREADY_INITIALIZED = 0x80412401,
  SCE_NET_STUN_ERROR_NOT_INITIALIZED = 0x80412402,
  SCE_NET_STUN_ERROR_TIMEOUT = 0x80412403,
  SCE_NET_STUN_ERROR_RECVED_INVALID_RESPONSE = 0x80412404,
  SCE_NET_STUN_ERROR_NOT_RECVED_MANDATORY_ATTR = 0x80412405,
  SCE_NET_STUN_ERROR_NOT_ENOUGH_SPACE = 0x80412406,
  SCE_NET_STUN_ERROR_MSG_INTEGRITY_CHECK_FAILURE = 0x80412407,
  SCE_NET_STUN_ERROR_RESOLVER_FAILED = 0x80412408,
  SCE_NET_STUN_ERROR_CONTEXT_MAX = 0x80412409,
  SCE_NET_STUN_ERROR_INVALID_ARG = 0x8041240A,
  SCE_NET_STUN_ERROR_INVALID_RESP_PADDING_DATA_LEN = 0x8041240B,
  SCE_NET_STUN_ERROR_INVALID_RESP_PADDING_DATA = 0x8041240C,
  SCE_NET_STUN_ERROR_MALLOC_FAILED = 0x8041240D,
  SCE_NET_STUN_ERROR_INET_PTON_FAILED = 0x8041240E,
  SCE_NET_STUN_ERROR_RESOLVER_CREATE_FAILED = 0x8041240F,
  SCE_NET_STUN_ERROR_MSPACE_CREATE_FAILED = 0x80412410,
  SCE_NET_STUN_ERROR_UPNP_ADDPORTMAPPING_FAILED = 0x80412411,
  SCE_NET_STUN_ERROR_CANCELED = 0x80412412,
  SCE_NAT_TYPE_ERROR_NOT_INITIALIZED = 0x80412501,
  SCE_NAT_TYPE_ERROR_NOT_TERMINATED = 0x80412502,
  SCE_NAT_TYPE_ERROR_BUSY = 0x80412503,
  SCE_NAT_TYPE_ERROR_INVALID_ARG = 0x80412504,
  SCE_NAT_TYPE_ERROR_HANDLER_MAX = 0x80412505,
  SCE_NAT_TYPE_ERROR_INVALID_ID = 0x80412506,
  SCE_NAT_TYPE_ERROR_ID_NOT_FOUND = 0x80412507,
  SCE_NET_RAKURAKU_ERROR_MEMORY = 0x80412601,
  SCE_NET_RAKURAKU_ERROR_NETWORK = 0x80412602,
  SCE_NET_RAKURAKU_ERROR_FINDTIMEOUT = 0x80412603,
  SCE_NET_RAKURAKU_ERROR_TIMEOUT = 0x80412604,
  SCE_NET_RAKURAKU_ERROR_UNKNOWN = 0x80412605,
  SCE_NET_RAKURAKU_ERROR_MAXAP = 0x80412606,
  SCE_NET_RAKURAKU_ERROR_UNKNOWNAUTH = 0x80412607,
  SCE_NET_RAKURAKU_ERROR_USERABORT = 0x80412608,
  SCE_NET_RAKURAKU_ERROR_STOPPED = 0x80412621,
  SCE_NET_RAKURAKU_ERROR_INVALID_STATE = 0x80412622,
  SCE_NET_RAKURAKU_ERROR_INVALID_RESULT = 0x80412623,
  SCE_NET_RAKURAKU_ERROR_INVALID_WIFI_SECURITY = 0x80412624,
  SCE_GAME_UPDATE_ERROR_NOT_INITIALIZED = 0x80412801,
  SCE_GAME_UPDATE_ERROR_ALREADY_INITIALIZED = 0x80412802,
  SCE_GAME_UPDATE_ERROR_INVALID_ARG = 0x80412803,
  SCE_GAME_UPDATE_ERROR_INVALID_SIZE = 0x80412804,
  SCE_GAME_UPDATE_ERROR_REQUEST_NOT_FOUND = 0x80412805,
  SCE_GAME_UPDATE_ERROR_TOO_MANY_REQUESTS = 0x80412806,
  SCE_GAME_UPDATE_ERROR_ABORTED = 0x80412807,
  SCE_GAME_UPDATE_ERROR_BUSY = 0x80412808,
  SCE_GAME_UPDATE_ERROR_NO_SUCH_TITLE = 0x8041280A,
  SCE_GAME_UPDATE_VSH_ERROR_NOT_INITIALIZED = 0x80412881,
  SCE_GAME_UPDATE_VSH_ERROR_ALREADY_INITIALIZED = 0x80412882,
  SCE_GAME_UPDATE_VSH_ERROR_INVALID_ARG = 0x80412883,
  SCE_GAME_UPDATE_VSH_ERROR_ABORTED = 0x80412887,
  SCE_GAME_UPDATE_VSH_ERROR_BUSY = 0x80412888,
  SCE_GAME_UPDATE_VSH_ERROR_INVALID_CONTEXT = 0x80412889,
  SCE_GAME_UPDATE_VSH_ERROR_INVALID_NP_ENVIRONMENT = 0x8041288B,
  SCE_GAME_UPDATE_VSH_ERROR_NOT_EXIST = 0x8041288C,
  SCE_GAME_UPDATE_VSH_ERROR_PARSER_FAILED = 0x8041288D,
  SCE_GAME_UPDATE_VSH_ERROR_BAD_RESPONSE = 0x8041288E,
  SCE_GAME_UPDATE_VSH_ERROR_MEMORY = 0x8041288F,
  SCE_GAME_UPDATE_VSH_ERROR_INTERNAL = 0x80412890,
  SCE_GAME_UPDATE_VSH_ERROR_HTTP_OUT_OF_MEMORY = 0x80412891,
  SCE_GAME_UPDATE_VSH_ERROR_HTTP_LOCAL_ERROR = 0x80412892,
  SCE_GAME_UPDATE_VSH_ERROR_HTTP_CONNECTION_ERROR = 0x80412893,
  SCE_GAME_UPDATE_VSH_ERROR_HTTP_PROXY_ERROR = 0x80412894,
  SCE_GAME_UPDATE_VSH_ERROR_HTTP_BAD_RESPONSE = 0x80412895,
  SCE_NET_CTL_AP_ERROR_INVALID_OPTSTR = 0x80412901,
  SCE_NET_CTL_AP_ERROR_APP_PROCESS_SUSPEND = 0x80412902,
  SCE_NET_CTL_AP_ERROR_IPADDR_CONFLICT = 0x80412903,
  SCE_NET_CTL_AP_ERROR_FREQ_BAND_CONFLICT = 0x80412904,
  SCE_NET_APCTL_ERROR_VSH_NOT_INITIALIZED = 0x80412981,
  SCE_NET_APCTL_ERROR_VSH_NOT_TERMINATED = 0x80412982,
  SCE_NET_APCTL_ERROR_VSH_INVALID_ADDR = 0x80412983,
  SCE_NET_APCTL_ERROR_VSH_CALLBACK_MAX = 0x80412984,
  SCE_NET_APCTL_ERROR_VSH_INVALID_ID = 0x80412985,
  SCE_NET_APCTL_ERROR_VSH_BUSY = 0x80412986,
  SCE_NET_APCTL_ERROR_VSH_UNKNOWN_WIFI_SECURITY = 0x80412987,
  SCE_NET_APCTL_ERROR_VSH_INVALID_WIFI_SECURITY_KEY_LEN = 0x80412988,
  SCE_NET_APCTL_ERROR_VSH_UNKNOWN_IP_CONFIG = 0x80412989,
  SCE_NET_APCTL_ERROR_VSH_INVALID_IPADDR = 0x8041298A,
  SCE_NET_APCTL_ERROR_VSH_INVALID_SSID = 0x8041298B,
  SCE_NET_APCTL_ERROR_VSH_INVALID_WIFI_SECURITY_KEY = 0x8041298C,
  SCE_NET_APCTL_ERROR_VSH_INVALID_SIZE = 0x8041298D,
  SCE_NET_CTL_AP_ERROR_AP_DISABLED = 0x8041298E,
  SCE_NET_CTL_AP_ERROR_NOT_STARTED = 0x8041298F,
  SCE_NET_CTL_AP_ERROR_INVALID_TYPE = 0x80412990,
  SCE_NET_CTL_AP_ERROR_INVALID_ADDR = 0x80412991,
  SCE_NET_CTL_AP_ERROR_CHANNEL_CONFLICT = 0x80412992,
  SCE_NET_CTL_AP_ERROR_STOP_REQ = 0x80412993,
  SCE_NET_CTL_AP_ERROR_NOT_INITIALIZED = 0x80412994,
  SCE_NET_CTL_AP_ERROR_CALLBACK_MAX = 0x80412995,
  SCE_NET_CTL_AP_ERROR_INVALID_ID = 0x80412996,
  SCE_NET_CTL_AP_ERROR_ID_NOT_FOUND = 0x80412997,
  SCE_NET_CTL_AP_ERROR_INVALID_SIZE = 0x80412998,
  SCE_NET_CTL_AP_ERROR_OWNER_CHANGED = 0x8041299A,
  SCE_NET_CTL_AP_ERROR_VSH_INVALID_OPTSTR = 0x8041299B,
  SCE_NET_UPNP_ERROR_NOT_INITIALIZED = 0x80414101,
  SCE_NET_UPNP_ERROR_LIBNETCTL_NOT_IPOBTAINED = 0x80414102,
  SCE_NET_UPNP_ERROR_INVALID_ARG = 0x80414105,
  SCE_NET_UPNP_ERROR_PREFIX_BUF_TOO_SMALL = 0x80414106,
  SCE_NET_UPNP_ERROR_INVALID_ACTION_RESP = 0x80414107,
  SCE_NET_UPNP_ERROR_ACTION_FAILED = 0x80414108,
  SCE_NET_UPNP_ERROR_BUF_TOO_SMALL = 0x80414109,
  SCE_NET_UPNP_ERROR_ACTION_TIMEOUT = 0x8041410A,
  SCE_NET_UPNP_ERROR_SERVICE_NOT_FOUND = 0x8041410B,
  SCE_NET_UPNP_ERROR_ACTION_INVALID_ACTION = 0x80414171,
  SCE_NET_UPNP_ERROR_ACTION_INVALID_ARGS = 0x80414172,
  SCE_NET_UPNP_ERROR_ACTION_INVALID_VAR = 0x80414173,
  SCE_NET_UPNP_ERROR_ACTION_ACTION_FAILED = 0x80414174,
  SCE_NET_UPNP_ERROR_ACTION_NO_SUCH_ENTRY = 0x80414175,
  SCE_NET_UPNP_ERROR_ACTION_WC_IN_SRC_IP = 0x80414176,
  SCE_NET_UPNP_ERROR_ACTION_WC_IN_EXT_PORT = 0x80414177,
  SCE_NET_UPNP_ERROR_ACTION_CONFLICT_IN_MAPPING = 0x80414178,
  SCE_NET_UPNP_ERROR_ACTION_SAME_PORT_REQUIRED = 0x80414179,
  SCE_NET_UPNP_ERROR_ACTION_LEASE_TIME_SPECIFIED = 0x8041417A,
  SCE_NET_UPNP_ERROR_ACTION_REMOTEHOST_MUST_BE_WC = 0x8041417B,
  SCE_NET_UPNP_ERROR_ACTION_EXT_PORT_MUST_BE_WC = 0x8041417C,
  SCE_NET_UPNP_ERROR_ACTION_OTHER = 0x8041417D,
  SCE_NET_UPNP_ERROR_NO_EXT_IP = 0x8041417E,
  SCE_NET_UPNP_ERROR_NOT_SOAP_TAG = 0x80414180,
  SCE_NET_UPNP_ERROR_ATTR_NOT_FOUND = 0x80414181,
  SCE_NET_UPNP_ERROR_NODE_NAME_NOT_FOUND = 0x80414182,
  SCE_NET_UPNP_ERROR_INVALID_ATTR = 0x80414183,
  SCE_NET_UPNP_ERROR_NODE_NOT_FOUND = 0x80414184,
  SCE_NET_UPNP_ERROR_OUTPUT_BUF_TOO_SMALL = 0x80414185,
  SCE_NET_UPNP_ERROR_INVALID_MSEARCH_ADDR = 0x80414186,
  SCE_NET_UPNP_ERROR_MSEARCH_TIMEOUT = 0x80414187,
  SCE_NET_UPNP_ERROR_LINE_NOT_TERMINATED = 0x80414188,
  SCE_NET_UPNP_ERROR_INVALID_HEADER = 0x80414189,
  SCE_NET_UPNP_ERROR_INVALID_MSEARCH = 0x8041418A,
  SCE_NET_UPNP_ERROR_INVALID_HTTP_RESPONSE = 0x8041418B,
  SCE_NET_UPNP_ERROR_CLEN_TOO_BIG = 0x8041418C,
  SCE_NET_UPNP_ERROR_COULD_NOT_RECVED_ALL_DATA = 0x8041418D,
  SCE_NET_UPNP_ERROR_INVALID_INT_ACTION = 0x8041418F,
  SCE_NET_UPNP_ERROR_CLOSE_TAG_NOT_FOUND = 0x80414190,
  SCE_NET_UPNP_ERROR_XML_ENCODE_INVALID_ARGUMENT = 0x804141A0,
  SCE_NET_UPNP_ERROR_XML_ENCODE_INVALID_CHARACTER = 0x804141A1,
  SCE_NET_UPNP_ERROR_XML_ENCODE_INSUFFICIENT = 0x804141A2,
  SCE_NET_BWE_VSH_ERROR_NOT_INITIALIZED = 0x80414201,
  SCE_NET_BWE_VSH_ERROR_NOT_TERMINATED = 0x80414202,
  SCE_NET_BWE_VSH_ERROR_BUSY = 0x80414203,
  SCE_NET_BWE_VSH_ERROR_INVALID_ARG = 0x80414204,
  SCE_NET_BWE_VSH_ERROR_BANDWIDTH_TEST_NOT_COMPLETED = 0x80414205,
  SCE_NET_BWE_VSH_ERROR_CALLBACK_MAX = 0x80414206,
  SCE_NET_BWE_VSH_ERROR_INVALID_ID = 0x80414207,
  SCE_NET_LOG_VSH_ERROR_NOT_TERMINATED = 0x80414301,
  SCE_NETEV_ERROR_INVALID_DECRYPT_SIZE = 0x80414401,
  SCE_NETEV_ERROR_INVALID_FILE_PATH = 0x80414402,
  SCE_NETEV_ERROR_INVALID_READ_FILE_SIZE = 0x80414403,
  SCE_NETEV_ERROR_READ_FILE_IO = 0x80414404,
  SCE_NETEV_ERROR_INVALID_WRITE_FILE_SIZE = 0x80414405,
  SCE_NETEV_ERROR_WRITE_FILE_IO = 0x80414406,
  SCE_NETEV_ERROR_ABORTED = 0x80414407,
  SCE_NETEV_ERROR_INVALID_URL = 0x80414408,
  SCE_NETEV_ERROR_NOT_MODIFIED_HTTP_RESPONSE = 0x80414409,
  SCE_NETEV_ERROR_HTTP_STATUS_CODE_NOT_OK = 0x8041440A,
  SCE_NETEV_ERROR_INVALID_CONTENT_LENGTH = 0x8041440B,
  SCE_NETEV_ERROR_NO_VALID_LOCAL_FILE = 0x8041440C,
  SCE_NETEV_ERROR_NET_FILE_VALIDATION = 0x8041440D,
  SCE_NETEV_ERROR_WRITE_FILE = 0x8041440E,
  SCE_NETEV_ERROR_NOT_IPOBTAINED = 0x8041440F,
  SCE_NETEV_ERROR_INVALID_XML_FORMAT = 0x80414410,
  SCE_NETEV_ERROR_INVALID_PARSE_PARAM = 0x80414411,
  SCE_NETEV_ERROR_NOT_INITIALIZED = 0x80414412,
  SCE_NETEV_ERROR_INVALID_RECVED_FILE_SIZE = 0x80414413,
  SCE_NETEV_ERROR_LAST_MODIFIED_NOT_FOUND = 0x80414414,
  SCE_NETEV_ERROR_INVALID_PARAM = 0x80414415,
  SCE_HTTP_ERROR_BEFORE_INIT = 0x80431001,
  SCE_HTTP_ERROR_ALREADY_INITED = 0x80431020,
  SCE_HTTP_ERROR_BUSY = 0x80431021,
  SCE_HTTP_ERROR_OUT_OF_MEMORY = 0x80431022,
  SCE_HTTP_ERROR_NOT_FOUND = 0x80431025,
  SCE_HTTP_ERROR_UNKNOWN_SCHEME = 0x80431061,
  SCE_HTTP_ERROR_NETWORK = 0x80431063,
  SCE_HTTP_ERROR_BAD_RESPONSE = 0x80431064,
  SCE_HTTP_ERROR_BEFORE_SEND = 0x80431065,
  SCE_HTTP_ERROR_AFTER_SEND = 0x80431066,
  SCE_HTTP_ERROR_TIMEOUT = 0x80431068,
  SCE_HTTP_ERROR_UNKNOWN_AUTH_TYPE = 0x80431069,
  SCE_HTTP_ERROR_INVALID_VERSION = 0x8043106A,
  SCE_HTTP_ERROR_UNKNOWN_METHOD = 0x8043106B,
  SCE_HTTP_ERROR_READ_BY_HEAD_METHOD = 0x8043106F,
  SCE_HTTP_ERROR_NOT_IN_COM = 0x80431070,
  SCE_HTTP_ERROR_NO_CONTENT_LENGTH = 0x80431071,
  SCE_HTTP_ERROR_CHUNK_ENC = 0x80431072,
  SCE_HTTP_ERROR_TOO_LARGE_RESPONSE_HEADER = 0x80431073,
  SCE_HTTP_ERROR_SSL = 0x80431075,
  SCE_HTTP_ERROR_INSUFFICIENT_STACKSIZE = 0x80431076,
  SCE_HTTP_ERROR_ABORTED = 0x80431080,
  SCE_HTTP_ERROR_UNKNOWN = 0x80431081,
  SCE_HTTP_ERROR_EAGAIN = 0x80431082,
  SCE_HTTP_ERROR_PROXY = 0x80431084,
  SCE_HTTP_ERROR_BROKEN = 0x80431085,
  SCE_HTTP_ERROR_INVALID_ID = 0x80431100,
  SCE_HTTP_ERROR_OUT_OF_SIZE = 0x80431104,
  SCE_HTTP_ERROR_INVALID_VALUE = 0x804311FE,
  SCE_HTTP_ERROR_PARSE_HTTP_NOT_FOUND = 0x80432025,
  SCE_HTTP_ERROR_PARSE_HTTP_INVALID_RESPONSE = 0x80432060,
  SCE_HTTP_ERROR_PARSE_HTTP_INVALID_VALUE = 0x804321FE,
  SCE_HTTP_ERROR_INVALID_URL = 0x80433060,
  SCE_HTTPS_ERROR_CERT = 0x80435060,
  SCE_HTTPS_ERROR_HANDSHAKE = 0x80435061,
  SCE_HTTPS_ERROR_IO = 0x80435062,
  SCE_HTTPS_ERROR_INTERNAL = 0x80435063,
  SCE_HTTPS_ERROR_PROXY = 0x80435064,
  SCE_HTTPS_ERROR_PROHIBITED = 0x8043506B,
  SCE_HTTP_ERROR_RESOLVER_EPACKET = 0x80436001,
  SCE_HTTP_ERROR_RESOLVER_ENODNS = 0x80436002,
  SCE_HTTP_ERROR_RESOLVER_ETIMEDOUT = 0x80436003,
  SCE_HTTP_ERROR_RESOLVER_ENOSUPPORT = 0x80436004,
  SCE_HTTP_ERROR_RESOLVER_EFORMAT = 0x80436005,
  SCE_HTTP_ERROR_RESOLVER_ESERVERFAILURE = 0x80436006,
  SCE_HTTP_ERROR_RESOLVER_ENOHOST = 0x80436007,
  SCE_HTTP_ERROR_RESOLVER_ENOTIMPLEMENTED = 0x80436008,
  SCE_HTTP_ERROR_RESOLVER_ESERVERREFUSED = 0x80436009,
  SCE_HTTP_ERROR_RESOLVER_ENORECORD = 0x8043600A,
  SCE_FONT_ERROR_FATAL = 0x80460001,
  SCE_FONT_ERROR_INVALID_PARAMETER = 0x80460002,
  SCE_FONT_ERROR_INVALID_MEMORY = 0x80460003,
  SCE_FONT_ERROR_INVALID_LIBRARY = 0x80460004,
  SCE_FONT_ERROR_INVALID_FONT_HANDLE = 0x80460005,
  SCE_FONT_ERROR_INVALID_GLYPH = 0x80460006,
  SCE_FONT_ERROR_INVALID_RENDERER = 0x80460007,
  SCE_FONT_ERROR_INVALID_TEXT_SOURCE = 0x80460008,
  SCE_FONT_ERROR_INVALID_STRING = 0x80460009,
  SCE_FONT_ERROR_INVALID_WRITING = 0x8046000A,
  SCE_FONT_ERROR_INVALID_WORDS = 0x8046000B,
  SCE_FONT_ERROR_ALLOCATION_FAILED = 0x80460010,
  SCE_FONT_ERROR_FS_OPEN_FAILED = 0x80460011,
  SCE_FONT_ERROR_NO_SUPPORT_LIBRARY = 0x80460018,
  SCE_FONT_ERROR_NO_SUPPORT_FORMAT = 0x80460019,
  SCE_FONT_ERROR_NO_SUPPORT_FUNCTION = 0x80460020,
  SCE_FONT_ERROR_ALREADY_SPECIFIED = 0x80460021,
  SCE_FONT_ERROR_ALREADY_ATTACHED = 0x80460022,
  SCE_FONT_ERROR_ALREADY_OPENED = 0x80460023,
  SCE_FONT_ERROR_NOT_ATTACHED_CACHE_BUFFER = 0x80460025,
  SCE_FONT_ERROR_NO_SUPPORT_FONTSET = 0x80460031,
  SCE_FONT_ERROR_FONT_OPEN_MAX = 0x80460033,
  SCE_FONT_ERROR_FONT_OPEN_FAILED = 0x80460036,
  SCE_FONT_ERROR_FONT_CLOSE_FAILED = 0x80460037,
  SCE_FONT_ERROR_NO_SUPPORT_TYPOGRAPHY = 0x80460040,
  SCE_FONT_ERROR_NO_SUPPORT_CODE = 0x80460041,
  SCE_FONT_ERROR_NO_SUPPORT_GLYPH = 0x80460042,
  SCE_FONT_ERROR_NO_SUPPORT_SCRIPT = 0x80460043,
  SCE_FONT_ERROR_NO_SUPPORT_LANGUAGE = 0x80460044,
  SCE_FONT_ERROR_NO_SUPPORT_SURFACE = 0x80460050,
  SCE_FONT_ERROR_UNSET_PARAMETER = 0x80460058,
  SCE_FONT_ERROR_FUNCTIONAL_LIMIT = 0x8046005C,
  SCE_FONT_ERROR_ALREADY_BOUND_RENDERER = 0x80460060,
  SCE_FONT_ERROR_NOT_BOUND_RENDERER = 0x80460061,
  SCE_FONT_ERROR_RENDERER_ALLOCATION_FAILED = 0x80460063,
  SCE_FONT_ERROR_RENDERER_ALLOCATION_LIMITED = 0x80460064,
  SCE_FONT_ERROR_RENDERER_RENDER_FAILED = 0x80460065,
  SCE_MD5_ERROR_INVALID_POINTER = 0x80480100,
  SCE_MD5_ERROR_INVALID_STATE = 0x80480101,
  SCE_MD5_ERROR_UNINITIALIZED_CONTEXT = 0x80480102,
  SCE_SHA0_ERROR_INVALID_POINTER = 0x80480200,
  SCE_SHA0_ERROR_INVALID_STATE = 0x80480201,
  SCE_SHA0_ERROR_UNINITIALIZED_CONTEXT = 0x80480202,
  SCE_SHA1_ERROR_INVALID_POINTER = 0x80480300,
  SCE_SHA1_ERROR_INVALID_STATE = 0x80480301,
  SCE_SHA1_ERROR_UNINITIALIZED_CONTEXT = 0x80480302,
  SCE_SHA224_ERROR_INVALID_POINTER = 0x80480400,
  SCE_SHA224_ERROR_INVALID_STATE = 0x80480401,
  SCE_SHA224_ERROR_UNINITIALIZED_CONTEXT = 0x80480402,
  SCE_SHA256_ERROR_INVALID_POINTER = 0x80480500,
  SCE_SHA256_ERROR_INVALID_STATE = 0x80480501,
  SCE_SHA256_ERROR_UNINITIALIZED_CONTEXT = 0x80480502,
  SCE_SHA384_ERROR_INVALID_POINTER = 0x80480600,
  SCE_SHA384_ERROR_INVALID_STATE = 0x80480601,
  SCE_SHA384_ERROR_UNINITIALIZED_CONTEXT = 0x80480602,
  SCE_SHA512_ERROR_INVALID_POINTER = 0x80480700,
  SCE_SHA512_ERROR_INVALID_STATE = 0x80480701,
  SCE_SHA512_ERROR_UNINITIALIZED_CONTEXT = 0x80480702,
  SCE_SHA512T_ERROR_INVALID_POINTER = 0x80480800,
  SCE_SHA512T_ERROR_INVALID_STATE = 0x80480801,
  SCE_SHA512T_ERROR_INVALID_DIGEST_SIZE = 0x80480802,
  SCE_SHA512T_ERROR_UNINITIALIZED_CONTEXT = 0x80480803,
  SCE_HMAC_ERROR_INVALID_POINTER = 0x80481000,
  SCE_HMAC_ERROR_INVALID_DIGEST_SIZE = 0x80481002,
  SCE_MT19937_ERROR_INVALID_POINTER = 0x80490100,
  SCE_SFMT607_ERROR_INVALID_POINTER = 0x80490200,
  SCE_SFMT607_ERROR_INVALID_STATE = 0x80490201,
  SCE_SFMT607_ERROR_INVALID_SIZE = 0x80490202,
  SCE_SFMT1279_ERROR_INVALID_POINTER = 0x80490300,
  SCE_SFMT1279_ERROR_INVALID_STATE = 0x80490301,
  SCE_SFMT1279_ERROR_INVALID_SIZE = 0x80490302,
  SCE_SFMT2281_ERROR_INVALID_POINTER = 0x80490400,
  SCE_SFMT2281_ERROR_INVALID_STATE = 0x80490401,
  SCE_SFMT2281_ERROR_INVALID_SIZE = 0x80490402,
  SCE_SFMT4253_ERROR_INVALID_POINTER = 0x80490500,
  SCE_SFMT4253_ERROR_INVALID_STATE = 0x80490501,
  SCE_SFMT4253_ERROR_INVALID_SIZE = 0x80490502,
  SCE_SFMT11213_ERROR_INVALID_POINTER = 0x80490600,
  SCE_SFMT11213_ERROR_INVALID_STATE = 0x80490601,
  SCE_SFMT11213_ERROR_INVALID_SIZE = 0x80490602,
  SCE_SFMT19937_ERROR_INVALID_POINTER = 0x80490700,
  SCE_SFMT19937_ERROR_INVALID_STATE = 0x80490701,
  SCE_SFMT19937_ERROR_INVALID_SIZE = 0x80490702,
  SCE_SFMT44497_ERROR_INVALID_POINTER = 0x80490800,
  SCE_SFMT44497_ERROR_INVALID_STATE = 0x80490801,
  SCE_SFMT44497_ERROR_INVALID_SIZE = 0x80490802,
  SCE_SFMT86243_ERROR_INVALID_POINTER = 0x80490900,
  SCE_SFMT86243_ERROR_INVALID_STATE = 0x80490901,
  SCE_SFMT86243_ERROR_INVALID_SIZE = 0x80490902,
  SCE_SFMT132049_ERROR_INVALID_POINTER = 0x80490A00,
  SCE_SFMT132049_ERROR_INVALID_STATE = 0x80490A01,
  SCE_SFMT132049_ERROR_INVALID_SIZE = 0x80490A02,
  SCE_SFMT216091_ERROR_INVALID_POINTER = 0x80490B00,
  SCE_SFMT216091_ERROR_INVALID_STATE = 0x80490B01,
  SCE_SFMT216091_ERROR_INVALID_SIZE = 0x80490B02,
  SCE_NGS2_ERROR_FAIL = 0x804A0001,
  SCE_NGS2_ERROR_INVALID_MAX_GRAIN_SAMPLES = 0x804A0050,
  SCE_NGS2_ERROR_INVALID_NUM_GRAIN_SAMPLES = 0x804A0051,
  SCE_NGS2_ERROR_INVALID_NUM_CHANNELS = 0x804A0052,
  SCE_NGS2_ERROR_INVALID_OUT_ADDRESS = 0x804A0053,
  SCE_NGS2_ERROR_INVALID_OUT_SIZE = 0x804A0054,
  SCE_NGS2_ERROR_INVALID_OPTION_ADDRESS = 0x804A0080,
  SCE_NGS2_ERROR_INVALID_OPTION_SIZE = 0x804A0081,
  SCE_NGS2_ERROR_INVALID_OPTION_FLAG = 0x804A0082,
  SCE_NGS2_ERROR_INVALID_MAX_MATRICES = 0x804A0100,
  SCE_NGS2_ERROR_INVALID_MAX_PORTS = 0x804A0101,
  SCE_NGS2_ERROR_INVALID_MAX_INPUT_DELAY_BLOCKS = 0x804A0102,
  SCE_NGS2_ERROR_INVALID_MAX_VOICES = 0x804A0103,
  SCE_NGS2_ERROR_INVALID_MAX_CHANNELS = 0x804A0104,
  SCE_NGS2_ERROR_INVALID_MAX_CHANNEL_WORKS = 0x804A0105,
  SCE_NGS2_ERROR_INVALID_MAX_WAVEFORM_BLOCKS = 0x804A0106,
  SCE_NGS2_ERROR_INVALID_MAX_ENVELOPE_POINTS = 0x804A0107,
  SCE_NGS2_ERROR_INVALID_MAX_FILTERS = 0x804A0108,
  SCE_NGS2_ERROR_INVALID_MAX_CODEC_CACHES = 0x804A0109,
  SCE_NGS2_ERROR_INVALID_MAX_ATRAC9_DECODERS = 0x804A010A,
  SCE_NGS2_ERROR_INVALID_MAX_ATRAC9_CHANNEL_WORKS = 0x804A010B,
  SCE_NGS2_ERROR_INVALID_MAX_INPUTS = 0x804A010C,
  SCE_NGS2_ERROR_INVALID_NUM_MATRIX_LEVELS = 0x804A0150,
  SCE_NGS2_ERROR_INVALID_NUM_WAVEFORM_BLOCKS = 0x804A0151,
  SCE_NGS2_ERROR_INVALID_NUM_ENVELOPE_POINTS = 0x804A0152,
  SCE_NGS2_ERROR_INVALID_MATRIX_LEVEL_ADDRESS = 0x804A0153,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_BLOCK_ADDRESS = 0x804A0154,
  SCE_NGS2_ERROR_INVALID_ENVELOPE_POINT_ADDRESS = 0x804A0155,
  SCE_NGS2_ERROR_INVALID_NUM_PEAKMETER_BLOCKS = 0x804A0156,
  SCE_NGS2_ERROR_INVALID_HANDLE = 0x804A0200,
  SCE_NGS2_ERROR_INVALID_SAMPLE_RATE = 0x804A0201,
  SCE_NGS2_ERROR_INVALID_REPORT_TYPE = 0x804A0202,
  SCE_NGS2_ERROR_INVALID_REPORT_HANDLER = 0x804A0203,
  SCE_NGS2_ERROR_INVALID_REPORT_HANDLE = 0x804A0204,
  SCE_NGS2_ERROR_EMPTY_REPORT_HANDLE = 0x804A0205,
  SCE_NGS2_ERROR_INVALID_BUFFER_INFO = 0x804A0206,
  SCE_NGS2_ERROR_INVALID_BUFFER_ADDRESS = 0x804A0207,
  SCE_NGS2_ERROR_INVALID_BUFFER_ALIGN = 0x804A0208,
  SCE_NGS2_ERROR_INVALID_BUFFER_SIZE = 0x804A0209,
  SCE_NGS2_ERROR_INVALID_BUFFER_ALLOCATOR = 0x804A020A,
  SCE_NGS2_ERROR_BUFFER_BROKEN = 0x804A020B,
  SCE_NGS2_ERROR_EMPTY_BUFFER = 0x804A020C,
  SCE_NGS2_ERROR_INVALID_SYSTEM_HANDLE = 0x804A0230,
  SCE_NGS2_ERROR_INVALID_RACK_ID = 0x804A0260,
  SCE_NGS2_ERROR_INVALID_RACK_HANDLE = 0x804A0261,
  SCE_NGS2_ERROR_INVALID_VOICE_HANDLE = 0x804A0300,
  SCE_NGS2_ERROR_UNINIT_VOICE = 0x804A0301,
  SCE_NGS2_ERROR_INVALID_VOICE_INDEX = 0x804A0302,
  SCE_NGS2_ERROR_INVALID_EVENT_TYPE = 0x804A0303,
  SCE_NGS2_ERROR_INVALID_PORT_INDEX = 0x804A0304,
  SCE_NGS2_ERROR_INVALID_PATCH = 0x804A0305,
  SCE_NGS2_ERROR_EMPTY_CHANNEL_WORK = 0x804A0306,
  SCE_NGS2_ERROR_EMPTY_CODEC_DECODER = 0x804A0307,
  SCE_NGS2_ERROR_INVALID_VOICE_CONTROL_ID = 0x804A0308,
  SCE_NGS2_ERROR_INVALID_VOICE_CONTROL_ADDRESS = 0x804A0309,
  SCE_NGS2_ERROR_INVALID_VOICE_CONTROL_SIZE = 0x804A030A,
  SCE_NGS2_ERROR_DETECTED_CIRCULAR_VOICE_CONTROL = 0x804A030B,
  SCE_NGS2_ERROR_UNABLE_CALLBACK = 0x804A030C,
  SCE_NGS2_ERROR_INVALID_CALLBACK_FLAG = 0x804A030D,
  SCE_NGS2_ERROR_INVALID_CALLBACK_HANDLER = 0x804A030E,
  SCE_NGS2_ERROR_INVALID_OPERATION = 0x804A030F,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_FORMAT = 0x804A0400,
  SCE_NGS2_ERROR_UNKNOWN_WAVEFORM_FORMAT = 0x804A0401,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_TYPE = 0x804A0402,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_CONFIG = 0x804A0403,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_SAMPLE_RATE = 0x804A0404,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_FRAME = 0x804A0405,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_ADDRESS = 0x804A0406,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_SIZE = 0x804A0407,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_DATA = 0x804A0408,
  SCE_NGS2_ERROR_INVALID_WAVEFORM_BLOCK_NUM_REPEATS = 0x804A0409,
  SCE_NGS2_ERROR_INVALID_ENVELOPE_CURVE = 0x804A0500,
  SCE_NGS2_ERROR_INVALID_PEAKMETER_FLAG = 0x804A0510,
  SCE_NGS2_ERROR_INVALID_MAX_CHORUS_PHASES = 0x804A0520,
  SCE_NGS2_ERROR_INVALID_NUM_CHORUS_PHASES = 0x804A0521,
  SCE_NGS2_ERROR_INVALID_MAX_DELAY_LENGTH = 0x804A0530,
  SCE_NGS2_ERROR_INVALID_MAX_DELAY_TAPS = 0x804A0531,
  SCE_NGS2_ERROR_INVALID_DELAY_TYPE = 0x804A0532,
  SCE_NGS2_ERROR_INVALID_NUM_DELAY_TAPS = 0x804A0533,
  SCE_NGS2_ERROR_INVALID_DELAY_TAP_INFO = 0x804A0534,
  SCE_NGS2_ERROR_INVALID_PITCH_SHIFT_QUALITY = 0x804A0540,
  SCE_NGS2_ERROR_INVALID_FILTER_INDEX = 0x804A0600,
  SCE_NGS2_ERROR_INVALID_FILTER_TYPE = 0x804A0601,
  SCE_NGS2_ERROR_INVALID_FILTER_LOCATION = 0x804A0602,
  SCE_NGS2_ERROR_INVALID_LFE_FC = 0x804A0603,
  SCE_NGS2_ERROR_INVALID_USER_FX_PARAM_SIZE = 0x804A0650,
  SCE_NGS2_ERROR_INVALID_MATRIX_INDEX = 0x804A0700,
  SCE_NGS2_ERROR_CODEC_UNKNOWN_WAVEFORM = 0x804A0800,
  SCE_NGS2_ERROR_CODEC_EMPTY_INSTANCE = 0x804A0801,
  SCE_NGS2_ERROR_CODEC_EMPTY_CHANNEL = 0x804A0802,
  SCE_NGS2_ERROR_CODEC_SETUP_FAIL = 0x804A0803,
  SCE_NGS2_ERROR_CODEC_RESET_FAIL = 0x804A0804,
  SCE_NGS2_ERROR_CODEC_DECODE_FAIL = 0x804A0805,
  SCE_NGS2_ERROR_INVALID_REVERB_SIZE = 0x804A0900,
  SCE_NGS2_ERROR_INVALID_PAN_UNIT_ANGLE = 0x804A0910,
  SCE_NGS2_ERROR_INVALID_PAN_SPEAKER = 0x804A0911,
  SCE_NGS2_ERROR_INVALID_PAN_MATRIX_FORMAT = 0x804A0912,
  SCE_NGS2_ERROR_INVALID_PAN_WORK = 0x804A0913,
  SCE_NGS2_ERROR_INVALID_PAN_PARAM = 0x804A0914,
  SCE_NGS2_ERROR_INVALID_GEOM_DISTANCE = 0x804A0920,
  SCE_NGS2_ERROR_INVALID_GEOM_LISTENER_ADDRESS = 0x804A0921,
  SCE_NGS2_ERROR_INVALID_GEOM_SOURCE_ADDRESS = 0x804A0922,
  SCE_NGS2_ERROR_INVALID_GEOM_FLAG = 0x804A0923,
  SCE_NGS2_ERROR_INVALID_GEOM_CONE = 0x804A0924,
  SCE_NGS2_ERROR_INVALID_MODULE_ID = 0x804A0A00,
  SCE_NGS2_ERROR_INVALID_NUM_MODULES = 0x804A0A01,
  SCE_NGS2_ERROR_INVALID_NUM_MODULE_BUFFERS = 0x804A0A02,
  SCE_NGS2_ERROR_INVALID_MODULE_BUFFER_ID = 0x804A0A03,
  SCE_NGS2_ERROR_INVALID_MODULE_STATE_OFFSET = 0x804A0A04,
  SCE_NGS2_ERROR_INVALID_MODULE_STATE_SIZE = 0x804A0A05,
  SCE_NGS2_ERROR_INVALID_VOICE_STATE_SIZE = 0x804A0A06,
  SCE_NGS2_ERROR_INVALID_MODULE_INDEX = 0x804A0B00,
  SCE_NGS2_ERROR_INVALID_MODULE_INFO_SIZE = 0x804A0B01,
  SCE_GC_ERROR_UNKNOWN = 0x804C0001,
  SCE_GC_ERROR_OUT_OF_MEMORY = 0x804C0002,
  SCE_GC_ERROR_OUT_OF_VMID = 0x804C0003,
  SCE_GC_ERROR_INVALID_VMID = 0x804C0004,
  SCE_GC_ERROR_NO_GPU_VA_SPACE = 0x804C0005,
  SCE_GC_ERROR_NO_VM_MAP = 0x804C0006,
  SCE_GC_ERROR_OUT_OF_VIDEO_MEMORY = 0x804C0007,
  SCE_GC_ERROR_MAP_VIDEO_MEMORY_ERROR = 0x804C0008,
  SCE_GC_ERROR_OUT_OF_VMID0_VA_SPACE = 0x804C0009,
  SCE_GC_ERROR_RESERVED_COMPUTE_QUEUE = 0x804C000A,
  SCE_GC_ERROR_INVALID_COMPUTE_QUEUE = 0x804C000B,
  SCE_GC_ERROR_INVALID_MAP_RING_SIZE = 0x804C000C,
  SCE_GC_ERROR_INVALID_MAP_VQUEUEID = 0x804C000D,
  SCE_GC_ERROR_INVALID_GPU_ADDR = 0x804C000E,
  SCE_GC_ERROR_INVALID_SUBMIT_COUNTS = 0x804C000F,
  SCE_GC_ERROR_INVALID_SUBMIT_OPCODE = 0x804C0010,
  SCE_GC_ERROR_INVALID_SUBMIT_SIZE = 0x804C0011,
  SCE_GC_ERROR_HARDWARE_IS_BUSY = 0x804C0012,
  SCE_GC_ERROR_UNKNOWN_PROCESS = 0x804C0013,
  SCE_SULPHA_ERROR_ALREADY_INITIALIZED = 0x804D0001,
  SCE_SULPHA_ERROR_UNINITIALIZED = 0x804D0002,
  SCE_SULPHA_ERROR_INVALID_ARG = 0x804D0003,
  SCE_SULPHA_ERROR_INVALID_ALIGNMENT = 0x804D0004,
  SCE_SULPHA_ERROR_OUT_OF_MEMORY = 0x804D0005,
  SCE_SULPHA_ERROR_UNSUPPORTED = 0x804D0006,
  SCE_SULPHA_ERROR_CONNECTION = 0x804D0007,
  SCE_SULPHA_ERROR_NETWORK_OWNERSHIP = 0x804D0008,
  SCE_SULPHA_ERROR_INVALID_AGENT = 0x804D0009,
  SCE_SULPHA_ERROR_NOT_CONNECTED = 0x804D000A,
  SCE_SULPHA_ERROR_CAPTURE_STARTED = 0x804D000B,
  SCE_SULPHA_ERROR_OUT_OF_BOOKMARKS = 0x804D000C,
  SCE_SULPHA_ERROR_CONNECTION_TIMEOUT = 0x804D000D,
  SCE_VOICE_ERROR_LIBVOICE_NOT_INIT = 0x804E0801,
  SCE_VOICE_ERROR_LIBVOICE_INITIALIZED = 0x804E0802,
  SCE_VOICE_ERROR_GENERAL = 0x804E0803,
  SCE_VOICE_ERROR_PORT_INVALID = 0x804E0804,
  SCE_VOICE_ERROR_ARGUMENT_INVALID = 0x804E0805,
  SCE_VOICE_ERROR_CONTAINER_INVALID = 0x804E0806,
  SCE_VOICE_ERROR_TOPOLOGY = 0x804E0807,
  SCE_VOICE_ERROR_RESOURCE_INSUFFICIENT = 0x804E0808,
  SCE_VOICE_ERROR_SERVICE_DETACHED = 0x804E080A,
  SCE_VOICE_ERROR_SERVICE_ATTACHED = 0x804E080B,
  SCE_VOICE_ERROR_LIBVOICEQOS_NOT_INIT = 0x804E0901,
  SCE_VOICE_ERROR_LIBVOICEQOS_ARGUMENT_INVALID = 0x804E0902,
  SCE_VOICE_ERROR_LIBVOICEQOS_PACKET_INVALID = 0x804E0903,
  SCE_VOICE_ERROR_LIBVOICEQOS_INTERNAL_UNRECOVERABLE = 0x804E0904,
  SCE_VOICE_ERROR_LIBVOICEQOS_INITIALIZED = 0x804E0905,
  SCE_VOICE_ERROR_LIBVOICEQOS_SYSTEM = 0x804E0906,
  SCE_VOICE_ERROR_LIBVOICEQOS_RESOURCE_USED = 0x804E0907,
  SCE_NP_ERROR_ALREADY_INITIALIZED = 0x80550001,
  SCE_NP_ERROR_NOT_INITIALIZED = 0x80550002,
  SCE_NP_ERROR_INVALID_ARGUMENT = 0x80550003,
  SCE_NP_ERROR_UNKNOWN_PLATFORM_TYPE = 0x80550004,
  SCE_NP_ERROR_OUT_OF_MEMORY = 0x80550005,
  SCE_NP_ERROR_SIGNED_OUT = 0x80550006,
  SCE_NP_ERROR_USER_NOT_FOUND = 0x80550007,
  SCE_NP_ERROR_CALLBACK_ALREADY_REGISTERED = 0x80550008,
  SCE_NP_ERROR_CALLBACK_NOT_REGISTERED = 0x80550009,
  SCE_NP_ERROR_NOT_SIGNED_UP = 0x8055000A,
  SCE_NP_ERROR_AGE_RESTRICTION = 0x8055000B,
  SCE_NP_ERROR_LOGOUT = 0x8055000C,
  SCE_NP_ERROR_LATEST_SYSTEM_SOFTWARE_EXIST = 0x8055000D,
  SCE_NP_ERROR_LATEST_SYSTEM_SOFTWARE_EXIST_FOR_TITLE = 0x8055000E,
  SCE_NP_ERROR_LATEST_PATCH_PKG_EXIST = 0x8055000F,
  SCE_NP_ERROR_LATEST_PATCH_PKG_DOWNLOADED = 0x80550010,
  SCE_NP_ERROR_INVALID_SIZE = 0x80550011,
  SCE_NP_ERROR_ABORTED = 0x80550012,
  SCE_NP_ERROR_REQUEST_MAX = 0x80550013,
  SCE_NP_ERROR_REQUEST_NOT_FOUND = 0x80550014,
  SCE_NP_ERROR_INVALID_ID = 0x80550015,
  SCE_NP_ERROR_NP_TITLE_DAT_NOT_FOUND = 0x80550016,
  SCE_NP_ERROR_INCONSISTENT_NP_TITLE_ID = 0x80550017,
  SCE_NP_ERROR_PATCH_NOT_CHECKED = 0x80550018,
  SCE_NP_ERROR_TITLE_IS_BANNED = 0x80550019,
  SCE_NP_ERROR_TIMEOUT = 0x8055001A,
  SCE_NP_ERROR_TITLE_ID_IN_PARAM_SFO_NOT_MATCHED_TO_NP_TITLE_ID = 0x8055001B,
  SCE_NP_ERROR_TITLE_ID_IN_PARAM_SFO_NOT_EXIST = 0x8055001C,
  SCE_NP_ERROR_CALLBACK_MAX = 0x8055001D,
  SCE_NP_ERROR_INVALID_NP_TITLE_ID = 0x8055001E,
  SCE_NP_ERROR_ONLINE_ID_CHANGED = 0x8055001F,
  SCE_NP_AUTH_ERROR_INVALID_ARGUMENT = 0x80550301,
  SCE_NP_AUTH_ERROR_INVALID_SIZE = 0x80550302,
  SCE_NP_AUTH_ERROR_OUT_OF_MEMORY = 0x80550303,
  SCE_NP_AUTH_ERROR_ABORTED = 0x80550304,
  SCE_NP_AUTH_ERROR_REQUEST_MAX = 0x80550305,
  SCE_NP_AUTH_ERROR_REQUEST_NOT_FOUND = 0x80550306,
  SCE_NP_AUTH_ERROR_INVALID_ID = 0x80550307,
  SCE_NP_AUTH_ERROR_NO_TOKEN_RECEIVED = 0x80550308,
  SCE_NP_AUTH_ERROR_SERVICE_END = 0x80550400,
  SCE_NP_AUTH_ERROR_SERVICE_DOWN = 0x80550401,
  SCE_NP_AUTH_ERROR_SERVICE_BUSY = 0x80550402,
  SCE_NP_AUTH_ERROR_SERVER_MAINTENANCE = 0x80550403,
  SCE_NP_AUTH_ERROR_S_INVALID_DATA_LENGTH = 0x80550410,
  SCE_NP_AUTH_ERROR_S_INVALID_USER_AGENT = 0x80550411,
  SCE_NP_AUTH_ERROR_S_INVALID_VERSION = 0x80550412,
  SCE_NP_AUTH_ERROR_S_INVALID_SERVICE_ID = 0x80550420,
  SCE_NP_AUTH_ERROR_S_INVALID_CREDENTIAL = 0x80550421,
  SCE_NP_AUTH_ERROR_S_INVALID_ENTITLEMENT_ID = 0x80550422,
  SCE_NP_AUTH_ERROR_S_INVALID_CONSUMED_COUNT = 0x80550423,
  SCE_NP_AUTH_ERROR_INVALID_CONSOLE_ID = 0x80550424,
  SCE_NP_AUTH_ERROR_CONSOLE_ID_SUSPENDED = 0x80550427,
  SCE_NP_AUTH_ERROR_ACCOUNT_CLOSED = 0x80550430,
  SCE_NP_AUTH_ERROR_ACCOUNT_SUSPENDED = 0x80550431,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_EULA = 0x80550432,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT1 = 0x80550440,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT2 = 0x80550441,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT3 = 0x80550442,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT4 = 0x80550443,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT5 = 0x80550444,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT6 = 0x80550445,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT7 = 0x80550446,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT8 = 0x80550447,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT9 = 0x80550448,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT10 = 0x80550449,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT11 = 0x8055044A,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT12 = 0x8055044B,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT13 = 0x8055044C,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT14 = 0x8055044D,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT15 = 0x8055044E,
  SCE_NP_AUTH_ERROR_ACCOUNT_RENEW_ACCOUNT16 = 0x8055044F,
  SCE_NP_AUTH_ERROR_SUB_ACCOUNT_RENEW_EULA = 0x8055044F,
  SCE_NP_AUTH_ERROR_UNKNOWN = 0x80550480,
  SCE_NP_UTIL_ERROR_INVALID_ARGUMENT = 0x80550601,
  SCE_NP_UTIL_ERROR_INSUFFICIENT = 0x80550602,
  SCE_NP_UTIL_ERROR_PARSER_FAILED = 0x80550603,
  SCE_NP_UTIL_ERROR_INVALID_PROTOCOL_ID = 0x80550604,
  SCE_NP_UTIL_ERROR_INVALID_NP_ID = 0x80550605,
  SCE_NP_UTIL_ERROR_INVALID_NP_ENV = 0x80550606,
  SCE_NP_UTIL_ERROR_INVALID_CHARACTER = 0x80550608,
  SCE_NP_UTIL_ERROR_NOT_MATCH = 0x80550609,
  SCE_NP_UTIL_ERROR_INVALID_TITLEID = 0x8055060A,
  SCE_NP_UTIL_ERROR_UNKNOWN = 0x8055060E,
  SCE_NP_COMMUNITY_ERROR_ALREADY_INITIALIZED = 0x80550701,
  SCE_NP_COMMUNITY_ERROR_NOT_INITIALIZED = 0x80550702,
  SCE_NP_COMMUNITY_ERROR_OUT_OF_MEMORY = 0x80550703,
  SCE_NP_COMMUNITY_ERROR_INVALID_ARGUMENT = 0x80550704,
  SCE_NP_COMMUNITY_ERROR_NO_LOGIN = 0x80550705,
  SCE_NP_COMMUNITY_ERROR_TOO_MANY_OBJECTS = 0x80550706,
  SCE_NP_COMMUNITY_ERROR_ABORTED = 0x80550707,
  SCE_NP_COMMUNITY_ERROR_BAD_RESPONSE = 0x80550708,
  SCE_NP_COMMUNITY_ERROR_BODY_TOO_LARGE = 0x80550709,
  SCE_NP_COMMUNITY_ERROR_HTTP_SERVER = 0x8055070A,
  SCE_NP_COMMUNITY_ERROR_INVALID_SIGNATURE = 0x8055070B,
  SCE_NP_COMMUNITY_ERROR_INSUFFICIENT_ARGUMENT = 0x8055070C,
  SCE_NP_COMMUNITY_ERROR_UNKNOWN_TYPE = 0x8055070D,
  SCE_NP_COMMUNITY_ERROR_INVALID_ID = 0x8055070E,
  SCE_NP_COMMUNITY_ERROR_INVALID_ONLINE_ID = 0x8055070F,
  SCE_NP_COMMUNITY_ERROR_INVALID_TYPE = 0x80550711,
  SCE_NP_COMMUNITY_ERROR_TRANSACTION_ALREADY_END = 0x80550712,
  SCE_NP_COMMUNITY_ERROR_INVALID_PARTITION = 0x80550713,
  SCE_NP_COMMUNITY_ERROR_INVALID_ALIGNMENT = 0x80550714,
  SCE_NP_COMMUNITY_ERROR_CLIENT_HANDLE_ALREADY_EXISTS = 0x80550715,
  SCE_NP_COMMUNITY_ERROR_NO_RESOURCE = 0x80550716,
  SCE_NP_COMMUNITY_ERROR_REQUEST_BEFORE_END = 0x80550717,
  SCE_NP_COMMUNITY_ERROR_TOO_MANY_SLOTID = 0x80550718,
  SCE_NP_COMMUNITY_ERROR_TOO_MANY_NPID = 0x80550719,
  SCE_NP_COMMUNITY_ERROR_SCORE_INVALID_SAVEDATA_OWNER = 0x8055071A,
  SCE_NP_COMMUNITY_ERROR_TUS_INVALID_SAVEDATA_OWNER = 0x8055071B,
  SCE_NP_COMMUNITY_ERROR_GHOST_SERVER_RETURN_INVALID_STATUS_CODE = 0x8055071C,
  SCE_NP_COMMUNITY_ERROR_UBS_ONLINE_ID_IN_XML_CREATED_PAST_IS_DIFFERENT_FROM_CURRENT = 0x8055071D,
  SCE_NP_COMMUNITY_SERVER_ERROR_BAD_REQUEST = 0x80550801,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_TICKET = 0x80550802,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_SIGNATURE = 0x80550803,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_NPID = 0x80550805,
  SCE_NP_COMMUNITY_SERVER_ERROR_FORBIDDEN = 0x80550806,
  SCE_NP_COMMUNITY_SERVER_ERROR_INTERNAL_SERVER_ERROR = 0x80550807,
  SCE_NP_COMMUNITY_SERVER_ERROR_VERSION_NOT_SUPPORTED = 0x80550808,
  SCE_NP_COMMUNITY_SERVER_ERROR_SERVICE_UNAVAILABLE = 0x80550809,
  SCE_NP_COMMUNITY_SERVER_ERROR_PLAYER_BANNED = 0x8055080A,
  SCE_NP_COMMUNITY_SERVER_ERROR_CENSORED = 0x8055080B,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_RECORD_FORBIDDEN = 0x8055080C,
  SCE_NP_COMMUNITY_SERVER_ERROR_USER_PROFILE_NOT_FOUND = 0x8055080D,
  SCE_NP_COMMUNITY_SERVER_ERROR_UPLOADER_DATA_NOT_FOUND = 0x8055080E,
  SCE_NP_COMMUNITY_SERVER_ERROR_QUOTA_MASTER_NOT_FOUND = 0x8055080F,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_TITLE_NOT_FOUND = 0x80550810,
  SCE_NP_COMMUNITY_SERVER_ERROR_BLACKLISTED_USER_ID = 0x80550811,
  SCE_NP_COMMUNITY_SERVER_ERROR_GAME_RANKING_NOT_FOUND = 0x80550812,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_STORE_NOT_FOUND = 0x80550814,
  SCE_NP_COMMUNITY_SERVER_ERROR_NOT_BEST_SCORE = 0x80550815,
  SCE_NP_COMMUNITY_SERVER_ERROR_LATEST_UPDATE_NOT_FOUND = 0x80550816,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_BOARD_MASTER_NOT_FOUND = 0x80550817,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_GAME_DATA_MASTER_NOT_FOUND = 0x80550818,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_ANTICHEAT_DATA = 0x80550819,
  SCE_NP_COMMUNITY_SERVER_ERROR_TOO_LARGE_DATA = 0x8055081A,
  SCE_NP_COMMUNITY_SERVER_ERROR_NO_SUCH_USER_NPID = 0x8055081B,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_ENVIRONMENT = 0x8055081D,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_ONLINE_NAME_CHARACTER = 0x8055081F,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_ONLINE_NAME_LENGTH = 0x80550820,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_ABOUT_ME_CHARACTER = 0x80550821,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_ABOUT_ME_LENGTH = 0x80550822,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_SCORE = 0x80550823,
  SCE_NP_COMMUNITY_SERVER_ERROR_OVER_THE_RANKING_LIMIT = 0x80550824,
  SCE_NP_COMMUNITY_SERVER_ERROR_FAIL_TO_CREATE_SIGNATURE = 0x80550826,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_MASTER_INFO_NOT_FOUND = 0x80550827,
  SCE_NP_COMMUNITY_SERVER_ERROR_OVER_THE_GAME_DATA_LIMIT = 0x80550828,
  SCE_NP_COMMUNITY_SERVER_ERROR_SELF_DATA_NOT_FOUND = 0x8055082A,
  SCE_NP_COMMUNITY_SERVER_ERROR_USER_NOT_ASSIGNED = 0x8055082B,
  SCE_NP_COMMUNITY_SERVER_ERROR_GAME_DATA_ALREADY_EXISTS = 0x8055082C,
  SCE_NP_COMMUNITY_SERVER_ERROR_TOO_MANY_RESULTS = 0x8055082D,
  SCE_NP_COMMUNITY_SERVER_ERROR_NOT_RECORDABLE_VERSION = 0x8055082E,
  SCE_NP_COMMUNITY_SERVER_ERROR_USER_STORAGE_TITLE_MASTER_NOT_FOUND = 0x80550848,
  SCE_NP_COMMUNITY_SERVER_ERROR_INVALID_VIRTUAL_USER = 0x80550849,
  SCE_NP_COMMUNITY_SERVER_ERROR_USER_STORAGE_DATA_NOT_FOUND = 0x8055084A,
  SCE_NP_COMMUNITY_SERVER_ERROR_NON_PLUS_MEMBER = 0x8055085D,
  SCE_NP_COMMUNITY_SERVER_ERROR_UNMATCH_SEQUENCE = 0x8055085E,
  SCE_NP_COMMUNITY_SERVER_ERROR_SAVEDATA_NOT_FOUND = 0x8055085F,
  SCE_NP_COMMUNITY_SERVER_ERROR_TOO_MANY_SAVEDATA_FILES = 0x80550860,
  SCE_NP_COMMUNITY_SERVER_ERROR_TOO_MUCH_TOTAL_SAVEDATA_SIZE = 0x80550861,
  SCE_NP_COMMUNITY_SERVER_ERROR_NOT_YET_DOWNLOADABLE = 0x80550862,
  SCE_NP_COMMUNITY_SERVER_ERROR_BLACKLISTED_TITLE = 0x80550868,
  SCE_NP_COMMUNITY_SERVER_ERROR_TOO_LARGE_ICONDATA = 0x80550869,
  SCE_NP_COMMUNITY_SERVER_ERROR_TOO_LARGE_SAVEDATA = 0x8055086A,
  SCE_NP_COMMUNITY_SERVER_ERROR_UNMATCH_SIGNATURE = 0x8055086B,
  SCE_NP_COMMUNITY_SERVER_ERROR_UNMATCH_MD5SUM = 0x8055086C,
  SCE_NP_COMMUNITY_SERVER_ERROR_TOO_MUCH_SAVEDATA_SIZE = 0x8055086D,
  SCE_NP_COMMUNITY_SERVER_ERROR_RECORD_DATE_IS_NEWER_THAN_COMP_DATE = 0x8055086E,
  SCE_NP_COMMUNITY_SERVER_ERROR_CONDITIONS_NOT_SATISFIED = 0x80550873,
  SCE_NP_COMMUNITY_SERVER_ERROR_UNSUPPORTED_PLATFORM = 0x80550878,
  SCE_NP_COMMUNITY_SERVER_ERROR_EXPIRED_SIGNATURE = 0x80550889,
  SCE_NP_COMMUNITY_SERVER_ERROR_SAVEDATA_UPDATED = 0x8055088A,
  SCE_NP_COMMUNITY_SERVER_ERROR_MATCHING_BEFORE_SERVICE = 0x805508A0,
  SCE_NP_COMMUNITY_SERVER_ERROR_MATCHING_END_OF_SERVICE = 0x805508A1,
  SCE_NP_COMMUNITY_SERVER_ERROR_MATCHING_MAINTENANCE = 0x805508A2,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_BEFORE_SERVICE = 0x805508A3,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_END_OF_SERVICE = 0x805508A4,
  SCE_NP_COMMUNITY_SERVER_ERROR_RANKING_MAINTENANCE = 0x805508A5,
  SCE_NP_COMMUNITY_SERVER_ERROR_NO_SUCH_TITLE = 0x805508A6,
  SCE_NP_COMMUNITY_SERVER_ERROR_TITLE_USER_STORAGE_BEFORE_SERVICE = 0x805508AA,
  SCE_NP_COMMUNITY_SERVER_ERROR_TITLE_USER_STORAGE_END_OF_SERVICE = 0x805508AB,
  SCE_NP_COMMUNITY_SERVER_ERROR_TITLE_USER_STORAGE_MAINTENANCE = 0x805508AC,
  SCE_NP_COMMUNITY_SERVER_ERROR_FSR_BEFORE_SERVICE = 0x805508AD,
  SCE_NP_COMMUNITY_SERVER_ERROR_FSR_END_OF_SERVICE = 0x805508AE,
  SCE_NP_COMMUNITY_SERVER_ERROR_FSR_MAINTENANCE = 0x805508AF,
  SCE_NP_COMMUNITY_SERVER_ERROR_UBS_BEFORE_SERVICE = 0x805508B0,
  SCE_NP_COMMUNITY_SERVER_ERROR_UBS_END_OF_SERVICE = 0x805508B1,
  SCE_NP_COMMUNITY_SERVER_ERROR_UBS_MAINTENANCE = 0x805508B2,
  SCE_NP_COMMUNITY_SERVER_ERROR_BASIC_BLACKLISTED_USER_ID = 0x805508B3,
  SCE_NP_COMMUNITY_SERVER_ERROR_UNSPECIFIED = 0x805508FF,
  SCE_NP_MATCHING2_ERROR_OUT_OF_MEMORY = 0x80550C01,
  SCE_NP_MATCHING2_ERROR_ALREADY_INITIALIZED = 0x80550C02,
  SCE_NP_MATCHING2_ERROR_NOT_INITIALIZED = 0x80550C03,
  SCE_NP_MATCHING2_ERROR_CONTEXT_MAX = 0x80550C04,
  SCE_NP_MATCHING2_ERROR_CONTEXT_ALREADY_EXISTS = 0x80550C05,
  SCE_NP_MATCHING2_ERROR_CONTEXT_NOT_FOUND = 0x80550C06,
  SCE_NP_MATCHING2_ERROR_CONTEXT_ALREADY_STARTED = 0x80550C07,
  SCE_NP_MATCHING2_ERROR_CONTEXT_NOT_STARTED = 0x80550C08,
  SCE_NP_MATCHING2_ERROR_SERVER_NOT_FOUND = 0x80550C09,
  SCE_NP_MATCHING2_ERROR_INVALID_ARGUMENT = 0x80550C0A,
  SCE_NP_MATCHING2_ERROR_INVALID_CONTEXT_ID = 0x80550C0B,
  SCE_NP_MATCHING2_ERROR_INVALID_SERVER_ID = 0x80550C0C,
  SCE_NP_MATCHING2_ERROR_INVALID_WORLD_ID = 0x80550C0D,
  SCE_NP_MATCHING2_ERROR_INVALID_LOBBY_ID = 0x80550C0E,
  SCE_NP_MATCHING2_ERROR_INVALID_ROOM_ID = 0x80550C0F,
  SCE_NP_MATCHING2_ERROR_INVALID_MEMBER_ID = 0x80550C10,
  SCE_NP_MATCHING2_ERROR_INVALID_ATTRIBUTE_ID = 0x80550C11,
  SCE_NP_MATCHING2_ERROR_INVALID_CASTTYPE = 0x80550C12,
  SCE_NP_MATCHING2_ERROR_INVALID_SORT_METHOD = 0x80550C13,
  SCE_NP_MATCHING2_ERROR_INVALID_MAX_SLOT = 0x80550C14,
  SCE_NP_MATCHING2_ERROR_INVALID_MATCHING_SPACE = 0x80550C16,
  SCE_NP_MATCHING2_ERROR_INVALID_BLOCK_KICK_FLAG = 0x80550C17,
  SCE_NP_MATCHING2_ERROR_INVALID_MESSAGE_TARGET = 0x80550C18,
  SCE_NP_MATCHING2_ERROR_RANGE_FILTER_MAX = 0x80550C19,
  SCE_NP_MATCHING2_ERROR_INSUFFICIENT_BUFFER = 0x80550C1A,
  SCE_NP_MATCHING2_ERROR_DESTINATION_DISAPPEARED = 0x80550C1B,
  SCE_NP_MATCHING2_ERROR_REQUEST_TIMEOUT = 0x80550C1C,
  SCE_NP_MATCHING2_ERROR_INVALID_ALIGNMENT = 0x80550C1D,
  SCE_NP_MATCHING2_ERROR_CONNECTION_CLOSED_BY_SERVER = 0x80550C1E,
  SCE_NP_MATCHING2_ERROR_SSL_VERIFY_FAILED = 0x80550C1F,
  SCE_NP_MATCHING2_ERROR_SSL_HANDSHAKE = 0x80550C20,
  SCE_NP_MATCHING2_ERROR_SSL_SEND = 0x80550C21,
  SCE_NP_MATCHING2_ERROR_SSL_RECV = 0x80550C22,
  SCE_NP_MATCHING2_ERROR_JOINED_SESSION_MAX = 0x80550C23,
  SCE_NP_MATCHING2_ERROR_ALREADY_JOINED = 0x80550C24,
  SCE_NP_MATCHING2_ERROR_INVALID_SESSION_TYPE = 0x80550C25,
  SCE_NP_MATCHING2_ERROR_NP_SIGNED_OUT = 0x80550C26,
  SCE_NP_MATCHING2_ERROR_BUSY = 0x80550C27,
  SCE_NP_MATCHING2_ERROR_SERVER_NOT_AVAILABLE = 0x80550C28,
  SCE_NP_MATCHING2_ERROR_NOT_ALLOWED = 0x80550C29,
  SCE_NP_MATCHING2_ERROR_ABORTED = 0x80550C2A,
  SCE_NP_MATCHING2_ERROR_REQUEST_NOT_FOUND = 0x80550C2B,
  SCE_NP_MATCHING2_ERROR_SESSION_DESTROYED = 0x80550C2C,
  SCE_NP_MATCHING2_ERROR_CONTEXT_STOPPED = 0x80550C2D,
  SCE_NP_MATCHING2_ERROR_INVALID_REQUEST_PARAMETER = 0x80550C2E,
  SCE_NP_MATCHING2_ERROR_NOT_NP_SIGN_IN = 0x80550C2F,
  SCE_NP_MATCHING2_ERROR_ROOM_NOT_FOUND = 0x80550C30,
  SCE_NP_MATCHING2_ERROR_ROOM_MEMBER_NOT_FOUND = 0x80550C31,
  SCE_NP_MATCHING2_ERROR_LOBBY_NOT_FOUND = 0x80550C32,
  SCE_NP_MATCHING2_ERROR_LOBBY_MEMBER_NOT_FOUND = 0x80550C33,
  SCE_NP_MATCHING2_ERROR_KEEPALIVE_TIMEOUT = 0x80550C34,
  SCE_NP_MATCHING2_ERROR_TIMEOUT_TOO_SHORT = 0x80550C35,
  SCE_NP_MATCHING2_ERROR_TIMEDOUT = 0x80550C36,
  SCE_NP_MATCHING2_ERROR_INVALID_SLOTGROUP = 0x80550C37,
  SCE_NP_MATCHING2_ERROR_INVALID_ATTRIBUTE_SIZE = 0x80550C38,
  SCE_NP_MATCHING2_ERROR_CANNOT_ABORT = 0x80550C39,
  SCE_NP_MATCHING2_ERROR_SESSION_NOT_FOUND = 0x80550C3A,
  SCE_NP_MATCHING2_ERROR_INVALID_CONTEXT = 0x80550C3B,
  SCE_NP_MATCHING2_SERVER_ERROR_BAD_REQUEST = 0x80550D01,
  SCE_NP_MATCHING2_SERVER_ERROR_SERVICE_UNAVAILABLE = 0x80550D02,
  SCE_NP_MATCHING2_SERVER_ERROR_BUSY = 0x80550D03,
  SCE_NP_MATCHING2_SERVER_ERROR_END_OF_SERVICE = 0x80550D04,
  SCE_NP_MATCHING2_SERVER_ERROR_INTERNAL_SERVER_ERROR = 0x80550D05,
  SCE_NP_MATCHING2_SERVER_ERROR_PLAYER_BANNED = 0x80550D06,
  SCE_NP_MATCHING2_SERVER_ERROR_FORBIDDEN = 0x80550D07,
  SCE_NP_MATCHING2_SERVER_ERROR_BLOCKED = 0x80550D08,
  SCE_NP_MATCHING2_SERVER_ERROR_UNSUPPORTED_NP_ENV = 0x80550D09,
  SCE_NP_MATCHING2_SERVER_ERROR_INVALID_TICKET = 0x80550D0A,
  SCE_NP_MATCHING2_SERVER_ERROR_INVALID_SIGNATURE = 0x80550D0B,
  SCE_NP_MATCHING2_SERVER_ERROR_EXPIRED_TICKET = 0x80550D0C,
  SCE_NP_MATCHING2_SERVER_ERROR_ENTITLEMENT_REQUIRED = 0x80550D0D,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_CONTEXT = 0x80550D0E,
  SCE_NP_MATCHING2_SERVER_ERROR_CLOSED = 0x80550D0F,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_TITLE = 0x80550D10,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_WORLD = 0x80550D11,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_LOBBY = 0x80550D12,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_ROOM = 0x80550D13,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_LOBBY_INSTANCE = 0x80550D14,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_ROOM_INSTANCE = 0x80550D15,
  SCE_NP_MATCHING2_SERVER_ERROR_PASSWORD_MISMATCH = 0x80550D17,
  SCE_NP_MATCHING2_SERVER_ERROR_LOBBY_FULL = 0x80550D18,
  SCE_NP_MATCHING2_SERVER_ERROR_ROOM_FULL = 0x80550D19,
  SCE_NP_MATCHING2_SERVER_ERROR_GROUP_FULL = 0x80550D1B,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_USER = 0x80550D1C,
  SCE_NP_MATCHING2_SERVER_ERROR_GROUP_PASSWORD_MISMATCH = 0x80550D1D,
  SCE_NP_MATCHING2_SERVER_ERROR_TITLE_PASSPHRASE_MISMATCH = 0x80550D1E,
  SCE_NP_MATCHING2_SERVER_ERROR_LOBBY_ALREADY_EXIST = 0x80550D25,
  SCE_NP_MATCHING2_SERVER_ERROR_ROOM_ALREADY_EXIST = 0x80550D26,
  SCE_NP_MATCHING2_SERVER_ERROR_CONSOLE_BANNED = 0x80550D28,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_ROOMGROUP = 0x80550D29,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_SUCH_GROUP = 0x80550D2A,
  SCE_NP_MATCHING2_SERVER_ERROR_NO_PASSWORD = 0x80550D2B,
  SCE_NP_MATCHING2_SERVER_ERROR_INVALID_GROUP_SLOT_NUM = 0x80550D2C,
  SCE_NP_MATCHING2_SERVER_ERROR_INVALID_PASSWORD_SLOT_MASK = 0x80550D2D,
  SCE_NP_MATCHING2_SERVER_ERROR_DUPLICATE_GROUP_LABEL = 0x80550D2E,
  SCE_NP_MATCHING2_SERVER_ERROR_REQUEST_OVERFLOW = 0x80550D2F,
  SCE_NP_MATCHING2_SERVER_ERROR_ALREADY_JOINED = 0x80550D30,
  SCE_NP_MATCHING2_SERVER_ERROR_NAT_TYPE_MISMATCH = 0x80550D31,
  SCE_NP_MATCHING2_SERVER_ERROR_ROOM_INCONSISTENCY = 0x80550D32,
  SCE_NP_MATCHING2_SERVER_ERROR_BLOCKED_USER_IN_ROOM = 0x80550D33,
  SCE_NP_MATCHING2_SIGNALING_ERROR_NOT_INITIALIZED = 0x80550E01,
  SCE_NP_MATCHING2_SIGNALING_ERROR_ALREADY_INITIALIZED = 0x80550E02,
  SCE_NP_MATCHING2_SIGNALING_ERROR_OUT_OF_MEMORY = 0x80550E03,
  SCE_NP_MATCHING2_SIGNALING_ERROR_CTXID_NOT_AVAILABLE = 0x80550E04,
  SCE_NP_MATCHING2_SIGNALING_ERROR_CTX_NOT_FOUND = 0x80550E05,
  SCE_NP_MATCHING2_SIGNALING_ERROR_REQID_NOT_AVAILABLE = 0x80550E06,
  SCE_NP_MATCHING2_SIGNALING_ERROR_REQ_NOT_FOUND = 0x80550E07,
  SCE_NP_MATCHING2_SIGNALING_ERROR_PARSER_CREATE_FAILED = 0x80550E08,
  SCE_NP_MATCHING2_SIGNALING_ERROR_PARSER_FAILED = 0x80550E09,
  SCE_NP_MATCHING2_SIGNALING_ERROR_INVALID_NAMESPACE = 0x80550E0A,
  SCE_NP_MATCHING2_SIGNALING_ERROR_NETINFO_NOT_AVAILABLE = 0x80550E0B,
  SCE_NP_MATCHING2_SIGNALING_ERROR_PEER_NOT_RESPONDING = 0x80550E0C,
  SCE_NP_MATCHING2_SIGNALING_ERROR_CONNID_NOT_AVAILABLE = 0x80550E0D,
  SCE_NP_MATCHING2_SIGNALING_ERROR_CONN_NOT_FOUND = 0x80550E0E,
  SCE_NP_MATCHING2_SIGNALING_ERROR_PEER_UNREACHABLE = 0x80550E0F,
  SCE_NP_MATCHING2_SIGNALING_ERROR_TERMINATED_BY_PEER = 0x80550E10,
  SCE_NP_MATCHING2_SIGNALING_ERROR_TIMEOUT = 0x80550E11,
  SCE_NP_MATCHING2_SIGNALING_ERROR_CTX_MAX = 0x80550E12,
  SCE_NP_MATCHING2_SIGNALING_ERROR_RESULT_NOT_FOUND = 0x80550E13,
  SCE_NP_MATCHING2_SIGNALING_ERROR_CONN_IN_PROGRESS = 0x80550E14,
  SCE_NP_MATCHING2_SIGNALING_ERROR_INVALID_ARGUMENT = 0x80550E15,
  SCE_NP_MATCHING2_SIGNALING_ERROR_OWN_NP_ID = 0x80550E16,
  SCE_NP_MATCHING2_SIGNALING_ERROR_TOO_MANY_CONN = 0x80550E17,
  SCE_NP_MATCHING2_SIGNALING_ERROR_TERMINATED_BY_MYSELF = 0x80550E18,
  SCE_NP_MATCHING2_SIGNALING_ERROR_MATCHING2_PEER_NOT_FOUND = 0x80550E19,
  SCE_NP_MATCHING2_SIGNALING_ERROR_OWN_PEER_ADDRESS = 0x80550E1A,
  SCE_NP_TROPHY_ERROR_UNKNOWN = 0x80551600,
  SCE_NP_TROPHY_ERROR_NOT_INITIALIZED = 0x80551601,
  SCE_NP_TROPHY_ERROR_ALREADY_INITIALIZED = 0x80551602,
  SCE_NP_TROPHY_ERROR_OUT_OF_MEMORY = 0x80551603,
  SCE_NP_TROPHY_ERROR_INVALID_ARGUMENT = 0x80551604,
  SCE_NP_TROPHY_ERROR_INSUFFICIENT_BUFFER = 0x80551605,
  SCE_NP_TROPHY_ERROR_EXCEEDS_MAX = 0x80551606,
  SCE_NP_TROPHY_ERROR_ABORT = 0x80551607,
  SCE_NP_TROPHY_ERROR_INVALID_HANDLE = 0x80551608,
  SCE_NP_TROPHY_ERROR_INVALID_CONTEXT = 0x80551609,
  SCE_NP_TROPHY_ERROR_INVALID_TROPHY_ID = 0x8055160A,
  SCE_NP_TROPHY_ERROR_INVALID_GROUP_ID = 0x8055160B,
  SCE_NP_TROPHY_ERROR_TROPHY_ALREADY_UNLOCKED = 0x8055160C,
  SCE_NP_TROPHY_ERROR_PLATINUM_CANNOT_UNLOCK = 0x8055160D,
  SCE_NP_TROPHY_ERROR_ACCOUNTID_NOT_MATCH = 0x8055160E,
  SCE_NP_TROPHY_ERROR_NOT_REGISTERED = 0x8055160F,
  SCE_NP_TROPHY_ERROR_ALREADY_REGISTERED = 0x80551610,
  SCE_NP_TROPHY_ERROR_BROKEN_DATA = 0x80551611,
  SCE_NP_TROPHY_ERROR_INSUFFICIENT_SPACE = 0x80551612,
  SCE_NP_TROPHY_ERROR_CONTEXT_ALREADY_EXISTS = 0x80551613,
  SCE_NP_TROPHY_ERROR_ICON_FILE_NOT_FOUND = 0x80551614,
  SCE_NP_TROPHY_ERROR_TRP_FILE_NOT_FOUND = 0x80551615,
  SCE_NP_TROPHY_ERROR_INVALID_TRP_FILE_FORMAT = 0x80551616,
  SCE_NP_TROPHY_ERROR_UNSUPPORTED_TRP_FILE = 0x80551617,
  SCE_NP_TROPHY_ERROR_INVALID_TROPHY_CONF_FORMAT = 0x80551618,
  SCE_NP_TROPHY_ERROR_UNSUPPORTED_TROPHY_CONF = 0x80551619,
  SCE_NP_TROPHY_ERROR_TROPHY_NOT_UNLOCKED = 0x8055161A,
  SCE_NP_TROPHY_ERROR_UNLOCK_DENIED = 0x8055161B,
  SCE_NP_TROPHY_ERROR_USER_NOT_FOUND = 0x8055161C,
  SCE_NP_TROPHY_ERROR_USER_NOT_LOGGED_IN = 0x8055161D,
  SCE_NP_TROPHY_ERROR_CONTEXT_USER_LOGOUT = 0x8055161E,
  SCE_NP_TROPHY_ERROR_USE_TRP_FOR_DEVELOPMENT = 0x8055161F,
  SCE_NP_TROPHY_ERROR_INVALID_NP_TITLE_ID = 0x80551620,
  SCE_NP_TROPHY_ERROR_INVALID_NP_SERVICE_LABEL = 0x80551621,
  SCE_NP_TROPHY_ERROR_NOT_SUPPORTED = 0x80551622,
  SCE_NP_TROPHY_ERROR_CONTEXT_EXCEEDS_MAX = 0x80551623,
  SCE_NP_TROPHY_ERROR_HANDLE_EXCEEDS_MAX = 0x80551624,
  SCE_NP_TROPHY_ERROR_INVALID_USER_ID = 0x80551625,
  SCE_NP_TROPHY_ERROR_TITLE_CONF_NOT_INSTALLED = 0x80551626,
  SCE_NP_TROPHY_ERROR_BROKEN_TITLE_CONF = 0x80551627,
  SCE_NP_TROPHY_ERROR_INCONSISTENT_TITLE_CONF = 0x80551628,
  SCE_NP_TROPHY_ERROR_TITLE_BACKGROUND = 0x80551629,
  SCE_NP_TROPHY_ERROR_UNSUPPORTED_TITLE = 0x8055162A,
  SCE_NP_TROPHY_ERROR_SCREENSHOT_DISABLED = 0x8055162B,
  SCE_NP_TROPHY_ERROR_SCREENSHOT_GOTO_PROCESS_SUSPEND = 0x8055162C,
  SCE_NP_TROPHY_ERROR_SCREENSHOT_DISPLAY_BUFFER_NOT_IN_USE = 0x8055162D,
  SCE_NP_TROPHY_ERROR_SCREENSHOT_DISPLAY_BUFFER_ON_MUTE = 0x8055162E,
  SCE_NP_TROPHY_ERROR_SCREENSHOT_DISPLAY_BUFFER_TOO_BIG = 0x8055162F,
  SCE_NP_TROPHY_ERROR_SCREENSHOT_DISPLAY_BUFFER_RETRY_COUNT_MAX = 0x80551630,
  SCE_NP_TROPHY_ERROR_INVALID_VALUE = 0x80551680,
  SCE_NP_TROPHY_ERROR_SRVALUE_BROKEN = 0x80551681,
  SCE_NP_TROPHY_ERROR_SRVALUE_EXISTS = 0x80551682,
  SCE_NP_TROPHY_ERROR_SRVALUE_EMPTY = 0x80551683,
  SCE_NP_TROPHY_ERROR_INVALID_NPCOMMID = 0x80551684,
  SCE_NP_TROPHY_ERROR_INVALID_NPCOMMSIGN = 0x80551685,
  SCE_NP_TROPHY_ERROR_NPCOMMSIGN_VERIFICATION_FAILURE = 0x80551686,
  SCE_NP_TROPHY_ERROR_INVALID_GRADE = 0x80551687,
  SCE_NP_TROPHY_ERROR_GROUP_UNSUPPORTED = 0x80551688,
  SCE_NP_TROPHY_ERROR_TROPHY_IS_NOT_PLATINUM = 0x80551689,
  SCE_NP_TROPHY_ERROR_STREAM_NOT_OPENED = 0x8055168A,
  SCE_NP_TROPHY_ERROR_CONFSIGN_VERIFICATION_FAILURE = 0x8055168B,
  SCE_NP_TROPHY_ERROR_TRP_FILE_VERIFICATION_FAILURE = 0x8055168C,
  SCE_NP_TROPHY_ERROR_FILE_NOT_OPENED = 0x8055168D,
  SCE_NP_TROPHY_ERROR_INVALID_FILE_NAME = 0x8055168E,
  SCE_NP_TROPHY_ERROR_FILE_ALREADY_OPENED = 0x8055168F,
  SCE_NP_TROPHY_ERROR_TRP_TOO_MANY_OPEN = 0x80551690,
  SCE_NP_TROPHY_ERROR_TRP_ENTRY_FILE_NOT_FOUND = 0x80551691,
  SCE_NP_TROPHY_ERROR_NO_IMPL = 0x80551692,
  SCE_NP_TROPHY_ERROR_BUSY = 0x80551693,
  SCE_NP_TROPHY_ERROR_INVALID_SIGNATURE = 0x80551694,
  SCE_NP_TROPHY_ERROR_SIGNATURE_VERIFICATION_FAILURE = 0x80551695,
  SCE_NP_TROPHY_ERROR_SHA1_DIGEST_LEN_OBSOLETE = 0x80551696,
  SCE_NP_TROPHY_ERROR_INVALID_CONFSIGN = 0x80551697,
  SCE_NP_TROPHY_ERROR_CANCELED_BY_CLIENT_CLOSED = 0x80551698,
  SCE_NP_TROPHY_ERROR_SHUTDOWN = 0x80551699,
  SCE_NP_TROPHY_ERROR_PROCESS_CONTEXT_NOT_FOUND = 0x8055169A,
  SCE_NP_TROPHY_ERROR_CANCELED_BY_CLIENT_SUSPEND = 0x8055169B,
  SCE_NP_TROPHY_ERROR_PROCESS_CONTEXT_ALREADY_EXISTS = 0x8055169C,
  SCE_NP_TROPHY_ERROR_MOUNT_POINT_NOT_MATCH = 0x8055169D,
  SCE_NP_TROPHY_ERROR_STORAGE_BUSY = 0x8055169E,
  SCE_NP_TROPHY_ERROR_DUPLICATED_STORAGE_HANDLE = 0x8055169F,
  SCE_NP_TROPHY_ERROR_INVALID_STORAGE_HANDLE = 0x805516A0,
  SCE_NP_TROPHY_ERROR_INVALID_STORAGE = 0x805516A1,
  SCE_NP_TROPHY_ERROR_DATA_FILE_BROKEN = 0x805516A2,
  SCE_NP_TROPHY_ERROR_DATA_FILE_INVALID_FORMAT = 0x805516A3,
  SCE_NP_TROPHY_ERROR_DATA_FILE_UNSUPPORTED_VERSION = 0x805516A4,
  SCE_NP_TROPHY_ERROR_DATA_FILE_ALREADY_OPENED = 0x805516A5,
  SCE_NP_TROPHY_ERROR_DATA_FILE_NOT_OPENED = 0x805516A6,
  SCE_NP_TROPHY_ERROR_DATA_FILE_KEY_NOT_FOUND = 0x805516A7,
  SCE_NP_TROPHY_ERROR_DATA_FILE_NOT_WORKING = 0x805516A8,
  SCE_NP_TROPHY_ERROR_DATA_FILE_WORKING = 0x805516A9,
  SCE_NP_TROPHY_ERROR_DATA_FILE_STATUS_NOT_MATCH = 0x805516AA,
  SCE_NP_TROPHY_ERROR_DATA_FILE_NP_COMM_ID_NOT_MATCH = 0x805516AB,
  SCE_NP_TROPHY_ERROR_DATA_FILE_NP_TITLE_ID_NOT_MATCH = 0x805516AC,
  SCE_NP_TROPHY_ERROR_DATA_FILE_TROPHY_TITLE_ID_NOT_MATCH = 0x805516AD,
  SCE_NP_TROPHY_ERROR_TITLE_DATA_FILE_NOT_FOUND = 0x805516AE,
  SCE_NP_TROPHY_ERROR_PLATINUM_CANNOT_LOCK = 0x805516AF,
  SCE_NP_TROPHY_ERROR_NET_TRANS_FILE_INVALID_ENTRY_TYPE = 0x805516B0,
  SCE_NP_TROPHY_ERROR_NET_TRANS_FILE_TOO_MANY_ENTRIES = 0x805516B1,
  SCE_NP_TROPHY_ERROR_NET_TRANS_FILE_NOT_FOUND = 0x805516B2,
  SCE_NP_TROPHY_ERROR_NET_TRANS_FILE_INVALID_ENTRY_ATTR = 0x805516B3,
  SCE_NP_TROPHY_ERROR_USER_DATA_FILE_NOT_FOUND = 0x805516B4,
  SCE_NP_TROPHY_ERROR_USER_DATA_FILE_TITLE_NOT_FOUND = 0x805516B5,
  SCE_NP_TROPHY_ERROR_USER_DATA_FILE_TITLE_ALREADY_EXISTS = 0x805516B6,
  SCE_NP_TROPHY_ERROR_TITLE_PARAM_FILE_NOT_FOUND = 0x805516B7,
  SCE_NP_TROPHY_ERROR_TITLE_PARAM_FILE_BROKEN = 0x805516B8,
  SCE_NP_TROPHY_ERROR_CANCELED_BY_GAME = 0x805516B9,
  SCE_NP_TROPHY_ERROR_CANCELED_BY_SYSTEM = 0x805516BA,
  SCE_NP_TROPHY_ERROR_CANCELED_BY_BG = 0x805516BB,
  SCE_NP_TROPHY_ERROR_INVALID_USER_CONTEXT = 0x805516BC,
  SCE_NP_TROPHY_ERROR_INVALID_ARBITER = 0x805516BD,
  SCE_NP_TROPHY_ERROR_STORAGE_ALREADY_OPENED = 0x805516BE,
  SCE_NP_TROPHY_ERROR_STORAGE_NOT_OPENED = 0x805516BF,
  SCE_NP_TROPHY_ERROR_RECOVERY_REQUIRED = 0x805516C0,
  SCE_NP_TROPHY_ERROR_INVALID_STREAM = 0x805516C1,
  SCE_NP_TROPHY_ERROR_TITLE_NOT_FOUND = 0x805516C2,
  SCE_NP_TROPHY_ERROR_TITLE_CONF_BROKEN_OBSOLETE = 0x805516C3,
  SCE_NP_TROPHY_ERROR_TROPHY_CONF_FILE_NOT_FOUND = 0x805516C4,
  SCE_NP_TROPHY_ERROR_PARSE_XML_ENTITY_FAILED = 0x805516C5,
  SCE_NP_TROPHY_ERROR_UNEXPECTED_EOF = 0x805516C6,
  SCE_NP_TROPHY_ERROR_TRP_BUSY = 0x805516C7,
  SCE_NP_TROPHY_ERROR_STREAM_ALREADY_OPENED = 0x805516C8,
  SCE_NP_TROPHY_ERROR_UNSUPPORTED_TROPHY_SYSTEM = 0x805516C9,
  SCE_NP_TROPHY_ERROR_DATA_FILE_INVALID_TROPSYS = 0x805516CA,
  SCE_NP_TROPHY_ERROR_UNSUPPORTED_TRP_KEY = 0x805516CB,
  SCE_NP_TROPHY_ERROR_DECRYPT_STREAM = 0x805516CC,
  SCE_NP_TROPHY_ERROR_INVALID_PLATFORM = 0x805516CD,
  SCE_NP_TROPHY_ERROR_DATA_FILE_LOCAL_BIND = 0x805516CE,
  SCE_NP_TROPHY_ERROR_NETWORK_SYNC_FAILED = 0x805516CF,
  SCE_NP_TROPHY_ERROR_USER_CONTEXT_NOT_FOUND = 0x805516D0,
  SCE_NP_TROPHY_ERROR_CANCELED_BY_LOGOUT = 0x805516D1,
  SCE_NP_TROPHY_ERROR_BIND_TITLE_NOT_FOUND = 0x805516D2,
  SCE_NP_TROPHY_ERROR_NP_BIND_INFO_NOT_FOUND_OBSOLETE = 0x805516D3,
  SCE_NP_TROPHY_ERROR_PROMOTE_NP_BIND_INFO_NOT_FOUND_OBSOLETE = 0x805516D4,
  SCE_NP_TROPHY_ERROR_INVALID_NP_TITLE_ID_CONFIG = 0x805516D5,
  SCE_NP_TROPHY_ERROR_CONF_FILE_NP_COMM_ID_NOT_MATCH = 0x805516D6,
  SCE_NP_TROPHY_ERROR_RECOVERY_FAILED = 0x805516D7,
  SCE_NP_TROPHY_ERROR_SYSTEM_CONTEXT_EXCEEDS_MAX = 0x805516D8,
  SCE_NP_TROPHY_ERROR_SYSTEM_HANDLE_EXCEEDS_MAX = 0x805516D9,
  SCE_NP_TROPHY_ERROR_SERVICE_ARBITER_SLOT_EXCEEDS_MAX = 0x805516DA,
  SCE_NP_TROPHY_ERROR_SERVICE_STORAGE_SLOT_EXCEEDS_MAX = 0x805516DB,
  SCE_NP_TROPHY_ERROR_SERVICE_CONTEXT_SLOT_EXCEEDS_MAX = 0x805516DC,
  SCE_NP_TROPHY_ERROR_SERVICE_HANDLE_SLOT_EXCEEDS_MAX = 0x805516DD,
  SCE_NP_TROPHY_ERROR_SERVICE_STREAM_SLOT_EXCEEDS_MAX = 0x805516DE,
  SCE_NP_TROPHY_ERROR_SERVICE_PROCESS_CONTEXT_EXCEEDS_MAX = 0x805516DF,
  SCE_NP_TROPHY_ERROR_SERVICE_USER_CONTEXT_EXCEEDS_MAX = 0x805516E0,
  SCE_NP_TROPHY_ERROR_SERVICE_APPLICATION_CONTEXT_EXCEEDS_MAX = 0x805516E1,
  SCE_NP_TROPHY_ERROR_APPLICATION_CONTEXT_ALREADY_EXISTS = 0x805516E2,
  SCE_NP_TROPHY_ERROR_APPLICATION_CONTEXT_NOT_FOUND = 0x805516E3,
  SCE_NP_TROPHY_ERROR_NET_TRANS_FILE_COMMSIGN_NOT_FOUND = 0x805516E4,
  SCE_NP_TROPHY_ERROR_TITLE_NP_COMM_ID_NOT_MATCH = 0x805516E5,
  SCE_NP_TROPHY_ERROR_DATA_FILE_NP_COMM_ID_EXISTS = 0x805516E6,
  SCE_NP_TROPHY_ERROR_TITLE_DATA_DIR_NOT_FOUND = 0x805516E7,
  SCE_NP_TROPHY_ERROR_TITLE_CONF_DIR_NOT_FOUND = 0x805516E8,
  SCE_NP_TROPHY_ERROR_TITLE_DATA_BROKEN = 0x805516E9,
  SCE_NP_TROPHY_ERROR_NO_BIND_INFO_IN_POSTING_ACTIVITY_OBSOLETE = 0x805516EA,
  SCE_NP_TROPHY_ERROR_UNKNOWN_BOOT_TYPE = 0x805516EB,
  SCE_NP_TROPHY_ERROR_USER_SUMMARY_FILE_BROKEN = 0x805516EC,
  SCE_NP_TROPHY_ERROR_USER_SUMMARY_FILE_NOT_FOUND = 0x805516ED,
  SCE_NP_TROPHY_ERROR_INVALID_TRP_URI = 0x805516EE,
  SCE_NP_TROPHY_ERROR_READ_ONLY_STORAGE = 0x805516EF,
  SCE_NP_TROPHY_ERROR_TROPHY_TITLE_ID_NOT_MATCH = 0x805516F0,
  SCE_NP_TROPHY_ERROR_INT_HANDLE_EXCEEDS_MAX = 0x805516F1,
  SCE_NP_TROPHY_ERROR_INT_CONTEXT_EXCEEDS_MAX = 0x805516F2,
  SCE_NP_TROPHY_ERROR_TITLE_CONF_NOT_FOUND_OBSOLETE = 0x805516F3,
  SCE_NP_TROPHY_ERROR_TITLE_DATA_NOT_FOUND = 0x805516F4,
  SCE_NP_TROPHY_ERROR_TOO_MANY_INST_SRC_ENTRY = 0x805516F5,
  SCE_NP_TROPHY_ERROR_INST_SRC_SERVICE_LABEL_DUPLICATED = 0x805516F6,
  SCE_NP_TROPHY_ERROR_SERVICE_LABEL_NOT_MATCH = 0x805516F7,
  SCE_NP_TROPHY_ERROR_SUMMARY_NOT_FOUND = 0x805516F8,
  SCE_NP_TROPHY_ERROR_NPCOMMSIGN_NOT_FOUND = 0x805516F9,
  SCE_NP_TROPHY_ERROR_CANNOT_RECOVER_TITLE_ENTRY_INFO = 0x805516FA,
  SCE_NP_TROPHY_ERROR_IMAGE_FILE_CORRUPTED = 0x805516FB,
  SCE_NP_TROPHY_ERROR_APPLICATION_TROPHY_NOT_REGISTERED = 0x805516FC,
  SCE_NP_TROPHY_ERROR_TOO_MANY_CONTEXTS_TO_COLLECT = 0x805516FD,
  SCE_NP_TROPHY_ERROR_SEALEDKEY_BROKEN = 0x805516FE,
  SCE_NP_TROPHY_ERROR_IPC_SESSION_NOT_FOUND = 0x805516FF,
  SCE_NP_TROPHY_NET_ERROR_UNKNOWN = 0x80551700,
  SCE_NP_TROPHY_NET_ERROR_FILE_NOT_FOUND = 0x80551701,
  SCE_NP_TROPHY_NET_ERROR_FILE_ALREADY_OPENED = 0x80551702,
  SCE_NP_TROPHY_NET_ERROR_FILE_NOT_OPENED = 0x80551703,
  SCE_NP_TROPHY_NET_ERROR_TROPHY_CONF_FILE_NOT_FOUND = 0x80551704,
  SCE_NP_TROPHY_NET_ERROR_SERVICE_UNAVAILABLE = 0x80551705,
  SCE_NP_TROPHY_NET_ERROR_MAINTENANCE = 0x80551706,
  SCE_NP_TROPHY_NET_ERROR_END_OF_SERVICE = 0x80551707,
  SCE_NP_TROPHY_NET_ERROR_BEFORE_SERVICE = 0x80551708,
  SCE_NP_TROPHY_NET_ERROR_BAD_RESPONSE = 0x80551709,
  SCE_NP_TROPHY_NET_ERROR_INVALID_SIGNATURE = 0x8055170A,
  SCE_NP_TROPHY_NET_ERROR_BUILD_REQUEST = 0x8055170B,
  SCE_NP_TROPHY_NET_ERROR_UNSUPPORTED_NET_CONF_FILE_KEY = 0x8055170C,
  SCE_NP_TROPHY_NET_ERROR_BAD_STATUS = 0x8055170D,
  SCE_NP_TROPHY_NET_ERROR_STORAGE_ALREADY_OPENED = 0x8055170E,
  SCE_NP_TROPHY_NET_ERROR_STORAGE_NOT_OPENED = 0x8055170F,
  SCE_NP_TROPHY_SERVER_ERROR_BAD_REQUEST = 0x80551801,
  SCE_NP_TROPHY_SERVER_ERROR_INVALID_TICKET = 0x80551802,
  SCE_NP_TROPHY_SERVER_ERROR_INVALID_SIGNATURE = 0x80551803,
  SCE_NP_TROPHY_SERVER_ERROR_EXPIRED_TICKET = 0x80551804,
  SCE_NP_TROPHY_SERVER_ERROR_INVALID_JID = 0x80551805,
  SCE_NP_TROPHY_SERVER_ERROR_INTERNAL_SERVER_ERROR = 0x80551807,
  SCE_NP_TROPHY_SERVER_ERROR_BANNED = 0x8055180A,
  SCE_NP_TROPHY_SERVER_ERROR_BLACKLISTED_ID = 0x80551811,
  SCE_NP_TROPHY_SERVER_ERROR_NO_SUCH_TROPHY_USER = 0x80551847,
  SCE_NP_TROPHY_SERVER_ERROR_NOT_AUTHORIZED = 0x80551863,
  SCE_NP_BANDWIDTH_TEST_ERROR_NOT_INITIALIZED = 0x80551F02,
  SCE_NP_BANDWIDTH_TEST_ERROR_BAD_RESPONSE = 0x80551F03,
  SCE_NP_BANDWIDTH_TEST_ERROR_OUT_OF_MEMORY = 0x80551F04,
  SCE_NP_BANDWIDTH_TEST_ERROR_INVALID_ARGUMENT = 0x80551F05,
  SCE_NP_BANDWIDTH_TEST_ERROR_INVALID_SIZE = 0x80551F06,
  SCE_NP_BANDWIDTH_TEST_ERROR_CONTEXT_NOT_AVAILABLE = 0x80551F07,
  SCE_NP_PARTY_ERROR_UNKNOWN = 0x80552501,
  SCE_NP_PARTY_ERROR_ALREADY_INITIALIZED = 0x80552502,
  SCE_NP_PARTY_ERROR_NOT_INITIALIZED = 0x80552503,
  SCE_NP_PARTY_ERROR_INVALID_ARGUMENT = 0x80552504,
  SCE_NP_PARTY_ERROR_OUT_OF_MEMORY = 0x80552505,
  SCE_NP_PARTY_ERROR_NOT_IN_PARTY = 0x80552506,
  SCE_NP_PARTY_ERROR_VOICE_NOT_ENABLED = 0x80552507,
  SCE_NP_PARTY_ERROR_MEMBER_NOT_FOUND = 0x80552508,
  SCE_NP_PARTY_ERROR_SEND_BUSY = 0x80552509,
  SCE_NP_PARTY_ERROR_SEND_OUT_OF_CONTEXT = 0x80552510,
  SCE_NP_PARTY_ERROR_INVALID_STATE = 0x80552511,
  SCE_NP_PARTY_ERROR_INVALID_LOCAL_PARTY_MEMBER = 0x80552512,
  SCE_NP_PARTY_ERROR_INVALID_PROCESS_TYPE = 0x80552513,
  SCE_NP_PARTY_ERROR_GAME_SESSION_NOT_ENABLED = 0x80552514,
  SCE_NP_PARTY_ERROR_INVALID_PARTY_NO_FRIENDS = 0x80552515,
  SCE_NP_PARTY_ERROR_INVALID_PARTY_IS_GAME_SESSION = 0x80552516,
  SCE_NP_SNS_FACEBOOK_ERROR_UNKNOWN = 0x80552601,
  SCE_NP_SNS_FACEBOOK_ERROR_INVALID_ARGUMENT = 0x80552602,
  SCE_NP_SNS_FACEBOOK_ERROR_OUT_OF_MEMORY = 0x80552603,
  SCE_NP_SNS_FACEBOOK_ERROR_EXCEEDS_MAX = 0x80552604,
  SCE_NP_SNS_FACEBOOK_ERROR_UGM_RESTRICTION = 0x80552605,
  SCE_NP_SNS_FACEBOOK_ERROR_ABORTED = 0x80552606,
  SCE_NP_SNS_FACEBOOK_ERROR_ACCOUNT_NOT_BOUND = 0x80552607,
  SCE_NP_SNS_FACEBOOK_ERROR_CANCELED_BY_SYSTEM = 0x80552608,
  SCE_NP_SNS_FACEBOOK_ERROR_SUB_ACCOUNT = 0x80552609,
  SCE_NP_SIGNALING_ERROR_NOT_INITIALIZED = 0x80552701,
  SCE_NP_SIGNALING_ERROR_ALREADY_INITIALIZED = 0x80552702,
  SCE_NP_SIGNALING_ERROR_OUT_OF_MEMORY = 0x80552703,
  SCE_NP_SIGNALING_ERROR_CTXID_NOT_AVAILABLE = 0x80552704,
  SCE_NP_SIGNALING_ERROR_CTX_NOT_FOUND = 0x80552705,
  SCE_NP_SIGNALING_ERROR_REQID_NOT_AVAILABLE = 0x80552706,
  SCE_NP_SIGNALING_ERROR_REQ_NOT_FOUND = 0x80552707,
  SCE_NP_SIGNALING_ERROR_PARSER_CREATE_FAILED = 0x80552708,
  SCE_NP_SIGNALING_ERROR_PARSER_FAILED = 0x80552709,
  SCE_NP_SIGNALING_ERROR_INVALID_NAMESPACE = 0x8055270A,
  SCE_NP_SIGNALING_ERROR_NETINFO_NOT_AVAILABLE = 0x8055270B,
  SCE_NP_SIGNALING_ERROR_PEER_NOT_RESPONDING = 0x8055270C,
  SCE_NP_SIGNALING_ERROR_CONNID_NOT_AVAILABLE = 0x8055270D,
  SCE_NP_SIGNALING_ERROR_CONN_NOT_FOUND = 0x8055270E,
  SCE_NP_SIGNALING_ERROR_PEER_UNREACHABLE = 0x8055270F,
  SCE_NP_SIGNALING_ERROR_TERMINATED_BY_PEER = 0x80552710,
  SCE_NP_SIGNALING_ERROR_TIMEOUT = 0x80552711,
  SCE_NP_SIGNALING_ERROR_CTX_MAX = 0x80552712,
  SCE_NP_SIGNALING_ERROR_RESULT_NOT_FOUND = 0x80552713,
  SCE_NP_SIGNALING_ERROR_CONN_IN_PROGRESS = 0x80552714,
  SCE_NP_SIGNALING_ERROR_INVALID_ARGUMENT = 0x80552715,
  SCE_NP_SIGNALING_ERROR_OWN_NP_ID = 0x80552716,
  SCE_NP_SIGNALING_ERROR_TOO_MANY_CONN = 0x80552717,
  SCE_NP_SIGNALING_ERROR_TERMINATED_BY_MYSELF = 0x80552718,
  SCE_NP_SIGNALING_ERROR_PROHIBITED_TO_USE = 0x80552719,
  SCE_NP_SIGNALING_ERROR_EXCEED_RATE_LIMIT = 0x8055271A,
  SCE_NP_SIGNALING_ERROR_OWN_PEER_ADDRESS = 0x8055271B,
  SCE_NP_WEBAPI_ERROR_OUT_OF_MEMORY = 0x80552901,
  SCE_NP_WEBAPI_ERROR_INVALID_ARGUMENT = 0x80552902,
  SCE_NP_WEBAPI_ERROR_INVALID_LIB_CONTEXT_ID = 0x80552903,
  SCE_NP_WEBAPI_ERROR_LIB_CONTEXT_NOT_FOUND = 0x80552904,
  SCE_NP_WEBAPI_ERROR_USER_CONTEXT_NOT_FOUND = 0x80552905,
  SCE_NP_WEBAPI_ERROR_REQUEST_NOT_FOUND = 0x80552906,
  SCE_NP_WEBAPI_ERROR_NOT_SIGNED_IN = 0x80552907,
  SCE_NP_WEBAPI_ERROR_INVALID_CONTENT_PARAMETER = 0x80552908,
  SCE_NP_WEBAPI_ERROR_ABORTED = 0x80552909,
  SCE_NP_WEBAPI_ERROR_USER_CONTEXT_ALREADY_EXIST = 0x8055290A,
  SCE_NP_WEBAPI_ERROR_PUSH_EVENT_FILTER_NOT_FOUND = 0x8055290B,
  SCE_NP_WEBAPI_ERROR_PUSH_EVENT_CALLBACK_NOT_FOUND = 0x8055290C,
  SCE_NP_WEBAPI_ERROR_HANDLE_NOT_FOUND = 0x8055290D,
  SCE_NP_WEBAPI_ERROR_SERVICE_PUSH_EVENT_FILTER_NOT_FOUND = 0x8055290E,
  SCE_NP_WEBAPI_ERROR_SERVICE_PUSH_EVENT_CALLBACK_NOT_FOUND = 0x8055290F,
  SCE_NP_WEBAPI_ERROR_SIGNED_IN_USER_NOT_FOUND = 0x80552910,
  SCE_NP_WEBAPI_ERROR_LIB_CONTEXT_BUSY = 0x80552911,
  SCE_NP_WEBAPI_ERROR_USER_CONTEXT_BUSY = 0x80552912,
  SCE_NP_WEBAPI_ERROR_REQUEST_BUSY = 0x80552913,
  SCE_NP_WEBAPI_ERROR_INVALID_HTTP_STATUS_CODE = 0x80552914,
  SCE_NP_WEBAPI_ERROR_PROHIBITED_HTTP_HEADER = 0x80552915,
  SCE_NP_WEBAPI_ERROR_PROHIBITED_FUNCTION_CALL = 0x80552916,
  SCE_NP_WEBAPI_ERROR_MULTIPART_PART_NOT_FOUND = 0x80552917,
  SCE_NP_WEBAPI_ERROR_PARAMETER_TOO_LONG = 0x80552918,
  SCE_NP_WEBAPI_ERROR_HANDLE_BUSY = 0x80552919,
  SCE_NP_WEBAPI_ERROR_LIB_CONTEXT_MAX = 0x8055291A,
  SCE_NP_WEBAPI_ERROR_USER_CONTEXT_MAX = 0x8055291B,
  SCE_NP_WEBAPI_ERROR_EXTD_PUSH_EVENT_FILTER_NOT_FOUND = 0x8055291C,
  SCE_NP_WEBAPI_ERROR_EXTD_PUSH_EVENT_CALLBACK_NOT_FOUND = 0x8055291D,
  SCE_NP_WEBAPI_ERROR_AFTER_SEND = 0x8055291E,
  SCE_NP_WEBAPI_ERROR_TIMEOUT = 0x8055291F,
  SCE_NP_AUTH_SERVER_ERROR_UNKNOWN = 0x80552A00,
  SCE_NP_AUTH_SERVER_ERROR_INVALID_REQUEST = 0x80552A01,
  SCE_NP_AUTH_SERVER_ERROR_UNAUTHORIZED_CLIENT = 0x80552A02,
  SCE_NP_AUTH_SERVER_ERROR_ACCESS_DENIED = 0x80552A03,
  SCE_NP_AUTH_SERVER_ERROR_UNSUPPORTED_RESPONSE_TYPE = 0x80552A04,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_05 = 0x80552A05,
  SCE_NP_AUTH_SERVER_ERROR_SERVER_ERROR = 0x80552A06,
  SCE_NP_AUTH_SERVER_ERROR_TEMPORARILY_UNAVAILABLE = 0x80552A07,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_08 = 0x80552A08,
  SCE_NP_AUTH_SERVER_ERROR_INVALID_GRANT = 0x80552A09,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_0A = 0x80552A0A,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_10 = 0x80552A10,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_11 = 0x80552A11,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_12 = 0x80552A12,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_13 = 0x80552A13,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_14 = 0x80552A14,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_15 = 0x80552A15,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_16 = 0x80552A16,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_17 = 0x80552A17,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_18 = 0x80552A18,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_19 = 0x80552A19,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_1A = 0x80552A1A,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_1B = 0x80552A1B,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_1C = 0x80552A1C,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_1D = 0x80552A1D,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_80 = 0x80552A80,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_81 = 0x80552A81,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_82 = 0x80552A82,
  SCE_NP_AUTH_SERVER_ERROR_OBSOLETE_83 = 0x80552A83,
  SCE_NP_IN_GAME_MESSAGE_ERROR_OUT_OF_MEMORY = 0x80552B01,
  SCE_NP_IN_GAME_MESSAGE_ERROR_INVALID_ARGUMENT = 0x80552B02,
  SCE_NP_IN_GAME_MESSAGE_ERROR_LIB_CONTEXT_NOT_FOUND = 0x80552B03,
  SCE_NP_IN_GAME_MESSAGE_ERROR_NOT_SIGNED_IN = 0x80552B04,
  SCE_NP_IN_GAME_MESSAGE_ERROR_HANDLE_NOT_FOUND = 0x80552B05,
  SCE_NP_IN_GAME_MESSAGE_ERROR_ABORTED = 0x80552B06,
  SCE_NP_IN_GAME_MESSAGE_ERROR_SIGNED_IN_USER_NOT_FOUND = 0x80552B07,
  SCE_NP_IN_GAME_MESSAGE_ERROR_NOT_PREPARED = 0x80552B08,
  SCE_NP_IN_GAME_MESSAGE_ERROR_EXCEED_RATE_LIMIT = 0x80552B09,
  SCE_NP_SNS_YOUTUBE_ERROR_INTERNAL = 0x80552D01,
  SCE_NP_SNS_YOUTUBE_ERROR_INVALID_ARGUMENT = 0x80552D02,
  SCE_NP_SNS_YOUTUBE_ERROR_OUT_OF_MEMORY = 0x80552D03,
  SCE_NP_SNS_YOUTUBE_ERROR_EXCEEDS_MAX = 0x80552D04,
  SCE_NP_SNS_YOUTUBE_ERROR_ABORTED = 0x80552D06,
  SCE_NP_SNS_YOUTUBE_ERROR_ACCOUNT_NOT_BOUND = 0x80552D07,
  SCE_NP_SNS_YOUTUBE_ERROR_CANCELED_BY_SYSTEM = 0x80552D08,
  SCE_NP_SNS_YOUTUBE_ERROR_SUB_ACCOUNT = 0x80552D09,
  SCE_NP_SNS_YOUTUBE_ERROR_PROMPT_FOR_PERMISSIONS = 0x80552D0A,
  SCE_NP_SNS_YOUTUBE_ERROR_BAD_RESPONSE = 0x80552D0B,
  SCE_NP_SNS_YOUTUBE_ERROR_REFRESH_MASTER_TOKEN_WITH_CODE_FAILED = 0x80552D0C,
  SCE_NP_ID_MAPPER_ERROR_ABORTED = 0x80553000,
  SCE_NP_ID_MAPPER_ERROR_ACCOUNT_ID_NOT_FOUND = 0x80553001,
  SCE_NP_ID_MAPPER_ERROR_ONLINE_ID_NOT_FOUND = 0x80553002,
  SCE_NP_ID_MAPPER_ERROR_NP_ID_NOT_FOUND = 0x80553003,
  SCE_NP_ID_MAPPER_ERROR_ALREADY_INITIALIZED = 0x80553080,
  SCE_NP_ID_MAPPER_ERROR_NOT_INITIALIZED = 0x80553081,
  SCE_NP_ID_MAPPER_ERROR_OUT_OF_MEMORY = 0x80553082,
  SCE_NP_ID_MAPPER_ERROR_INVALID_ARGUMENT = 0x80553083,
  SCE_NP_ID_MAPPER_ERROR_INVALID_LENGTH = 0x80553084,
  SCE_NP_ID_MAPPER_ERROR_INVALID_REQUEST = 0x80553085,
  SCE_NP_ID_MAPPER_ERROR_REQUEST_NOT_FOUND = 0x80553086,
  SCE_NP_ID_MAPPER_ERROR_TOO_MANY_REQUEST = 0x80553087,
  SCE_NP_ID_MAPPER_ERROR_REQUEST_UNAVAILABLE = 0x80553088,
  SCE_NP_ID_MAPPER_ERROR_NO_CACHE = 0x8055308A,
  SCE_NP_ID_MAPPER_ERROR_EXPIRED_CACHE = 0x8055308B,
  SCE_NP_ID_MAPPER_ERROR_INSUFFICIENT_BUFFER = 0x8055308C,
  SCE_NP_ID_MAPPER_ERROR_UNKNOWN = 0x8055308F,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UNKNOWN = 0x80553100,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_OUT_OF_MEMORY = 0x80553101,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_ARGUMENT = 0x80553102,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_SHUTDOWN = 0x80553103,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_CONTEXT = 0x80553104,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_CONTEXT_EXCEEDS_MAX = 0x80553105,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_HANDLE = 0x80553106,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_HANDLE_EXCEEDS_MAX = 0x80553107,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_BUSY = 0x80553108,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_ABORT = 0x80553109,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_USER = 0x8055310A,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_USER_NOT_LOGGED_IN = 0x8055310B,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_USER_NOT_SIGNED_IN = 0x8055310C,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_TYPE = 0x8055310D,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_CONTEXT_KEY = 0x8055310E,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_CONTEXT_VALUE = 0x8055310F,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_CONTEXT_NUM = 0x80553110,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DATA_CORRUPTED = 0x80553111,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_SIZE = 0x80553112,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_EXCEEDS_RECORD_DATA_SIZE_LIMIT = 0x80553113,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_KEY = 0x80553114,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_VALUE = 0x80553115,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD = 0x80553116,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_NOT_INITIALIZED = 0x80553117,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_ALREADY_INITIALIZED = 0x80553118,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_OBJECT = 0x80553119,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_ARRAY = 0x8055311A,
  SCE_NP_DATA_COMMUNICATION_ERROR_UNKNOWN = 0x80553200,
  SCE_NP_DATA_COMMUNICATION_ERROR_NOT_INITIALIZED = 0x80553201,
  SCE_NP_DATA_COMMUNICATION_ERROR_ALREADY_INITIALIZED = 0x80553202,
  SCE_NP_DATA_COMMUNICATION_ERROR_OUT_OF_MEMORY = 0x80553203,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_SIZE = 0x80553204,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_ARGUMENT = 0x80553205,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_CONTEXT_ID = 0x80553206,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_USER_ID = 0x80553207,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_SERVICE_LABEL = 0x80553208,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_EVENT_HANDLER = 0x80553209,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_PEER_ADDRESS = 0x8055320A,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_ACCOUNT_ID = 0x8055320B,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_PLATFORM_TYPE = 0x8055320C,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_SIGNALING_CONNECTION_ID = 0x8055320D,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_PEER_CONNECTION_ID = 0x8055320E,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_DATA_CHANNEL_ID = 0x8055320F,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_DATA_CHANNEL_NUMBER = 0x80553210,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_DATA_CHANNEL_OPTION = 0x80553211,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_DATA_CHANNEL_OPTION_VALUE = 0x80553212,
  SCE_NP_DATA_COMMUNICATION_ERROR_USER_NOT_LOGGED_IN = 0x80553213,
  SCE_NP_DATA_COMMUNICATION_ERROR_USER_NOT_SIGNED_IN = 0x80553214,
  SCE_NP_DATA_COMMUNICATION_ERROR_CONTEXT_EXCEEDS_MAX = 0x80553215,
  SCE_NP_DATA_COMMUNICATION_ERROR_SIGNALING_EXCEEDS_MAX = 0x80553216,
  SCE_NP_DATA_COMMUNICATION_ERROR_DATA_CHANNEL_EXCEEDS_MAX = 0x80553217,
  SCE_NP_DATA_COMMUNICATION_ERROR_INSUFFICIENT_BUFFER = 0x80553218,
  SCE_NP_SESSION_SIGNALING_ERROR_NOT_INITIALIZED = 0x80553301,
  SCE_NP_SESSION_SIGNALING_ERROR_ALREADY_INITIALIZED = 0x80553302,
  SCE_NP_SESSION_SIGNALING_ERROR_INVALID_ARGUMENT = 0x80553303,
  SCE_NP_SESSION_SIGNALING_ERROR_OWN_PEER_ADDRESS = 0x80553304,
  SCE_NP_SESSION_SIGNALING_ERROR_OUT_OF_MEMORY = 0x80553305,
  SCE_NP_SESSION_SIGNALING_ERROR_TIMEOUT = 0x80553306,
  SCE_NP_SESSION_SIGNALING_ERROR_CTXID_NOT_AVAILABLE = 0x80553307,
  SCE_NP_SESSION_SIGNALING_ERROR_CTX_NOT_FOUND = 0x80553308,
  SCE_NP_SESSION_SIGNALING_ERROR_GRPID_NOT_AVAILABLE = 0x80553309,
  SCE_NP_SESSION_SIGNALING_ERROR_GRP_NOT_FOUND = 0x8055330A,
  SCE_NP_SESSION_SIGNALING_ERROR_CONNID_NOT_AVAILABLE = 0x8055330B,
  SCE_NP_SESSION_SIGNALING_ERROR_CONN_NOT_FOUND = 0x8055330C,
  SCE_NP_SESSION_SIGNALING_ERROR_PEER_UNREACHABLE = 0x8055330D,
  SCE_NP_SESSION_SIGNALING_ERROR_CONN_IN_PROGRESS = 0x8055330E,
  SCE_NP_SESSION_SIGNALING_ERROR_TERMINATED_BY_PEER = 0x8055330F,
  SCE_NP_SESSION_SIGNALING_ERROR_TERMINATED_BY_MYSELF = 0x80553310,
  SCE_NP_WEBAPI2_ERROR_OUT_OF_MEMORY = 0x80553401,
  SCE_NP_WEBAPI2_ERROR_INVALID_ARGUMENT = 0x80553402,
  SCE_NP_WEBAPI2_ERROR_INVALID_LIB_CONTEXT_ID = 0x80553403,
  SCE_NP_WEBAPI2_ERROR_LIB_CONTEXT_NOT_FOUND = 0x80553404,
  SCE_NP_WEBAPI2_ERROR_USER_CONTEXT_NOT_FOUND = 0x80553405,
  SCE_NP_WEBAPI2_ERROR_REQUEST_NOT_FOUND = 0x80553406,
  SCE_NP_WEBAPI2_ERROR_NOT_SIGNED_IN = 0x80553407,
  SCE_NP_WEBAPI2_ERROR_INVALID_CONTENT_PARAMETER = 0x80553408,
  SCE_NP_WEBAPI2_ERROR_ABORTED = 0x80553409,
  SCE_NP_WEBAPI2_ERROR_USER_CONTEXT_ALREADY_EXIST = 0x8055340A,
  SCE_NP_WEBAPI2_ERROR_PUSH_EVENT_FILTER_NOT_FOUND = 0x8055340B,
  SCE_NP_WEBAPI2_ERROR_PUSH_EVENT_CALLBACK_NOT_FOUND = 0x8055340C,
  SCE_NP_WEBAPI2_ERROR_HANDLE_NOT_FOUND = 0x8055340D,
  SCE_NP_WEBAPI2_ERROR_SERVICE_PUSH_EVENT_FILTER_NOT_FOUND = 0x8055340E,
  SCE_NP_WEBAPI2_ERROR_SERVICE_PUSH_EVENT_CALLBACK_NOT_FOUND = 0x8055340F,
  SCE_NP_WEBAPI2_ERROR_SIGNED_IN_USER_NOT_FOUND = 0x80553410,
  SCE_NP_WEBAPI2_ERROR_LIB_CONTEXT_BUSY = 0x80553411,
  SCE_NP_WEBAPI2_ERROR_USER_CONTEXT_BUSY = 0x80553412,
  SCE_NP_WEBAPI2_ERROR_REQUEST_BUSY = 0x80553413,
  SCE_NP_WEBAPI2_ERROR_INVALID_HTTP_STATUS_CODE = 0x80553414,
  SCE_NP_WEBAPI2_ERROR_PROHIBITED_HTTP_HEADER = 0x80553415,
  SCE_NP_WEBAPI2_ERROR_PROHIBITED_FUNCTION_CALL = 0x80553416,
  SCE_NP_WEBAPI2_ERROR_MULTIPART_PART_NOT_FOUND = 0x80553417,
  SCE_NP_WEBAPI2_ERROR_PARAMETER_TOO_LONG = 0x80553418,
  SCE_NP_WEBAPI2_ERROR_HANDLE_BUSY = 0x80553419,
  SCE_NP_WEBAPI2_ERROR_LIB_CONTEXT_MAX = 0x8055341A,
  SCE_NP_WEBAPI2_ERROR_USER_CONTEXT_MAX = 0x8055341B,
  SCE_NP_WEBAPI2_ERROR_EXTD_PUSH_EVENT_FILTER_NOT_FOUND = 0x8055341C,
  SCE_NP_WEBAPI2_ERROR_EXTD_PUSH_EVENT_CALLBACK_NOT_FOUND = 0x8055341D,
  SCE_NP_WEBAPI2_ERROR_AFTER_SEND = 0x8055341E,
  SCE_NP_WEBAPI2_ERROR_TIMEOUT = 0x8055341F,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_ALREADY_INITIALIZED = 0x80553600,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_NOT_INITIALIZED = 0x80553601,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_OUT_OF_MEMORY = 0x80553602,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_ARGUMENT = 0x80553603,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_USER_ID = 0x80553604,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_ACCOUNT_ID = 0x80553605,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_PLATFORM_TYPE = 0x80553606,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_ONLINE_ID = 0x80553607,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_SESSION_ID = 0x80553608,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_BRIDGE_ID = 0x80553609,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_BRIDGE_TOKEN = 0x8055360A,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_ETAG = 0x8055360B,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_PEER_ADDRESS = 0x8055360C,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_CHANNEL = 0x8055360D,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_MESSAGE = 0x8055360E,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_PUSH_CONTEXT_ID = 0x8055360F,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_SESSION_CUSTOM_DATA = 0x80553610,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_MEMBER_CUSTOM_DATA = 0x80553611,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_FIELDS = 0x80553612,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_ABORTED = 0x80553613,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_UNKNOWN = 0x80553614,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INSUFFICIENT_BUFFER = 0x80553615,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_ITEM_NOT_FOUND = 0x80553616,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_DATA_MALFORMED = 0x80553617,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_TOPOLOGY = 0x80553618,
  SCE_NP_SESSION_MANAGEMENT_CLIENT_ERROR_INVALID_SESSION_NAME = 0x80553619,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_ALREADY_INITIALIZED = 0x80553700,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_NOT_INITIALIZED = 0x80553701,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_OUT_OF_MEMORY = 0x80553702,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_ARGUMENT = 0x80553703,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_INITIALIZE_PARAMETER = 0x80553704,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_CONTEXT_PARAMETER = 0x80553705,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_HANDLER = 0x80553706,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_CONTEXT_ID = 0x80553707,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_SESSION_OPTION = 0x80553708,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_ACCOUNT_ID = 0x80553709,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_PLATFORM_TYPE = 0x8055370A,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_SESSION_ID = 0x8055370B,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_BRIDGE_INFO = 0x8055370C,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_BRIDGE_ID = 0x8055370D,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_BRIDGE_TOKEN = 0x8055370E,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_ETAG = 0x8055370F,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_CHANNEL = 0x80553710,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_MESSAGE = 0x80553711,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_REQUEST = 0x80553712,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_REQUEST_ID = 0x80553713,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_REQUEST_CALLBACK = 0x80553714,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_REQUEST_CALLBACK_ALREADY_REGISTERED = 0x80553715,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_SESSION_DATA_VALUE_TYPE = 0x80553716,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_MEMBER_DATA_VALUE_TYPE = 0x80553717,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_SESSION_DATA_VALUE = 0x80553718,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_MEMBER_DATA_VALUE = 0x80553719,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_MEMBER_ID = 0x8055371A,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_ABORTED = 0x8055371B,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_CONTEXT_NOT_STARTED = 0x8055371C,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_CONTEXT_ALREADY_STARTED = 0x8055371D,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_UNKNOWN = 0x8055371E,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INSUFFICIENT_BUFFER = 0x8055371F,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_REQUEST_NOT_FOUND = 0x80553720,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_SESSION_NOT_FOUND = 0x80553721,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_SESSION_ALREADY_EXISTS = 0x80553722,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_CONTEXT_SLOT_EXCEEDS_MAX = 0x80553723,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_UNEXPECTED_DEACTIVATED_ERRCODE = 0x80553724,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_CMD_HANDLER_STOPPED = 0x80553725,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_MEMBER_NOT_FOUND = 0x80553726,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_MEMBER_ALREADY_EXISTS = 0x80553727,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_SESSION_STATE = 0x80553728,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_SESSION_RELEASED = 0x80553729,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_MEMBER_FULL = 0x8055372A,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_CONTEXT_TYPE = 0x8055372B,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_REQUEST_NOT_FINISHED = 0x8055372C,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_QUEUE_EMPTY = 0x8055372D,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_PRESENCE_OFFLINE_DETECTED = 0x8055372E,
  SCE_NP_SESSION_MANAGEMENT_MANAGER_ERROR_INVALID_PROPERTY = 0x8055372F,
  SCE_NP_ARCH_CALLOUT_ERROR_NOT_INITIALIZED = 0x80558001,
  SCE_NP_ARCH_CALLOUT_ERROR_NOT_TERMINATED = 0x80558002,
  SCE_NP_ARCH_BASE64_ERROR_INVALID_LENGTH = 0x80558003,
  SCE_NP_ARCH_BASE64_ERROR_INVALID_CHARACTER = 0x80558004,
  SCE_NP_ARCH_ERROR_CREATE_HEAP = 0x80558005,
  SCE_NP_ARCH_ERROR_CALLOUT_DUPLICATED = 0x80558006,
  SCE_NP_ARCH_ERROR_THREAD_FATAL = 0x80558007,
  SCE_NP_ARCH_ERROR_INSUFFICIENT_BUFFER = 0x80558008,
  SCE_NP_ARCH_ERROR_INVALID_ARGUMENT = 0x80558009,
  SCE_NP_ARCH_ERROR_UNKNOWN = 0x8055800A,
  SCE_NP_ARCH_ERROR_TIMEOUT = 0x8055800B,
  SCE_NP_ARCH_ERROR_EVF_COND = 0x8055800C,
  SCE_NP_ARCH_ERROR_SEMA_ZERO = 0x8055800D,
  SCE_NP_ARCH_ERROR_PARSE_STRING = 0x8055800E,
  SCE_NP_ARCH_ERROR_MUTEX_BUSY = 0x8055800F,
  SCE_NP_KDC_ERROR_OUT_OF_MEMORY = 0x80558201,
  SCE_NP_KDC_ERROR_INVALID_PARAM = 0x80558202,
  SCE_NP_KDC_ERROR_INSUFFICIENT_BUFFER = 0x80558203,
  SCE_NP_KDC_ERROR_NOT_INITIALIZED = 0x80558204,
  SCE_NP_KDC_ERROR_ALREADY_INITIALIZED = 0x80558205,
  SCE_NP_KDC_ERROR_REQUIRED_HEADER_NOT_FOUND = 0x80558206,
  SCE_NP_KDC_ERROR_PARSE_HEADER = 0x80558207,
  SCE_NP_KDC_ERROR_PARAM_NOT_FOUND = 0x80558208,
  SCE_NP_KDC_ERROR_UNKNOWN_REASON_CODE = 0x80558209,
  SCE_NP_KDC_ERROR_SERVER_RESPONSE = 0x8055820A,
  SCE_NP_KDC_ERROR_NO_CONSOLE_NUM = 0x8055820B,
  SCE_NP_KDC_ERROR_UNKNOWN = 0x8055820C,
  SCE_NP_KDC_ERROR_USING_MAX_KDC_ID = 0x8055820D,
  SCE_NP_KDC_ERROR_NOT_INITIALIZED_GLOBAL = 0x8055820E,
  SCE_NP_KDC_ERROR_ALREADY_INITIALIZED_GLOBAL = 0x8055820F,
  SCE_NP_KDC_ERROR_INVALID_SECURE_RESPONS = 0x80558210,
  SCE_NP_KDC_ERROR_HTTPS_CN_CHECK = 0x80558220,
  SCE_NP_KDC_ERROR_HTTPS_UNKNOWN_CA = 0x80558221,
  SCE_NP_KDC_ERROR_HTTPS_INVALID_CERT = 0x80558222,
  SCE_NP_KDC_ERROR_HTTPS_INTERNAL = 0x80558223,
  SCE_NP_KDC_ERROR_HTTPS_NOT_AFTER_CHECK = 0x80558224,
  SCE_NP_KDC_ERROR_HTTPS_NOT_BEFORE_CHECK = 0x80558225,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_SEND_REQUEST = 0x80558230,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_CONNECTION_RESERVED = 0x80558231,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_RESOLVING_NAME = 0x80558232,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_NAME_RESOLVED = 0x80558233,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_CONNECTING = 0x80558234,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_CONNECTED = 0x80558235,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_TLS_CONNECTING = 0x80558236,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_TLS_CONNECTED = 0x80558237,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_SENDING_REQUEST = 0x80558238,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_REQUEST_SENT = 0x80558239,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_RECEIVING_HEADER = 0x8055823A,
  SCE_NP_KDC_ERROR_HTTP_TIMEOUT_HEADER_RECEIVED = 0x8055823B,
  SCE_NP_KDC_ERROR_NOT_FOUND = 0x8055823C,
  SCE_NP_KDC_SERVER_ERROR_SERVICE_IS_END = 0x80558300,
  SCE_NP_KDC_SERVER_ERROR_SERVICE_STOPS_TEMPORARILY = 0x80558301,
  SCE_NP_KDC_SERVER_ERROR_SERVICE_IS_BUSY = 0x80558302,
  SCE_NP_KDC_SERVER_ERROR_SERVICE_IS_UNDER_MAINTENANCE = 0x80558303,
  SCE_NP_KDC_SERVER_ERROR_INVALID_DATA_LENGTH = 0x80558310,
  SCE_NP_KDC_SERVER_ERROR_INVALID_USER_AGENT = 0x80558311,
  SCE_NP_KDC_SERVER_ERROR_UNSUPPORTED_VERSION = 0x80558312,
  SCE_NP_KDC_SERVER_ERROR_ACTTYPE_NOT_YET_AVAILABLE = 0x80558314,
  SCE_NP_KDC_SERVER_ERROR_INVALID_SERVICE_ID = 0x80558320,
  SCE_NP_KDC_SERVER_ERROR_INVALID_USER_CREDENTIAL = 0x80558321,
  SCE_NP_KDC_SERVER_ERROR_INVALID_PRODUCT_ID = 0x80558322,
  SCE_NP_KDC_SERVER_ERROR_INVALID_CONSOLE_ID = 0x80558324,
  SCE_NP_KDC_SERVER_ERROR_CONSOLE_ID_SUSPENDED = 0x80558327,
  SCE_NP_KDC_SERVER_ERROR_BAD_CONSOLE_TOKEN = 0x80558328,
  SCE_NP_KDC_SERVER_ERROR_ACTTYPE_MISMATCH = 0x80558329,
  SCE_NP_KDC_SERVER_ERROR_ACCOUNT_IS_CLOSED = 0x80558330,
  SCE_NP_KDC_SERVER_ERROR_ACCOUNT_IS_SUSPENDED = 0x80558331,
  SCE_NP_KDC_SERVER_ERROR_IAT_VALUE_EXPIRED = 0x80558332,
  SCE_NP_KDC_SERVER_ERROR_IAT_VALUE_OUT_OF_RANGE = 0x80558333,
  SCE_NP_KDC_SERVER_ERROR_RATE_LIMIT_EXCEEDED = 0x80558334,
  SCE_NP_KDC_SERVER_ERROR_LIST_OF_ACCOUNT_IDS_IS_INVALID = 0x80558335,
  SCE_NP_KDC_SERVER_ERROR_DATABASE_EXCEEDS_MAXIMUM = 0x80558336,
  SCE_NP_KDC_SERVER_ERROR_ENTITLEMENT_KEY_IS_MISSING = 0x80558337,
  SCE_NP_KDC_SERVER_ERROR_HMAC_IS_INVALID = 0x80558338,
  SCE_NP_KDC_SERVER_ERROR_HMAC_IS_MISSING = 0x80558339,
  SCE_NP_KDC_SERVER_ERROR_ACTIVATED_CONSOLE_IS_FULL = 0x80558350,
  SCE_NP_KDC_SERVER_ERROR_CONSOLE_NOT_ACTIVATED = 0x80558351,
  SCE_NP_KDC_SERVER_ERROR_PRIMARY_CONSOLE_CANNOT_CHANGED = 0x80558352,
  SCE_NP_KDC_SERVER_ERROR_CONTENT_BOUND_TO_OTHER_CONSOLE = 0x80558353,
  SCE_NP_KDC_SERVER_ERROR_CONTENT_IS_NOT_AVAILABLE = 0x80558355,
  SCE_NP_KDC_SERVER_ERROR_CONTENT_IS_NO_LONGER_ACTIVE = 0x80558356,
  SCE_NP_KDC_SERVER_ERROR_PFT_HAS_BEEN_FULLY_CONSUMED = 0x80558357,
  SCE_NP_KDC_SERVER_ERROR_INVALID_CONSOLE_RAMDOM = 0x80558360,
  SCE_NP_KDC_SERVER_ERROR_CANNOT_DEACTIVATE_CONSOLE_FOR_AUTOMATIC_ACTIVATION = 0x80558361,
  SCE_NP_KDC_SERVER_ERROR_UNKNOWN = 0x80558380,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_UNKNOWN = 0x80559201,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_ALREADY_INITIALIZED = 0x80559202,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NOT_INITIALIZED = 0x80559203,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INVALID_ARGUMENT = 0x80559204,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_OUT_OF_MEMORY = 0x80559205,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INVALID_STATE = 0x80559206,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_UNKNOWN_NPID = 0x80559207,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_ROOM_FULL = 0x80559208,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NO_SUCH_ROOM = 0x80559209,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_MATCHING2_ERROR = 0x8055920A,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_REQUEST_PENDING = 0x8055920B,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_JOIN_GENERAL = 0x8055920C,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_CREATE_JOIN_GENERAL = 0x8055920D,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SERVER_MAINTENANCE = 0x8055920E,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_CONNECTION_TERMINATED = 0x8055920F,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_CONNECTION_TIMED_OUT = 0x80559210,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_CONNECTION_SIGNED_OUT = 0x80559211,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_BANNED = 0x80559212,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_BLOCK_LIST = 0x80559213,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NO_SUCH_USER = 0x80559214,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SEND_BUSY = 0x80559215,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NP_STATE_UNKNOWN = 0x80559216,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NP_STATE_SIGNED_OUT = 0x80559217,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NP_INVALID_USER = 0x80559218,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NO_FRIENDS_IN_A_PARTY = 0x80559219,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_MATCHING2_CONNECTION_LOST = 0x8055921A,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_VULGAR_CHAT_MSG = 0x8055921B,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_VULGAR_LOOKUP = 0x8055921C,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_CREATE_IN_PROGRESS = 0x8055921D,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_JOIN_IN_PROGRESS = 0x8055921E,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_LEAVE_IN_PROGRESS = 0x8055921F,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_BLOCKLIST_IN_PROGRESS = 0x80559220,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_KICK_IN_PROGRESS = 0x80559221,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_IN_A_PARTY = 0x80559222,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NOT_IN_A_PARTY = 0x80559223,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_NO_IP_ADDRESS = 0x80559224,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_BLOCKLIST_RETREIVAL_FAILED = 0x80559225,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INVALID_WEBAPI_STATUS_CODE = 0x80559226,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INVALID_BLOCKLIST_STATUS_CODE = 0x80559227,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INVALID_FRIENDSLIST_STATUS_CODE = 0x80559228,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_M2_CONTEXT_IN_PROGRESS = 0x80559229,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARENTAL_CHECK_CONTROL_IN_PROGRESS = 0x8055922A,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARENTAL_CHECK_CONTROL_FAILED = 0x8055922B,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INVITE_IN_PROGRESS = 0x8055922C,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_ALREADY_ANOTHER_HOST = 0x8055922D,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_CLIENT_BUSY = 0x8055922F,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_CLIENT_NOT_AVAILABLILITY_CHECK_FAILED = 0x80559230,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_CLIENT_COULD_NOT_CONNECT = 0x80559231,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_CLIENT_STOPPED_DUE_TO_HOST_ERROR = 0x80559232,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_HOST_CONNECTION_LOST = 0x80559233,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_HOST_CONNECTION_FAILED = 0x80559234,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_HOST_CONTROLLER_MODE_CHANGE_CLIENT_LEFT = 0x80559235,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_HOST_CONNECTION_TEST_TOO_LOW = 0x80559236,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_HOST_CONNECTION_TEST_LOW = 0x80559237,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INVALID_JOIN_TYPE = 0x80559238,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_FRIEND_SESSION_INFO_NOT_FOUND = 0x80559239,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARTY_MEMBERID_NOT_FOUND = 0x8055923A,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_WEBAPI_CTXID_NOT_FOUND = 0x8055923B,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_WEBAPI_NPID_NOT_FOUND = 0x8055923C,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_WEBAPI_USERID_NOT_FOUND = 0x8055923D,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_BIN_MSG_DATA_LENGTH_MISMATCH = 0x8055923E,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_GAME_CREATE_PARAMS_NOT_SET = 0x8055923F,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARTY_USERID_NOT_FOUND = 0x80559240,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARTY_CTXID_NOT_FOUND = 0x80559241,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_M2_INVALID_ARG = 0x80559242,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARTY_USER_ALREADY_CREATED = 0x80559243,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_ROOM_EXITED_SERVER_ERROR = 0x80559244,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_INVALID_STATE = 0x80559245,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_M2_CONTEXT_START_TIMEOUT = 0x80559246,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_BLOCKLIST_TIMEOUT = 0x80559247,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_LEAVE_TIMEOUT = 0x80559248,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PLAY_TOGETHER_START_FAILED = 0x80559249,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PLAY_TOGETHER_START_BUSY = 0x8055924A,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PLAY_TOGETHER_STOP_FAILED = 0x8055924B,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARTY_MAX_SIZE_CHANGE_FAILED = 0x8055924C,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARTY_MAX_SIZE_CHANGE_IN_PROGRESS = 0x8055924D,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_VITA_ACCOUNT_ID_RETREIVAL_FAILED = 0x8055924E,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_USER_SHUTDOWN_IN_PROGRESS = 0x8055924F,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_SHARE_PLAY_DAEMON_RESTART = 0x80559250,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARTY_CHANGE_STATE_FAILED = 0x80559251,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_PARTY_ALLOW_SUGGEST_FAILED = 0x80559252,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INCOMPATIBLE_PARTY_VERSION = 0x80559253,
  SCE_NP_PARTY_API_FOR_SHELL_ERROR_INCOMPATIBLE_PARTY_VERSION_BY_ROLLBACK = 0x80559254,
  SCE_NP_SNS_ERROR_INTERNAL = 0x80559400,
  SCE_NP_SNS_ERROR_PERMISSION_NOT_ALLOWED = 0x80559401,
  SCE_NP_SNS_ERROR_ACCOUNT_NOT_BOUND = 0x80559402,
  SCE_NP_SNS_ERROR_UNKNOWN_SERVER_ERROR = 0x80559403,
  SCE_NP_SNS_ERROR_ID_NOT_AVAILABLE = 0x80559404,
  SCE_TROPHY_STORAGE_ERROR_UNKNOWN = 0x80559500,
  SCE_TROPHY_STORAGE_ERROR_INVALID_ARGUMENT = 0x80559501,
  SCE_TROPHY_STORAGE_ERROR_OUT_OF_MEMORY = 0x80559502,
  SCE_TROPHY_STORAGE_ERROR_INSUFFICIENT_BUFFER = 0x80559503,
  SCE_TROPHY_STORAGE_ERROR_INVALID_HANDLE = 0x80559504,
  SCE_TROPHY_STORAGE_ERROR_ABORT = 0x80559505,
  SCE_TROPHY_STORAGE_ERROR_NO_RESULT = 0x80559506,
  SCE_TROPHY_STORAGE_ERROR_INVALID_DATA_TYPE = 0x80559507,
  SCE_TROPHY_STORAGE_ERROR_NO_DB_ATTRIBUTE = 0x80559508,
  SCE_TROPHY_STORAGE_ERROR_DB_CORRUPTED = 0x80559509,
  SCE_TROPHY_STORAGE_ERROR_INVALID_DB_SCHEMA = 0x8055950A,
  SCE_TROPHY_STORAGE_ERROR_UNSUPPORTED_DB_SCHEMA = 0x8055950B,
  SCE_TROPHY_STORAGE_ERROR_DB_ALREADY_OPENED = 0x8055950C,
  SCE_TROPHY_STORAGE_ERROR_INVALID_LSDB_CONTEXT = 0x8055950D,
  SCE_TROPHY_STORAGE_ERROR_BUSY = 0x8055950E,
  SCE_TROPHY_STORAGE_ERROR_LSDB_MIGRATION_REQUIRED = 0x8055950F,
  SCE_TROPHY_STORAGE_ERROR_LSDB_TITLE_NOT_FOUND = 0x80559510,
  SCE_TROPHY_STORAGE_ERROR_LSDB_GROUP_NOT_FOUND = 0x80559511,
  SCE_TROPHY_STORAGE_ERROR_LSDB_TROPHY_NOT_FOUND = 0x80559512,
  SCE_TROPHY_STORAGE_ERROR_LSDB_CORRUPTED = 0x80559513,
  SCE_TROPHY_STORAGE_ERROR_LSDB_TITLE_BROKEN = 0x80559514,
  SCE_TROPHY_STORAGE_ERROR_DB_NOT_OPENED = 0x80559515,
  SCE_TROPHY_STORAGE_ERROR_FILE_NOT_FOUND = 0x80559516,
  SCE_TROPHY_STORAGE_ERROR_FILE_ALREADY_OPENED = 0x80559517,
  SCE_TROPHY_STORAGE_ERROR_MEMORY_EXTEND = 0x80559518,
  SCE_TROPHY_STORAGE_ERROR_FILE_NOT_OPENED = 0x80559519,
  SCE_TROPHY_STORAGE_ERROR_TITLE_DATA_BROKEN = 0x8055951A,
  SCE_TROPHY_STORAGE_ERROR_OBJECT_ALREADY_INITIALIZED = 0x8055951B,
  SCE_TROPHY_STORAGE_ERROR_OBJECT_NOT_INITIALIZED = 0x8055951C,
  SCE_TROPHY_STORAGE_ERROR_ALREADY_INITIALIZED = 0x8055951D,
  SCE_TROPHY_STORAGE_ERROR_NOT_INITIALIZED = 0x8055951E,
  SCE_TROPHY_STORAGE_ERROR_BUFFER_OVERFLOW = 0x8055951F,
  SCE_TROPHY_STORAGE_ERROR_BUFFER_UNDERFLOW = 0x80559520,
  SCE_TROPHY_STORAGE_ERROR_QUEUE_FULL = 0x80559521,
  SCE_TROPHY_STORAGE_ERROR_QUEUE_EMPTY = 0x80559522,
  SCE_TROPHY_STORAGE_ERROR_STOPPED = 0x80559523,
  SCE_TROPHY_STORAGE_ERROR_INVALID_NETSYNC_STATE = 0x80559524,
  SCE_TROPHY_STORAGE_ERROR_NETSYNC_NOT_INITIALIZED = 0x80559525,
  SCE_TROPHY_STORAGE_ERROR_NETSYNC_CANNOT_REGISTER_CALLBLACK = 0x80559526,
  SCE_TROPHY_STORAGE_ERROR_NETSYNC_CALLBACK_NOT_FOUND = 0x80559527,
  SCE_TROPHY_STORAGE_ERROR_WORK_ITEM_ALREADY_REGISTERED = 0x80559528,
  SCE_TROPHY_STORAGE_ERROR_WORKER_ALREADY_STARTED = 0x80559529,
  SCE_TROPHY_STORAGE_ERROR_WORKER_NOT_RUNNING = 0x8055952A,
  SCE_TROPHY_STORAGE_ERROR_WORK_ITEM_NOT_FOUND = 0x8055952B,
  SCE_TROPHY_STORAGE_ERROR_CANCEL_FOR_NEW_SYNC = 0x8055952C,
  SCE_TROPHY_STORAGE_ERROR_DB_LANG_NOT_FOUND = 0x8055952D,
  SCE_NP_SIGNALING_INTERNAL_ERROR_INVALID_ARGUMENT = 0x80559601,
  SCE_NP_SIGNALING_INTERNAL_ERROR_DATA_TOO_BIG = 0x80559602,
  SCE_NP_SIGNALING_INTERNAL_ERROR_INVALID_ACTION = 0x80559603,
  SCE_NP_SIGNALING_INTERNAL_ERROR_CONN_NOT_ACTIVATED = 0x80559604,
  SCE_NP_SIGNALING_INTERNAL_ERROR_OUT_OF_MEMORY = 0x80559605,
  SCE_NP_SIGNALING_INTERNAL_ERROR_PARSER_FAILED = 0x80559606,
  SCE_NP_SIGNALING_INTERNAL_ERROR_INVALID_NAMESPACE = 0x80559607,
  SCE_NP_SIGNALING_INTERNAL_ERROR_ALLOCATOR = 0x80559608,
  SCE_NP_SIGNALING_INTERNAL_ERROR_IPC_CONTEXT_NOT_FOUND = 0x80559609,
  SCE_NP_SIGNALING_INTERNAL_ERROR_ALREADY_INITIALIZED = 0x8055960A,
  SCE_NP_SIGNALING_INTERNAL_ERROR_NOT_INITIALIZED = 0x8055960B,
  SCE_NP_SIGNALING_INTERNAL_ERROR_XMPP_IPC_INVALID_MSG_TYPE = 0x8055960C,
  SCE_NP_SIGNALING_INTERNAL_ERROR_XMPP_IPC_INVALID_ID = 0x8055960D,
  SCE_NP_SIGNALING_INTERNAL_ERROR_INVALID_DATA_TYPE = 0x8055960E,
  SCE_NP_SIGNALING_INTERNAL_ERROR_CALLBACK_QUEUE_OVERFLOW = 0x8055960F,
  SCE_NP_SIGNALING_INTERNAL_ERROR_NOT_ALLOWED_TO_USE = 0x80559610,
  SCE_NP_SIGNALING_INTERNAL_ERROR_BARE_UDP_CONN_BUSY = 0x80559611,
  SCE_NP_SIGNALING_SERVER_ERROR_UNKNOWN = 0x80559681,
  SCE_NP_MATCHING2_SIGNALING_INTERNAL_ERROR_CONN_NOT_ACTIVATED = 0x80559901,
  SCE_NP_MATCHING2_SIGNALING_INTERNAL_ERROR_OPERATION_NOT_PERMITTED = 0x80559902,
  SCE_NP_MATCHING2_SIGNALING_INTERNAL_ERROR_INVALID_SOCKET_TYPE = 0x80559903,
  SCE_NP_MATCHING2_SIGNALING_INTERNAL_ERROR_ABORTED = 0x80559904,
  SCE_NP_MANAGER_ERROR_INTERNAL = 0x80559B00,
  SCE_NP_MANAGER_ERROR_BAD_RESPONSE = 0x80559B01,
  SCE_NP_SNS_ERROR_BAD_RESPONSE_BEFORE_450 = 0x80559B01,
  SCE_NP_MANAGER_ERROR_ABORTED = 0x80559B02,
  SCE_NP_SNS_ERROR_ABORTED_BEFORE_450 = 0x80559B02,
  SCE_NP_MANAGER_ERROR_INVALID_TOKEN = 0x80559B03,
  SCE_NP_MANAGER_ERROR_TOO_MANY_OBJECTS = 0x80559B04,
  SCE_NP_MANAGER_ERROR_ACCOUNT_ID_NOT_MATCHED = 0x80559B05,
  SCE_NP_MANAGER_ERROR_ID_NOT_AVAILABLE = 0x80559B06,
  SCE_NP_MANAGER_ERROR_ALREADY_BOUND = 0x80559B07,
  SCE_NP_MANAGER_ERROR_PARSE_URI = 0x80559B09,
  SCE_NP_MANAGER_ERROR_NOT_CACHED = 0x80559B0A,
  SCE_NP_MANAGER_ERROR_CACHE_EXPIRED = 0x80559B0B,
  SCE_NP_MANAGER_ERROR_NP_ENVIRONMENT_NOT_MATCHED = 0x80559B0C,
  SCE_NP_MANAGER_ERROR_AUTH_WEB_API_SERVICE_END = 0x80559B0D,
  SCE_NP_MANAGER_ERROR_AUTH_WEB_API_SERVICE_UNAVAILABLE = 0x80559B0E,
  SCE_NP_MANAGER_ERROR_PROHIBITED_REGION = 0x80559B0F,
  SCE_NP_MANAGER_ERROR_DATA_SIZE_NOT_MATCHED = 0x80559B10,
  SCE_NP_MANAGER_ERROR_DATA_VERSION_NOT_MATCHED = 0x80559B11,
  SCE_NP_MANAGER_ERROR_DATA_DIGEST_NOT_MATCHED = 0x80559B12,
  SCE_NP_MANAGER_ERROR_INVALID_ACCOUNT_ID = 0x80559B13,
  SCE_NP_MANAGER_ERROR_INVALID_ONLINE_ID = 0x80559B14,
  SCE_NP_MANAGER_ERROR_CORRUPTED = 0x80559B15,
  SCE_NP_MANAGER_ERROR_MULTIPLE_USERS_FOUND = 0x80559B16,
  SCE_NP_MANAGER_ERROR_USER_LOGGED_OUT = 0x80559B17,
  SCE_NP_MANAGER_ERROR_USER_ID_NOT_MATCHED = 0x80559B18,
  SCE_NP_MANAGER_ERROR_NP_ENVIRONMENT_UNKNOWN = 0x80559B19,
  SCE_NP_MANAGER_ERROR_OFFLINE_ACCOUNT_NOT_BOUND = 0x80559B1A,
  SCE_NP_MANAGER_ERROR_OFFLINE_ACCOUNT_ALREADY_BOUND = 0x80559B1B,
  SCE_NP_MANAGER_ERROR_ONLINE_ID_NOT_MATCHED = 0x80559B1C,
  SCE_NP_MANAGER_ERROR_ALREADY_INITIALIZED = 0x80559B20,
  SCE_NP_MANAGER_ERROR_NOT_INITIALIZED = 0x80559B21,
  SCE_NP_MANAGER_ERROR_INVALID_ARGUMENT = 0x80559B22,
  SCE_NP_MANAGER_ERROR_OUT_OF_MEMORY = 0x80559B23,
  SCE_NP_MANAGER_ERROR_INSUFFICIENT_BUFFER = 0x80559B24,
  SCE_NP_MANAGER_ERROR_INVALID_ID = 0x80559B25,
  SCE_NP_MANAGER_ERROR_INVALID_REQUEST = 0x80559B26,
  SCE_NP_MANAGER_ERROR_REQUEST_NOT_FOUND = 0x80559B27,
  SCE_NP_MANAGER_ERROR_CLIENT_ID_NOT_FOUND = 0x80559B28,
  SCE_NP_MANAGER_ERROR_USER_NOT_FOUND = 0x80559B29,
  SCE_NP_MANAGER_ERROR_TOO_MANY_USERS = 0x80559B2A,
  SCE_NP_MANAGER_ERROR_DEVICE_CODE_REQUIRED = 0x80559B2B,
  SCE_NP_MANAGER_ERROR_2SV_REQUIRED = 0x80559B2C,
  SCE_NP_MANAGER_ERROR_DEVICE_NAME_NOT_MATCHED = 0x80559B2D,
  SCE_NP_MANAGER_ERROR_NO_RESPONSE = 0x80559B2E,
  SCE_NP_MANAGER_ERROR_PROCESS_NOT_FOUND = 0x80559B30,
  SCE_NP_MANAGER_ERROR_PROCESS_ALREADY_CONNECTED = 0x80559B31,
  SCE_NP_MANAGER_ERROR_TOO_MANY_PROCESS = 0x80559B32,
  SCE_NP_UTIL_ERROR_ALREADY_INITIALIZED = 0x80559C00,
  SCE_NP_UTIL_ERROR_NOT_INITIALIZED = 0x80559C01,
  SCE_NP_UTIL_ERROR_SERVER_ERROR_PARSER_FAILED = 0x80559C02,
  SCE_NP_UTIL_ERROR_SERVER_ERROR_INVALID_HTTP_STATUS_CODE = 0x80559C03,
  SCE_NP_UTIL_ERROR_INTERNAL = 0x80559C04,
  SCE_NP_UTIL_ERROR_NP_DEBUG_SETTING_OFF = 0x80559C05,
  SCE_NP_UTIL_ERROR_INVALID_FORMAT = 0x80559C06,
  SCE_NP_UTIL_ERROR_SIGNATURE_UNVERIFIED = 0x80559C07,
  SCE_NP_UTIL_ERROR_UNEXPECTED_ALGORITHM = 0x80559C08,
  SCE_NP_IPC_ERROR_ALREADY_INITIALIZED = 0x80559D00,
  SCE_NP_IPC_ERROR_NOT_INITIALIZED = 0x80559D01,
  SCE_NP_IPC_ERROR_OUT_OF_MEMORY = 0x80559D02,
  SCE_NP_IPC_ERROR_INTERNAL = 0x80559D03,
  SCE_NP_IPC_ERROR_INVALID_ARGUMENT = 0x80559D04,
  SCE_NP_IPC_ERROR_TOO_MANY_OBJECTS = 0x80559D05,
  SCE_NP_IPC_ERROR_NO_OBJECT = 0x80559D06,
  SCE_NP_IPC_ERROR_ALREADY_CONNECTED = 0x80559D07,
  SCE_NP_IPC_ERROR_NOT_CONNECTED = 0x80559D08,
  SCE_NP_IPC_ERROR_TOO_MANY_REQUEST = 0x80559D09,
  SCE_NP_IPC_ERROR_INVALID_REQUEST_ID = 0x80559D0A,
  SCE_NP_IPC_ERROR_BUSY_REQUEST_ID = 0x80559D0B,
  SCE_NP_IPC_ERROR_ABORTED_REQUEST_ID = 0x80559D0C,
  SCE_NP_IPC_ERROR_NOT_OUTSTANDING = 0x80559D0D,
  SCE_NP_IPC_ERROR_TIMEOUT = 0x80559D0E,
  SCE_NP_IPC_ERROR_TOO_MANY_CLIENT = 0x80559D0F,
  SCE_NP_IPC_ERROR_QUEUE_FULL = 0x80559D10,
  SCE_NP_IPC_ERROR_QUEUE_EMPTY = 0x80559D11,
  SCE_NP_IPC_ERROR_ALREADY_REGISTERED = 0x80559D12,
  SCE_NP_IPC_ERROR_NOT_REGISTERED = 0x80559D13,
  SCE_NP_IPC_ERROR_INVALID_PARAMETER = 0x80559D14,
  SCE_NP_IPC_ERROR_TOO_MANY_SERVICE = 0x80559D15,
  SCE_NP_IPC_ERROR_SERVICE_NOT_FOUND = 0x80559D16,
  SCE_NP_IPC_ERROR_NO_CALLBACK = 0x80559D17,
  SCE_NP_IPC_ERROR_NO_SESSION = 0x80559D18,
  SCE_NP_IPC_ERROR_SERVICE_ALREADY_INITIALIZED = 0x80559D19,
  SCE_NP_IPC_ERROR_SERVICE_NOT_INITIALIZED = 0x80559D1A,
  SCE_NP_IPC_ERROR_EVF_COND = 0x80559D1B,
  SCE_NP_IPC_ERROR_REQUEST_NOT_FINISHED = 0x80559D1C,
  SCE_NP_IPC_ERROR_INTERNAL_INVALID_REQUEST_STATE_BEGIN = 0x80559D1D,
  SCE_NP_IPC_ERROR_INTERNAL_INVALID_REQUEST_STATE_END = 0x80559D1E,
  SCE_NP_IPC_ERROR_INTERNAL_INVALID_REQUEST_STATE_WAIT = 0x80559D1F,
  SCE_NP_IPC_ERROR_INTERNAL_INVALID_REQUEST_CONTEXT_STATE_ABORT = 0x80559D20,
  SCE_NP_IPC_ERROR_INTERNAL_INVALID_REQUEST_CONTEXT_STATE_START = 0x80559D21,
  SCE_NP_IPC_ERROR_INTERNAL_INVALID_REQUEST_CONTEXT_STATE_FINISH = 0x80559D22,
  SCE_NP_IPC_ERROR_INTERNAL_INVALID_REQUEST_ID_ASSIGNED = 0x80559D23,
  SCE_NP_IPC_ERROR_INTERNAL_EVENT_SIZE_NOT_MATCHED = 0x80559D24,
  SCE_NP_IPC_ERROR_INTERNAL_EVENT_CONFIG_SIZE_NOT_MATCHED = 0x80559D25,
  SCE_NP_IPC_ERROR_INTERNAL_EVENT_QUEUE_MSG_SIZE_MAX = 0x80559D26,
  SCE_NP_EXT_ERROR_UNKNOWN = 0x80559E00,
  SCE_NP_EXT_ERROR_ALREADY_INITIALIZED = 0x80559E01,
  SCE_NP_EXT_ERROR_NOT_INITIALIZED = 0x80559E02,
  SCE_NP_EXT_ERROR_OBJECT_ALREADY_INITIALIZED = 0x80559E03,
  SCE_NP_EXT_ERROR_OBJECT_NOT_INITIALIZED = 0x80559E04,
  SCE_NP_EXT_ERROR_WORK_ITEM_ALREADY_REGISTERED = 0x80559E05,
  SCE_NP_EXT_ERROR_WORKER_ALREADY_STARTED = 0x80559E06,
  SCE_NP_EXT_ERROR_WORKER_NOT_RUNNING = 0x80559E07,
  SCE_NP_EXT_ERROR_WORK_ITEM_NOT_FOUND = 0x80559E08,
  SCE_NP_EXT_ERROR_OUT_OF_MEMORY = 0x80559E09,
  SCE_NP_EXT_ERROR_BUFFER_OVERFLOW = 0x80559E0A,
  SCE_NP_EXT_ERROR_BUFFER_UNDERFLOW = 0x80559E0B,
  SCE_NP_EXT_ERROR_JSON_PARSE_FAILED = 0x80559E0C,
  SCE_NP_EXT_ERROR_INSUFFICIENT_BUFFER = 0x80559E0D,
  SCE_NP_EXT_ERROR_JSON_ITEM_NOT_FOUND = 0x80559E0E,
  SCE_NP_EXT_ERROR_INVALID_HANDLE = 0x80559E0F,
  SCE_NP_EXT_ERROR_UNEXPECTED_EOF = 0x80559E10,
  SCE_NP_EXT_ERROR_INVALID_ARGUMENT = 0x80559E11,
  SCE_NP_EXT_ERROR_TOO_MANY_HTTP_CONNECTION = 0x80559E12,
  SCE_NP_EXT_ERROR_HTTP_CONNECTION_NOT_FOUND = 0x80559E13,
  SCE_NP_EXT_ERROR_ABORTED = 0x80559E14,
  SCE_NP_EXT_ERROR_QUEUE_FULL = 0x80559E15,
  SCE_NP_EXT_ERROR_QUEUE_EMPTY = 0x80559E16,
  SCE_NP_EXT_ERROR_FILE_NOT_OPENED = 0x80559E17,
  SCE_NP_EXT_ERROR_FILE_ALREADY_OPENED = 0x80559E18,
  SCE_NP_EXT_ERROR_FILE_NOT_FOUND = 0x80559E19,
  SCE_NP_EXT_ERROR_MEMORY_EXTEND = 0x80559E1A,
  SCE_NP_EXT_ERROR_STREAM_NOT_OPENED = 0x80559E1B,
  SCE_NP_EXT_ERROR_STREAM_ALREADY_OPENED = 0x80559E1C,
  SCE_NP_EXT_ERROR_HTTP_FILE_NOT_OPENED = 0x80559E1D,
  SCE_NP_EXT_ERROR_HTTP_FILE_ALREADY_OPENED = 0x80559E1E,
  SCE_NP_EXT_ERROR_HTTP_FILE_NOT_FOUND = 0x80559E1F,
  SCE_NP_EXT_ERROR_DECRYPT_STREAM = 0x80559E20,
  SCE_NP_EXT_ERROR_INVALID_NPBIND_DAT = 0x80559E21,
  SCE_NP_EXT_ERROR_UNSUPPORTED_NPBIND_DAT = 0x80559E22,
  SCE_NP_EXT_ERROR_INVALID_NPTITLE_DAT = 0x80559E23,
  SCE_NP_EXT_ERROR_UNSUPPORTED_NPTITLE_DAT = 0x80559E24,
  SCE_NP_EXT_ERROR_NP_BIND_DAT_FILE_NOT_FOUND = 0x80559E25,
  SCE_NP_EXT_ERROR_NP_TITLE_DAT_FILE_NOT_FOUND = 0x80559E26,
  SCE_NP_EXT_ERROR_DIR_NOT_FOUND = 0x80559E27,
  SCE_NP_EXT_ERROR_NP_BIND_INFO_NOT_FOUND = 0x80559E28,
  SCE_NP_EXT_ERROR_INSUFFICIENT_DISK_SPACE = 0x80559E29,
  SCE_NP_EXT_ERROR_USER_NOT_FOUND = 0x80559E2A,
  SCE_NP_EXT_ERROR_USER_ACCOUNT_NOT_BOUND = 0x80559E2B,
  SCE_NP_EXT_ERROR_UNKNOWN_BOOT_TYPE = 0x80559E2C,
  SCE_NP_EXT_ERROR_INVALID_RESPONSE = 0x80559E2D,
  SCE_NP_EXT_ERROR_SERVICE_BASE_URL_NOT_FOUND = 0x80559E2E,
  SCE_NP_EXT_ERROR_NO_IMPL = 0x80559E2F,
  SCE_NP_EXT_ERROR_PATH_TOO_LONG = 0x80559E30,
  SCE_NP_EXT_ERROR_FILE_NAME_TOO_LONG = 0x80559E31,
  SCE_NP_EXT_ERROR_SELECTOR_ITEM_ALREADY_REGISTERED = 0x80559E32,
  SCE_NP_EXT_ERROR_SELECTOR_ITEM_NOT_REGISTERED = 0x80559E33,
  SCE_NP_EXT_ERROR_REGISTERED_SELECTOR_ITEM = 0x80559E34,
  SCE_NP_EXT_ERROR_SELECTOR_TIMEOUT = 0x80559E35,
  SCE_NP_WEB_SOCKET_ERROR_INTERNAL = 0x80559F00,
  SCE_NP_WEB_SOCKET_ERROR_ALREADY_INITIALIZED = 0x80559F01,
  SCE_NP_WEB_SOCKET_ERROR_NOT_INITIALIZED = 0x80559F02,
  SCE_NP_WEB_SOCKET_ERROR_INVALID_ARGUMENT = 0x80559F03,
  SCE_NP_WEB_SOCKET_ERROR_OUT_OF_MEMORY = 0x80559F04,
  SCE_NP_WEB_SOCKET_ERROR_INVALID_OPERATION = 0x80559F05,
  SCE_NP_WEB_SOCKET_ERROR_ABORTED = 0x80559F06,
  SCE_NP_WEB_SOCKET_ERROR_HTTP_STATUS_CODE_INVALID = 0x80559F07,
  SCE_NP_WEB_SOCKET_ERROR_HANDSHAKE_FAILED = 0x80559F08,
  SCE_NP_WEB_SOCKET_ERROR_BAD_RESPONSE = 0x80559F09,
  SCE_NP_WEB_SOCKET_ERROR_DISCONNECTED = 0x80559F0A,
  SCE_NP_WEB_SOCKET_ERROR_TIMEOUT = 0x80559F0B,
  SCE_NP_WEB_SOCKET_ERROR_REQ_HEADER_OVER_MAX = 0x80559F0C,
  SCE_NP_WEB_SOCKET_ERROR_NO_SUCH_REQ_HEADER = 0x80559F0D,
  SCE_NP_WEB_SOCKET_ERROR_RESPONSE_NOT_AVAILABLE = 0x80559F0E,
  SCE_NP_WEB_SOCKET_ERROR_EAGAIN = 0x80559F0F,
  SCE_NP_WEB_SOCKET_ERROR_PINGPONG_TIMEOUT = 0x80559F10,
  SCE_NP_PUSH_ERROR_INTERNAL = 0x8055A000,
  SCE_NP_PUSH_ERROR_ALREADY_INITIALIZED = 0x8055A001,
  SCE_NP_PUSH_ERROR_NOT_INITIALIZED = 0x8055A002,
  SCE_NP_PUSH_ERROR_INVALID_ARGUMENT = 0x8055A003,
  SCE_NP_PUSH_ERROR_OUT_OF_MEMORY = 0x8055A004,
  SCE_NP_PUSH_ERROR_INVALID_RESPONSE = 0x8055A005,
  SCE_NP_PUSH_ERROR_PARSE_PACKET = 0x8055A006,
  SCE_NP_PUSH_ERROR_FIELD_NOT_FOUND = 0x8055A007,
  SCE_NP_PUSH_ERROR_ALREADY_STARTED = 0x8055A008,
  SCE_NP_PUSH_ERROR_NOT_STARTED = 0x8055A009,
  SCE_NP_PUSH_ERROR_SESSION_NOT_FOUND = 0x8055A00A,
  SCE_NP_PUSH_ERROR_INVALID_CTL_STATE = 0x8055A00B,
  SCE_NP_PUSH_ERROR_INVALID_SESSION_STATE = 0x8055A00C,
  SCE_NP_PUSH_ERROR_TOO_MANY_USERS = 0x8055A00D,
  SCE_NP_PUSH_ERROR_SERVER_ERROR = 0x8055A00E,
  SCE_NP_PUSH_ERROR_NO_SIGNEDIN_USER = 0x8055A00F,
  SCE_NP_PUSH_ERROR_ABORTED = 0x8055A010,
  SCE_NP_PUSH_ERROR_DISCONNECTED = 0x8055A011,
  SCE_NP_PUSH_ERROR_REQUEST_TIMEOUT = 0x8055A012,
  SCE_NP_PUSH_ERROR_USER_NOT_FOUND = 0x8055A013,
  SCE_NP_PUSH_ERROR_USER_NOT_ONLINE = 0x8055A014,
  SCE_NP_PUSH_ERROR_STOPPED = 0x8055A015,
  SCE_NP_PUSH_ERROR_IPC_PROCESS_CONTEXT_NOT_FOUND = 0x8055A016,
  SCE_NP_PUSH_ERROR_IPC_USER_CONTEXT_NOT_FOUND = 0x8055A017,
  SCE_NP_PUSH_ERROR_NO_PACKET = 0x8055A018,
  SCE_NP_PUSH_ERROR_IPC_QUEUE_FULL = 0x8055A019,
  SCE_NP_PUSH_ERROR_SESSION_NOT_ESTABLISHED = 0x8055A01A,
  SCE_NP_PUSH_ERROR_INVALID_TRAN_ID = 0x8055A01B,
  SCE_NP_PUSH_ERROR_PARSE_RETURN_CODE = 0x8055A01C,
  SCE_NP_PUSH_ERROR_PARSE_ERROR_SOURCE = 0x8055A01D,
  SCE_NP_PUSH_ERROR_PARSE_QUERY_TYPE = 0x8055A01E,
  SCE_NP_PUSH_ERROR_QUERY_RESPONSE_CLIENT_ERROR = 0x8055A01F,
  SCE_NP_PUSH_ERROR_QUERY_RESPONSE_INVALID_ERROR_SOURCE = 0x8055A020,
  SCE_NP_PUSH_ERROR_QUERY_RESPONSE_INVALID_QUERY_TYPE = 0x8055A021,
  SCE_NP_PUSH_ERROR_INVALID_LOGIN_TIME = 0x8055A022,
  SCE_NP_PUSH_ERROR_USER_REQUEST_TIMEOUT = 0x8055A023,
  SCE_NP_PUSH_ERROR_USER_REQUEST_ABORTED = 0x8055A024,
  SCE_NP_PUSH_ERROR_SERVICE_BASE_URL_NOT_FOUND = 0x8055A025,
  SCE_NP_PUSH_ERROR_TOO_LONG_DATATYPE = 0x8055A026,
  SCE_NP_PUSH_ERROR_CALLBACK_ALREADY_REGISTERED = 0x8055A027,
  SCE_NP_PUSH_ERROR_PARSE_RETRY_INTERVAL = 0x8055A028,
  SCE_NP_PUSH_ERROR_DISCONNECTED_INVALID_MSG = 0x8055A029,
  SCE_NP_PUSH_ERROR_NETWORK_NOT_AVAILABLE = 0x8055A02A,
  SCE_NP_PUSH_ERROR_NOT_SIGNED_IN = 0x8055A02B,
  SCE_NP_PUSH_ERROR_UNKNOWN_BIND_USER_STATUS = 0x8055A02C,
  SCE_NP_PUSH_ERROR_TOO_LONG_EXTENDED_DATA_NAME = 0x8055A02D,
  SCE_NP_PUSH_ERROR_PARSE_IPC_TLV = 0x8055A02E,
  SCE_NP_PUSH_ERROR_BUILD_IPC_TLV = 0x8055A02F,
  SCE_NP_PUSH_ERROR_TOO_MANY_EXTENDED_DATA = 0x8055A030,
  SCE_NP_PUSH_ERROR_TOO_MANY_DATA = 0x8055A031,
  SCE_NP_PUSH_ERROR_INSUFFICIENT_BUFFER = 0x8055A032,
  SCE_NP_PUSH_ERROR_TOO_MANY_EXTENDED_DATA_NAME_ENTRY = 0x8055A033,
  SCE_NP_PUSH_ERROR_EXTENDED_DATA_NAME_ENTRY_NOT_FOUND = 0x8055A034,
  SCE_NP_PUSH_ERROR_EXTENDED_DATA_NAME_ENTRY_ALREADY_REGISTERED = 0x8055A035,
  SCE_NP_PUSH_ERROR_DATA_TYPE_ENTRY_NOT_FOUND = 0x8055A036,
  SCE_NP_PUSH_ERROR_DATA_TYPE_ENTRY_ALREADY_REGISTERED = 0x8055A037,
  SCE_NP_PUSH_ERROR_DISCONNECTED_ERROR_UNKNOWN = 0x8055A038,
  SCE_NP_PUSH_ERROR_CONNECT_TIMEOUT = 0x8055A039,
  SCE_NP_PUSH_ERROR_POST_CMD_SESSION_DISCONNECTED = 0x8055A03A,
  SCE_NP_PUSH_ERROR_POST_CMD_INVALID_SESSION_STATE = 0x8055A03B,
  SCE_NP_PUSH_ERROR_DISCONNECTED_CLOSED = 0x8055A03C,
  SCE_NP_PUSH_ERROR_DISCONNECTED_CLOSED_KEEPALIVE_TIMEOUT = 0x8055A03D,
  SCE_NP_PUSH_ERROR_DISCONNECTED_CLOSED_BIND_TIMEOUT = 0x8055A03E,
  SCE_NP_PUSH_ERROR_INACTIVATE_REQUEST_NOT_FOUND = 0x8055A03F,
  SCE_NP_PUSH_ERROR_INACTIVATED = 0x8055A040,
  SCE_NP_PUSH_ERROR_DISCONNECTED_NO_USER = 0x8055A041,
  SCE_NP_PUSH_ERROR_UNKNOWN_REQUEST_STATUS = 0x8055A042,
  SCE_NP_PUSH_ERROR_DISCONNECTED_CLOSED_TOO_MANY_CONNECTIONS = 0x8055A043,
  SCE_NP_PUSH_ERROR_DISCONNECTED_CLOSED_MAINTENANCE_PACKET = 0x8055A044,
  SCE_NP_ASM_ERROR_ALREADY_INITIALIZED = 0x8055A201,
  SCE_NP_ASM_ERROR_NOT_INITIALIZED = 0x8055A202,
  SCE_NP_ASM_ERROR_INVALID_ARGUMENT = 0x8055A203,
  SCE_NP_ASM_ERROR_OUT_OF_MEMORY = 0x8055A204,
  SCE_NP_ASM_ERROR_PARSE_FAILURE = 0x8055A205,
  SCE_NP_ASM_ERROR_REQUEST_NOT_FOUND = 0x8055A206,
  SCE_NP_ASM_ERROR_ABORTED = 0x8055A207,
  SCE_NP_ASM_ERROR_INTERNAL = 0x8055A208,
  SCE_NP_ASM_CLIENT_ERROR_ALREADY_INITIALIZED = 0x8055A281,
  SCE_NP_ASM_CLIENT_ERROR_NOT_INITIALIZED = 0x8055A282,
  SCE_NP_ASM_CLIENT_ERROR_INVALID_ARGUMENT = 0x8055A283,
  SCE_NP_ASM_CLIENT_ERROR_CANNOT_CREATE_ASM_CLIENT = 0x8055A284,
  SCE_NP_ASM_CLIENT_ERROR_OUT_OF_MEMORY = 0x8055A285,
  SCE_NP_ASM_CLIENT_ERROR_REQUEST_NOT_FOUND = 0x8055A286,
  SCE_NP_ASM_CLIENT_ERROR_ABORTED = 0x8055A287,
  SCE_NP_ASM_CLIENT_ERROR_SERVICE_ID_INFO_RESULT_TOO_BIG = 0x8055A288,
  SCE_NP_ASM_CLIENT_ERROR_NP_SERVICE_LAVEL_NOT_MATCH = 0x8055A289,
  SCE_NP_ASM_CLIENT_ERROR_NP_TITLE_ID_NOT_SET = 0x8055A28A,
  SCE_NP_ASM_CLIENT_ERROR_INTERNAL_ERROR = 0x8055A28B,
  SCE_NP_ASM_CLIENT_ERROR_FILE_NOT_FOUND = 0x8055A28C,
  SCE_NP_ASM_CLIENT_ERROR_INVALID_NPTITLE_DAT = 0x8055A28D,
  SCE_NP_ASM_CLIENT_ERROR_APP_NOT_LAUNCHED = 0x8055A28E,
  SCE_NP_ASM_CLIENT_ERROR_RESULT_EMPTY = 0x8055A28F,
  SCE_NP_ASM_CLIENT_ERROR_RESOURCE_CONTEXT_NOT_FOUND = 0x8055A290,
  SCE_NP_ASM_CLIENT_ERROR_RESOURCE_CONTEXT_BUSY = 0x8055A291,
  SCE_NP_ASM_CLIENT_ERROR_INVALID_NP_TITLE_ID = 0x8055A292,
  SCE_NP_ASM_CLIENT_ERROR_PROHIBITED_TO_USE = 0x8055A293,
  SCE_NP_ASM_SERVER_ERROR_UNKNOWN = 0x8055A301,
  SCE_NP_ASM_SERVER_ERROR_INVALID_SERVICE_NAME = 0x8055A302,
  SCE_NP_ASM_SERVER_ERROR_INVALID_API_GROUP = 0x8055A303,
  SCE_NP_ASM_SERVER_ERROR_INVALID_NP_TITLE_ID = 0x8055A304,
  SCE_NP_ASM_SERVER_ERROR_NOT_AUTHORIZED_NP_TITLE_ID_TO_USE_SERVICE_NAME = 0x8055A305,
  SCE_NP_ASM_SERVER_ERROR_NOT_AUTHORIZED_NP_TITLE_ID_TO_USE_API_GROUP = 0x8055A306,
  SCE_NP_ASM_SERVER_ERROR_INVALID_REQUEST_TIMESTAMP = 0x8055A307,
  SCE_NP_ASM_SERVER_ERROR_INVALID_SIGNATURE = 0x8055A308,
  SCE_NP_ASM_SERVER_ERROR_NP_TITLE_ID_DIFFERED_FROM_NP_TITLE_TOKENS = 0x8055A309,
  SCE_NP_ASM_SERVER_ERROR_NULL_VALUE_NOT_ALLOWED = 0x8055A380,
  SCE_NP_ASM_SERVER_ERROR_INVALID_REQUEST_BODY = 0x8055A381,
  SCE_NP_ASM_SERVER_ERROR_INVALID_REQUEST_QUERY_STRING = 0x8055A382,
  SCE_NP_ASM_SERVER_ERROR_INVALID_NP_ENVIRONMENT = 0x8055A383,
  SCE_NP_ASM_SERVER_ERROR_TOO_LARGE_BODY = 0x8055A384,
  SCE_NP_ASM_SERVER_ERROR_UNSUPPORTED_API_VERSION = 0x8055A385,
  SCE_NP_ASM_SERVER_ERROR_BAD_REQUEST = 0x8055A386,
  SCE_NP_ASM_SERVER_ERROR_NP_TITLE_TOKEN_REQUIRED = 0x8055A387,
  SCE_NP_ASM_SERVER_ERROR_INVALID_NP_TITLE_TOKEN = 0x8055A388,
  SCE_NP_ASM_SERVER_ERROR_EXPIRED_NP_TITLE_TOKEN = 0x8055A389,
  SCE_NP_ASM_SERVER_ERROR_ACCESS_TOKEN_REQUIRED = 0x8055A38A,
  SCE_NP_ASM_SERVER_ERROR_INVALID_ACCESS_TOKEN = 0x8055A38B,
  SCE_NP_ASM_SERVER_ERROR_EXPIRED_ACCESS_TOKEN = 0x8055A38C,
  SCE_NP_ASM_SERVER_ERROR_NP_CONSOLE_TOKEN_REQUIRED = 0x8055A38D,
  SCE_NP_ASM_SERVER_ERROR_INVALID_NP_CONSOLE_TOKEN = 0x8055A38E,
  SCE_NP_ASM_SERVER_ERROR_EXPIRED_NP_CONSOLE_TOKEN = 0x8055A38F,
  SCE_NP_ASM_SERVER_ERROR_BANNED_NP_CONSOLE_TOKEN = 0x8055A390,
  SCE_NP_ASM_SERVER_ERROR_NOT_AUTHORIZED = 0x8055A391,
  SCE_NP_ASM_SERVER_ERROR_RATE_LIMIT_EXCEEDED = 0x8055A392,
  SCE_NP_ASM_SERVER_ERROR_INTERNAL_SERVER_ERROR = 0x8055A393,
  SCE_NP_ASM_SERVER_ERROR_SERVER_BUSY = 0x8055A394,
  SCE_NP_ASM_SERVER_ERROR_UNDER_MAINTENANCE = 0x8055A395,
  SCE_NP_ASM_SERVER_ERROR_SERVICE_CLOSED = 0x8055A396,
  SCE_NP_ASM_SERVER_ERROR_UNEXPECTED_ERROR = 0x8055A397,
  SCE_NP_WEBAPI_INTERNAL_ERROR_PARSER_FAILED = 0x8055A401,
  SCE_NP_WEBAPI_INTERNAL_ERROR_NO_PERMISSION_FOR_CALL_FUNC = 0x8055A402,
  SCE_NP_WEBAPI_INTERNAL_ERROR_INVALID_LANG_ID = 0x8055A403,
  SCE_NP_TICKET_PARSER_ERROR_UNSUPPORTED_TICKET_VERSION = 0x8055A501,
  SCE_NP_TICKET_PARSER_ERROR_PARAM_NOT_FOUND = 0x8055A502,
  SCE_NP_TICKET_PARSER_ERROR_ENTITLEMENT_NOT_FOUND = 0x8055A503,
  SCE_NP_PRESENCE_ERROR_OUT_OF_MEMORY = 0x8055A601,
  SCE_NP_PRESENCE_ERROR_INVALID_ARGUMENT = 0x8055A602,
  SCE_NP_PRESENCE_ERROR_ALREADY_INITIALIZED = 0x8055A603,
  SCE_NP_PRESENCE_ERROR_NOT_INITIALIZED = 0x8055A604,
  SCE_NP_PRESENCE_ERROR_IPC_CONTEXT_NOT_FOUND = 0x8055A605,
  SCE_NP_PRESENCE_ERROR_CALLBACK_QUEUE_OVERFLOW = 0x8055A606,
  SCE_NP_PRESENCE_ERROR_REQUEST_NOT_FOUND = 0x8055A607,
  SCE_NP_PRESENCE_ERROR_ABORTED = 0x8055A608,
  SCE_NP_PRESENCE_ERROR_INTERNAL = 0x8055A609,
  SCE_NP_PRESENCE_ERROR_CALLBACK_NOT_FOUND = 0x8055A60A,
  SCE_NP_IN_GAME_MESSAGE_SERVICE_ERROR_OUT_OF_MEMORY = 0x8055A701,
  SCE_NP_IN_GAME_MESSAGE_SERVICE_ERROR_INVALID_ARGUMENT = 0x8055A702,
  SCE_NP_IN_GAME_MESSAGE_SERVICE_ERROR_ALREADY_INITIALIZED = 0x8055A703,
  SCE_NP_IN_GAME_MESSAGE_SERVICE_ERROR_NOT_INITIALIZED = 0x8055A704,
  SCE_NP_IN_GAME_MESSAGE_SERVICE_ERROR_IPC_CONTEXT_NOT_FOUND = 0x8055A705,
  SCE_NP_IN_GAME_MESSAGE_SERVICE_ERROR_CALLBACK_QUEUE_OVERFLOW = 0x8055A706,
  SCE_NP_IN_GAME_MESSAGE_ERROR_USER_SLOT_FULL = 0x8055A707,
  SCE_NP_PLUS_LOGGER_ERROR_NOT_INITIALIZED = 0x8055A901,
  SCE_NP_PLUS_LOGGER_ERROR_ALREADY_INITIALIZED = 0x8055A902,
  SCE_NP_PLUS_LOGGER_ERROR_ABORTED = 0x8055A903,
  SCE_NP_PLUS_LOGGER_ERROR_INTERNAL = 0x8055A904,
  SCE_NP_PLUS_LOGGER_ERROR_INVALID_ARGUMENT = 0x8055A905,
  SCE_NP_PLUS_LOGGER_ERROR_OUT_OF_MEMORY = 0x8055A906,
  SCE_NP_PLUS_LOGGER_ERROR_BAD_RESPONSE = 0x8055A907,
  SCE_NP_PLUS_LOGGER_ERROR_ALREADY_REGISTRED = 0x8055A908,
  SCE_NP_PLUS_LOGGER_ERROR_NO_SUCH_REQUEST = 0x8055A909,
  SCE_NP_PLUS_LOGGER_ERROR_NO_SUCH_USER = 0x8055A90A,
  SCE_NP_PLUS_LOGGER_ERROR_TOO_MANY_USERS = 0x8055A90B,
  SCE_NP_PLUS_LOGGER_ERROR_NO_SUCH_APPLICATION = 0x8055A90C,
  SCE_NP_PLUS_LOGGER_ERROR_TOO_MANY_APPLICATIONS = 0x8055A90D,
  SCE_NP_TITLE_METADATA_ERROR_NOT_INITIALIZED = 0x8055AA01,
  SCE_NP_TITLE_METADATA_ERROR_ALREADY_INITIALIZED = 0x8055AA02,
  SCE_NP_TITLE_METADATA_ERROR_INVALID_ARGUMENT = 0x8055AA03,
  SCE_NP_TITLE_METADATA_ERROR_INVALID_SIZE = 0x8055AA04,
  SCE_NP_TITLE_METADATA_ERROR_OUT_OF_MEMORY = 0x8055AA05,
  SCE_NP_TITLE_METADATA_ERROR_INTERNAL = 0x8055AA06,
  SCE_NP_TITLE_METADATA_ERROR_BUSY = 0x8055AA07,
  SCE_NP_TITLE_METADATA_ERROR_ABORTED = 0x8055AA08,
  SCE_NP_TITLE_METADATA_ERROR_NO_SUCH_REQUEST = 0x8055AA09,
  SCE_NP_TITLE_METADATA_ERROR_BAD_RESPONSE = 0x8055AA0A,
  SCE_NP_TITLE_METADATA_ERROR_PARSER_FAILED = 0x8055AA0B,
  SCE_NP_TITLE_METADATA_ERROR_NOT_FOUND = 0x8055AA0C,
  SCE_NP_COMMERCE_DIALOG_ERROR_NOT_GAME_PROCESS = 0x8055AB01,
  SCE_NP_COMMERCE_DIALOG_ERROR_OUT_OF_MEMORY = 0x8055AB02,
  SCE_NP_GRIEF_REPORT_ERROR_ALREADY_INITIALIZED = 0x8055AC01,
  SCE_NP_GRIEF_REPORT_ERROR_NOT_INITIALIZED = 0x8055AC02,
  SCE_NP_GRIEF_REPORT_ERROR_OUT_OF_MEMORY = 0x8055AC03,
  SCE_NP_GRIEF_REPORT_ERROR_INVALID_ARGUMENT = 0x8055AC04,
  SCE_NP_GRIEF_REPORT_ERROR_INVALID_SIZE = 0x8055AC05,
  SCE_NP_GRIEF_REPORT_ERROR_TOO_MANY_OBJECTS = 0x8055AC06,
  SCE_NP_GRIEF_REPORT_ERROR_ABORTED = 0x8055AC07,
  SCE_NP_GRIEF_REPORT_ERROR_BODY_TOO_LARGE = 0x8055AC08,
  SCE_NP_GRIEF_REPORT_ERROR_HTTP_SERVER = 0x8055AC09,
  SCE_NP_GRIEF_REPORT_ERROR_INVALID_SIGNATURE = 0x8055AC0A,
  SCE_NP_GRIEF_REPORT_ERROR_INSUFFICIENT_ARGUMENT = 0x8055AC0B,
  SCE_NP_GRIEF_REPORT_ERROR_INVALID_ID = 0x8055AC0C,
  SCE_NP_GRIEF_REPORT_ERROR_TRANSACTION_ALREADY_END = 0x8055AC0D,
  SCE_NP_GRIEF_REPORT_ERROR_INVALID_PARTITION = 0x8055AC0E,
  SCE_NP_GRIEF_REPORT_ERROR_INVALID_ALIGNMENT = 0x8055AC0F,
  SCE_NP_GRIEF_REPORT_ERROR_CLIENT_HANDLE_ALREADY_EXISTS = 0x8055AC10,
  SCE_NP_GRIEF_REPORT_ERROR_NO_RESOURCE = 0x8055AC11,
  SCE_NP_GRIEF_REPORT_ERROR_REQUEST_BEFORE_END = 0x8055AC12,
  SCE_NP_GRIEF_REPORT_ERROR_TOO_MANY_SLOTID = 0x8055AC13,
  SCE_NP_GRIEF_REPORT_ERROR_TOO_MANY_NPID = 0x8055AC14,
  SCE_NP_GRIEF_REPORT_ERROR_UNKNOWN_TYPE = 0x8055AC15,
  SCE_NP_GRIEF_REPORT_ERROR_BAD_RESPONSE = 0x8055AC16,
  SCE_NP_GRIEF_REPORT_ERROR_UNSUPPORTED_NP_ENV = 0x8055AC17,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_UNKNOWN = 0x8055AC18,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_GENERIC = 0x8055AC19,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_MISSING_FIELD = 0x8055AC1A,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_INVALID_VALUE = 0x8055AC1B,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_INVALID_AUTH_TOKEN = 0x8055AC1C,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_ITEM_NOT_FOUND = 0x8055AC1D,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_API_DISABLED = 0x8055AC1E,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_TOKEN_NOT_FOUND = 0x8055AC1F,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_TOKEN_INVALID = 0x8055AC20,
  SCE_NP_GRIEF_REPORT_ERROR_SERVER_SCOPE_INVALID = 0x8055AC21,
  SCE_NP_SERVICE_CHECKER_ERROR_ALREADY_INITIALIZED = 0x8055AD01,
  SCE_NP_SERVICE_CHECKER_ERROR_NOT_INITIALIZED = 0x8055AD02,
  SCE_NP_SERVICE_CHECKER_ERROR_NO_MEMORY = 0x8055AD03,
  SCE_NP_SERVICE_CHECKER_ERROR_ABORTED = 0x8055AD04,
  SCE_NP_SERVICE_CHECKER_ERROR_TOO_MANY_REQUEST = 0x8055AD05,
  SCE_NP_SERVICE_CHECKER_ERROR_INVALID_REQUEST_ID = 0x8055AD06,
  SCE_NP_SERVICE_CHECKER_ERROR_CONFLICT = 0x8055AD07,
  SCE_NP_SERVICE_CHECKER_ERROR_HTTP_SERVER = 0x8055AD08,
  SCE_NP_SERVICE_CHECKER_ERROR_FILE_MALFORMED = 0x8055AD09,
  SCE_NP_SERVICE_CHECKER_ERROR_FILE_UNSUPPORTED = 0x8055AD0A,
  SCE_NP_SERVICE_CHECKER_ERROR_INVALID_ARGUMENT = 0x8055AD0B,
  SCE_NP_APP_LAUNCH_LINK_ERROR_ALREADY_INITIALIZED = 0x8055AE01,
  SCE_NP_APP_LAUNCH_LINK_ERROR_NOT_INITIALIZED = 0x8055AE02,
  SCE_NP_APP_LAUNCH_LINK_ERROR_NO_MEMORY = 0x8055AE03,
  SCE_NP_APP_LAUNCH_LINK_ERROR_ABORTED = 0x8055AE04,
  SCE_NP_APP_LAUNCH_LINK_ERROR_TOO_MANY_REQUEST = 0x8055AE05,
  SCE_NP_APP_LAUNCH_LINK_ERROR_INVALID_REQUEST_ID = 0x8055AE06,
  SCE_NP_APP_LAUNCH_LINK_ERROR_CONFLICT = 0x8055AE07,
  SCE_NP_APP_LAUNCH_LINK_ERROR_HTTP_SERVER = 0x8055AE08,
  SCE_NP_APP_LAUNCH_LINK_ERROR_FILE_MALFORMED = 0x8055AE09,
  SCE_NP_APP_LAUNCH_LINK_ERROR_FILE_UNSUPPORTED = 0x8055AE0A,
  SCE_NP_APP_LAUNCH_LINK_ERROR_PROHIBITED_SYSTEM_VERSION = 0x8055AE0B,
  SCE_NP_APP_LAUNCH_LINK_ERROR_INVALID_ARGUMENT = 0x8055AE0C,
  SCE_NP_APP_LAUNCH_LINK_ERROR_PROHIBITED_TITLE = 0x8055AE0D,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_UNKNOWN = 0x8055AF01,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_ALREADY_INITIALIZED = 0x8055AF02,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_NOT_INITIALIZED = 0x8055AF03,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_INVALID_ARGUMENT = 0x8055AF04,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_OUT_OF_MEMORY = 0x8055AF05,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_INVALID_STATE = 0x8055AF06,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_ABORTED = 0x8055AF07,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_SERVER_RESPONSE = 0x8055AF08,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_STATE_RESULT_UNABLE_TO_JOIN = 0x8055AF09,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_STATE_RESULT_NETWORK_DISCONNECTION = 0x8055AF0A,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_STATE_RESULT_NETWORK_TOO_SLOW = 0x8055AF0B,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_STATE_RESULT_CANCELLED_BY_USER = 0x8055AF0C,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_STATE_RESULT_DAEMON_CRASHED = 0x8055AF0D,
  SCE_NP_PARTY_SHAREPLAY_CLIENT_ERROR_TITLE_CHECK_FAILED = 0x8055AF0F,
  SCE_NP_AUTH_CORE_ERROR_INVALID_ARGUMENT = 0x8055B001,
  SCE_NP_AUTH_CORE_ERROR_INVALID_SIZE = 0x8055B002,
  SCE_NP_AUTH_CORE_ERROR_OUT_OF_MEMORY = 0x8055B003,
  SCE_NP_AUTH_CORE_ERROR_INSUFFICIENT_BUFFER = 0x8055B004,
  SCE_NP_AUTH_CORE_ERROR_INTERNAL = 0x8055B005,
  SCE_NP_AUTH_CORE_ERROR_BUSY = 0x8055B006,
  SCE_NP_AUTH_CORE_ERROR_ABORTED = 0x8055B007,
  SCE_NP_AUTH_CORE_ERROR_TOO_MANY_HTTP_CONNECTION = 0x8055B008,
  SCE_NP_AUTH_CORE_ERROR_BAD_RESPONSE = 0x8055B009,
  SCE_NP_AUTH_CORE_ERROR_UNSUPPORTED_NP_ENVIRONMENT = 0x8055B010,
  SCE_NP_AUTH_CORE_ERROR_INVALID_RESPONSE_HEADER = 0x8055B011,
  SCE_NP_AUTH_CORE_ERROR_UNEXPECTED_NAV_ERROR = 0x8055B012,
  SCE_NP_ERROR_TOO_LARGE_TICKET = 0x8055B013,
  SCE_NP_AUTH_CORE_ERROR_TOO_LONG_TRANSACTION_TIME = 0x8055B014,
  SCE_NP_AUTH_CORE_ERROR_SSO_COOKIE_PARSE_FAILED = 0x8055B015,
  SCE_NP_AUTH_CORE_ERROR_ID_TOKEN_PARSE_FAILED = 0x8055B016,
  SCE_NP_AUTH_CORE_ERROR_USER_INFO_JSON_PARSE_FAILED = 0x8055B017,
  SCE_NP_AUTH_CORE_ERROR_AUTH_CODE_PARSE_FAILED = 0x8055B018,
  SCE_NP_AUTH_CORE_ERROR_SSOCOOKIE_BAD_RESPONSE = 0x8055B020,
  SCE_NP_AUTH_CORE_ERROR_OAUTH_AUTHORIZE_BAD_RESPONSE = 0x8055B021,
  SCE_NP_AUTH_CORE_ERROR_OAUTH_TOKEN_BAD_RESPONSE = 0x8055B022,
  SCE_NP_AUTH_CORE_ERROR_USERS_ME_INFO_BAD_RESPONSE = 0x8055B023,
  SCE_NP_AUTH_CORE_ERROR_NAV_AUTH_TOKEN_BAD_RESPONSE = 0x8055B024,
  SCE_NP_AUTH_CORE_ERROR_USERS_ME_PSNSUBSCRIPTIONS_BAD_RESPONSE = 0x8055B025,
  SCE_NP_AUTH_CORE_ERROR_USERS_ME_PSPLUS_BAD_RESPONSE = 0x8055B026,
  SCE_NP_AUTH_CORE_ERROR_DEVICE_CODES_BAD_RESPONSE = 0x8055B027,
  SCE_NP_AUTH_CORE_ERROR_ONLINE_ID_CHANGE_BAD_RESPONSE = 0x8055B028,
  SCE_TROPHY_ACCESSOR_ERROR_UNKNOWN = 0x8055B100,
  SCE_TROPHY_ACCESSOR_ERROR_INVALID_ARGUMENT = 0x8055B101,
  SCE_TROPHY_ACCESSOR_ERROR_ABORTED = 0x8055B102,
  SCE_TROPHY_ACCESSOR_ERROR_TITLE_NOT_FOUND = 0x8055B103,
  SCE_TROPHY_ACCESSOR_ERROR_GROUP_NOT_FOUND = 0x8055B104,
  SCE_TROPHY_ACCESSOR_ERROR_TROPHY_NOT_FOUND = 0x8055B105,
  SCE_TROPHY_ACCESSOR_ERROR_SERVER_NOT_AVAILABLE = 0x8055B106,
  SCE_TROPHY_ACCESSOR_ERROR_INVALID_ID_FORMAT = 0x8055B107,
  SCE_NP_APP_INFO_ERROR_ALREADY_INITIALIZED = 0x8055B201,
  SCE_NP_APP_INFO_ERROR_NOT_INITIALIZED = 0x8055B202,
  SCE_NP_APP_INFO_ERROR_NO_MEMORY = 0x8055B203,
  SCE_NP_APP_INFO_ERROR_INVALID_ARGUMENT = 0x8055B204,
  SCE_NP_APP_INFO_ERROR_ABORTED = 0x8055B205,
  SCE_NP_APP_INFO_ERROR_TOO_MANY_REQUEST = 0x8055B206,
  SCE_NP_APP_INFO_ERROR_INVALID_REQUEST_ID = 0x8055B207,
  SCE_NP_APP_INFO_ERROR_HTTP_SERVER = 0x8055B208,
  SCE_NP_APP_INFO_ERROR_FILE_MALFORMED = 0x8055B209,
  SCE_NP_APP_INFO_ERROR_FILE_UNSUPPORTED = 0x8055B20A,
  SCE_NP_SERVICE_CHECKER2_ERROR_ALREADY_INITIALIZED = 0x8055B301,
  SCE_NP_SERVICE_CHECKER2_ERROR_NOT_INITIALIZED = 0x8055B302,
  SCE_NP_SERVICE_CHECKER2_ERROR_NO_MEMORY = 0x8055B303,
  SCE_NP_SERVICE_CHECKER2_ERROR_INVALID_REQUEST_ID = 0x8055B304,
  SCE_NP_SERVICE_CHECKER2_ERROR_INVALID_ARGUMENT = 0x8055B305,
  SCE_NP_SERVICE_CHECKER2_ERROR_FILE_MALFORMED = 0x8055B306,
  SCE_NP_SERVICE_CHECKER2_ERROR_ABORTED = 0x8055B307,
  SCE_NP_SERVICE_CHECKER2_ERROR_INVALID_HTTP_STATUS_CODE = 0x8055B308,
  SCE_NP_TROPHY_ERROR_IPC_SESSION_ALREADY_EXISTS = 0x8055B500,
  SCE_NP_TROPHY_ERROR_CANCELED_BY_BG2 = 0x8055B501,
  SCE_NP_TROPHY_ERROR_DECRYPTION_KEY_NOT_AVAILABLE = 0x8055B502,
  SCE_NP_PAPC_ERROR_NOT_INITIALIZED = 0x8055B601,
  SCE_NP_PAPC_ERROR_OUT_OF_MEMORY = 0x8055B602,
  SCE_NP_PAPC_ERROR_ABORTED = 0x8055B603,
  SCE_NP_PAPC_ERROR_INVALID_JSON_RESPONSE = 0x8055B604,
  SCE_NP_PAPC_ERROR_INVALID_ARGUMENT = 0x8055B605,
  SCE_NP_PAPC_ERROR_ALREADY_EXISTS = 0x8055B606,
  SCE_NP_PAPC_ERROR_CALLBACK_MAX = 0x8055B607,
  SCE_NP_PAPC_ERROR_UNAVAILABLE = 0x8055B608,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UNKNOWN_INT = 0x8055B700,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_NOT_INITIALIZED_INT = 0x8055B701,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_ALREADY_INITIALIZED_INT = 0x8055B702,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INSUFFICIENT_INTERNAL_BUFFER = 0x8055B703,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_HANDLE_TYPE = 0x8055B704,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_CONTEXT_TYPE = 0x8055B705,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_IPC_SESSION_NOT_FOUND = 0x8055B706,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_IPC_SESSION_ALREADY_EXISTS = 0x8055B707,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_IPC_UNKNOWN = 0x8055B708,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_IPC_TIMEOUT = 0x8055B709,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UNEXPECTED_DEACTIVATED_ERRCODE = 0x8055B70A,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_PROCESS_CONTEXT_NOT_FOUND = 0x8055B70B,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_PROCESS_CONTEXT_ALREADY_EXISTS = 0x8055B70C,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_PROCESS_CONTEXT_EXCEEDS_MAX = 0x8055B70D,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UNSUPPORTED_PROCESS_CONTEXT = 0x8055B70E,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_SERVICE_CONTEXT_SLOT_EXCEEDS_MAX = 0x8055B70F,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_SERVICE_HANDLE_SLOT_EXCEEDS_MAX = 0x8055B710,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DIR_NOT_EXIST = 0x8055B711,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UNEXPECTED_FILE_EXISTS = 0x8055B712,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DATA_FILE_ALREADY_OPENED = 0x8055B713,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DATA_FILE_NOT_OPENED = 0x8055B714,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DATA_FILE_NOT_FOUND = 0x8055B715,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_PAGE_DATA_FILE_INVALID_FORMAT = 0x8055B716,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_PAGE_DATA_FILE_UNSUPPORTED_VERSION = 0x8055B717,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_PAGE_DATA_INDEX = 0x8055B718,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_EXCEEDS_PAGE_DATA_BLOCK_SIZE = 0x8055B719,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INSUFFICIENT_PAGE_DATA_BLOCK_SIZE = 0x8055B71A,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_RING_DATA_FILE_INVALID_FORMAT = 0x8055B71B,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_RING_DATA_FILE_UNSUPPORTED_VERSION = 0x8055B71C,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_EXCEEDS_RING_DATA_LIMIT_SIZE = 0x8055B71D,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_CUSTOM_HEADER_SIZE = 0x8055B71E,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_RECORD_DATA_FILE_INVALID_FORMAT = 0x8055B71F,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_RECORD_DATA_FILE_UNSUPPORTED_VERSION = 0x8055B720,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_DATA_FILE_PARAM = 0x8055B721,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DATA_FILE_BIND = 0x8055B722,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_DATA_ITERATOR = 0x8055B723,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_STORAGE_ITERATOR = 0x8055B724,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_DATA_STORAGE_MAX_SIZE = 0x8055B725,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_STORAGE_NOT_OPENED = 0x8055B726,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_APP_VER = 0x8055B727,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_TIMESTAMP = 0x8055B728,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_ID = 0x8055B729,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_RECORD_NO_CONTENT = 0x8055B72A,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_KEEP_ALIVE_INTERVAL_NOT_FOUND = 0x8055B72B,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_KEEP_ALIVE_TIMEOUT_NOT_FOUND = 0x8055B72C,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DISCONNECTED = 0x8055B72D,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DISCONNECTED_CLOSED = 0x8055B72E,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DISCONNECTED_INVALID_MSG = 0x8055B72F,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DISCONNECTED_UNEXPECTED_STATE = 0x8055B730,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_APP_NP_TITLE_ID_NOT_MACHED = 0x8055B731,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_PACKET_FIELD_NOT_FOUND = 0x8055B732,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_SESSION_STATE = 0x8055B733,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_SESSION_POST_CMD_INVALID_SESSION_STATE = 0x8055B734,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_SESSION_POST_CMD_SESSION_DISCONNECTED = 0x8055B735,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_SESSION_ABORTED = 0x8055B736,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_CONNECT_TIMEOUT = 0x8055B737,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_SERVICE_BASE_URL_NOT_FOUND = 0x8055B738,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_REQUEST_TIMEOUT = 0x8055B739,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_UPLOADER_STATE = 0x8055B73A,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UPLOADER_STOPPED = 0x8055B73B,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UPLOADER_POST_CMD_INVALID_UPLOADER_STATE = 0x8055B73C,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UPLOADER_POST_CMD_UPLOADER_STOPPED = 0x8055B73D,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_TOO_MANY_UPLOADER_CONTEXT_USERS = 0x8055B73E,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_TOO_MANY_UPLOADER_CONTEXT_APPS = 0x8055B73F,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_DISABLED_BY_FEATURE_FLAG = 0x8055B740,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RECORD_OBJECT = 0x8055B741,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_CUSTOM_HEADER_INDEX = 0x8055B742,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_KEEP_ALIVE_INTERVAL = 0x8055B743,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_KEEP_ALIVE_TIMEOUT = 0x8055B744,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UNSUPPORTED_PACKET_OPERATION = 0x8055B745,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_RETRY_INTERVAL = 0x8055B746,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_UNSUPPORTED_OPERATION = 0x8055B747,
  SCE_NP_UNIVERSAL_DATA_SYSTEM_ERROR_INVALID_PACKET = 0x8055B748,
  SCE_NP_AU_CHECK_ERROR_ALREADY_INITIALIZED = 0x8055B800,
  SCE_NP_AU_CHECK_ERROR_NOT_INITIALIZED = 0x8055B801,
  SCE_NP_AU_CHECK_ERROR_OUT_OF_MEMORY = 0x8055B802,
  SCE_NP_AU_CHECK_ERROR_INVALID_ARGUMENT = 0x8055B803,
  SCE_NP_AU_CHECK_ERROR_ABORTED = 0x8055B804,
  SCE_NP_AU_CHECK_ERROR_INVALID_REQUEST = 0x8055B805,
  SCE_NP_AU_CHECK_ERROR_REQUEST_NOT_FOUND = 0x8055B806,
  SCE_NP_AU_CHECK_ERROR_TOO_MANY_REQUEST = 0x8055B807,
  SCE_NP_AU_CHECK_ERROR_BAD_RESPONSE = 0x8055B808,
  SCE_NP_AU_CHECK_ERROR_UNKNOWN = 0x8055B809,
  SCE_NP_FEATURE_FLAG_ERROR_ALREADY_INITIALIZED = 0x8055B900,
  SCE_NP_FEATURE_FLAG_ERROR_NOT_INITIALIZED = 0x8055B901,
  SCE_NP_FEATURE_FLAG_ERROR_NO_MEMORY = 0x8055B902,
  SCE_NP_FEATURE_FLAG_ERROR_INVALID_ARGUMENT = 0x8055B903,
  SCE_NP_FEATURE_FLAG_ERROR_ABORTED = 0x8055B904,
  SCE_NP_FEATURE_FLAG_ERROR_INVALID_HTTP_STATUS_CODE = 0x8055B905,
  SCE_NP_FEATURE_FLAG_ERROR_FILE_MALFORMED = 0x8055B906,
  SCE_GRIEF_REPORT_ERROR_UNKNOWN = 0x8055BA00,
  SCE_GRIEF_REPORT_ERROR_INVALID_PARAMETER = 0x8055BA01,
  SCE_GRIEF_REPORT_ERROR_INVALID_URL = 0x8055BA02,
  SCE_GRIEF_REPORT_ERROR_WEBAPP_NOTFOUND = 0x8055BA03,
  SCE_GRIEF_REPORT_ERROR_WEBAPP_FATAL = 0x8055BA04,
  SCE_NP_MSG_PACK_ERROR_ALREADY_INITIALIZED = 0x8055BB00,
  SCE_NP_MSG_PACK_ERROR_NOT_INITIALIZED = 0x8055BB01,
  SCE_NP_MSG_PACK_ERROR_NO_MEMORY = 0x8055BB02,
  SCE_NP_MSG_PACK_ERROR_INVALID_ARGUMENT = 0x8055BB03,
  SCE_NP_MSG_PACK_ERROR_INVALID_STATE = 0x8055BB04,
  SCE_NP_MSG_PACK_ERROR_ITEM_NOT_FOUND = 0x8055BB05,
  SCE_NP_MSG_PACK_ERROR_INDEX_OUT_OF_BOUNDS = 0x8055BB06,
  SCE_NP_MSG_PACK_ERROR_TOO_LARGE_ARGUMENT = 0x8055BB07,
  SCE_NP_MSG_PACK_ERROR_DATA_CORRUPTED = 0x8055BB08,
  SCE_NP_MSG_PACK_ERROR_ENTRY_FULL = 0x8055BB09,
  SCE_NP_MSG_PACK_ERROR_UNSUPPORTED_CHARACTER_ENCODING = 0x8055BB0A,
  SCE_NP_MSG_PACK_ERROR_NOT_IMPLEMENTED = 0x8055BB0B,
  SCE_NP_MSG_PACK_ERROR_OBJECT_NULL = 0x8055BB0C,
  SCE_NP_PBTC_ERROR_ALREADY_INITIALIZED = 0x8055BC00,
  SCE_NP_PBTC_ERROR_NOT_INITIALIZED = 0x8055BC01,
  SCE_NP_PBTC_ERROR_INVALID_ARGUMENT = 0x8055BC02,
  SCE_NP_PBTC_ERROR_OUT_OF_MEMORY = 0x8055BC03,
  SCE_NP_PBTC_ERROR_INVALID_POINTER = 0x8055BC04,
  SCE_NP_PBTC_ERROR_INVALID_LENGTH = 0x8055BC05,
  SCE_NP_PBTC_ERROR_INSUFFICIENT_BUFFER = 0x8055BC06,
  SCE_NP_PBTC_ERROR_INVALID_ID = 0x8055BC07,
  SCE_NP_PBTC_ERROR_ABORTED = 0x8055BC08,
  SCE_NP_PBTC_ERROR_INVALID_REQUEST = 0x8055BC09,
  SCE_NP_PBTC_ERROR_REQUEST_NOT_FOUND = 0x8055BC0A,
  SCE_NP_PBTC_ERROR_REQUEST_MAX = 0x8055BC0B,
  SCE_NP_PBTC_ERROR_REQUEST_UNAVAILABLE = 0x8055BC0C,
  SCE_NP_PBTC_ERROR_INVALID_DATA_TYPE = 0x8055BC0D,
  SCE_NP_PBTC_ERROR_INVALID_ACCOUNT = 0x8055BC0E,
  SCE_NP_PBTC_ERROR_BAD_RESPONSE = 0x8055BC0F,
  SCE_NP_PBTC_ERROR_USER_NOT_FOUND = 0x8055BC10,
  SCE_NP_PBTC_ERROR_USER_ALREADY_REGISTERED = 0x8055BC11,
  SCE_NP_PBTC_ERROR_TOO_MANY_USERS = 0x8055BC12,
  SCE_NP_PBTC_ERROR_INVALID_SETTING = 0x8055BC13,
  SCE_NP_PBTC_ERROR_TICK_INFORMATION_CORRUPTED = 0x8055BC14,
  SCE_NP_PBTC_ERROR_TOKEN_NOT_CACHED = 0x8055BC15,
  SCE_NP_PBTC_ERROR_UNKNOWN = 0x8055BCFF,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_CONTEXT_TYPE = 0x8055BF00,
  SCE_NP_DATA_COMMUNICATION_ERROR_UNEXPECTED_DEACTIVATED_ERRCODE = 0x8055BF01,
  SCE_NP_DATA_COMMUNICATION_ERROR_CMD_HANDLER_STOPPED = 0x8055BF02,
  SCE_NP_DATA_COMMUNICATION_ERROR_INVALID_STATE = 0x8055BF03,
  SCE_NP_PUSH2_ERROR_INTERNAL = 0x8055C000,
  SCE_NP_PUSH2_ERROR_ALREADY_INITIALIZED = 0x8055C001,
  SCE_NP_PUSH2_ERROR_NOT_INITIALIZED = 0x8055C002,
  SCE_NP_PUSH2_ERROR_INVALID_ARGUMENT = 0x8055C003,
  SCE_NP_PUSH2_ERROR_OUT_OF_MEMORY = 0x8055C004,
  SCE_NP_PUSH2_ERROR_IPC_PROCESS_CONTEXT_NOT_FOUND = 0x8055C005,
  SCE_NP_PUSH2_ERROR_IPC_USER_CONTEXT_NOT_FOUND = 0x8055C006,
  SCE_NP_PUSH2_ERROR_NO_PACKET = 0x8055C007,
  SCE_NP_PUSH2_ERROR_IPC_QUEUE_FULL = 0x8055C008,
  SCE_NP_PUSH2_ERROR_TOO_LONG_DATATYPE = 0x8055C009,
  SCE_NP_PUSH2_ERROR_CALLBACK_ALREADY_REGISTERED = 0x8055C00A,
  SCE_NP_PUSH2_ERROR_TOO_LONG_EXTENDED_DATA_NAME = 0x8055C00B,
  SCE_NP_PUSH2_ERROR_PARSE_IPC_TLV = 0x8055C00C,
  SCE_NP_PUSH2_ERROR_BUILD_IPC_TLV = 0x8055C00D,
  SCE_NP_PUSH2_ERROR_TOO_MANY_EXTENDED_DATA = 0x8055C00E,
  SCE_NP_PUSH2_ERROR_TOO_MANY_DATA = 0x8055C00F,
  SCE_NP_PUSH2_ERROR_INSUFFICIENT_BUFFER = 0x8055C010,
  SCE_NP_PUSH2_ERROR_EXTENDED_DATA_NAME_ENTRY_NOT_FOUND = 0x8055C011,
  SCE_NP_PUSH2_ERROR_EXTENDED_DATA_NAME_ENTRY_ALREADY_REGISTERED = 0x8055C012,
  SCE_NP_PUSH2_ERROR_DATA_TYPE_ENTRY_NOT_FOUND = 0x8055C013,
  SCE_NP_PUSH2_ERROR_USER_CONTEXT_NOT_FOUND = 0x8055C014,
  SCE_NP_PUSH2_ERROR_PUSH_CONTEXT_NOT_FOUND = 0x8055C015,
  SCE_NP_WEBAPI2_INTERNAL_ERROR_PARSER_FAILED = 0x8055C101,
  SCE_NP_WEBAPI2_INTERNAL_ERROR_NO_PERMISSION_FOR_CALL_FUNC = 0x8055C102,
  SCE_NP_WEBAPI2_INTERNAL_ERROR_INVALID_LANG_ID = 0x8055C103,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_NOMEM = 0x8055C300,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_INVALID_ARGUMENT = 0x8055C301,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_INVALID_CONTEXT = 0x8055C302,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_INVALID_STATE_NOT_INITIALIZED = 0x8055C303,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_INVALID_STATE_INITIALIZED = 0x8055C304,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_INVALID_STATE_NOT_ACS_RUNNING = 0x8055C305,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_INVALID_STATE_ACS_RUNNING = 0x8055C306,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_ALREADY_REGISTERED = 0x8055C307,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_NOT_REGISTERED = 0x8055C308,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_INTERNAL = 0x8055C309,
  SCE_NP_PARTY_ACS_SERVER_ERROR_INVALID_ARGUMENT = 0x8055C30A,
  SCE_NP_PARTY_ACS_SERVER_ERROR_INVALID_CONTEXT = 0x8055C30B,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NOMEM = 0x8055C30C,
  SCE_NP_PARTY_ACS_SERVER_ERROR_ALREADY_INITIALIZED = 0x8055C30D,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NOT_INITIALIZED = 0x8055C30E,
  SCE_NP_PARTY_ACS_SERVER_ERROR_ALREADY_STARTED_STT_ANALYZING = 0x8055C30F,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NOT_STARTED_STT_ANALYZE = 0x8055C310,
  SCE_NP_PARTY_ACS_SERVER_ERROR_PROCESSING_TTS = 0x8055C311,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NO_MEMBER = 0x8055C312,
  SCE_NP_PARTY_ACS_SERVER_ERROR_STT_LOCAL_TARGET_MEMBER_NOT_FOUND = 0x8055C313,
  SCE_NP_PARTY_ACS_SERVER_ERROR_REMOTE_MEMBER_NOT_FOUND = 0x8055C314,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NO_SUCH_LOCAL_USER = 0x8055C315,
  SCE_NP_PARTY_ACS_SERVER_ERROR_INVALID_DOWNLOADED_STREAM_SIZE = 0x8055C316,
  SCE_NP_PARTY_ACS_SERVER_ERROR_INVALID_READ_STREAM_SIZE = 0x8055C317,
  SCE_NP_PARTY_ACS_SERVER_ERROR_WRITE_TO_IPORT_TTS = 0x8055C318,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NO_LOCAL_TTS_USER = 0x8055C319,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NO_REMOTE_STT_MEMBER = 0x8055C31A,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NO_LOCAL_STT_USER = 0x8055C31B,
  SCE_NP_PARTY_ACS_SERVER_ERROR_ALREADY_TTS_SERVICE_STATE = 0x8055C31C,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NOT_TTS_SERVICE_STATE = 0x8055C31D,
  SCE_NP_PARTY_ACS_SERVER_ERROR_NO_SUCH_REMOTE_TTS_USER = 0x8055C31E,
  SCE_NP_PARTY_ACS_SERVER_ERROR_IN_GAME_CHAT = 0x8055C31F,
  SCE_NP_PARTY_ACS_CLIENT_ERROR_INVALID_IPC_SERVER = 0x8055C320,
  SCE_NP_PARTY_ACS_SERVER_ERROR_INVALID_IPC_CLIENT = 0x8055C321,
  SCE_NP_PARTY_DAEMON_ERROR_INTERNAL_SETTING_LOAD_FAILED = 0x8055C400,
  SCE_NP_PARTY_DAEMON_ERROR_INTERNAL_SETTING_INVALID_ARGUMENT = 0x8055C401,
  SCE_NP_PARTY_DAEMON_ERROR_INTERNAL_SETTING_INSUFFICIENT_BUFFER = 0x8055C402,
  SCE_NP_PARTY_DAEMON_ERROR_INTERNAL_ROOM_MEMBER_ID_DUPLICATED = 0x8055C403,
  SCE_NP_PARTY_DAEMON_ERROR_INTERNAL_PUSH_DROPPED = 0x8055C404,
  SCE_NP_PARTY_DAEMON_ERROR_INTERNAL_STATS_REPORT_DATA_GET_FAILED = 0x8055C405,
  SCE_DEFLATE_ERROR_INVALID_FORMAT = 0x80560100,
  SCE_DEFLATE_ERROR_INVALID_SIZE = 0x80560101,
  SCE_DEFLATE_ERROR_NOT_SUPPORTED = 0x80560102,
  SCE_DEFLATE_ERROR_INVALID_POINTER = 0x80560103,
  SCE_DEFLATE_ERROR_INVALID_CBINFO = 0x80560104,
  SCE_RAZOR_CPU_ERROR_NOT_INITIALIZED = 0x80580000,
  SCE_RAZOR_CPU_ERROR_ALREADY_INITIALIZED = 0x80580001,
  SCE_RAZOR_CPU_ERROR_INVALID_STACK_LEVEL = 0x80580002,
  SCE_RAZOR_CPU_ERROR_INVALID_LABEL = 0x80580003,
  SCE_RAZOR_CPU_ERROR_INVALID_ADDRESS = 0x80580004,
  SCE_RAZOR_CPU_ERROR_INVALID_SIZE = 0x80580005,
  SCE_RAZOR_CPU_ERROR_TOO_MANY_THREADS = 0x80580006,
  SCE_RAZOR_CPU_ERROR_PACKET_TOO_BIG = 0x80580007,
  SCE_RAZOR_CPU_ERROR_ALREADY_STARTED = 0x80580008,
  SCE_RAZOR_CPU_ERROR_CANNOT_START = 0x80580009,
  SCE_RAZOR_CPU_ERROR_ALREADY_STOPPED = 0x8058000A,
  SCE_RAZOR_CPU_ERROR_CANNOT_STOP = 0x8058000B,
  SCE_RAZOR_CPU_ERROR_HOST_NOT_LISTENING = 0x8058000C,
  SCE_RAZOR_CPU_ERROR_TRACE_BUFFER_FULL = 0x8058000D,
  SCE_RAZOR_CPU_ERROR_NO_STACK_SPACE = 0x8058000E,
  SCE_RAZOR_CPU_ERROR_CANNOT_STOP_ON_COUNT_DOWN = 0x8058000F,
  SCE_RAZOR_CPU_ERROR_TAG_NOT_FOUND = 0x80580010,
  SCE_RAZOR_CPU_ERROR_INVALID_TAG_CATEGORY = 0x80580011,
  SCE_RAZOR_CPU_ERROR_BAD_TAG_TABLE = 0x80580012,
  SCE_RAZOR_CPU_ERROR_CANNOT_STOP_ON_FRAME_SPIKE = 0x80580013,
  SCE_RAZOR_CPU_ERROR_CANNOT_ALLOCATE_TAG = 0x80580014,
  SCE_RAZOR_CPU_ERROR_TAG_ALREADY_ALLOCATED = 0x80580015,
  SCE_RAZOR_CPU_ERROR_INVALID_OPERATION = 0x80580016,
  SCE_RAZOR_CPU_ERROR_INVALID_EVENT = 0x80580017,
  SCE_RAZOR_CPU_ERROR_STRING_TOO_LONG = 0x80580018,
  SCE_FIBER_ERROR_NULL = 0x80590001,
  SCE_FIBER_ERROR_ALIGNMENT = 0x80590002,
  SCE_FIBER_ERROR_RANGE = 0x80590003,
  SCE_FIBER_ERROR_INVALID = 0x80590004,
  SCE_FIBER_ERROR_PERMISSION = 0x80590005,
  SCE_FIBER_ERROR_STATE = 0x80590006,
  SCE_SYSMODULE_ERROR_INVALID_VALUE = 0x805A1000,
  SCE_SYSMODULE_ERROR_UNLOADED = 0x805A1001,
  SCE_SYSMODULE_ERROR_FATAL = 0x805A10FF,
  SCE_CES_ERROR_INVALID_PARAMETER = 0x805C0001,
  SCE_CES_ERROR_INVALID_PROFILE = 0x805C0004,
  SCE_CES_ERROR_INVALID_SRC_BUFFER = 0x805C0010,
  SCE_CES_ERROR_SRC_BUFFER_END = 0x805C0011,
  SCE_CES_ERROR_INVALID_ENCODE = 0x805C0014,
  SCE_CES_ERROR_ILLEGAL_CODE = 0x805C0015,
  SCE_CES_ERROR_UNASSIGNED_CODE = 0x805C0020,
  SCE_CES_ERROR_OUT_OF_CODE_RANGE = 0x805C0024,
  SCE_CES_ERROR_INVALID_DST_BUFFER = 0x805C0030,
  SCE_CES_ERROR_DST_BUFFER_END = 0x805C0031,
  SCE_JPEG_DEC_ERROR_INVALID_ADDR = 0x80650001,
  SCE_JPEG_DEC_ERROR_INVALID_SIZE = 0x80650002,
  SCE_JPEG_DEC_ERROR_INVALID_PARAM = 0x80650003,
  SCE_JPEG_DEC_ERROR_INVALID_HANDLE = 0x80650004,
  SCE_JPEG_DEC_ERROR_INVALID_COEF_MEMORY = 0x80650005,
  SCE_JPEG_DEC_ERROR_INVALID_WORK_MEMORY = 0x80650006,
  SCE_JPEG_DEC_ERROR_INVALID_DATA = 0x80650010,
  SCE_JPEG_DEC_ERROR_UNSUPPORT_DATA = 0x80650011,
  SCE_JPEG_DEC_ERROR_DECODE_ERROR = 0x80650012,
  SCE_JPEG_DEC_ERROR_FATAL = 0x80650020,
  SCE_JPEG_ENC_ERROR_INVALID_ADDR = 0x80650101,
  SCE_JPEG_ENC_ERROR_INVALID_SIZE = 0x80650102,
  SCE_JPEG_ENC_ERROR_INVALID_PARAM = 0x80650103,
  SCE_JPEG_ENC_ERROR_INVALID_HANDLE = 0x80650104,
  SCE_JPEG_ENC_ERROR_DATA_OVERFLOW = 0x80650110,
  SCE_JPEG_ENC_ERROR_FATAL = 0x80650120,
  SCE_PNG_DEC_ERROR_INVALID_ADDR = 0x80690001,
  SCE_PNG_DEC_ERROR_INVALID_SIZE = 0x80690002,
  SCE_PNG_DEC_ERROR_INVALID_PARAM = 0x80690003,
  SCE_PNG_DEC_ERROR_INVALID_HANDLE = 0x80690004,
  SCE_PNG_DEC_ERROR_INVALID_WORK_MEMORY = 0x80690005,
  SCE_PNG_DEC_ERROR_INVALID_DATA = 0x80690010,
  SCE_PNG_DEC_ERROR_UNSUPPORT_DATA = 0x80690011,
  SCE_PNG_DEC_ERROR_DECODE_ERROR = 0x80690012,
  SCE_PNG_DEC_ERROR_FATAL = 0x80690020,
  SCE_PNG_ENC_ERROR_INVALID_ADDR = 0x80690101,
  SCE_PNG_ENC_ERROR_INVALID_SIZE = 0x80690102,
  SCE_PNG_ENC_ERROR_INVALID_PARAM = 0x80690103,
  SCE_PNG_ENC_ERROR_INVALID_HANDLE = 0x80690104,
  SCE_PNG_ENC_ERROR_DATA_OVERFLOW = 0x80690110,
  SCE_PNG_ENC_ERROR_FATAL = 0x80690120,
  SCE_AVPLAYER_ERROR_INVALID_PARAMS = 0x806A0001,
  SCE_AVPLAYER_ERROR_OPERATION_FAILED = 0x806A0002,
  SCE_AVPLAYER_ERROR_NO_MEMORY = 0x806A0003,
  SCE_AVPLAYER_ERROR_NOT_SUPPORTED = 0x806A0004,
  SCE_AVPLAYER_ERROR_WAR_FILE_NONINTERLEAVED = 0x806A00A0,
  SCE_AVPLAYER_ERROR_WAR_LOOPING_BACK = 0x806A00A1,
  SCE_AVPLAYER_ERROR_WAR_JUMP_COMPLETE = 0x806A00A3,
  SCE_AVPLAYER_ERROR_INFO_MARLIN_ENCRY = 0x806A00B0,
  SCE_AVPLAYER_ERROR_INFO_PLAYREADY_ENCRY = 0x806A00B4,
  SCE_AVPLAYER_ERROR_INFO_AES_ENCRY = 0x806A00B5,
  SCE_AVPLAYER_ERROR_INFO_OTHER_ENCRY = 0x806A00BF,
  SCE_RUDP_ERROR_NOT_INITIALIZED = 0x80770001,
  SCE_RUDP_ERROR_ALREADY_INITIALIZED = 0x80770002,
  SCE_RUDP_ERROR_INVALID_CONTEXT_ID = 0x80770003,
  SCE_RUDP_ERROR_INVALID_ARGUMENT = 0x80770004,
  SCE_RUDP_ERROR_INVALID_OPTION = 0x80770005,
  SCE_RUDP_ERROR_INVALID_MUXMODE = 0x80770006,
  SCE_RUDP_ERROR_MEMORY = 0x80770007,
  SCE_RUDP_ERROR_INTERNAL = 0x80770008,
  SCE_RUDP_ERROR_CONN_RESET = 0x80770009,
  SCE_RUDP_ERROR_CONN_REFUSED = 0x8077000A,
  SCE_RUDP_ERROR_CONN_TIMEOUT = 0x8077000B,
  SCE_RUDP_ERROR_CONN_VERSION_MISMATCH = 0x8077000C,
  SCE_RUDP_ERROR_CONN_TRANSPORT_TYPE_MISMATCH = 0x8077000D,
  SCE_RUDP_ERROR_CONN_QUALITY_LEVEL_MISMATCH = 0x8077000E,
  SCE_RUDP_ERROR_THREAD = 0x8077000F,
  SCE_RUDP_ERROR_THREAD_IN_USE = 0x80770010,
  SCE_RUDP_ERROR_NOT_ACCEPTABLE = 0x80770011,
  SCE_RUDP_ERROR_MSG_TOO_LARGE = 0x80770012,
  SCE_RUDP_ERROR_NOT_BOUND = 0x80770013,
  SCE_RUDP_ERROR_CANCELLED = 0x80770014,
  SCE_RUDP_ERROR_INVALID_VPORT = 0x80770015,
  SCE_RUDP_ERROR_WOULDBLOCK = 0x80770016,
  SCE_RUDP_ERROR_VPORT_IN_USE = 0x80770017,
  SCE_RUDP_ERROR_VPORT_EXHAUSTED = 0x80770018,
  SCE_RUDP_ERROR_INVALID_SOCKET = 0x80770019,
  SCE_RUDP_ERROR_BUFFER_TOO_SMALL = 0x8077001A,
  SCE_RUDP_ERROR_MSG_MALFORMED = 0x8077001B,
  SCE_RUDP_ERROR_ADDR_IN_USE = 0x8077001C,
  SCE_RUDP_ERROR_ALREADY_BOUND = 0x8077001D,
  SCE_RUDP_ERROR_ALREADY_EXISTS = 0x8077001E,
  SCE_RUDP_ERROR_INVALID_POLL_ID = 0x8077001F,
  SCE_RUDP_ERROR_TOO_MANY_CONTEXTS = 0x80770020,
  SCE_RUDP_ERROR_IN_PROGRESS = 0x80770021,
  SCE_RUDP_ERROR_NO_EVENT_HANDLER = 0x80770022,
  SCE_RUDP_ERROR_PAYLOAD_TOO_LARGE = 0x80770023,
  SCE_RUDP_ERROR_END_OF_DATA = 0x80770024,
  SCE_RUDP_ERROR_ALREADY_ESTABLISHED = 0x80770025,
  SCE_RUDP_ERROR_KEEP_ALIVE_FAILURE = 0x80770026,
  SCE_RUDP_ERROR_MEMLEAK = 0x807700FF,
  SCE_AUDIODEC_ERROR_API_FAIL = 0x807F0000,
  SCE_AUDIODEC_ERROR_INVALID_TYPE = 0x807F0001,
  SCE_AUDIODEC_ERROR_ARG = 0x807F0002,
  SCE_AUDIODEC_ERROR_INVALID_SIZE = 0x807F0003,
  SCE_AUDIODEC_ERROR_INVALID_PARAM_SIZE = 0x807F0004,
  SCE_AUDIODEC_ERROR_INVALID_BSI_INFO_SIZE = 0x807F0005,
  SCE_AUDIODEC_ERROR_INVALID_AU_INFO_SIZE = 0x807F0006,
  SCE_AUDIODEC_ERROR_INVALID_PCM_ITEM_SIZE = 0x807F0007,
  SCE_AUDIODEC_ERROR_INVALID_CTRL_POINTER = 0x807F0008,
  SCE_AUDIODEC_ERROR_INVALID_PARAM_POINTER = 0x807F0009,
  SCE_AUDIODEC_ERROR_INVALID_BSI_INFO_POINTER = 0x807F000A,
  SCE_AUDIODEC_ERROR_INVALID_AU_INFO_POINTER = 0x807F000B,
  SCE_AUDIODEC_ERROR_INVALID_PCM_ITEM_POINTER = 0x807F000C,
  SCE_AUDIODEC_ERROR_INVALID_AU_POINTER = 0x807F000D,
  SCE_AUDIODEC_ERROR_INVALID_PCM_POINTER = 0x807F000E,
  SCE_AUDIODEC_ERROR_INVALID_HANDLE = 0x807F000F,
  SCE_AUDIODEC_ERROR_INVALID_WORD_LENGTH = 0x807F0010,
  SCE_AUDIODEC_ERROR_INVALID_AU_SIZE = 0x807F0011,
  SCE_AUDIODEC_ERROR_INVALID_PCM_SIZE = 0x807F0012,
  SCE_AUDIODEC_ERROR_M4AAC_INVALID_SAMPLING_FREQ = 0x807F0300,
  SCE_AUDIODEC_ERROR_M4AAC_INVALID_ENABLE_HEAAC = 0x807F0302,
  SCE_AUDIODEC_ERROR_M4AAC_INVALID_CONFIG_NUMBER = 0x807F0303,
  SCE_AUDIODEC_ERROR_M4AAC_INVALID_MAX_CHANNELS = 0x807F0304,
  SCE_AUDIODEC_ERROR_M4AAC_INVALID_ENABLE_NONDELAY_OUTPUT = 0x807F0305,
  SCE_AUDIODEC_ERROR_M4AAC_INVALID_SURROUND_CHANNEL_INTERLEAVE_ORDER = 0x807F0306,
  SCE_AUDIODEC_ERROR_AC3_INVALID_KARAOKE_CAPABLE_REPRODUCTION_MODE = 0x807F0400,
  SCE_AUDIODEC_ERROR_AC3_INVALID_DYNAMIC_RANGE_COMPRESSION_MODE = 0x807F0401,
  SCE_AUDIODEC_ERROR_AC3_INVALID_LFE_CHANNEL_OUTPUT_MODE = 0x807F0402,
  SCE_AUDIODEC_ERROR_AC3_INVALID_OUTPUT_CHANNEL_CONFIGRATION = 0x807F0403,
  SCE_AUDIODEC_ERROR_AC3_INVALID_NUMBER_OF_OUTPUT_CHANNELS = 0x807F0404,
  SCE_AUDIODEC_ERROR_AC3_INVALID_OUTPUT_PCM_SAMPLES_SCALE_FACTOR = 0x807F0405,
  SCE_AUDIODEC_ERROR_AC3_INVALID_STEREO_MODE = 0x807F0406,
  SCE_AUDIODEC_ERROR_AC3_INVALID_DUAL_MONO_REPRODUCTION_MODE = 0x807F0407,
  SCE_AUDIODEC_ERROR_AC3_INVALID_HIGH_FREQUENCY_DYNAMIC_CUT_SCALE_FACTOR = 0x807F0408,
  SCE_AUDIODEC_ERROR_AC3_INVALID_LOW_FREQUENCY_DYNAMIC_BOOST_SCALE_FACTOR = 0x807F0409,
  SCE_AUDIODEC_ERROR_AC3_INVALID_OUTPUT_CHANNEL_ROUTING = 0x807F040A,
  SCE_AUDIODEC_ERROR_M2BC_INVALID_DOWNMIX = 0x807F0A00,
  SCE_AUDIODEC_ERROR_M2BC_INVALID_SURROUND_CHANNEL_INTERLEAVE_ORDER = 0x807F0A01,
  SCE_AUDIODEC_ERROR_AT9_INVALID_CONFIG_DATA = 0x807F1000,
  SCE_AUDIODEC_ERROR_VORBIS_INVALID_RAW_STREAM_MODE = 0x807F1100,
  SCE_AUDIODEC_ERROR_OPUS_CELT_INVALID_SAMPLE_RATE = 0x807F1200,
  SCE_AUDIODEC_ERROR_OPUS_CELT_INVALID_IN_BAND_FORWARD_ERROR_CORRECTION = 0x807F1201,
  SCE_AUDIODEC_ERROR_OPUS_CELT_INVALID_GAIN_ADJUSTMENT = 0x807F1202,
  SCE_AUDIODEC_ERROR_OPUS_CELT_INVALID_PACKET_LOSS = 0x807F1203,
  SCE_AUDIODEC_ERROR_OPUS_CELT_INVALID_RESET_STATE = 0x807F1204,
  SCE_AUDIODEC_ERROR_OPUS_CELT_INVALID_MAX_CHANNELS = 0x807F1205,
  SCE_AUDIODEC_ERROR_OPUS_CELT_INVALID_ACCESS_UNIT_FORMAT = 0x807F1206,
  SCE_AUDIODEC_ERROR_TRHD_INVALID_PRESENTATION_MODE = 0x807F2000,
  SCE_AUDIODEC_ERROR_TRHD_INVALID_LOSSLESS = 0x807F2001,
  SCE_AUDIODEC_ERROR_TRHD_INVALID_DRC_ENABLE = 0x807F2002,
  SCE_AUDIODEC_ERROR_TRHD_INVALID_DRC_CUT = 0x807F2003,
  SCE_AUDIODEC_ERROR_TRHD_INVALID_DRC_BOOST = 0x807F2004,
  SCE_AUDIODEC_ERROR_TRHD_INVALID_NFRAME_DECODE = 0x807F2005,
  SCE_AUDIODEC_ERROR_INVALID_PRIORITY = 0x807FF000,
  SCE_ULT_ERROR_NULL = 0x80810001,
  SCE_ULT_ERROR_ALIGNMENT = 0x80810002,
  SCE_ULT_ERROR_RANGE = 0x80810003,
  SCE_ULT_ERROR_INVALID = 0x80810004,
  SCE_ULT_ERROR_PERMISSION = 0x80810005,
  SCE_ULT_ERROR_STATE = 0x80810006,
  SCE_ULT_ERROR_BUSY = 0x80810007,
  SCE_ULT_ERROR_AGAIN = 0x80810008,
  SCE_ULT_ERROR_FATAL = 0x80810009,
  SCE_ULT_ERROR_NOT_INITIALIZE = 0x8081000A,
  SCE_FIOS_ERROR_UNIMPLEMENTED = 0x80820000,
  SCE_FIOS_ERROR_CANT_ALLOCATE_OP = 0x80820001,
  SCE_FIOS_ERROR_CANT_ALLOCATE_FH = 0x80820002,
  SCE_FIOS_ERROR_CANT_ALLOCATE_DH = 0x80820003,
  SCE_FIOS_ERROR_CANT_ALLOCATE_CHUNK = 0x80820004,
  SCE_FIOS_ERROR_BAD_PATH = 0x80820005,
  SCE_FIOS_ERROR_BAD_PTR = 0x80820006,
  SCE_FIOS_ERROR_BAD_OFFSET = 0x80820007,
  SCE_FIOS_ERROR_BAD_SIZE = 0x80820008,
  SCE_FIOS_ERROR_BAD_IOVCNT = 0x80820009,
  SCE_FIOS_ERROR_BAD_OP = 0x8082000A,
  SCE_FIOS_ERROR_BAD_FH = 0x8082000B,
  SCE_FIOS_ERROR_BAD_DH = 0x8082000C,
  SCE_FIOS_ERROR_BAD_ALIGNMENT = 0x8082000D,
  SCE_FIOS_ERROR_NOT_A_FILE = 0x8082000E,
  SCE_FIOS_ERROR_NOT_A_DIRECTORY = 0x8082000F,
  SCE_FIOS_ERROR_EOF = 0x80820010,
  SCE_FIOS_ERROR_TIMEOUT = 0x80820011,
  SCE_FIOS_ERROR_CANCELLED = 0x80820012,
  SCE_FIOS_ERROR_ACCESS = 0x80820013,
  SCE_FIOS_ERROR_DECOMPRESSION = 0x80820014,
  SCE_FIOS_ERROR_READ_ONLY = 0x80820015,
  SCE_FIOS_ERROR_WRITE_ONLY = 0x80820016,
  SCE_FIOS_ERROR_MEDIA_GONE = 0x80820017,
  SCE_FIOS_ERROR_PATH_TOO_LONG = 0x80820018,
  SCE_FIOS_ERROR_TOO_MANY_OVERLAYS = 0x80820019,
  SCE_FIOS_ERROR_BAD_OVERLAY = 0x8082001A,
  SCE_FIOS_ERROR_BAD_ORDER = 0x8082001B,
  SCE_FIOS_ERROR_BAD_INDEX = 0x8082001C,
  SCE_FIOS_ERROR_EVENT_NOT_HANDLED = 0x8082001D,
  SCE_FIOS_ERROR_BUSY = 0x8082001E,
  SCE_FIOS_ERROR_BAD_ARCHIVE = 0x8082001F,
  SCE_FIOS_ERROR_BAD_RESOLVE_TYPE = 0x80820020,
  SCE_FIOS_ERROR_BAD_FLAGS = 0x80820021,
  SCE_FIOS_ERROR_UNKNOWN = 0x80820022,
  SCE_FIOS_ERROR_ALREADY_EXISTS = 0x80820023,
  SCE_INIFILE_ERROR_GENERIC = 0x80840000,
  SCE_INIFILE_ERROR_NO_MEMORY = 0x80840001,
  SCE_INIFILE_ERROR_NOT_INITIALIZED = 0x80840002,
  SCE_INIFILE_ERROR_INITIALIZE_FAILED = 0x80840003,
  SCE_INIFILE_ERROR_INVALID_FILE = 0x80840004,
  SCE_INIFILE_ERROR_EMPTY_FILE = 0x80840005,
  SCE_INIFILE_ERROR_INVALID_ARGUMEN = 0x80840006,
  SCE_INIFILE_ERROR_INVALID_OPERATION = 0x80840007,
  SCE_INIFILE_ERROR_BUFFER_TOO_SMALL = 0x80840008,
  SCE_INIFILE_ERROR_FILE_NOT_FOUND = 0x80840009,
  SCE_INIFILE_ERROR_FILE_READ_OPEN_FAILED = 0x8084000A,
  SCE_INIFILE_ERROR_FILE_WRITE_OPEN_FAILED = 0x8084000B,
  SCE_INIFILE_ERROR_FILE_READ_FAILED = 0x8084000C,
  SCE_INIFILE_ERROR_FILE_WRITE_FAILED = 0x8084000D,
  SCE_INIFILE_ERROR_INVALID_KEY = 0x8084000E,
  SCE_INIFILE_ERROR_INVALID_START_POSITION = 0x8084000F,
  SCE_INIFILE_ERROR_KEY_NOT_FOUND = 0x80840010,
  SCE_INIFILE_ERROR_VALUE_EXCEEDS_BUFFER_LENGTH = 0x80840011,
  SCE_INIFILE_ERROR_NOT_IMPLEMENTED = 0x80840012,
  SCE_INIFILE_ERROR_INTERNAL_ERROR = 0x80840013,
  SCE_INIFILE_ERROR_FILE_NOT_OPENED = 0x80840014,
  SCE_JSON_ERROR_PARSE_INVALID_CHAR = 0x80848101,
  SCE_JSON_ERROR_NOMEM = 0x80848102,
  SCE_JSON_ERROR_NOFILE = 0x80848103,
  SCE_JSON_ERROR_NOROOT = 0x80848104,
  SCE_JSON_ERROR_NOBUF = 0x80848105,
  SCE_JSON_ERROR_NOINIT = 0x80848110,
  SCE_JSON_ERROR_MULTIPLEINIT = 0x80848111,
  SCE_JSON_ERROR_ALREADY_SET = 0x80848112,
  SCE_JSON_ERROR_NOT_SUPPORTED = 0x80848113,
  SCE_JSON_ERROR_SPECIAL_FLOAT = 0x80848114,
  SCE_JSON_ERROR_NOT_EXIST_KEY = 0x80848115,
  SCE_JSON_ERROR_NOT_EXIST_INDEX = 0x80848116,
  SCE_JSON_ERROR_NOT_A_OBJECT = 0x80848117,
  SCE_JSON_ERROR_NOT_A_CONTAINER = 0x80848118,
  SCE_JSON_ERROR_INVALID_ARGUMENT = 0x80848120,
  SCE_TEXT_COLLATOR_ERROR_UNKNOWN = 0x80849000,
  SCE_TEXT_COLLATOR_ERROR_INVALID_ARGUMENT = 0x80849001,
  SCE_TEXT_COLLATOR_ERROR_NO_MEMORY = 0x80849002,
  SCE_XML_ERROR_GENERIC_ERROR = 0x80850000,
  SCE_XML_ERROR_NO_MEMORY = 0x80850001,
  SCE_XML_ERROR_NOT_INITIALIZED = 0x80850002,
  SCE_XML_ERROR_INVALID_ARGUMENT = 0x80850003,
  SCE_XML_ERROR_NOT_SUPPORTED = 0x80850004,
  SCE_XML_ERROR_INITIALIZE_FAILED = 0x80850005,
  SCE_XML_ERROR_INVALID_BIN_XML = 0x80850006,
  SCE_XML_ERROR_PARSER_BUSY = 0x80850007,
  SCE_XML_ERROR_XML_UNEXPEXTED_EO_F = 0x80850008,
  SCE_XML_ERROR_XML_SYNTAX_ERROR = 0x80850009,
  SCE_XML_ERROR_XML_END_TAG_MISMATCH = 0x8085000A,
  SCE_XML_ERROR_XML_INVALID_CHAR = 0x8085000B,
  SCE_XML_ERROR_XML_INVALID_DEC_VALUE = 0x8085000C,
  SCE_XML_ERROR_XML_INVALID_HEX_VALUE = 0x8085000D,
  SCE_XML_ERROR_XML_CLOSING_ANGLE_BRACKET_CHAR_NOT_FOUND = 0x8085000E,
  SCE_XML_ERROR_XML_EQUALITY_CHAR_NOT_FOUND = 0x8085000F,
  SCE_XML_ERROR_XML_SEMI_COLON_CHAR_NOT_FOUND = 0x80850010,
  SCE_XML_ERROR_XML_QUOTE_CHAR_NOT_FOUND = 0x80850011,
  SCE_XML_ERROR_XML_END_OF_COMMENT_NOT_FOUND = 0x80850012,
  SCE_XML_ERROR_XML_END_OF_CD_SECT_NOT_FOUND = 0x80850013,
  SCE_XML_ERROR_XML_END_OF_DTD_NOT_FOUND = 0x80850014,
  SCE_XML_ERROR_XML_UNKNOWN_ENCODING = 0x80850015,
  SCE_XML_ERROR_XML_HANDLER_NOT_SET = 0x80850016,
  SCE_XML_ERROR_XML_INVALID_PI = 0x80850017,
  SCE_XML_ERROR_XML_INVALID_DOCUMENT_ELEMENT = 0x80850018,
  SCE_XML_ERROR_XML_DOCUMENT_ELEMENT_NOT_FOUND = 0x80850019,
  SCE_XML_ERROR_XML_DUPLICATE_ATTR_NAME = 0x8085001A,
  SCE_XML_ERROR_DOM_ERROR = 0x80850200,
  SCE_XML_ERROR_DOM_NODE_NOT_FOUND = 0x80850201,
  SCE_XML_ERROR_DOM_READ_ONLY_ERROR = 0x80850202,
  SCE_XML_ERROR_DOM_MAX_UNIQUE_ELEMENT_ERROR = 0x80850203,
  SCE_XML_ERROR_DOM_MAX_UNIQUE_ATTR_ERROR = 0x80850204,
  SCE_XML_ERROR_DOM_MAX_NUM_OF_ATTR_ERROR = 0x80850205,
  SCE_XML_ERROR_DOM_MAX_SIZE_OF_ELEMENT_NAME_ERROR = 0x80850206,
  SCE_XML_ERROR_DOM_MAX_SIZE_OF_ATTR_NAME_ERROR = 0x80850207,
  SCE_XML_ERROR_DOM_MAX_SIZE_OF_ATTR_VALUE_ERROR = 0x80850208,
  SCE_XML_ERROR_DOM_INVALID_ENITITY = 0x80850209,
  SCE_XML_ERROR_DOM_INVALID_NODE_TYPE = 0x8085020A,
  SCE_BXCE_ERROR_NO_MEMORY = 0x80851000,
  SCE_BXCE_ERROR_NOT_INITIALIZED = 0x80851001,
  SCE_BXCE_ERROR_INVALID_ARGUMENT = 0x80851002,
  SCE_BXCE_ERROR_UNKOWN_ERROR = 0x80851003,
  SCE_BXCE_ERROR_NOT_SUPPORTED = 0x80851004,
  SCE_BXCE_ERROR_INTERNAL_ERROR = 0x80851005,
  SCE_BXCE_ERROR_INIT_FAILED = 0x80851006,
  SCE_BXCE_ERROR_INVALID_BX = 0x80851007,
  SCE_BXCE_ERROR_PARSER_BUSY = 0x80851008,
  SCE_BXCE_ERROR_XML_ERROR = 0x80851009,
  SCE_BXCE_ERROR_XML_UNEXPEXTED_EOF = 0x8085100A,
  SCE_BXCE_ERROR_XML_SYNTAX_ERROR = 0x8085100B,
  SCE_BXCE_ERROR_XML_TAG_NOT_CLOSED = 0x8085100C,
  SCE_BXCE_ERROR_XML_END_TAG_MISMATCH = 0x8085100D,
  SCE_BXCE_ERROR_XML_UNEXPECTED_END_TAG = 0x8085100E,
  SCE_BXCE_ERROR_XML_UNKNOWN_TOKEN = 0x8085100F,
  SCE_BXCE_ERROR_XML_UNEXPECTED_TOKEN = 0x80851010,
  SCE_BXCE_ERROR_XML_UNEXPECTED_CHAR = 0x80851011,
  SCE_BXCE_ERROR_XML_EXPECTED_CLOSING_SQUARE_BRACKET = 0x80851012,
  SCE_BXCE_ERROR_XML_EXPECTED_CLOSING_ANGLE_BRACKET = 0x80851013,
  SCE_BXCE_ERROR_XML_EXPECTED_EQUALITY_OPERATOR = 0x80851014,
  SCE_BXCE_ERROR_XML_EXPECTED_SEMI_COLON = 0x80851015,
  SCE_BXCE_ERROR_XML_END_OF_COMMENT_NOT_FOUND = 0x80851016,
  SCE_BXCE_ERROR_XML_END_OF_CD_SECT_NOT_FOUND = 0x80851017,
  SCE_BXCE_ERROR_XML_UNEXPECTED_SPACE = 0x80851018,
  SCE_BXCE_ERROR_XML_EXPECTED_QUOTE = 0x80851019,
  SCE_BXCE_ERROR_XML_EXPECTED_SPACE = 0x8085101A,
  SCE_BXCE_ERROR_XML_EXPECTED_ELEMENT_NAME = 0x8085101B,
  SCE_BXCE_ERROR_XML_EXPECTED_ATTRIBUTE_NAME = 0x8085101C,
  SCE_BXCE_ERROR_XML_EXPECTED_POSITIVE_INTEGER = 0x8085101D,
  SCE_BXCE_ERROR_XML_EXPECTED_ATTRIBUTE_VALUE = 0x8085101E,
  SCE_BXCE_ERROR_XML_UNEXPECTED_CHARACTER = 0x8085101F,
  SCE_BXCE_ERROR_XML_UNKNOWN_ENCODING = 0x80851020,
  SCE_BXCE_ERROR_XML_EXPECTED_DOCUMENT_ELEMENT = 0x80851021,
  SCE_BXCE_ERROR_XML_INVALID_CONTEXT_ID = 0x80851022,
  SCE_BXCE_ERROR_XML_PROBLEMS_OPENING_STREAM = 0x80851023,
  SCE_BXCE_ERROR_XML_NULL_HANDLER = 0x80851024,
  SCE_BXCE_ERROR_XML_INVALID_PI = 0x80851025,
  SCE_BXCE_ERROR_XML_INVALID_DOCUMENT_ELEMENT = 0x80851026,
  SCE_BXCE_ERROR_XML_DOCUMENT_ELEMENT_NOT_FOUND = 0x80851027,
  SCE_BXCE_ERROR_XML_END_OF_DECL_NOT_FOUND = 0x80851028,
  SCE_BXCE_ERROR_XML_END_OF_DTD_NOT_FOUND = 0x80851029,
  SCE_BXCE_ERROR_XML_DUPLICATE_ATTRIBUTE_NAME = 0x8085102A,
  SCE_BXCE_ERROR_XML_PARSE_IN_PROGRESS = 0x80851100,
  SCE_BXCE_ERROR_XML_PARSE_ABORTED = 0x80851101,
  SCE_BXCE_ERROR_XML_PARSE_SUSPENDED = 0x80851102,
  SCE_BXCE_ERROR_XML_INVALID_CONTEXT = 0x80851103,
  SCE_BXCE_ERROR_DOM_HIERARCHY_REQUEST_ERROR = 0x80851200,
  SCE_BXCE_ERROR_DOM_INDEX_SIZE_ERROR = 0x80851201,
  SCE_BXCE_ERROR_DOM_INVALID_ACCESS_ERROR = 0x80851202,
  SCE_BXCE_ERROR_DOM_INVALID_STATE_ERROR = 0x80851203,
  SCE_BXCE_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERROR = 0x80851204,
  SCE_BXCE_ERROR_DOM_NOT_FOUND_ERROR = 0x80851205,
  SCE_BXCE_ERROR_DOM_NOT_SUPPORTED_ERROR = 0x80851206,
  SCE_BXCE_ERROR_DOM_NO_REFERENCE_GIVEN = 0x80851207,
  SCE_BXCE_ERROR_DOM_WRONG_DOCUMENT_ERROR = 0x80851208,
  SCE_BXCE_ERROR_DOM_READ_ONLY_ERROR = 0x80851209,
  SCE_BXCE_ERROR_DOM_EMPTY_ELEMENT_ERROR = 0x8085120A,
  SCE_BXCE_ERROR_DOM_MAX_NUM_OF_ATTR_ERROR = 0x8085120B,
  SCE_BXCE_ERROR_DOM_MAX_UNIQUE_ELEMENT_ERROR = 0x8085120C,
  SCE_BXCE_ERROR_DOM_MAX_UNIQUE_ATTR_ERROR = 0x8085120D,
  SCE_BXCE_ERROR_DOM_ENITITY_ERROR = 0x8085120E,
  SCE_BXCE_ERROR_DOM_NOT_ALLOWED_NODE_TYPE = 0x8085120F,
  SCE_BXCE_ERROR_DOM_EXCEED_LIMIT = 0x80851210,
  SCE_BXCE_ERROR_XPATH_EXPRESSION_ERROR = 0x80851300,
  SCE_BXCE_ERROR_MX_ERROR = 0x80851400,
  SCE_BXCE_ERROR_MX_INVALID_USAGE = 0x80851401,
  SCE_BXCE_ERROR_MX_MULTIPLE_INIT = 0x80851402,
  SCE_BXCE_ERROR_MX_NO_SUCH_DESTINATION = 0x80851403,
  SCE_BXCE_ERROR_MX_CONNECTION_ESTABLISH_ERROR = 0x80851404,
  SCE_BXCE_ERROR_MX_CONNECTION_START_ERROR = 0x80851405,
  SCE_BXCE_ERROR_MX_CONNECTION_CLOSE_ERROR = 0x80851406,
  SCE_BXCE_ERROR_MX_CB_FUNC_NOT_FOUND_ERROR = 0x80851407,
  SCE_BXCE_ERROR_MX_DATA_WRITING_ERROR = 0x80851408,
  SCE_BXCE_ERROR_MX_DATA_WRITING_TIMEOUT = 0x80851409,
  SCE_BXCE_ERROR_MX_DATA_READING_ERROR = 0x8085140A,
  SCE_BXCE_ERROR_MX_DATA_READING_TIMEOUT = 0x8085140B,
  SCE_BXCE_ERROR_MX_SERVER_REJECT_ERROR = 0x8085140C,
  SCE_BXCE_ERROR_MX_SERVER_NOT_ALLOWED_ERROR = 0x8085140D,
  SCE_BXCE_ERROR_MX_SERVER_INTERNAL_ERROR = 0x8085140E,
  SCE_BXCE_ERROR_MX_INVALID_MESSAGE = 0x8085140F,
  SCE_BXCE_ERROR_MX_API_TIMEOUT = 0x80851410,
  SCE_BXCE_ERROR_MX_REQUEST_CANCELED = 0x80851411,
  SCE_BXCE_ERROR_MX_CANCEL_FAILED = 0x80851412,
  SCE_BXCE_ERROR_MX_HTTP_CONNECT_FATAL_ERROR = 0x80851413,
  SCE_BXCE_ERROR_MX_HTTP_SOCKET_OPEN_ERROR = 0x80851414,
  SCE_BXCE_ERROR_MX_HTTP_DATA_REMAINING = 0x80851415,
  SCE_BXCE_ERROR_MX_HTTPS_AUTHENTICATION_ERROR = 0x80851416,
  SCE_BXCE_ERROR_MX_HTTPS_CERTIFICATION_NOT_FOUND = 0x80851417,
  SCE_BXCE_ERROR_MX_REMOTE_SIDE_NOT_RESPOND = 0x80851418,
  SCE_BXCE_ERROR_MX_BAD_XML = 0x80851419,
  SCE_BXCE_ERROR_MX_BUSY = 0x8085141A,
  SCE_BXCE_ERROR_MX_THREAD_CREATE_ERROR = 0x8085141B,
  SCE_BXCE_ERROR_UTILS_INVALID_XML_CHAR = 0x80851500,
  SCE_BXCE_ERROR_UTILS_INVALID_XML_NAME = 0x80851501,
  SCE_BXCE_ERROR_UTILS_INVALID_ASCII_DIGIT = 0x80851502,
  SCE_BXCE_ERROR_UTILS_INVALID_HEX_VALUE = 0x80851503,
  SCE_BXCE_ERROR_UTILS_SERIALIZER_BUFFER_TOO_SMALL = 0x80851600,
  SCE_BXCE_ERROR_UTILS_SERIALIZER_CONTINUE = 0x80851601,
  SCE_BXCE_ERROR_UTILS_SERIALIZER_FINA = 0x80851602,
  SCE_BXCE_ERROR_MEM_RETRY = 0x80851700,
  SCE_NP_DRM_ERROR_NOT_INITIALIZED = 0x80870001,
  SCE_NP_DRM_ERROR_OUT_OF_MEMORY = 0x80870002,
  SCE_NP_DRM_ERROR_PERM = 0x80870003,
  SCE_NP_DRM_ERROR_UNKNOWN_VERSION = 0x80870004,
  SCE_NP_DRM_ERROR_INVALID_ARG = 0x80870005,
  SCE_NP_DRM_ERROR_INVALID_FORMAT = 0x80870006,
  SCE_NP_DRM_ERROR_BROKEN_DATA = 0x80870007,
  SCE_NP_DRM_ERROR_NOT_FOUND = 0x80870008,
  SCE_NP_DRM_ERROR_MAX_ACTIVATION = 0x80870009,
  SCE_NP_DRM_ERROR_CONSOLE_MISMATCH = 0x8087000A,
  SCE_NP_DRM_ERROR_NPENV_MISMATCH = 0x8087000B,
  SCE_NP_DRM_ERROR_NOT_ACTIVATED = 0x8087000C,
  SCE_NP_DRM_ERROR_BAD_ACTIVATION = 0x8087000D,
  SCE_NP_DRM_ERROR_CORRUPTED_STORAGE = 0x8087000E,
  SCE_NP_DRM_ERROR_NOT_INCLUDE_KEYS = 0x8087000F,
  SCE_NP_DRM_ERROR_REVOKED_LICENSE = 0x80870010,
  SCE_NP_DRM_ERROR_EXPIRED_LICENSE = 0x80870011,
  SCE_NP_DRM_ERROR_UNOPENED_LICENSE = 0x80870012,
  SCE_NP_DRM_ERROR_NONPROD_MISMATCH = 0x80870013,
  SCE_NP_DRM_ERROR_ACTIVATION_EXPIRED = 0x80870014,
  SCE_SYSTEM_GESTURE_ERROR_INVALID_ARGUMENT = 0x80890001,
  SCE_SYSTEM_GESTURE_ERROR_NOT_SUPPORTED_GESTURE = 0x80890002,
  SCE_SYSTEM_GESTURE_ERROR_NOT_INITIALIZED = 0x80890003,
  SCE_SYSTEM_GESTURE_ERROR_INDEX_OUT_OF_ARRAY = 0x80890004,
  SCE_SYSTEM_GESTURE_ERROR_EVENT_DATA_NOT_FOUND = 0x80890005,
  SCE_SYSTEM_GESTURE_ERROR_INVALID_HANDLE = 0x80890006,
  SCE_SYSTEM_GESTURE_ERROR_INVALID_TOUCH_AREA = 0x80890007,
  SCE_SYSTEM_GESTURE_ERROR_NO_TOUCH_AREA_INFORMATION = 0x80890008,
  SCE_SYSTEM_GESTURE_ERROR_OUT_OF_RECOGNIZER = 0x80890009,
  SCE_SYSTEM_GESTURE_ERROR_ALREADY_OPENED = 0x8089000A,
  SCE_SHADER_BINARY_ERROR_INVALID_ADDR = 0x80910001,
  SCE_SHADER_BINARY_ERROR_INVALID_SIZE = 0x80910002,
  SCE_PAD_ERROR_INVALID_ARG = 0x80920001,
  SCE_PAD_ERROR_INVALID_PORT = 0x80920002,
  SCE_PAD_ERROR_INVALID_HANDLE = 0x80920003,
  SCE_PAD_ERROR_ALREADY_OPENED = 0x80920004,
  SCE_PAD_ERROR_NOT_INITIALIZED = 0x80920005,
  SCE_PAD_ERROR_INVALID_LIGHTBAR_SETTING = 0x80920006,
  SCE_PAD_ERROR_DEVICE_NOT_CONNECTED = 0x80920007,
  SCE_PAD_ERROR_NO_HANDLE = 0x80920008,
  SCE_PAD_ERROR_FATAL = 0x809200FF,
  SCE_PAD_ERROR_NOT_PERMITTED = 0x80920101,
  SCE_PAD_ERROR_INVALID_BUFFER_LENGTH = 0x80920102,
  SCE_PAD_ERROR_INVALID_REPORT_LENGTH = 0x80920103,
  SCE_PAD_ERROR_INVALID_REPORT_ID = 0x80920104,
  SCE_PAD_ERROR_SEND_AGAIN = 0x80920105,
  SCE_AJM_ERROR_UNKNOWN = 0x80930001,
  SCE_AJM_ERROR_INVALID_CONTEXT = 0x80930002,
  SCE_AJM_ERROR_INVALID_INSTANCE = 0x80930003,
  SCE_AJM_ERROR_INVALID_BATCH = 0x80930004,
  SCE_AJM_ERROR_INVALID_PARAMETER = 0x80930005,
  SCE_AJM_ERROR_OUT_OF_MEMORY = 0x80930006,
  SCE_AJM_ERROR_OUT_OF_RESOURCES = 0x80930007,
  SCE_AJM_ERROR_CODEC_NOT_SUPPORTED = 0x80930008,
  SCE_AJM_ERROR_CODEC_ALREADY_REGISTERED = 0x80930009,
  SCE_AJM_ERROR_CODEC_NOT_REGISTERED = 0x8093000A,
  SCE_AJM_ERROR_WRONG_REVISION_FLAG = 0x8093000B,
  SCE_AJM_ERROR_FLAG_NOT_SUPPORTED = 0x8093000C,
  SCE_AJM_ERROR_BUSY = 0x8093000D,
  SCE_AJM_ERROR_BAD_PRIORITY = 0x8093000E,
  SCE_AJM_ERROR_IN_PROGRESS = 0x8093000F,
  SCE_AJM_ERROR_RETRY = 0x80930010,
  SCE_AJM_ERROR_MALFORMED_BATCH = 0x80930011,
  SCE_AJM_ERROR_JOB_CREATION = 0x80930012,
  SCE_AJM_ERROR_INVALID_OPCODE = 0x80930013,
  SCE_AJM_ERROR_PRIORITY_VIOLATION = 0x80930014,
  SCE_AJM_ERROR_BUFFER_TOO_BIG = 0x80930015,
  SCE_AJM_ERROR_INVALID_ADDRESS = 0x80930016,
  SCE_AJM_ERROR_CANCELLED = 0x80930017,
  SCE_LNC_UTIL_ERROR_NOT_INITIALIZED = 0x80940001,
  SCE_LNC_UTIL_ERROR_NO_SESSION_MEMORY = 0x80940002,
  SCE_LNC_UTIL_ERROR_NO_APP_INFO = 0x80940004,
  SCE_LNC_UTIL_ERROR_INVALID_PARAM = 0x80940005,
  SCE_LNC_UTIL_ERROR_SETUP_FS_SANDBOX = 0x80940006,
  SCE_LNC_UTIL_ERROR_APPHOME_EBOOTBIN_NOT_FOUND = 0x80940008,
  SCE_LNC_UTIL_ERROR_APPHOME_PARAMSFO_NOT_FOUND = 0x80940009,
  SCE_LNC_UTIL_ERROR_NO_LOGIN_USER = 0x8094000A,
  SCE_LNC_UTIL_ERROR_DEVKIT_EXPIRED = 0x8094000B,
  SCE_LNC_UTIL_ERROR_ALREADY_RUNNING = 0x8094000C,
  SCE_LNC_UTIL_ERROR_LAUNCH_DISABLED_BY_MEMORY_MODE = 0x8094000D,
  SCE_LNC_UTIL_ERROR_NO_SHELL_UI = 0x8094000E,
  SCE_LNC_UTIL_ERROR_NOT_ALLOWED = 0x8094000F,
  SCE_LNC_UTIL_ERROR_ALREADY_RUNNING_KILL_NEEDED = 0x80940010,
  SCE_LNC_UTIL_ERROR_ALREADY_RUNNING_SUSPEND_NEEDED = 0x80940011,
  SCE_LNC_UTIL_ERROR_CANNOT_RESUME_INITIAL_USER_NEEDED = 0x80940012,
  SCE_LNC_UTIL_ERROR_OPTICAL_DISC_DRIVE = 0x80940013,
  SCE_LNC_UTIL_ERROR_NO_SFOKEY_IN_APP_INFO = 0x80940014,
  SCE_LNC_UTIL_ERROR_APP_NOT_IN_BACKGROUND = 0x80940015,
  SCE_LNC_UTIL_ERROR_SUSPEND_BLOCK_TIMEOUT = 0x80940017,
  SCE_LNC_UTIL_ERROR_ALREADY_INITIALIZED = 0x80940018,
  SCE_LNC_UTIL_ERROR_INVALID_STATE = 0x80940019,
  SCE_LNC_UTIL_ERROR_IN_LOGOUT_PROCESSING = 0x8094001A,
  SCE_LNC_UTIL_ERROR_IN_SPECIAL_RESUME = 0x8094001B,
  SCE_LNC_UTIL_ERROR_INVALID_TITLE_ID = 0x8094001C,
  SCE_LNC_UTIL_ERROR_APP_ALREADY_SUSPENDED = 0x8094001D,
  SCE_LNC_UTIL_ERROR_APP_ALREADY_RESUMED = 0x8094001E,
  SCE_LNC_UTIL_ERROR_WAITING_READY_FOR_SUSPEND_TIMEOUT = 0x80940021,
  SCE_LNC_UTIL_ERROR_UNRESUMABLE_CAUSE_REMOTE_PLAY = 0x80940022,
  SCE_LNC_UTIL_ERROR_UNRESUMABLE_CAUSE_VIDEOPLAYER_SETTING = 0x80940023,
  SCE_LNC_UTIL_ERROR_UNRESUMABLE_CAUSE_NOT_SUPPORTED_BY_DISPLAY = 0x80940024,
  SCE_LNC_UTIL_ERROR_AGAIN = 0x80940025,
  SCE_LNC_UTIL_ERROR_NOT_SUPPORTED = 0x80940026,
  SCE_LNC_UTIL_ERROR_UNKNOWN_CATEGORY = 0x80940027,
  SCE_LNC_UTIL_ERROR_SUSPEND_APP_BY_DEBUGGER_TIMEOUT = 0x80940028,
  SCE_LNC_UTIL_ERROR_RESUME_APP_BY_DEBUGGER_TIMEOUT = 0x80940029,
  SCE_LNC_UTIL_ERROR_NO_MAPPING_FILE = 0x8094002A,
  SCE_LNC_UTIL_ERROR_INVALID_MAPPING_FILE = 0x8094002B,
  SCE_LNC_UTIL_ERROR_SUSPEND_BLOCK_BY_LNC = 0x8094002C,
  SCE_LNC_UTIL_ERROR_UNRESUMABLE_CAUSE_HMU_ON = 0x8094002D,
  SCE_LNC_UTIL_ERROR_EXTRA_AUDIO_DEVICE_CPU_BUSY = 0x8094002E,
  SCE_LNC_UTIL_ERROR_CDLG_EXEC_STATE = 0x8094002F,
  SCE_LNC_UTIL_ERROR_UNRESUMABLE_CAUSE_VR_NOT_SUPPORTED = 0x80940030,
  SCE_LNC_UTIL_ERROR_LAUNCH_APP_NOT_FOUND = 0x80940031,
  SCE_LNC_UTIL_ERROR_LAUNCH_CDLG_WITHOUT_PARENT = 0x80940032,
  SCE_LNC_UTIL_ERROR_INVALID_CONTENTS_LOCATION = 0x80940033,
  SCE_LNC_UTIL_ERROR_DEVFS_UNMOUNT_FAILED = 0x80940034,
  SCE_LNC_UTIL_ERROR_COREDUMP_IN_PROGRESS = 0x80940035,
  SCE_LNC_UTIL_ERROR_APP_MOVE_IN_PROGRESS = 0x80940036,
  SCE_LNC_UTIL_ERROR_UNRESUMABLE_CAUSE_HMU_OFF = 0x80940037,
  SCE_LNC_UTIL_ERROR_FS_SANDBOX_RMDIR_FAILED = 0x80940038,
  SCE_LNC_UTIL_ERROR_PRX_SCE_MODULE_LOAD = 0x80940039,
  SCE_LNC_UTIL_ERROR_EVENT_CALLBACK_TIMEOUT = 0x8094003A,
  SCE_LNC_UTIL_ERROR_OBSOLETE_VIDEO_SERVICE_WEB_APP = 0x80940040,
  SCE_SSL_ERROR_ERR_RTOS = 0x809516A8,
  SCE_SSL_ERROR_ERR_RTOS_THREAD_CREATE = 0x809516A9,
  SCE_SSL_ERROR_ERR_RTOS_MUTEX_CREATE = 0x809516AA,
  SCE_SSL_ERROR_ERR_RTOS_MUTEX_WAIT = 0x809516AB,
  SCE_SSL_ERROR_ERR_RTOS_MUTEX_RELEASE = 0x809516AC,
  SCE_SSL_ERROR_ERR_RTOS_MUTEX_FREE = 0x809516AD,
  SCE_SSL_ERROR_ERR_RTOS_GMT_TIME_NOT_AVAILABLE = 0x809516AE,
  SCE_SSL_ERROR_ERR_RTOS_WRAP_MUTEX_WAIT = 0x809516AF,
  SCE_SSL_ERROR_ERR_RTOS_WRAP_MUTEX_RELEASE = 0x809516B0,
  SCE_SSL_ERROR_ERR_TCP = 0x8095170C,
  SCE_SSL_ERROR_SOCKET_CLOSED = 0x8095170D,
  SCE_SSL_ERROR_ERR_TCP_READ_ERROR = 0x8095170E,
  SCE_SSL_ERROR_ERR_TCP_READ_BLOCK_FAIL = 0x8095170F,
  SCE_SSL_ERROR_READ_TIMEOUT = 0x80951710,
  SCE_SSL_ERROR_ERR_TCP_WRITE_ERROR = 0x80951711,
  SCE_SSL_ERROR_ERR_TCP_WRITE_BLOCK_FAIL = 0x80951712,
  SCE_SSL_ERROR_ERR_TCP_INIT_FAIL = 0x80951713,
  SCE_SSL_ERROR_ERR_TCP_LISTEN_SOCKET_ERROR = 0x80951714,
  SCE_SSL_ERROR_ERR_TCP_LISTEN_BIND_ERROR = 0x80951715,
  SCE_SSL_ERROR_ERR_TCP_LISTEN_ERROR = 0x80951716,
  SCE_SSL_ERROR_ERR_TCP_ACCEPT_ERROR = 0x80951717,
  SCE_SSL_ERROR_ERR_TCP_SOCKOPT_ERROR = 0x80951718,
  SCE_SSL_ERROR_ERR_TCP_CONNECT_CREATE = 0x80951719,
  SCE_SSL_ERROR_ERR_TCP_CONNECT_ERROR = 0x8095171A,
  SCE_SSL_ERROR_ERR_TCP_SOCKET_SHARE = 0x8095171B,
  SCE_SSL_ERROR_ERR_TCP_GETSOCKNAME = 0x8095171C,
  SCE_SSL_ERROR_ERR_TCP_ACCEPT_CREATE = 0x8095171D,
  SCE_SSL_ERROR_ERR_TCP_LISTEN_ADDRINFO = 0x8095171E,
  SCE_SSL_ERROR_ERR_TCP_TOO_MANY_SOCKETS = 0x8095171F,
  SCE_SSL_ERROR_ERR_TCP_NO_SUCH_SOCKET = 0x80951720,
  SCE_SSL_ERROR_ERR_TCP_END_OF_SOCKET_LIST = 0x80951721,
  SCE_SSL_ERROR_ERR_TCP_SELECT_ERROR = 0x80951722,
  SCE_SSL_ERROR_ERR_TCP_CONNECT_EALREADY = 0x80951723,
  SCE_SSL_ERROR_ERR_TCP_CONNECT_INPROGRESS = 0x80951724,
  SCE_SSL_ERROR_ERR_TCP_WOULDBLOCK = 0x80951725,
  SCE_SSL_ERROR_ERR_GENERAL = 0x80951770,
  SCE_SSL_ERROR_ERR_NULL_POINTER = 0x80951771,
  SCE_SSL_ERROR_ERR_DIVIDE_BY_ZERO = 0x80951772,
  SCE_SSL_ERROR_BAD_LENGTH = 0x80951773,
  SCE_SSL_ERROR_ERR_BAD_MODULO = 0x80951774,
  SCE_SSL_ERROR_ERR_EVEN_NUMBER = 0x80951775,
  SCE_SSL_ERROR_ERR_MISSING_STATE_CHANGE = 0x80951776,
  SCE_SSL_ERROR_ERR_BUFFER_OVERFLOW = 0x80951777,
  SCE_SSL_ERROR_INDEX_OOB = 0x80951778,
  SCE_SSL_ERROR_ERR_NOT_FOUND = 0x80951779,
  SCE_SSL_ERROR_INVALID_ARG = 0x8095177A,
  SCE_SSL_ERROR_ERR_FALSE = 0x8095177B,
  SCE_SSL_ERROR_EOF = 0x8095177C,
  SCE_SSL_ERROR_BAD_EXPONENT = 0x8095177D,
  SCE_SSL_ERROR_INCOMPLETE_SEARCH = 0x8095177E,
  SCE_SSL_ERROR_INTERNAL_ERROR = 0x8095177F,
  SCE_SSL_ERROR_ERR_MEM = 0x809517D4,
  SCE_SSL_ERROR_OUT_OF_MEMORY = 0x809517D5,
  SCE_SSL_ERROR_ERR_MEM_ALLOC_PTR = 0x809517D6,
  SCE_SSL_ERROR_ERR_MEM_ALLOC_SIZE = 0x809517D7,
  SCE_SSL_ERROR_ERR_MEM_FREE_PTR = 0x809517D8,
  SCE_SSL_ERROR_ERR_PAYLOAD = 0x80951838,
  SCE_SSL_ERROR_ERR_PAYLOAD_EMPTY = 0x80951839,
  SCE_SSL_ERROR_ERR_PAYLOAD_TOO_LARGE = 0x8095183A,
  SCE_SSL_ERROR_ERR_AUTH = 0x80951900,
  SCE_SSL_ERROR_ERR_AUTH_MESG_FRAGMENTED = 0x80951901,
  SCE_SSL_ERROR_ERR_AUTH_UNEXPECTED_MESG = 0x80951902,
  SCE_SSL_ERROR_ERR_AUTH_FAILED = 0x80951903,
  SCE_SSL_ERROR_ERR_AUTH_BAD_SIGNATURE = 0x80951904,
  SCE_SSL_ERROR_ERR_AUTH_MISCONFIGURED = 0x80951905,
  SCE_SSL_ERROR_ERR_AUTH_MISCONFIGURED_PROMPTS = 0x80951906,
  SCE_SSL_ERROR_ERR_AUTH_UNKNOWN_METHOD = 0x80951907,
  SCE_SSL_ERROR_ERR_BASE64 = 0x80951964,
  SCE_SSL_ERROR_ERR_BASE64_BAD_INPUT = 0x80951965,
  SCE_SSL_ERROR_ERR_BASE64_NOT_INITIALIZED = 0x80951966,
  SCE_SSL_ERROR_ERR_BLOWFISH = 0x809519C8,
  SCE_SSL_ERROR_ERR_BLOWFISH_BAD_LENGTH = 0x809519C9,
  SCE_SSL_ERROR_ERR_DES = 0x80951A2C,
  SCE_SSL_ERROR_ERR_DES_BAD_LENGTH = 0x80951A2D,
  SCE_SSL_ERROR_ERR_DES_BAD_KEY_LENGTH = 0x80951A2E,
  SCE_SSL_ERROR_ERR_DES_CIPHER_FAILED = 0x80951A2F,
  SCE_SSL_ERROR_ERR_3DES = 0x80951A90,
  SCE_SSL_ERROR_ERR_3DES_BAD_LENGTH = 0x80951A91,
  SCE_SSL_ERROR_ERR_3DES_BAD_KEY_LENGTH = 0x80951A92,
  SCE_SSL_ERROR_ERR_3DES_CIPHER_FAILED = 0x80951A93,
  SCE_SSL_ERROR_ERR_KEY_EXCHANGE = 0x80951B58,
  SCE_SSL_ERROR_ERR_BAD_CLIENT_E = 0x80951B59,
  SCE_SSL_ERROR_ERR_RAND = 0x80951BBC,
  SCE_SSL_ERROR_ERR_RAND_SEED_TOO_LARGE = 0x80951BBD,
  SCE_SSL_ERROR_ERR_RAND_CTX_NOT_INITIALIZED = 0x80951BBE,
  SCE_SSL_ERROR_ERR_RAND_TERMINATE_THREADS = 0x80951BBF,
  SCE_SSL_ERROR_ERR_SESSION = 0x80951C84,
  SCE_SSL_ERROR_ERR_SESSION_BAD_PAYLOAD = 0x80951C85,
  SCE_SSL_ERROR_ERR_SESSION_NOT_OPEN = 0x80951C86,
  SCE_SSL_ERROR_ERR_KEY = 0x80951CE8,
  SCE_SSL_ERROR_ERR_BAD_KEY = 0x80951CE9,
  SCE_SSL_ERROR_ERR_BAD_KEY_BLOB = 0x80951CEA,
  SCE_SSL_ERROR_ERR_BAD_KEY_TYPE = 0x80951CEB,
  SCE_SSL_ERROR_ERR_BAD_KEY_BLOB_VERSION = 0x80951CEC,
  SCE_SSL_ERROR_ERR_SSL = 0x80951D4C,
  SCE_SSL_ERROR_ERR_SSL_TOO_MANY_CONNECTIONS = 0x80951D4D,
  SCE_SSL_ERROR_ERR_SSL_INIT_CONNECTION = 0x80951D4E,
  SCE_SSL_ERROR_ERR_SSL_BAD_ID = 0x80951D4F,
  SCE_SSL_ERROR_ERR_SSL_DISABLED = 0x80951D50,
  SCE_SSL_ERROR_ERR_SSL_CONFIG = 0x80951D51,
  SCE_SSL_ERROR_PROTOCOL = 0x80951D52,
  SCE_SSL_ERROR_ERR_SSL_INVALID_PRESECRET = 0x80951D53,
  SCE_SSL_ERROR_ERR_SSL_INVALID_PADDING = 0x80951D54,
  SCE_SSL_ERROR_ERR_SSL_INVALID_MAC = 0x80951D55,
  SCE_SSL_ERROR_ERR_SSL_BAD_STATE = 0x80951D56,
  SCE_SSL_ERROR_ERR_SSL_NOT_OPEN = 0x80951D57,
  SCE_SSL_ERROR_ERR_SSL_NO_CIPHER_MATCH = 0x80951D58,
  SCE_SSL_ERROR_ERR_SSL_CERT_VALIDATION_FAILED = 0x80951D59,
  SCE_SSL_ERROR_ERR_SSL_UNABLE_TO_RSVP = 0x80951D5A,
  SCE_SSL_ERROR_ERR_SSL_UNSUPPORTED_DIGEST = 0x80951D5B,
  SCE_SSL_ERROR_ERR_SSL_BAD_RECORD_SIZE = 0x80951D5C,
  SCE_SSL_ERROR_ERR_SSL_UNKNOWN_CERTIFICATE_AUTHORITY = 0x80951D5D,
  SCE_SSL_ERROR_ERR_SSL_NO_SELF_SIGNED_CERTIFICATES = 0x80951D5E,
  SCE_SSL_ERROR_ERR_SSL_MUTUAL_AUTHENTICATION_DISABLED = 0x80951D5F,
  SCE_SSL_ERROR_ERR_SSL_MUTUAL_AUTHENTICATION_FAILED = 0x80951D60,
  SCE_SSL_ERROR_ERR_SSL_MUTUAL_AUTHENTICATION_NOT_REQUESTED = 0x80951D61,
  SCE_SSL_ERROR_ERR_SSL_MUTUAL_AUTHENTICATION_REQUEST_IGNORED = 0x80951D62,
  SCE_SSL_ERROR_ERR_SSL_MUTUAL_AUTHENTICATION_REQUIRED = 0x80951D63,
  SCE_SSL_ERROR_ERR_SSL_INVALID_CERT_VERIFY_MSG_SIZE = 0x80951D64,
  SCE_SSL_ERROR_ERR_SSL_INVALID_CERT_REQUEST_MSG_SIZE = 0x80951D65,
  SCE_SSL_ERROR_ERR_SSL_INVALID_MSG_SIZE = 0x80951D66,
  SCE_SSL_ERROR_ERR_SSL_INVALID_SIGNATURE = 0x80951D67,
  SCE_SSL_ERROR_ERR_SSL_CLIENT_KEY_SIZE_TOO_LONG = 0x80951D68,
  SCE_SSL_ERROR_ERR_SSL_IOCTL_FAILED = 0x80951D69,
  SCE_SSL_ERROR_ERR_SSL_SERVER_VERSION_UNKNOWN = 0x80951D6A,
  SCE_SSL_ERROR_ERR_SSL_SERVER_VERSION_SSL3 = 0x80951D6B,
  SCE_SSL_ERROR_ERR_SSL_CLIENT_START = 0x80951D6C,
  SCE_SSL_ERROR_PROTOCOL_RECEIVE_RECORD = 0x80951D6D,
  SCE_SSL_ERROR_ERR_SSL_PROTOCOL_PROCESS_FINISHED = 0x80951D6E,
  SCE_SSL_ERROR_ERR_SSL_PROTOCOL_PROCESS_CERTIFICATE = 0x80951D6F,
  SCE_SSL_ERROR_ERR_SSL_PROTOCOL_PROCESS_CLIENT_HELLO = 0x80951D70,
  SCE_SSL_ERROR_ERR_SSL_PROTOCOL_PROCESS_SERVER_HELLO = 0x80951D71,
  SCE_SSL_ERROR_ERR_SSL_PROTOCOL_BAD_LENGTH = 0x80951D72,
  SCE_SSL_ERROR_ERR_SSL_PROTOCOL_BAD_STATE = 0x80951D73,
  SCE_SSL_ERROR_ERR_SSL_PROTOCOL_SERVER = 0x80951D74,
  SCE_SSL_ERROR_ERR_SSL_PSK_BAD_CONFIG = 0x80951D75,
  SCE_SSL_ERROR_ERR_SSL_PSK_BAD_LENGTH = 0x80951D76,
  SCE_SSL_ERROR_ERR_SSL_PSK_CALLBACK_OVERFLOW_BUF = 0x80951D77,
  SCE_SSL_ERROR_PROTOCOL_VERSION = 0x80951D78,
  SCE_SSL_ERROR_ERR_SSL_CRYPT_BLOCK_SIZE = 0x80951D79,
  SCE_SSL_ERROR_ERR_SSL_FATAL_ALERT = 0x80951D7A,
  SCE_SSL_ERROR_ERR_SSL_INVALID_CERT_LENGTH = 0x80951D7B,
  SCE_SSL_ERROR_ERR_SSL_NO_DATA_TO_SEND = 0x80951D7C,
  SCE_SSL_ERROR_ERR_SSL_NO_DATA_TO_RECEIVE = 0x80951D7D,
  SCE_SSL_ERROR_ERR_SSL_EAP_DATA_SEND = 0x80951D7E,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_DUPLICATE = 0x80951D7F,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_LENGTH = 0x80951D80,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_SERVER_LIST_LENGTH = 0x80951D81,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_SERVER_NAME_LENGTH = 0x80951D82,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_UNSOLICITED_OFFER = 0x80951D83,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_UNRECOGNIZED_NAME = 0x80951D84,
  SCE_SSL_ERROR_ERR_SSL_TICKET_INIT = 0x80951D85,
  SCE_SSL_ERROR_ERR_SSL_UNSUPPORTED_ALGORITHM = 0x80951D86,
  SCE_SSL_ERROR_ERR_SSL_INVALID_KEY_TYPE = 0x80951D87,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_UNKNOWN_FORMAT = 0x80951D88,
  SCE_SSL_ERROR_ERR_SSL_UNSUPPORTED_CURVE = 0x80951D89,
  SCE_SSL_ERROR_ERR_SSL_NO_CIPHERSUITE = 0x80951D8A,
  SCE_SSL_ERROR_ERR_SSL_WARNING_ALERT = 0x80951D8B,
  SCE_SSL_ERROR_ERR_SSL_INNER_APP_VERIFY_DATA = 0x80951D8C,
  SCE_SSL_ERROR_ERR_SSL_INVALID_INNER_TYPE = 0x80951D8D,
  SCE_SSL_ERROR_ERR_SSL_TOO_MANY_REHANDSHAKES = 0x80951D8E,
  SCE_SSL_ERROR_ERR_SSL_BAD_HEADER_VERSION = 0x80951D8F,
  SCE_SSL_ERROR_ERR_DTLS_BAD_HELLO_COOKIE = 0x80951D90,
  SCE_SSL_ERROR_ERR_DTLS_CONNECT_TIMED_WAIT = 0x80951D91,
  SCE_SSL_ERROR_ERR_DTLS_SRTP_CALLBACK_MISSING = 0x80951D92,
  SCE_SSL_ERROR_ERR_DTLS_SRTP_NO_PROFILE_MATCH = 0x80951D93,
  SCE_SSL_ERROR_ERR_DTLS_SRTP_EXTENSION_FAILURE = 0x80951D94,
  SCE_SSL_ERROR_ERR_SSL_UNABLE_TO_SIGN_CERTIFICATE_VERIFY = 0x80951D95,
  SCE_SSL_ERROR_ERR_DTLS_RETRANSMISSION_BUFFERS_FULL = 0x80951D96,
  SCE_SSL_ERROR_ERR_DTLS_SEND_BUFFER = 0x80951D97,
  SCE_SSL_ERROR_ERR_DTLS_DROP_REPLAY_RECORD = 0x80951D98,
  SCE_SSL_ERROR_ERR_DTLS_MTU_TOO_SMALL = 0x80951D99,
  SCE_SSL_ERROR_ERR_DTLS_DEFRAG_INVALID_HOLE_DESCRIPTOR = 0x80951D9A,
  SCE_SSL_ERROR_ERR_DTLS_DEFRAG_HOLE_SIZE_TOO_SMALL = 0x80951D9B,
  SCE_SSL_ERROR_ERR_SSL_SERVER_RENEGOTIATE_LENGTH = 0x80951D9C,
  SCE_SSL_ERROR_ERR_SSL_SERVER_RENEGOTIATE_CLIENT_VERIFY = 0x80951D9D,
  SCE_SSL_ERROR_ERR_SSL_SERVER_RENEGOTIATE_NOT_ALLOWED = 0x80951D9E,
  SCE_SSL_ERROR_ERR_SSL_SERVER_RENEGOTIATE_ILLEGAL_SCSV = 0x80951D9F,
  SCE_SSL_ERROR_ERR_SSL_SERVER_RENEGOTIATE_ILLEGAL_EXTENSION = 0x80951DA0,
  SCE_SSL_ERROR_ERR_SSL_CLIENT_RENEGOTIATE_LENGTH = 0x80951DA1,
  SCE_SSL_ERROR_ERR_SSL_CLIENT_RENEGOTIATE_CLIENT_VERIFY = 0x80951DA2,
  SCE_SSL_ERROR_ERR_SSL_CLIENT_RENEGOTIATE_SERVER_VERIFY = 0x80951DA3,
  SCE_SSL_ERROR_ERR_SSL_CLIENT_RENEGOTIATE_NOT_ALLOWED = 0x80951DA4,
  SCE_SSL_ERROR_ERR_SSL_CLIENT_RENEGOTIATE_ILLEGAL_EXTENSION = 0x80951DA5,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_DUPLICATE_NAMETYPE_SNI = 0x80951DA6,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_CERTIFICATE_STATUS_UNSOLICITED = 0x80951DA7,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_CERTIFICATE_STATUS_LENGTH = 0x80951DA8,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_CERTIFICATE_STATUS_RESPONSE = 0x80951DA9,
  SCE_SSL_ERROR_ERR_SSL_EXTENSION_ELLIPTIC_CURVE_NOT_RECEIVED = 0x80951DAA,
  SCE_SSL_ERROR_ERR_SSL_CONNECTION_BUSY = 0x80951DAB,
  SCE_SSL_ERROR_ERR_SSL_CONNECTION_UNLOCKED = 0x80951DAC,
  SCE_SSL_ERROR_ERR_CERT = 0x80951DB0,
  SCE_SSL_ERROR_ERR_CERT_BUFFER_OVERFLOW = 0x80951DB1,
  SCE_SSL_ERROR_ERR_CERT_STRING_TOO_LONG = 0x80951DB2,
  SCE_SSL_ERROR_ERR_CERT_INVALID_STRUCT = 0x80951DB3,
  SCE_SSL_ERROR_ERR_CERT_NOT_EXPECTED_OID = 0x80951DB4,
  SCE_SSL_ERROR_ERR_CERT_RSA_EXPONENT_TOO_BIG = 0x80951DB5,
  SCE_SSL_ERROR_ERR_CERT_EXPIRED = 0x80951DB6,
  SCE_SSL_ERROR_ERR_CERT_BAD_COMMON_NAME = 0x80951DB7,
  SCE_SSL_ERROR_ERR_CERT_INVALID_PARENT_CERTIFICATE = 0x80951DB8,
  SCE_SSL_ERROR_ERR_CERT_INVALID_SIGNATURE = 0x80951DB9,
  SCE_SSL_ERROR_ERR_CERT_INVALID_INTERMEDIATE_CERTIFICATE = 0x80951DBA,
  SCE_SSL_ERROR_ERR_CERT_INVALID_CERT_POLICY = 0x80951DBB,
  SCE_SSL_ERROR_ERR_CERT_UNSUPPORTED_DIGEST = 0x80951DBC,
  SCE_SSL_ERROR_ERR_CERT_DNE_STRING_TOO_LONG = 0x80951DBD,
  SCE_SSL_ERROR_ERR_CERT_CHAIN_NOT_VERIFIED = 0x80951DBE,
  SCE_SSL_ERROR_ERR_CERT_STACK_OVERFLOW = 0x80951DBF,
  SCE_SSL_ERROR_ERR_CERT_REVOKED = 0x80951DC0,
  SCE_SSL_ERROR_ERR_CERT_HASH_TOO_LONG = 0x80951DC1,
  SCE_SSL_ERROR_ERR_CERT_KEYUSAGE_MISSING = 0x80951DC2,
  SCE_SSL_ERROR_ERR_CERT_UNKNOWN_CRITICAL_EXTENSION = 0x80951DC3,
  SCE_SSL_ERROR_ERR_CERT_UNSUPPORTED_SIGNATURE_ALGO = 0x80951DC4,
  SCE_SSL_ERROR_ERR_CERT_RSA_MODULUS_TOO_BIG = 0x80951DC5,
  SCE_SSL_ERROR_ERR_CERT_BAD_SUBJECT_NAME = 0x80951DC6,
  SCE_SSL_ERROR_ERR_CERT_KEY_SIGNATURE_OID_MISMATCH = 0x80951DC7,
  SCE_SSL_ERROR_ERR_CERT_INVALID_KEYUSAGE = 0x80951DC8,
  SCE_SSL_ERROR_ERR_CERT_START_TIME_VALID_IN_FUTURE = 0x80951DC9,
  SCE_SSL_ERROR_ERR_CERT_INVALID_EXTENDED_KEYUSAGE = 0x80951DCA,
  SCE_SSL_ERROR_ERR_CERT_UNRECOGNIZED_OID = 0x80951DCB,
  SCE_SSL_ERROR_ERR_CERT_BASIC_CONSTRAINT_EXTENSION_NOT_FOUND = 0x80951DCC,
  SCE_SSL_ERROR_ERR_RSA = 0x80951E14,
  SCE_SSL_ERROR_ERR_RSA_INVALID_KEY = 0x80951E15,
  SCE_SSL_ERROR_ERR_RSA_DECRYPTION = 0x80951E16,
  SCE_SSL_ERROR_ERR_RSA_INVALID_PKCS1 = 0x80951E17,
  SCE_SSL_ERROR_ERR_RSA_INVALID_PKCS1_VERSION = 0x80951E18,
  SCE_SSL_ERROR_ERR_RSA_INVALID_PKCS8 = 0x80951E19,
  SCE_SSL_ERROR_ERR_RSA_INVALID_EXPONENT = 0x80951E1A,
  SCE_SSL_ERROR_ERR_RSA_INVALID_MODULUS = 0x80951E1B,
  SCE_SSL_ERROR_ERR_RSA_KEY_NOT_READY = 0x80951E1C,
  SCE_SSL_ERROR_ERR_RSA_DISABLED = 0x80951E1D,
  SCE_SSL_ERROR_ERR_RSA_KEY_LENGTH_TOO_SMALL = 0x80951E1E,
  SCE_SSL_ERROR_ERR_RSA_BAD_SIGNATURE = 0x80951E1F,
  SCE_SSL_ERROR_ERR_RSA_UNKNOWN_PKCS5_ALGO = 0x80951E20,
  SCE_SSL_ERROR_ERR_RSA_UNKNOWN_PKCS8_ALGOID = 0x80951E21,
  SCE_SSL_ERROR_ERR_RSA_UNSUPPORTED_PKCS8_OPTION = 0x80951E22,
  SCE_SSL_ERROR_ERR_RSA_BUILT_WITH_NO_PKCS8_DECRYPTION = 0x80951E23,
  SCE_SSL_ERROR_ERR_RSA_UNSUPPORTED_PKCS8_ALGO = 0x80951E24,
  SCE_SSL_ERROR_ERR_AES = 0x80951EDC,
  SCE_SSL_ERROR_ERR_AES_BAD_PAD_LENGTH = 0x80951EDD,
  SCE_SSL_ERROR_ERR_AES_BAD_LENGTH = 0x80951EDE,
  SCE_SSL_ERROR_ERR_AES_BAD_OPERATION = 0x80951EDF,
  SCE_SSL_ERROR_ERR_AES_BAD_KEY_LENGTH = 0x80951EE0,
  SCE_SSL_ERROR_ERR_AES_BAD_KEY_DIR = 0x80951EE1,
  SCE_SSL_ERROR_ERR_AES_BAD_KEY_MATERIAL = 0x80951EE2,
  SCE_SSL_ERROR_ERR_AES_BAD_CIPHER_MODE = 0x80951EE3,
  SCE_SSL_ERROR_ERR_AES_CIPHER_FAILED = 0x80951EE4,
  SCE_SSL_ERROR_ERR_AES_CCM_AUTH_FAIL = 0x80951EE5,
  SCE_SSL_ERROR_ERR_AES_BAD_ARG = 0x80951EE6,
  SCE_SSL_ERROR_ERR_TREE = 0x80951F40,
  SCE_SSL_ERROR_ERR_TREE_LINKEDCHILD = 0x80951F41,
  SCE_SSL_ERROR_ERR_ASN = 0x80951FA4,
  SCE_SSL_ERROR_ERR_ASN_ZERO_LENGTH = 0x80951FA5,
  SCE_SSL_ERROR_ERR_ASN_UNRECOGNIZED_PRIMITIVE = 0x80951FA6,
  SCE_SSL_ERROR_ERR_ASN_INCONSISTENT_LENGTH = 0x80951FA7,
  SCE_SSL_ERROR_ERR_ASN_INVALID_DATA = 0x80951FA8,
  SCE_SSL_ERROR_ERR_ASN_BAD_LENGTH_FIELD = 0x80951FA9,
  SCE_SSL_ERROR_ERR_ASN_NULL_FUNC_PTR = 0x80951FAA,
  SCE_SSL_ERROR_ERR_ASN_BAD_INT_LENGTH_FIELD = 0x80951FAB,
  SCE_SSL_ERROR_ERR_ASN_UNEXPECTED_END = 0x80951FAC,
  SCE_SSL_ERROR_ERR_PRIME = 0x80952008,
  SCE_SSL_ERROR_ERR_PRIME_EXPECTED = 0x80952009,
  SCE_SSL_ERROR_ERR_CERT_AUTH = 0x809520D0,
  SCE_SSL_ERROR_BAD_SIGN_ALGO = 0x809520D1,
  SCE_SSL_ERROR_BAD_CERT_LENGTH = 0x809520D2,
  SCE_SSL_ERROR_MISMATCH_PUBLIC_KEYS = 0x809520D3,
  SCE_SSL_ERROR_KEY_BLOB_CORRUPT = 0x809520D4,
  SCE_SSL_ERROR_ERR_URI = 0x80952134,
  SCE_SSL_ERROR_ERR_URI_INVALID_FORMAT = 0x80952135,
  SCE_SSL_ERROR_ERR_PEM = 0x809521FC,
  SCE_SSL_ERROR_ERR_PEM_STRUCTURE = 0x809521FD,
  SCE_SSL_ERROR_ERR_SPD_BAD_ID = 0x80952292,
  SCE_SSL_ERROR_ERR_SPD_BAD_INDEX = 0x80952293,
  SCE_SSL_ERROR_ERR_SPD_INVALID_MODE = 0x80952294,
  SCE_SSL_ERROR_ERR_SPD_INVALID_BUNDLE = 0x80952295,
  SCE_SSL_ERROR_ERR_SPD_INVALID_ID_INFO = 0x80952296,
  SCE_SSL_ERROR_ERR_SPD_UNACCEPTABLE_TS = 0x80952297,
  SCE_SSL_ERROR_ERR_SPD_UNMATCHED_ALGOS = 0x80952298,
  SCE_SSL_ERROR_ERR_CRYPTO = 0x80952328,
  SCE_SSL_ERROR_ERR_CRYPTO_DH_UNSUPPORTED_GROUP = 0x80952329,
  SCE_SSL_ERROR_ERR_CRYPTO_BAD_PAD = 0x8095232A,
  SCE_SSL_ERROR_ERR_CRYPTO_BAD_KEY_TYPE = 0x8095232B,
  SCE_SSL_ERROR_ERR_CRYPTO_ECC_DISABLED = 0x8095232C,
  SCE_SSL_ERROR_ERR_CRYPTO_RSA_DISABLED = 0x8095232D,
  SCE_SSL_ERROR_ERR_CRYPTO_DSA_DISABLED = 0x8095232E,
  SCE_SSL_ERROR_ERR_CRYPTO_DSA_SIGN_VERIFY_RS_TEST = 0x8095232F,
  SCE_SSL_ERROR_ERR_CRYPTO_AEAD_FAIL = 0x80952330,
  SCE_SSL_ERROR_ERR_CRYPTO_FAILURE = 0x80952331,
  SCE_SSL_ERROR_ERR_CRYPTO_BAD_HASH = 0x80952332,
  SCE_SSL_ERROR_ERR_UDP = 0x809523F0,
  SCE_SSL_ERROR_ERR_UDP_INTERFACE_NOT_FOUND = 0x809523F1,
  SCE_SSL_ERROR_ERR_UDP_BIND = 0x809523F2,
  SCE_SSL_ERROR_ERR_UDP_BAD_ADDRESS = 0x809523F3,
  SCE_SSL_ERROR_ERR_UDP_SOCKET = 0x809523F4,
  SCE_SSL_ERROR_ERR_UDP_CONNECT = 0x809523F5,
  SCE_SSL_ERROR_ERR_UDP_IOCTL = 0x809523F6,
  SCE_SSL_ERROR_ERR_UDP_WRITE = 0x809523F7,
  SCE_SSL_ERROR_ERR_UDP_READ = 0x809523F8,
  SCE_SSL_ERROR_ERR_UDP_HOSTNAME_NOT_FOUND = 0x809523F9,
  SCE_SSL_ERROR_ERR_UDP_WRITE_LEN = 0x809523FA,
  SCE_SSL_ERROR_ERR_UDP_NO_FREE_PORTS = 0x809523FB,
  SCE_SSL_ERROR_ERR_UDP_PORT_IN_USE = 0x809523FC,
  SCE_SSL_ERROR_ERR_UDP_BAD_CONTEXT = 0x809523FD,
  SCE_SSL_ERROR_ERR_UDP_GETSOCKNAME = 0x809523FE,
  SCE_SSL_ERROR_ERR_UDP_READ_TIMEOUT = 0x809523FF,
  SCE_SSL_ERROR_ERR_UDP_BIND_CTX = 0x80952400,
  SCE_SSL_ERROR_ERR_UDP_GETADDR = 0x80952401,
  SCE_SSL_ERROR_ERR_ARC4 = 0x809524B8,
  SCE_SSL_ERROR_ERR_ARC4_BAD_LENGTH = 0x809524B9,
  SCE_SSL_ERROR_ERR_MEM_POOL = 0x8095251C,
  SCE_SSL_ERROR_ERR_MEM_POOL_NULL_PTR = 0x8095251D,
  SCE_SSL_ERROR_ERR_MEM_POOL_CREATE = 0x8095251E,
  SCE_SSL_ERROR_ERR_MEM_POOL_COUNT_ZERO = 0x8095251F,
  SCE_SSL_ERROR_ERR_MEM_POOL_GET_POOL_EMPTY = 0x80952520,
  SCE_SSL_ERROR_ERR_MEM_POOL_BAD_PUT_POOL_OBJ = 0x80952521,
  SCE_SSL_ERROR_ERR_FF = 0x809525E4,
  SCE_SSL_ERROR_ERR_FF_DIFFERENT_FIELDS = 0x809525E5,
  SCE_SSL_ERROR_ERR_FF_INVALID_PT_STRING = 0x809525E6,
  SCE_SSL_ERROR_ERR_FF_UNSUPPORTED_PT_REPRESENTATION = 0x809525E7,
  SCE_SSL_ERROR_ERR_EC = 0x80952648,
  SCE_SSL_ERROR_ERR_EC_UNUSED = 0x80952649,
  SCE_SSL_ERROR_ERR_EC_UNSUPPORTED_CURVE = 0x8095264A,
  SCE_SSL_ERROR_ERR_EC_INVALID_KEY_FILE_FORMAT = 0x8095264B,
  SCE_SSL_ERROR_ERR_EC_UNKNOWN_KEY_FILE_VERSION = 0x8095264C,
  SCE_SSL_ERROR_ERR_EC_INCOMPLETE_KEY_FILE = 0x8095264D,
  SCE_SSL_ERROR_ERR_EC_INVALID_KEY_TYPE = 0x8095264E,
  SCE_SSL_ERROR_ERR_EC_PUBLIC_KEY = 0x8095264F,
  SCE_SSL_ERROR_ERR_EC_INFINITE_RESULT = 0x80952650,
  SCE_SSL_ERROR_ERR_EC_DIFFERENT_CURVE = 0x80952651,
  SCE_SSL_ERROR_ERR_RC2 = 0x80952774,
  SCE_SSL_ERROR_ERR_RC2_BAD_LENGTH = 0x80952775,
  SCE_SSL_ERROR_ERR_PKCS7 = 0x809527D8,
  SCE_SSL_ERROR_ERR_PKCS7_INVALID_STRUCT = 0x809527D9,
  SCE_SSL_ERROR_ERR_PKCS7_UNSUPPORTED_ENCRYPTALGO = 0x809527DA,
  SCE_SSL_ERROR_ERR_PKCS7_UNSUPPORTED_DIGESTALGO = 0x809527DB,
  SCE_SSL_ERROR_ERR_PKCS7_INVALID_SIGNATURE = 0x809527DC,
  SCE_SSL_ERROR_ERR_PKCS7_HASH_TOO_LONG = 0x809527DD,
  SCE_SSL_ERROR_ERR_PKCS7_NO_CERT_FOR_SIGNER = 0x809527DE,
  SCE_SSL_ERROR_ERR_PKCS7_NO_RECIPIENT_KEY_MATCH = 0x809527DF,
  SCE_SSL_ERROR_ERR_PKCS7_NO_CONTENT = 0x809527E0,
  SCE_SSL_ERROR_ERR_PKCS7_UNSUPPORTED_KDF = 0x809527E1,
  SCE_SSL_ERROR_ERR_PKCS7_UNSUPPORTED_KEY_WRAP = 0x809527E2,
  SCE_SSL_ERROR_ERR_PKCS7_UNSUPPORTED_CONTENT_TYPE = 0x809527E3,
  SCE_SSL_ERROR_ERR_PKCS7_NO_ENCRYPTED_CONTENT = 0x809527E4,
  SCE_SSL_ERROR_ERR_PKCS7_INVALID_ENCRYPTED_LENGTH = 0x809527E5,
  SCE_SSL_ERROR_ERR_PKCS7_WRONG_CALLBACK = 0x809527E6,
  SCE_SSL_ERROR_ERR_PKCS7_INVALID_TYPE_FOR_OP = 0x809527E7,
  SCE_SSL_ERROR_ERR_PKCS7_DIGEST_DONT_MATCH = 0x809527E8,
  SCE_SSL_ERROR_ERR_PKCS7_DETACHED_DATA = 0x809527E9,
  SCE_SSL_ERROR_ERR_PKCS7_NOT_DETACHED_SIGNATURE = 0x809527EA,
  SCE_SSL_ERROR_ERR_PKCS7_DETACHED_DATA_ALREADY_SET = 0x809527EB,
  SCE_SSL_ERROR_ERR_PKCS7_ALREADY_STREAMING = 0x809527EC,
  SCE_SSL_ERROR_ERR_PKCS7_CONTEXT_COMPLETED = 0x809527ED,
  SCE_SSL_ERROR_ERR_PKCS7_RNG_FUN_REQUIRED_FOR_ECC = 0x809527EE,
  SCE_SSL_ERROR_ERR_PKCS7_INVALID_TAG_VALUE = 0x809527EF,
  SCE_SSL_ERROR_ERR_PKCS7_INVALID_ITEM_VALUE = 0x809527F0,
  SCE_SSL_ERROR_ERR_PKCS7_CONTEXT_NOT_COMPLETED = 0x809527F1,
  SCE_SSL_ERROR_ERR_PKCS7_NO_RECEIPT_REQUEST = 0x809527F2,
  SCE_SSL_ERROR_ERR_PKCS7_MISSING_AUTH_ATTRIBUTE = 0x809527F3,
  SCE_SSL_ERROR_ERR_PKCS7_MISMATCH_SIG_HASH_ALGO = 0x809527F4,
  SCE_SSL_ERROR_ERR_PKCS12 = 0x8095283C,
  SCE_SSL_ERROR_ERR_PKCS12_WRONG_VERSION = 0x8095283D,
  SCE_SSL_ERROR_ERR_PKCS12_INVALID_STRUCT = 0x8095283E,
  SCE_SSL_ERROR_ERR_PKCS12_NOT_EXPECTED_OID = 0x8095283F,
  SCE_SSL_ERROR_ERR_PKCS12_PASSWORD_NEEDED = 0x80952840,
  SCE_SSL_ERROR_ERR_PKCS12_INTEGRITY_CHECK_FAILED = 0x80952841,
  SCE_SSL_ERROR_ERR_PKCS12_NO_KNOWN_SIGNERS = 0x80952842,
  SCE_SSL_ERROR_ERR_PKCS12_UNSUPPORTED_ALGO = 0x80952843,
  SCE_SSL_ERROR_ERR_PKCS12_UNKNOWN_BAGTYPE = 0x80952844,
  SCE_SSL_ERROR_ERR_PKCS12_INVALID_ENCRYPT_ARG = 0x80952845,
  SCE_SSL_ERROR_ERR_PKCS12_INVALID_PRIVACY_MODE = 0x80952846,
  SCE_SSL_ERROR_ERR_PKCS12_INVALID_INTEGRITY_MODE = 0x80952847,
  SCE_SSL_ERROR_ERR_PKCS12_DECRYPT_CALLBACK_NOT_SET = 0x80952848,
  SCE_SSL_ERROR_ERR_PKCS12_NOT_PRINTABLE_PASSWORD = 0x80952849,
  SCE_SSL_ERROR_ERR_DER_ENCODER = 0x80952968,
  SCE_SSL_ERROR_ERR_DER_ENCODER_NOT_SERIALIZED = 0x80952969,
  SCE_SSL_ERROR_ERR_DER_ENCODER_OPAQUE = 0x8095296A,
  SCE_SSL_ERROR_ERR_DER_PARENT_NOT_BER = 0x8095296B,
  SCE_SSL_ERROR_ERR_DER_BER_NOT_TERMINATED = 0x8095296C,
  SCE_SSL_ERROR_ERR_BITMAP = 0x80952A94,
  SCE_SSL_ERROR_ERR_BITMAP_CREATE_FAIL = 0x80952A95,
  SCE_SSL_ERROR_ERR_BITMAP_TABLE_FULL = 0x80952A96,
  SCE_SSL_ERROR_ERR_BITMAP_BIT_IS_SET = 0x80952A97,
  SCE_SSL_ERROR_ERR_BITMAP_BAD_RANGE = 0x80952A98,
  SCE_SSL_ERROR_ERR_MEM_PART = 0x80952AF8,
  SCE_SSL_ERROR_ERR_MEM_PART_NULL_PTR = 0x80952AF9,
  SCE_SSL_ERROR_ERR_MEM_PART_CREATE = 0x80952AFA,
  SCE_SSL_ERROR_ERR_MEM_PART_BAD_LENGTH = 0x80952AFB,
  SCE_SSL_ERROR_ERR_MEM_PART_ALLOC_FAIL = 0x80952AFC,
  SCE_SSL_ERROR_ERR_MEM_PART_FREE_LIST_DAMAGED = 0x80952AFD,
  SCE_SSL_ERROR_ERR_MEM_PART_BAD_ADDRESS = 0x80952AFE,
  SCE_SSL_ERROR_ERR_TIMER = 0x80952B5C,
  SCE_SSL_ERROR_ERR_TIMER_SEMINIT_FAILED = 0x80952B5D,
  SCE_SSL_ERROR_ERR_TIMER_NO_CALLBACKFN = 0x80952B5E,
  SCE_SSL_ERROR_ERR_TIMER_INVALID_TIMEOUT = 0x80952B5F,
  SCE_SSL_ERROR_ERR_TIMER_NO_CONTBL = 0x80952B60,
  SCE_SSL_ERROR_ERR_TIMER_INVALID_TIMER = 0x80952B61,
  SCE_SSL_ERROR_ERR_TIMER_TIMERS_IN_USE = 0x80952B62,
  SCE_SSL_ERROR_ERR_ID = 0x80952BC0,
  SCE_SSL_ERROR_ERR_ID_CREATE_MAP_FAILED = 0x80952BC1,
  SCE_SSL_ERROR_ERR_ID_ADD_RANGE_FAILED = 0x80952BC2,
  SCE_SSL_ERROR_ERR_ID_ALLOC_FAILED = 0x80952BC3,
  SCE_SSL_ERROR_ERR_ID_INIT_FAILED = 0x80952BC4,
  SCE_SSL_ERROR_ERR_RBTREE = 0x80952C24,
  SCE_SSL_ERROR_ERR_RBTREE_INSERT_FAILED = 0x80952C25,
  SCE_SSL_ERROR_ERR_RBTREE_DUPLICATE_NODE = 0x80952C26,
  SCE_SSL_ERROR_ERR_RBTREE_CREATE_FAILED = 0x80952C27,
  SCE_SSL_ERROR_ERR_PKCS5 = 0x809532C8,
  SCE_SSL_ERROR_ERR_PKCS5_BAD_ITERATION_COUNT = 0x809532C9,
  SCE_SSL_ERROR_ERR_PKCS5_INVALID_HASH_FUNCTION = 0x809532CA,
  SCE_SSL_ERROR_ERR_PKCS5_DKLEN_TOO_LONG = 0x809532CB,
  SCE_SSL_ERROR_ERR_PKCS5_DKLEN_TOO_SHORT = 0x809532CC,
  SCE_SSL_ERROR_ERR_INTHASH = 0x80953390,
  SCE_SSL_ERROR_ERR_INTHASH_BAD_TYPE = 0x80953391,
  SCE_SSL_ERROR_ERR_INTHASH_BAD_OFFSET = 0x80953392,
  SCE_SSL_ERROR_ERR_INTHASH_BAD_TABLE = 0x80953393,
  SCE_SSL_ERROR_ERR_INTHASH_ELEM_NOT_FOUND = 0x80953394,
  SCE_SSL_ERROR_ERR_INTHASH_MUTEX_INIT = 0x80953395,
  SCE_SSL_ERROR_ERR_INTHASH_BAD_TABLEIDX = 0x80953396,
  SCE_SSL_ERROR_ERR_STRHASH = 0x809533F4,
  SCE_SSL_ERROR_ERR_STRHASH_NODE_NOT_FOUND = 0x809533F5,
  SCE_SSL_ERROR_ERR_STRHASH_NODE_EXISTS = 0x809533F6,
  SCE_SSL_ERROR_ERR_STRHASH_NULL_DATUM = 0x809533F7,
  SCE_SSL_ERROR_ERR_STRHASH_INVALID_FUNC = 0x809533F8,
  SCE_SSL_ERROR_ERR_STRHASH_NOTEMPTY = 0x809533F9,
  SCE_SSL_ERROR_ERR_STRHASH_NOMATCH = 0x809533FA,
  SCE_SSL_ERROR_ERR_CERT_STORE = 0x809534BC,
  SCE_SSL_ERROR_ERR_CERT_STORE_UNKNOWN_KEY_TYPE = 0x809534BD,
  SCE_SSL_ERROR_ERR_CERT_STORE_CERT_KEY_MISMATCH = 0x809534BE,
  SCE_SSL_ERROR_ERR_CERT_STORE_LOCKED_STORE = 0x809534BF,
  SCE_SSL_ERROR_ERR_CERT_STORE_UNSUPPORTED_SIGNALGO = 0x809534C0,
  SCE_SSL_ERROR_ERR_CERT_STORE_UNSUPPORTED_ECCURVE = 0x809534C1,
  SCE_SSL_ERROR_ERR_HASH_VALUE = 0x80953520,
  SCE_SSL_ERROR_ERR_HASH_TABLE = 0x80953584,
  SCE_SSL_ERROR_ERR_HASH_TABLE_BAD_SIZE = 0x80953585,
  SCE_SSL_ERROR_ERR_SOCKET = 0x809535E8,
  SCE_SSL_ERROR_ERR_SOCKET_NULL_REPLY = 0x809535E9,
  SCE_SSL_ERROR_ERR_SOCKET_INVALID_LEN = 0x809535EA,
  SCE_SSL_ERROR_ERR_SOCKET_INVALID_MSG = 0x809535EB,
  SCE_SSL_ERROR_ERR_SOCKET_NULL_PARAMS = 0x809535EC,
  SCE_SSL_ERROR_ERR_DEBUG_CONSOLE = 0x80953778,
  SCE_SSL_ERROR_ERR_DEBUG_CONSOLE_CHANNEL = 0x80953779,
  SCE_SSL_ERROR_ERR_REDBLACK = 0x809538A4,
  SCE_SSL_ERROR_ERR_REDBLACK_NULL_DATUM = 0x809538A5,
  SCE_SSL_ERROR_ERR_CIRCQ = 0x80953908,
  SCE_SSL_ERROR_ERR_CIRCQ_FULL = 0x80953909,
  SCE_SSL_ERROR_ERR_CIRCQ_EMPTY = 0x8095390A,
  SCE_SSL_ERROR_ERR_MOC_IPV4_ERROR = 0x809539D0,
  SCE_SSL_ERROR_ERR_CC_CRAWL = 0x80953A34,
  SCE_SSL_ERROR_ERR_CC_CRAWL_PAST_END_BUFFER = 0x80953A35,
  SCE_SSL_ERROR_ERR_OCSP = 0x80953A98,
  SCE_SSL_ERROR_ERR_OCSP_MISSING_SIGNER_CERT = 0x80953A99,
  SCE_SSL_ERROR_ERR_OCSP_MISSING_SIGNER_KEY = 0x80953A9A,
  SCE_SSL_ERROR_ERR_OCSP_MISSING_ISSUER_CERT = 0x80953A9B,
  SCE_SSL_ERROR_ERR_OCSP_INVALID_STRUCT = 0x80953A9C,
  SCE_SSL_ERROR_ERR_OCSP_MISSING_SIGNATURE = 0x80953A9D,
  SCE_SSL_ERROR_ERR_OCSP_INVALID_SIGNATURE = 0x80953A9E,
  SCE_SSL_ERROR_ERR_OCSP_RESPONDER_CHECK = 0x80953A9F,
  SCE_SSL_ERROR_ERR_OCSP_UNKNOWN_RESPONSE_STATUS = 0x80953AA0,
  SCE_SSL_ERROR_ERR_OCSP_UNSUPPORTED_RESPONSE_TYPE = 0x80953AA1,
  SCE_SSL_ERROR_ERR_OCSP_MISSING_RSIGNER_CERTS = 0x80953AA2,
  SCE_SSL_ERROR_ERR_OCSP_INIT_FAIL = 0x80953AA3,
  SCE_SSL_ERROR_ERR_OCSP_ILLEGAL_STATE = 0x80953AA4,
  SCE_SSL_ERROR_ERR_OCSP_NO_MORE_RESPONSE = 0x80953AA5,
  SCE_SSL_ERROR_ERR_OCSP_BAD_ALGO = 0x80953AA6,
  SCE_SSL_ERROR_ERR_OCSP_EXPIRED_RESPONSE = 0x80953AA7,
  SCE_SSL_ERROR_ERR_OCSP_NONCE_CHECK_FAIL = 0x80953AA8,
  SCE_SSL_ERROR_ERR_OCSP_BAD_REQUEST = 0x80953AA9,
  SCE_SSL_ERROR_ERR_OCSP_INVALID_INPUT = 0x80953AAA,
  SCE_SSL_ERROR_ERR_OCSP_BAD_AIA = 0x80953AAB,
  SCE_SSL_ERROR_ERR_OCSP_REQUEST_RESPONSE_MISMATCH = 0x80953AAC,
  SCE_SSL_ERROR_ERR_OCSP_FIND_PEER_ADDR_FAILED = 0x80953AAD,
  SCE_SSL_ERROR_ERR_OCSP_RESPONDER_CONNECT_FAILED = 0x80953AAE,
  SCE_SSL_ERROR_ERR_OTP = 0x80953CF0,
  SCE_SSL_ERROR_ERR_OTP_INVALID_CHALLENGE = 0x80953CF1,
  SCE_SSL_ERROR_ERR_OTP_INVALID_ALGORITHM = 0x80953CF2,
  SCE_SSL_ERROR_ERR_OTP_UNSUPPORTED_ALGORITHM = 0x80953CF3,
  SCE_SSL_ERROR_ERR_OTP_INVALID_SEED = 0x80953CF4,
  SCE_SSL_ERROR_ERR_MTLS = 0x80953E80,
  SCE_SSL_ERROR_ERR_MTLS_BAD_PAYLOAD_LENGTH = 0x80953E81,
  SCE_SSL_ERROR_ERR_MTLS_UNKNOWN_MESSAGE_TYPE = 0x80953E82,
  SCE_SSL_ERROR_ERR_MTLS_FIND_CHANNEL_RECEIVER_FAILED = 0x80953E83,
  SCE_SSL_ERROR_ERR_MTLS_BAD_CALLBACK_CONFIG = 0x80953E84,
  SCE_SSL_ERROR_ERR_PKI = 0x80953EE4,
  SCE_SSL_ERROR_ERR_CMP = 0x80953F48,
  SCE_SSL_ERROR_ERR_CMP_INVALID_CONTEXT = 0x80953F49,
  SCE_SSL_ERROR_ERR_CMP_INVALID_PARAMETER = 0x80953F4A,
  SCE_SSL_ERROR_ERR_CMP_INVALID_VERSION = 0x80953F4B,
  SCE_SSL_ERROR_ERR_CMP_INVALID_IP_RESPONSE = 0x80953F4C,
  SCE_SSL_ERROR_ERR_CMP_ALGORITHM_NOT_SUPPORTED = 0x80953F4D,
  SCE_SSL_ERROR_ERR_CMP_MISSING_TRANSACTION_ID = 0x80953F4E,
  SCE_SSL_ERROR_ERR_CMP_MISSING_RECIPIENT_NONCE = 0x80953F4F,
  SCE_SSL_ERROR_ERR_CMP_INVALID_STATE = 0x80953F50,
  SCE_SSL_ERROR_ERR_CMP_SUBJECT_NAME_REQUIRED = 0x80953F51,
  SCE_SSL_ERROR_ERR_CMP_KEY_REQUIRED = 0x80953F52,
  SCE_SSL_ERROR_ERR_CMP_CERTIFICATE_NOT_FOUND = 0x80953F53,
  SCE_SSL_ERROR_ERR_CMP_POPTYPE_MISMATCH = 0x80953F54,
  SCE_SSL_ERROR_ERR_CMP_INVALID_CALL_FOR_CERT = 0x80953F55,
  SCE_SSL_ERROR_ERR_CMP_INVALID_CALL_FOR_STATUS = 0x80953F56,
  SCE_SSL_ERROR_ERR_CMP_MISSING_CREDENTIALS = 0x80953F57,
  SCE_SSL_ERROR_ERR_CMP_RESPONSE_TYPE_MISMATCH = 0x80953F58,
  SCE_SSL_ERROR_ERR_CMP_SENDER_KID = 0x80953F59,
  SCE_SSL_ERROR_ERR_CMP_PROTECTION_ERROR = 0x80953F5A,
  SCE_SSL_ERROR_ERR_CMP_NAME_MISMATCH = 0x80953F5B,
  SCE_SSL_ERROR_ERR_CMP_TRANSACTION_ID_MISMATCH = 0x80953F5C,
  SCE_SSL_ERROR_ERR_CMP_RECIPIENT_NONCE_MISMATCH = 0x80953F5D,
  SCE_SSL_ERROR_ERR_CRMF = 0x80953FAC,
  SCE_SSL_ERROR_ERR_CRMF_MISSING_SIGNER_KEY = 0x80953FAD,
  SCE_SSL_ERROR_ERR_CRMF_INVALID_ARG = 0x80953FAE,
  SCE_SSL_ERROR_ERR_FIPS = 0x80954074,
  SCE_SSL_ERROR_ERR_FIPS_DSA_FAIL = 0x80954075,
  SCE_SSL_ERROR_ERR_FIPS_DSA_SIGN_VERIFY_FAIL = 0x80954076,
  SCE_SSL_ERROR_ERR_FIPS_ECDSA_FAIL = 0x80954077,
  SCE_SSL_ERROR_ERR_FIPS_ECDSA_SIGN_VERIFY_FAIL = 0x80954078,
  SCE_SSL_ERROR_ERR_FIPS_RSA_FAIL = 0x80954079,
  SCE_SSL_ERROR_ERR_FIPS_RSA_SIGN_VERIFY_FAIL = 0x8095407A,
  SCE_SSL_ERROR_ERR_FIPS_RNG_FAIL = 0x8095407B,
  SCE_SSL_ERROR_ERR_FIPS_SELF_TEST_INCOMPLETE = 0x8095407C,
  SCE_SSL_ERROR_ERR_FIPS_RNG_KAT = 0x8095407D,
  SCE_SSL_ERROR_ERR_FIPS_HASH_KAT_NULL = 0x8095407E,
  SCE_SSL_ERROR_ERR_FIPS_HASH_KAT_FAILED = 0x8095407F,
  SCE_SSL_ERROR_ERR_FIPS_HASH_KAT_LEN_FAILED = 0x80954080,
  SCE_SSL_ERROR_ERR_FIPS_HMAC_HASH_KAT_NULL = 0x80954081,
  SCE_SSL_ERROR_ERR_FIPS_HMAC_HASH_KAT_FAILED = 0x80954082,
  SCE_SSL_ERROR_ERR_FIPS_HMAC_HASH_KAT_LEN_FAILED = 0x80954083,
  SCE_SSL_ERROR_ERR_FIPS_SYM_KAT_NULL = 0x80954084,
  SCE_SSL_ERROR_ERR_FIPS_SYM_KAT_FAILED = 0x80954085,
  SCE_SSL_ERROR_ERR_FIPS_SYM_KAT_LEN_FAILED = 0x80954086,
  SCE_SSL_ERROR_ERR_FIPS_RSA_PCT_FAILED = 0x80954087,
  SCE_SSL_ERROR_ERR_FIPS_ECDSA_PCT_FAILED = 0x80954088,
  SCE_SSL_ERROR_ERR_FIPS_ECDH_PCT_FAILED = 0x80954089,
  SCE_SSL_ERROR_ERR_FIPS_DH_PCT_FAILED = 0x8095408A,
  SCE_SSL_ERROR_ERR_FIPS_INTEGRITY_FAILED = 0x8095408B,
  SCE_SSL_ERROR_ERR_FIPS_NISTRNG_KAT_FAILED = 0x8095408C,
  SCE_SSL_ERROR_ERR_FIPS_CTRDRBG_FAIL = 0x8095408D,
  SCE_SSL_ERROR_ERR_FIPS_ECDRBG_FAIL = 0x8095408E,
  SCE_SSL_ERROR_ERR_PKI_CLIENT = 0x8095413C,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_REQUEST_TIMEOUT = 0x8095413D,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CERT_REVOKED = 0x8095413E,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CERT_EXPIRED = 0x8095413F,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CDPS_MISSING = 0x80954140,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_ISSUER_INVALID = 0x80954141,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_ISSUER_EXPIRED = 0x80954142,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_ISSUER_MISSING = 0x80954143,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CERT_PATH = 0x80954144,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CRL_NOT_AVAILABLE = 0x80954145,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_TOO_MANY_REQUESTS = 0x80954146,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_PENDING_CERTPATH_CHECK = 0x80954147,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_PENDING_CRL_CHECK = 0x80954148,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_INVALID_CALLBACK_TYPE = 0x80954149,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_NOT_FOUND = 0x8095414A,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_INVALID_ARGUMENT = 0x8095414B,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_PROFILE_FAILURE = 0x8095414C,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_NO_SUCH_SESSION = 0x8095414D,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_TOO_MANY_SESSIONS = 0x8095414E,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CRL_SIGNATURE_VERIFICATION = 0x8095414F,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_MISSING_CA_URL_INFO = 0x80954150,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_MISSING_CERT_URL_INFO = 0x80954151,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_WRONG_CERTTYPE = 0x80954152,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_INIT = 0x80954153,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CREATE = 0x80954154,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_TXN_FAILED = 0x80954155,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_EXTND_CERT_NOT_FOUND = 0x80954156,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_EXTND_CERT_ADD_FAILED = 0x80954157,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_EXTND_CERT_DEL_FAILED = 0x80954158,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_TMP_KEY_ADD_FAILED = 0x80954159,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CERT_ADD_FAILED = 0x8095415A,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CERT_NOT_FOUND = 0x8095415B,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CERT_DEL_FAILED = 0x8095415C,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CDP_ENTRY_ADD_FAILED = 0x8095415D,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CDP_ENTRY_NOT_FOUND = 0x8095415E,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CRL_NOT_FOUND = 0x8095415F,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_URL_ADD_FAILED = 0x80954160,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_URL_NOT_FOUND = 0x80954161,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CRL_TRUNCATE_FAILED = 0x80954162,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CERT_SNO_NOT_FOUND = 0x80954163,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_FG_TO_BG_MSG_FAILED = 0x80954164,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_BG_TO_FG_MSG_FAILED = 0x80954165,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_EXTND_CERT_SESINST_NOT_FOUND = 0x80954166,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_EXTND_CERT_SESINST_CUR_FAILED = 0x80954178,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CERT_ISSUER_CUR_FAILED = 0x80954179,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CERT_SNO_CUR_FAILED = 0x8095417A,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CRL_ISSUER_CUR_FAILED = 0x8095417B,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CRL_SNO_CUR_FAILED = 0x8095417C,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_URL_CUR_FAILED = 0x8095417D,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_DB_CDP_ENTRY_CUR_FAILED = 0x8095417E,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CRL_PARSE_ERROR = 0x8095417F,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_NO_RESULT_OBTAINED = 0x80954180,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CERT_NOT_AVAILABLE = 0x80954181,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_TOO_MANY_FOREGROUND_PROCESS = 0x80954182,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_FOREGROUND_PROCESS_NOT_FOUND = 0x80954183,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_FOREGROUND_FAILED_TO_REGISTER = 0x80954184,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_BACKGROUND_NOT_READY = 0x80954185,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_SET_CRL_CHECKING_MODE_FAILED = 0x80954186,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_UNEXPECTED_ASN1_STRUCTURE = 0x80954187,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_STALE_CRL_RECEIVED = 0x80954188,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_PENDING_OCSP_CHECK = 0x80954189,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_OCSP_INVALID = 0x8095418A,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_OCSP_STATUS_UNKNOWN = 0x8095418B,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_OCSP_RESPONSE = 0x8095418C,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_OCSP_SIGNING_CERT_INFO_MISSING = 0x8095418D,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_OCSP_RESPONDER_URL_MISSING = 0x8095418E,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_PRIVATE_KEY_NOT_FOUND = 0x8095418F,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_SCEP_RENEW_CERT_NOT_SUPPORTED = 0x80954190,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_SCEP_MAX_POLL_RETRY_COUNT_RCHD = 0x80954191,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_CRL_CHECKING_DISABLED = 0x80954192,
  SCE_SSL_ERROR_ERR_PKI_CLIENT_SCEP_NO_HTTP_RESP_CONTENT = 0x80954193,
  SCE_SSL_ERROR_ERR_STACK = 0x809541A0,
  SCE_SSL_ERROR_ERR_STACK_UNDERFLOW = 0x809541A1,
  SCE_SSL_ERROR_ERR_STACK_OVERFLOW = 0x809541A2,
  SCE_SSL_ERROR_ERR_INSTANCE = 0x80954204,
  SCE_SSL_ERROR_ERR_INSTANCE_TABLE_TOO_BIG = 0x80954205,
  SCE_SSL_ERROR_ERR_INSTANCE_BAD_ID = 0x80954206,
  SCE_SSL_ERROR_ERR_INSTANCE_CLOSED = 0x80954207,
  SCE_SSL_ERROR_ERR_INSTANCE_STALE_ID = 0x80954208,
  SCE_SSL_ERROR_ERR_INSTANCE_FREE_LIST_EMPTY = 0x80954209,
  SCE_SSL_ERROR_ERR_INSTANCE_PASSED_END_LIST_REACHED = 0x8095420A,
  SCE_SSL_ERROR_ERR_NIST_KDF = 0x809542CC,
  SCE_SSL_ERROR_ERR_NIST_KDF_INVALID_COUNTER_SIZE = 0x809542CD,
  SCE_SSL_ERROR_ERR_NIST_KDF_COUNTER_KEY_SIZES = 0x809542CE,
  SCE_SSL_ERROR_ERR_NIST_RNG = 0x80954330,
  SCE_SSL_ERROR_ERR_NIST_RNG_HASH_DF_BAD_OUTPUT_LEN = 0x80954331,
  SCE_SSL_ERROR_ERR_NIST_RNG_UNSUPPORTED_CURVE = 0x80954332,
  SCE_SSL_ERROR_ERR_NIST_RNG_EC_DRBG_ARG_TOO_LONG = 0x80954333,
  SCE_SSL_ERROR_ERR_NIST_RNG_EC_DBRG_INVALID_HASH_ID = 0x80954334,
  SCE_SSL_ERROR_ERR_NIST_RNG_DBRG_RESEED_NEEDED = 0x80954335,
  SCE_SSL_ERROR_ERR_NIST_RNG_BLOCK_CIPHER_DF_BAD_OUTPUT_LEN = 0x80954336,
  SCE_SSL_ERROR_ERR_NIST_RNG_CTR_INVALID_KEY_LENGTH = 0x80954337,
  SCE_SSL_ERROR_ERR_NIST_RNG_CTR_INVALID_OUTPUT_LENGTH = 0x80954338,
  SCE_SSL_ERROR_ERR_NIST_RNG_DRBG_TOO_MANY_BITS = 0x80954339,
  SCE_SSL_ERROR_ERR_NIST_RNG_CTR_BAD_ENTROPY_INPUT_LEN = 0x8095433A,
  SCE_SSL_ERROR_ERR_NIST_RNG_EC_ENTROPY_OR_NONCE_TOO_SHORT = 0x8095433B,
  SCE_SSL_ERROR_ERR_NIST_RNG_CTR_BAD_PERSO_STR_LEN = 0x8095433C,
  SCE_SSL_ERROR_ERR_XML_PARSE_NO_BEGIN_TAG = 0x809543F8,
  SCE_SSL_ERROR_ERR_XML_PARSE_NO_END_TAG = 0x809543F9,
  SCE_SSL_ERROR_ERR_XML_PARSE_END_TAG_TOO_EARLY = 0x809543FA,
  SCE_SSL_ERROR_ERR_XML_PARSE_VALUE_NOT_FOUND = 0x809543FB,
  SCE_SSL_ERROR_ERR_LWIP_UNSUPPORTED_FUNCTION = 0x8095445C,
  SCE_SSL_ERROR_ERR_ENTROPY_UNINITIALIZED = 0x809544C0,
  SCE_SSL_ERROR_ERR_GARBAGE_COLLECTOR = 0x80954524,
  SCE_SSL_ERROR_ERR_GARBAGE_COLLECTOR_BADMODID = 0x80954525,
  SCE_SSL_ERROR_ERR_GARBAGE_COLLECTOR_BADID = 0x80954526,
  SCE_SSL_ERROR_ERR_GARBAGE_COLLECTOR_MODIDNOTREGISTERED = 0x80954527,
  SCE_SSL_ERROR_ERR_GARBAGE_COLLECTOR_INVALID_ARGS = 0x80954528,
  SCE_SSL_ERROR_ERR_GARBAGE_COLLECTOR_RESOURCE_NOT_FOUND = 0x80954529,
  SCE_SSL_ERROR_ERR_GARBAGE_COLLECTOR_AGAINMODIDREG = 0x8095452A,
  SCE_SSL_ERROR_BEFORE_INIT = 0x8095F001,
  SCE_SSL_ERROR_ALREADY_INITED = 0x8095F002,
  SCE_SSL_ERROR_BROKEN = 0x8095F003,
  SCE_SSL_ERROR_NOT_FOUND = 0x8095F004,
  SCE_SSL_ERROR_INVALID_FORMAT = 0x8095F005,
  SCE_SSL_ERROR_INVALID_ID = 0x8095F006,
  SCE_SSL_ERROR_INVALID_VALUE = 0x8095F007,
  SCE_SSL_ERROR_OUT_OF_SIZE = 0x8095F008,
  SCE_SSL_ERROR_INTERNAL = 0x8095F009,
  SCE_SSL_ERROR_INVALID_CERT = 0x8095F00A,
  SCE_SSL_ERROR_CN_CHECK = 0x8095F00B,
  SCE_SSL_ERROR_UNKNOWN_CA = 0x8095F00C,
  SCE_SSL_ERROR_NOT_AFTER_CHECK = 0x8095F00D,
  SCE_SSL_ERROR_NOT_BEFORE_CHECK = 0x8095F00E,
  SCE_SSL_ERROR_EAGAIN = 0x8095F00F,
  SCE_SSL_ERROR_FATAL_ALERT = 0x8095F010,
  SCE_SSL_ERROR_PROHIBITED = 0x8095F011,
  SCE_SSL_ERROR_BUSY = 0x8095F012,
  SCE_SSL_ERROR_WANT_POLLIN = 0x8095F013,
  SCE_SSL_ERROR_WANT_POLLOUT = 0x8095F014,
  SCE_SSL_ERROR_INSUFFICIENT_STACKSIZE = 0x8095F015,
  SCE_USER_SERVICE_ERROR_INTERNAL = 0x80960001,
  SCE_USER_SERVICE_ERROR_NOT_INITIALIZED = 0x80960002,
  SCE_USER_SERVICE_ERROR_ALREADY_INITIALIZED = 0x80960003,
  SCE_USER_SERVICE_ERROR_NO_MEMORY = 0x80960004,
  SCE_USER_SERVICE_ERROR_INVALID_ARGUMENT = 0x80960005,
  SCE_USER_SERVICE_ERROR_OPERATION_NOT_SUPPORTED = 0x80960006,
  SCE_USER_SERVICE_ERROR_NO_EVENT = 0x80960007,
  SCE_USER_SERVICE_ERROR_NOT_LOGGED_IN = 0x80960009,
  SCE_USER_SERVICE_ERROR_BUFFER_TOO_SHORT = 0x8096000A,
  SCE_USER_SERVICE_ERROR_TOO_MANY_LOGIN_USERS = 0x80960101,
  SCE_USER_SERVICE_ERROR_REGISTERED_USER_FULL = 0x80960102,
  SCE_USER_SERVICE_ERROR_USER_ALREADY_REGISTERED = 0x80960103,
  SCE_USER_SERVICE_ERROR_EVENT_REDUCED = 0x80960104,
  SCE_USER_SERVICE_ERROR_NO_SUCH_USER = 0x80960105,
  SCE_USER_SERVICE_ERROR_BUSY = 0x80960106,
  SCE_USER_SERVICE_ERROR_SHARE_PLAY_CLIENT_USER_ALREADY_EXIST = 0x80960107,
  SCE_BGFT_ERROR_ALREADY_INITIALIZED = 0x80990001,
  SCE_BGFT_ERROR_NOT_INITIALIZED = 0x80990002,
  SCE_BGFT_ERROR_OUT_OF_MEMORY = 0x80990003,
  SCE_BGFT_ERROR_INVALID_ARGUMENT = 0x80990004,
  SCE_BGFT_ERROR_BROKEN_PACKET = 0x80990005,
  SCE_BGFT_ERROR_NOT_SUPPORTED = 0x80990006,
  SCE_BGFT_ERROR_API_NOT_PERMITTED = 0x80990007,
  SCE_BGFT_ERROR_INTERNAL = 0x80990008,
  SCE_BGFT_ERROR_INVALID_APIID = 0x80990009,
  SCE_BGFT_ERROR_XML_FORMAT_ERROR = 0x8099000A,
  SCE_BGFT_ERROR_USER_CANCELLED = 0x8099000B,
  SCE_BGFT_ERROR_HEAP_NOMEM = 0x80990011,
  SCE_BGFT_ERROR_TASK_ID_INVALID_FORMAT = 0x80990014,
  SCE_BGFT_ERROR_TASK_DUPLICATED = 0x80990015,
  SCE_BGFT_ERROR_TASK_ENTRY_NOSPC = 0x80990018,
  SCE_BGFT_ERROR_TASK_NOENT = 0x80990019,
  SCE_BGFT_ERROR_PARAM_URI_NOENT = 0x8099001B,
  SCE_BGFT_ERROR_PARAM_NOENT = 0x80990020,
  SCE_BGFT_ERROR_PARAM_NOSPC = 0x80990021,
  SCE_BGFT_ERROR_PARAM_BADFILE = 0x80990022,
  SCE_BGFT_ERROR_PARAM_IO = 0x80990023,
  SCE_BGFT_ERROR_PARAM_BADSIZE = 0x80990024,
  SCE_BGFT_ERROR_HTTP_STATUS = 0x80990027,
  SCE_BGFT_ERROR_HTTP_CONTENT_LENGTH = 0x80990028,
  SCE_BGFT_ERROR_HTTP_RECV_IO = 0x8099002C,
  SCE_BGFT_ERROR_HTTP_RESPONSE_ERROR = 0x8099002F,
  SCE_BGFT_ERROR_HTTP_MIME_UNMATCH = 0x80990032,
  SCE_BGFT_ERROR_HTTP_UNACCEPTABLE_EXT = 0x80990033,
  SCE_BGFT_ERROR_HTTP_FILE_NAME = 0x80990035,
  SCE_BGFT_ERROR_HTTP_SSL_VERIFY = 0x80990036,
  SCE_BGFT_ERROR_CONTENTID_UNMATCH = 0x80990038,
  SCE_BGFT_ERROR_DEVICE_NOSPC = 0x80990039,
  SCE_BGFT_ERROR_FILE_READ_IO = 0x8099003A,
  SCE_BGFT_ERROR_METADATA_FILE_READ_IO = 0x8099003B,
  SCE_BGFT_ERROR_HTTP_RANGE = 0x8099003C,
  SCE_BGFT_ERROR_CONTENTTYPE_UNMATCH = 0x8099003D,
  SCE_BGFT_ERROR_HTTP_NOT_CONNECTED = 0x80990045,
  SCE_BGFT_ERROR_FATAL = 0x80990050,
  SCE_BGFT_ERROR_FILE_SEEK = 0x80990051,
  SCE_BGFT_ERROR_NOT_READY = 0x80990052,
  SCE_BGFT_ERROR_FILE_BROKEN = 0x80990053,
  SCE_BGFT_ERROR_FILE_WRITE_IO = 0x80990054,
  SCE_BGFT_ERROR_INVALID_CONTENTID = 0x80990055,
  SCE_BGFT_ERROR_PFS_BITMAP_CORRUPTED = 0x80990056,
  SCE_BGFT_ERROR_BITMAP_CORRUPTED = 0x80990057,
  SCE_BGFT_ERROR_INVALID_METADATA_PARAM = 0x80990058,
  SCE_BGFT_ERROR_NOT_FOUND_CONTENT_TO_UPLOAD = 0x80990059,
  SCE_BGFT_ERROR_BAD_PFS_BITMAP_FILE_MAGIC = 0x8099005A,
  SCE_BGFT_ERROR_BAD_PFS_BITMAP_FILE_VERSION = 0x8099005B,
  SCE_BGFT_ERROR_BITMAP_BACKUP_FILE_FAILED_TO_CREATE = 0x8099005C,
  SCE_BGFT_ERROR_BITMAP_BACKUP_FILE_FAILED_TO_READ = 0x8099005D,
  SCE_BGFT_ERROR_CHUNK_COUNT_IS_ZERO = 0x8099005E,
  SCE_BGFT_ERROR_FAILED_TO_RENAME_PATCH_FILE = 0x8099005F,
  SCE_BGFT_ERROR_INCONSISTENT_IMAGE_NUM = 0x80990060,
  SCE_BGFT_ERROR_INCONSISTENT_PACKAGE_FILE_SIZE = 0x80990061,
  SCE_BGFT_ERROR_INVALID_PACKAGE_DIGEST_HEX_CHECK = 0x80990062,
  SCE_BGFT_ERROR_INVALID_PACKAGE_DIGEST_SIZE_OF_PACKAGE_MANIFEST = 0x80990063,
  SCE_BGFT_ERROR_MISMATCH_CHUNK_COUNT_BETWEEN_APP_AND_PATCH = 0x80990064,
  SCE_BGFT_ERROR_MISMATCH_PACKAGE_DIGEST = 0x80990065,
  SCE_BGFT_ERROR_MISSING_APP_PLAYGO_CHUNK_DAT = 0x80990066,
  SCE_BGFT_ERROR_MISSING_PATCH_PLAYGO_APP_CHUNK_DAT = 0x80990067,
  SCE_BGFT_ERROR_MISSING_PATCH_PLAYGO_PATCH_CHUNK_DAT = 0x80990068,
  SCE_BGFT_ERROR_PACKAGE_FILE_SIZE_IS_ZERO = 0x80990069,
  SCE_BGFT_ERROR_PACKAGE_FILE_IS_NOT_FOUND = 0x8099006A,
  SCE_BGFT_ERROR_UNEXPECTED_EOF = 0x8099006B,
  SCE_BGFT_ERROR_VERIFICATION_ERROR_BITMAP_FILE_DIGEST = 0x8099006C,
  SCE_BGFT_ERROR_VERIFICATION_ERROR_PFS_BITMAP_FILE_DIGEST = 0x8099006D,
  SCE_BGFT_ERROR_FILE_OFFSET_TOO_LARGE = 0x8099006E,
  SCE_BGFT_ERROR_NO_SHA_VALUE = 0x8099006F,
  SCE_BGFT_ERROR_INVALID_BLOCK_NUMBER = 0x80990070,
  SCE_BGFT_ERROR_MISSING_PLAYGO_CHUNK_SHA = 0x80990071,
  SCE_BGFT_ERROR_INVALID_PLAYGO_64KIB_ALIGNMENT = 0x80990072,
  SCE_BGFT_ERROR_SHA_RESOLVER_INVALID_4BYTES_ALIGNMENT = 0x80990073,
  SCE_BGFT_ERROR_PLAYGO_SHA_READ_ERROR = 0x80990074,
  SCE_BGFT_ERROR_KAMAJI_NO_METADATA = 0x80990075,
  SCE_BGFT_ERROR_TIME_IS_PAST = 0x80990076,
  SCE_BGFT_ERROR_PLAYGO_SHA_DIGEST = 0x80990077,
  SCE_BGFT_ERROR_MISMATCHED_PACKAGE_SIZE = 0x80990078,
  SCE_BGFT_ERROR_UNSUPPORTED_PACKAGE = 0x80990079,
  SCE_BGFT_ERROR_UNSUPPORTED_DELTA_PACKAGE = 0x8099007A,
  SCE_BGFT_ERROR_KAMAJI_NO_ENTITLEMENT = 0x8099007B,
  SCE_BGFT_ERROR_KAMAJI_BEFORE_DOWNLOADABLE_DATE = 0x8099007C,
  SCE_BGFT_ERROR_KAMAJI_DOWNLOADABLE_DATE_EMPTY = 0x8099007D,
  SCE_BGFT_ERROR_INVALID_PLAYGO_CHUNK_DAT = 0x8099007E,
  SCE_BGFT_ERROR_UNSUPPORTED_PLAYGO_CHUNK_DAT = 0x8099007F,
  SCE_BGFT_ERROR_ABSSTORAGE_UNINTENDED_OBJECT_TYPE = 0x80990080,
  SCE_BGFT_ERROR_PACKAGE_URL_EMPTY = 0x80990081,
  SCE_BGFT_ERROR_NEED_SYSTEM_UPDATE = 0x80990082,
  SCE_BGFT_ERROR_NEED_WAKEUP_MAINSOC = 0x80990083,
  SCE_BGFT_ERROR_UPLOAD_FILE_SIZE_TOO_LARGE = 0x80990084,
  SCE_BGFT_ERROR_DEVICE_NOSPC_KERNEL = 0x80990085,
  SCE_BGFT_ERROR_CONTENT_ALREADY_DOWNLOADING = 0x80990086,
  SCE_BGFT_ERROR_DISC_APPLICATION_ALREADY_INSTALLED = 0x80990087,
  SCE_BGFT_ERROR_SAME_APPLICATION_ALREADY_INSTALLED = 0x80990088,
  SCE_BGFT_ERROR_KAMAJI_UNSUPPORTED_PACKAGE_TYPE = 0x80990089,
  SCE_BGFT_ERROR_CANNOT_CHANGE_BOOTTYPE = 0x8099008A,
  SCE_BGFT_ERROR_APPLICATION_IS_RUNNING = 0x8099008B,
  SCE_BGFT_ERROR_DOWNLOAD_TASK_ENTRY_NOSPC = 0x8099008C,
  SCE_BGFT_ERROR_DOWNLOAD_DEVICE_NOSPC = 0x8099008D,
  SCE_BGFT_ERROR_DOWNLOAD_TASK_ENTRY_NOSPC_ADDON = 0x80990090,
  SCE_BGFT_ERROR_GAME_BOOT_TIMEOUT = 0x80990091,
  SCE_BGFT_ERROR_PLAYGO_TASK_ENTRY_NOSPC = 0x80990092,
  SCE_BGFT_ERROR_HTTP_STATUS_TOOL = 0x80990093,
  SCE_BGFT_ERROR_UPLOADED_ID_EMPTY = 0x80990094,
  SCE_BGFT_ERROR_NEED_DATA_DISC_INSTALL = 0x80990095,
  SCE_BGFT_ERROR_NEED_DATA_DISC_INSTALL_FOR_SYSTEM_LANGUAGE = 0x80990096,
  SCE_BGFT_ERROR_INVALID_DELTA_INFO_FORMAT = 0x80990097,
  SCE_BGFT_ERROR_UNSUPPORTED_DELTA_INFO_FORMAT = 0x80990098,
  SCE_BGFT_ERROR_NEED_INICHUNKS_INSTALL = 0x80990099,
  SCE_BGFT_ERROR_INSTALL_BLANK_SLOT = 0x80990100,
  SCE_BGFT_ERROR_INSTALL_LINK_SLOT = 0x80990101,
  SCE_BGFT_ERROR_PKG_NOT_COMPLETED = 0x80990102,
  SCE_BGFT_ERROR_DST_SLOT_ALREADY_EXIST = 0x80990103,
  SCE_BGFT_ERROR_INSTALL_APPLICATION_MISSING = 0x80990104,
  SCE_BGFT_ERROR_NO_DELTA_PACKAGE = 0x80990105,
  SCE_BGFT_ERROR_DOWNLOAD_DEVICE_EXT_NOSPC = 0x80990106,
  SCE_BGFT_ERROR_DEVICE_EXT_NOSPC = 0x80990107,
  SCE_BGFT_ERROR_DEVICE_EXT_NOSPC_KERNEL = 0x80990108,
  SCE_BGFT_ERROR_PARAM_NOT_OPEN = 0x80990109,
  SCE_BGFT_ERROR_PARAM_DIRECTORY_NOT_FOUND = 0x8099010A,
  SCE_BGFT_ERROR_PARAM_INVALID_VALUE_SIZE = 0x8099010B,
  SCE_BGFT_ERROR_PARAM_INVALID_WRITE_SIZE = 0x8099010C,
  SCE_BGFT_ERROR_PARAM_INVALID_FILE_SIZE = 0x8099010D,
  SCE_BGFT_ERROR_PARAM_EXT_EPERM = 0x8099010E,
  SCE_BGFT_ERROR_NEED_CONVERT_DIGITAL_TO_DISC = 0x8099010F,
  SCE_BGFT_ERROR_NEED_CONVERT_DISC_TO_DISC = 0x80990110,
  SCE_BGFT_ERROR_CANNOT_CONVERT_COPY_MODE = 0x80990111,
  SCE_BGFT_ERROR_MOVE_PERM = 0x80990112,
  SCE_BGFT_ERROR_MOVE_SRC_NOENT = 0x80990113,
  SCE_BGFT_ERROR_MOVE_INVALID_STATE = 0x80990114,
  SCE_BGFT_ERROR_EXIST_ACTIVE_EXT_TASKS = 0x80990115,
  SCE_BGFT_ERROR_CANNOT_MOVE_APPLICATION = 0x80990116,
  SCE_BGFT_ERROR_MISSING_EXT_HDD = 0x80990117,
  SCE_BGFT_ERROR_DOWNLOAD_DEVICE_NOSPC_OLD = 0x80990118,
  SCE_BGFT_ERROR_TASK_STOP_TIMEOUT = 0x80990119,
  SCE_BGFT_ERROR_PUP_DOWNLOAD_FATAL = 0x8099011A,
  SCE_BGFT_ERROR_UPLOAD_DEVICE_NOSPC = 0x8099011B,
  SCE_BGFT_ERROR_UNSUPPORTED_PKG_MANIFEST_NUMOFSPLITFILES = 0x8099011C,
  SCE_BGFT_ERROR_MISMATCH_PKG_MANIFEST_PIECES = 0x8099011D,
  SCE_BGFT_ERROR_CANNOT_SET_FREE_ZONE = 0x8099011E,
  SCE_BGFT_ERROR_MISSING_TEMP_PUP_FILE = 0x8099011F,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_400_BAD_REQUEST = 0x80991400,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_401_UNAUTHORIZED = 0x80991401,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_402_PAYMENT_REQUIRED = 0x80991402,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_403_FORBIDDEN = 0x80991403,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_404_NOT_FOUND = 0x80991404,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_405_METHOD_NOT_ALLOWED = 0x80991405,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_407_PROXY_AUTHENTICATION_REQUIRED = 0x80991407,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_408_REQUEST_TIMEOUT = 0x80991408,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_409_CONFLICT = 0x80991409,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_411_LENGTH_REQUIRED = 0x80991411,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_412_PRECONDITION_FAILED = 0x80991412,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_413_REQUEST_ENTITY_TOO_LARGE = 0x80991413,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_414_REQUEST_URI_TOO_LONG = 0x80991414,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_415_UNSUPPORTED_MEDIA_TYPE = 0x80991415,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_416_REQUESTED_RANGE_NOT_SATISFIABLE = 0x80991416,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_417_EXPECTATION_FAILED = 0x80991417,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_426_UPGRADE_REQUIRED = 0x80991426,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_500_INTERNAL_SERVER_ERROR = 0x80991500,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_501_NOT_IMPLEMENTED = 0x80991501,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_502_BAD_GATEWAY = 0x80991502,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_503_SERVICE_UNAVAILABLE = 0x80991503,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_504_GATEWAY_TIMEOUT = 0x80991504,
  SCE_BGFT_ERROR_HTTP_STATUS_CODE_505_HTTP_VERSION_NOT_SUPPORTED = 0x80991505,
  SCE_AV_SETTING_ERROR_NULL_POINTER_ARG = 0x809A0001,
  SCE_AV_SETTING_ERROR_INVALID_ARG = 0x809A0002,
  SCE_AV_SETTING_ERROR_UNKNOWN_DEVICE_ID = 0x809A0003,
  SCE_AV_SETTING_ERROR_NO_DEVICE = 0x809A0004,
  SCE_AV_SETTING_ERROR_UNSUPPORTED_FORMAT = 0x809A0005,
  SCE_AV_SETTING_ERROR_MEMORY = 0x809A0006,
  SCE_AV_SETTING_ERROR_DEVICE = 0x809A0007,
  SCE_AV_SETTING_ERROR_UNKNOWN_PROCESS = 0x809A0008,
  SCE_AV_SETTING_ERROR_UNKNOWN_TICKET = 0x809A0009,
  SCE_AV_SETTING_ERROR_BUSY = 0x809A000A,
  SCE_AV_SETTING_ERROR_UNAVAILABLE_FORMAT = 0x809A000B,
  SCE_AV_SETTING_ERROR_UNSUPPORTED_OPERATION_ON_LVP = 0x809A000C,
  SCE_AV_SETTING_ERROR_ASYNC_IPC_CANCELED = 0x809A000D,
  SCE_AV_SETTING_ERROR_NOT_FLAG_IN_PARAM_SFO = 0x809A000E,
  SCE_AV_SETTING_ERROR_OVER_MAX_NOTIFICATION_CLIENT_NUM = 0x809A0010,
  SCE_AV_SETTING_ERROR_UNKNOWN_NOTIFICATION_CLIENT = 0x809A0011,
  SCE_AV_SETTING_ERROR_SCANIN_ARG = 0x809A0080,
  SCE_AV_SETTING_ERROR_SCANIN_DISABLED = 0x809A0081,
  SCE_AV_SETTING_ERROR_SCANIN_UNSUPPORTED_SCALING_RATIO = 0x809A0082,
  SCE_AV_SETTING_ERROR_SCANIN_BUSY = 0x809A0083,
  SCE_AV_SETTING_ERROR_INTERNAL = 0x809A00FF,
  SCE_DEVICE_SERVICE_ERROR_INVALID_USER = 0x809B0001,
  SCE_DEVICE_SERVICE_ERROR_INVALID_DEVICE_TYPE = 0x809B0002,
  SCE_DEVICE_SERVICE_ERROR_INVALID_INDEX = 0x809B0003,
  SCE_DEVICE_SERVICE_ERROR_MEMORY = 0x809B0004,
  SCE_DEVICE_SERVICE_ERROR_INVALID_DEVICE_ID = 0x809B0005,
  SCE_MBUS_ERROR_INVALID_BUS_ID = 0x809B0006,
  SCE_MBUS_ERROR_INVALID_HANDLE = 0x809B0007,
  SCE_MBUS_ERROR_INVALID_SYSTEM_ID = 0x809B0008,
  SCE_MBUS_ERROR_INVALID_REQUESTER = 0x809B0009,
  SCE_MBUS_ERROR_UNSUPPORTED_BY_DEVICE = 0x809B000A,
  SCE_DEVICE_SERVICE_ERROR_INVALID_STATE = 0x809B000B,
  SCE_DEVICE_SERVICE_ERROR_INVALID_PARAM = 0x809B0080,
  SCE_DEVICE_SERVICE_ERROR_USER_NOT_LOGIN = 0x809B0081,
  SCE_DEVICE_SERVICE_ERROR_USER_OVER_MAX = 0x809B0082,
  SCE_DEVICE_SERVICE_ERROR_DRIVER_OVER_MAX = 0x809B0083,
  SCE_DEVICE_SERVICE_ERROR_DEVICE_OVER_MAX = 0x809B0084,
  SCE_DEVICE_SERVICE_ERROR_BUS_OVER_MAX = 0x809B0085,
  SCE_DEVICE_SERVICE_ERROR_PORT_OVER_MAX = 0x809B0086,
  SCE_MBUS_ERROR_CLIENT_OVER_MAX = 0x809B0087,
  SCE_MBUS_ERROR_EVENT_RECEIVE_CANCELED = 0x809B0088,
  SCE_DEVICE_SERVICE_ERROR_INTERNAL = 0x809B00FF,
  SCE_DBUTIL_ERROR_INVALID_ARG = 0x809C0101,
  SCE_DBUTIL_ERROR_NO_MEMORY = 0x809C0102,
  SCE_DBUTIL_ERROR_INVALID_OP = 0x809C0103,
  SCE_DBUTIL_ERROR_NOT_FOUND = 0x809C0104,
  SCE_DBUTIL_ERROR_NO_ROWID = 0x809C0105,
  SCE_DBUTIL_ERROR_INI_FILE = 0x809C0106,
  SCE_DBUTIL_ERROR_CANCELED = 0x809C0107,
  SCE_DBUTIL_ERROR_FATAL = 0x809C0108,
  SCE_DBUTIL_ERROR_NOT_SUPPORTED = 0x809C0109,
  SCE_DBUTIL_ERROR_SQLITE_ERROR = 0x809C0201,
  SCE_DBUTIL_ERROR_SQLITE_INTERNAL = 0x809C0202,
  SCE_DBUTIL_ERROR_SQLITE_PERM = 0x809C0203,
  SCE_DBUTIL_ERROR_SQLITE_ABORT = 0x809C0204,
  SCE_DBUTIL_ERROR_SQLITE_BUSY = 0x809C0205,
  SCE_DBUTIL_ERROR_SQLITE_LOCKED = 0x809C0206,
  SCE_DBUTIL_ERROR_SQLITE_NOMEM = 0x809C0207,
  SCE_DBUTIL_ERROR_SQLITE_READONLY = 0x809C0208,
  SCE_DBUTIL_ERROR_SQLITE_INTERRUPT = 0x809C0209,
  SCE_DBUTIL_ERROR_SQLITE_IOERR = 0x809C020A,
  SCE_DBUTIL_ERROR_SQLITE_CORRUPT = 0x809C020B,
  SCE_DBUTIL_ERROR_SQLITE_NOTFOUND = 0x809C020C,
  SCE_DBUTIL_ERROR_SQLITE_FULL = 0x809C020D,
  SCE_DBUTIL_ERROR_SQLITE_CANTOPEN = 0x809C020E,
  SCE_DBUTIL_ERROR_SQLITE_PROTOCOL = 0x809C020F,
  SCE_DBUTIL_ERROR_SQLITE_EMPTY = 0x809C0210,
  SCE_DBUTIL_ERROR_SQLITE_SCHEMA = 0x809C0211,
  SCE_DBUTIL_ERROR_SQLITE_TOOBIG = 0x809C0212,
  SCE_DBUTIL_ERROR_SQLITE_CONSTRAINT = 0x809C0213,
  SCE_DBUTIL_ERROR_SQLITE_MISMATCH = 0x809C0214,
  SCE_DBUTIL_ERROR_SQLITE_MISUSE = 0x809C0215,
  SCE_DBUTIL_ERROR_SQLITE_NOLFS = 0x809C0216,
  SCE_DBUTIL_ERROR_SQLITE_AUTH = 0x809C0217,
  SCE_DBUTIL_ERROR_SQLITE_FORMAT = 0x809C0218,
  SCE_DBUTIL_ERROR_SQLITE_RANGE = 0x809C0219,
  SCE_DBUTIL_ERROR_SQLITE_NOTADB = 0x809C021A,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_READ = 0x809C0D01,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_SHORT_READ = 0x809C0D02,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_WRITE = 0x809C0D03,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_FSYNC = 0x809C0D04,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_DIR_FSYNC = 0x809C0D05,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_TRUNCATE = 0x809C0D06,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_FSTAT = 0x809C0D07,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_UNLOCK = 0x809C0D08,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_RDLOCK = 0x809C0D09,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_DELETE = 0x809C0D0A,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_BLOCKED = 0x809C0D0B,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_NOMEM = 0x809C0D0C,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_ACCESS = 0x809C0D0D,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_CHECKRESERVEDLOCK = 0x809C0D0E,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_LOCK = 0x809C0D0F,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_CLOSE = 0x809C0D10,
  SCE_DBUTIL_ERROR_SQLITE_IOERR_DIR_CLOSE = 0x809C0D11,
  SCE_DBUTIL_ERROR_SQLITE_LOCKED_SHAREDCACHE = 0x809C0D12,
  SCE_DBSETUP_ERROR_WRONG_DBID = 0x809C1001,
  SCE_DBSETUP_ERROR_WRONG_SCHEMA = 0x809C1002,
  SCE_DBSETUP_ERROR_FAILED_COPY = 0x809C1003,
  SCE_DBSETUP_ERROR_CORRUPTED_FILE = 0x809C1004,
  SCE_DBSETUP_ERROR_CORRUPTED_INITIAL_FILE = 0x809C1005,
  SCE_DBSETUP_ERROR_ACCES = 0x809C1006,
  SCE_DBSETUP_ERROR_NAMETOOLONG = 0x809C1007,
  SCE_DBSETUP_ERROR_INVAL = 0x809C1008,
  SCE_DBSETUP_ERROR_TIMEOUT = 0x809C1009,
  SCE_DBSETUP_ERROR_REQUIRED_SCHEMA_UPDATE = 0x809C100A,
  SCE_DBSETUP_ERROR_NO_MEMORY = 0x809C100B,
  SCE_DBSETUP_ERROR_INVALID_ARG = 0x809C100C,
  SCE_DBSETUP_ERROR_WRONG_DB_TYPE = 0x809C100D,
  SCE_DBSETUP_ERROR_WRONG_DB_PATH = 0x809C100E,
  SCE_DBRECOVERY_ERROR_INVALID_ARGUMENT = 0x809C1100,
  SCE_DBRECOVERY_ERROR_INVALID_FILE = 0x809C1101,
  SCE_DBRECOVERY_ERROR_FILE_PATH_TOO_LONG = 0x809C1102,
  SCE_DBRECOVERY_ERROR_FILE_IO = 0x809C1103,
  SCE_DBRECOVERY_ERROR_DB_VERSION_NOT_IN_USE = 0x809C1104,
  SCE_DBRECOVERY_ERROR_NO_MEMORY = 0x809C1105,
  SCE_DBRECOVERY_ERROR_SQLITE_IOERR = 0x809C1106,
  SCE_DBRECOVERY_ERROR_SQLITE_CORRUPT = 0x809C1107,
  SCE_DBRECOVERY_ERROR_SQLITE_CANTOPEN = 0x809C1108,
  SCE_DBRECOVERY_ERROR_SQLITE_EMPTY = 0x809C1109,
  SCE_DBRECOVERY_ERROR_SQLITE_FORMAT = 0x809C110A,
  SCE_DBRECOVERY_ERROR_SQLITE_NOTADB = 0x809C110B,
  SCE_DBRECOVERY_ERROR_DBSL_WRONG_SCHEMA = 0x809C110C,
  SCE_DBRECOVERY_ERROR_DBSL_CORRUPTED_FILE = 0x809C110D,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_APP_DB_ERROR = 0x809C110E,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_APP_DB_IOERR = 0x809C110F,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_APP_DB_CORRUPT = 0x809C1110,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_APP_DB_CANTOPEN = 0x809C1111,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_APP_DB_EMPTY = 0x809C1112,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_APP_DB_FORMAT = 0x809C1113,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_APP_DB_NOTADB = 0x809C1114,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_CONTENT_DB_ERROR = 0x809C1115,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_CONTENT_DB_IOERR = 0x809C1116,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_CONTENT_DB_CORRUPT = 0x809C1117,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_CONTENT_DB_CANTOPEN = 0x809C1118,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_CONTENT_DB_EMPTY = 0x809C1119,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_CONTENT_DB_FORMAT = 0x809C111A,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_CONTENT_DB_NOTADB = 0x809C111B,
  SCE_DBRECOVERY_ERROR_APP_BROWSE_ACCESSOR_CONTENT_DB_ACCOUNT_ID_ERROR = 0x809C111C,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_ERROR = 0x809C111D,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_IOERR = 0x809C111E,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_CORRUPT = 0x809C111F,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_CANTOPEN = 0x809C1120,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_EMPTY = 0x809C1121,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_FORMAT = 0x809C1122,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_NOTADB = 0x809C1123,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_ACCOUNT_ID_ERROR = 0x809C1124,
  SCE_DBRECOVERY_ERROR_NOTIFICATION_ACCESSOR_ERROR = 0x809C1125,
  SCE_DBRECOVERY_ERROR_NOTIFICATION_ACCESSOR_IOERR = 0x809C1126,
  SCE_DBRECOVERY_ERROR_NOTIFICATION_ACCESSOR_CORRUPT = 0x809C1127,
  SCE_DBRECOVERY_ERROR_NOTIFICATION_ACCESSOR_CANTOPEN = 0x809C1128,
  SCE_DBRECOVERY_ERROR_NOTIFICATION_ACCESSOR_EMPTY = 0x809C1129,
  SCE_DBRECOVERY_ERROR_NOTIFICATION_ACCESSOR_FORMAT = 0x809C112A,
  SCE_DBRECOVERY_ERROR_NOTIFICATION_ACCESSOR_NOTADB = 0x809C112B,
  SCE_DBRECOVERY_ERROR_POPUP_ACCESSOR_ERROR = 0x809C112C,
  SCE_DBRECOVERY_ERROR_POPUP_ACCESSOR_IOERR = 0x809C112D,
  SCE_DBRECOVERY_ERROR_POPUP_ACCESSOR_CORRUPT = 0x809C112E,
  SCE_DBRECOVERY_ERROR_POPUP_ACCESSOR_CANTOPEN = 0x809C112F,
  SCE_DBRECOVERY_ERROR_POPUP_ACCESSOR_EMPTY = 0x809C1130,
  SCE_DBRECOVERY_ERROR_POPUP_ACCESSOR_FORMAT = 0x809C1131,
  SCE_DBRECOVERY_ERROR_POPUP_ACCESSOR_NOTADB = 0x809C1132,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_ERROR = 0x809C1133,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_IOERR = 0x809C1134,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_CORRUPT = 0x809C1135,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_CANTOPEN = 0x809C1136,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_EMPTY = 0x809C1137,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_FORMAT = 0x809C1138,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_NOTADB = 0x809C1139,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_ACCOUNT_ID_ERROR = 0x809C113A,
  SCE_DBRECOVERY_ERROR_STATE = 0x809C113B,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_READONLY = 0x809C113C,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_NOT_EXIST_USER = 0x809C113D,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_NOT_EXIST_USER = 0x809C113E,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_TOO_MANY_USERS = 0x809C113F,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_TOO_MANY_USERS = 0x809C1140,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_MANAGER_USER_UNAVAILABLE = 0x809C1141,
  SCE_DBRECOVERY_ERROR_AV_CONTENT_ACCESSOR_USER_UNAVAILABLE = 0x809C1142,
  SCE_DBRECOVERY_ERROR_NOTIFICATION_ACCESSOR_READONLY = 0x809C1143,
  SCE_DBRECOVERY_ERROR_POPUP_ACCESSOR_READONLY = 0x809C1144,
  SCE_DBRECOVERY_ERROR_NOT_EXIST_RESULTS = 0x809C1145,
  SCE_DBRECOVERY_ERROR_GET_USER_DATA = 0x809C1146,
  SCE_DBRECOVERY_ERROR_REQUESTED = 0x809C1147,
  SCE_DBRECOVERY_ERROR_REQUESTED_WHEN_CRASH = 0x809C1148,
  SCE_DBRECOVERY_ERROR_NOT_INITIALIZED = 0x809C1149,
  SCE_DBRECOVERY_ERROR_NOT_COMPLETED = 0x809C114A,
  SCE_DBRECOVERY_ERROR_SKIPPED_DB_RECOVERY = 0x809C114B,
  SCE_DBRECOVERY_ERROR_IPMI_SERVER_HAS_BEEN_DESTROYED = 0x809C114C,
  SCE_DBRECOVERY_ERROR_CONVERT_FAILED = 0x809C114D,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_DEFAULT = 0x809C114E,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_CORE_APP_DB = 0x809C114F,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_CORE_AV_CONTENT_DB = 0x809C1150,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_CORE_SAVEDATA_DB = 0x809C1151,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_CORE_SHARE = 0x809C1152,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_CORE_ADD_CONTENT_DB = 0x809C1153,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_UI_APP_DB = 0x809C1154,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_UI_VOICE_RECOGNITION = 0x809C1155,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_UI_NOTIFICATION_DB = 0x809C1156,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_UI_VISION_RECOGNITION = 0x809C1157,
  SCE_DBRECOVERY_ERROR_PREPARATION_FAILED_UI_ASYNC_STORAGE = 0x809C1158,
  SCE_DBRECOVERY_ERROR_DEBUG_READONLY = 0x809C1159,
  SCE_DBRECOVERY_ERROR_DEBUG_NOT_EXIST = 0x809C115A,
  SCE_CONTENT_MANAGER_ERROR_INVALID_ARGUMENT = 0x809D0001,
  SCE_CONTENT_MANAGER_ERROR_FATAL = 0x809D0002,
  SCE_CONTENT_MANAGER_ERROR_NOT_SUPPORTED = 0x809D0003,
  SCE_CONTENT_MANAGER_ERROR_INVALID_USER = 0x809D0004,
  SCE_CONTENT_MANAGER_ERROR_INVALID_APP = 0x809D0005,
  SCE_CONTENT_MANAGER_ERROR_INEXIST_OBJECT = 0x809D0006,
  SCE_CONTENT_MANAGER_ERROR_INVALID_STORAGE = 0x809D0007,
  SCE_CONTENT_MANAGER_ERROR_NO_MEMORY = 0x809D0008,
  SCE_CONTENT_MANAGER_ERROR_NO_RECORD = 0x809D0009,
  SCE_CONTENT_MANAGER_ERROR_NO_PERMISSION = 0x809D000A,
  SCE_CONTENT_MANAGER_ERROR_INVALID_SEARCH_INFO = 0x809D000B,
  SCE_CONTENT_MANAGER_ERROR_INVALID_APP_INFO = 0x809D000C,
  SCE_CONTENT_MANAGER_ERROR_FAILED_CONNECTION = 0x809D000D,
  SCE_CONTENT_MANAGER_ERROR_INVALID_SCHEMA = 0x809D000E,
  SCE_CONTENT_MANAGER_ERROR_NOT_IMPLEMENTED = 0x809D000F,
  SCE_CONTENT_MANAGER_ERROR_NO_ITERATOR = 0x809D0010,
  SCE_CONTENT_MANAGER_ERROR_UNKNOWN_TABLE = 0x809D0011,
  SCE_CONTENT_MANAGER_ERROR_OVER_NUM_OF_RESULT = 0x809D0012,
  SCE_CONTENT_MANAGER_ERROR_FILE_IO_RESULT = 0x809D0013,
  SCE_CONTENT_MANAGER_ERROR_CANCELED = 0x809D0014,
  SCE_CONTENT_MANAGER_ERROR_BUSY = 0x809D0015,
  SCE_CONTENT_MANAGER_ERROR_NOT_OPERATED = 0x809D0016,
  SCE_CONTENT_MANAGER_ERROR_NOT_SUPPORT_FORMAT_THUNBNAIL = 0x809D0017,
  SCE_CONTENT_MANAGER_ERROR_FILE_NOSPACE = 0x809D0018,
  SCE_CONTENT_MANAGER_ERROR_INVALID_EXTRA_FILE = 0x809D0019,
  SCE_CONTENT_MANAGER_ERROR_NOT_EXIST_UPLOAD_TASK = 0x809D001A,
  SCE_CONTENT_MANAGER_ERROR_NOT_EXIST_UPLOAD_CONTENT = 0x809D001B,
  SCE_CONTENT_MANAGER_ERROR_CONTENT_NOT_FOUND = 0x809D001C,
  SCE_CONTENT_MANAGER_ERROR_TOO_MANY_TITLE_ID = 0x809D001D,
  SCE_CONTENT_MANAGER_ERROR_NOT_EXIST_USER = 0x809D001E,
  SCE_CONTENT_MANAGER_ERROR_TOO_MANY_USERS = 0x809D001F,
  SCE_CONTENT_MANAGER_ERROR_USER_UNAVAILABLE = 0x809D0020,
  SCE_CONTENT_MANAGER_ERROR_FILES_IN_USE = 0x809D0021,
  SCE_CONTENT_MANAGER_ERROR_THUMBNAIL_NOT_FOUND = 0x809D0022,
  SCE_CONTENT_MANAGER_ERROR_NOT_CONTENT = 0x809D0023,
  SCE_CONTENT_SEARCH_ERROR_NOT_INITIALIZED = 0x809D1001,
  SCE_CONTENT_SEARCH_ERROR_ALREADY_INITIALIZED = 0x809D1002,
  SCE_CONTENT_SEARCH_ERROR_INVALID_PARAM = 0x809D1003,
  SCE_CONTENT_SEARCH_ERROR_NOMEM = 0x809D1004,
  SCE_CONTENT_SEARCH_ERROR_INVALID_SEARCH_LOGICAL_CONNECTOR = 0x809D1005,
  SCE_CONTENT_SEARCH_ERROR_INVALID_SEARCH_COLUMN = 0x809D1006,
  SCE_CONTENT_SEARCH_ERROR_INVALID_SEARCH_COLUMN_VALUE_OPERATOR = 0x809D1007,
  SCE_CONTENT_SEARCH_ERROR_INVALID_ORDERBY_CONDITION = 0x809D1008,
  SCE_CONTENT_SEARCH_ERROR_INVALID_AGGREGATED_CONDITION = 0x809D1009,
  SCE_CONTENT_SEARCH_ERROR_LIMIT_TOO_BIG = 0x809D100A,
  SCE_CONTENT_SEARCH_ERROR_SEARCH_PARAMETER_TOO_MANY = 0x809D100B,
  SCE_CONTENT_SEARCH_ERROR_DB_BUSY = 0x809D100C,
  SCE_CONTENT_SEARCH_ERROR_DB_FATAL = 0x809D100D,
  SCE_CONTENT_SEARCH_ERROR_TOO_MANY_METADATA = 0x809D100E,
  SCE_CONTENT_SEARCH_ERROR_NOT_SUPPORT_MIME_TYPE = 0x809D100F,
  SCE_CONTENT_SEARCH_ERROR_NOT_EXIST_FIELD = 0x809D1010,
  SCE_CONTENT_SEARCH_ERROR_INVALID_CONTENTS_FILE_FORMAT = 0x809D1011,
  SCE_CONTENT_SEARCH_ERROR_NOT_EXIST_FILE = 0x809D1012,
  SCE_CONTENT_SEARCH_ERROR_PERMISSION_REQUIRED = 0x809D1013,
  SCE_CONTENT_BINDER_ERROR_INVALID_PARAM = 0x809D2001,
  SCE_CONTENT_BINDER_ERROR_DIFFERENCE_UPDATED = 0x809D2002,
  SCE_CONTENT_BINDER_ERROR_ALREADY_STARTED = 0x809D2003,
  SCE_CONTENT_BINDER_ERROR_NOT_STARTED = 0x809D2004,
  SCE_CONTENT_BINDER_ERROR_NOT_ENDED = 0x809D2005,
  SCE_CONTENT_BINDER_ERROR_NOT_INITIALIZED = 0x809D2006,
  SCE_CONTENT_BINDER_ERROR_ALREADY_INITIALIZED = 0x809D2007,
  SCE_CONTENT_BINDER_ERROR_INVALID_SEARCH_COLUMN = 0x809D2008,
  SCE_CONTENT_EXPORT_ERROR_CANCELED = 0x809D3001,
  SCE_CONTENT_EXPORT_ERROR_NOTACCEPT = 0x809D3002,
  SCE_CONTENT_EXPORT_ERROR_BUSY = 0x809D3003,
  SCE_CONTENT_EXPORT_ERROR_NOINIT = 0x809D3004,
  SCE_CONTENT_EXPORT_ERROR_MULTIPLEINIT = 0x809D3005,
  SCE_CONTENT_EXPORT_ERROR_NOMEM = 0x809D3006,
  SCE_CONTENT_EXPORT_ERROR_FILE_NOT_FOUND = 0x809D3011,
  SCE_CONTENT_EXPORT_ERROR_NOT_SUPPORTED_FORMAT = 0x809D3012,
  SCE_CONTENT_EXPORT_ERROR_LARGE_TITLE = 0x809D3013,
  SCE_CONTENT_EXPORT_ERROR_LARGE_COMMENT = 0x809D3015,
  SCE_CONTENT_EXPORT_ERROR_INVALDPARAM = 0x809D3016,
  SCE_CONTENT_EXPORT_ERROR_DISKFULL = 0x809D3017,
  SCE_CONTENT_EXPORT_ERROR_EXECUTION_MAX = 0x809D3018,
  SCE_CONTENT_EXPORT_ERROR_NOT_SUPPORT_FORMAT_THUMBNAIL = 0x809D3019,
  SCE_CONTENT_EXPORT_ERROR_NOT_SUPPORT_FORMAT_THUNBNAIL = 0x809D3019,
  SCE_CONTENT_EXPORT_ERROR_FILES_IN_USE = 0x809D301A,
  SCE_CONTENT_EXPORT_ERROR_DATA_PROVIDE_FUNCTION = 0x809D301B,
  SCE_CONTENT_EXPORT_ERROR_BADFILENAME = 0x809D301D,
  SCE_CONTENT_EXPORT_ERROR_NOT_IMPLEMENTED = 0x809D3FFF,
  SCE_MDRW_ERROR_NOMEM = 0x809D4001,
  SCE_MDRW_ERROR_INVAL = 0x809D4002,
  SCE_MDRW_ERROR_AGAIN = 0x809D4003,
  SCE_MDRW_ERROR_BUSY = 0x809D4004,
  SCE_MDRW_ERROR_NOT_SUPPORT = 0x809D4005,
  SCE_MDRW_ERROR_NO_ENTRY = 0x809D4006,
  SCE_MDRW_ERROR_WRONG_STATUS = 0x809D4011,
  SCE_MDRW_ERROR_BROKEN_FILE = 0x809D4012,
  SCE_METAGEN_ERROR_INVALID_ARGUMENT = 0x809D4013,
  SCE_METAGEN_ERROR_FATAL_ERROR = 0x809D4014,
  SCE_METAGEN_ERROR_ALREADY_EXIST = 0x809D4015,
  SCE_METAGEN_ERROR_CANNOT_ACCESS_DB = 0x809D4016,
  SCE_METAGEN_ERROR_INVALID_DB_RESOURCE = 0x809D4017,
  SCE_METAGEN_ERROR_INVALID_HANDLE = 0x809D4018,
  SCE_METAGEN_ERROR_NO_EXIST = 0x809D4019,
  SCE_METAGEN_ERROR_NOT_DB_OPENED = 0x809D401A,
  SCE_METAGEN_ERROR_NOT_EXIST_DB_FIELD = 0x809D401B,
  SCE_METAGEN_ERROR_NOT_EXIST_DIRECTORY = 0x809D401C,
  SCE_METAGEN_ERROR_NOT_EXIST_FIELD = 0x809D401D,
  SCE_METAGEN_ERROR_NOT_EXIST_FILE = 0x809D401E,
  SCE_METAGEN_ERROR_NOT_EXIST_GROUP = 0x809D401F,
  SCE_METAGEN_ERROR_NOT_EXIST_PROFILE = 0x809D4020,
  SCE_METAGEN_ERROR_NOW_PROMOTING = 0x809D4021,
  SCE_METAGEN_ERROR_REJECTED_ROLLBACK_OPERATION = 0x809D4024,
  SCE_METAGEN_ERROR_TOO_LARGE_TRANSACTION_VALUE = 0x809D4025,
  SCE_METAGEN_ERROR_CANNOT_USE_TRANSACTION = 0x809D4026,
  SCE_METAGEN_ERROR_NO_COMMIT_OPERATION = 0x809D4027,
  SCE_METAGEN_ERROR_OVER_MAX_HANDLER = 0x809D4028,
  SCE_METAGEN_ERROR_NO_MEMORY = 0x809D4029,
  SCE_METAGEN_ERROR_NO_HANDLER = 0x809D402A,
  SCE_METAGEN_ERROR_ADD_PROMOTER = 0x809D402B,
  SCE_METAGEN_ERROR_SUBTRACT_PROMOTER = 0x809D402C,
  SCE_METAGEN_ERROR_GET_DIR_ENT = 0x809D402D,
  SCE_METAGEN_ERROR_INVALID_PROMOTE_INFORMATION = 0x809D402E,
  SCE_METAGEN_ERROR_LONG_NAME = 0x809D402F,
  SCE_METAGEN_ERROR_NOW_PROCESSING = 0x809D4030,
  SCE_METAGEN_ERROR_NO_ITEMS = 0x809D4031,
  SCE_METAGEN_ERROR_GEN_CANCELED = 0x809D4032,
  SCE_METAGEN_ERROR_FS_OP = 0x809D4033,
  SCE_METAGEN_ERROR_FILE_NOT_OPEN = 0x809D4034,
  SCE_METAGEN_ERROR_FILE_OPEN = 0x809D4035,
  SCE_METAGEN_ERROR_SQL_NO_COND = 0x809D4036,
  SCE_METAGEN_ERROR_CANNOT_EXPLICIT_TRANSACTION = 0x809D4037,
  SCE_METAGEN_ERROR_INVALID_FILE = 0x809D4038,
  SCE_METAGEN_ERROR_NO_CORRESPONDED_PROMOTER = 0x809D4039,
  SCE_METAGEN_ERROR_NO_PRX = 0x809D403A,
  SCE_METAGEN_ERROR_REACH_DEPTH_LIMIT = 0x809D403B,
  SCE_METAGEN_ERROR_GEN_SKIPPED = 0x809D403C,
  SCE_METAGEN_ERROR_INVALID_FILE_NAME = 0x809D403D,
  SCE_METAGEN_ERROR_FULL_TARGET_AREA = 0x809D403E,
  SCE_PHOTO_PROMOTER_ERROR_CREATE_THUMBNAIL = 0x809D4050,
  SCE_PHOTO_PROMOTER_ERROR_DB_CORRUPTED = 0x809D4051,
  SCE_PHOTO_PROMOTER_ERROR_FILE_CORRUPTED = 0x809D4052,
  SCE_PHOTO_PROMOTER_ERROR_FILE_NOTSUPPORTED = 0x809D4053,
  SCE_MDRW_ERROR_API_NOT_SUPPORTED = 0x809D4054,
  SCE_GV_MP4_PARSER_ERROR_INVALID_ARGUMENT = 0x809D4200,
  SCE_GV_MP4_PARSER_ERROR_FATAL = 0x809D4201,
  SCE_GV_MP4_PARSER_ERROR_NO_EXIST = 0x809D4202,
  SCE_GV_MP4_PARSER_ERROR_NOT_EXIST_FILE = 0x809D4203,
  SCE_GV_MP4_PARSER_ERROR_NO_MEMORY = 0x809D4204,
  SCE_GV_MP4_PARSER_ERROR_NO_ITEMS = 0x809D4205,
  SCE_GV_MP4_PARSER_ERROR_GEN_CANCELED = 0x809D4206,
  SCE_GV_MP4_PARSER_ERROR_FS_OP = 0x809D4207,
  SCE_GV_MP4_PARSER_ERROR_FILE_NOT_OPEN = 0x809D4208,
  SCE_GV_MP4_PARSER_ERROR_INVALID_FILE = 0x809D4209,
  SCE_GV_MP4_PARSER_ERROR_GEN_SKIPPED = 0x809D420A,
  SCE_GV_MP4_PARSER_ERROR_INVALID_OPERATION = 0x809D420B,
  SCE_GV_MP4_PARSER_ERROR_CREATE_THUMBNAIL = 0x809D420C,
  SCE_GV_MP4_PARSER_ERROR_INVALID_FIELD = 0x809D420D,
  SCE_GV_MP4_PARSER_ERROR_CREATE_THUMBNAIL_TIMEOUT = 0x809D420E,
  SCE_CONTENT_DELETE_ERROR_INVALID_PARAM = 0x809D5001,
  SCE_CONTENT_DELETE_ERROR_NOT_INITIALIZED = 0x809D5002,
  SCE_CONTENT_DELETE_ERROR_ALREADY_INITIALIZED = 0x809D5003,
  SCE_CONTENT_DELETE_ERROR_NOMEM = 0x809D5004,
  SCE_CONTENT_DELETE_ERROR_FILE_NOT_FOUND = 0x809D5005,
  SCE_CONTENT_DELETE_ERROR_NO_PERMISSION = 0x809D5006,
  SCE_ABSTRACTSTORAGE_ERROR_NG = 0x809E0001,
  SCE_ABSTRACTSTORAGE_ERROR_NO_IMPL = 0x809E0002,
  SCE_ABSTRACTSTORAGE_ERROR_ALREADY = 0x809E0003,
  SCE_ABSTRACTSTORAGE_ERROR_UNREGIST = 0x809E0004,
  SCE_ABSTRACTSTORAGE_ERROR_NOSUPPORT = 0x809E0005,
  SCE_ABSTRACTSTORAGE_ERROR_NOMEM = 0x809E0006,
  SCE_ABSTRACTSTORAGE_ERROR_SERVICE = 0x809E0007,
  SCE_ABSTRACTSTORAGE_ERROR_NOTFOUND = 0x809E0101,
  SCE_ABSTRACTSTORAGE_ERROR_GET_ACCESSTOKEN = 0x809E0201,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP = 0x809E0202,
  SCE_ABSTRACTSTORAGE_ERROR_INVALID_PARAM = 0x809E0203,
  SCE_ABSTRACTSTORAGE_ERROR_GET_LOCATION = 0x809E0204,
  SCE_ABSTRACTSTORAGE_ERROR_GET_SESSIONID = 0x809E0205,
  SCE_ABSTRACTSTORAGE_ERROR_GET_RANGE = 0x809E0206,
  SCE_ABSTRACTSTORAGE_ERROR_SUBCONTENT_MAX = 0x809E0207,
  SCE_ABSTRACTSTORAGE_ERROR_SUBCONTENT_NOT_CLOSED = 0x809E0208,
  SCE_ABSTRACTSTORAGE_ERROR_SEGMENT_UPLOAD_INIT = 0x809E0209,
  SCE_ABSTRACTSTORAGE_ERROR_SEGMENT_UPLOAD_FINALIZE = 0x809E020A,
  SCE_ABSTRACTSTORAGE_ERROR_SEGMENT_UPLOAD = 0x809E020B,
  SCE_ABSTRACTSTORAGE_ERROR_GET_CONTENT_ID = 0x809E020C,
  SCE_ABSTRACTSTORAGE_ERROR_GET_PROPERTIES = 0x809E020D,
  SCE_ABSTRACTSTORAGE_ERROR_POST_PARAM = 0x809E020E,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_403_FORBIDDEN_DAILYMOTION = 0x809E020F,
  SCE_ABSTRACTSTORAGE_ERROR_SET_TAG = 0x809E0210,
  SCE_ABSTRACTSTORAGE_ERROR_SEGMENT_UPLOAD_STATUS = 0x809E0211,
  SCE_ABSTRACTSTORAGE_ERROR_NO_PERMISSION_TO_UPLOAD_THUMBNAIL = 0x809E0212,
  SCE_ABSTRACTSTORAGE_ERROR_ABORT = 0x809E0301,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_308_PERMANENT_REDIRECT = 0x809E1308,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_400_BAD_REQUEST = 0x809E1400,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_401_UNAUTHORIZED = 0x809E1401,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_402_PAYMENT_REQUIRED = 0x809E1402,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_403_FORBIDDEN = 0x809E1403,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_404_NOT_FOUND = 0x809E1404,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_405_METHOD_NOT_ALLOWED = 0x809E1405,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_406_NOT_ACCEPTABLE = 0x809E1406,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_407_PROXY_AUTHENTICATION_REQUIRED = 0x809E1407,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_408_REQUEST_TIMEOUT = 0x809E1408,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_409_CONFLICT = 0x809E1409,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_410_GONE = 0x809E140A,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_411_LENGTH_REQUIRED = 0x809E140B,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_412_PRECONDITION_FAILED = 0x809E140C,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_413_REQUEST_ENTITY_TOO_LARGE = 0x809E140D,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_414_REQUEST_URI_TOO_LONG = 0x809E140E,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_415_UNSUPPORTED_MEDIA_TYPE = 0x809E140F,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_416_REQUESTED_RANGE_NOT_SATISFIABLE = 0x809E1410,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_417_EXPECTATION_FAILED = 0x809E1411,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_418_I_M_A_TEAPOT = 0x809E1412,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_419_AUTHENTICATION_TIMEOUT = 0x809E1413,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_420_METHOD_FAILURE_ENHANCE_YOUR_CALM = 0x809E1414,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_422_UNPROCESSABLE_ENTITY = 0x809E1415,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_423_LOCKED = 0x809E1416,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_424_FAILED_DEPENDENCY = 0x809E1417,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_425_METHOD_FAILURE = 0x809E1418,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_426_UNORDERED_COLLECTION = 0x809E1419,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_427_UPGRADE_REQUIRED = 0x809E141A,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_428_PRECONDITION_REQUIRED = 0x809E141B,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_429_TOO_MANY_REQUESTS = 0x809E141C,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 0x809E141D,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_444_NO_RESPONSE = 0x809E141E,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_449_RETRY_WITH = 0x809E141F,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_450_BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS = 0x809E1420,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_451_UNAVAILABLE_FOR_LEGAL_REASONS = 0x809E1421,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_499_CLIENT_CLOSED_REQUEST = 0x809E1422,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_500_INTERNAL_SERVER_ERROR = 0x809E1500,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_501_NOT_IMPLEMENTED = 0x809E1501,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_502_BAD_GATEWAY = 0x809E1502,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_503_SERVICE_UNAVAILABLE = 0x809E1503,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_504_GATEWAY_TIMEOUT = 0x809E1504,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_505_HTTP_VERSION_NOT_SUPPORTED = 0x809E1505,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_506_VARIANT_ALSO_NEGOTIATES = 0x809E1506,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_507_INSUFFICIENT_STORAGE = 0x809E1507,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_508_LOOP_DETECTED = 0x809E1508,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_509_BANDWIDTH_LIMIT_EXCEEDED = 0x809E1509,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_510_NOT_EXTENDED = 0x809E150A,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_511_NETWORK_AUTHENTICATION_REQUIRED = 0x809E150B,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_522_CONNECTION_TIMED_OUT = 0x809E150C,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_598_NETWORK_READ_TIMEOUT_ERROR = 0x809E150D,
  SCE_ABSTRACTSTORAGE_ERROR_HTTP_STATUS_CODE_599_NETWORK_CONNECT_TIMEOUT_ERROR = 0x809E150E,
  SCE_SAVE_DATA_ERROR_PARAMETER = 0x809F0000,
  SCE_SAVE_DATA_ERROR_NOT_INITIALIZED = 0x809F0001,
  SCE_SAVE_DATA_ERROR_OUT_OF_MEMORY = 0x809F0002,
  SCE_SAVE_DATA_ERROR_BUSY = 0x809F0003,
  SCE_SAVE_DATA_ERROR_NOT_MOUNTED = 0x809F0004,
  SCE_SAVE_DATA_ERROR_NO_PERMISSION = 0x809F0005,
  SCE_SAVE_DATA_ERROR_FINGERPRINT_MISMATCH = 0x809F0006,
  SCE_SAVE_DATA_ERROR_EXISTS = 0x809F0007,
  SCE_SAVE_DATA_ERROR_NOT_FOUND = 0x809F0008,
  SCE_SAVE_DATA_ERROR_NO_SPACE = 0x809F0009,
  SCE_SAVE_DATA_ERROR_NO_SPACE_FS = 0x809F000A,
  SCE_SAVE_DATA_ERROR_INTERNAL = 0x809F000B,
  SCE_SAVE_DATA_ERROR_MOUNT_FULL = 0x809F000C,
  SCE_SAVE_DATA_ERROR_BAD_MOUNTED = 0x809F000D,
  SCE_SAVE_DATA_ERROR_FILE_NOT_FOUND = 0x809F000E,
  SCE_SAVE_DATA_ERROR_BROKEN = 0x809F000F,
  SCE_SAVE_DATA_ERROR_MOUNT_INHIBIT = 0x809F0010,
  SCE_SAVE_DATA_ERROR_INVALID_LOGIN_USER = 0x809F0011,
  SCE_SAVE_DATA_ERROR_MEMORY_NOT_READY = 0x809F0012,
  SCE_SAVE_DATA_ERROR_BACKUP_BUSY = 0x809F0013,
  SCE_SAVE_DATA_ERROR_OPERATION_INHIBIT = 0x809F0014,
  SCE_SAVE_DATA_ERROR_NOT_REGIST_CALLBACK = 0x809F0015,
  SCE_SAVE_DATA_ERROR_BUSY_FOR_SAVING = 0x809F0016,
  SCE_SAVE_DATA_ERROR_LIMITATION_OVER = 0x809F0017,
  SCE_SAVE_DATA_ERROR_EVENT_BUSY = 0x809F0018,
  SCE_SAVE_DATA_ERROR_PARAMSFO_TRANSFER_TITLE_ID_NOT_FOUND = 0x809F0019,
  SCE_SAVE_DATA_I_ERROR_ALREADY_INITIALIZED = 0x809F8001,
  SCE_SAVE_DATA_I_ERROR_NOT_INITIALIZED = 0x809F8002,
  SCE_SAVE_DATA_I_ERROR_OUT_OF_MEMORY = 0x809F8003,
  SCE_SAVE_DATA_I_ERROR_INVALID_ARGUMENT = 0x809F8004,
  SCE_SAVE_DATA_I_ERROR_NOT_SUPPORTED = 0x809F8005,
  SCE_SAVE_DATA_I_ERROR_INVALID_POINTER = 0x809F8006,
  SCE_SAVE_DATA_I_ERROR_BUFFER_SIZE = 0x809F8007,
  SCE_SAVE_DATA_I_ERROR_INVALID_ARGUMENT_SERVER = 0x809F8008,
  SCE_SAVE_DATA_I_ERROR_INVALID_LOGIN_USER = 0x809F8009,
  SCE_SAVE_DATA_I_ERROR_UNSUPPORTED_FORMAT = 0x809F800A,
  SCE_SAVE_DATA_I_ERROR_NOT_SPECIFIED = 0x809F800B,
  SCE_SAVE_DATA_I_ERROR_NEED_PLUS = 0x809F800C,
  SCE_SAVE_DATA_I_ERROR_NO_PERMISSION_TO_CALL_API = 0x809F800D,
  SCE_SAVE_DATA_I_ERROR_ABORT = 0x809F8010,
  SCE_SAVE_DATA_I_ERROR_CANCELED = 0x809F8011,
  SCE_SAVE_DATA_I_ERROR_TIMEOUT = 0x809F8012,
  SCE_SAVE_DATA_I_ERROR_SKIP = 0x809F8013,
  SCE_SAVE_DATA_I_ERROR_INVALID_DIRNAME = 0x809F8014,
  SCE_SAVE_DATA_I_ERROR_LIBRARY_ALREADY_USED = 0x809F8015,
  SCE_SAVE_DATA_I_ERROR_GAME_APP_RUNNING = 0x809F8016,
  SCE_SAVE_DATA_I_ERROR_PATH = 0x809F8020,
  SCE_SAVE_DATA_I_ERROR_HIERARCHY_LIMIT_OVER = 0x809F8021,
  SCE_SAVE_DATA_I_ERROR_DIR_NOT_FOUND = 0x809F8022,
  SCE_SAVE_DATA_I_ERROR_FILE_NOT_FOUND = 0x809F8023,
  SCE_SAVE_DATA_I_ERROR_DIR_EXIST = 0x809F8024,
  SCE_SAVE_DATA_I_ERROR_FILE_EXIST = 0x809F8025,
  SCE_SAVE_DATA_I_ERROR_FINALIZED = 0x809F8026,
  SCE_SAVE_DATA_I_ERROR_FILE_SEEK = 0x809F8027,
  SCE_SAVE_DATA_I_ERROR_ALIAS_FULL = 0x809F8030,
  SCE_SAVE_DATA_I_ERROR_ALIAS_UNKNOWN = 0x809F8031,
  SCE_SAVE_DATA_I_ERROR_MOUNT_ALREADY = 0x809F8032,
  SCE_SAVE_DATA_I_ERROR_MOUNT_UNKNOWN = 0x809F8033,
  SCE_SAVE_DATA_I_ERROR_MOUNT_RDONLY = 0x809F8034,
  SCE_SAVE_DATA_I_ERROR_NOT_INITIALIZED_MOUNT_MAN = 0x809F8035,
  SCE_SAVE_DATA_I_ERROR_NO_SPACE_MOUNT_POINT = 0x809F8036,
  SCE_SAVE_DATA_I_ERROR_NO_SPACE_FS = 0x809F8037,
  SCE_SAVE_DATA_I_ERROR_MOUNT_SUSPEND_STARTED = 0x809F8038,
  SCE_SAVE_DATA_I_ERROR_MOUNT_USER_LOGOUTING = 0x809F8039,
  SCE_SAVE_DATA_I_ERROR_HDD_NO_CONTIGUOUS_AREA = 0x809F803A,
  SCE_SAVE_DATA_I_ERROR_SRC_NO_SPACE_FS = 0x809F803B,
  SCE_SAVE_DATA_I_ERROR_INVALID_APIID = 0x809F804E,
  SCE_SAVE_DATA_I_ERROR_INTERNAL = 0x809F804F,
  SCE_SAVE_DATA_I_ERROR_PARAMSFO_BROKEN = 0x809F8050,
  SCE_SAVE_DATA_I_ERROR_PARAMSFO_BROKEN_OPENPSID = 0x809F8051,
  SCE_SAVE_DATA_I_ERROR_PARAMSFO_LOCAL_OWNER = 0x809F8052,
  SCE_SAVE_DATA_I_ERROR_PARAMSFO_PSN_OWNER = 0x809F8053,
  SCE_SAVE_DATA_I_ERROR_PARAMSFO_DEX_TOOL_SAVED = 0x809F8054,
  SCE_SAVE_DATA_I_ERROR_BROKEN = 0x809F8055,
  SCE_SAVE_DATA_I_ERROR_PARAMSFO_PSN_BIND = 0x809F8056,
  SCE_SAVE_DATA_I_ERROR_SEALED_KEY = 0x809F8057,
  SCE_SAVE_DATA_I_ERROR_PFS_MOUNT = 0x809F8058,
  SCE_SAVE_DATA_I_ERROR_CREATE_PFS_IMAGE = 0x809F8059,
  SCE_SAVE_DATA_I_ERROR_FAKE_BROKEN = 0x809F805A,
  SCE_SAVE_DATA_I_ERROR_UPDATE_SEALED_KEY = 0x809F805B,
  SCE_SAVE_DATA_I_ERROR_FINGERPRINT = 0x809F805C,
  SCE_SAVE_DATA_I_ERROR_CHECK_KEYSTONE = 0x809F805D,
  SCE_SAVE_DATA_I_ERROR_KEYSTONE = 0x809F805E,
  SCE_SAVE_DATA_I_ERROR_FILE_ORGANIZATION = 0x809F805F,
  SCE_SAVE_DATA_I_ERROR_NOT_REGIST_CALLBACK = 0x809F8060,
  SCE_SAVE_DATA_I_ERROR_PARAMSFO_TRANSFER_TITLE_ID_NOT_FOUND = 0x809F8061,
  SCE_SAVE_DATA_I_ERROR_USER_NOT_LOGIN = 0x809F806F,
  SCE_SAVE_DATA_I_ERROR_DB_NOT_FOUND = 0x809F8070,
  SCE_SAVE_DATA_I_ERROR_DB_NOT_FOUND_DIR_EXIST = 0x809F8071,
  SCE_SAVE_DATA_I_ERROR_DB_NOT_FOUND_RECORD_ITEM = 0x809F8072,
  SCE_SAVE_DATA_I_ERROR_SEALED_KEY_INVALID_VERSION = 0x809F8073,
  SCE_SAVE_DATA_I_ERROR_SEALED_KEY_BROKEN = 0x809F8074,
  SCE_SAVE_DATA_I_ERROR_DB_BROKEN = 0x809F8075,
  SCE_SAVE_DATA_I_ERROR_IMPORT_TITLEID_MISMATCH = 0x809F8076,
  SCE_SAVE_DATA_I_ERROR_IMPORT_GET_KEY_VERSION_FAILED = 0x809F8077,
  SCE_SAVE_DATA_I_ERROR_IMPORT_INVALID_KEY_VERSION = 0x809F8078,
  SCE_SAVE_DATA_I_ERROR_IMPORT_INVALID_FULL_PATH = 0x809F8079,
  SCE_SAVE_DATA_I_ERROR_IMPORT_GET_TITLE_ID_FAILED = 0x809F807A,
  SCE_SAVE_DATA_I_ERROR_IMPORT_TITLE_ID_FORMAT = 0x809F807B,
  SCE_SAVE_DATA_I_ERROR_COPY_FORMAT = 0x809F8080,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_FORMAT = 0x809F8081,
  SCE_SAVE_DATA_I_ERROR_FAKED_OWNER = 0x809F8082,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_LIST_MAGIC = 0x809F8090,
  SCE_SAVE_DATA_I_ERROR_ARCHIVE_WRONG_STATUS = 0x809F80A0,
  SCE_SAVE_DATA_I_ERROR_ARCHIVE_BROKEN_IMAGE = 0x809F80A1,
  SCE_SAVE_DATA_I_ERROR_ARCHIVE_Z_ERRNO = 0x809F80A2,
  SCE_SAVE_DATA_I_ERROR_ARCHIVE_Z_STREAM = 0x809F80A3,
  SCE_SAVE_DATA_I_ERROR_ARCHIVE_Z_DATA = 0x809F80A4,
  SCE_SAVE_DATA_I_ERROR_ARCHIVE_Z_MEM = 0x809F80A5,
  SCE_SAVE_DATA_I_ERROR_ARCHIVE_Z_BUF = 0x809F80A6,
  SCE_SAVE_DATA_I_ERROR_ARCHIVE_Z_VERSION = 0x809F80A7,
  SCE_SAVE_DATA_I_ERROR_CACHE_FILE_NOT_OPEN = 0x809F80C0,
  SCE_SAVE_DATA_I_ERROR_CACHE_DATA_NOT_FOUND = 0x809F80C1,
  SCE_SAVE_DATA_I_ERROR_CACHE_CONFLICT = 0x809F80C2,
  SCE_SAVE_DATA_I_ERROR_CACHE_EDIT_FILE = 0x809F80C3,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_CLOUD_NO_SPACE = 0x809F80E0,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_STORAGE_NO_SPACE = 0x809F80E1,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_CLOUD_MAX_SIZE = 0x809F80E2,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_DATA_BROKEN = 0x809F80E3,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_DATA_IN_USE = 0x809F80E4,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_NOT_SUPPORTED = 0x809F80E5,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_BLOCKS_MAX = 0x809F80E6,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_USER_MISMATCH = 0x809F80E7,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_FAKED_OWNER = 0x809F80E8,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_ACCOUNT_MISMATCH = 0x809F80E9,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_RESIGN_JSON_FORMAT = 0x809F80EA,
  SCE_SAVE_DATA_I_ERROR_DOWNLOAD_DATA_BROKEN = 0x809F8110,
  SCE_SAVE_DATA_I_ERROR_DOWNLOAD_DATA_IN_USE = 0x809F8111,
  SCE_SAVE_DATA_I_ERROR_DOWNLOAD_STORAGE_NO_SPACE = 0x809F8112,
  SCE_SAVE_DATA_I_ERROR_DOWNLOAD_NO_APP_INSTALLED = 0x809F8113,
  SCE_SAVE_DATA_I_ERROR_DOWNLOAD_NOT_FOUND = 0x809F8114,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_LIST_NOT_FOUND = 0x809F8200,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_SETTING_MAGIC = 0x809F8300,
  SCE_SAVE_DATA_I_ERROR_UPLOAD_SETTING_EDIT = 0x809F8301,
  SCE_SAVE_DATA_I_ERROR_AUTO_UPLOAD_SETTING_OFF = 0x809F8400,
  SCE_SAVE_DATA_I_ERROR_ENTRY_NOT_FOUND = 0x809F8500,
  SCE_SAVE_DATA_I_ERROR_ENTRY_ALREADY_EXIST = 0x809F8501,
  SCE_SAVE_DATA_I_ERROR_MEMORY_NOT_READY = 0x809F8600,
  SCE_SAVE_DATA_I_ERROR_MEMORY_BUSY = 0x809F8601,
  SCE_SAVE_DATA_I_ERROR_MEMORY_BUSY_FOR_SAVING = 0x809F8602,
  SCE_SAVE_DATA_I_ERROR_BACKUP_BUSY = 0x809F8603,
  SCE_SAVE_DATA_I_ERROR_RESTORE_UI_EXIT_APP = 0x809F8604,
  SCE_SAVE_DATA_I_ERROR_DIAG_DEVICE_NONE_ZERO = 0x809F8700,
  SCE_SAVE_DATA_I_ERROR_DIAG_UNSUPPORTED_SAVEDATA_VERSION = 0x809F8701,
  SCE_SAVE_DATA_I_ERROR_DIAG_FAILED_CHECK_CLEAN_FLAG = 0x809F8702,
  SCE_SAVE_DATA_I_ERROR_DECID_MOUNT_MAX_OVER = 0x809F8703,
  SCE_SAVE_DATA_I_ERROR_EVENT_BUSY = 0x809F8705,
  SCE_SAVE_DATA_I_ERROR_DB_BUSY = 0x809F8706,
  SCE_SAVE_DATA_I_ERROR_USER_NOT_REGISTERD = 0x809F8707,
  SCE_SAVE_DATA_I_ERROR_BROKEN_IS_BROKEN_ON = 0x809F8709,
  SCE_SAVE_DATA_I_ERROR_BROKEN_GETSTAT_ERROR = 0x809F870A,
  SCE_SAVE_DATA_I_ERROR_BROKEN_DB_EXIST_GETSTAT_ERROR = 0x809F870B,
  SCE_SAVE_DATA_I_ERROR_BROKEN_GET_ENCRYPT_SEALED_KEY = 0x809F870C,
  SCE_SAVE_DATA_I_ERROR_BROKEN_UFS_CHECK_CLEAN_FLAG = 0x809F870D,
  SCE_SAVE_DATA_I_ERROR_MAP_FILE_OPEN = 0x809F870E,
  SCE_SAVE_DATA_I_ERROR_MAP_FILE_INVALID_TITLE_ID = 0x809F870F,
  SCE_SAVE_DATA_I_ERROR_MAP_FILE_INVALID_DIRNAME = 0x809F8710,
  SCE_SAVE_DATA_I_ERROR_MAP_FILE_FORMAT = 0x809F8711,
  SCE_SAVE_DATA_I_ERROR_DELETING_USB_DB = 0x809F8712,
  SCE_SAVE_DATA_I_ERROR_INVALID_SAVEDATA_SIZE = 0x809F8713,
  SCE_SAVE_DATA_I_ERROR_ICON0_FILE_SIZE_OVER = 0x809F8714,
  SCE_SAVE_DATA_I_ERROR_NOT_LATEST_DB_VERSION = 0x809F8715,
  SCE_SAVE_DATA_I_ERROR_NOT_FOUND_DB_KEY = 0x809F8716,
  SCE_SAVE_DATA_I_ERROR_PROCESS_ALREADY_RUNNING = 0x809F8717,
  SCE_SAVE_DATA_I_ERROR_NO_SAVE_DATA_MEMORY = 0x809F8718,
  SCE_SAVE_DATA_I_ERROR_RESTORE_UI_RUNNING = 0x809F8719,
  SCE_SAVE_DATA_I_ERROR_MEMORY_MAX_NUM_OVER = 0x809F8720,
  SCE_SAVE_DATA_I_ERROR_INVALID_SLOT_INDEX = 0x809F8721,
  SCE_SAVE_DATA_ERROR_ABORT = 0x809FA000,
  SCE_SAVE_DATA_ERROR_UNSUPPORTED = 0x809FA001,
  SCE_SAVE_DATA_ERROR_NOT_PSN_BINDED = 0x809FA002,
  SCE_SAVE_DATA_ERROR_OWNER_MISMATCH = 0x809FA003,
  SCE_SAVE_DATA_ERROR_COPY_FORMAT = 0x809FA004,
  SCE_SAVE_DATA_ERROR_REACHED_MAX_COUNT = 0x809FA005,
  SCE_SAVE_DATA_ERROR_PROHIBITED_DATA = 0x809FA006,
  SCE_SAVE_DATA_ERROR_DATA_IN_USE = 0x809FA007,
  SCE_SAVE_DATA_ERROR_REVISION_CONFLICT = 0x809FA008,
  SCE_SAVE_DATA_ERROR_AUTO_UPLOAD_SETTING_MAGIC = 0x809FA009,
  SCE_SAVE_DATA_ERROR_AUTO_UPLOAD_SETTING_ARG = 0x809FA00A,
  SCE_SAVE_DATA_ERROR_UPLOAD_FORMAT = 0x809FA00B,
  SCE_SAVE_DATA_ERROR_CLOUD_NO_SPACE = 0x809FA00C,
  SCE_SAVE_DATA_ERROR_FAKED_OWNER = 0x809FA00D,
  SCE_SAVE_DATA_ERROR_DEX_TOOL_SAVED = 0x809FA00E,
  SCE_SAVE_DATA_ERROR_FINALIZED = 0x809FA00F,
  SCE_SAVE_DATA_ERROR_INVALID_DIRNAME = 0x809FA010,
  SCE_SAVE_DATA_ERROR_NOT_SPECIFIED = 0x809FA011,
  SCE_SAVE_DATA_ERROR_UNSUPPORTED_BROKEN_STATUS = 0x809FA012,
  SCE_SAVE_DATA_ERROR_LIBRARY_ALREADY_USED = 0x809FA013,
  SCE_SAVE_DATA_ERROR_INVALID_VERSION = 0x809FA014,
  SCE_SAVE_DATA_ERROR_HDD_NO_CONTIGUOUS_AREA = 0x809FA015,
  SCE_SAVE_DATA_ERROR_SRC_NO_SPACE_FS = 0x809FA016,
  SCE_SAVE_DATA_ERROR_NEED_PLUS = 0x809FA017,
  SCE_SAVE_DATA_ERROR_DB_BROKEN = 0x809FA018,
  SCE_SAVE_DATA_ERROR_GET_KEY_VERSION_FAILED = 0x809FA019,
  SCE_SAVE_DATA_ERROR_IMPORT_CHECK = 0x809FA01A,
  SCE_SAVE_DATA_UI_ERROR_DB_TABLE_DROPPED = 0x809FE001,
  SCE_SAVE_DATA_UI_ERROR_INVALID_OBJECT = 0x809FE002,
  SCE_GAME_LIVE_STREAMING_ERROR_UNKNOWN = 0x80A00001,
  SCE_GAME_LIVE_STREAMING_ERROR_INVALID_PARAM = 0x80A00002,
  SCE_GAME_LIVE_STREAMING_ERROR_INVALID_STATUS = 0x80A00003,
  SCE_GAME_LIVE_STREAMING_ERROR_NOT_INITIALIZED = 0x80A00004,
  SCE_GAME_LIVE_STREAMING_ERROR_ENCODER = 0x80A00005,
  SCE_GAME_LIVE_STREAMING_ERROR_OUT_OF_MEMORY = 0x80A00006,
  SCE_GAME_LIVE_STREAMING_ERROR_NOT_FOUND = 0x80A00007,
  SCE_GAME_LIVE_STREAMING_ERROR_NOT_SUPPORTED = 0x80A00008,
  SCE_GAME_LIVE_STREAMING_ERROR_MESSAGE_FILTER = 0x80A00009,
  SCE_GAME_LIVE_STREAMING_ERROR_SCREEN_NOT_INITIALIZED = 0x80A0000A,
  SCE_GAME_LIVE_STREAMING_ERROR_SCREEN_RESOLUTION_MISMATCH = 0x80A0000B,
  SCE_GAME_LIVE_STREAMING_ERROR_PARAMSFO_NOT_AUTHORIZED = 0x80A0000C,
  SCE_GLS_ERROR_OUT_OF_MEMORY = 0x80A00101,
  SCE_GLS_ERROR_NOT_SUPPORTED = 0x80A00102,
  SCE_GLS_ERROR_NOT_FOUND = 0x80A00103,
  SCE_GLS_ERROR_NOT_IMPLEMENTED = 0x80A00104,
  SCE_GLS_ERROR_NOT_INITIALIZED = 0x80A00105,
  SCE_GLS_ERROR_INVALID_ARG = 0x80A00106,
  SCE_GLS_ERROR_INVALID_SIZE = 0x80A00107,
  SCE_GLS_ERROR_INVALID_VALUE = 0x80A00108,
  SCE_GLS_ERROR_INVALID_POINTER = 0x80A00109,
  SCE_GLS_ERROR_INVALID_ID = 0x80A0010A,
  SCE_GLS_ERROR_INVALID_STATUS = 0x80A0010B,
  SCE_GLS_ERROR_ALREADY = 0x80A0010C,
  SCE_GLS_ERROR_THREAD = 0x80A0010D,
  SCE_GLS_ERROR_TIME_OUT = 0x80A0010E,
  SCE_GLS_ERROR_ABORTED = 0x80A0010F,
  SCE_GLS_ERROR_CAPACITY_EXCEEDED = 0x80A00110,
  SCE_GLS_ERROR_WRITE = 0x80A00111,
  SCE_GLS_ERROR_QUEUE_IS_NOT_AVAILABLE = 0x80A00112,
  SCE_GLS_ERROR_EAGAIN = 0x80A00113,
  SCE_GLS_ERROR_UNKNOWN_BE_ERROR = 0x80A00201,
  SCE_GLS_ERROR_BE = 0x80A00202,
  SCE_GLS_ERROR_UNKNOWN_BE_NOTIFY = 0x80A00203,
  SCE_GLS_ERROR_VIDEO_OUT_RECOVERY_REQUESTED = 0x80A00204,
  SCE_GLS_ERROR_PAUSE_REQUEST_DETECTED = 0x80A00205,
  SCE_GLS_ERROR_FB_NOT_SIGNIN = 0x80A00301,
  SCE_GLS_ERROR_TW_NOT_SIGNIN = 0x80A00302,
  SCE_GLS_ERROR_NO_MSG = 0x80A00303,
  SCE_GLS_ERROR_POST_LIMIT_EXCEEDED = 0x80A00304,
  SCE_GLS_ERROR_SNS_POST_FILED = 0x80A00305,
  SCE_GLS_ERROR_SNS_POST_FILED_U = 0x80A00306,
  SCE_GLS_ERROR_SNS_POST_FILED_T = 0x80A00307,
  SCE_GLS_ERROR_SNS_POST_FILED_N = 0x80A00308,
  SCE_GLS_ERROR_SNS_POST_IN_ANONYMOUSE_T = 0x80A00309,
  SCE_GLS_ERROR_BROADCASTING_BY_ANOTHER_DEVICE_D = 0x80A0030A,
  SCE_GLS_ERROR_NW_RESOLVER_ENOHOST = 0x80A01000,
  SCE_GLS_ERROR_NW_ECONNECT_SERVER = 0x80A01001,
  SCE_GLS_ERROR_NW_ENOCONNECT = 0x80A01002,
  SCE_GLS_ERROR_NW_DISCONNECTED = 0x80A01003,
  SCE_GLS_ERROR_NW_OTHER = 0x80A01004,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_TIMEOUT = 0x80A01005,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_FAILED = 0x80A01006,
  SCE_GLS_ERROR_RTMP_AMF_ERROR = 0x80A01007,
  SCE_GLS_ERROR_RTMP_STATUS_ERROR = 0x80A01008,
  SCE_GLS_ERROR_RTMP_BUFFER_OVERFLOW = 0x80A01009,
  SCE_GLS_ERROR_RTMP_OTHER = 0x80A0100A,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_REJECTED = 0x80A0100B,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_FAILED = 0x80A0100C,
  SCE_GLS_ERROR_RTMP_RECONNECTION_OCCURRED = 0x80A0100D,
  SCE_GLS_ERROR_NW_RESOLVER_ENOHOST_U = 0x80A02000,
  SCE_GLS_ERROR_NW_ECONNECT_SERVER_U = 0x80A02001,
  SCE_GLS_ERROR_NW_ENOCONNECT_U = 0x80A02002,
  SCE_GLS_ERROR_NW_DISCONNECTED_U = 0x80A02003,
  SCE_GLS_ERROR_NW_OTHER_U = 0x80A02004,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_TIMEOUT_U = 0x80A02005,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_FAILED_U = 0x80A02006,
  SCE_GLS_ERROR_RTMP_AMF_ERROR_U = 0x80A02007,
  SCE_GLS_ERROR_RTMP_STATUS_ERROR_U = 0x80A02008,
  SCE_GLS_ERROR_RTMP_BUFFER_OVERFLOW_U = 0x80A02009,
  SCE_GLS_ERROR_RTMP_OTHER_U = 0x80A0200A,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_REJECTED_U = 0x80A0200B,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_FAILED_U = 0x80A0200C,
  SCE_GLS_ERROR_REJECTED_FROM_UMS_GEOLOCK_U = 0x80A02100,
  SCE_GLS_ERROR_REJECTED_FROM_UMS_PASSLOCK_U = 0x80A02101,
  SCE_GLS_ERROR_REJECTED_FROM_UMS_AGELOCK_U = 0x80A02102,
  SCE_GLS_ERROR_REJECTED_FROM_UMS_IPLOCK_U = 0x80A02103,
  SCE_GLS_ERROR_REJECTED_FROM_UMS_AUTH_U = 0x80A02104,
  SCE_GLS_ERROR_REJECTED_FROM_UMS_U = 0x80A02105,
  SCE_GLS_ERROR_NW_RESOLVER_ENOHOST_T = 0x80A03000,
  SCE_GLS_ERROR_NW_ECONNECT_SERVER_T = 0x80A03001,
  SCE_GLS_ERROR_NW_ENOCONNECT_T = 0x80A03002,
  SCE_GLS_ERROR_NW_DISCONNECTED_T = 0x80A03003,
  SCE_GLS_ERROR_NW_OTHER_T = 0x80A03004,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_TIMEOUT_T = 0x80A03005,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_FAILED_T = 0x80A03006,
  SCE_GLS_ERROR_RTMP_AMF_ERROR_T = 0x80A03007,
  SCE_GLS_ERROR_RTMP_STATUS_ERROR_T = 0x80A03008,
  SCE_GLS_ERROR_RTMP_BUFFER_OVERFLOW_T = 0x80A03009,
  SCE_GLS_ERROR_RTMP_OTHER_T = 0x80A0300A,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_REJECTED_T = 0x80A0300B,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_FAILED_T = 0x80A0300C,
  SCE_GLS_ERROR_IRC_COULD_NOT_CONNECT_SERVER_T = 0x80A03100,
  SCE_GLS_ERROR_IRC_OTHER_T = 0x80A03101,
  SCE_GLS_ERROR_IRC_INVALID_LOGIN_T = 0x80A03102,
  SCE_GLS_ERROR_IRC_INVALID_CHANNEL_T = 0x80A03103,
  SCE_GLS_ERROR_IRC_LOST_CONNECTION_T = 0x80A03104,
  SCE_GLS_ERROR_IRC_NOT_IN_CHANNEL_T = 0x80A03105,
  SCE_GLS_ERROR_IRC_INVALID_MESSAGE_T = 0x80A03106,
  SCE_GLS_ERROR_IRC_TOO_MANY_REQUESTS_T = 0x80A03107,
  SCE_GLS_ERROR_NW_REJECTED_T = 0x80A03108,
  SCE_GLS_ERROR_NW_RESOLVER_ENOHOST_N = 0x80A04000,
  SCE_GLS_ERROR_NW_ECONNECT_SERVER_N = 0x80A04001,
  SCE_GLS_ERROR_NW_ENOCONNECT_N = 0x80A04002,
  SCE_GLS_ERROR_NW_DISCONNECTED_N = 0x80A04003,
  SCE_GLS_ERROR_NW_OTHER_N = 0x80A04004,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_TIMEOUT_N = 0x80A04005,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_FAILED_N = 0x80A04006,
  SCE_GLS_ERROR_RTMP_AMF_ERROR_N = 0x80A04007,
  SCE_GLS_ERROR_RTMP_STATUS_ERROR_N = 0x80A04008,
  SCE_GLS_ERROR_RTMP_BUFFER_OVERFLOW_N = 0x80A04009,
  SCE_GLS_ERROR_RTMP_OTHER_N = 0x80A0400A,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_REJECTED_N = 0x80A0400B,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_FAILED_N = 0x80A0400C,
  SCE_GLS_ERROR_COULD_NOT_CONNECT_COMMENT_SERVER_N = 0x80A04100,
  SCE_GLS_ERROR_COMMENT_SERVER_OTHER_N = 0x80A04101,
  SCE_GLS_ERROR_COULD_NOT_CONNECT_SERVER_N = 0x80A04102,
  SCE_GLS_ERROR_END_TIME_IS_OVER_N = 0x80A04103,
  SCE_GLS_ERROR_DISCONNECT_COMMAND_FROM_SERVER_N = 0x80A04104,
  SCE_GLS_ERROR_SERVER_FAILURE_N = 0x80A04105,
  SCE_GLS_ERROR_SERVER_OTHER_N = 0x80A04106,
  SCE_GLS_ERROR_PROGRAM_CLOSED_N = 0x80A04107,
  SCE_GLS_ERROR_AUTH_FAILED_N = 0x80A04108,
  SCE_GLS_ERROR_SERVER_BUSY_N = 0x80A04109,
  SCE_GLS_ERROR_SERVER_MAINTENANCE_N = 0x80A0410A,
  SCE_GLS_ERROR_NW_RESOLVER_ENOHOST_Y = 0x80A05000,
  SCE_GLS_ERROR_NW_ECONNECT_SERVER_Y = 0x80A05001,
  SCE_GLS_ERROR_NW_ENOCONNECT_Y = 0x80A05002,
  SCE_GLS_ERROR_NW_DISCONNECTED_Y = 0x80A05003,
  SCE_GLS_ERROR_NW_OTHER_Y = 0x80A05004,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_TIMEOUT_Y = 0x80A05005,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_FAILED_Y = 0x80A05006,
  SCE_GLS_ERROR_RTMP_AMF_ERROR_Y = 0x80A05007,
  SCE_GLS_ERROR_RTMP_STATUS_ERROR_Y = 0x80A05008,
  SCE_GLS_ERROR_RTMP_BUFFER_OVERFLOW_Y = 0x80A05009,
  SCE_GLS_ERROR_RTMP_OTHER_Y = 0x80A0500A,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_REJECTED_Y = 0x80A0500B,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_FAILED_Y = 0x80A0500C,
  SCE_GLS_ERROR_SNS_POST_FILED_Y = 0x80A0500D,
  SCE_GLS_ERROR_ONAIR_CHECK_TIMEOUT_Y = 0x80A0500E,
  SCE_GLS_ERROR_CANNOT_SEND_COMMENT_Y = 0x80A0500F,
  SCE_GLS_ERROR_TRANSITION_CHANGE_FAILED_Y = 0x80A05010,
  SCE_GLS_ERROR_TRANSITION_CHANGE_TIMEOUT_Y = 0x80A05011,
  SCE_GLS_ERROR_CHANNEL_NOT_FOUND_Y = 0x80A05012,
  SCE_GLS_ERROR_NW_RESOLVER_ENOHOST_D = 0x80A06000,
  SCE_GLS_ERROR_NW_ECONNECT_SERVER_D = 0x80A06001,
  SCE_GLS_ERROR_NW_ENOCONNECT_D = 0x80A06002,
  SCE_GLS_ERROR_NW_DISCONNECTED_D = 0x80A06003,
  SCE_GLS_ERROR_NW_OTHER_D = 0x80A06004,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_TIMEOUT_D = 0x80A06005,
  SCE_GLS_ERROR_RTMP_HANDSHAKE_FAILED_D = 0x80A06006,
  SCE_GLS_ERROR_RTMP_AMF_ERROR_D = 0x80A06007,
  SCE_GLS_ERROR_RTMP_STATUS_ERROR_D = 0x80A06008,
  SCE_GLS_ERROR_RTMP_BUFFER_OVERFLOW_D = 0x80A06009,
  SCE_GLS_ERROR_RTMP_OTHER_D = 0x80A0600A,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_REJECTED_D = 0x80A0600B,
  SCE_GLS_ERROR_RTMP_NET_STATUS_CONNECT_FAILED_D = 0x80A0600C,
  SCE_GLS_ERROR_SNS_POST_FILED_D = 0x80A0600D,
  SCE_GLS_ERROR_ONAIR_CHECK_TIMEOUT_D = 0x80A0600E,
  SCE_SYSTEM_SERVICE_ERROR_INTERNAL = 0x80A10001,
  SCE_SYSTEM_SERVICE_ERROR_UNAVAILABLE = 0x80A10002,
  SCE_SYSTEM_SERVICE_ERROR_PARAMETER = 0x80A10003,
  SCE_SYSTEM_SERVICE_ERROR_NO_EVENT = 0x80A10004,
  SCE_SYSTEM_SERVICE_ERROR_REJECTED = 0x80A10005,
  SCE_SYSTEM_SERVICE_ERROR_NEED_DISPLAY_SAFE_AREA_SETTINGS = 0x80A10006,
  SCE_SYSTEM_SERVICE_ERROR_INVALID_URI_LEN = 0x80A10007,
  SCE_SYSTEM_SERVICE_ERROR_INVALID_URI_SCHEME = 0x80A10008,
  SCE_SYSTEM_SERVICE_ERROR_NO_APP_INFO = 0x80A10009,
  SCE_SYSTEM_SERVICE_ERROR_NOT_FLAG_IN_PARAM_SFO = 0x80A1000A,
  SCE_CTRLP_ERROR_INVALID_ARGUMENT = 0x80A20001,
  SCE_CTRLP_ERROR_NOT_SUPPORTED = 0x80A20002,
  SCE_CTRLP_ERROR_RESOURCE_SHORTAGE = 0x80A20003,
  SCE_CTRLP_ERROR_ILLEGAL_PARAMETER_VALUE = 0x80A20004,
  SCE_CTRLP_ERROR_NOT_STARTED = 0x80A20005,
  SCE_CTRLP_ERROR_NOT_CTRLPDATA = 0x80A20006,
  SCE_CTRLP_ERROR_BUSY = 0x80A20007,
  SCE_CTRLP_ERROR_COPYOUT_FAILED = 0x80A20008,
  SCE_CTRLP_ERROR_COPYIN_FAILED = 0x80A20009,
  SCE_APP_INSTALLER_ERROR_UNKNOWN = 0x80A30001,
  SCE_APP_INSTALLER_ERROR_NOSPACE = 0x80A30002,
  SCE_APP_INSTALLER_ERROR_PARAM = 0x80A30003,
  SCE_APP_INSTALLER_ERROR_APP_NOT_FOUND = 0x80A30004,
  SCE_APP_INSTALLER_ERROR_DISC_NOT_INSERTED = 0x80A30005,
  SCE_APP_INSTALLER_ERROR_PKG_INVALID_DRM_TYPE = 0x80A30006,
  SCE_APP_INSTALLER_ERROR_OUT_OF_MEMORY = 0x80A30007,
  SCE_APP_INSTALLER_ERROR_APP_BROKEN = 0x80A30008,
  SCE_APP_INSTALLER_ERROR_PKG_INVALID_CONTENT_TYPE = 0x80A30009,
  SCE_APP_INSTALLER_ERROR_USED_APP_NOT_FOUND = 0x80A3000A,
  SCE_APP_INSTALLER_ERROR_ADDCONT_BROKEN = 0x80A3000B,
  SCE_APP_INSTALLER_ERROR_APP_IS_RUNNING = 0x80A3000C,
  SCE_APP_INSTALLER_ERROR_SYSTEM_VERSION = 0x80A3000D,
  SCE_APP_INSTALLER_ERROR_NOT_INSTALL = 0x80A3000E,
  SCE_APP_INSTALLER_ERROR_CONTENT_ID_DISAGREE = 0x80A3000F,
  SCE_APP_INSTALLER_ERROR_NOSPACE_KERNEL = 0x80A30010,
  SCE_APP_INSTALLER_ERROR_APP_VER = 0x80A30011,
  SCE_APP_INSTALLER_ERROR_DB_DISABLE = 0x80A30012,
  SCE_APP_INSTALLER_ERROR_CANCELED = 0x80A30013,
  SCE_APP_INSTALLER_ERROR_ENTRYDIGEST = 0x80A30014,
  SCE_APP_INSTALLER_ERROR_BUSY = 0x80A30015,
  SCE_APP_INSTALLER_ERROR_DLAPP_ALREADY_INSTALLED = 0x80A30016,
  SCE_APP_INSTALLER_ERROR_NEED_ADDCONT_INSTALL = 0x80A30017,
  SCE_APP_INSTALLER_ERROR_APP_MOUNTED_BY_HOST_TOOL = 0x80A30018,
  SCE_APP_INSTALLER_ERROR_INVALID_PATCH_PKG = 0x80A30019,
  SCE_APP_INSTALLER_ERROR_NEED_ADDCONT_INSTALL_NO_CHANGE_TYPE = 0x80A30020,
  SCE_APP_INSTALLER_ERROR_ADDCONT_IS_INSTALLING = 0x80A30021,
  SCE_APP_INSTALLER_ERROR_ADDCONT_ALREADY_INSTALLED = 0x80A30022,
  SCE_APP_INSTALLER_ERROR_CANNOT_READ_DISC = 0x80A30023,
  SCE_APP_INSTALLER_ERROR_DATA_DISC_NOT_INSTALLED = 0x80A30024,
  SCE_APP_INSTALLER_ERROR_NOT_TRANSFER_DISC_VERSION = 0x80A30025,
  SCE_APP_INSTALLER_ERROR_NO_SLOT_SPACE = 0x80A30026,
  SCE_APP_INSTALLER_ERROR_NO_SLOT_INFORMATION = 0x80A30027,
  SCE_APP_INSTALLER_ERROR_INSTALL_MAIN_MISSING = 0x80A30028,
  SCE_APP_INSTALLER_ERROR_INSTALL_TIME_VALID_IN_FUTURE = 0x80A30029,
  SCE_APP_INSTALLER_ERROR_SYSTEM_FILE_DISAGREE = 0x80A3002A,
  SCE_APP_INSTALLER_ERROR_INSTALL_BLANK_SLOT = 0x80A3002B,
  SCE_APP_INSTALLER_ERROR_INSTALL_LINK_SLOT = 0x80A3002C,
  SCE_APP_INSTALLER_ERROR_INSTALL_PKG_NOT_COMPLETED = 0x80A3002D,
  SCE_APP_INSTALLER_ERROR_NOSPACE_IN_EXTERNAL_HDD = 0x80A3002E,
  SCE_APP_INSTALLER_ERROR_NOSPACE_KERNEL_IN_EXTERNAL_HDD = 0x80A3002F,
  SCE_APP_INSTALLER_ERROR_COMPILATION_DISC_INSERTED = 0x80A30030,
  SCE_APP_INSTALLER_ERROR_COMPILATION_DISC_INSERTED_NOT_VISIBLE_DISC_ICON = 0x80A30031,
  SCE_APP_INSTALLER_ERROR_ACCESS_FAILED_IN_EXTERNAL_HDD = 0x80A30032,
  SCE_APP_INSTALLER_ERROR_MOVE_FAILED_SOME_APPLICATIONS = 0x80A30033,
  SCE_APP_INSTALLER_ERROR_DUPLICATION = 0x80A30034,
  SCE_APP_INSTALLER_ERROR_INVALID_STATE = 0x80A30035,
  SCE_APP_INSTALLER_ERROR_NOSPACE_DISC = 0x80A30036,
  SCE_APP_INSTALLER_ERROR_NOSPACE_DISC_IN_EXTERNAL_HDD = 0x80A30037,
  SCE_APP_INSTALLER_ERROR_NEED_PLAY_DISC_INSTALL = 0x80A30038,
  SCE_APP_INSTALLER_ERROR_NOT_MOUNTED = 0x80A30039,
  SCE_APP_INST_UTIL_ERROR_NOT_INITIALIZED = 0x80A31000,
  SCE_APP_INST_UTIL_ERROR_OUT_OF_MEMORY = 0x80A31001,
  SCE_PROCESS_STARTER_ERROR_INVALID_ARGUMENT = 0x80A40001,
  SCE_PROCESS_STARTER_ERROR_NO_GAME_RUNNING = 0x80A40002,
  SCE_PROCESS_STARTER_ERROR_OUT_OF_MEMORY = 0x80A40003,
  SCE_PROCESS_STARTER_ERROR_KEY_NOT_FOUND = 0x80A40004,
  SCE_PROCESS_STARTER_ERROR_NOT_GAME_MINIAPP_APPRICATION = 0x80A40005,
  SCE_PROCESS_STARTER_ERROR_INSUFFICIENT_BUFFER = 0x80A40006,
  SCE_PROCESS_STARTER_ERROR_MOUNT_FULL = 0x80A40007,
  SCE_PROCESS_STARTER_ERROR_APPLICATION_ALLREADY_RUNNING = 0x80A40008,
  SCE_PROCESS_STARTER_ERROR_NO_DISC_INSERT = 0x80A40009,
  SCE_PROCESS_STARTER_ERROR_UNSUPPORTED_DATA = 0x80A4000A,
  SCE_PROCESS_STARTER_ERROR_BD_DATA_CORRUPTED = 0x80A4000B,
  SCE_PROCESS_STARTER_ERROR_HDD_DATA_CORRUPTED = 0x80A4000C,
  SCE_PROCESS_STARTER_ERROR_REGION_RESTRICTION = 0x80A4000D,
  SCE_PROCESS_STARTER_ERROR_PARENTAL = 0x80A4000E,
  SCE_PROCESS_STARTER_ERROR_LOGOUT_LAUNCH_USER = 0x80A4000F,
  SCE_PROCESS_STARTER_ERROR_NO_SPACE = 0x80A40010,
  SCE_PROCESS_STARTER_ERROR_NEED_SYSTEM_UPDATE = 0x80A40011,
  SCE_PROCESS_STARTER_ERROR_UNDER_CONSTRUCTION = 0x80A40012,
  SCE_PROCESS_STARTER_ERROR_UNDER_UPDATING = 0x80A40013,
  SCE_PROCESS_STARTER_ERROR_REQUIRED_PATCH_IS_DOWNLOADING = 0x80A40014,
  SCE_PROCESS_STARTER_ERROR_NO_REQUIRED_PATCH_DOWNLOADED = 0x80A40015,
  SCE_PROCESS_STARTER_ERROR_REQUIRED_PATCH_DOWNLOADED = 0x80A40016,
  SCE_PROCESS_STARTER_ERROR_FS_MOUNT = 0x80A40017,
  SCE_PROCESS_STARTER_ERROR_ALLREADY_MOUNTED = 0x80A40018,
  SCE_PROCESS_STARTER_ERROR_INVALID_SERVICE_LABEL = 0x80A40019,
  SCE_PROCESS_STARTER_ERROR_REQIRED_PSN_SIGNUP = 0x80A40020,
  SCE_PROCESS_STARTER_ERROR_NOT_MOUNTED = 0x80A40021,
  SCE_PROCESS_STARTER_ERROR_APPLICATION_NOT_FOUND = 0x80A40022,
  SCE_PROCESS_STARTER_ERROR_IN_PATCH_INSTALL = 0x80A40023,
  SCE_PROCESS_STARTER_ERROR_SKU_FLAG = 0x80A40024,
  SCE_PROCESS_STARTER_ERROR_IN_DATA_INSTALL = 0x80A40025,
  SCE_PROCESS_STARTER_ERROR_HOST_OVERLAY_MOUNT = 0x80A40026,
  SCE_PROCESS_STARTER_ERROR_OTHER_DISC_INSERTED = 0x80A40027,
  SCE_PROCESS_STARTER_ERROR_IN_DISC_LOAD = 0x80A40028,
  SCE_PROCESS_STARTER_ERROR_ALREADY_INSTALLED = 0x80A40029,
  SCE_PROCESS_STARTER_ERROR_ACTIVATE_DISC_PLAYER = 0x80A4002A,
  SCE_PROCESS_STARTER_ERROR_SYSTEM_UPDATE_IS_FOUND = 0x80A4002B,
  SCE_PROCESS_STARTER_ERROR_AREA_SETTING = 0x80A4002C,
  SCE_PROCESS_STARTER_ERROR_INVALID_ACCOUNT = 0x80A4002D,
  SCE_PROCESS_STARTER_ERROR_3DTV_DETECTED = 0x80A4002E,
  SCE_PROCESS_STARTER_ERROR_LAUNCH_PS_CLOUD_BETA_SERVICE = 0x80A4002F,
  SCE_PROCESS_STARTER_ERROR_LAUNCH_PS_CLOUD_SERVICE = 0x80A40030,
  SCE_PROCESS_STARTER_ERROR_UNOPENED = 0x80A40031,
  SCE_PROCESS_STARTER_ERROR_START_TIME_VALID_IN_FUTURE = 0x80A40032,
  SCE_PROCESS_STARTER_ERROR_NO_ENTITLEMENT = 0x80A40033,
  SCE_PROCESS_STARTER_ERROR_REQUIRED_HDCP = 0x80A40034,
  SCE_PROCESS_STARTER_ERROR_FATAL_FILESYSTEM = 0x80A40035,
  SCE_PROCESS_STARTER_ERROR_UPDATE = 0x80A40036,
  SCE_PROCESS_STARTER_ERROR_LAUNCH_SHARE_PLAY_LINK = 0x80A40037,
  SCE_PROCESS_STARTER_ERROR_PERMISSION = 0x80A40038,
  SCE_PROCESS_STARTER_ERROR_ASM_ACCESS_ERROR = 0x80A40039,
  SCE_PROCESS_STARTER_ERROR_NEED_SYSTEM_UPDATE_DISC = 0x80A4003A,
  SCE_PROCESS_STARTER_ERROR_PARENTAL_PSNOW = 0x80A4003B,
  SCE_PROCESS_STARTER_ERROR_MANDATORY_PATCH_IS_DOWNLOADING = 0x80A4003C,
  SCE_PROCESS_STARTER_ERROR_MANDATORY_PATCH_IS_DOWNLOADING_IN_RESUME = 0x80A4003D,
  SCE_PROCESS_STARTER_ERROR_MANDATORY_PATCH_IS_DOWNLOADING_WITH_SYSTEM_UPDATE = 0x80A4003E,
  SCE_PROCESS_STARTER_ERROR_INVALID_HDD_PKG_SIZE = 0x80A4003F,
  SCE_PROCESS_STARTER_ERROR_INVALID_BD_PKG_SIZE = 0x80A40040,
  SCE_PROCESS_STARTER_ERROR_FINGERPRINT_MISMATCH = 0x80A40041,
  SCE_PROCESS_STARTER_ERROR_ALREADY_MOUNTED_BY_HOST_TOOLS = 0x80A40042,
  SCE_PROCESS_STARTER_ERROR_TUTORIAL_PS2EMU = 0x80A40043,
  SCE_PROCESS_STARTER_ERROR_REQUIRED_PATCH_IS_DOWNLOADING_WITH_SYSTEM_UPDATE = 0x80A40044,
  SCE_PROCESS_STARTER_ERROR_INSTALLING_AC_FROM_DISC_FOR_DISC_CONTENT = 0x80A40045,
  SCE_PROCESS_STARTER_ERROR_INSTALLING_AC_FROM_DISC_FOR_HDD_CONTENT = 0x80A40046,
  SCE_PROCESS_STARTER_ERROR_NO_REQUIRED_PATCH_IS_DOWNLOADING_WITH_SYSTEM_UPDATE = 0x80A40047,
  SCE_PROCESS_STARTER_ERROR_PATCH_SIZE_TOO_LARGE = 0x80A40048,
  SCE_PROCESS_STARTER_ERROR_PATCH_FINALIZED = 0x80A40049,
  SCE_PROCESS_STARTER_ERROR_PATCH_FAKE = 0x80A40050,
  SCE_PROCESS_STARTER_ERROR_CANNOT_READ_DISC = 0x80A40051,
  SCE_PROCESS_STARTER_ERROR_CANNOT_READ_DISC_IN_RESUME = 0x80A40052,
  SCE_PROCESS_STARTER_ERROR_FREEMIUM_SKU_FLAG = 0x80A40053,
  SCE_PROCESS_STARTER_ERROR_OTHER_DISC_INSERTED_IN_RESUME = 0x80A40054,
  SCE_PROCESS_STARTER_ERROR_IN_AC_INSTALL = 0x80A40055,
  SCE_PROCESS_STARTER_ERROR_NOT_NESTED_IMAGE = 0x80A40056,
  SCE_PROCESS_STARTER_ERROR_DISAGREE_DISC_VERSION = 0x80A40057,
  SCE_PROCESS_STARTER_ERROR_DISAGREE_EKC_VERSION = 0x80A40058,
  SCE_PROCESS_STARTER_ERROR_NECESSARY_TO_SELECT_VR_MODE = 0x80A40059,
  SCE_PROCESS_STARTER_ERROR_DATA_DISC_NOT_INSTALLED = 0x80A4005A,
  SCE_PROCESS_STARTER_ERROR_NEED_PLAY_DISC = 0x80A4005B,
  SCE_PROCESS_STARTER_ERROR_IN_LANGUAGE_DATA_INSTALL = 0x80A4005C,
  SCE_PROCESS_STARTER_ERROR_NEED_LANGUAGE_DATA = 0x80A4005D,
  SCE_PROCESS_STARTER_ERROR_NEED_LANGUAGE_DATA_FOR_SYSTEM_SETTING = 0x80A4005E,
  SCE_PROCESS_STARTER_ERROR_DEV_FLAG = 0x80A4005F,
  SCE_PROCESS_STARTER_ERROR_HDR_HINT = 0x80A40060,
  SCE_PROCESS_STARTER_ERROR_INVALID_SYSTEM_FILE = 0x80A40061,
  SCE_PROCESS_STARTER_ERROR_IN_INITIAL_PAYLOAD_INSTALL = 0x80A40062,
  SCE_PROCESS_STARTER_ERROR_NEED_FSCK = 0x80A40063,
  SCE_PROCESS_STARTER_ERROR_EXTERNAL_HDD_BLACK_LIST = 0x80A40064,
  SCE_PROCESS_STARTER_ERROR_NO_SPACE_IN_EXTERNAL_HDD = 0x80A40065,
  SCE_PROCESS_STARTER_ERROR_IN_EXTERNAL_HDD_LOADING = 0x80A40066,
  SCE_PROCESS_STARTER_ERROR_DISCONNECT = 0x80A40067,
  SCE_PROCESS_STARTER_ERROR_NOT_DISC_APPLICATION = 0x80A40068,
  SCE_PROCESS_STARTER_ERROR_OTHER_APPLICATION_RUNNING_IN_DISC = 0x80A40069,
  SCE_PROCESS_STARTER_ERROR_DISAGREE_DOWNLOAD_DATA_FORMAT = 0x80A4006A,
  SCE_PROCESS_STARTER_ERROR_DISAGREE_NONPROD_FLAG = 0x80A4006B,
  SCE_PROCESS_STARTER_ERROR_DOWNGRADE_ENTITLEMENT = 0x80A4006C,
  SCE_PROCESS_STARTER_ERROR_IN_DOWNLOAD_DATA_RESTORING = 0x80A4006D,
  SCE_PROCESS_STARTER_ERROR_NEED_PLAY_DISC_INSTALL = 0x80A4006E,
  SCE_PROCESS_STARTER_ERROR_DATA_DISC_1_NOT_INSTALLED = 0x80A4006F,
  SCE_PROCESS_STARTER_ERROR_DATA_DISC_2_NOT_INSTALLED = 0x80A40070,
  SCE_PROCESS_STARTER_ERROR_DATA_DISC_2_NOT_INSTALLED_WITH_INSTALLED_DATA_DISC_1 = 0x80A40071,
  SCE_PROCESS_STARTER_ERROR_NEED_PLAY_DISC_NO_DISC_INSERT = 0x80A40072,
  SCE_PROCESS_STARTER_ERROR_NEED_LANGUAGE_DATA_FROM_DD_1_FOR_SYSTEM_SETTING = 0x80A40073,
  SCE_PROCESS_STARTER_ERROR_IN_PATCH_GO_FOR_DISC = 0x80A40074,
  SCE_PROCESS_STARTER_ERROR_IN_LANGUAGE_DATA_INSTALL_FROM_DD_1 = 0x80A40075,
  SCE_PROCESS_STARTER_ERROR_NEED_DATA_DISC_NO_DISC_INSERT = 0x80A40076,
  SCE_PROCESS_STARTER_ERROR_NEED_DATA_DISC_1_NO_DISC_INSERT = 0x80A40077,
  SCE_PROCESS_STARTER_ERROR_NEED_DATA_DISC_2_NO_DISC_INSERT = 0x80A40078,
  SCE_PROCESS_STARTER_ERROR_IN_DATA_INSTALL_MULTI_DISC = 0x80A40079,
  SCE_PROCESS_STARTER_ERROR_DOWNLOADING_REQUIRED_REMASTER_PKG_FOR_DISC = 0x80A4007A,
  SCE_PROCESS_STARTER_ERROR_PLAY_DISC_NOT_INSTALLED = 0x80A4007B,
  SCE_PROCESS_STARTER_ERROR_HDR_CALIBRATION = 0x80A4007C,
  SCE_PROCESS_STARTER_ERROR_LAUNCH_PFT_APPLICATION = 0x80A4007D,
  SCE_VSH_AVCAP_ERROR_EINVAL = 0x80A70001,
  SCE_VSH_AVCAP_ERROR_EAGAIN = 0x80A70002,
  SCE_VSH_AVCAP_ERROR_ENOMEM = 0x80A70003,
  SCE_VSH_AVCAP_ERROR_ERESET = 0x80A70004,
  SCE_VSH_AVCAP_ERROR_ENOSPC = 0x80A70005,
  SCE_VSH_AVCAP_ERROR_EEMPTY = 0x80A70006,
  SCE_VSH_AVCAP_ERROR_ENFILE = 0x80A70007,
  SCE_VSH_AVCAP_ERROR_EBUSY = 0x80A70008,
  SCE_VSH_AVCAP_ERROR_EINTR = 0x80A70009,
  SCE_VSH_AVCAP_ERROR_ENOTSUP = 0x80A7000A,
  SCE_VIDEO_RECORDING_ERROR_OUT_OF_MEMORY = 0x80A80001,
  SCE_VIDEO_RECORDING_ERROR_FATAL = 0x80A80002,
  SCE_VIDEO_RECORDING_ERROR_INVALID_VALUE = 0x80A80003,
  SCE_VIDEO_RECORDING_ERROR_FILE_OPEN = 0x80A80004,
  SCE_VIDEO_RECORDING_ERROR_FILE_WRITE = 0x80A80005,
  SCE_VIDEO_RECORDING_ERROR_INVALID_STATE = 0x80A80006,
  SCE_VIDEO_RECORDING_ERROR_INTERRUPTED = 0x80A80007,
  SCE_VIDEO_RECORDING_ERROR_UNSUPPORTED = 0x80A80008,
  SCE_VIDEO_RECORDING_ERROR_NO_SPACE = 0x80A80009,
  SCE_VIDEO_RECORDING_ERROR_FILE_NO_DATA = 0x80A8000A,
  SCE_M4AAC_ENC_ERROR_INTERNAL_ERROR = 0x80A90000,
  SCE_M4AAC_ENC_ERROR_INVALID_HANDLE = 0x80A90001,
  SCE_M4AAC_ENC_ERROR_INVALID_PTR = 0x80A90002,
  SCE_M4AAC_ENC_ERROR_INVALID_CHANNEL = 0x80A90003,
  SCE_M4AAC_ENC_ERROR_INVALID_SAMPLING_RATE = 0x80A90004,
  SCE_M4AAC_ENC_ERROR_INVALID_BIT_RATE = 0x80A90005,
  SCE_M4AAC_ENC_ERROR_INVALID_INPUT_FORMAT = 0x80A90006,
  SCE_M4AAC_ENC_ERROR_INVALID_OUTPUT_FORMAT = 0x80A90007,
  SCE_M4AAC_ENC_ERROR_INVALID_INPUT_SIZE = 0x80A90008,
  SCE_M4AAC_ENC_ERROR_INVALID_PREVIOUS_INPUT_SIZE = 0x80A90009,
  SCE_M4AAC_ENC_ERROR_INVALID_PRIORITY = 0x80A9F000,
  SCE_SYSCORE_ERROR_NULL = 0x80AA0001,
  SCE_SYSCORE_ERROR_INVALID = 0x80AA0002,
  SCE_SYSCORE_ERROR_STATE = 0x80AA0003,
  SCE_SYSCORE_ERROR_NOT_INITIALIZE = 0x80AA0004,
  SCE_SYSCORE_ERROR_QUEUE_EMPTY = 0x80AA0005,
  SCE_SYSCORE_ERROR_QUEUE_FULL = 0x80AA0006,
  SCE_SYSCORE_ERROR_MAX_APP_NUM = 0x80AA0007,
  SCE_SYSCORE_ERROR_MAX_PROCESS_NUM_PER_APP = 0x80AA0008,
  SCE_SYSCORE_ERROR_PROCESS_SETUP_WORKDIR = 0x80AA0009,
  SCE_SYSCORE_ERROR_LNC_INVALID_STATE = 0x80AA000A,
  SCE_SYSCORE_ERROR_PERMISSION = 0x80AA000B,
  SCE_SYSCORE_ERROR_NOEXIST_APP = 0x80AA000C,
  SCE_SYSCORE_ERROR_NO_LOGIN_USER = 0x80AA000D,
  SCE_SYSCORE_ERROR_DEVKIT_EXPIRED = 0x80AA000E,
  SCE_SYSCORE_ERROR_ALREADY_RUNNING = 0x80AA000F,
  SCE_SYSCORE_ERROR_NOEXIST_PROCESS = 0x80AA0010,
  SCE_SYSCORE_ERROR_APPLICATION_SUSPENDED = 0x80AA0011,
  SCE_SYSCORE_ERROR_INVALID_TITLE_ID = 0x80AA0012,
  SCE_SYSCORE_ERROR_APPLICATION_ALREADY_SUSPENDED = 0x80AA0013,
  SCE_SYSCORE_ERROR_APPLICATION_ALREADY_RESUMED = 0x80AA0014,
  SCE_SYSCORE_ERROR_APPLICATION_NOT_FOUND = 0x80AA0015,
  SCE_SYSCORE_ERROR_ABORT_WHEN_CREATING_NEW_PROCESS = 0x80AA001A,
  SCE_SYSCORE_ERROR_2MIB_PAGES_CANNOT_ALLOCATED = 0x80AA0024,
  SCE_SYSCORE_ERROR_SELF_2MIB_PAGE_AMOUNT_INVALID = 0x80AA0025,
  SCE_SYSCORE_ERROR_2MIB_ENABLED_OLD_BINARY = 0x80AA0026,
  SCE_COMP_APP_PROXY_IPMI_ERROR_GENERIC = 0x80AB0001,
  SCE_COMP_APP_PROXY_IPMI_ERROR_FATAL = 0x80AB0002,
  SCE_COMP_APP_PROXY_IPMI_ERROR_INVALID_PARAM = 0x80AB0003,
  SCE_COMP_APP_PROXY_IPMI_ERROR_DEVICE_NOT_FOUND = 0x80AB0004,
  SCE_COMP_APP_PROXY_IPMI_ERROR_DEVICE_NOT_CONNECTED = 0x80AB0005,
  SCE_COMP_APP_PROXY_IPMI_ERROR_INVALID_PORT = 0x80AB0006,
  SCE_COMP_APP_PROXY_IPMI_ERROR_HANDLE_ENABLED = 0x80AB0007,
  SCE_COMP_APP_PROXY_IPMI_ERROR_HANDLE_DISABLED = 0x80AB0008,
  SCE_COMP_APP_PROXY_IPMI_ERROR_HANDLE_NOT_FOUND = 0x80AB0009,
  SCE_COMP_APP_PROXY_IPMI_ERROR_NOT_INITIALIZED = 0x80AB000A,
  SCE_COMP_APP_PROXY_IPMI_ERROR_UNMATCH_FUNCTION_TYPE = 0x80AB000B,
  SCE_COMP_APP_PROXY_IPMI_ERROR_ALREADY_CONNECTED = 0x80AB000C,
  SCE_COMP_APP_PROXY_IPMI_ERROR_UNCONNECTED = 0x80AB000D,
  SCE_COMP_APP_PROXY_IPMI_ERROR_CAN_NOT_CONNECT = 0x80AB000E,
  SCE_COMP_APP_PROXY_IPMI_ERROR_CAN_NOT_DISCONNECT = 0x80AB000F,
  SCE_COMPANION_UTIL_ERROR_UNKNOWN = 0x80AD0001,
  SCE_COMPANION_UTIL_ERROR_FATAL = 0x80AD0002,
  SCE_COMPANION_UTIL_ERROR_NOMEM = 0x80AD0003,
  SCE_COMPANION_UTIL_ERROR_INVALID_PARAM = 0x80AD0004,
  SCE_COMPANION_UTIL_ERROR_INVALID_OPERATION = 0x80AD0005,
  SCE_COMPANION_UTIL_ERROR_NOT_INITIALIZED = 0x80AD0006,
  SCE_COMPANION_UTIL_ERROR_ALREADY_INITIALIZED = 0x80AD0007,
  SCE_COMPANION_UTIL_ERROR_NO_EVENT = 0x80AD0008,
  SCE_PAF_ERROR_NOT_INITIALIZED = 0x80AF0001,
  SCE_PAF_ERROR_UNMATCHED_VERSION = 0x80AF0002,
  SCE_PAF_ERROR_NOT_IMPLEMENTED = 0x80AF0003,
  SCE_PAF_ERROR_NOT_SUPPORTED = 0x80AF0004,
  SCE_PAF_ERROR_ALREADY = 0x80AF0020,
  SCE_PAF_ERROR_BUSY = 0x80AF0021,
  SCE_PAF_ERROR_OUT_OF_MEMORY = 0x80AF0022,
  SCE_PAF_ERROR_PRIV_REQUIRED = 0x80AF0023,
  SCE_PAF_ERROR_TIMEOUT = 0x80AF0024,
  SCE_PAF_ERROR_NOT_FOUND = 0x80AF0025,
  SCE_PAF_ERROR_ILLEGAL_CONTEXT = 0x80AF0030,
  SCE_PAF_ERROR_CPUDI = 0x80AF0031,
  SCE_PAF_ERROR_THREAD = 0x80AF0040,
  SCE_PAF_ERROR_SEMAPHORE = 0x80AF0041,
  SCE_PAF_ERROR_EVENTFLAG = 0x80AF0042,
  SCE_PAF_ERROR_TIMER = 0x80AF0043,
  SCE_PAF_ERROR_ALARM = 0x80AF0044,
  SCE_PAF_ERROR_INVALID_ID = 0x80AF0080,
  SCE_PAF_ERROR_INVALID_NAME = 0x80AF0081,
  SCE_PAF_ERROR_INVALID_INDEX = 0x80AF0082,
  SCE_PAF_ERROR_INVALID_POINTER = 0x80AF0083,
  SCE_PAF_ERROR_INVALID_SIZE = 0x80AF0084,
  SCE_PAF_ERROR_INVALID_FLAG = 0x80AF0085,
  SCE_PAF_ERROR_INVALID_COMMAND = 0x80AF0086,
  SCE_PAF_ERROR_INVALID_MODE = 0x80AF0087,
  SCE_PAF_ERROR_INVALID_FORMAT = 0x80AF0088,
  SCE_PAF_ERROR_INVALID_VALUE = 0x80AF008E,
  SCE_PAF_ERROR_INVALID_ARG = 0x80AF008F,
  SCE_PAF_ERROR_THREAD_START_FAILED = 0x80AF0701,
  SCE_PAF_ERROR_THREAD_ALREADY_STARTED = 0x80AF0702,
  SCE_PAF_ERROR_JOB_INVAID_STATUS = 0x80AF0901,
  SCE_PAF_ERROR_JOB_NO_THREAD = 0x80AF0902,
  SCE_PAF_ERROR_FILE_ERROR = 0x80AF5001,
  SCE_PAF_ERROR_FILE_INVALID_ARG = 0x80AF5002,
  SCE_PAF_ERROR_FILE_NO_MEMORY = 0x80AF5003,
  SCE_PAF_ERROR_FILE_NO_IMPL = 0x80AF5004,
  SCE_PAF_ERROR_FILE_NOT_SUPPORTED = 0x80AF5005,
  SCE_PAF_ERROR_FILE_INVALID_CALL = 0x80AF5006,
  SCE_PAF_ERROR_FILE_BAD_FD = 0x80AF5021,
  SCE_PAF_ERROR_FILE_NOT_FOUND = 0x80AF5022,
  SCE_PAF_ERROR_FILE_MFILE = 0x80AF5023,
  SCE_PAF_ERROR_FILE_NODEV = 0x80AF5024,
  SCE_PAF_ERROR_FILE_EACCESS = 0x80AF5025,
  SCE_PAF_ERROR_FILE_EXIST = 0x80AF5026,
  SCE_PAF_ERROR_FILE_NOSPACE = 0x80AF5027,
  SCE_PAF_ERROR_FILE_OPENED = 0x80AF5028,
  SCE_PAF_ERROR_FILE_NOT_OPENED = 0x80AF5029,
  SCE_PAF_ERROR_FILE_ASYNC_BUSY = 0x80AF5041,
  SCE_PAF_ERROR_FILE_NO_ASYNC = 0x80AF5042,
  SCE_PAF_ERROR_DIR_ERROR = 0x80AF5901,
  SCE_PAF_ERROR_DIR_NOENT = 0x80AF5902,
  SCE_PLAYGO_ERROR_UNKNOWN = 0x80B20001,
  SCE_PLAYGO_ERROR_FATAL = 0x80B20002,
  SCE_PLAYGO_ERROR_NO_MEMORY = 0x80B20003,
  SCE_PLAYGO_ERROR_INVALID_ARGUMENT = 0x80B20004,
  SCE_PLAYGO_ERROR_NOT_INITIALIZED = 0x80B20005,
  SCE_PLAYGO_ERROR_ALREADY_INITIALIZED = 0x80B20006,
  SCE_PLAYGO_ERROR_ALREADY_STARTED = 0x80B20007,
  SCE_PLAYGO_ERROR_NOT_STARTED = 0x80B20008,
  SCE_PLAYGO_ERROR_BAD_HANDLE = 0x80B20009,
  SCE_PLAYGO_ERROR_BAD_POINTER = 0x80B2000A,
  SCE_PLAYGO_ERROR_BAD_SIZE = 0x80B2000B,
  SCE_PLAYGO_ERROR_BAD_CHUNK_ID = 0x80B2000C,
  SCE_PLAYGO_ERROR_BAD_SPEED = 0x80B2000D,
  SCE_PLAYGO_ERROR_NOT_SUPPORT_PLAYGO = 0x80B2000E,
  SCE_PLAYGO_ERROR_EPERM = 0x80B2000F,
  SCE_PLAYGO_ERROR_BAD_LOCUS = 0x80B20010,
  SCE_PLAYGO_ERROR_NEED_DATA_DISC = 0x80B20011,
  SCE_S3D_CONVERSION_ERROR_Q_ARG_ATTR_NULL = 0x80B40001,
  SCE_S3D_CONVERSION_ERROR_O_ARG_RSRC_NULL = 0x80B40002,
  SCE_S3D_CONVERSION_ERROR_O_ARG_RSRC_INVALID = 0x80B40003,
  SCE_S3D_CONVERSION_ERROR_O_ARG_HDL_NULL = 0x80B40004,
  SCE_S3D_CONVERSION_ERROR_O_ARG_RSRCMEM_INVALID = 0x80B40005,
  SCE_S3D_CONVERSION_ERROR_C_ARG_HDL_NULL = 0x80B40006,
  SCE_S3D_CONVERSION_ERROR_C_ARG_HDL_INVALID = 0x80B40007,
  SCE_S3D_CONVERSION_ERROR_C_SEQ = 0x80B40008,
  SCE_S3D_CONVERSION_ERROR_E_ARG_HDL_NULL = 0x80B4000A,
  SCE_S3D_CONVERSION_ERROR_E_ARG_HDL_INVALID = 0x80B4000B,
  SCE_S3D_CONVERSION_ERROR_E_ARG_INPICINFO_NULL = 0x80B4000C,
  SCE_S3D_CONVERSION_ERROR_E_ARG_INPICINFO_INVALID = 0x80B4000D,
  SCE_S3D_CONVERSION_ERROR_E_ARG_CTRL_NULL = 0x80B4000E,
  SCE_S3D_CONVERSION_ERROR_E_ARG_CTRL_INVALID = 0x80B4000F,
  SCE_S3D_CONVERSION_ERROR_E_ARG_OUTPICINFO_NULL = 0x80B40010,
  SCE_S3D_CONVERSION_ERROR_E_ARG_LEFTPICINFO_INVALID = 0x80B40012,
  SCE_S3D_CONVERSION_ERROR_E_ARG_RIGHTPICINFO_INVALID = 0x80B40013,
  SCE_S3D_CONVERSION_ERROR_E_ARG_LEFT_RENDERTARGET_NULL = 0x80B40014,
  SCE_S3D_CONVERSION_ERROR_E_ARG_LEFT_RENDERTARGET_INVALID = 0x80B40015,
  SCE_S3D_CONVERSION_ERROR_E_ARG_RIGHT_RENDERTARGET_NULL = 0x80B40016,
  SCE_S3D_CONVERSION_ERROR_E_ARG_RIGHT_RENDERTARGET_INVALID = 0x80B40017,
  SCE_S3D_CONVERSION_ERROR_E_SEQ = 0x80B40018,
  SCE_S3D_CONVERSION_ERROR_E_ARG_RSRC_NULL = 0x80B40019,
  SCE_S3D_CONVERSION_ERROR_E_ARG_RSRC_INVALID = 0x80B4001A,
  SCE_S3D_CONVERSION_ERROR_E_ARG_RSRCMEM_INVALID = 0x80B4001B,
  SCE_RTC_ERROR_NOT_INITIALIZED = 0x80B50001,
  SCE_RTC_ERROR_INVALID_POINTER = 0x80B50002,
  SCE_RTC_ERROR_INVALID_VALUE = 0x80B50003,
  SCE_RTC_ERROR_INVALID_ARG = 0x80B50004,
  SCE_RTC_ERROR_NOT_SUPPORTED = 0x80B50005,
  SCE_RTC_ERROR_NO_CLOCK = 0x80B50006,
  SCE_RTC_ERROR_BAD_PARSE = 0x80B50007,
  SCE_RTC_ERROR_INVALID_YEAR = 0x80B50008,
  SCE_RTC_ERROR_INVALID_MONTH = 0x80B50009,
  SCE_RTC_ERROR_INVALID_DAY = 0x80B5000A,
  SCE_RTC_ERROR_INVALID_HOUR = 0x80B5000B,
  SCE_RTC_ERROR_INVALID_MINUTE = 0x80B5000C,
  SCE_RTC_ERROR_INVALID_SECOND = 0x80B5000D,
  SCE_RTC_ERROR_INVALID_MICROSECOND = 0x80B5000E,
  SCE_LOGIN_MGR_ERROR_NOT_INITIALIZED = 0x80B60001,
  SCE_LOGIN_MGR_ERROR_ALLREADY_INITIALIZED = 0x80B60002,
  SCE_LOGIN_MGR_ERROR_INVALID_ARGUMENT = 0x80B60003,
  SCE_LOGIN_MGR_ERROR_NO_MEMORY = 0x80B60004,
  SCE_LOGIN_MGR_ERROR_THREAD_ALLREADY_STARTED = 0x80B60005,
  SCE_LOGIN_MGR_ERROR_EVENTFLAG_ALLREADY_INITIALIZED = 0x80B60006,
  SCE_LOGIN_MGR_ERROR_EVENTFLAG_NOT_INITIALIZED = 0x80B60007,
  SCE_LOGIN_MGR_ERROR_MUTEX_NOT_INITIALIZED = 0x80B60008,
  SCE_LOGIN_MGR_ERROR_NO_DEVICE_INFO = 0x80B60009,
  SCE_LOGIN_MGR_ERROR_OVER_DEVICE_INFO = 0x80B6000A,
  SCE_LOGIN_MGR_ERROR_ALL_USER_LOGINED = 0x80B6000B,
  SCE_LOGIN_MGR_ERROR_CREATE_USER_FAILED = 0x80B6000C,
  SCE_LOGIN_MGR_ERROR_LOGIN_PROCESS_RUNNING = 0x80B6000D,
  SCE_LOGIN_MGR_ERROR_NO_DEVICE_ID = 0x80B6000E,
  SCE_LOGIN_MGR_ERROR_INTERNAL = 0x80B6000F,
  SCE_LOGIN_MGR_ERROR_USER_ALREADY_EXISTS = 0x80B60010,
  SCE_LOGIN_MGR_ERROR_NETWORK_DISABLED = 0x80B60011,
  SCE_LOGIN_MGR_ERROR_SYSTEM_UPDATE_CHECK_FAILED = 0x80B60012,
  SCE_LOGIN_MGR_ERROR_CAN_NOT_USE_PSN_ON_IDU = 0x80B60013,
  SCE_LOGIN_MGR_ERROR_LOGOUT_BY_MULTIPLE_SIGNIN = 0x80B60014,
  SCE_LOGIN_MGR_ERROR_LOGOUT_BY_TROPHY_DATA_INSTALL_FAILURE = 0x80B60015,
  SCE_LOGIN_MGR_ERROR_MAXIMUM_USER_LOGON = 0x80B60016,
  SCE_LOGIN_MGR_ERROR_CREATE_USER_IS_NOT_ALLOWED = 0x80B60017,
  SCE_LOGIN_MGR_ERROR_MAXIMUM_CONTROLLER = 0x80B60018,
  SCE_LOGIN_MGR_ERROR_SHARE_PLAY_SESSION_ALREADY_OPENED = 0x80B60019,
  SCE_LOGIN_MGR_ERROR_SHARE_PLAY_SESSION_NOT_OPENED = 0x80B6001A,
  SCE_LOGIN_MGR_ERROR_SHARE_PLAY_SESSION_NOT_STOPPED = 0x80B6001B,
  SCE_LOGIN_MGR_ERROR_SHARE_PLAY_SESSION_ALREADY_STARTED = 0x80B6001C,
  SCE_LOGIN_MGR_ERROR_SHARE_PLAY_SESSION_NOT_STARTED = 0x80B6001D,
  SCE_LOGIN_MGR_ERROR_INVALID_USER_ID = 0x80B6001E,
  SCE_LOGIN_MGR_ERROR_BUSY = 0x80B6001F,
  SCE_LOGIN_MGR_ERROR_ABORT = 0x80B60020,
  SCE_LOGIN_MGR_ERROR_ACCOUNT_ID_MISSMATCH = 0x80B60021,
  SCE_LOGIN_MGR_ERROR_LIBPAD_HANDLE_IS_NOT_FOUND = 0x80B60022,
  SCE_LOGIN_MGR_ERROR_MAXIMUM_WEBVIEW = 0x80B60023,
  SCE_LOGIN_MGR_ERROR_FILE_SIZE_LIMIT_EXCEEDED = 0x80B60024,
  SCE_LOGIN_MGR_ERROR_FILE_DOES_NOT_EXIST = 0x80B60025,
  SCE_LOGIN_MGR_ERROR_JSON_PARSING_FAILED = 0x80B60026,
  SCE_LOGIN_MGR_ERROR_USER_NOT_FOUND = 0x80B60027,
  SCE_LOGIN_MGR_ERROR_NOT_SIGNED_UP = 0x80B60028,
  SCE_LOGIN_MGR_ERROR_INVALID_ARGUMENT_FOR_PSFM_SCHEME = 0x80B60029,
  SCE_LOGIN_MGR_ERROR_UNKNOWN = 0x80B6002A,
  SCE_LOGIN_MGR_ERROR_CANCELLED = 0x80B6002B,
  SCE_LOGIN_MGR_ERROR_INVALID_ACCOUNTID = 0x80B6002C,
  SCE_LOGIN_MGR_ERROR_INVALID_FORMAT = 0x80B6002D,
  SCE_LOGIN_MGR_ERROR_ALREADY_USED = 0x80B6002E,
  SCE_LOGIN_MGR_ERROR_USER_CREATION_IS_NOT_ALLOWED = 0x80B6002F,
  SCE_LOGIN_MGR_ERROR_MORPHEUS_CANNOT_USE_DUE_TO_PARENTAL_CONTROLS = 0x80B60030,
  SCE_LOGIN_MGR_ERROR_DATA_NOT_FOUND = 0x80B60031,
  SCE_LOGIN_MGR_ERROR_MAXIMUM_USER = 0x80B60032,
  SCE_LOGIN_MGR_ERROR_NOT_FOREGROUND_USER = 0x80B60033,
  SCE_LOGIN_MGR_ERROR_WEBCORE_UNRESPONSIVE = 0x80B68001,
  SCE_LOGIN_MGR_ERROR_WEBCORE_CRASH = 0x80B68002,
  SCE_LOGIN_MGR_ERROR_NAVIGATION_CONFIRM_FIALED = 0x80B68003,
  SCE_LOGIN_MGR_ERROR_CERTIFICATE_VERIFICATION_FAILED = 0x80B68004,
  SCE_LOGIN_MGR_ERROR_REGCAM_SERVER_ERROR = 0x80B68005,
  SCE_LOGIN_MGR_ERROR_REGCAM_WEB_APP_HTTP_ERROR = 0x80B68006,
  SCE_LOGIN_MGR_ERROR_DEATHSTAR_SERVER_ERROR = 0x80B68007,
  SCE_LOGIN_MGR_ERROR_DEATHSTAR_WEB_APP_HTTP_ERROR = 0x80B68008,
  SCE_LOGIN_MGR_ERROR_BASE_USER_ID_HAS_NOT_BEEN_RELEASED = 0x80B68009,
  SCE_LOGIN_MGR_ERROR_REGCAM_INVALID_URL = 0x80B6800A,
  SCE_LOGIN_MGR_ERROR_DEATHSTAR_INVALID_URL = 0x80B6800B,
  SCE_LOGIN_MGR_ERROR_ACCOUNT_ID_NOT_MATCHED = 0x80B6800C,
  SCE_LOGIN_MGR_ERROR_THE_ENTRY_IS_NOT_INCLUDED_IN_URL_CONFIG = 0x80B6800D,
  SCE_LOGIN_MGR_ERROR_DEATHSTAR_FAMILY_SERVER_ERROR = 0x80B6800E,
  SCE_LOGIN_MGR_ERROR_IMPLICIT_USER_IS_ALREADY_CHANGED = 0x80B6800F,
  SCE_LOGIN_MGR_ERROR_NOT_SUPPORTED_ON_THE_SECONDARY_WEBVIEW = 0x80B68010,
  SCE_LOGIN_MGR_ERROR_UNKNOWN_URL_SCHEME = 0x80B68011,
  SCE_LOGIN_MGR_ERROR_UNKNOWN_URL_COMMAND = 0x80B68012,
  SCE_LOGIN_MGR_ERROR_INVALID_DOMAIN = 0x80B68013,
  SCE_LOGIN_MGR_ERROR_DUPLICATE_ONLINE_ID_1 = 0x80B68014,
  SCE_LOGIN_MGR_ERROR_DUPLICATE_ONLINE_ID_2 = 0x80B68015,
  SCE_LOGIN_MGR_ERROR_NEED_TO_UPDATE_URL_CONFIG = 0x80B68016,
  SCE_LOGIN_MGR_ERROR_DEATHSTAR_ACCOUNTS_UNEXPECTED_ERROR = 0x80B68017,
  SCE_LOGIN_MGR_ERROR_NOT_AVAILABLE_IN_THE_CURRENT_FLOW = 0x80B68018,
  SCE_LOGIN_MGR_UTILITY_ERROR_NOT_INITIALIZED = 0x80B6A001,
  SCE_LOGIN_MGR_UTILITY_ERROR_ALLREADY_INITIALIZED = 0x80B6A002,
  SCE_LOGIN_MGR_UTILITY_ERROR_INVALID_ARGUMENT = 0x80B6A003,
  SCE_LOGIN_MGR_UTILITY_ERROR_NO_MEMORY = 0x80B6A004,
  SCE_LOGIN_MGR_UTILITY_ERROR_INVALID_USER = 0x80B6A005,
  SCE_LOGIN_MGR_UTILITY_ERROR_USER_NOT_LOGIN = 0x80B6A006,
  SCE_LOGIN_MGR_UTILITY_ERROR_LOGOUT_BUSY = 0x80B6A007,
  SCE_LOGIN_MGR_UTILITY_ERROR_INTERNAL = 0x80B6A008,
  SCE_LOGIN_MGR_ERROR_KRATOS_INVALID_ACCOUNTID = 0x80B6F001,
  SCE_LOGIN_MGR_ERROR_KRATOS_SIGNIN_FAILED_USE_LOCAL_ACCOUNTID = 0x80B6F002,
  SCE_LOGIN_MGR_ERROR_KRATOS_NOT_DECLARED_LOCAL_ACCOUNT_INFO = 0x80B6F003,
  SCE_LOGIN_MGR_ERROR_KRATOS_ACCOUNT_INFO_ALREADY_RECEIVED = 0x80B6F004,
  SCE_LOGIN_MGR_ERROR_KRATOS_COULD_NOT_SIGNIN = 0x80B6F005,
  SCE_SIGNUP_UTILITY_ERROR_NOT_INITIALIZED = 0x80B70001,
  SCE_SIGNUP_UTILITY_ERROR_ALREADY_INITIALIZED = 0x80B70002,
  SCE_SIGNUP_UTILITY_ERROR_INVALID_ARGUMENT = 0x80B70003,
  SCE_SIGNUP_UTILITY_ERROR_NO_MEMORY = 0x80B70004,
  SCE_SIGNUP_UTILITY_ERROR_NO_SUCH_USER = 0x80B70005,
  SCE_SIGNUP_UTILITY_ERROR_USER_ALLREADY_SIGNED_IN = 0x80B70006,
  SCE_SIGNUP_UTILITY_ERROR_SIGNUP_BUSY = 0x80B70007,
  SCE_SIGNUP_UTILITY_ERROR_USER_CANCELED = 0x80B70008,
  SCE_SIGNUP_UTILITY_ERROR_INTERNAL = 0x80B70009,
  SCE_SIGNUP_UTILITY_ERROR_CANNOT_USE_THIS_FEATURE = 0x80B7000A,
  SCE_COMMON_DIALOG_ERROR_NOT_SYSTEM_INITIALIZED = 0x80B80001,
  SCE_COMMON_DIALOG_ERROR_ALREADY_SYSTEM_INITIALIZED = 0x80B80002,
  SCE_COMMON_DIALOG_ERROR_NOT_INITIALIZED = 0x80B80003,
  SCE_COMMON_DIALOG_ERROR_ALREADY_INITIALIZED = 0x80B80004,
  SCE_COMMON_DIALOG_ERROR_NOT_FINISHED = 0x80B80005,
  SCE_COMMON_DIALOG_ERROR_INVALID_STATE = 0x80B80006,
  SCE_COMMON_DIALOG_ERROR_RESULT_NONE = 0x80B80007,
  SCE_COMMON_DIALOG_ERROR_BUSY = 0x80B80008,
  SCE_COMMON_DIALOG_ERROR_OUT_OF_MEMORY = 0x80B80009,
  SCE_COMMON_DIALOG_ERROR_PARAM_INVALID = 0x80B8000A,
  SCE_COMMON_DIALOG_ERROR_NOT_RUNNING = 0x80B8000B,
  SCE_COMMON_DIALOG_ERROR_ALREADY_CLOSE = 0x80B8000C,
  SCE_COMMON_DIALOG_ERROR_ARG_NULL = 0x80B8000D,
  SCE_COMMON_DIALOG_ERROR_UNEXPECTED_FATAL = 0x80B8000E,
  SCE_COMMON_DIALOG_ERROR_NOT_SUPPORTED = 0x80B8000F,
  SCE_COMMON_DIALOG_ERROR_INHIBIT_SHAREPLAY_CLIENT = 0x80B80010,
  SCE_SHELL_UTIL_ERROR_NOT_INITIALIZED = 0x80BA0001,
  SCE_SHELL_UTIL_ERROR_NOT_TERMINATED = 0x80BA0002,
  SCE_SHELL_UTIL_ERROR_EVENT_MAX = 0x80BA0003,
  SCE_SHELL_UTIL_ERROR_OUT_OF_MEMORY = 0x80BA0004,
  SCE_SHELL_UTIL_ERROR_ALREADY_UNLOCKED = 0x80BA0005,
  SCE_SHELL_UTIL_ERROR_NOT_SIGNED_UP = 0x80BA0006,
  SCE_SHELL_UTIL_ERROR_SIGNED_OUT = 0x80BA0007,
  SCE_SHELL_UTIL_ERROR_NOT_SIGNED_IN = 0x80BA0008,
  SCE_SHELL_UTIL_ERROR_DISC_CORRUPTED = 0x80BA0009,
  SCE_SHELL_UTIL_ERROR_DISC_UNSUPPORTED = 0x80BA000A,
  SCE_SHELL_UTIL_ERROR_DISC_UNSUPPORTED_PS3 = 0x80BA000B,
  SCE_SHELL_UTIL_ERROR_APPLICATION_CRASH = 0x80BA000C,
  SCE_SHELL_UTIL_ERROR_SYSTEM_MESSAGE_HISTORY = 0x80BA000D,
  SCE_SHELL_UTIL_ERROR_NEED_SYSTEM_UPDATE = 0x80BA000E,
  SCE_SHELL_UTIL_ERROR_DISC_UNRECOGNIZED = 0x80BA000F,
  SCE_SHELL_UTIL_ERROR_NO_APPLICATION = 0x80BA0010,
  SCE_SHELL_UTIL_ERROR_UNSUPPORTED_TV_DETECTED_WHILE_RUNNING = 0x80BA0011,
  SCE_SHELL_UTIL_ERROR_ERROR_DIALOG_SUPPORT_ACTION_USER_NOT_FOUND = 0x80BA0012,
  SCE_SHELL_UTIL_ERROR_SYSTEM_CRASH = 0x80BA0013,
  SCE_SHELL_UTIL_ERROR_SOMETHING_CRASH = 0x80BA0014,
  SCE_SHELL_UTIL_ERROR_APPLICATION_CRASH_ABNORMAL_TERMINATION_REQUEST = 0x80BA0015,
  SCE_SHELL_UTIL_ERROR_MANDATORY_PATCH_IS_DOWNLOADING_IN_NOTIFICATION_LIST = 0x80BA0016,
  SCE_SHELL_UTIL_ERROR_SHARED_URI_UNKNOWN = 0x80BA0017,
  SCE_SHELL_UTIL_ERROR_SHARED_URI_NETWORK = 0x80BA0018,
  SCE_SHELL_UTIL_ERROR_SHARED_URI_CLIENT_ERROR = 0x80BA0019,
  SCE_SHELL_UTIL_ERROR_SHARED_URI_SERVER_ERROR = 0x80BA001A,
  SCE_SHELL_UTIL_ERROR_SHARED_URI_NOT_FOUND = 0x80BA001B,
  SCE_SHELL_UTIL_ERROR_APP_STATUS_DEFUNCT = 0x80BA001C,
  SCE_SHELL_UTIL_ERROR_MORPHEUS_DETECTED_WHILE_RUNNING_APP = 0x80BA001D,
  SCE_SHELL_UTIL_ERROR_UNEXPECTED_FATAL = 0x80BA001E,
  SCE_SHELL_UTIL_ERROR_SERVICE_BUSY = 0x80BA001F,
  SCE_SHELL_UTIL_ERROR_PARAM_INVALID = 0x80BA0020,
  SCE_SHELL_UTIL_ERROR_CANT_CONTINUE_APP_VR_DISCONNECTED = 0x80BA0021,
  SCE_SHELL_UTIL_ERROR_PSNOW_FEATURE_BLOCKED = 0x80BA0022,
  SCE_SHELL_UTIL_ERROR_MORPHEUS_CRASH = 0x80BA0023,
  SCE_SHELL_UTIL_ERROR_MORPHEUS_CRASH_REPORT = 0x80BA0024,
  SCE_SHELL_UTIL_ERROR_SHARED_URI_JSON_FORMAT = 0x80BA0025,
  SCE_SHELL_UTIL_ERROR_QM_SP_UNEXPECTED_FATAL = 0x80BA0026,
  SCE_SHELL_UTIL_ERROR_QM_SP_NO_SESSION_LINK = 0x80BA0027,
  SCE_SHELL_UTIL_ERROR_QM_SP_NOT_INSTALLED = 0x80BA0028,
  SCE_SHELL_UTIL_ERROR_QM_SP_APP_VER_INVALID = 0x80BA0029,
  SCE_SHELL_UTIL_ERROR_SHARED_WEBVIEW_HTTP_STATUS_ERROR = 0x80BA002A,
  SCE_SHELL_UTIL_ERROR_KRATOS_DB_ERROR = 0x80BA002B,
  SCE_SHELL_UTIL_ERROR_SHELLAPP_BOOT_BLOCKED = 0x80BA002C,
  SCE_SHELL_UTIL_ERROR_INTRO_VIDEO_UNKNOWN = 0x80BA002D,
  SCE_SHELL_UTIL_ERROR_INTRO_VIDEO_NETWORK = 0x80BA002E,
  SCE_SHELL_UTIL_ERROR_INTRO_VIDEO_CLIENT_ERROR = 0x80BA002F,
  SCE_SHELL_UTIL_ERROR_INTRO_VIDEO_SERVER_ERROR = 0x80BA0030,
  SCE_SHELL_UTIL_ERROR_UNRESUMABLE_CAUSE_HMU_OFF = 0x80BA0031,
  SCE_SHELL_UTIL_ERROR_QM_SP_NOT_AVAILABLE_REGION = 0x80BA0032,
  SCE_SHELL_UTIL_ERROR_UPDATE_SYSTEM_SOFTWARE_REQIRED_EXTENDED_STORAGE = 0x80BA0033,
  SCE_SHELL_UTIL_ERROR_RNPS_MANIFEST_LOAD_FAILED = 0x80BA0034,
  SCE_SHELL_UTIL_ERROR_RNPS_NO_LAUNCH_TARGET = 0x80BA0035,
  SCE_SHELL_UTIL_ERROR_RNPS_EXCEED_JS_RETRY_LIMIT = 0x80BA0036,
  SCE_SHELL_UTIL_ERROR_RNPS_CANNOT_RECOVER_APPLICATION = 0x80BA0037,
  SCE_SHELL_UTIL_ERROR_RNPS_CRL_FILE_CORRUPTED_EXCEPTION = 0x80BA0038,
  SCE_SHELL_UTIL_ERROR_RNPS_BUNDLE_FILE_CORRUPTED_EXCEPTION = 0x80BA0039,
  SCE_SHELL_UTIL_ERROR_RNPS_BUNDLE_FILE_NOT_FOUND_EXCEPTION = 0x80BA003A,
  SCE_SHELL_UTIL_ERROR_RNPS_RESOURCE_FILE_CORRUPTED_EXCEPTION = 0x80BA003B,
  SCE_SHELL_UTIL_ERROR_RNPS_RESOURCE_FILE_IO_EXCEPTION = 0x80BA003C,
  SCE_SHELL_UTIL_ERROR_UNRESUMABLE_CAUSE_PFT = 0x80BA003D,
  SCE_DEPTH_ERROR_INVALID_PARAMETER = 0x80BB0000,
  SCE_DEPTH_ERROR_INVALID_UPDATE_MODE = 0x80BB0001,
  SCE_DEPTH_ERROR_INVALID_EXECUTION_MODE = 0x80BB0002,
  SCE_DEPTH_ERROR_INVALID_PIXEL_FORMAT = 0x80BB0003,
  SCE_DEPTH_ERROR_INVALID_IMAGE_TYPE = 0x80BB0004,
  SCE_DEPTH_ERROR_INVALID_HANDLE = 0x80BB0005,
  SCE_DEPTH_ERROR_INVALID_MEMORY_ALIGNMENT = 0x80BB0006,
  SCE_DEPTH_ERROR_INVALID_ASPECT = 0x80BB0007,
  SCE_DEPTH_ERROR_INVALID_SIZE_PARAMETER = 0x80BB0008,
  SCE_DEPTH_ERROR_INVALID_RESERVED_PARAMETER = 0x80BB0009,
  SCE_DEPTH_ERROR_INVALID_POINTER_ADDRESS = 0x80BB000A,
  SCE_DEPTH_ERROR_INVALID_RESOLUTION_PARAMETER = 0x80BB000B,
  SCE_DEPTH_ERROR_INVALID_CAMERA_TYPE = 0x80BB000C,
  SCE_DEPTH_ERROR_INVALID_PARAMETER_RANGE = 0x80BB000D,
  SCE_DEPTH_ERROR_INVALID_PROCESSING_ORDER = 0x80BB000E,
  SCE_DEPTH_ERROR_INVALID_TERMINATION = 0x80BB000F,
  SCE_DEPTH_ERROR_INVALID_ACCESS = 0x80BB0010,
  SCE_DEPTH_ERROR_INVALID_DEPTH_MAP_SIZE_TYPE = 0x80BB0011,
  SCE_DEPTH_ERROR_INVALID_DEPTH_MAP_GENERATOR_TYPE = 0x80BB0012,
  SCE_DEPTH_ERROR_INVALID_PROFILE = 0x80BB0012,
  SCE_DEPTH_ERROR_NOT_ENOUGH_MEMORY = 0x80BB0100,
  SCE_DEPTH_ERROR_COULD_NOT_CREATED_INSTANCE = 0x80BB0101,
  SCE_DEPTH_ERROR_CALIBRATION_IS_NECESSARY = 0x80BBFF00,
  SCE_DEPTH_ERROR_FATAL = 0x80BBFFFF,
  SCE_IME_ERROR_BUSY = 0x80BC0001,
  SCE_IME_ERROR_NOT_OPENED = 0x80BC0002,
  SCE_IME_ERROR_NO_MEMORY = 0x80BC0003,
  SCE_IME_ERROR_CONNECTION_FAILED = 0x80BC0004,
  SCE_IME_ERROR_TOO_MANY_REQUESTS = 0x80BC0005,
  SCE_IME_ERROR_INVALID_TEXT = 0x80BC0006,
  SCE_IME_ERROR_EVENT_OVERFLOW = 0x80BC0007,
  SCE_IME_ERROR_NOT_ACTIVE = 0x80BC0008,
  SCE_IME_ERROR_IME_SUSPENDING = 0x80BC0009,
  SCE_IME_ERROR_DEVICE_IN_USE = 0x80BC000A,
  SCE_IME_ERROR_INVALID_USER_ID = 0x80BC0010,
  SCE_IME_ERROR_INVALID_TYPE = 0x80BC0011,
  SCE_IME_ERROR_INVALID_SUPPORTED_LANGUAGES = 0x80BC0012,
  SCE_IME_ERROR_INVALID_ENTER_LABEL = 0x80BC0013,
  SCE_IME_ERROR_INVALID_INPUT_METHOD = 0x80BC0014,
  SCE_IME_ERROR_INVALID_OPTION = 0x80BC0015,
  SCE_IME_ERROR_INVALID_MAX_TEXT_LENGTH = 0x80BC0016,
  SCE_IME_ERROR_INVALID_INPUT_TEXT_BUFFER = 0x80BC0017,
  SCE_IME_ERROR_INVALID_POSX = 0x80BC0018,
  SCE_IME_ERROR_INVALID_POSY = 0x80BC0019,
  SCE_IME_ERROR_INVALID_HORIZONTAL_ALIGNMENT = 0x80BC001A,
  SCE_IME_ERROR_INVALID_VERTICAL_ALIGNMENT = 0x80BC001B,
  SCE_IME_ERROR_INVALID_EXTENDED = 0x80BC001C,
  SCE_IME_ERROR_INVALID_KEYBOARD_TYPE = 0x80BC001D,
  SCE_IME_ERROR_INVALID_WORK = 0x80BC0020,
  SCE_IME_ERROR_INVALID_ARG = 0x80BC0021,
  SCE_IME_ERROR_INVALID_HANDLER = 0x80BC0022,
  SCE_IME_ERROR_NO_RESOURCE_ID = 0x80BC0023,
  SCE_IME_ERROR_INVALID_MODE = 0x80BC0024,
  SCE_IME_ERROR_INVALID_PARAM = 0x80BC0030,
  SCE_IME_ERROR_INVALID_ADDRESS = 0x80BC0031,
  SCE_IME_ERROR_INVALID_RESERVED = 0x80BC0032,
  SCE_IME_ERROR_INVALID_TIMING = 0x80BC0033,
  SCE_IME_ERROR_INTERNAL = 0x80BC00FF,
  SCE_IME_DIALOG_ERROR_INVALID_TITLE = 0x80BC0101,
  SCE_IME_DIALOG_ERROR_NOT_RUNNING = 0x80BC0105,
  SCE_IME_DIALOG_ERROR_NOT_FINISHED = 0x80BC0106,
  SCE_IME_DIALOG_ERROR_NOT_IN_USE = 0x80BC0107,
  SCE_IME_DIC_ERROR_INTERNAL = 0x80BC0780,
  SCE_IME_DIC_ERROR_NO_MORE_WORDS = 0x80BC0781,
  SCE_IME_DIC_ERROR_DIC_FULL = 0x80BC0782,
  SCE_IME_DIC_ERROR_DELETE_FAILED = 0x80BC0783,
  SCE_IME_DIC_ERROR_ONLY_ONE_CHAR = 0x80BC0784,
  SCE_IME_DIC_ERROR_INVALID_YOMI = 0x80BC0785,
  SCE_IME_DIC_ERROR_SAME_WORD = 0x80BC0786,
  SCE_IME_DIC_ERROR_INVALID_KOUHO = 0x80BC0787,
  SCE_IME_DIC_ERROR_INVALID_USERID = 0x80BC0788,
  SCE_IME_CONFIG_ERROR_INVALID_KEY = 0x80BC0790,
  SCE_IME_ERROR_BASE = 0x80BC07A0,
  SCE_IME_ERROR_TEMP = 0x80BC07A1,
  SCE_IME_ERROR_OUT_OF_MEMORY = 0x80BC07A2,
  SCE_IME_ERROR_NO_SPACE = 0x80BC07A3,
  SCE_IME_ERROR_NO_MORE_CANDIDATES = 0x80BC07A4,
  SCE_IME_ERROR_NOT_LOADED = 0x80BC07A5,
  SCE_IME_ERROR_INVALID_CARET = 0x80BC07A6,
  SCE_IME_ERROR_NOT_IMPLEMENTED = 0x80BC07A7,
  SCE_IME_ERROR_FILE_OPEN_FAILED = 0x80BC07A8,
  SCE_IME_ERROR_NO_CAPABILITY = 0x80BC07A9,
  SCE_IME_ERROR_NOT_BEGIN = 0x80BC07AA,
  SCE_IME_ERROR_OUT_OF_RANGE = 0x80BC07AB,
  SCE_IME_ERROR_TEXT_LIMIT = 0x80BC07AC,
  SCE_IME_ERROR_SERVER_NO_MEMORY = 0x80BC07B0,
  SCE_IME_ERROR_SERVER_DOWN = 0x80BC07B1,
  SCE_IME_ERROR_SERVER_BUSY = 0x80BC07B2,
  SCE_IME_ERROR_SERVER_ABORT = 0x80BC07B3,
  SCE_IME_ERROR_SERVER_INVALID_PARAM = 0x80BC07B4,
  SCE_IME_ERROR_CONNECTION_REFUSED = 0x80BC07B5,
  SCE_IME_ERROR_SERVER_TIMEOUT = 0x80BC07B6,
  SCE_IME_ERROR_SERVER_INVALID_DATA_SIZE = 0x80BC07B7,
  SCE_IME_ERROR_SERVER_ALREADY_OPENED = 0x80BC07B8,
  SCE_IME_ERROR_INVALID_CONTEXT = 0x80BC07B9,
  SCE_IME_ERROR_BAD_SCENE_CHANGE_TIMING = 0x80BC07BA,
  SCE_IME_ERROR_NOT_ACTIVE_FROM_SHELL_UI = 0x80BC07BB,
  SCE_IME_SERVER_ERROR_ALREADY_INITIALIZED = 0x80BC07C0,
  SCE_IME_SERVER_ERROR_NOT_INITIALIZED = 0x80BC07C1,
  SCE_IME_SERVER_ERROR_UNKNOWN_LANG = 0x80BC07C2,
  SCE_IME_SERVER_ERROR_UNKNOWN_KEY = 0x80BC07C3,
  SCE_IME_SERVER_ERROR_INVALID_VALUE = 0x80BC07C4,
  SCE_IME_BACKEND_SERVER_ERROR_ALREADY_INITIALIZED = 0x80BC07C5,
  SCE_IME_BACKEND_SERVER_ERROR_NOT_INITIALIZED = 0x80BC07C6,
  SCE_IME_BACKEND_SERVER_ERROR_UNKNOWN_LANG = 0x80BC07C7,
  SCE_IME_BACKEND_SERVER_ERROR_UNKNOWN_KEY = 0x80BC07C8,
  SCE_IME_BACKEND_SERVER_ERROR_INVALID_VALUE = 0x80BC07C9,
  SCE_IME_BACKEND_SERVER_ERROR_RETRY = 0x80BC07CA,
  SCE_IME_ERROR_FOCUS_LOST = 0x80BC07D0,
  SCE_IME_BACKEND_ERROR_BUSY = 0x80BC1001,
  SCE_IME_BACKEND_ERROR_NOT_OPENED = 0x80BC1002,
  SCE_IME_BACKEND_ERROR_NOT_ACTIVE = 0x80BC1003,
  SCE_IME_BACKEND_ERROR_INVALID_STATE = 0x80BC1004,
  SCE_IME_BACKEND_ERROR_INVALID_USER_ID = 0x80BC1010,
  SCE_IME_BACKEND_ERROR_INVALID_LANGUAGE = 0x80BC1011,
  SCE_IME_BACKEND_ERROR_INVALID_OPTION = 0x80BC1012,
  SCE_IME_BACKEND_ERROR_DICTIONARY_OPEN = 0x80BC1013,
  SCE_IME_BACKEND_ERROR_INVALID_EXTENDED = 0x80BC1014,
  SCE_IME_BACKEND_ERROR_PARAM = 0x80BC1030,
  SCE_IME_BACKEND_ERROR_INVALID_ADDRESS = 0x80BC1031,
  SCE_IME_BACKEND_ERROR_INVALID_RESERVED = 0x80BC1032,
  SCE_IME_BACKEND_ERROR_INVALID_TIMING = 0x80BC1033,
  SCE_IME_BACKEND_ERROR_INVALID_PATH = 0x80BC1034,
  SCE_IME_BACKEND_ERROR_INVALID_ENTER_CHARACTER_TYPE = 0x80BC1035,
  SCE_IME_BACKEND_ERROR_OTHER = 0x80BC10FF,
  SCE_SYSFILE_UTIL_ERROR_UNKNOWN = 0x80BD0001,
  SCE_SYSFILE_UTIL_ERROR_MEMORY_NOT_ENOUGH = 0x80BD0002,
  SCE_SYSFILE_UTIL_ERROR_DISKSPACE_NOT_ENOUGH = 0x80BD0003,
  SCE_SYSFILE_UTIL_ERROR_FILE_NOT_FOUND = 0x80BD0004,
  SCE_SYSFILE_UTIL_ERROR_KEY_NOT_FOUND = 0x80BD0005,
  SCE_SYSFILE_UTIL_ERROR_SFO_FILE_BROKEN = 0x80BD0006,
  SCE_SYSFILE_UTIL_ERROR_INVALID_PARAMETERS = 0x80BD0007,
  SCE_SYSFILE_UTIL_ERROR_INVALID_FILEPATH = 0x80BD0008,
  SCE_SCREENSHOT_ERROR_INVALID_ARGUMENT = 0x80BE0001,
  SCE_SCREENSHOT_ERROR_NO_MEMORY = 0x80BE0002,
  SCE_SCREENSHOT_ERROR_FILE_NOT_FOUND = 0x80BE0003,
  SCE_SCREENSHOT_ERROR_NOT_SUPPORTED_FORMAT = 0x80BE0004,
  SCE_SCREENSHOT_ERROR_MEDIA_FULL = 0x80BE0005,
  SCE_SCREENSHOT_ERROR_INTERNAL = 0x80BE0006,
  SCE_SCREENSHOT_ERROR_SCREENSHOT_DISABLED = 0x80BE0007,
  SCE_SCREENSHOT_ERROR_CAPTURE_FAILED = 0x80BE0008,
  SCE_SCREENSHOT_ERROR_CAPTURE_BUSY = 0x80BE0009,
  SCE_SCREENSHOT_ERROR_CAPTURE_CANCELED = 0x80BE000A,
  SCE_SCREENSHOT_ERROR_MEDIA_NOT_EXIST = 0x80BE000B,
  SCE_SCREENSHOT_ERROR_CONTENT_FULL = 0x80BE000C,
  SCE_SCREENSHOT_ERROR_INVALID_DATA = 0x80BE000D,
  SCE_SCREENSHOT_ERROR_NOT_SUPPORTED_DATA = 0x80BE000E,
  SCE_SCREENSHOT_ERROR_ABORT = 0x80BE0103,
  SCE_SCREENSHOT_ERROR_MAIN_THREAD_CALL = 0x80BE0104,
  SCE_SCREENSHOT_ERROR_UNEXPECTED = 0x80BE0105,
  SCE_SCREENSHOT_ERROR_UNKNOWN_SYS_ERROR = 0x80BE0106,
  SCE_SCREENSHOT_ERROR_NO_DRC_PARAM = 0x80BE0107,
  SCE_SCREENSHOT_ERROR_INSUFFICIENT_BUFFER_SIZE = 0x80BE0108,
  SCE_SCREENSHOT_ERROR_SERVER_BUSY = 0x80BE0121,
  SCE_SCREENSHOT_ERROR_SERVER_NOT_EXIST = 0x80BE0122,
  SCE_SCREENSHOT_ERROR_SERVER_NO_MEMORY = 0x80BE0123,
  SCE_SCREENSHOT_ERROR_SYS_FATAL_ERROR = 0x80BE0131,
  SCE_SCREENSHOT_ERROR_GOTO_PROCESS_SUSPEND = 0x80BE0132,
  SCE_SCREENSHOT_ERROR_DISPLAY_BUFFER_NOT_IN_USE = 0x80BE0133,
  SCE_SCREENSHOT_ERROR_DISPLAY_BUFFER_RETRY_COUNT_MAX = 0x80BE0134,
  SCE_SCREENSHOT_ERROR_DISPLAY_BUFFER_ON_MUTE = 0x80BE0135,
  SCE_SCREENSHOT_ERROR_DISPLAY_BUFFER_TOO_BIG = 0x80BE0136,
  SCE_SCREENSHOT_ERROR_NOT_SUPPORTED_PLATFORM = 0x80BE0141,
  SCE_SCREENSHOT_ERROR_SCREENSHOT_SAVE_MEMORY_ALLOCATE_FAILIURE = 0x80BE0180,
  SCE_SCREENSHOT_ERROR_SCREENSHOT_SAVE_INVALID_ARGUMENT = 0x80BE0181,
  SCE_SCREENSHOT_ERROR_SYS_ERROR_UNKNOWN = 0x80BE0190,
  SCE_SCREENSHOT_ERROR_SYS_ERROR_FATAL = 0x80BE0191,
  SCE_SCREENSHOT_ERROR_SYS_ERROR_MAP_ADDRESS = 0x80BE0192,
  SCE_SCREENSHOT_ERROR_SYS_ERROR_UNMAP_ADDRESS = 0x80BE0193,
  SCE_SCREENSHOT_ERROR_SYS_ERROR_REMAP_TO_VMID0 = 0x80BE0194,
  SCE_SCREENSHOT_ERROR_SYS_ERROR_SDMA_COPY = 0x80BE0195,
  SCE_SCREENSHOT_ERROR_SYS_ERROR_LOCK_RESOURCE = 0x80BE0196,
  SCE_VENC_CORE_ERROR_HANDLE = 0x80BF0000,
  SCE_VENC_CORE_ERROR_API_FAIL = 0x80BF0001,
  SCE_VENC_CORE_ERROR_CORE_TYPE = 0x80BF0002,
  SCE_VENC_CORE_ERROR_PRESET_BASE = 0x80BF0003,
  SCE_VENC_CORE_ERROR_PRESET_MODE = 0x80BF0004,
  SCE_VENC_CORE_ERROR_FRAME_FORMAT = 0x80BF0005,
  SCE_VENC_CORE_ERROR_MEMORY_POINTER = 0x80BF0006,
  SCE_VENC_CORE_ERROR_CPU_MEMORY_SIZE = 0x80BF0007,
  SCE_VENC_CORE_ERROR_CPU_GPU_MEMORY_SIZE = 0x80BF0008,
  SCE_VENC_CORE_ERROR_FRAME_BUFFER_SIZE = 0x80BF0009,
  SCE_VENC_CORE_ERROR_FRAME_BUFFER_ALIGNMENT = 0x80BF000A,
  SCE_VENC_CORE_ERROR_MEMORY_TYPE = 0x80BF000B,
  SCE_VENC_CORE_ERROR_MAP_COUNT = 0x80BF000C,
  SCE_VENC_CORE_ERROR_POINTER = 0x80BF000D,
  SCE_VENC_CORE_ERROR_SIZE = 0x80BF000E,
  SCE_VENC_CORE_ERROR_INACTIVE = 0x80BF000F,
  SCE_VENC_CORE_ERROR_SUSPENDED = 0x80BF0010,
  SCE_VENC_CORE_ERROR_FATAL = 0x80BF0011,
  SCE_VDEC_CORE_ERROR_HANDLE = 0x80C00000,
  SCE_VDEC_CORE_ERROR_API_FAIL = 0x80C00001,
  SCE_VDEC_CORE_ERROR_CORE_TYPE = 0x80C00002,
  SCE_VDEC_CORE_ERROR_CODEC_TYPE = 0x80C00003,
  SCE_VDEC_CORE_ERROR_MEMORY_TYPE = 0x80C00004,
  SCE_VDEC_CORE_ERROR_DECODE_MODE = 0x80C00005,
  SCE_VDEC_CORE_ERROR_MAX_FRAME_SIZE = 0x80C00006,
  SCE_VDEC_CORE_ERROR_MEMORY_POINTER = 0x80C00007,
  SCE_VDEC_CORE_ERROR_CPU_MEMORY_SIZE = 0x80C00008,
  SCE_VDEC_CORE_ERROR_CPU_GPU_MEMORY_SIZE = 0x80C00009,
  SCE_VDEC_CORE_ERROR_FRAME_BUFFER_SIZE = 0x80C0000A,
  SCE_VDEC_CORE_ERROR_FRAME_BUFFER_ALIGNMENT = 0x80C0000B,
  SCE_VDEC_CORE_ERROR_FRAME_WIDTH_ALIGNMENT = 0x80C0000C,
  SCE_VDEC_CORE_ERROR_FRAME_FORMAT = 0x80C0000D,
  SCE_VDEC_CORE_ERROR_INPUT_FULL = 0x80C0000E,
  SCE_VDEC_CORE_ERROR_NEW_SEQUENCE = 0x80C0000F,
  SCE_VDEC_CORE_ERROR_INVALID_SEQUENCE = 0x80C00010,
  SCE_VDEC_CORE_ERROR_EXCEED_INSTANCE = 0x80C00011,
  SCE_VDEC_CORE_ERROR_INPUT_AU = 0x80C00012,
  SCE_VDEC_CORE_ERROR_INPUT_STREAM = 0x80C00013,
  SCE_VDEC_CORE_ERROR_RESET_DATA = 0x80C00014,
  SCE_VDEC_CORE_ERROR_MAP_COUNT = 0x80C00015,
  SCE_VDEC_CORE_ERROR_COMPUTE_PIPE_ID = 0x80C00016,
  SCE_VIDEODEC_ERROR_API_FAIL = 0x80C10000,
  SCE_VIDEODEC_ERROR_CODEC_TYPE = 0x80C10001,
  SCE_VIDEODEC_ERROR_STRUCT_SIZE = 0x80C10002,
  SCE_VIDEODEC_ERROR_HANDLE = 0x80C10003,
  SCE_VIDEODEC_ERROR_CPU_MEMORY_SIZE = 0x80C10004,
  SCE_VIDEODEC_ERROR_CPU_MEMORY_POINTER = 0x80C10005,
  SCE_VIDEODEC_ERROR_CPU_GPU_MEMORY_SIZE = 0x80C10006,
  SCE_VIDEODEC_ERROR_CPU_GPU_MEMORY_POINTER = 0x80C10007,
  SCE_VIDEODEC_ERROR_SHADER_CONTEXT_POINTER = 0x80C10008,
  SCE_VIDEODEC_ERROR_AU_SIZE = 0x80C10009,
  SCE_VIDEODEC_ERROR_AU_POINTER = 0x80C1000A,
  SCE_VIDEODEC_ERROR_FRAME_BUFFER_SIZE = 0x80C1000B,
  SCE_VIDEODEC_ERROR_FRAME_BUFFER_POINTER = 0x80C1000C,
  SCE_VIDEODEC_ERROR_FRAME_BUFFER_ALIGNMENT = 0x80C1000D,
  SCE_VIDEODEC_ERROR_CONFIG_INFO = 0x80C1000E,
  SCE_VIDEODEC_ERROR_ARGUMENT_POINTER = 0x80C1000F,
  SCE_PARTITION_FORMATTER_ERROR_GENERAL = 0x80C20000,
  SCE_PARTITION_FORMATTER_ERROR_INVAL = 0x80C20001,
  SCE_PARTITION_FORMATTER_ERROR_NOMEM = 0x80C20002,
  SCE_PARTITION_FORMATTER_ERROR_IO = 0x80C20003,
  SCE_PARTITION_FORMATTER_ERROR_MKFS = 0x80C20004,
  SCE_PARTITION_FORMATTER_ERROR_MKFS_INVAL = 0x80C20005,
  SCE_PARTITION_FORMATTER_ERROR_NOT_FOUND = 0x80C20006,
  SCE_PARTITION_FORMATTER_ERROR_MKFS_UFS = 0x80C20007,
  SCE_PARTITION_FORMATTER_ERROR_NOT_AVAILABLE = 0x80C20008,
  SCE_PARTITION_FORMATTER_ERROR_CANCELED = 0x80C20009,
  SCE_HDD_FORMATTER_ERROR_GENERAL = 0x80C21000,
  SCE_HDD_FORMATTER_ERROR_INVAL = 0x80C21001,
  SCE_HDD_FORMATTER_ERROR_NOMEM = 0x80C21002,
  SCE_HDD_FORMATTER_ERROR_IO = 0x80C21003,
  SCE_HDD_FORMATTER_ERROR_NOT_SUPPORTED = 0x80C21004,
  SCE_HDD_FORMATTER_ERROR_GEOM_INVAL = 0x80C21100,
  SCE_HDD_FORMATTER_ERROR_GEOM_NOENT = 0x80C21101,
  SCE_HDD_FORMATTER_ERROR_GEOM_BUSY = 0x80C21102,
  SCE_HDD_FORMATTER_ERROR_GEOM_EXIST = 0x80C21103,
  SCE_SCREENSHOT_SYS_ERROR_UNKNOWN = 0x80C30001,
  SCE_SCREENSHOT_SYS_ERROR_FATAL = 0x80C30002,
  SCE_SCREENSHOT_SYS_ERROR_GOTO_PROCESS_SUSPEND = 0x80C30101,
  SCE_SCREENSHOT_SYS_ERROR_MAP_ADDRESS = 0x80C30201,
  SCE_SCREENSHOT_SYS_ERROR_UNMAP_ADDRESS = 0x80C30202,
  SCE_SCREENSHOT_SYS_ERROR_REMAP_TO_VMID0 = 0x80C30203,
  SCE_SCREENSHOT_SYS_ERROR_DISPLAY_BUFFER_NOT_IN_USE = 0x80C30301,
  SCE_SCREENSHOT_SYS_ERROR_DISPLAY_BUFFER_RETRY_COUNT_MAX = 0x80C30302,
  SCE_SCREENSHOT_SYS_ERROR_DISPLAY_BUFFER_ON_MUTE = 0x80C30303,
  SCE_SCREENSHOT_SYS_ERROR_DISPLAY_BUFFER_TOO_BIG = 0x80C30304,
  SCE_SCREENSHOT_SYS_ERROR_SDMA_COPY = 0x80C30401,
  SCE_SCREENSHOT_SYS_ERROR_LOCK_RESOURCE = 0x80C30501,
  SCE_PAD_TRACKER_ERROR_NOT_INIT = 0x80C40001,
  SCE_PAD_TRACKER_ERROR_ALREADY_INIT = 0x80C40002,
  SCE_PAD_TRACKER_ERROR_INVALID_ARG = 0x80C40003,
  SCE_PAD_TRACKER_ERROR_INVALID_HANDLE = 0x80C40004,
  SCE_APP_MESSAGING_ERROR_INTERNAL = 0x80C50001,
  SCE_APP_MESSAGING_ERROR_UNAVAILABLE = 0x80C50002,
  SCE_APP_MESSAGING_ERROR_PAYLOAD_SIZE_TOO_LARGE = 0x80C50003,
  SCE_APP_MESSAGING_ERROR_NULL_POINTER = 0x80C50004,
  SCE_APP_MESSAGING_ERROR_NO_MESSAGE = 0x80C50005,
  SCE_APP_MESSAGING_ERROR_NO_MEMORY = 0x80C50006,
  SCE_APP_MESSAGING_ERROR_NO_SUCH_APP = 0x80C50007,
  SCE_COMMON_DIALOG_SERVER_ERROR_NOT_SETDATA = 0x80C60000,
  SCE_COMMON_DIALOG_SERVER_ERROR_ALREADY_FINISHED = 0x80C60001,
  SCE_GNM_ERROR_SUBMISSION_FAILED_INVALID_ARGUMENT = 0x80D11000,
  SCE_GNM_ERROR_SUBMISSION_NOT_ENOUGH_RESOURCES = 0x80D11001,
  SCE_GNM_ERROR_SUBMISSION_AND_FLIP_FAILED_INVALID_COMMAND_BUFFER = 0x80D11080,
  SCE_GNM_ERROR_SUBMISSION_AND_FLIP_FAILED_INVALID_QUEUE_FULL = 0x80D11081,
  SCE_GNM_ERROR_SUBMISSION_AND_FLIP_FAILED_REQUEST_FAILED = 0x80D11082,
  SCE_GNM_ERROR_SUBMISSION_FAILED_INTERNAL_ERROR = 0x80D110FF,
  SCE_GNM_ERROR_VALIDATION_WARNING = 0x80D12000,
  SCE_GNM_ERROR_VALIDATION_WARNING_RWBUFFER_ROTYPE = 0x80D12001,
  SCE_GNM_ERROR_VALIDATION_WARNING_BLENDING = 0x80D12002,
  SCE_GNM_ERROR_VALIDATION_WARNING_DRAW_CU_MASK = 0x80D12003,
  SCE_GNM_ERROR_VALIDATION_WARNING_MRT_SETUP = 0x80D12004,
  SCE_GNM_ERROR_VALIDATION_WARNING_DEPTH_RT_SETUP = 0x80D12005,
  SCE_GNM_ERROR_VALIDATION_WARNING_PS_AND_MRT_FORMAT = 0x80D1200F,
  SCE_GNM_ERROR_VALIDATION_ERROR = 0x80D13000,
  SCE_GNM_ERROR_VALIDATION_VSHARP = 0x80D13001,
  SCE_GNM_ERROR_VALIDATION_TSHARP = 0x80D13002,
  SCE_GNM_ERROR_VALIDATION_RESOURCE = 0x80D13003,
  SCE_GNM_ERROR_VALIDATION_TABLE_MEMORY = 0x80D13004,
  SCE_GNM_ERROR_VALIDATION_WRITE_EVENT_OP = 0x80D13005,
  SCE_GNM_ERROR_VALIDATION_INDEX_BUFFER = 0x80D13006,
  SCE_GNM_ERROR_VALIDATION_TESS_FACTOR_BUFFER = 0x80D13007,
  SCE_GNM_ERROR_VALIDATION_SCRATCH_RING = 0x80D13008,
  SCE_GNM_ERROR_VALIDATION_PRIMITIVE_TYPE = 0x80D13009,
  SCE_GNM_ERROR_VALIDATION_INDEX_SIZE = 0x80D1300A,
  SCE_GNM_ERROR_VALIDATION_INLINE_DRAW_SIZE = 0x80D1300B,
  SCE_GNM_ERROR_VALIDATION_NUM_INPUT_PATCHES = 0x80D1300C,
  SCE_GNM_ERROR_VALIDATION_GS_MODE = 0x80D1300D,
  SCE_GNM_ERROR_VALIDATION_SHADER_ADDRESS = 0x80D1300E,
  SCE_GNM_ERROR_VALIDATION_BORDER_COLOR_TABLE = 0x80D1300F,
  SCE_GNM_ERROR_VALIDATION_SSHARP = 0x80D13010,
  SCE_GNM_ERROR_VALIDATION_DISPATCH_DRAW = 0x80D13011,
  SCE_GNM_ERROR_VALIDATION_ACTIVE_SHADER_STAGE = 0x80D13012,
  SCE_GNM_ERROR_VALIDATION_DCB = 0x80D13013,
  SCE_GNM_ERROR_VALIDATION_MISMATCH_SHADER_STAGE = 0x80D13014,
  SCE_GNM_ERROR_VALIDATION_MRT_SETUP = 0x80D13015,
  SCE_GNM_ERROR_VALIDATION_BAD_OP_CODE = 0x80D13016,
  SCE_GNM_ERROR_VALIDATION_DEPTH_RT_SETUP = 0x80D13017,
  SCE_GNM_ERROR_VALIDATION_NUM_INSTANCES = 0x80D13018,
  SCE_GNM_ERROR_VALIDATION_SRT = 0x80D13019,
  SCE_GNM_ERROR_VALIDATION_INVALID_ARGUMENT = 0x80D13FFD,
  SCE_GNM_ERROR_VALIDATION_FAILED_INTERNAL_ERROR = 0x80D13FFE,
  SCE_GNM_ERROR_VALIDATION_NOT_ENABLED = 0x80D13FFF,
  SCE_GNM_ERROR_CAPTURE_FILE_IO = 0x80D15000,
  SCE_GNM_ERROR_CAPTURE_RAZOR_NOT_LOADED = 0x80D15001,
  SCE_GNM_ERROR_CAPTURE_NOTHING_TO_CAPTURE = 0x80D15002,
  SCE_GNM_ERROR_CAPTURE_FAILED_INTERNAL = 0x80D1500F,
  SCE_GNM_ERROR_COMPUTEQUEUE_INVALID_PIPE_ID = 0x80D17000,
  SCE_GNM_ERROR_COMPUTEQUEUE_INVALID_QUEUE_ID = 0x80D17001,
  SCE_GNM_ERROR_COMPUTEQUEUE_INVALID_RING_SIZE = 0x80D17002,
  SCE_GNM_ERROR_COMPUTEQUEUE_INVALID_RING_BASE_ADDR = 0x80D17003,
  SCE_GNM_ERROR_COMPUTEQUEUE_INVALID_READ_PTR_ADDR = 0x80D17004,
  SCE_GNM_ERROR_COMPUTEQUEUE_INVALID_PIPE_PRIORITY = 0x80D17005,
  SCE_GNM_ERROR_COMPUTEQUEUE_INTERNAL = 0x80D170FF,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_INVALID_ARGUMENT = 0x80D19000,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_INVALID_SHADER = 0x80D19001,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_STALE_HANDLE = 0x80D19002,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_FULL = 0x80D19003,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_NOT_PERMITTED = 0x80D19004,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_OUTPUT_ARGUMENT_IS_NULL = 0x80D19005,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_OWNER_HANDLE_INVALID = 0x80D19006,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_RESOURCE_HANDLE_INVALID = 0x80D19007,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_RESOURCE_TYPE_INVALID = 0x80D19008,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_GDS_RESOURCE_TYPE_INVALID = 0x80D19009,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_RESOURCE_SIZE_INVALID = 0x80D1900A,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_RESOURCE_ADDRESS_IS_NULL = 0x80D1900B,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_GDS_OFFSET_INVALID = 0x80D1900C,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_RESOURCE_NAME_IS_NULL = 0x80D1900D,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_OWNER_NAME_IS_NULL = 0x80D1900E,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_FIND_CALLBACK_IS_NULL = 0x80D1900F,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_RESOURCE_IS_NOT_SHADER = 0x80D19010,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_USER_MEMORY_PARAM_IS_NULL = 0x80D19011,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_USER_MEMORY_PARAM_NOT_ALIGNED = 0x80D19012,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_INVALID_NAME_LENGTH_PARAM = 0x80D19013,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_INVALID_SIZE_PARAM = 0x80D19014,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_INVALID_NUM_RESOURCES_PARAM = 0x80D19015,
  SCE_GNM_ERROR_RESOURCE_REGISTRATION_INTERNAL = 0x80D19FFF,
  SCE_GNM_ERROR_GET_GPU_INFO_PARAMETER_NULL = 0x80D1B000,
  SCE_GNM_ERROR_GET_GPU_INFO_FAILED = 0x80D1B001,
  SCE_GNM_ERROR_GET_GPU_INFO_PARAMETER_INVALID = 0x80D1B002,
  SCE_GNMX_ERROR_DISPATCH_DRAW_INVALID_ARGUMENTS = 0x80D21000,
  SCE_GNMX_ERROR_DISPATCH_DRAW_OUT_OF_SPACE_FOR_INDEX_DATA = 0x80D21001,
  SCE_GNMX_ERROR_DISPATCH_DRAW_OUT_OF_SPACE_FOR_BLOCK_OFFSET = 0x80D21002,
  SCE_GNMX_ERROR_DISPATCH_DRAW_UNREPRESENTABLE_OFFSET = 0x80D21003,
  SCE_GPU_ADDRESS_ERROR_STATUS_INVALID_ARGUMENT = 0x80D30000,
  SCE_GPU_ADDRESS_ERROR_STATUS_INTERNAL_TILING = 0x80D30001,
  SCE_COMPOSITOR_ERROR_CONTROL_FETCH_MISS = 0x80D40001,
  SCE_COMPOSITOR_ERROR_WAIT_TIMEOUT = 0x80D40002,
  SCE_COMPOSITOR_ERROR_ALREADY_INITIALIZED = 0x80D40003,
  SCE_COMPOSITOR_ERROR_SERVER_COMUNICATION = 0x80D40004,
  SCE_COMPOSITOR_ERROR_MEMORY_ALLOCATION = 0x80D40005,
  SCE_COMPOSITOR_ERROR_INVALID_PARAMETER = 0x80D40006,
  SCE_COMPOSITOR_ERROR_EVFLAG_OPEN = 0x80D40007,
  SCE_COMPOSITOR_ERROR_ALLOCATE_APPID = 0x80D40008,
  SCE_COMPOSITOR_ERROR_REQUEST_DENIED = 0x80D40009,
  SCE_COMPOSITOR_ERROR_NOT_INITIALIZED = 0x80D40010,
  SCE_COMPOSITOR_ERROR_MULTI_EVFLAG_OPEN = 0x80D40011,
  SCE_COMPOSITOR_ERROR_MISC = 0x80D400FF,
  SCE_TEXTURE_TOOL_ERROR_COMPUTE_COMPRESS_INVALID_FORMAT = 0x80D70000,
  SCE_TEXTURE_TOOL_ERROR_COMPUTE_COMPRESS_INVALID_BC_ENCODER = 0x80D70001,
  SCE_TEXTURE_TOOL_ERROR_COMPUTE_COMPRESS_BUFFER_SIZE = 0x80D70002,
  SCE_TEXTURE_TOOL_ERROR_COMPUTE_COMPRESS_INVALID_POINTER_OR_ENCODER = 0x80D70003,
  SCE_TEXTURE_TOOL_ERROR_COMPUTE_COMPRESS_INVALID_TEXTURE = 0x80D70004,
  SCE_TEXTURE_TOOL_ERROR_COMPUTE_COMPRESS_ALLOCATE_FAILURE_FROM_DCB = 0x80D70005,
  SCE_TEXTURE_TOOL_ERROR_GNF_INVALID_POINTER = 0x80D70100,
  SCE_TEXTURE_TOOL_ERROR_GNF_NOT_GNF_FILE = 0x80D70101,
  SCE_TEXTURE_TOOL_ERROR_GNF_CORRUPT_HEADER = 0x80D70102,
  SCE_TEXTURE_TOOL_ERROR_GNF_FILE_IS_TOO_SHORT = 0x80D70103,
  SCE_TEXTURE_TOOL_ERROR_GNF_VERSION_MISMATCH = 0x80D70104,
  SCE_TEXTURE_TOOL_ERROR_GNF_ALIGNMENT_OUT_OF_RANGE = 0x80D70105,
  SCE_TEXTURE_TOOL_ERROR_GNF_CONTENTS_SIZE_MISMATCH = 0x80D70106,
  SCE_TEXTURE_TOOL_ERROR_GNF_CANNOT_OPEN_FILE_FOR_READ = 0x80D70107,
  SCE_TEXTURE_TOOL_ERROR_GNF_PIXEL_DATA_SIZE_MISMATCH = 0x80D70108,
  SCE_COMPOSITOR_SERVER_ERROR_DIRECT_MEMORY_ALLOCATION_SYSTEM = 0x80D80001,
  SCE_COMPOSITOR_SERVER_ERROR_DIRECT_MEMORY_ALLOCATION_VIDEO = 0x80D80002,
  SCE_COMPOSITOR_SERVER_ERROR_VIDEO_OUT_OPEN = 0x80D80003,
  SCE_COMPOSITOR_SERVER_ERROR_LOAD_GNM_DRIVER_SYS = 0x80D80004,
  SCE_COMPOSITOR_SERVER_ERROR_LOAD_VIDEO_OUT = 0x80D80005,
  SCE_COMPOSITOR_SERVER_ERROR_GNM_DRIVER_OPEN = 0x80D80006,
  SCE_COMPOSITOR_SERVER_ERROR_GNM_DRIVER_CLOSE = 0x80D80007,
  SCE_COMPOSITOR_SERVER_ERROR_GNM_DRIVER_ADD_EQUEUE = 0x80D80008,
  SCE_COMPOSITOR_SERVER_ERROR_GNM_DRIVER_GET_CLIENT_NUMBER = 0x80D80009,
  SCE_COMPOSITOR_SERVER_ERROR_LOAD_IPMI = 0x80D8000A,
  SCE_COMPOSITOR_SERVER_ERROR_LOAD_CAMERA = 0x80D80010,
  SCE_COMPOSITOR_SERVER_ERROR_LOAD_REGMGR = 0x80D80011,
  SCE_COMPOSITOR_SERVER_ERROR_LOAD_HMD = 0x80D80012,
  SCE_APP_CONTENT_ERROR_NOT_INITIALIZED = 0x80D90001,
  SCE_APP_CONTENT_ERROR_PARAMETER = 0x80D90002,
  SCE_APP_CONTENT_ERROR_BUSY = 0x80D90003,
  SCE_APP_CONTENT_ERROR_NOT_MOUNTED = 0x80D90004,
  SCE_APP_CONTENT_ERROR_NOT_FOUND = 0x80D90005,
  SCE_APP_CONTENT_ERROR_MOUNT_FULL = 0x80D90006,
  SCE_APP_CONTENT_ERROR_DRM_NO_ENTITLEMENT = 0x80D90007,
  SCE_APP_CONTENT_ERROR_NO_SPACE = 0x80D90008,
  SCE_APP_CONTENT_ERROR_NOT_SUPPORTED = 0x80D90009,
  SCE_APP_CONTENT_ERROR_INTERNAL = 0x80D9000A,
  SCE_APP_CONTENT_ERROR_DOWNLOAD_ENTRY_FULL = 0x80D9000B,
  SCE_APP_CONTENT_ERROR_INVALID_PKG = 0x80D9000C,
  SCE_APP_CONTENT_ERROR_OTHER_APPLICATION_PKG = 0x80D9000D,
  SCE_APP_CONTENT_ERROR_CREATE_FULL = 0x80D9000E,
  SCE_APP_CONTENT_ERROR_MOUNT_OTHER_APP = 0x80D9000F,
  SCE_APP_CONTENT_ERROR_OF_MEMORY = 0x80D90010,
  SCE_APP_CONTENT_ERROR_ADDCONT_SHRANK = 0x80D90011,
  SCE_APP_CONTENT_ERROR_ADDCONT_NO_IN_QUEUE = 0x80D90012,
  SCE_APP_CONTENT_ERROR_NETWORK = 0x80D90013,
  SCE_APP_CONTENT_ERROR_SIGNED_OUT = 0x80D90014,
  SCE_APP_CONTENT_ERROR_GET_STORE_COUNTRY = 0x80D91000,
  SCE_DBG_KEYBOARD_ERROR_INVALID_ARG = 0x80DA0001,
  SCE_KEYBOARD_ERROR_INVALID_ARG = 0x80DA0001,
  SCE_DBG_KEYBOARD_ERROR_INVALID_PORT = 0x80DA0002,
  SCE_KEYBOARD_ERROR_INVALID_PORT = 0x80DA0002,
  SCE_DBG_KEYBOARD_ERROR_INVALID_HANDLE = 0x80DA0003,
  SCE_KEYBOARD_ERROR_INVALID_HANDLE = 0x80DA0003,
  SCE_DBG_KEYBOARD_ERROR_ALREADY_OPENED = 0x80DA0004,
  SCE_KEYBOARD_ERROR_ALREADY_OPENED = 0x80DA0004,
  SCE_DBG_KEYBOARD_ERROR_NOT_INITIALIZED = 0x80DA0005,
  SCE_KEYBOARD_ERROR_NOT_INITIALIZED = 0x80DA0005,
  SCE_DBG_KEYBOARD_ERROR_FATAL = 0x80DA00FF,
  SCE_KEYBOARD_ERROR_FATAL = 0x80DA00FF,
  SCE_NP_SNS_FACEBOOK_DIALOG_ERROR_INTERNAL = 0x80DB0001,
  SCE_NP_SNS_FACEBOOK_DIALOG_ERROR_NOT_SIGNIN = 0x80DB0002,
  SCE_NP_SNS_FACEBOOK_DIALOG_ERROR_ACCESS_NOT_ALLOWED = 0x80DB0003,
  SCE_NP_SNS_FACEBOOK_DIALOG_ERROR_UGM_RESTRICTION = 0x80DB0004,
  SCE_NP_SNS_FACEBOOK_DIALOG_ERROR_CERTIFICATE_VERIFICATION = 0x80DB0005,
  SCE_NP_SNS_FACEBOOK_DIALOG_ERROR_WEB_APP_FATAL = 0x80DB0006,
  SCE_VIDEOCORE_ERROR_CODE_INVALID_PARAM = 0x80DC0001,
  SCE_VIDEOCORE_ERROR_CODE_INVALID_STATUS = 0x80DC0003,
  SCE_VIDEOCORE_ERROR_CODE_INVALID_STATUS_COREIF = 0x80DC0004,
  SCE_VIDEOCORE_ERROR_CODE_STREAM_FULL = 0x80DC0005,
  SCE_VIDEOCORE_ERROR_CODE_NOT_EXIST_STREAMID = 0x80DC0006,
  SCE_VIDEOCORE_ERROR_CODE_NO_ALLOCATE_MEMORY = 0x80DC000D,
  SCE_VIDEOCORE_ERROR_CODE_UNUSABLE_THIS_API = 0x80DC000E,
  SCE_VIDEOCORE_ERROR_CODE_RESULT_TIMEOUT = 0x80DC0010,
  SCE_VIDEOCORE_ERROR_CODE_REQUEST_FULL = 0x80DC0011,
  SCE_VIDEOCORE_ERROR_CODE_NOT_EXIST_REQUESTID = 0x80DC0012,
  SCE_VIDEOCORE_ERROR_CODE_REGISTERED_CALLBACK_FULL = 0x80DC0013,
  SCE_VIDEOCORE_ERROR_CODE_RESOURCE_HANDLE_FULL = 0x80DC0014,
  SCE_VIDEOCORE_ERROR_CODE_NOT_EXIST_RESOURCE_HANDLE = 0x80DC0015,
  SCE_VIDEOCORE_ERROR_CODE_NO_DECODER_RESOURCE = 0x80DC0016,
  SCE_VIDEOCORE_ERROR_CODE_STREAM_SUSPENDED = 0x80DC0017,
  SCE_VIDEOCORE_ERROR_CODE_STREAM_ABORTED = 0x80DC0018,
  SCE_VIDEOCORE_ERROR_CODE_BACKGROUND = 0x80DC0019,
  SCE_VIDEOCORE_ERROR_CODE_GENERATE_THUMBNAIL_BUSY = 0x80DC001B,
  SCE_VIDEOCORE_ERROR_CODE_NOT_EXIST_SOURCEID = 0x80DC001C,
  SCE_VIDEOCORE_ERROR_CODE_INPUT_BUFFER_FULL = 0x80DC001D,
  SCE_VIDEOCORE_ERROR_CODE_PARSING_MEDIA_SEGMENT = 0x80DC001E,
  SCE_VIDEOCORE_ERROR_CODE_SOURCE_FULL = 0x80DC001F,
  SCE_VIDEOCORE_ERROR_CODE_NOT_MEDIA_SOURCE_EXTENSIONS = 0x80DC0020,
  SCE_VIDEOCORE_ERROR_CODE_GENERATE_THUMBNAIL_TIMEOUT = 0x80DC0021,
  SCE_VIDEOCORE_ERROR_CODE_INVALID_PARAM_CORE = 0x80DC0100,
  SCE_VIDEOCORE_ERROR_CODE_NOT_EXIST_STREAM = 0x80DC0300,
  SCE_VIDEOCORE_ERROR_CODE_NOPLAYABLE = 0x80DC0400,
  SCE_VIDEOCORE_ERROR_CODE_STOP = 0x80DC0500,
  SCE_VIDEOCORE_ERROR_CODE_ENABLE_RAZOR = 0x80DC0900,
  SCE_VIDEOCORE_ERROR_CODE_HTTP_NOT_FOUND = 0x80DC0A00,
  SCE_VIDEOCORE_ERROR_CODE_NOT_EXIST_SOURCE_BUFFER = 0x80DC0B00,
  SCE_VIDEOCORE_ERROR_CODE_SOURCE_BUFFER_NOT_SUPPORTED = 0x80DC0C00,
  SCE_VIDEOCORE_ERROR_CODE_SOURCE_BUFFER_REACHED_LIMIT = 0x80DC0D00,
  SCE_VIDEOCORE_ERROR_CODE_INVALID_PARAM_COREIF = 0x80DC8002,
  SCE_VIDEOCORE_ERROR_CODE_VIDEOCORE_FUNCTION = 0x80DC8008,
  SCE_VIDEOCORE_ERROR_CODE_SCE_FUNCTION = 0x80DC8009,
  SCE_VIDEOCORE_ERROR_CODE_KERNEL_FUNCTION = 0x80DC800A,
  SCE_VIDEOCORE_ERROR_CODE_IPMI = 0x80DC800B,
  SCE_VIDEOCORE_ERROR_CODE_IPMI_COREIF = 0x80DC800C,
  SCE_VIDEOCORE_ERROR_CODE_INTERNAL = 0x80DC80FF,
  SCE_VIDEOCORE_ERROR_CODE_INVALID_STATUS_CORE = 0x80DC8200,
  SCE_VIDEOCORE_ERROR_CODE_SCE_FUNCTION_CORE = 0x80DC8600,
  SCE_VIDEOCORE_ERROR_CODE_KERNEL_FUNCTION_CORE = 0x80DC8700,
  SCE_VIDEOCORE_ERROR_CODE_IPMI_CORE = 0x80DC8800,
  SCE_VIDEOCORE_ERROR_CODE_INTERNAL_CORE = 0x80DCFF00,
  SCE_SYSTEM_LOGGER_STORAGE_ERROR_INVALID_ARGUMENT = 0x80DD0001,
  SCE_SYSTEM_LOGGER_STORAGE_ERROR_NO_MEMORY = 0x80DD0002,
  SCE_SYSTEM_LOGGER_STORAGE_ERROR_NOT_INITIALIZED = 0x80DD0003,
  SCE_SYSTEM_LOGGER_STORAGE_ERROR_UNSUPPORTED_DATA = 0x80DD0004,
  SCE_PF_AUTH_CLIENT_ERROR_INVALID_ARGUMENT = 0x80DE0001,
  SCE_PF_AUTH_CLIENT_ERROR_OUT_OF_MEMORY = 0x80DE0002,
  SCE_PF_AUTH_CLIENT_ERROR_ABORTED = 0x80DE0003,
  SCE_PF_AUTH_CLIENT_ERROR_NOT_INITIALIZED = 0x80DE0004,
  SCE_PF_AUTH_CLIENT_ERROR_UNSUPPORTED_SYSTEM_SOFTWARE_VERSION = 0x80DE0010,
  SCE_PF_AUTH_CLIENT_ERROR_EMERGENT_SYSTEM_SOFTWARE_UPDATE_REQUIRED = 0x80DE0011,
  SCE_PF_AUTH_CLIENT_ERROR_CONSOLE_BANNED = 0x80DE0012,
  SCE_PF_AUTH_CLIENT_ERROR_AUTH_FAILED = 0x80DE0013,
  SCE_PF_AUTH_CLIENT_ERROR_CONSOLE_TOKEN_BUFFER_SIZE_NOT_ENOUGH = 0x80DE0014,
  SCE_PF_AUTH_CLIENT_ERROR_SIGNATURE_NOT_VALID = 0x80DE0015,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_UNKNOWN = 0x80DE0030,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_NULL_VALUE_NOT_ALLOWED = 0x80DE0031,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_INVALID_REQUEST_BODY = 0x80DE0032,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_INVALID_QUERY_STRING = 0x80DE0033,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_INVALID_NP_ENVIRONMENT = 0x80DE0034,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_TOOL_LARGE_BODY = 0x80DE0035,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_UNSUPPORTED_API_VERSION = 0x80DE0036,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_BAD_REQUEST = 0x80DE0037,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_NOT_AUTHORIZED = 0x80DE0042,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_RATE_LIMIT_EXCEEDED = 0x80DE0043,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_INTERNAL_SERVER_ERROR = 0x80DE0044,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_SERVER_BUSY = 0x80DE0045,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_SERVER_MAINTENANCE = 0x80DE0046,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_SERVICE_CLOSED = 0x80DE0047,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_UNEXPECTED_ERROR = 0x80DE0048,
  SCE_PF_AUTH_CLEINT_SERVER_ERROR_INVALID_REQUEST_BODY_SIZE = 0x80DE0049,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_MESSAGE_FORMAT_SIGNATURE_VERIFICATION_FAILED = 0x80DE004A,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_CERTPS_SIGNATURE_VERIFICATION_FAILED = 0x80DE004B,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_NO_C1_DATA = 0x80DE004C,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_DPS_SIGNATURE_VERIFICATION_FAILED = 0x80DE004D,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_DPS_MATCHING_CONFIRMATION_FAILED = 0x80DE004E,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_KSES_HASH_MATCHING_FAILED = 0x80DE004F,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_CREATED_CONSOLE_TOKEN_TOO_LARGE = 0x80DE0050,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_NOT_FULFILL_A_REQUESTED_VERSION = 0x80DE0051,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_INVALID_HEADER_MAGIC = 0x80DE0052,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_INVALID_HEADER_PROTOCOL_VERSION = 0x80DE0053,
  SCE_PF_AUTH_CLIENT_SERVER_ERROR_INVALID_HEADER_MSG_TYPE = 0x80DE0054,
  SCE_PF_AUTH_CLIENT_ERROR_SET_CLOCK_TIMEOUT = 0x80DE0070,
  SCE_MOUSE_ERROR_INVALID_ARG = 0x80DF0001,
  SCE_MOUSE_ERROR_INVALID_PORT = 0x80DF0002,
  SCE_MOUSE_ERROR_INVALID_HANDLE = 0x80DF0003,
  SCE_MOUSE_ERROR_ALREADY_OPENED = 0x80DF0004,
  SCE_MOUSE_ERROR_NOT_INITIALIZED = 0x80DF0005,
  SCE_MOUSE_ERROR_FATAL = 0x80DF00FF,
  SCE_AC3_ENC_ERROR_INTERNAL_ERROR = 0x80E00000,
  SCE_AC3_ENC_ERROR_INVALID_HANDLE = 0x80E00001,
  SCE_AC3_ENC_ERROR_INVALID_POINTER = 0x80E00002,
  SCE_AC3_ENC_ERROR_INVALID_NUM_CHANNELS = 0x80E00003,
  SCE_AC3_ENC_ERROR_INVALID_SAMPLE_RATE = 0x80E00004,
  SCE_AC3_ENC_ERROR_INVALID_BIT_RATE = 0x80E00005,
  SCE_AC3_ENC_ERROR_INVALID_INPUT_FORMAT = 0x80E00006,
  SCE_AC3_ENC_ERROR_INVALID_OUTPUT_FORMAT = 0x80E00007,
  SCE_AC3_ENC_ERROR_NO_MORE_INSTANCES = 0x80E00008,
  SCE_AC3_ENC_ERROR_NOT_IN_ENCODING = 0x80E00009,
  SCE_WEBBROWSER_ERROR_INVALID_ARG = 0x80E10101,
  SCE_WEBBROWSER_ERROR_INVALID_PTR = 0x80E10102,
  SCE_WEBBROWSER_ERROR_NO_MEMORY = 0x80E10103,
  SCE_WEBBROWSER_ERROR_NOT_IMPL = 0x80E10104,
  SCE_WEBBROWSER_ERROR_ALREADY_CREATED = 0x80E10105,
  SCE_WEBBROWSER_ERROR_ALREADY_DELETED = 0x80E10106,
  SCE_WEBBROWSER_ERROR_JOB_CANCELED = 0x80E10107,
  SCE_WEBBROWSER_ERROR_NOT_INITIALIZED = 0x80E10108,
  SCE_WEBBROWSER_ERROR_NOT_FOUND = 0x80E10109,
  SCE_WEBBROWSER_ERROR_NO_INSTANCE = 0x80E1010A,
  SCE_WEBBROWSER_ERROR_CANNOT_ADD_BOOKMARK = 0x80E1010B,
  SCE_WEBBROWSER_ERROR_CANNOT_ADD_FOLDER = 0x80E1010C,
  SCE_WEBBROWSER_ERROR_FATAL = 0x80E1010D,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_INVALID_ARG = 0x80E10201,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_NO_MEMORY = 0x80E10202,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_INVALID_OP = 0x80E10203,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_NOT_FOUND = 0x80E10204,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_NO_ROWID = 0x80E10205,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_INI_FILE = 0x80E10206,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_CANCELED = 0x80E10207,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_FATAL = 0x80E10208,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_NOT_SUPPORTED = 0x80E10209,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_ERROR = 0x80E10301,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_INTERNAL = 0x80E10302,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_PERM = 0x80E10303,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_ABORT = 0x80E10304,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_BUSY = 0x80E10305,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_LOCKED = 0x80E10306,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_NOMEM = 0x80E10307,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_READONLY = 0x80E10308,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_INTERRUPT = 0x80E10309,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR = 0x80E1030A,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_CORRUPT = 0x80E1030B,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_NOTFOUND = 0x80E1030C,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_FULL = 0x80E1030D,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_CANTOPEN = 0x80E1030E,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_PROTOCOL = 0x80E1030F,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_EMPTY = 0x80E10310,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_SCHEMA = 0x80E10311,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_TOOBIG = 0x80E10312,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_CONSTRAINT = 0x80E10313,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_MISMATCH = 0x80E10314,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_MISUSE = 0x80E10315,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_NOLFS = 0x80E10316,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_AUTH = 0x80E10317,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_FORMAT = 0x80E10318,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_RANGE = 0x80E10319,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_NOTADB = 0x80E1031A,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_READ = 0x80E10401,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_SHORT_READ = 0x80E10402,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_WRITE = 0x80E10403,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_FSYNC = 0x80E10404,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_DIR_FSYNC = 0x80E10405,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_TRUNCATE = 0x80E10406,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_FSTAT = 0x80E10407,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_UNLOCK = 0x80E10408,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_RDLOCK = 0x80E10409,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_DELETE = 0x80E1040A,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_BLOCKED = 0x80E1040B,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_NOMEM = 0x80E1040C,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_ACCESS = 0x80E1040D,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_CHECKRESERVEDLOCK = 0x80E1040E,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_LOCK = 0x80E1040F,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_CLOSE = 0x80E10410,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_IOERR_DIR_CLOSE = 0x80E10411,
  SCE_WEBBROWSER_ERROR_DBUTIL_ERR_SQLITE_LOCKED_SHAREDCACHE = 0x80E10412,
  SCE_WEB_BROWSER_DIALOG_ERROR_NAVIGATION = 0x80E21001,
  SCE_SHELL_CORE_UTIL_ERROR_INTERNAL = 0x80E30001,
  SCE_SHELL_CORE_UTIL_ERROR_UNAVAILABLE = 0x80E30002,
  SCE_SHELL_CORE_UTIL_ERROR_NULL_POINTER = 0x80E30003,
  SCE_SHELL_CORE_UTIL_ERROR_NO_MEMORY = 0x80E30004,
  SCE_SHELL_CORE_UTIL_ERROR_INVALID_ARG = 0x80E30005,
  SCE_SHELL_CORE_UTIL_ERROR_INVALID_URI_LEN = 0x80E30006,
  SCE_SHELL_CORE_UTIL_ERROR_INVALID_VALUE_LEN = 0x80E30007,
  SCE_SHELL_CORE_UTIL_ERROR_OUTSIDE_POWER_LOCK_SECTION = 0x80E30008,
  SCE_SHELL_CORE_UTIL_ERROR_GET_SUPPORT_URL_PARENTAL_BROWSER = 0x80E30009,
  SCE_SHELL_CORE_UTIL_ERROR_GET_SUPPORT_URL_INVALID_ERROR_CODE = 0x80E3000A,
  SCE_SHELL_CORE_UTIL_ERROR_GET_SUPPORT_URL_UNSUPPORTED_ERROR_CODE = 0x80E3000B,
  SCE_SHELL_CORE_UTIL_ERROR_GET_SUPPORT_URL_IP_NOT_OBTAINED = 0x80E3000C,
  SCE_SHELL_CORE_UTIL_ERROR_GET_SUPPORT_URL_NOT_SIGNED_UP = 0x80E3000D,
  SCE_SHELL_CORE_UTIL_ERROR_GET_SUPPORT_URL_INVALID_REGION = 0x80E3000E,
  SCE_SHELL_CORE_UTIL_ERROR_GET_SUPPORT_URL_INVALID_URL_BUFFER_LENGTH = 0x80E3000F,
  SCE_SHELL_CORE_UTIL_ERROR_NOT_IN_BACKUP_MODE = 0x80E30010,
  SCE_SHELL_CORE_UTIL_ERROR_NOT_IN_RESTORE_MODE = 0x80E30011,
  SCE_SHELL_CORE_UTIL_ERROR_CPU_BUSY = 0x80E30012,
  SCE_SHELL_CORE_UTIL_ERROR_NEEDS_TO_SHOW_VR_SAFETY_NOTICE = 0x80E30013,
  SCE_SHELL_CORE_UTIL_ERROR_SLOW_USB = 0x80E30014,
  SCE_SHELL_CORE_UTIL_ERROR_NEED_FSCK = 0x80E30015,
  SCE_SHELL_CORE_UTIL_ERROR_NOT_UFS_FORMAT = 0x80E30016,
  SCE_SHELL_CORE_UTIL_ERROR_DIPSW_DISABLE_RAZOR = 0x80E30017,
  SCE_SHELL_CORE_UTIL_ERROR_DIPSW_KRATOS_MODE = 0x80E30018,
  SCE_SHELL_CORE_UTIL_ERROR_EXTERNAL_STORAGE_METADATA_BROKEN = 0x80E30019,
  SCE_SHELL_CORE_UTIL_ERROR_EXTERNAL_STORAGE_FORMAT_VERSION = 0x80E3001A,
  SCE_SHELL_CORE_UTIL_ERROR_NOT_FOUND = 0x80E3001B,
  SCE_COMPANION_HTTPD_ERROR_UNKNOWN = 0x80E40001,
  SCE_COMPANION_HTTPD_ERROR_FATAL = 0x80E40002,
  SCE_COMPANION_HTTPD_ERROR_NOMEM = 0x80E40003,
  SCE_COMPANION_HTTPD_ERROR_INVALID_PARAM = 0x80E40004,
  SCE_COMPANION_HTTPD_ERROR_INVALID_OPERATION = 0x80E40005,
  SCE_COMPANION_HTTPD_ERROR_NOT_INITIALIZED = 0x80E40006,
  SCE_COMPANION_HTTPD_ERROR_ALREADY_INITIALIZED = 0x80E40007,
  SCE_COMPANION_HTTPD_ERROR_NO_EVENT = 0x80E40008,
  SCE_COMPANION_HTTPD_ERROR_NOT_GENERATE_RESPONSE = 0x80E40009,
  SCE_COMPANION_HTTPD_ERROR_ALREADY_STARTED = 0x80E4000A,
  SCE_COMPANION_HTTPD_ERROR_NOT_STARTED = 0x80E4000B,
  SCE_COMPANION_HTTPD_ERROR_ALREADY_REGISTERED = 0x80E4000C,
  SCE_COMPANION_HTTPD_ERROR_NOT_CONNECTED = 0x80E4000D,
  SCE_COMPANION_HTTPD_ERROR_USER_NOT_FOUND = 0x80E4000E,
  SCE_MESSAGES_BG_ERROR_PROGRESS = 0x80E50001,
  SCE_MESSAGES_BG_ERROR_CANCELED = 0x80E50002,
  SCE_MESSAGES_BG_ERROR_CACHE_ONLY_SUCCESS = 0x80E50003,
  SCE_MESSAGES_BG_ERROR_INTERNAL = 0x80E50010,
  SCE_MESSAGES_BG_ERROR_INVALID_PARAMETER = 0x80E50011,
  SCE_MESSAGES_BG_ERROR_FILE_NOT_FOUND = 0x80E50012,
  SCE_MESSAGES_BG_ERROR_MEMORY_ERROR = 0x80E50013,
  SCE_MESSAGES_BG_ERROR_FATAL_DB_ERROR = 0x80E50014,
  SCE_MESSAGES_BG_ERROR_NOTSIGNIN = 0x80E50015,
  SCE_MESSAGES_BG_ERROR_NOT_INITIALIZED = 0x80E50016,
  SCE_MESSAGES_BG_ERROR_FILE_IO_ERROR = 0x80E50017,
  SCE_MESSAGES_BG_ERROR_REGISTORY = 0x80E50018,
  SCE_MESSAGES_BG_ERROR_FATAL = 0x80E50019,
  SCE_MESSAGES_BG_ERROR_FATAL_DB_BROKEN = 0x80E50020,
  SCE_MESSAGES_BG_ERROR_FATAL_MESSAGES_DB_BROKEN = 0x80E50021,
  SCE_MESSAGES_BG_ERROR_FATAL_ATTACHMENT_DB_BROKEN = 0x80E50022,
  SCE_MESSAGES_BG_ERROR_JSON_PARSE_FAILED = 0x80E50023,
  SCE_MESSAGES_BG_ERROR_NETWORK = 0x80E50110,
  SCE_MESSAGES_BG_ERROR_NETWORK_REQUEST_TIMEOUT = 0x80E50111,
  SCE_MESSAGES_BG_ERROR_NETWORK_SERVER_INTERNAL_ERROR = 0x80E50112,
  SCE_MESSAGES_BG_ERROR_NETWORK_BAD_REQUEST = 0x80E50113,
  SCE_MESSAGES_BG_ERROR_NETWORK_RESPONSE_TIMEOUT = 0x80E50114,
  SCE_MESSAGES_BG_ERROR_NETWORK_ILLEGAL_RESPONSE = 0x80E50115,
  SCE_MESSAGES_BG_ERROR_NETWORK_FORBIDDEN = 0x80E50116,
  SCE_MESSAGES_BG_ERROR_NETWORK_MAINTENANCE = 0x80E50117,
  SCE_MESSAGES_BG_ERROR_NETWORK_BLOCKING_USER = 0x80E50118,
  SCE_MESSAGES_BG_ERROR_NETWORK_REACH_THE_LIMIT = 0x80E50119,
  SCE_MESSAGES_BG_ERROR_NETWORK_CHAT_UGM_FLAG_ON = 0x80E5011A,
  SCE_MESSAGES_BG_ERROR_ALREADY_MESSAGEGROUP_EXISTS = 0x80E5011B,
  SCE_MESSAGES_BG_ERROR_ALL_MEMBERS_BLOCK_THE_APPLICANT = 0x80E5011C,
  SCE_MESSAGES_BG_ERROR_GROUP_NOT_FOUND = 0x80E5011D,
  SCE_MESSAGES_BG_ERROR_OHTERS_MODULE = 0x80E5FFFF,
  SCE_MESSAGES_DB_ERROR_PROGRESS = 0x80E60001,
  SCE_MESSAGES_DB_ERROR_CANCELED = 0x80E60002,
  SCE_MESSAGES_DB_ERROR_CACHE_ONLY_SUCCESS = 0x80E60003,
  SCE_MESSAGES_DB_ERROR_NOT_INITIALIZED = 0x80E60010,
  SCE_MESSAGES_DB_ERROR_FILE_NOT_FOUND = 0x80E60011,
  SCE_MESSAGES_DB_ERROR_INVALID_ARGUMENT = 0x80E60012,
  SCE_MESSAGES_DB_ERROR_INTERNAL = 0x80E60013,
  SCE_MESSAGES_DB_ERROR_FATAL = 0x80E60014,
  SCE_MESSAGES_MESSAGES_DB_ERROR_FATAL = 0x80E60015,
  SCE_MESSAGES_ATTACHMENT_DB_ERROR_FATAL = 0x80E60016,
  SCE_MESSAGES_DB_ERROR_OUT_OF_MEMORY = 0x80E60017,
  SCE_MESSAGES_DB_ERROR_JSON_PARSE_FAILED = 0x80E60018,
  SCE_MESSAGES_DB_ERROR_NOTSIGNIN = 0x80E60019,
  SCE_MESSAGES_DB_ERROR_FILE_IO_ERROR = 0x80E6001A,
  SCE_MESSAGES_DB_ERROR_REGISTORY = 0x80E6001B,
  SCE_MESSAGES_DB_ERROR_BG_PROCESS_FATAL = 0x80E6001C,
  SCE_MESSAGES_DB_ERROR_BG_PROCESS_FATAL_DB_ERROR = 0x80E6001D,
  SCE_MESSAGES_DB_ERROR_DB_FILE_NOT_FOUND = 0x80E6001E,
  SCE_MESSAGES_DB_ERROR_DATA_NOT_FOUND = 0x80E6001F,
  SCE_MESSAGES_DB_ERROR_DATA_OVER_HIT = 0x80E60020,
  SCE_MESSAGES_DB_ERROR_DATA_EXPIRED = 0x80E60021,
  SCE_MESSAGES_DB_ERROR_GROUP_CREATED_WITHOUT_CANCELLATION_IN_TIME = 0x80E60023,
  SCE_MESSAGES_DB_ERROR_DUPLICATE_COMMAND = 0x80E60024,
  SCE_MESSAGES_DB_ERROR_TRY_AGAIN = 0x80E60025,
  SCE_MESSAGES_DB_ERROR_CANNOT_GET_REQUESTID = 0x80E60026,
  SCE_MESSAGES_DB_ERROR_NETWORK_ILLEGAL_RESPONSE = 0x80E60110,
  SCE_MESSAGES_DB_ERROR_GROUP_NOT_FOUND = 0x80E60111,
  SCE_MESSAGES_DB_ERROR_OHTERS_MODULE = 0x80E6FFFF,
  SCE_VISION_MANAGER_ERROR_PARAM = 0x80E70000,
  SCE_VISION_MANAGER_ERROR_ALREADY_INIT = 0x80E70001,
  SCE_VISION_MANAGER_ERROR_NOT_INIT = 0x80E70002,
  SCE_VISION_MANAGER_ERROR_NOT_CAMERA_CONNECTED = 0x80E70003,
  SCE_VISION_MANAGER_ERROR_NOT_SUPPORTED = 0x80E70004,
  SCE_VISION_MANAGER_ERROR_NOMEM = 0x80E70005,
  SCE_VISION_MANAGER_ERROR_OTHER_PROCESS_RUNNING = 0x80E70006,
  SCE_VISION_MANAGER_ERROR_NO_EXIST_TARGET = 0x80E70007,
  SCE_VISION_MANAGER_ERROR_RECEIVE_CANCEL_REQUEST = 0x80E70008,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_INTERNAL_STATUS = 0x80E70009,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_RECV_MSG_WAIT = 0x80E70010,
  SCE_VISION_MANAGER_ERROR_SYSTEM_SHARED_MEMORY_NOT_ENOUGH = 0x80E70011,
  SCE_VISION_MANAGER_ERROR_VIDEO_SHARED_MEMORY_NOT_ENOUGH = 0x80E70012,
  SCE_VISION_MANAGER_ERROR_FLEXIBLE_MEMORY_NOT_ENOUGH = 0x80E70013,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_RECV_MSG_TYPE_FROM_MAIN = 0x80E70014,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_RECV_MSG_TYPE_FROM_CORE = 0x80E70015,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_RECV_MSG_TYPE_FROM_CAMERA = 0x80E70016,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_RECV_MSG_TYPE_FROM_DEPTH = 0x80E70017,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_RECV_MSG_TYPE_FROM_PAD_TRACKER = 0x80E70018,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_RECV_MSG_TYPE_FROM_FACE = 0x80E70019,
  SCE_VISION_MANAGER_ERROR_FACE_RECOG_DICT_NO_EXIST = 0x80E70020,
  SCE_VISION_MANAGER_ERROR_UNEXPECTED_REGISTER_USER_DATA_VERSION = 0x80E70021,
  SCE_VISION_MANAGER_ERROR_FATAL = 0x80E700FF,
  SCE_WEBVIEW_NETWORK_ERROR_UNSUPPORTED_PROTOCOL = 0x80E80001,
  SCE_WEBVIEW_NETWORK_ERROR_FAILED_INIT = 0x80E80002,
  SCE_WEBVIEW_NETWORK_ERROR_URL_MALFORMAT = 0x80E80003,
  SCE_WEBVIEW_NETWORK_ERROR_COULDNT_RESOLVE_PROXY = 0x80E80005,
  SCE_WEBVIEW_NETWORK_ERROR_COULDNT_RESOLVE_HOST = 0x80E80006,
  SCE_WEBVIEW_NETWORK_ERROR_COULDNT_CONNECT = 0x80E80007,
  SCE_WEBVIEW_NETWORK_ERROR_REMOTE_ACCESS_DENIED = 0x80E80009,
  SCE_WEBVIEW_NETWORK_ERROR_PARTIAL_FILE = 0x80E80012,
  SCE_WEBVIEW_NETWORK_ERROR_QUOTE_ERROR = 0x80E80015,
  SCE_WEBVIEW_NETWORK_ERROR_WRITE_ERROR = 0x80E80017,
  SCE_WEBVIEW_NETWORK_ERROR_UPLOAD_FAILED = 0x80E80019,
  SCE_WEBVIEW_NETWORK_ERROR_READ_ERROR = 0x80E8001A,
  SCE_WEBVIEW_NETWORK_ERROR_OUT_OF_MEMORY = 0x80E8001B,
  SCE_WEBVIEW_NETWORK_ERROR_OPERATION_TIMEDOUT = 0x80E8001C,
  SCE_WEBVIEW_NETWORK_ERROR_RANGE_ERROR = 0x80E80021,
  SCE_WEBVIEW_NETWORK_ERROR_HTTP_POST_ERROR = 0x80E80022,
  SCE_WEBVIEW_NETWORK_ERROR_SSL_CONNECT_ERROR = 0x80E80023,
  SCE_WEBVIEW_NETWORK_ERROR_BAD_DOWNLOAD_RESUME = 0x80E80024,
  SCE_WEBVIEW_NETWORK_ERROR_FILE_COULDNT_READ_FILE = 0x80E80025,
  SCE_WEBVIEW_NETWORK_ERROR_FUNCTION_NOT_FOUND = 0x80E80029,
  SCE_WEBVIEW_NETWORK_ERROR_ABORTED_BY_CALLBACK = 0x80E8002A,
  SCE_WEBVIEW_NETWORK_ERROR_BAD_FUNCTION_ARGUMENT = 0x80E8002B,
  SCE_WEBVIEW_NETWORK_ERROR_INTERFACE_FAILED = 0x80E8002D,
  SCE_WEBVIEW_NETWORK_ERROR_TOO_MANY_REDIRECTS = 0x80E8002F,
  SCE_WEBVIEW_NETWORK_ERROR_UNKNOWN_OPTION = 0x80E80030,
  SCE_WEBVIEW_NETWORK_ERROR_PEER_FAILED_VERIFICATION = 0x80E80033,
  SCE_WEBVIEW_NETWORK_ERROR_GOT_NOTHING = 0x80E80034,
  SCE_WEBVIEW_NETWORK_ERROR_SEND_ERROR = 0x80E80037,
  SCE_WEBVIEW_NETWORK_ERROR_RECV_ERROR = 0x80E80038,
  SCE_WEBVIEW_NETWORK_ERROR_SSL_CERTPROBLEM = 0x80E8003A,
  SCE_WEBVIEW_NETWORK_ERROR_SSL_CIPHER = 0x80E8003B,
  SCE_WEBVIEW_NETWORK_ERROR_SSL_CACERT = 0x80E8003C,
  SCE_WEBVIEW_NETWORK_ERROR_BAD_CONTENT_ENCODING = 0x80E8003D,
  SCE_WEBVIEW_NETWORK_ERROR_FILESIZE_EXCEEDED = 0x80E8003F,
  SCE_WEBVIEW_NETWORK_ERROR_SEND_FAIL_REWIND = 0x80E80041,
  SCE_WEBVIEW_NETWORK_ERROR_SSL_ENGINE_INITFAILED = 0x80E80042,
  SCE_WEBVIEW_NETWORK_ERROR_SSL_CACERT_BADFILE = 0x80E8004D,
  SCE_WEBVIEW_NETWORK_ERROR_SSL_SHUTDOWN_FAILED = 0x80E80050,
  SCE_WEBVIEW_NETWORK_ERROR_AGAIN = 0x80E80051,
  SCE_WEBVIEW_NETWORK_ERROR_SSL_ISSUER_ERROR = 0x80E80053,
  SCE_WEBVIEW_NETWORK_ERROR_CHUNK_FAILED = 0x80E80058,
  SCE_WEBVIEW_SSL_X509_ERROR_UNABLE_TO_GET_ISSUER_CERT = 0x80E81002,
  SCE_WEBVIEW_SSL_X509_ERROR_UNABLE_TO_GET_CR = 0x80E81003,
  SCE_WEBVIEW_SSL_X509_ERROR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = 0x80E81004,
  SCE_WEBVIEW_SSL_X509_ERROR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = 0x80E81005,
  SCE_WEBVIEW_SSL_X509_ERROR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = 0x80E81006,
  SCE_WEBVIEW_SSL_X509_ERROR_CERT_SIGNATURE_FAILURE = 0x80E81007,
  SCE_WEBVIEW_SSL_X509_ERROR_CRL_SIGNATURE_FAILURE = 0x80E81008,
  SCE_WEBVIEW_SSL_X509_ERROR_CERT_NOT_YET_VALID = 0x80E81009,
  SCE_WEBVIEW_SSL_X509_ERROR_CERT_HAS_EXPIRED = 0x80E8100A,
  SCE_WEBVIEW_SSL_X509_ERROR_CRL_NOT_YET_VALID = 0x80E8100B,
  SCE_WEBVIEW_SSL_X509_ERROR_CRL_HAS_EXPIRED = 0x80E8100C,
  SCE_WEBVIEW_SSL_X509_ERROR_ERROR_IN_CERT_NOT_BEFORE_FIELD = 0x80E8100D,
  SCE_WEBVIEW_SSL_X509_ERROR_ERROR_IN_CERT_NOT_AFTER_FIELD = 0x80E8100E,
  SCE_WEBVIEW_SSL_X509_ERROR_ERROR_IN_CRL_LAST_UPDATE_FIELD = 0x80E8100F,
  SCE_WEBVIEW_SSL_X509_ERROR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = 0x80E81010,
  SCE_WEBVIEW_SSL_X509_ERROR_OUT_OF_MEM = 0x80E81011,
  SCE_WEBVIEW_SSL_X509_ERROR_DEPTH_ZERO_SELF_SIGNED_CERT = 0x80E81012,
  SCE_WEBVIEW_SSL_X509_ERROR_SELF_SIGNED_CERT_IN_CHAIN = 0x80E81013,
  SCE_WEBVIEW_SSL_X509_ERROR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = 0x80E81014,
  SCE_WEBVIEW_SSL_X509_ERROR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = 0x80E81015,
  SCE_WEBVIEW_SSL_X509_ERROR_CERT_CHAIN_TOO_LONG = 0x80E81016,
  SCE_WEBVIEW_SSL_X509_ERROR_CERT_REVOKED = 0x80E81017,
  SCE_WEBVIEW_SSL_X509_ERROR_INVALID_CA = 0x80E81018,
  SCE_WEBVIEW_SSL_X509_ERROR_PATH_LENGTH_EXCEEDED = 0x80E81019,
  SCE_WEBVIEW_SSL_X509_ERROR_INVALID_PURPOSE = 0x80E8101A,
  SCE_WEBVIEW_SSL_X509_ERROR_CERT_UNTRUSTED = 0x80E8101B,
  SCE_WEBVIEW_SSL_X509_ERROR_CERT_REJECTED = 0x80E8101C,
  SCE_WEBVIEW_SSL_X509_ERROR_SUBJECT_ISSUER_MISMATCH = 0x80E8101D,
  SCE_WEBVIEW_SSL_X509_ERROR_AKID_SKID_MISMATCH = 0x80E8101E,
  SCE_WEBVIEW_SSL_X509_ERROR_AKID_ISSUER_SERIAL_MISMATCH = 0x80E8101F,
  SCE_WEBVIEW_SSL_X509_ERROR_KEYUSAGE_NO_CERTSIGN = 0x80E81020,
  SCE_WEBVIEW_SSL_X509_ERROR_UNABLE_TO_GET_CRL_ISSUER = 0x80E81021,
  SCE_WEBVIEW_SSL_X509_ERROR_UNHANDLED_CRITICAL_EXTENSION = 0x80E81022,
  SCE_WEBVIEW_SSL_X509_ERROR_KEYUSAGE_NO_CRL_SIGN = 0x80E81023,
  SCE_WEBVIEW_SSL_X509_ERROR_UNHANDLED_CRITICAL_CRL_EXTENSION = 0x80E81024,
  SCE_WEBVIEW_SSL_X509_ERROR_INVALID_NON_CA = 0x80E81025,
  SCE_WEBVIEW_SSL_X509_ERROR_PROXY_PATH_LENGTH_EXCEEDED = 0x80E81026,
  SCE_WEBVIEW_SSL_X509_ERROR_KEYUSAGE_NO_DIGITAL_SIGNATURE = 0x80E81027,
  SCE_WEBVIEW_SSL_X509_ERROR_PROXY_CERTIFICATES_NOT_ALLOWED = 0x80E81028,
  SCE_WEBVIEW_SSL_X509_ERROR_INVALID_EXTENSION = 0x80E81029,
  SCE_WEBVIEW_SSL_X509_ERROR_INVALID_POLICY_EXTENSION = 0x80E8102A,
  SCE_WEBVIEW_SSL_X509_ERROR_NO_EXPLICIT_POLICY = 0x80E8102B,
  SCE_WEBVIEW_SSL_X509_ERROR_DIFFERENT_CRL_SCOPE = 0x80E8102C,
  SCE_WEBVIEW_SSL_X509_ERROR_UNSUPPORTED_EXTENSION_FEATURE = 0x80E8102D,
  SCE_WEBVIEW_SSL_X509_ERROR_UNNESTED_RESOURCE = 0x80E8102E,
  SCE_WEBVIEW_SSL_X509_ERROR_PERMITTED_VIOLATION = 0x80E8102F,
  SCE_WEBVIEW_SSL_X509_ERROR_EXCLUDED_VIOLATION = 0x80E81030,
  SCE_WEBVIEW_SSL_X509_ERROR_SUBTREE_MINMAX = 0x80E81031,
  SCE_WEBVIEW_SSL_X509_ERROR_APPLICATION_VERIFICATION = 0x80E81032,
  SCE_WEBVIEW_SSL_X509_ERROR_UNSUPPORTED_CONSTRAINT_TYPE = 0x80E81033,
  SCE_WEBVIEW_SSL_X509_ERROR_UNSUPPORTED_CONSTRAINT_SYNTAX = 0x80E81034,
  SCE_WEBVIEW_SSL_X509_ERROR_UNSUPPORTED_NAME_SYNTAX = 0x80E81035,
  SCE_WEBVIEW_SSL_X509_ERROR_CRL_PATH_VALIDATION_ERROR = 0x80E81036,
  SCE_WEBVIEW_SSL_X509_ERROR_SSL_CN_CHECK = 0x80E81064,
  SCE_WEBVIEW_LOAD_ERROR_CANCELED = 0x80E82000,
  SCE_WEBVIEW_LOAD_ERROR_BLOCKED = 0x80E82001,
  SCE_WEBVIEW_LOAD_ERROR_CANNOT_SHOW_URL = 0x80E82002,
  SCE_WEBVIEW_LOAD_ERROR_INTERRUPTED_FOR_POLICY_CHANGE = 0x80E82003,
  SCE_WEBVIEW_LOAD_ERROR_CANNOT_SHOW_MIME_TYPE = 0x80E82004,
  SCE_WEBVIEW_LOAD_ERROR_FILE_DOES_NOT_EXIST = 0x80E82005,
  SCE_WEBVIEW_LOAD_ERROR_PLUGIN_WILL_HANDLE_LOAD = 0x80E82006,
  SCE_RIFMGR_ERROR_BEFORE_INIT = 0x80E90001,
  SCE_RIFMGR_ERROR_ALREADY_INITED = 0x80E90002,
  SCE_RIFMGR_ERROR_BROKEN = 0x80E90003,
  SCE_RIFMGR_ERROR_NOT_FOUND = 0x80E90004,
  SCE_RIFMGR_ERROR_INVALID_FORMAT = 0x80E90005,
  SCE_RIFMGR_ERROR_INVALID_ID = 0x80E90006,
  SCE_RIFMGR_ERROR_INVALID_VALUE = 0x80E90007,
  SCE_RIFMGR_ERROR_OUT_OF_SIZE = 0x80E90008,
  SCE_RIFMGR_ERROR_INTERNAL = 0x80E90009,
  SCE_RIFMGR_ERROR_OUT_OF_MEMORY = 0x80E9000A,
  SCE_RIFMGR_ERROR_ABORTED = 0x80E9000B,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_RESPONSE = 0x80E9000C,
  SCE_RIFMGR_ERROR_INVALID_SECURE_RESPONSE = 0x80E9000D,
  SCE_RIFMGR_ERROR_START_TIME_VALID_IN_FUTURE = 0x80E9000E,
  SCE_RIFMGR_ERROR_EXPIRED = 0x80E9000F,
  SCE_RIFMGR_ERROR_ACTIVATION_SLOT_FULL = 0x80E90010,
  SCE_RIFMGR_ERROR_KDS_UNREACHABLE = 0x80E90011,
  SCE_RIFMGR_ERROR_DEACTIVATED = 0x80E90012,
  SCE_RIFMGR_ERROR_BUSY = 0x80E90013,
  SCE_RIFMGR_ERROR_PERSISTENT_ACTIVATION_SLOT_FULL = 0x80E90014,
  SCE_RIFMGR_ERROR_RIF_UPDATE_FAILED = 0x80E90015,
  SCE_RIFMGR_ERROR_NOT_ACTIVE_SIGNED_IN = 0x80E90016,
  SCE_RIFMGR_ERROR_BUSY_ACTIVATING = 0x80E90017,
  SCE_RIFMGR_ERROR_FAKE_RIF = 0x80E90018,
  SCE_RIFMGR_ERROR_DRM_FREE_RIF = 0x80E90019,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_400 = 0x80E9001A,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_401 = 0x80E9001B,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_404 = 0x80E9001C,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_405 = 0x80E9001D,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_500 = 0x80E9001E,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_503 = 0x80E9001F,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_UNKNOWN = 0x80E90020,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_REVISION_ID = 0x80E90021,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_TOTAL_RESULTS = 0x80E90022,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ENTITLEMENT_TYPE = 0x80E90023,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ID = 0x80E90024,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ACTIVE_FLAG = 0x80E90025,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ACTIVE_DATE = 0x80E90026,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_SKU_ID = 0x80E90027,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ENTITLEMENT_ATTR = 0x80E90028,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_DOWNLOADABLE_DATE = 0x80E90029,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_META_ENTITLEMENT_ID = 0x80E9002A,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_META_PLAYABILITY_DATE = 0x80E9002B,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_META_WALLET_CHARGE_DATE = 0x80E9002C,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_META_GRACE_PERIOD = 0x80E9002D,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_META_ENTITLEMENT_ATTR = 0x80E9002E,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_META_DOWNLOADABLE_DATE = 0x80E9002F,
  SCE_RIFMGR_ERROR_INVALID_SECURE_OVERVIEW_PER_TYPE = 0x80E90030,
  SCE_RIFMGR_ERROR_INVALID_SECURE_ACTIVATION_TYPE = 0x80E90031,
  SCE_RIFMGR_ERROR_INVALID_SECURE_NUM_MAX_ACTIVATED_DEVICES = 0x80E90032,
  SCE_RIFMGR_ERROR_INVALID_SECURE_NUM_ACTIVATED_DEVICES = 0x80E90033,
  SCE_RIFMGR_ERROR_INVALID_SECURE_IS_ACTIVATED = 0x80E90034,
  SCE_RIFMGR_ERROR_KDS_NO_REQUESTED_ID_RESPONSE = 0x80E90035,
  SCE_RIFMGR_ERROR_WRITE = 0x80E90036,
  SCE_RIFMGR_ERROR_NOT_CONNECTED = 0x80E90037,
  SCE_RIFMGR_ERROR_RIF_IS_NOT_STORED_CORRECTLY = 0x80E90038,
  SCE_RIFMGR_ERROR_INCORRECT_EKC_VERSION = 0x80E90039,
  SCE_RIFMGR_ERROR_INVALID_OQESN_CONFIG_VERSION = 0x80E9003A,
  SCE_RIFMGR_ERROR_INVALID_OQESN_CONFIG_DATE = 0x80E9003B,
  SCE_RIFMGR_ERROR_INVALID_OQESN_CONFIG_GRACE_PERIOD = 0x80E9003C,
  SCE_RIFMGR_ERROR_INVALID_OQESN_HTTP_STATUS_400 = 0x80E9003D,
  SCE_RIFMGR_ERROR_INVALID_OQESN_HTTP_STATUS_401 = 0x80E9003E,
  SCE_RIFMGR_ERROR_INVALID_OQESN_HTTP_STATUS_404 = 0x80E9003F,
  SCE_RIFMGR_ERROR_INVALID_OQESN_HTTP_STATUS_405 = 0x80E90040,
  SCE_RIFMGR_ERROR_INVALID_OQESN_HTTP_STATUS_500 = 0x80E90041,
  SCE_RIFMGR_ERROR_INVALID_OQESN_HTTP_STATUS_503 = 0x80E90042,
  SCE_RIFMGR_ERROR_INVALID_OQESN_HTTP_STATUS_UNKNOWN = 0x80E90043,
  SCE_RIFMGR_ERROR_INVALID_OQESN_SIZE = 0x80E90044,
  SCE_RIFMGR_ERROR_INVALID_OQESN_RESPONSE = 0x80E90045,
  SCE_RIFMGR_ERROR_INVALID_OQESN_BASE64 = 0x80E90046,
  SCE_RIFMGR_ERROR_INVALID_OQESN_HMAC = 0x80E90047,
  SCE_RIFMGR_ERROR_INVALID_OQESN_JSON = 0x80E90048,
  SCE_RIFMGR_ERROR_VTRM_UNMATCH_HMAC = 0x80E90049,
  SCE_RIFMGR_ERROR_VTRM_2ND_HMAC = 0x80E9004A,
  SCE_RIFMGR_ERROR_ACTDAT_NO_ACTDAT = 0x80E9004B,
  SCE_RIFMGR_ERROR_ACTDAT_OVERFLOW = 0x80E9004C,
  SCE_RIFMGR_ERROR_ACTDAT_READ_ERROR = 0x80E9004D,
  SCE_RIFMGR_ERROR_DUPLICATE_ID = 0x80E9004E,
  SCE_RIFMGR_ERROR_VTRM_READ_ERROR = 0x80E9004F,
  SCE_RIFMGR_ERROR_INCORRECT_NONPROD_FLAG = 0x80E90050,
  SCE_RIFMGR_ERROR_INVALID_CONSOLE_TOKEN_SIZE = 0x80E90051,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_SEND_REQUEST = 0x80E90052,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_CONNECTION_RESERVED = 0x80E90053,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_RESOLVING_NAME = 0x80E90054,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_NAME_RESOLVED = 0x80E90055,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_CONNECTING = 0x80E90056,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_CONNECTED = 0x80E90057,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_TLS_CONNECTING = 0x80E90058,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_TLS_CONNECTED = 0x80E90059,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_SENDING_REQUEST = 0x80E9005A,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_REQUEST_SENT = 0x80E9005B,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_RECEIVING_HEADER = 0x80E9005C,
  SCE_RIFMGR_ERROR_HTTP_TIMEOUT_HEADER_RECEIVED = 0x80E9005D,
  SCE_RIFMGR_ERROR_INTERNAL_USERID_TABLE = 0x80E9005E,
  SCE_RIFMGR_ERROR_INTERNAL_REQ_STAT = 0x80E9005F,
  SCE_RIFMGR_ERROR_INTERNAL_PSPLUS_STATUS = 0x80E90060,
  SCE_RIFMGR_ERROR_INTERNAL_PSPLUS_CACHE = 0x80E90061,
  SCE_RIFMGR_ERROR_INTERNAL_SECURE_CLOCK = 0x80E90062,
  SCE_RIFMGR_ERROR_INTERNAL_TEMPACTSTAT = 0x80E90063,
  SCE_RIFMGR_ERROR_EXPIRED_IGC = 0x80E90064,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_HTTP_STATUS_400 = 0x80E90065,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_HTTP_STATUS_401 = 0x80E90066,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_HTTP_STATUS_404 = 0x80E90067,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_HTTP_STATUS_405 = 0x80E90068,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_HTTP_STATUS_500 = 0x80E90069,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_HTTP_STATUS_503 = 0x80E9006A,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_HTTP_STATUS_UNKNOWN = 0x80E9006B,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_SIZE = 0x80E9006C,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_RESPONSE = 0x80E9006D,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_JSON = 0x80E9006E,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_CONFIG_VERSION = 0x80E9006F,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_CONFIG_DATE = 0x80E90070,
  SCE_RIFMGR_ERROR_INVALID_ENTITLEMENT_RENEW_CONFIG_GRACE_PERIOD = 0x80E90071,
  SCE_RIFMGR_ERROR_EXPIRED_PSNOWDL = 0x80E90072,
  SCE_RIFMGR_ERROR_INTERNAL_PSNOW_STATUS = 0x80E90073,
  SCE_RIFMGR_ERROR_INVALID_KAMAJI_SERVICE_TYPE = 0x80E90074,
  SCE_RIFMGR_ERROR_INTERNAL_EAACCESS_STATUS = 0x80E90075,
  SCE_RIFMGR_ERROR_EXPIRED_EAVAULT = 0x80E90076,
  SCE_RIFMGR_ERROR_CONSUMED_EAA_PFT = 0x80E90077,
  SCE_RIFMGR_ERROR_EXPIERD_EAA_SUBSUCRIPTION = 0x80E90078,
  SCE_ENTITLEMENTMGR_ERROR_BEFORE_INIT = 0x80E91001,
  SCE_ENTITLEMENTMGR_ERROR_ALREADY_INITED = 0x80E91002,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_VALUE = 0x80E91003,
  SCE_ENTITLEMENTMGR_ERROR_OUT_OF_MEMORY = 0x80E91004,
  SCE_ENTITLEMENTMGR_ERROR_ABORTED = 0x80E91005,
  SCE_ENTITLEMENTMGR_ERROR_NOT_FOUND = 0x80E91006,
  SCE_ENTITLEMENTMGR_ERROR_OUT_OF_SIZE = 0x80E91007,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_400 = 0x80E91008,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_401 = 0x80E91009,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_404 = 0x80E9100A,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_405 = 0x80E9100B,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_500 = 0x80E9100C,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_503 = 0x80E9100D,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_UNKNOWN = 0x80E9100E,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_REVISION_ID = 0x80E9100F,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_META_REVISION_ID = 0x80E91010,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_TOTAL_RESULTS = 0x80E91011,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ENTITLEMENT_TYPE = 0x80E91012,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ENTITLEMENT_REVID = 0x80E91013,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ENTITLEMENT_META_REVID = 0x80E91014,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ID = 0x80E91015,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ACTIVE_FLAG = 0x80E91016,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ACTIVE_DATE = 0x80E91017,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_SKU_ID = 0x80E91018,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_ENTITLEMENT_ATTR = 0x80E91019,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_DOWNLOADABLE_DATE = 0x80E9101A,
  SCE_ENTITLEMENTMGR_ERROR_REACH_MAX_RECV = 0x80E9101B,
  SCE_ENTITLEMENTMGR_ERROR_DB_CORRUPT = 0x80E9101C,
  SCE_ENTITLEMENTMGR_ERROR_DB_INVALID_LAYOUT = 0x80E9101D,
  SCE_ENTITLEMENTMGR_ERROR_DB_EMPTY_OR_CLEARED = 0x80E9101E,
  SCE_ENTITLEMENTMGR_ERROR_DB_UNKNOWN_VERSION = 0x80E9101F,
  SCE_ENTITLEMENTMGR_ERROR_BUSY = 0x80E91020,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_CONFIG = 0x80E91021,
  SCE_ENTITLEMENTMGR_ERROR_DB_OPEN_FAILED = 0x80E91022,
  SCE_ENTITLEMENTMGR_ERROR_DB_CREATE_FAILED = 0x80E91023,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_FREE_PSPLUS_CONTENT = 0x80E91024,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_REWARD_ID = 0x80E91025,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_EXTERNALENTITLEMENT_ENTITLEMENT_TYPE = 0x80E91026,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_EXTERNALENTITLEMENT_USECOUNT = 0x80E91027,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_EXTERNALENTITLEMENT_USELIMIT = 0x80E91028,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_EXTERNALENTITLEMENT_PACKAGE_TYPE = 0x80E91029,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_EXTERNALENTITLEMENT_ACTIVE_FLAG = 0x80E9102A,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_EXTERNALENTITLEMENT_NAME = 0x80E9102B,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_INTERNALENTITLEMENT_AUTHORIZED = 0x80E9102C,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_BASE = 0x80E92000,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_100 = 0x80E92064,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_101 = 0x80E92065,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_102 = 0x80E92066,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_200 = 0x80E920C8,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_201 = 0x80E920C9,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_202 = 0x80E920CA,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_203 = 0x80E920CB,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_204 = 0x80E920CC,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_205 = 0x80E920CD,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_206 = 0x80E920CE,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_207 = 0x80E920CF,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_208 = 0x80E920D0,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_226 = 0x80E920E2,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_300 = 0x80E9212C,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_301 = 0x80E9212D,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_302 = 0x80E9212E,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_303 = 0x80E9212F,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_304 = 0x80E92130,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_305 = 0x80E92131,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_306 = 0x80E92132,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_307 = 0x80E92133,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_308 = 0x80E92134,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_402 = 0x80E92192,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_403 = 0x80E92193,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_406 = 0x80E92196,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_407 = 0x80E92197,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_408 = 0x80E92198,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_409 = 0x80E92199,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_410 = 0x80E9219A,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_411 = 0x80E9219B,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_412 = 0x80E9219C,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_413 = 0x80E9219D,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_414 = 0x80E9219E,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_415 = 0x80E9219F,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_416 = 0x80E921A0,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_417 = 0x80E921A1,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_418 = 0x80E921A2,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_421 = 0x80E921A5,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_422 = 0x80E921A6,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_423 = 0x80E921A7,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_424 = 0x80E921A8,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_426 = 0x80E921AA,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_428 = 0x80E921AC,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_429 = 0x80E921AD,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_431 = 0x80E921AF,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_451 = 0x80E921C3,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_501 = 0x80E921F5,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_502 = 0x80E921F6,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_504 = 0x80E921F8,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_505 = 0x80E921F9,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_506 = 0x80E921FA,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_507 = 0x80E921FB,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_508 = 0x80E921FC,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_509 = 0x80E921FD,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_510 = 0x80E921FE,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_511 = 0x80E921FF,
  SCE_ENTITLEMENTMGR_ERROR_INVALID_KAMAJI_HTTP_STATUS_MAX = 0x80E923E7,
  SCE_AUDIO3D_ERROR_UNKNOWN = 0x80EA0001,
  SCE_AUDIO3D_ERROR_INVALID_PORT = 0x80EA0002,
  SCE_AUDIO3D_ERROR_INVALID_OBJECT = 0x80EA0003,
  SCE_AUDIO3D_ERROR_INVALID_PARAMETER = 0x80EA0004,
  SCE_AUDIO3D_ERROR_OUT_OF_MEMORY = 0x80EA0005,
  SCE_AUDIO3D_ERROR_OUT_OF_RESOURCES = 0x80EA0006,
  SCE_AUDIO3D_ERROR_NOT_READY = 0x80EA0007,
  SCE_AUDIO3D_ERROR_NOT_SUPPORTED = 0x80EA0008,
  SCE_SCREENSHOT_UTIL_ERROR_INVALID_ARGUMENT = 0x80EB0001,
  SCE_SCREENSHOT_UTIL_ERROR_NO_MEMORY = 0x80EB0002,
  SCE_SCREENSHOT_UTIL_ERROR_FILE_NOT_FOUND = 0x80EB0003,
  SCE_SCREENSHOT_UTIL_ERROR_NOT_SUPPORTED_FORMAT = 0x80EB0004,
  SCE_SCREENSHOT_UTIL_ERROR_MEDIA_FULL = 0x80EB0005,
  SCE_SCREENSHOT_UTIL_ERROR_INTERNAL = 0x80EB0006,
  SCE_SCREENSHOT_UTIL_ERROR_SCREENSHOT_DISABLED = 0x80EB0007,
  SCE_SCREENSHOT_UTIL_ERROR_CAPTURE_FAILED = 0x80EB0008,
  SCE_SCREENSHOT_UTIL_ERROR_CAPTURE_BUSY = 0x80EB0009,
  SCE_SCREENSHOT_UTIL_ERROR_CAPTURE_CANCELED = 0x80EB000A,
  SCE_SCREENSHOT_UTIL_ERROR_MEDIA_NOT_EXIST = 0x80EB000B,
  SCE_SCREENSHOT_UTIL_ERROR_CONTENT_FULL = 0x80EB000C,
  SCE_SCREENSHOT_UTIL_ERROR_INVALID_DATA = 0x80EB000D,
  SCE_SCREENSHOT_UTIL_ERROR_NOT_SUPPORTED_DATA = 0x80EB000E,
  SCE_SCREENSHOT_UTIL_ERROR_ABORT = 0x80EB0103,
  SCE_SCREENSHOT_UTIL_ERROR_MAIN_THREAD_CALL = 0x80EB0104,
  SCE_SCREENSHOT_UTIL_ERROR_SERVER_BUSY = 0x80EB0121,
  SCE_SCREENSHOT_UTIL_ERROR_SERVER_NOT_EXIST = 0x80EB0122,
  SCE_SCREENSHOT_UTIL_ERROR_SERVER_NO_MEMORY = 0x80EB0123,
  SCE_SCREENSHOT_UTIL_ERROR_SYS_FATAL_ERROR = 0x80EB0131,
  SCE_SCREENSHOT_UTIL_ERROR_GOTO_PROCESS_SUSPEND = 0x80EB0132,
  SCE_SCREENSHOT_UTIL_ERROR_DISPLAY_BUFFER_NOT_IN_USE = 0x80EB0133,
  SCE_SCREENSHOT_UTIL_ERROR_DISPLAY_BUFFER_RETRY_COUNT_MAX = 0x80EB0134,
  SCE_SCREENSHOT_UTIL_ERROR_DISPLAY_BUFFER_ON_MUTE = 0x80EB0135,
  SCE_SCREENSHOT_UTIL_ERROR_NOT_SUPPORTED_PLATFORM = 0x80EB0141,
  SCE_SETTINGS_NETWORK_ERROR_EASY_PPPOE_TIMEOUT = 0x80EC0000,
  SCE_SETTINGS_NETWORK_ERROR_EASY_HTTP_CONN_TIMEOUT = 0x80EC0001,
  SCE_SETTINGS_NETWORK_ERROR_EASY_HTTP_GET_STATUS_NOT_200 = 0x80EC0002,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_CONNECTING_TIMEOUT = 0x80EC0020,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_IPOBTAINING_TIMEOUT = 0x80EC0021,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_IPOBTAINING_TIMEOUT_WITH_WEP = 0x80EC0022,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_INET_CONN_TIMEOUT = 0x80EC0023,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_SIGNIN_TIMEOUT = 0x80EC0024,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_NATTYPE_TIMEOUT = 0x80EC0025,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_BANDWIDTH_TIMEOUT = 0x80EC0026,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_AP_DISCONNECTED = 0x80EC0027,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_HTTP_GET_STATUS_NOT_200 = 0x80EC0028,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_PSN_SIGNED_OUT = 0x80EC0029,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_NETWORK_DISABLED = 0x80EC002A,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_CONTENT_TYPE_APPLICATION_XML = 0x80EC002B,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_BANDWIDTH_BPS_LESS_THAN_1KBPS = 0x80EC002C,
  SCE_SETTINGS_NETWORK_ERROR_CONN_TEST_PSN_VERSION_LOCK = 0x80EC002D,
  SCE_SETTINGS_NETWORK_ERROR_UNEXPECTED_WIFI_SECURITY_KEY = 0x80EC0040,
  SCE_SETTINGS_ERROR_PSN_CERTIFICATE_VERIFICATION = 0x80EC0100,
  SCE_SETTINGS_ERROR_PSN_CAM_WEB_APP_FATAL = 0x80EC0101,
  SCE_SETTINGS_ERROR_PSN_CAM_JSON_PARSE = 0x80EC0102,
  SCE_SETTINGS_ERROR_PSN_CAM_WEB_APP_HTTP_ERROR = 0x80EC0103,
  SCE_SETTINGS_ERROR_PSN_ACCOUNT_LINK_PARENTAL_CONTROL = 0x80EC0104,
  SCE_SETTINGS_ERROR_PSN_SUB_ACCOUNT = 0x80EC0105,
  SCE_SETTINGS_ERROR_BT_DEVICE_OPEN_FAILED = 0x80EC0200,
  SCE_SETTINGS_ERROR_BT_WRITE_FAILED = 0x80EC0201,
  SCE_SETTINGS_ERROR_BT_GET_EVENT_QUEUE_FAILED = 0x80EC0202,
  SCE_SETTINGS_ERROR_BT_EVENT_CANNOT_REGIST = 0x80EC0203,
  SCE_SETTINGS_ERROR_BT_EVENT_WAIT_FAILED = 0x80EC0204,
  SCE_SETTINGS_ERROR_BT_EVENT_CANNOT_READ = 0x80EC0205,
  SCE_SETTINGS_ERROR_BT_STATE_INVALID = 0x80EC0206,
  SCE_SETTINGS_ERROR_BT_NOT_SUPPORTED_DEVICE = 0x80EC0207,
  SCE_SETTINGS_ERROR_BT_CONNECTION_TIMEOUT = 0x80EC0208,
  SCE_SETTINGS_ERROR_BT_AUTH_FAILED = 0x80EC0209,
  SCE_SETTINGS_ERROR_BT_CONNECTION_FAILED = 0x80EC020A,
  SCE_SETTINGS_ERROR_BT_CONNECTION_MAX = 0x80EC020B,
  SCE_SETTINGS_ERROR_BT_REGIST_FULL = 0x80EC020C,
  SCE_SETTINGS_ERROR_BT_BD_REMOTE_NOT_SUPPORTED = 0x80EC020D,
  SCE_SETTINGS_ERROR_BT_AUDIO_DEVICE_NOT_SUPPORTED = 0x80EC020E,
  SCE_SETTINGS_ERROR_RESTORE_NEED_SYSTEM_UPDATE = 0x80EC0300,
  SCE_SETTINGS_ERROR_BACKUP_USB_STORAGE_NOT_FOUND = 0x80EC0301,
  SCE_SETTINGS_ERROR_BACKUP_FAILED = 0x80EC0302,
  SCE_SETTINGS_ERROR_RESTORE_STORAGE_TOO_SMALL = 0x80EC0303,
  SCE_SETTINGS_ERROR_RESTORE_DATA_CORRUPT = 0x80EC0304,
  SCE_SETTINGS_ERROR_RESTORE_USB_STORAGE_NOT_FOUND = 0x80EC0305,
  SCE_SETTINGS_ERROR_RESTORE_NOMEM = 0x80EC0306,
  SCE_SETTINGS_ERROR_RESTORE_FAILED = 0x80EC0307,
  SCE_SETTINGS_ERROR_BACKUP_DIRECTORY_CREATE_FAILED = 0x80EC0308,
  SCE_SETTINGS_ERROR_BACKUP_RESTORE_INFO_GET_FAILED = 0x80EC0309,
  SCE_SETTINGS_ERROR_INVALID_ARGUMENT = 0x80EC0400,
  SCE_SETTINGS_ERROR_ILLEGAL_DEBUG_SETTINGS_ACTIVATION = 0x80EC0401,
  SCE_SETTINGS_ERROR_THEME_SCREENSHOT_NOT_AVAILABLE = 0x80EC0500,
  SCE_SETTINGS_ERROR_STORAGE_IRREMOVABLE_APP_LIST_GET_FAILED = 0x80EC0600,
  SCE_SETTINGS_ERROR_STORAGE_MOVE_PROGRESS_INFO_GET_FAILED = 0x80EC0601,
  SCE_SETTINGS_ERROR_STORAGE_MOVE_ERROR_APP_LIST_GET_FAILED = 0x80EC0602,
  SCE_SETTINGS_ERROR_STORAGE_UNRELATED_ADDCONT_TITLE_LIST_GET_FAILED = 0x80EC0603,
  SCE_ERROR_DIALOG_ERROR_NOT_INITIALIZED = 0x80ED0001,
  SCE_ERROR_DIALOG_ERROR_ALREADY_INITIALIZED = 0x80ED0002,
  SCE_ERROR_DIALOG_ERROR_PARAM_INVALID = 0x80ED0003,
  SCE_ERROR_DIALOG_ERROR_UNEXPECTED_FATAL = 0x80ED0004,
  SCE_ERROR_DIALOG_ERROR_INVALID_STATE = 0x80ED0005,
  SCE_ERROR_DIALOG_ERROR_SERVICE_BUSY = 0x80ED0006,
  SCE_ERROR_DIALOG_ERROR_INVALID_USER_ID = 0x80ED0007,
  SCE_MOVE_ERROR_NOT_INIT = 0x80EE0001,
  SCE_MOVE_ERROR_ALREADY_INIT = 0x80EE0002,
  SCE_MOVE_ERROR_INVALID_ARG = 0x80EE0003,
  SCE_MOVE_ERROR_INVALID_HANDLE = 0x80EE0004,
  SCE_MOVE_ERROR_MAX_CONTROLLERS_EXCEEDED = 0x80EE0005,
  SCE_MOVE_ERROR_INVALID_PORT = 0x80EE0006,
  SCE_MOVE_ERROR_ALREADY_OPENED = 0x80EE0007,
  SCE_MOVE_ERROR_FATAL = 0x80EE00FF,
  SCE_MOVE_TRACKER_ERROR_NOT_INIT = 0x80EF0001,
  SCE_MOVE_TRACKER_ERROR_ALREADY_INIT = 0x80EF0002,
  SCE_MOVE_TRACKER_ERROR_INVALID_ARG = 0x80EF0003,
  SCE_MOVE_TRACKER_ERROR_INVALID_HANDLE = 0x80EF0004,
  SCE_NP_DRM_CONTENT_ERROR_UNSIGNED = 0x80F00000,
  SCE_NP_DRM_CONTENT_ERROR_FINALIZED = 0x80F00001,
  SCE_NP_DRM_CONTENT_ERROR_OBSOLETED = 0x80F00002,
  SCE_NP_DRM_CONTENT_ERROR_UNSUPPORTED = 0x80F00003,
  SCE_NP_DRM_CONTENT_ERROR_BUFFERSIZE = 0x80F00010,
  SCE_NP_DRM_CONTENT_ERROR_HEADERFORMAT = 0x80F00100,
  SCE_NP_DRM_CONTENT_ERROR_HEADERSIGN = 0x80F00101,
  SCE_NP_DRM_CONTENT_ERROR_HEADERVERSION = 0x80F00102,
  SCE_NP_DRM_CONTENT_ERROR_INDEXDIGEST = 0x80F00200,
  SCE_NP_DRM_CONTENT_ERROR_ENTRYINDEX = 0x80F00400,
  SCE_NP_DRM_CONTENT_ERROR_ENTRYNOTFOUND = 0x80F00401,
  SCE_NP_DRM_CONTENT_ERROR_ENTRYDIGEST = 0x80F00402,
  SCE_NP_DRM_CONTENT_ERROR_ENTRYDECRYPT = 0x80F00403,
  SCE_NP_DRM_CONTENT_ERROR_DIGESTSHEADER = 0x80F00600,
  SCE_NP_DRM_CONTENT_ERROR_DIGESTSVERSION = 0x80F00601,
  SCE_NP_DRM_CONTENT_ERROR_DIGESTSINDEX = 0x80F00602,
  SCE_NP_DRM_CONTENT_ERROR_DIGESTSSIZE = 0x80F00603,
  SCE_NP_DRM_CONTENT_ERROR_CONTENTDIGEST = 0x80F00610,
  SCE_NP_DRM_CONTENT_ERROR_ORIGINDIGEST = 0x80F00611,
  SCE_NP_DRM_CONTENT_ERROR_ORIGINCHECK = 0x80F00612,
  SCE_NP_DRM_CONTENT_ERROR_CURRENTDIGEST = 0x80F00620,
  SCE_NP_DRM_CONTENT_ERROR_TARGETDIGEST = 0x80F00621,
  SCE_NP_DRM_CONTENT_ERROR_TARGETCHECK = 0x80F00622,
  SCE_NP_DRM_CONTENT_ERROR_APPLICATION = 0x80F00630,
  SCE_NP_DRM_CONTENT_ERROR_CUMULATIVE = 0x80F00631,
  SCE_NP_DRM_CONTENT_ERROR_INCREMENTAL = 0x80F00632,
  SCE_NP_DRM_CONTENT_ERROR_STATUSMISMATCH = 0x80F00633,
  SCE_NP_DRM_CONTENT_ERROR_DELTAORIGIN = 0x80F00640,
  SCE_NP_DRM_CONTENT_ERROR_DELTATARGET = 0x80F00641,
  SCE_NP_DRM_CONTENT_ERROR_DELTALATEST = 0x80F00642,
  SCE_NP_DRM_CONTENT_ERROR_IMAGEDIGEST = 0x80F00800,
  SCE_NP_DRM_CONTENT_ERROR_NODELTAINFO = 0x80F00A00,
  SCE_NP_DRM_CONTENT_ERROR_DELTAPATCH = 0x80F00A01,
  SCE_NP_DRM_CONTENT_ERROR_DELTAOFFSET = 0x80F00A02,
  SCE_NP_DRM_CONTENT_ERROR_DELTAFORMAT = 0x80F00A03,
  SCE_NP_DRM_CONTENT_ERROR_DELTASTATUS = 0x80F00A04,
  SCE_NP_DRM_CONTENT_ERROR_DELTAVERSION = 0x80F00A05,
  SCE_NP_DRM_CONTENT_ERROR_DELTAKEYSIZE = 0x80F00A10,
  SCE_GAME_LIVE_BROADCASTING_ERROR_NW_NO_CONNECTION = 0x80F10001,
  SCE_GAME_LIVE_BROADCASTING_ERROR_NW_SERVER_NOT_FOUND = 0x80F10002,
  SCE_GAME_LIVE_BROADCASTING_ERROR_ACCOUNT_NOT_LINKED = 0x80F10003,
  SCE_GAME_LIVE_BROADCASTING_ERROR_PAR12 = 0x80F10004,
  SCE_GAME_LIVE_BROADCASTING_ERROR_SUB_ACCOUNT = 0x80F10005,
  SCE_GAME_LIVE_BROADCASTING_ERROR_SCANIN_CLOSE_TIME_OUT = 0x80F10006,
  SCE_GAME_LIVE_BROADCASTING_ERROR_ADVERT_CANT_START = 0x80F10007,
  SCE_GAME_LIVE_BROADCASTING_ERROR_NOT_AVAILABLE_FEATURE = 0x80F10008,
  SCE_GAME_LIVE_BROADCASTING_ERROR_CANT_CONNECT_NETWORK = 0x80F10009,
  SCE_GAME_LIVE_BROADCASTING_ERROR_NETWORK_CONNECTION_LOST = 0x80F1000A,
  SCE_GAME_LIVE_BROADCASTING_ERROR_SERVER_CONNECT_TIMEOUT = 0x80F1000B,
  SCE_GAME_LIVE_BROADCASTING_ERROR_CONNECTION_SERVER_DISCONNECT = 0x80F1000C,
  SCE_GAME_LIVE_BROADCASTING_ERROR_CANT_CONNECT_SERVER = 0x80F1000D,
  SCE_GAME_LIVE_BROADCASTING_ERROR_BROADCASTING_PROHIBITED_AREA = 0x80F1000E,
  SCE_GAME_LIVE_BROADCASTING_ERROR_PROGRAM_ALREADY_FINISHED = 0x80F1000F,
  SCE_GAME_LIVE_BROADCASTING_ERROR_ANOTHER_USER_BROADCASTING = 0x80F10010,
  SCE_GAME_LIVE_BROADCASTING_ERROR_USING_SHAREPLAY_AS_HOST = 0x80F10011,
  SCE_GAME_LIVE_BROADCASTING_ERROR_USING_SHAREPLAY_BY_ANOTHER_USER = 0x80F10012,
  SCE_GAME_LIVE_BROADCASTING_ERROR_GAME_NOT_RUNNING = 0x80F10013,
  SCE_GAME_LIVE_BROADCASTING_ERROR_PROHIBITED_THIS_GAME = 0x80F10014,
  SCE_GAME_LIVE_BROADCASTING_ERROR_USING_SHAREPLAY_AS_HOST_AND_DURING_RECORDING = 0x80F10015,
  SCE_GAME_LIVE_BROADCASTING_ERROR_CANNOT_BROADCAST = 0x80F10016,
  SCE_GAME_LIVE_BROADCASTING_ERROR_BROADCAST_SAME_CHANNEL = 0x80F10017,
  SCE_GAME_LIVE_BROADCASTING_ERROR_CANT_START_BROADCAST = 0x80F10018,
  SCE_GAME_LIVE_BROADCASTING_ERROR_INVALID_PARAM = 0x80F10019,
  SCE_GAME_LIVE_BROADCASTING_ERROR_INVALID_ACCESS_TOKEN = 0x80F1001A,
  SCE_GAME_LIVE_BROADCASTING_ERROR_RATE_LIMIT = 0x80F1001B,
  SCE_GAME_LIVE_BROADCASTING_ERROR_ATTRIBUTE_ACCESS_TIMEOUT = 0x80F1001C,
  SCE_GAME_LIVE_BROADCASTING_ERROR_NOT_INITIALIZED = 0x80F1001D,
  SCE_GAME_LIVE_BROADCASTING_ERROR_PSVR_SEPARETE_MODE_60HZ = 0x80F1001E,
  SCE_GAME_LIVE_BROADCASTING_ERROR_ALL_SERVICES_UNAVAILABLE = 0x80F1001F,
  SCE_GAME_LIVE_SPECTATING_ERROR_TOO_MANY_VIEWERS = 0x80F20001,
  SCE_GAME_LIVE_BROADCASTING_ERROR_CANNOT_UNFOLLOW_BROADCASTER = 0x80F20002,
  SCE_GAME_LIVE_BROADCASTING_ERROR_CANNOT_UNFOLLOW_CHANNEL = 0x80F20003,
  SCE_GAME_LIVE_SPECTATING_ERROR_SERVICE_NOT_AVAILABLE_RESION = 0x80F20004,
  SCE_GAME_LIVE_SPECTATING_ERROR_BROADCAST_STOPPED = 0x80F20005,
  SCE_GAME_LIVE_SPECTATING_ERROR_AD_PLAYLIST_UPDATE = 0x80F20101,
  SCE_GAME_LIVE_SPECTATING_ERROR_AD_PLAYLIST_PARSE = 0x80F20102,
  SCE_GAME_LIVE_SPECTATING_ERROR_AD_PLAYLIST_NO_NEXT_AD = 0x80F20103,
  SCE_GAME_LIVE_SPECTATING_ERROR_AD_ADITEM_UPDATE = 0x80F20104,
  SCE_GAME_LIVE_SPECTATING_ERROR_AD_HTTP_REQUEST_CANCELED = 0x80F20105,
  SCE_GAME_LIVE_SPECTATING_ERROR_AD_HTTP_REQUEST_TIMEOUT = 0x80F20106,
  SCE_GAME_LIVE_SPECTATING_ERROR_AD_HTTP_REQUEST_ERROR = 0x80F20107,
  SCE_GAME_LIVE_SPECTATING_ERROR_PROVIDER_SETTINGS_READ_ERROR = 0x80F20108,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_NAME_RESOLUTION_FAILURE = 0x80F20201,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_CONNECT_FAILURE = 0x80F20202,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_RECEIVE_FAILURE = 0x80F20203,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_SEND_FAILURE = 0x80F20204,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_PIPELINE_FAILURE = 0x80F20205,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_REQUEST_CANCELED = 0x80F20206,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_PROTOCOL_ERROR = 0x80F20207,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_CONNECTION_CLOSED = 0x80F20208,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_TRUST_FAILURE = 0x80F20209,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_SECURE_CHANNEL_FAILURE = 0x80F2020A,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_SERVER_PROTOCOL_VIOLATION = 0x80F2020B,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_KEEP_ALIVE_FAILURE = 0x80F2020C,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_PENDING = 0x80F2020D,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_TIMEOUT = 0x80F2020E,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_PROXY_NAME_RESOLUTION_FAILURE = 0x80F2020F,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_UNKNOWN_ERROR = 0x80F20210,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_MESSAGE_LENGTH_LIMIT_EXCEEDED = 0x80F20211,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_CACHE_ENTRY_NOT_FOUND = 0x80F20212,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_REQUEST_PROHITITED_BY_CACHE_POLICY = 0x80F20213,
  SCE_GAME_LIVE_SPECTATING_ERROR_WEB_REQUEST_REQUEST_PROHIBITED_BY_PROXY = 0x80F20214,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_INVALID_PARAM = 0x80F20501,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_INVALID_PARAM_COREIF = 0x80F20502,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_INVALID_STATUS = 0x80F20503,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_INVALID_STATUS_COREIF = 0x80F20504,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_STREAM_FULL = 0x80F20505,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_NOT_EXIST_STREAMID = 0x80F20506,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_VIDEOCORE_FUNCTION = 0x80F20507,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_SCE_FUNCTION = 0x80F20508,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_KERNEL_FUNCTION = 0x80F20509,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_IPMI = 0x80F2050A,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_IPMI_COREIF = 0x80F2050B,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_NO_ALLOCATE_MEMORY = 0x80F2050C,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_UNUSABLE_THIS_API = 0x80F2050D,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_RESULT_TIMEOUT = 0x80F2050E,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_REQUEST_FULL = 0x80F2050F,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_NOT_EXIST_REQUESTID = 0x80F20510,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_REGISTERED_CALLBACK_FULL = 0x80F20511,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_RESOURCE_HANDLE_FULL = 0x80F20512,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_NOT_EXIST_RESOURCE_HANDLE = 0x80F20513,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_NO_DECODER_RESOURCE = 0x80F20514,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_STREAM_SUSPENDED = 0x80F20515,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_STREAM_ABORTED = 0x80F20516,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_INTERNAL = 0x80F20517,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_INVALID_PARAM_CORE = 0x80F20518,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_INVALID_STATUS_CORE = 0x80F20519,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_NOT_EXIST_STREAM = 0x80F2051A,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_NOPLAYABLE = 0x80F2051B,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_STOP = 0x80F2051C,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_SCE_FUNCTION_CORE = 0x80F2051D,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_KERNEL_FUNCTION_CORE = 0x80F2051E,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_IPMI_CORE = 0x80F2051F,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_ENABLE_RAZOR = 0x80F20520,
  SCE_GAME_LIVE_SPECTATING_ERROR_VIDEOCORE_INTERNAL_CORE = 0x80F20521,
  SCE_GAME_LIVE_BROADCASTING_ERROR_FAVORITE_MAX_USTREAM = 0x80F20522,
  SCE_GAME_LIVE_BROADCASTING_ERROR_FAVORITE_MAX_TWITCH = 0x80F20523,
  SCE_GAME_LIVE_BROADCASTING_ERROR_COMMUNITY_MAX_NICO = 0x80F20524,
  SCE_GAME_LIVE_SPECTATING_ERROR_HTMLVIDEOPLAYER_INVALID_PARAM = 0x80F20525,
  SCE_GAME_LIVE_SPECTATING_ERROR_HTMLVIDEOPLAYER_CANNOT_PLAY = 0x80F20526,
  SCE_GAME_LIVE_SPECTATING_ERROR_HTMLVIDEOPLAYER_VIDEO_NOT_FOUND = 0x80F20527,
  SCE_GAME_LIVE_SPECTATING_ERROR_HTMLVIDEOPLAYER_NOT_ALLOWED_PLAYBACK = 0x80F20528,
  SCE_ERROR_TABLE_ERROR_INVALID_POINTER = 0x80F30000,
  SCE_AUTO_MOUNTER_ERROR_NOMEM = 0x80F40001,
  SCE_AUTO_MOUNTER_ERROR_INVAL = 0x80F40002,
  SCE_AUTO_MOUNTER_ERROR_BUSY = 0x80F40003,
  SCE_AUTO_MOUNTER_ERROR_NOENT = 0x80F40004,
  SCE_AUTO_MOUNTER_ERROR_NOTSUP = 0x80F40005,
  SCE_AUTO_MOUNTER_ERROR_IO = 0x80F40006,
  SCE_AUTO_MOUNTER_ERROR_NODEV = 0x80F40007,
  SCE_AUTO_MOUNTER_ERROR_SRCH = 0x80F40008,
  SCE_AUTO_MOUNTER_ERROR_STATUS = 0x80F40009,
  SCE_AUTO_MOUNTER_ERROR_NXIO = 0x80F4000A,
  SCE_AUTO_MOUNTER_ERROR_IO_MNT = 0x80F4000B,
  SCE_AUTO_MOUNTER_ERROR_INVAL_MNT = 0x80F4000C,
  SCE_AUTO_MOUNTER_ERROR_LOGIC = 0x80F4000D,
  SCE_AUTO_MOUNTER_ERROR_EXT_USB1 = 0x80F4000E,
  SCE_AUTO_MOUNTER_ERROR_EXT_USB2 = 0x80F4000F,
  SCE_AUTO_MOUNTER_ERROR_EXT_USB3 = 0x80F40010,
  SCE_AUTO_MOUNTER_ERROR_EXT_USB4 = 0x80F40011,
  SCE_AUTO_MOUNTER_ERROR_EXT_USB7 = 0x80F40012,
  SCE_AUTO_MOUNTER_ERROR_EXT_USB9 = 0x80F40013,
  SCE_USB_STORAGE_ERROR_EACCES = 0x80F40014,
  SCE_USB_STORAGE_ERROR_ENFILE = 0x80F40015,
  SCE_AUTO_MOUNTER_ERROR_BADF = 0x80F40016,
  SCE_AUTO_MOUNTER_ERROR_SMALL_CAPACITY = 0x80F40017,
  SCE_AUTO_MOUNTER_ERROR_LOW_THROUGHPUT = 0x80F40018,
  SCE_AUTO_MOUNTER_ERROR_MOUNT_POINT_BUSY = 0x80F40019,
  SCE_AUTO_MOUNTER_ERROR_INVALID_FORMAT_NG_ENCRYPT = 0x80F4001A,
  SCE_AUTO_MOUNTER_ERROR_INVALID_FORMAT_NO_ENCRYPT = 0x80F4001B,
  SCE_AUTO_MOUNTER_ERROR_INVALID_FORMAT = 0x80F4001C,
  SCE_AUTO_MOUNTER_ERROR_ILLEGALLY_EJECTED = 0x80F4001D,
  SCE_AUTO_MOUNTER_ERROR_NEWER_HDD_FORMAT_VERSION = 0x80F4001E,
  SCE_AUTO_MOUNTER_ERROR_EXT_USB10 = 0x80F4001F,
  SCE_AUTO_MOUNTER_ERROR_MOUNT_EINVAL = 0x80F40020,
  SCE_AUTO_MOUNTER_ERROR_MOUNT_EIO = 0x80F40021,
  SCE_AUTO_MOUNTER_ERROR_MOUNT_ENXIO = 0x80F40022,
  SCE_AUTO_MOUNTER_ERROR_MOUNT_EAUTH = 0x80F40023,
  SCE_AUTO_MOUNTER_ERROR_NO_DISC = 0x80F40024,
  SCE_AUTO_MOUNTER_ERROR_NG_ENCRYPT_INTERMEDIATE_HUB = 0x80F40025,
  SCE_AUTO_MOUNTER_ERROR_PROTECTED = 0x80F40026,
  SCE_AUTO_MOUNTER_ERROR_NG_ENCRYPT_CAPACITY_OUT_OF_RANGE = 0x80F40027,
  SCE_AUTO_MOUNTER_ERROR_NG_ENCRYPT_NOT_USB30 = 0x80F40028,
  SCE_AUTO_MOUNTER_ERROR_INVALID_FORMAT_NG_ENCRYPT2 = 0x80F40029,
  SCE_AUTO_MOUNTER_ERROR_SUSRES_BUSY = 0x80F40030,
  SCE_LSDB_ERROR_FATAL = 0x80F50000,
  SCE_LSDB_ERROR_INVALID_ARG = 0x80F50001,
  SCE_LSDB_ERROR_NO_MEMORY = 0x80F50002,
  SCE_LSDB_ERROR_STATE = 0x80F50003,
  SCE_LSDB_ERROR_EXIST = 0x80F50004,
  SCE_LSDB_ERROR_NOT_FOUND = 0x80F50005,
  SCE_LSDB_ERROR_LIMIT = 0x80F50006,
  SCE_LSDB_ERROR_INVALID_OP = 0x80F50007,
  SCE_LSDB_ERROR_NO_EVENT_ID = 0x80F50008,
  SCE_LSDB_ERROR_NO_TITLE_ID = 0x80F50009,
  SCE_LSDB_ERROR_NO_TYPE = 0x80F5000A,
  SCE_LSDB_ERROR_INVALID_INDEX = 0x80F5000B,
  SCE_LSDB_ERROR_INVALID_LAYOUT = 0x80F5000C,
  SCE_LSDB_ERROR_NO_ROW_ID = 0x80F5000D,
  SCE_LSDB_ERROR_NO_ONLINE_ID = 0x80F5000E,
  SCE_LSDB_ERROR_NO_COMMENT_ID = 0x80F5000F,
  SCE_LSDB_ERROR_NO_TIME = 0x80F50010,
  SCE_LSDB_ERROR_INVALID_KEY = 0x80F50011,
  SCE_LSDB_ERROR_BUSY = 0x80F50012,
  SCE_LSDB_ERROR_NOT_SUPPORTED = 0x80F50013,
  SCE_LSDB_ERROR_ACTIVITY = 0x80F50020,
  SCE_LSDB_ERROR_ACTIVITY_INVALID_PARAM = 0x80F50021,
  SCE_LSDB_ERROR_ACTIVITY_ALREADY_CANCELED = 0x80F50022,
  SCE_LSDB_ERROR_ACTIVITY_NOT_INITIALIZED = 0x80F50023,
  SCE_LSDB_ERROR_ACTIVITY_SYNC_TIMEOUT = 0x80F50024,
  SCE_LSDB_ERROR_ACTIVITY_GET_NETWORK_TIME = 0x80F50025,
  SCE_LSDB_ERROR_ACTIVITY_INVALID_MESSAGE = 0x80F50026,
  SCE_LSDB_ERROR_ACTIVITY_GET_INFO = 0x80F50027,
  SCE_LSDB_ERROR_ACTIVITY_STATUS_DESTROYED = 0x80F50028,
  SCE_LSDB_ERROR_DB_LOCALE = 0x80F50040,
  SCE_LSDB_ERROR_DB_CLEARED = 0x80F50041,
  SCE_LSDB_ERROR_DB_SCHEMA = 0x80F50042,
  SCE_LSDB_ERROR_DB_VERSION = 0x80F50043,
  SCE_LSDB_ERROR_DB_EMPTY = 0x80F50044,
  SCE_LSDB_ERROR_DB_APPINFO_SCHEMA = 0x80F50045,
  SCE_LSDB_ERROR_DB_APPBROWSE_SCHEMA = 0x80F50046,
  SCE_LSDB_ERROR_DB_SAFEMODE = 0x80F50060,
  SCE_LSDB_ERROR_DB_CORRUPT = 0x80F50061,
  SCE_LSDB_ERROR_DB_SCHEMA_AND_VERSION = 0x80F50062,
  SCE_LSDB_ERROR_DB_LOCALE_AND_VERSION = 0x80F50063,
  SCE_LSDB_ERROR_DB_NOT_ENABLED = 0x80F50064,
  SCE_LSDB_ERROR_DB_RECOVERING = 0x80F50065,
  SCE_LSDB_ERROR_DB_APPINFO_KEY = 0x80F50066,
  SCE_LSDB_ERROR_DB_KEY_AND_VERSION = 0x80F50067,
  SCE_LSDB_ERROR_DB_KEY_AND_SCHEMA = 0x80F50068,
  SCE_LSDB_ERROR_DB_KEY_AND_LOCALE = 0x80F50069,
  SCE_LSDB_ERROR_DB_KEY_AND_SCHEMA_AND_VERSION = 0x80F5006A,
  SCE_LSDB_ERROR_DB_KEY_AND_LOCALE_AND_VERSION = 0x80F5006B,
  SCE_LSDB_ERROR_USER_CONTENT_EVENT_LISTENER_INVALID_COMMAND = 0x80F5006C,
  SCE_LSDB_ERROR_USER_CONTENT_MANAGER_INVALID_PARAM = 0x80F5006D,
  SCE_LSDB_ERROR_USER_CONTENT_MANAGER_GETINSTALL_STATUS_RESULT_INVALID_VALUE = 0x80F5006E,
  SCE_LSDB_ERROR_USER_CONTENT_MANAGER_GETLINK_STATUS_RESULT_INVALID_VALUE = 0x80F5006F,
  SCE_LSDB_ERROR_USER_CONTENT_MANAGER_USER_INFO_INVALID_VALUE = 0x80F50070,
  SCE_LSDB_ERROR_USER_CONTENT_MANAGER_CONTENT_INFO_NOT_FOUND = 0x80F50071,
  SCE_LSDB_ERROR_USER_CONTENT_MANAGER_CONTENT_FLAG_NOT_FOUND = 0x80F50072,
  SCE_LSDB_ERROR_CORRUPTION_USER_DATA = 0x80F50073,
  SCE_LSDB_ERROR_WAITING_RECOVERY = 0x80F50074,
  SCE_LSDB_ERROR_CMD_CANCELED = 0x80F50075,
  SCE_LSDB_ERROR_CMD_EMPTY = 0x80F50076,
  SCE_NOTIFICATION_RECEIVER_ERROR_INVALID_ARGUMENT = 0x80F50101,
  SCE_NOTIFICATION_RECEIVER_ERROR_NO_MEMORY = 0x80F50102,
  SCE_NOTIFICATION_RECEIVER_ERROR_SERVER = 0x80F50103,
  SCE_NOTIFICATION_RECEIVER_ERROR_NOT_INITIALIZED = 0x80F50104,
  SCE_NOTIFICATION_RECEIVER_ERROR_INVALID_DATA = 0x80F50105,
  SCE_NOTIFICATION_RECEIVER_ERROR_CORRUPTED_USER_STATE = 0x80F50106,
  SCE_NOTIFICATION_RECEIVER_ERROR_ALREADY_INIT = 0x80F50107,
  SCE_NOTIFICATION_RECEIVER_ERROR_SQLITE = 0x80F50108,
  SCE_NOTIFICATION_RECEIVER_ERROR_NP = 0x80F50109,
  SCE_NOTIFICATION_SERVER_ERROR_INVALID_ARGUMENT = 0x80F50131,
  SCE_NOTIFICATION_SERVER_ERROR_NO_MEMORY = 0x80F50132,
  SCE_NOTIFICATION_SERVER_ERROR_NOT_INITIALIZED = 0x80F50133,
  SCE_NOTIFICATION_SERVER_ERROR_INVALID_DATA = 0x80F50134,
  SCE_NOTIFICATION_SERVER_ERROR_ALREADY_INIT = 0x80F50135,
  SCE_NOTIFICATION_SERVER_ERROR_SQLITE = 0x80F50136,
  SCE_NOTIFICATION_INIT_ERROR_SQLITE = 0x80F50161,
  SCE_NOTIFICATION_DB_ERROR_INVALID = 0x80F50191,
  SCE_NOTIFICATION_DB_ERROR_NAMETOOLONG = 0x80F50192,
  SCE_APPDB_RETRIEVER_ERROR_FATAL = 0x80F50200,
  SCE_APPDB_RETRIEVER_ERROR_INVALID_ARG = 0x80F50201,
  SCE_APPDB_RETRIEVER_ERROR_STATE = 0x80F50202,
  SCE_APPDB_RETRIEVER_ERROR_LIMIT = 0x80F50203,
  SCE_APPDB_RETRIEVER_ERROR_RESPONSE_VALUE_INVALID = 0x80F50204,
  SCE_MESSAGES_ERROR_GENERAL = 0x80F60101,
  SCE_MESSAGES_ERROR_JSON_PARSE_FAILED = 0x80F60102,
  SCE_MESSAGES_ERROR_GROUP_NOT_FOUND = 0x80F60103,
  SCE_MESSAGES_ERROR_SEND_MESSAGE = 0x80F60201,
  SCE_MESSAGES_ERROR_CHANGE_TITLE = 0x80F60202,
  SCE_MESSAGES_ERROR_ADD_PLAYER = 0x80F60203,
  SCE_MESSAGES_ERROR_NO_MICROPHONE = 0x80F60204,
  SCE_MESSAGES_ERROR_RECORD_VOICE = 0x80F60205,
  SCE_MESSAGES_ERROR_DELETE_MESSAGE = 0x80F60206,
  SCE_MESSAGES_ERROR_MAX_MEMBERS = 0x80F60207,
  SCE_MESSAGES_ERROR_DB_CORRUPTED = 0x80F60208,
  SCE_MESSAGES_ERROR_PSCAMERA_MUTE = 0x80F60209,
  SCE_MESSAGES_ERROR_STORE_LINK = 0x80F6020A,
  SCE_MESSAGES_ERROR_ALL_BLOCKED = 0x80F6020B,
  SCE_MESSAGES_ERROR_FILE_IO = 0x80F61101,
  SCE_MESSAGES_ERROR_FILE_SIZE = 0x80F61102,
  SCE_MESSAGES_ERROR_FILE_UNSUPPORT = 0x80F61103,
  SCE_MESSAGES_ERROR_FILE_CORRUPTED = 0x80F61104,
  SCE_MESSAGES_ERROR_NETWORK = 0x80F61201,
  SCE_MESSAGES_ERROR_PSN = 0x80F61202,
  SCE_VOICEMSG_ERROR_INTERNAL = 0x80F61300,
  SCE_VOICEMSG_ERROR_CANCELED = 0x80F61301,
  SCE_VOICEMSG_ERROR_BUSY = 0x80F61302,
  SCE_VOICEMSG_ERROR_UNKNOWN_TASK = 0x80F61303,
  SCE_VOICEMSG_ERROR_INVALID_PARAM = 0x80F61304,
  SCE_VOICEMSG_ERROR_MIC_DISCONNECTED = 0x80F61305,
  SCE_VOICEMSG_ERROR_MIC_MUTE = 0x80F61306,
  SCE_VOICEMSG_ERROR_FATAL = 0x80F61307,
  SCE_MESSAGES_ERROR_INITIALIZE = 0x80F69001,
  SCE_MESSAGES_ERROR_OUT_OF_MEMORY = 0x80F69002,
  SCE_MESSAGES_ERROR_INVALID_PARAM = 0x80F69003,
  SCE_MESSAGES_ERROR_DBACCESSLIB_INITIALIZE = 0x80F69004,
  SCE_AUDIODECCPU_ERROR_API_FAIL = 0x80F70000,
  SCE_AUDIODECCPU_ERROR_INVALID_TYPE = 0x80F70001,
  SCE_AUDIODECCPU_ERROR_ARG = 0x80F70002,
  SCE_AUDIODECCPU_ERROR_INVALID_SIZE = 0x80F70003,
  SCE_AUDIODECCPU_ERROR_INVALID_PARAM_SIZE = 0x80F70004,
  SCE_AUDIODECCPU_ERROR_INVALID_BSI_INFO_SIZE = 0x80F70005,
  SCE_AUDIODECCPU_ERROR_INVALID_AU_INFO_SIZE = 0x80F70006,
  SCE_AUDIODECCPU_ERROR_INVALID_PCM_ITEM_SIZE = 0x80F70007,
  SCE_AUDIODECCPU_ERROR_INVALID_RESOURCE_SIZE = 0x80F70008,
  SCE_AUDIODECCPU_ERROR_INVALID_CTRL_POINTER = 0x80F70009,
  SCE_AUDIODECCPU_ERROR_INVALID_PARAM_POINTER = 0x80F7000A,
  SCE_AUDIODECCPU_ERROR_INVALID_BSI_INFO_POINTER = 0x80F7000B,
  SCE_AUDIODECCPU_ERROR_INVALID_AU_INFO_POINTER = 0x80F7000C,
  SCE_AUDIODECCPU_ERROR_INVALID_PCM_ITEM_POINTER = 0x80F7000D,
  SCE_AUDIODECCPU_ERROR_INVALID_RESOURCE_POINTER = 0x80F7000E,
  SCE_AUDIODECCPU_ERROR_INVALID_AU_POINTER = 0x80F7000F,
  SCE_AUDIODECCPU_ERROR_INVALID_PCM_POINTER = 0x80F70010,
  SCE_AUDIODECCPU_ERROR_INVALID_WORK_MEM_POINTER = 0x80F70011,
  SCE_AUDIODECCPU_ERROR_INVALID_WORD_LENGTH = 0x80F70012,
  SCE_AUDIODECCPU_ERROR_INVALID_AU_SIZE = 0x80F70013,
  SCE_AUDIODECCPU_ERROR_INVALID_PCM_SIZE = 0x80F70014,
  SCE_AUDIODECCPU_ERROR_INVALID_WORK_MEM_SIZE = 0x80F70015,
  SCE_AUDIODECCPU_ERROR_LPCM_FATAL = 0x80F70100,
  SCE_AUDIODECCPU_ERROR_M4AAC_INVALID_SAMPLING_FREQ = 0x80F70300,
  SCE_AUDIODECCPU_ERROR_M4AAC_INVALID_MAX_CHANNELS = 0x80F70301,
  SCE_AUDIODECCPU_ERROR_M4AAC_INVALID_ENABLE_HEAAC = 0x80F70302,
  SCE_AUDIODECCPU_ERROR_M4AAC_INVALID_CONFIG_NUMBER = 0x80F70303,
  SCE_AUDIODECCPU_ERROR_M4AAC_INVALID_DOWNMIX_MODE = 0x80F70304,
  SCE_AUDIODECCPU_ERROR_M4AAC_INSUFFICIENT_BUFFER = 0x80F70305,
  SCE_AUDIODECCPU_ERROR_M4AAC_INVALID_ENABLE_NONDELAY_OUTPUT = 0x80F70306,
  SCE_AUDIODECCPU_ERROR_M4AAC_INVALID_SURROUND_CHANNEL_INTERLEAVE_ORDER = 0x80F70307,
  SCE_AUDIODEC_CPU_ERROR_DDP_FAIL = 0x80F70500,
  SCE_AUDIODEC_CPU_ERROR_DDP_ARG = 0x80F70501,
  SCE_AUDIODEC_CPU_ERROR_DDP_MEM_FAIL = 0x80F70502,
  SCE_AUDIODEC_CPU_ERROR_DDP_CREATE_DEC_FAIL = 0x80F70503,
  SCE_AUDIODEC_CPU_ERROR_DDP_DECODE_FAIL = 0x80F70504,
  SCE_AUDIODEC_CPU_ERROR_DDP_CLEAR_CONTEXT_FAIL = 0x80F70505,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_INVALID_CHANNELS = 0x80F70C00,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_INVALID_SAMPLING_FREQ = 0x80F70C01,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_INVALID_VERSION = 0x80F70C02,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_INVALID_ID = 0x80F70C03,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_INVALID_DATA_SIZE = 0x80F70C04,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_INVALID_DATA_NAME = 0x80F70C05,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_INVALID_OUTPUT_FORMAT = 0x80F70C06,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_NOT_FOUND_HEADER = 0x80F70C07,
  SCE_AUDIODEC_CPU_ERROR_HEVAG_INVALID_LOOP_FLAG = 0x80F70C08,
  SCE_AUDIODEC_CPU_ERROR_ALAC_INVALID_PARAM_SIZE = 0x80F70D00,
  SCE_AUDIODEC_CPU_ERROR_ALAC_INVALID_NUM_OF_CHANNELS = 0x80F70D01,
  SCE_AUDIODEC_CPU_ERROR_ALAC_INVALID_SAMPLING_FREQUENCY = 0x80F70D02,
  SCE_AUDIODEC_CPU_ERROR_ALAC_INVALID_BIT_DEPTH = 0x80F70D03,
  SCE_AUDIODEC_CPU_ERROR_ALAC_INVALID_DECODE = 0x80F70D04,
  SCE_AUDIODEC_CPU_ERROR_ALAC_INVALID_BSI_INFO_SIZE = 0x80F70D05,
  SCE_AUDIODECCPU_ERROR_FLAC_INVALID_STREAM_INFO = 0x80F71100,
  SCE_SPEECH_RECOGNITION_ERROR_CREATE_FAIL = 0x80F90001,
  SCE_SPEECH_RECOGNITION_ERROR_INVALID_OPTION = 0x80F90002,
  SCE_SPEECH_RECOGNITION_ERROR_MEMORY_FAIL = 0x80F90003,
  SCE_SPEECH_RECOGNITION_ERROR_MEMORY_LEAK = 0x80F90004,
  SCE_SPEECH_RECOGNITION_ERROR_SAVE_CPR_FAIL = 0x80F90005,
  SCE_SPEECH_RECOGNITION_ERROR_COMPILE_FAIL = 0x80F90006,
  SCE_SPEECH_RECOGNITION_ERROR_GRAMMAR_FAIL = 0x80F90007,
  SCE_SPEECH_RECOGNITION_ERROR_START_FAIL = 0x80F90008,
  SCE_SPEECH_RECOGNITION_ERROR_INVALID_ARGUMENT = 0x80F90009,
  SCE_SPEECH_RECOGNITION_ERROR_RESOURCE_INSUFFICIENT = 0x80F9000A,
  SCE_SPEECH_RECOGNITION_ERROR_NOT_INITIALIZED = 0x80F9000B,
  SCE_SPEECH_RECOGNITION_ERROR_ALREADY_INITIALIZED = 0x80F9000C,
  SCE_SPEECH_RECOGNITION_ERROR_INVALID_RESULT = 0x80F9000D,
  SCE_SPEECH_RECOGNITION_ERROR_INVALID_OBJECT_POINTER = 0x80F9000E,
  SCE_SPEECH_RECOGNITION_ERROR_INVALID_ERROR_MESSAGE = 0x80F9000F,
  SCE_SPEECH_RECOGNITION_ERROR_API_CONFLICT = 0x80F90010,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL = 0x80F98000,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_MEMORY = 0x80F98001,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_NOT_INITIALIZED = 0x80F98003,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_CREATE = 0x80F98004,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_LOAD_INFO = 0x80F98005,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_BAD_INFO = 0x80F98008,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_LANGUAGE = 0x80F98009,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_WORD_LENGTH = 0x80F9800D,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_ENCODING = 0x80F9800E,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_FOUND_SPECIAL_CHAR = 0x80F9800F,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_FIND_DIGITS = 0x80F98010,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_ACRONYM = 0x80F98011,
  SCE_SPEECH_RECOGNITION_ERROR_G2P_FAIL_PRONUNCIATION_BUILDING = 0x80F98017,
  SCE_SPEECH_RECOGNITION_ERROR_GRAMMAR_EDIT_FAIL = 0x80F9A001,
  SCE_DTS_ENC_ERROR_INTERNAL_ERROR = 0x80FA0000,
  SCE_DTS_ENC_ERROR_INVALID_HANDLE = 0x80FA0001,
  SCE_DTS_ENC_ERROR_INVALID_POINTER = 0x80FA0002,
  SCE_DTS_ENC_ERROR_INVALID_NUM_CHANNELS = 0x80FA0003,
  SCE_DTS_ENC_ERROR_INVALID_SAMPLE_RATE = 0x80FA0004,
  SCE_DTS_ENC_ERROR_INVALID_BIT_RATE = 0x80FA0005,
  SCE_DTS_ENC_ERROR_INVALID_INPUT_FORMAT = 0x80FA0006,
  SCE_DTS_ENC_ERROR_INVALID_OUTPUT_FORMAT = 0x80FA0007,
  SCE_DTS_ENC_ERROR_NO_MORE_INSTANCES = 0x80FA0008,
  SCE_DTS_ENC_ERROR_NOT_IN_ENCODING = 0x80FA0009,
  SCE_JSEX_ERROR_INVALID_PARAM = 0x80FB0001,
  SCE_JSEX_ERROR_PAGE_NOT_FOUND = 0x80FB0002,
  SCE_JSEX_ERROR_INVALID_JSON_STRING = 0x80FB0003,
  SCE_JSEX_ERROR_INVALID_SCENE = 0x80FB0004,
  SCE_JSEX_ERROR_DECRIPT_FAIL = 0x80FB0005,
  SCE_JSEX_ERROR_BUSY = 0x80FB0006,
  SCE_JSEX_ERROR_INTERNAL = 0x80FB0007,
  SCE_JSEX_ERROR_UNKNOWN_API = 0x80FB0008,
  SCE_JSEX_ERROR_UNSUPPORTED_FILE_SIZE = 0x80FB0009,
  SCE_JSEX_ERROR_INVALID_TOKEN = 0x80FB000A,
  SCE_JSEX_ERROR_READ_FAIL = 0x80FB000B,
  SCE_VU_ERROR_INVALID_PARAM = 0x80FB0101,
  SCE_VU_ERROR_EXTERNAL_HDCP_DISABLED = 0x80FBF001,
  SCE_REMOTEPLAY_ERROR_INVALID_ARGS = 0x80FC0001,
  SCE_REMOTEPLAY_ERROR_OUT_OF_MEMORY = 0x80FC0002,
  SCE_REMOTEPLAY_ERROR_ALREADY_INITIALIZED = 0x80FC0003,
  SCE_REMOTEPLAY_ERROR_NOT_INITIALIZED = 0x80FC0004,
  SCE_REMOTEPLAY_ERROR_FATAL = 0x80FC0005,
  SCE_REMOTEPLAY_ERROR_INVALID_STATE = 0x80FC0101,
  SCE_REMOTEPLAY_ERROR_NOT_CONNECTED = 0x80FC0102,
  SCE_REMOTEPLAY_ERROR_REGISTERD = 0x80FC0103,
  SCE_REMOTEPLAY_ERROR_NO_EVENT = 0x80FC0104,
  SCE_REMOTEPLAY_ERROR_INTRENAL_CANCEL = 0x80FC1001,
  SCE_REMOTEPLAY_ERROR_INTRENAL_TIMEOUT = 0x80FC1002,
  SCE_REMOTEPLAY_ERROR_INTERNAL_FATAL = 0x80FC1003,
  SCE_REMOTEPLAY_ERROR_INTERNAL_INVALID_VALUE = 0x80FC1004,
  SCE_REMOTEPLAY_ERROR_INTERNAL_NOT_FOUND = 0x80FC1005,
  SCE_REMOTEPLAY_ERROR_INTERNAL_BUSY = 0x80FC1006,
  SCE_REMOTEPLAY_ERROR_INTERNAL_NOT_INITIALIZED = 0x80FC1007,
  SCE_REMOTEPLAY_ERROR_INTERNAL_BUFFER_OVERFLOW = 0x80FC1008,
  SCE_REMOTEPLAY_ERROR_INTERNAL_READ_RESUME_DATA = 0x80FC1009,
  SCE_REMOTEPLAY_ERROR_INTERNAL_CHANGE_STATE = 0x80FC100A,
  SCE_REMOTEPLAY_ERROR_INTERNAL_RETRY = 0x80FC100B,
  SCE_REMOTEPLAY_ERROR_INTERNAL_NETWORK_ILLEGAL_DATA = 0x80FC1011,
  SCE_REMOTEPLAY_ERROR_INTERNAL_NETWORK_TIMEOUT = 0x80FC1012,
  SCE_REMOTEPLAY_ERROR_INTERNAL_NETWORK_CLOSED = 0x80FC1013,
  SCE_REMOTEPLAY_ERROR_INTERNAL_NETWORK_SEND = 0x80FC1014,
  SCE_REMOTEPLAY_ERROR_INTERNAL_AUTHENTICATION = 0x80FC1021,
  SCE_REMOTEPLAY_ERROR_INTERNAL_UNMATCHED_VERSION = 0x80FC1022,
  SCE_REMOTEPLAY_ERROR_INTERNAL_DISAPPROVAL = 0x80FC1023,
  SCE_REMOTEPLAY_ERROR_BASE64_INVALID_CHARACTER = 0x80FC1031,
  SCE_REMOTEPLAY_ERROR_BASE64_INVALID_LENGTH = 0x80FC1032,
  SCE_REMOTEPLAY_ERROR_INTERNAL_NP_ONLINE_ID_INVALID = 0x80FC1040,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REGIST_DEVICE_MISS = 0x80FC1041,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REGIST_DEVICE_LIMITED = 0x80FC1042,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REGIST_COMMAND_INVLID = 0x80FC1043,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REGIST_COMMAND_DATA_INVLID = 0x80FC1044,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REGIST_NETWORK_CLOSED = 0x80FC1045,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REGIST_NETWORK_TIMEOUT = 0x80FC1046,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REGIST_PINCODE_INVALID = 0x80FC1047,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REMOTEPLAY_CONNECT_LIMITED = 0x80FC1050,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REMOTEPLAY_VERSION_UNMATCH = 0x80FC1051,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REMOTEPLAY_SETTING_INVALID = 0x80FC1052,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REMOTEPLAY_CONNECT_INVALID = 0x80FC1053,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REMOTEPLAY_CONNECT_INVALID_BY_RESTART = 0x80FC1054,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REMOTEPLAY_CONNECT_INVALID_BY_DISCPLAYER = 0x80FC1055,
  SCE_REMOTEPLAY_ERROR_INTERNAL_REMOTEPLAY_CONNECT_INVALID_BY_NON_60HZ = 0x80FC1056,
  SCE_MUSICCORE_SERVER_ERROR_INVALID_PARAM = 0x80FD0001,
  SCE_MUSICCORE_SERVER_ERROR_NO_MEMORY = 0x80FD0002,
  SCE_MUSICCORE_SERVER_ERROR_MUSIC_CORE_SERVER_NOT_LAUNCHED = 0x80FD0003,
  SCE_MUSICCORE_SERVER_ERROR_MUSIC_CORE_UNAVAILABLE = 0x80FD0004,
  SCE_MUSICCORE_SERVER_ERROR_MUSIC_CORE_NOT_CONNECTED = 0x80FD0005,
  SCE_MUSICCORE_SERVER_ERROR_BUSY = 0x80FD0006,
  SCE_MUSICCORE_SERVER_ERROR_CORE_FUNCTION_NOT_SET = 0x80FD0007,
  SCE_MUSICCORE_SERVER_ERROR_INTERNAL = 0x80FD0008,
  SCE_MUSICCORE_SERVER_ERROR_INVALID_CALL = 0x80FD0009,
  SCE_MUSICCORE_SERVER_ERROR_NOT_SUPPORTED = 0x80FD000A,
  SCE_MUSICCORE_SERVER_ERROR_EVENT_RESPONSE_QUEUE_EMPTY = 0x80FD000B,
  SCE_MUSICCORE_SERVER_ERROR_NOT_INSTALLED = 0x80FD000C,
  SCE_MUSICCORE_SERVER_ERROR_NOT_LOADED = 0x80FD000D,
  SCE_MUSICCORE_SERVER_ERROR_UNAVAILABLE = 0x80FD000E,
  SCE_MUSICCORE_SERVER_ERROR_MUSIC_CORE_PROHIBITED = 0x80FD000F,
  SCE_MUSICCORE_SERVER_ERROR_MUSIC_CPU_BUSY = 0x80FD0010,
  SCE_MUSICCORE_SERVER_ERROR_MUSIC_CORE_SERVER_BUSY = 0x80FD0011,
  SCE_MUSICCORE_SERVER_ERROR_NEED_PATCH_INSTALL = 0x80FD0012,
  SCE_MUSICCORE_SERVER_ERROR_NEED_SYSTEM_UPDATE = 0x80FD0013,
  SCE_MUSICCORE_SERVER_ERROR_MESSAGE_QUEUE_EMPTY = 0x80FD0014,
  SCE_MUSICCORE_SERVER_ERROR_NOT_PRIVILEGED_CALL = 0x80FD0015,
  SCE_MUSICCORE_SERVER_ERROR_OTHER_MUSIC_APP_IN_FG = 0x80FD0016,
  SCE_MUSICCORE_CORE_ERROR_FATAL = 0x80FD0081,
  SCE_MUSICCORE_CORE_ERROR_INVALID_PARAM = 0x80FD0082,
  SCE_MUSICCORE_CORE_ERROR_NO_MEMORY = 0x80FD0083,
  SCE_MUSICCORE_CORE_ERROR_ILLEGAL_SIZE = 0x80FD0084,
  SCE_MUSICCORE_CORE_ERROR_NOT_FOUND = 0x80FD0085,
  SCE_MUSICCORE_CORE_ERROR_INVALID_CALL = 0x80FD0086,
  SCE_MUSICCORE_CORE_ERROR_HDCP_DISABLED = 0x80FD0087,
  SCE_MUSICCORE_CORE_ERROR_NOT_PREPARED = 0x80FD0088,
  SCE_MUSICCORE_CORE_ERROR_TRIGGER_EVENT_BUSY = 0x80FD0089,
  SCE_MUSICCORE_SERVERCONTROLLER_ERROR_NOT_INITIALIZED = 0x80FD0100,
  SCE_MUSICCORE_SERVERCONTROLLER_ERROR_CORE_NOT_LAUNCHED = 0x80FD0101,
  SCE_MUSICCORE_SERVERCONTROLLER_ERROR_EMPTY = 0x80FD0102,
  SCE_MUSICCORE_SERVERCONTROLLER_ERROR_CPU_BUDGET_UNAVAILABLE = 0x80FD0103,
  SCE_MUSICCORE_SERVERCONTROLLER_ERROR_NEED_SYSTEM_UPDATE = 0x80FD0104,
  SCE_MUSICCORE_SERVERCONTROLLER_ERROR_OTHER_MUSIC_APP_IN_FG = 0x80FD0105,
  SCE_MUSICCORE_SERVERCONTROLLER_ERROR_NEED_PATCH_INSTALL = 0x80FD0106,
  SCE_MUSICCORE_SERVERCONTROLLER_ERROR_MUSIC_CORE_UNAVAILABLE = 0x80FD0107,
  SCE_MESSAGES_CORE_ERROR_INTERNAL = 0x80FE0001,
  SCE_MESSAGES_CORE_ERROR_MEMORY_ERROR = 0x80FE0002,
  SCE_MESSAGES_CORE_ERROR_ALREADY_EXIST = 0x80FE0003,
  SCE_TROPHY_ERROR_UNKNOWN = 0x80FF0000,
  SCE_TROPHY_ERROR_OUT_OF_MEMORY = 0x80FF0001,
  SCE_TROPHY_ERROR_NO_IMPL = 0x80FF0002,
  SCE_TROPHY_ERROR_JOB_QUEUE_INVALID_STATE = 0x80FF0003,
  SCE_TROPHY_ERROR_CANNOT_ENQUEUE = 0x80FF0004,
  SCE_TROPHY_ERROR_ABORTED = 0x80FF0005,
  SCE_TROPHY_ERROR_NOT_INITIALIZED_NS_CONTEXT = 0x80FF0006,
  SCE_TROPHY_ERROR_UNKNOWN_SERVER_RESPONSE = 0x80FF0007,
  SCE_TROPHY_ERROR_KEY_NOT_FOUND_IN_JSON = 0x80FF0008,
  SCE_TROPHY_ERROR_GET_VALUE_IN_JSON = 0x80FF0009,
  SCE_TROPHY_ERROR_INVALID_JSON_FORMAT = 0x80FF000A,
  SCE_TROPHY_ERROR_DISK_FULL = 0x80FF000B,
  SCE_TROPHY_ERROR_SQLITE_ERROR = 0x80FF000C,
  SCE_TROPHY_ERROR_NSDB_TITLE_NOT_FOUND = 0x80FF000D,
  SCE_TROPHY_ERROR_NSDB_GROUP_NOT_FOUND = 0x80FF000E,
  SCE_TROPHY_ERROR_NSDB_TROPHY_NOT_FOUND = 0x80FF000F,
  SCE_SHARE_BUTTON_ERROR_INVALID_ARGUMENT = 0x81010101,
  SCE_SHARE_BUTTON_ERROR_IO_OPERATION_FAILED = 0x81010102,
  SCE_SHARE_BUTTON_ERROR_IMAGING_OPERATION_FAILED = 0x81010103,
  SCE_SHARE_BUTTON_ERROR_YOUTUBE_SNS_API_FAILED = 0x81010104,
  SCE_SHARE_BUTTON_ERROR_YOUTUBE_DATA_API_FAILED = 0x81010105,
  SCE_SHARE_BUTTON_ERROR_HTTP_STATUS_ERROR = 0x81010106,
  SCE_SHARE_BUTTON_ERROR_REGISTRATION_OPERATION_FAILED = 0x81010107,
  SCE_SHARE_BUTTON_ERROR_RECORDING_TIME_TOO_SHORT = 0x81010108,
  SCE_SHARE_BUTTON_ERROR_CANCELED_BY_USER = 0x81010109,
  SCE_SHARE_BUTTON_ERROR_UNEXPECTED_CONTENT_REGISTRATION = 0x8101010A,
  SCE_SHARE_BUTTON_ERROR_UNSUPPORTED_OPERATION = 0x8101010B,
  SCE_SHARE_BUTTON_ERROR_NOT_ENOUGH_SPACE = 0x81010201,
  SCE_SHARE_BUTTON_ERROR_NOT_SIGNED_IN = 0x81010202,
  SCE_SHARE_BUTTON_ERROR_UNAVAILABLE_SERVICE = 0x81010203,
  SCE_SHARE_BUTTON_ERROR_NOT_ENOUGH_SPACE_FOR_SCREENSHOT = 0x81010204,
  SCE_SHARE_BUTTON_ERROR_NOT_ENOUGH_SPACE_FOR_TRIM = 0x81010205,
  SCE_SHARE_BUTTON_ERROR_YOUTUBE_ACCOUNT_NOT_BOUND = 0x81010206,
  SCE_SHARE_BUTTON_ERROR_CONTENT_NOT_FOUND = 0x81010207,
  SCE_SHARE_BUTTON_ERROR_APPLICATION_SUSPENDING = 0x81010208,
  SCE_FILE_SELECTOR_ERROR_GENERAL = 0x81020100,
  SCE_FILE_SELECTOR_ERROR_INVALID_ARGUMENT = 0x81020101,
  SCE_FILE_SELECTOR_ERROR_OUT_OF_MEMORY = 0x81020102,
  SCE_FILE_SELECTOR_ERROR_OUT_OF_RANGE = 0x81020103,
  SCE_FILE_SELECTOR_ERROR_NOT_FOUND = 0x81020104,
  SCE_FILE_SELECTOR_ERROR_NOT_SUPPORTED_DATA = 0x81020105,
  SCE_FILE_SELECTOR_ERROR_CAN_NOT_PLAY = 0x81020106,
  SCE_FILE_SELECTOR_ERROR_BROKEN_DATA = 0x81020107,
  SCE_FILE_SELECTOR_ERROR_PARENTAL_CONTROL_LOCK = 0x81020108,
  SCE_FILE_SELECTOR_ERROR_PREVIEW = 0x81020109,
  SCE_FILE_SELECTOR_ERROR_PREVIEW_NOT_ENOUGH_SYSTEM_MEMORY = 0x8102010A,
  SCE_FILE_SELECTOR_ERROR_NOT_FOUND_COPY_DIR = 0x8102010B,
  SCE_FILE_SELECTOR_ERROR_USB_STORAGE_CANNOT_ACCESS = 0x8102010C,
  SCE_FILE_SELECTOR_ERROR_USB_STORAGE_DISCONNECTED = 0x8102010D,
  SCE_FILE_SELECTOR_ERROR_NO_USB_STORAGE_DEVICE = 0x8102010E,
  SCE_FILE_SELECTOR_ERROR_ONLY_ONE_USB_STORAGE_SUPPORTED = 0x8102010F,
  SCE_FILE_SELECTOR_ERROR_NO_STRAGE_SPACE = 0x81020110,
  SCE_FILE_SELECTOR_ERROR_WRITE_ACCESS = 0x81020111,
  SCE_FILE_SELECTOR_ERROR_STRAGE_LOCKED = 0x81020112,
  SCE_FILE_SELECTOR_ERROR_COPY = 0x81020113,
  SCE_FILE_SELECTOR_ERROR_DELETE = 0x81020114,
  SCE_FILE_SELECTOR_ERROR_USB_STORAGE_LOCKED = 0x81020115,
  SCE_FILE_SELECTOR_ERROR_USB_USED_BY_OTHER_APP = 0x81020116,
  SCE_FILE_SELECTOR_ERROR_COPY_DENIED_BY_TITLE_BLOCK = 0x81020117,
  SCE_FILE_BROWSER_ERROR_GENERAL = 0x81030100,
  SCE_FILE_BROWSER_ERROR_INVALID_ARGUMENT = 0x81030101,
  SCE_FILE_BROWSER_ERROR_OUT_OF_MEMORY = 0x81030102,
  SCE_FILE_BROWSER_ERROR_OUT_OF_RANGE = 0x81030103,
  SCE_FILE_BROWSER_ERROR_NOT_FOUND = 0x81030104,
  SCE_FILE_BROWSER_ERROR_NOT_SUPPORTED_DATA = 0x81030105,
  SCE_FILE_BROWSER_ERROR_CAN_NOT_PLAY = 0x81030106,
  SCE_FILE_BROWSER_ERROR_BROKEN_DATA = 0x81030107,
  SCE_FILE_BROWSER_ERROR_PARENTAL_CONTROL_LOCK = 0x81030108,
  SCE_FILE_BROWSER_ERROR_INVALID_INPUT_LENGTH = 0x81030109,
  SCE_FILE_BROWSER_ERROR_NO_STORAGE_SPACE_TRIM = 0x8103010A,
  SCE_FILE_BROWSER_ERROR_NO_STORAGE_SPACE_TRIM_2 = 0x8103010B,
  SCE_VIDEO_EDIT_ERROR_GENERAL = 0x81040100,
  SCE_VIDEO_EDIT_ERROR_INVALID_ARGUMENT = 0x81040101,
  SCE_VIDEO_EDIT_ERROR_OUT_OF_MEMORY = 0x81040102,
  SCE_VIDEO_EDIT_ERROR_PREVIEW = 0x81040103,
  SCE_VIDEO_EDIT_ERROR_PREVIEW_NOT_ENOUGH_SYSTEM_MEMORY = 0x81040104,
  SCE_VIDEO_EDIT_ERROR_IMAGE_MANAGER = 0x81040105,
  SCE_VIDEO_EDIT_ERROR_TRANSCODE = 0x81040106,
  SCE_VIDEO_EDIT_ERROR_TRIMMING_VIDEO_CLIP_TOO_SHORT = 0x81040107,
  SCE_VIDEO_EDIT_ERROR_NO_STORAGE_SPACE_TAKE_SCREENSHOT = 0x81040108,
  SCE_VIDEO_EDIT_ERROR_NO_STORAGE_SPACE_TRIM = 0x81040109,
  SCE_VIDEO_EDIT_ERROR_UNSUPPORTED_DATA = 0x8104010A,
  SCE_VIDEO_EDIT_ERROR_FILE_FORMAT = 0x81040200,
  SCE_VIDEO_EDIT_ERROR_DEMUX = 0x81040201,
  SCE_VIDEO_EDIT_ERROR_COMPOSE = 0x81040202,
  SCE_SHARE_ACTIVITY_ERROR_CANCEL = 0x81050001,
  SCE_SHARE_ACTIVITY_ERROR_INVALID_ARGUMENT = 0x81050002,
  SCE_SHARE_ACTIVITY_ERROR_SEQUENCE = 0x81050003,
  SCE_SHARE_ACTIVITY_ERROR_OUT_OF_MEMORY = 0x81050004,
  SCE_SHARE_ACTIVITY_ERROR_NOT_INITILIZED = 0x81050005,
  SCE_SHARE_ACTIVITY_ERROR_NOT_EXIST_DATA = 0x81050006,
  SCE_SHARE_ACTIVITY_ERROR_VERSION = 0x81050007,
  SCE_SHARE_ACTIVITY_ERROR_UNSUPPORTED_CONTENT_TYPE = 0x81050101,
  SCE_SHARE_ACTIVITY_ERROR_HTTP_STATUS_ERROR = 0x81050102,
  SCE_SHARE_ACTIVITY_ERROR_QUEUEING = 0x81050103,
  SCE_SHARE_ACTIVITY_ERROR_BUSY = 0x81050104,
  SCE_SHARE_ACTIVITY_ERROR_TIME_OUT = 0x81050105,
  SCE_SHARE_ACTIVITY_ERROR_UNSUPPORTED_SERVICE_TYPE = 0x81050106,
  SCE_SHARE_ACTIVITY_ERROR_SERVICE_RATE_LIMIT = 0x81050107,
  SCE_SHARE_ACTIVITY_ERROR_CONTENT_LENGTH_EXCEED = 0x81050108,
  SCE_SHARE_ACTIVITY_ERROR_UNSUPPORTED_JSON_TYPE = 0x81050201,
  SCE_SHARE_ACTIVITY_ERROR_FILE_BGFT_JSON_META_FSTAT = 0x81050203,
  SCE_SHARE_ACTIVITY_ERROR_LIB_NP_SNS_LOAD_INTERNAL_NP_SNS = 0x8105090D,
  SCE_SHARE_ACTIVITY_ERROR_LIB_NP_SNS_UNLOAD_INTERNAL_NP_SNS = 0x8105090E,
  SCE_SHARE_ACTIVITY_ERROR_LIB_NP_SNS_LOAD_INTERNAL_NP_MANAGER = 0x81050914,
  SCE_SHARE_ACTIVITY_ERROR_LIB_NP_SNS_UNLOAD_INTERNAL_NP_MANAGER = 0x81050915,
  SCE_SHARE_ACTIVITY_ERROR_REG_GET_NP_ENV = 0x81050D01,
  SCE_SHARE_ACTIVITY_ERROR_REG_GET_LANG = 0x81050D02,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_ACCESS_TOKEN_CHECK_FAIL = 0x81050E01,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_REFRESH_REQUEST_FAIL = 0x81050E02,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_REFRESH_RESPONSE_INVALID = 0x81050E03,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_ARGUMENT_INVALID = 0x81050E04,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_ABORTED = 0x81050E05,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_UNSUPPORTED_ENV = 0x81050E06,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_RETRIEVE_REQUEST_FAIL = 0x81050E07,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_RETRIEVE_RESPONSE_INVALID = 0x81050E08,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_HANDLE_REGISTRATION_FAILED = 0x81050E09,
  SCE_SHARE_ACTIVITY_ERROR_UTIL_REFRESH_GRANT_INVALID = 0x81050E0A,
  SCE_SHARE_ACTIVITY_ERROR_CLIENT_OVER = 0x81050F03,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT = 0x81051001,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT_NOT_BIG_APP = 0x81051002,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT_BACK_GROUND = 0x81051003,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT_DISABLED = 0x81051004,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT_GOTO_PROCESS_SUSPEND = 0x81051005,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT_DISPLAY_BUFFER_NOT_IN_USE = 0x81051006,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT_DISPLAY_BUFFER_ON_MUTE = 0x81051007,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT_DISPLAY_BUFFER_TOO_BIG = 0x81051008,
  SCE_SHARE_ACTIVITY_ERROR_CAPTURE_SCREENSHOT_DISPLAY_BUFFER_RETRY_COUNT_MAX = 0x81051009,
  SCE_VOICE_RECOGNITION_ERROR_VRC_NOT_FOUND = 0x81060001,
  SCE_VOICE_RECOGNITION_ERROR_DATABASE_CORRUPTED = 0x81060002,
  SCE_VISION_RECOGNITION_ERROR_OUT_OF_MEMORY = 0x81070001,
  SCE_VISION_RECOGNITION_ERROR_FILE_OPEN_FAILED = 0x81070002,
  SCE_VISION_RECOGNITION_ERROR_FILE_SIZE_ZERO = 0x81070003,
  SCE_VISION_RECOGNITION_ERROR_FILE_SIZE_LARGE = 0x81070004,
  SCE_VISION_RECOGNITION_ERROR_FILE_SIZE_SMALL = 0x81070005,
  SCE_VISION_RECOGNITION_ERROR_FILE_READ_FAILED = 0x81070006,
  SCE_VISION_RECOGNITION_ERROR_FACE_REG_DATA_UPDATE_FAILED = 0x81070007,
  SCE_VISION_RECOGNITION_ERROR_INITIALIZE_FAILURE = 0x81078001,
  SCE_VISION_RECOGNITION_ERROR_INVALID_ARGUMENT = 0x81078002,
  SCE_VISION_RECOGNITION_ERROR_NOT_STARTED = 0x81078003,
  SCE_VISION_RECOGNITION_ERROR_NOT_READEY = 0x81078004,
  SCE_VISION_RECOGNITION_ERROR_SUSPENDED = 0x81078005,
  SCE_VISION_RECOGNITION_ERROR_MULTIPLE_REQUEST = 0x81078006,
  SCE_VISION_RECOGNITION_ERROR_NO_FACE_IMAGE = 0x81078007,
  SCE_VISION_RECOGNITION_ERROR_FILE_WRITE_FAILED = 0x81078008,
  SCE_VISION_RECOGNITION_ERROR_FACE_REGISTER_DATA_NOT_LOADED = 0x81078009,
  SCE_SYSTEM_LOGGER_ERROR_GENERIC = 0x81080001,
  SCE_SYSTEM_LOGGER_ERROR_INVALID_ARGUMENT = 0x81080002,
  SCE_SYSTEM_LOGGER_ERROR_NO_MEMORY = 0x81080003,
  SCE_SYSTEM_LOGGER_ERROR_NOT_INITIALIZED = 0x81080004,
  SCE_SYSTEM_LOGGER_ERROR_ALREADY_INITIALIZED = 0x81080005,
  SCE_SYSTEM_LOGGER_ERROR_BUSY = 0x81081001,
  SCE_SYSTEM_LOGGER_ERROR_LOG_PARAMETER_OUT_OF_RANGE = 0x81081002,
  SCE_SYSTEM_LOGGER_ERROR_NOT_FOUND = 0x81081003,
  SCE_SYSTEM_LOGGER_ERROR_UNSUPPORTED_BUILD_TYPE = 0x81081004,
  SCE_SYSTEM_LOGGER_ERROR_DECRYPT_ERROR = 0x81081005,
  SCE_SYSTEM_LOGGER_ERROR_XML_PARSING_UPTODATE_ABORT = 0x81081006,
  SCE_SYSTEM_LOGGER_ERROR_XML_PARSING_INVALID_FORMAT_ABORT = 0x81081007,
  SCE_SYSTEM_LOGGER_ERROR_DB_MANAGER_NOT_INITIALIZED = 0x81081020,
  SCE_SYSTEM_LOGGER_ERROR_CAM_OPEN_ERROR = 0x81081080,
  SCE_SYSTEM_LOGGER_ERROR_CAM_READ_BUFFER_SIZE_ERROR = 0x81081081,
  SCE_SYSTEM_LOGGER_ERROR_CAM_READ_BUFFER_ERROR = 0x81081082,
  SCE_SYSTEM_LOGGER_ERROR_HTTP_RESPONSE_ERROR = 0x81081091,
  SCE_SYSTEM_LOGGER_ERROR_KERNEL_FILE_OPEN_ERROR = 0x81081501,
  SCE_SYSTEM_LOGGER_ERROR_KERNEL_FILE_SEEK_ERROR = 0x81081502,
  SCE_SYSTEM_LOGGER_ERROR_KERNEL_FILE_READ_ERROR = 0x81081503,
  SCE_SYSTEM_LOGGER_ERROR_LOG_PARAMETER_NOT_SET = 0x81081504,
  SCE_SYSTEM_LOGGER_ERROR_BUFFER_TOO_SHORT = 0x81081505,
  SCE_SYSTEM_LOGGER_ERROR_FILE_SIZE_OVER = 0x81081506,
  SCE_INVITATION_DIALOG_ERROR_BLOCKED_ALL_PLAYERS = 0x810A0001,
  SCE_GAME_CUSTOM_DATA_DIALOG_ERROR_BLOCKED_ALL_PLAYERS = 0x810B0001,
  SCE_SHARE_PLAY_ERROR_INVALID_ARGS = 0x810E0001,
  SCE_SHARE_PLAY_ERROR_OUT_OF_MEMORY = 0x810E0002,
  SCE_SHARE_PLAY_ERROR_ALREADY_INITIALIZED = 0x810E0003,
  SCE_SHARE_PLAY_ERROR_NOT_INITIALIZED = 0x810E0004,
  SCE_SHARE_PLAY_ERROR_FATAL = 0x810E0005,
  SCE_SHARE_PLAY_ERROR_TIMEOUT = 0x810E0101,
  SCE_SHARE_PLAY_ERROR_CREATE_ROOOM = 0x810E0102,
  SCE_SHARE_PLAY_ERROR_DISCONNECT = 0x810E0103,
  SCE_SHARE_PLAY_ERROR_FAILED_LOGIN = 0x810E0104,
  SCE_SHARE_PLAY_ERROR_BAD_STREAM_CONDITION = 0x810E0105,
  SCE_SHARE_PLAY_ERROR_STREAMING = 0x810E0106,
  SCE_SHARE_PLAY_ERROR_NO_EVENT = 0x810E0107,
  SCE_SHARE_PLAY_ERROR_DAEMON_RESTART = 0x810E0108,
  SCE_SHARE_PLAY_ERROR_INVALID_STATE = 0x810E0109,
  SCE_SHARE_PLAY_ERROR_INTRENAL_CANCEL = 0x810E1001,
  SCE_SHARE_PLAY_ERROR_INTRENAL_TIMEOUT = 0x810E1002,
  SCE_SHARE_PLAY_ERROR_INTERNAL_FATAL = 0x810E1003,
  SCE_SHARE_PLAY_ERROR_INTERNAL_INVALID_VALUE = 0x810E1004,
  SCE_SHARE_PLAY_ERROR_INTERNAL_NOT_FOUND = 0x810E1005,
  SCE_SHARE_PLAY_ERROR_INTERNAL_BUSY = 0x810E1006,
  SCE_SHARE_PLAY_ERROR_INTERNAL_NOT_INITIALIZED = 0x810E1007,
  SCE_SHARE_PLAY_ERROR_INTERNAL_BUFFER_OVERFLOW = 0x810E1008,
  SCE_SHARE_PLAY_ERROR_INTERNAL_READ_RESUME_DATA = 0x810E1009,
  SCE_SHARE_PLAY_ERROR_INTERNAL_CHANGE_STATE = 0x810E100A,
  SCE_SHARE_PLAY_ERROR_INTERNAL_NETWORK_NOT_CONNECTED = 0x810E1011,
  SCE_SHARE_PLAY_ERROR_INTERNAL_NETWORK_TIMEOUT = 0x810E1012,
  SCE_SHARE_PLAY_ERROR_INTERNAL_NETWORK_CLOSED = 0x810E1013,
  SCE_SHARE_PLAY_ERROR_INTERNAL_NETWORK_SEND = 0x810E1014,
  SCE_SHARE_PLAY_ERROR_INTERNAL_NETWORK_ILLEGAL_DATA = 0x810E1015,
  SCE_SHARE_PLAY_ERROR_INTERNAL_REMOTEPLAY_CONNECT_INVALID = 0x810E1050,
  SCE_SHARE_PLAY_ERROR_INTERNAL_SHARE_PLAY_VERSION_UNMATCH = 0x810E1051,
  SCE_SHARE_PLAY_ERROR_INTERNAL_CANNOT_USE_PSN_RESOURCE = 0x810E1060,
  SCE_SHARE_PLAY_ERROR_INTERNAL_GUEST_LEFT = 0x810E1061,
  SCE_SHARE_PLAY_ERROR_INTERNAL_GUEST_DID_NOT_VISIT = 0x810E1062,
  SCE_SHARE_PLAY_ERROR_INTERNAL_SHAREPLAY_SERVER_ALREADY_LOCKED = 0x810E1063,
  SCE_SHARE_PLAY_ERROR_INTERNAL_REMOTEPLAY_IN_PROCESS = 0x810E1064,
  SCE_SHARE_PLAY_ERROR_INTERNAL_GLS_IN_PROCESS = 0x810E1065,
  SCE_SHARE_PLAY_ERROR_INTERNAL_SHAREPLAY_DOES_NOT_PROCESS = 0x810E1066,
  SCE_SHARE_PLAY_ERROR_INTERNAL_SHAREPLAY_IN_PROCESS = 0x810E1067,
  SCE_SHARE_PLAY_ERROR_INTERNAL_SEPARATE_MODE_60FPS_IN_PROCESS = 0x810E1068,
  SCE_FRIEND_ERROR_FATAL = 0x810F0100,
  SCE_FRIEND_ERROR_SEND_FRIEND_REQUEST = 0x810F0101,
  SCE_FRIEND_ERROR_SEND_FRIEND_REQUEST_ALREADY = 0x810F0102,
  SCE_FRIEND_ERROR_SEND_FRIEND_REQUEST_TO_FRIEND = 0x810F0103,
  SCE_FRIEND_ERROR_SEND_FRIEND_REQUEST_TO_BLOCKED_PLAYER = 0x810F0104,
  SCE_FRIEND_ERROR_BLOCK = 0x810F0105,
  SCE_FRIEND_ERROR_BLOCK_ALREADY = 0x810F0106,
  SCE_FRIEND_ERROR_SEND_FRIEND_REQUEST_DENIED_BY_PRIVACY_LEVEL = 0x810F0107,
  SCE_FRIEND_ERROR_GRIEF_REPORT = 0x810F0108,
  SCE_FRIEND_ERROR_GRIEF_REPORT_NO_ITEM = 0x810F0109,
  SCE_FRIEND_ERROR_NOT_SIGNED_IN = 0x810F010A,
  SCE_FRIEND_ERROR_CANCELED = 0x810F010B,
  SCE_FRIEND_ERROR_NO_PLAYER = 0x810F010C,
  SCE_FRIEND_ERROR_COMMUNITY_SERVER_IS_STOPPED = 0x810F010D,
  SCE_FRIEND_ERROR_INVALID_JSON_FORMAT = 0x810F010E,
  SCE_FRIEND_ERROR_INVALID_JSON_VALUE = 0x810F010F,
  SCE_FRIEND_ERROR_INVALID_USER = 0x810F0110,
  SCE_FRIEND_ERROR_CUSTOM_LIST_MAX = 0x810F0111,
  SCE_DISC_MAP_ERROR_INVALID_ARGUMENT = 0x81100001,
  SCE_DISC_MAP_ERROR_LOCATION_NOT_MAPPED = 0x81100002,
  SCE_DISC_MAP_ERROR_FILE_NOT_FOUND = 0x81100003,
  SCE_DISC_MAP_ERROR_NO_BITMAP_INFO = 0x81100004,
  SCE_DISC_MAP_ERROR_FATAL = 0x811000FF,
  SCE_HMD_ERROR_ALREADY_INITIALIZED = 0x81110001,
  SCE_HMD_ERROR_NOT_INITIALIZED = 0x81110002,
  SCE_HMD_ERROR_HANDLE_INVALID = 0x81110003,
  SCE_HMD_ERROR_DEVICE_DISCONNECTED = 0x81110004,
  SCE_HMD_ERROR_WRONG_ID = 0x81110005,
  SCE_HMD_ERROR_ALREADY_OPENED = 0x81110006,
  SCE_HMD_ERROR_INSUFFICIENT_RESOURCE = 0x81110007,
  SCE_HMD_ERROR_PARAMETER_NULL = 0x81110008,
  SCE_HMD_ERROR_PARAMETER_INVALID = 0x81110009,
  SCE_HMD_ERROR_NO_2D_DISTORTION_MAP_MEMORY = 0x8111000A,
  SCE_HMD_ERROR_2D_DISTORTION_MAP_INITIALIZATION_ERROR = 0x8111000B,
  SCE_HMD_ERROR_REPROJECTION_NOT_INITIALIZED = 0x8111000C,
  SCE_HMD_ERROR_REPROJECTION_ALREADY_INITIALIZED = 0x8111000D,
  SCE_HMD_ERROR_REPROJECTION_HMD_NOT_READY = 0x8111000E,
  SCE_HMD_ERROR_REPROJECTION_NO_DISPLAY_BUFFER = 0x8111000F,
  SCE_HMD_ERROR_REPROJECTION_WRONG_DISPLAY_BUFFER = 0x81110010,
  SCE_HMD_ERROR_REPROJECTION_DISPLAY_BUFFER_BUSY = 0x81110011,
  SCE_HMD_ERROR_REPROJECTION_RESOURCE_ALREADY_SET = 0x81110012,
  SCE_HMD_ERROR_REPROJECTION_RESOURCE_NOT_SET = 0x81110013,
  SCE_HMD_ERROR_REPROJECTION_THREAD_NOT_WORKING = 0x81110014,
  SCE_HMD_ERROR_REPROJECTION_NEVER_PROCESSED = 0x81110015,
  SCE_HMD_ERROR_UNSUPPORTED_FEATURE = 0x81110016,
  SCE_HMD_ERROR_STATUS_NOT_ACTIVE = 0x81110101,
  SCE_HMD_ERROR_NOT_OPEN = 0x81110102,
  SCE_HMD_ERROR_NOT_SUPPORTED = 0x81110103,
  SCE_HMD_ERROR_HOST_AUTH_PENDING = 0x81110104,
  SCE_HMD_ERROR_HOST_AUTH_FAILED = 0x81110105,
  SCE_HMD_ERROR_NODATA = 0x81110106,
  SCE_HMD_ERROR_BUSY = 0x81110107,
  SCE_HMD_ERROR_COPYOUT_FAILED = 0x81110108,
  SCE_HMD_ERROR_COPYIN_FAILED = 0x81110109,
  SCE_HMD_ERROR_FATAL = 0x8111010A,
  SCE_HMD_ERROR_REPROJECTION_CAPTURE_NOT_WORKING = 0x8111010B,
  SCE_HMD_ERROR_REPROJECTION_CAPTURE_ALREADY_WORKING = 0x8111010C,
  SCE_HMD_ERROR_EAGAIN = 0x8111010D,
  SCE_HMD_ERROR_REJECTED = 0x8111010E,
  SCE_HMD_ERROR_DEBUG_NULL = 0x8111010F,
  SCE_HMD_ERROR_DEBUG_DEVICE_DISCONNECTED = 0x81110110,
  SCE_ZLIB_ERROR_NOT_FOUND = 0x81120002,
  SCE_ZLIB_ERROR_AGAIN = 0x8112000B,
  SCE_ZLIB_ERROR_FAULT = 0x8112000E,
  SCE_ZLIB_ERROR_INVALID = 0x81120016,
  SCE_ZLIB_ERROR_NOSPACE = 0x8112001C,
  SCE_ZLIB_ERROR_NOT_SUPPORTED = 0x81120025,
  SCE_ZLIB_ERROR_TIMEDOUT = 0x81120027,
  SCE_ZLIB_ERROR_NOT_INITIALIZED = 0x81120032,
  SCE_ZLIB_ERROR_ALREADY_INITIALIZED = 0x81120033,
  SCE_ZLIB_ERROR_FATAL = 0x811200FF,
  SCE_SYSTEM_STATE_MGR_ERROR_INTERNAL = 0x81130001,
  SCE_SYSTEM_STATE_MGR_ERROR_NOT_PERMITTED = 0x81130002,
  SCE_SYSTEM_STATE_MGR_ERROR_INVALID_VALUE = 0x81130003,
  SCE_DISC_PLAYER_ERROR_AACS_HOST_REVOCATION = 0x81140000,
  SCE_DISC_PLAYER_ERROR_AACS_DRIVE_REVOCATION = 0x81140001,
  SCE_DISC_PLAYER_ERROR_AACS_CONTENTS_REVOCATION = 0x81140002,
  SCE_DISC_PLAYER_ERROR_AACS_GET_KEY_FAILED = 0x81140003,
  SCE_DISC_PLAYER_ERROR_AACS_NOT_AACS = 0x81140004,
  SCE_DISC_PLAYER_ERROR_AACS_NO_FILE = 0x81140005,
  SCE_DISC_PLAYER_ERROR_AACS_DRIVE = 0x81140006,
  SCE_DISC_PLAYER_ERROR_AACS_DRL = 0x81140007,
  SCE_DISC_PLAYER_ERROR_AACS_CRL = 0x81140008,
  SCE_DISC_PLAYER_ERROR_AACS_DRL_TRM = 0x81140009,
  SCE_DISC_PLAYER_ERROR_AACS_CRL_TRM = 0x8114000A,
  SCE_DISC_PLAYER_ERROR_AACS_MKBTYPE = 0x8114000B,
  SCE_DISC_PLAYER_ERROR_AACS_EX_TITLE_PLAY = 0x8114000C,
  SCE_DISC_PLAYER_ERROR_AACS_DOT = 0x8114000D,
  SCE_DISC_PLAYER_ERROR_AACS_VERIFY = 0x8114000E,
  SCE_DISC_PLAYER_ERROR_HDCP_REVOCATION = 0x8114000F,
  SCE_DISC_PLAYER_ERROR_HDCP_INVALID_KSV = 0x81140010,
  SCE_DISC_PLAYER_ERROR_HDCP_VERIFY_SRM = 0x81140011,
  SCE_DISC_PLAYER_ERROR_CSS_DRIVE = 0x81140012,
  SCE_DISC_PLAYER_ERROR_CSS_DISCKEY = 0x81140013,
  SCE_DISC_PLAYER_ERROR_CSS_INVALID_REGION = 0x81140014,
  SCE_DISC_PLAYER_ERROR_CSS_TITLEKEY = 0x81140015,
  SCE_DISC_PLAYER_ERROR_CSS_DECRYPT = 0x81140016,
  SCE_DISC_PLAYER_ERROR_CSS_DEADCOPYDISC = 0x81140017,
  SCE_DISC_PLAYER_ERROR_CPRM_DRIVE = 0x81140018,
  SCE_DISC_PLAYER_ERROR_CPRM_DEVICEKEY = 0x81140019,
  SCE_DISC_PLAYER_ERROR_CPRM_DECRYPT = 0x8114001A,
  SCE_DISC_PLAYER_ERROR_CPS_ERROR = 0x8114001B,
  SCE_DISC_PLAYER_ERROR_INVALID_FORMAT = 0x8114001C,
  SCE_DISC_PLAYER_ERROR_INVALID_TVSYSTEM_PAL = 0x8114001D,
  SCE_DISC_PLAYER_ERROR_INVALID_TVSYSTEM_NTSC = 0x8114001E,
  SCE_DISC_PLAYER_ERROR_INVALID_REGION = 0x8114001F,
  SCE_DISC_PLAYER_ERROR_INVALID_TITLE = 0x81140020,
  SCE_DISC_PLAYER_ERROR_ERROR_STOP = 0x81140021,
  SCE_DISC_PLAYER_ERROR_UNEXPECTED_ERROR = 0x81140022,
  SCE_DISC_PLAYER_ERROR_HDD_FULL = 0x81140023,
  SCE_DISC_PLAYER_ERROR_MV_EXT_OUTPUT = 0x81140024,
  SCE_DISC_PLAYER_ERROR_AUDWM_NHU = 0x81140025,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_OPEN_ERROR = 0x81140026,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_CLOSE_ERROR = 0x81140027,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_CRL_READ_ERROR = 0x81140028,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_CRL_UPDATE_ERROR = 0x81140029,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_DRL_READ_ERROR = 0x8114002A,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_DRL_UPDATE_ERROR = 0x8114002B,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_SRM_READ_ERROR = 0x8114002C,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_SRM_UPDATE_ERROR = 0x8114002D,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_INIT_CRL_OPEN_ERROR = 0x8114002E,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_INIT_CRL_CLOSE_ERROR = 0x8114002F,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_INIT_DRL_OPEN_ERROR = 0x81140030,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_INIT_DRL_CLOSE_ERROR = 0x81140031,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_INIT_CRL_UPDATE_ERROR = 0x81140032,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_INIT_DRL_UPDATE_ERROR = 0x81140033,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TRM_INIT_CRL_UPDATE_ERROR = 0x81140034,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TRM_INIT_DRL_UPDATE_ERROR = 0x81140035,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_CRL_OPEN_ERROR = 0x81140036,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_CRL_CLOSE_ERROR = 0x81140037,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRL_OPEN_ERROR = 0x81140038,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRL_CLOSE_ERROR = 0x81140039,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_SRM_OPEN_ERROR = 0x8114003A,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_SRM_CLOSE_ERROR = 0x8114003B,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_CRL_READ_ERROR = 0x8114003C,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_CRL_UPDATE_ERROR = 0x8114003D,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRL_READ_ERROR = 0x8114003E,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRL_UPDATE_ERROR = 0x8114003F,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_SRM_READ_ERROR = 0x81140040,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_SRM_UPDATE_ERROR = 0x81140041,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TRM_CRL_READ_ERROR = 0x81140042,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TRM_CRL_UPDATE_ERROR = 0x81140043,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TRM_DRL_READ_ERROR = 0x81140044,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TRM_DRL_UPDATE_ERROR = 0x81140045,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_NEWFS_ERROR = 0x81140046,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_UMMOUNT_ERROR = 0x81140047,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_MOUNT_ERROR = 0x81140048,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_MKDIR_ERROR = 0x81140049,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_HDD_UNLINK_ERROR = 0x8114004A,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_IS_PRODUCT_MODE_ERROR = 0x8114004B,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_IS_VFL_ON_ERROR = 0x8114004C,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_GET_DEVICE_INFO_ERROR = 0x8114004D,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_DEVICE_INFO_SECTOR_SIZE_ERROR = 0x8114004E,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_DEVICE_INFO_WRITE_FLASG_ERROR = 0x8114004F,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_FLASH_MEM_ALLOC_ERROR = 0x81140050,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DEVICE_KEY_VERSION_ERROR = 0x81140051,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DEVICE_KEY_UPDATE_TIMES_ERROR = 0x81140052,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DECRYPT_INIT_ERROR = 0x81140053,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_AGID_ERROR = 0x81140054,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_SET_HCERT_ERROR = 0x81140055,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_DCERT_ERROR = 0x81140056,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_DV_AND_DSIG_ERROR = 0x81140057,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_SET_HV_AND_HSIG_ERROR = 0x81140058,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_CALC_BUSKEY_ERROR = 0x81140059,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_VIDMAC_ERROR = 0x8114005A,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_DVD_PFI_ERROR = 0x8114005B,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_BDLAYER_INFO_ERROR = 0x8114005C,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_PMSN_AND_DMAC_ERROR = 0x8114005D,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_MEDIAID_ERROR = 0x8114005E,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_BNA_FEATURE_ERROR = 0x8114005F,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_BNA_ZERO_ERROR = 0x81140060,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_INIT_GET_BN_ERROR = 0x81140061,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_AGID_ERROR = 0x81140062,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_SET_HCERT_ERROR = 0x81140063,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_DCERT_ERROR = 0x81140064,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_DV_AND_DSIG_ERROR = 0x81140065,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_SET_HV_AND_HSIG_ERROR = 0x81140066,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_CALC_BUSKEY_ERROR = 0x81140067,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_VIDMAC_ERROR = 0x81140068,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_DVD_PFI_ERROR = 0x81140069,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_BDLAYER_INFO_ERROR = 0x8114006A,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_PMSN_AND_DMAC_ERROR = 0x8114006B,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_MEDIAID_ERROR = 0x8114006C,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_BNA_FEATURE_ERROR = 0x8114006D,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_BNA_ZERO_ERROR = 0x8114006E,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRIVE_AUTH_TCHG_GET_BN_ERROR = 0x8114006F,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_VERIFY_MKB_ERROR = 0x81140070,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_PROCESS_MKB_ERROR = 0x81140071,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_VERIFY_SKB_ERROR = 0x81140072,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_PROCESS_SKB_ERROR = 0x81140073,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_SYSTEMFILE_INDEX_ERROR = 0x81140074,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_CRYPT_API_ERROR = 0x81140075,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_SPU_INIT_ERROR = 0x81140076,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_SETUP_TITLE_ERROR = 0x81140077,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TITLE_USAGE_ERROR = 0x81140078,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_GET_BUS_ENCRYPT_KEY_ERROR = 0x81140079,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_OCRL_READ_ERROR = 0x8114007A,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_NORFLASH_INIT_OCRL_UPDATE_ERROR = 0x8114007B,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_OCRL_OPEN_ERROR = 0x8114007C,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_OCRL_CLOSE_ERROR = 0x8114007D,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_OCRL_READ_ERROR = 0x8114007E,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_OCRL_UPDATE_ERROR = 0x8114007F,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TRM_CLEAR_ERROR = 0x81140080,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_EBIND_ERROR = 0x81140081,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_UNIT_USAGE_ERROR = 0x81140082,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_CRL_ERROR = 0x81140083,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_DRL_ERROR = 0x81140084,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_BDJ_ROOT_CERT_ERROR = 0x81140085,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_GET_FILE_ATTR_ERROR = 0x81140086,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_SHARE_SPURS_ERROR = 0x81140087,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_TRACK_BUFFER_ERROR = 0x81140088,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_INVALID_MEDIA_FORMAT_ERROR = 0x81140089,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_BAD_ALLOC = 0x8114008A,
  SCE_DISC_PLAYER_ERROR_CPS_SYSTEM_D_PERMISSION_ERROR = 0x8114008B,
  SCE_DISC_PLAYER_ERROR_CPS_CSS_CONTENT_REVOKE = 0x8114008C,
  SCE_DISC_PLAYER_ERROR_CPS_CSS_VERIFY_FLASH_FAILED = 0x8114008D,
  SCE_DISC_PLAYER_ERROR_DECODER_RES_ACQUIRE_FAIL = 0x8114008E,
  SCE_DISC_PLAYER_ERROR_DECODER_RES_RELEASE_REQ = 0x8114008F,
  SCE_DISC_PLAYER_ERROR_AUDWM_TS = 0x81140090,
  SCE_DISC_PLAYER_ERROR_AACS_KEY_NOT_ENTRY = 0x81140091,
  SCE_DISC_PLAYER_ERROR_AACS_ONLINE_STATUS_INVALID = 0x81140092,
  SCE_DBG_ERROR_INVALID_ARG = 0x81150001,
  SCE_DBG_ERROR_UNKNOWN = 0x81150002,
  SCE_DBG_ERROR_BUFFER_FULL = 0x81150003,
  SCE_DTCP_IP_ACTIVATE_ERROR_CANCEL = 0x81160000,
  SCE_DTCP_IP_ACTIVATE_ERROR_PARAM = 0x81160001,
  SCE_DTCP_IP_ACTIVATE_ERROR_GENERIC = 0x81160002,
  SCE_DTCP_IP_ERROR_BUSY = 0x81160100,
  SCE_DTCP_IP_ERROR_CANCEL = 0x81160101,
  SCE_DTCP_IP_ERROR_GENERIC = 0x81160102,
  SCE_DTCP_IP_ERROR_SEQUENCE = 0x81160103,
  SCE_DTCP_IP_ERROR_PARAM = 0x81160104,
  SCE_DTCP_IP_ERROR_AUTH_INVALID_HOSTNAME = 0x81160105,
  SCE_DTCP_IP_ERROR_AUTH_SERVER_NOT_FOUND = 0x81160106,
  SCE_DTCP_IP_ERROR_AUTH_CANNOT_ACCESS = 0x81160107,
  SCE_DTCP_IP_ERROR_AUTH_FAILED = 0x81160108,
  SCE_DTCP_IP_ERROR_AUTH_FAILED_WLAN = 0x81160109,
  SCE_DTCP_IP_ERROR_DEVCERT_EXPIRED = 0x8116010A,
  SCE_DTCP_IP_ERROR_KEY_NEED_ACTIVATE = 0x8116010B,
  SCE_DTCP_IP_ERROR_KEY_NEED_UPDATE = 0x8116010C,
  SCE_DTCP_IP_ERROR_KEY_FATAL = 0x8116010D,
  SCE_DTCP_IP_ERROR_KEY_NEED_CLOCK_SETUP = 0x8116010E,
  SCE_DTCP_IP_ERROR_STREAM_GENERIC = 0x8116010F,
  SCE_DTCP_IP_ERROR_HTTP_CONNECTION_CLOSED = 0x81160110,
  SCE_DTCP_IP_ERROR_ACTIVATE_GENERIC = 0x81160111,
  SCE_DTCP_IP_ERROR_ACTIVATE_INTERNAL = 0x81160112,
  SCE_DTCP_IP_ERROR_MOVE_COMMITMENT_ABORTED = 0x81160113,
  SCE_DTCP_IP_ERROR_MOVE_COMMITMENT_NEED_RETRY = 0x81160114,
  SCE_DTCP_IP_ERROR_OUT_OF_MEMORY = 0x81160115,
  SCE_DTCP_IP_ERROR_KEY_REGISTRY_ACCESS = 0x81160116,
  SCE_DTCP_IP_ERROR_KEY_BUFFER_TOO_SMALL = 0x81160117,
  SCE_DTCP_IP_ERROR_KEY_SRM_TOO_LARGE = 0x81160118,
  SCE_DTCP_IP_ERROR_SW_UNKNOWN = 0x81160119,
  SCE_DTCP_IP_ERROR_SW_TIMEOUT = 0x8116011A,
  SCE_DTCP_IP_ERROR_SW_STREAM_EOS = 0x8116011B,
  SCE_DTCP_IP_ERROR_SW_NOT_IMPLEMENTED = 0x8116011C,
  SCE_DTCP_IP_ERROR_SW_END_OF_DATA = 0x8116011D,
  SCE_DTCP_IP_ERROR_SW_BUSY = 0x8116011E,
  SCE_DTCP_IP_ERROR_SW_INVALID_ARG = 0x8116011F,
  SCE_DTCP_IP_ERROR_SW_INVALID_STATE = 0x81160120,
  SCE_DTCP_IP_ERROR_IPC = 0x81160121,
  SCE_DTCP_IP_ERROR_IPC_TIMEOUT = 0x81160122,
  SCE_DTCP_IP_ERROR_NEED_TERMINATION = 0x81160123,
  SCE_DTCP_IP_ERROR_KEY_DOWNLOAD_FILE = 0x81160124,
  SCE_DTCP_IP_ERROR_KEY_DOWNLOAD_NETWORK = 0x81160125,
  SCE_DTCP_IP_ERROR_ACTIVATE_RESOLVER_ENODNS = 0x81160200,
  SCE_DTCP_IP_ERROR_ACTIVATE_RESOLVER_ETIMEDOUT = 0x81160201,
  SCE_DTCP_IP_ERROR_ACTIVATE_TIMEOUT = 0x81160202,
  SCE_DTCP_IP_ERROR_ACTIVATE_PROXY = 0x81160203,
  SCE_DTCP_IP_ERROR_DOWNLOAD_CANCEL = 0x81160300,
  SCE_DTCP_IP_ERROR_DOWNLOAD_PARAM = 0x81160301,
  SCE_DTCP_IP_ERROR_DOWNLOAD_GENERIC = 0x81160302,
  SCE_DTCP_IP_ERROR_DOWNLOAD_HTTP_STATUS = 0x81160303,
  SCE_SHARE_UTILITY_ERROR_UNKNOWN = 0x81170001,
  SCE_SHARE_UTILITY_ERROR_NOMEM = 0x81170002,
  SCE_SHARE_UTILITY_ERROR_INVALID_ARGUMENT = 0x81170003,
  SCE_SHARE_UTILITY_ERROR_LARGE_SIZE = 0x81170004,
  SCE_SHARE_UTILITY_ERROR_CREATE_RESOURCE = 0x81170005,
  SCE_SHARE_UTILITY_ERROR_DESTROY_RESOURCE = 0x81170006,
  SCE_SHARE_UTILITY_ERROR_INITIALIZE_RESOURCE = 0x81170007,
  SCE_SHARE_UTILITY_ERROR_START_RESOURCE = 0x81170008,
  SCE_SHARE_UTILITY_ERROR_END_RESOURCE = 0x81170009,
  SCE_SHARE_UTILITY_ERROR_RESOURCE = 0x8117000A,
  SCE_SHARE_UTILITY_ERROR_EXECUTE_FUNCTION = 0x8117000B,
  SCE_SHARE_UTILITY_ERROR_BUSY = 0x8117000C,
  SCE_SHARE_UTILITY_ERROR_PARSE_JSON = 0x8117000D,
  SCE_SHARE_UTILITY_ERROR_ILLEGAL_CHARACTER = 0x8117000E,
  SCE_SHARE_UTILITY_ERROR_NETWORK = 0x8117000F,
  SCE_SHARE_UTILITY_ERROR_NOT_SUPPORTED_VERSION = 0x81170010,
  SCE_SHARE_UTILITY_ERROR_REQUIRED_PARAM_NOT_FOUND = 0x81170011,
  SCE_SHARE_UTILITY_ERROR_ALREADY_INITIALIZED = 0x81170101,
  SCE_SHARE_UTILITY_ERROR_ALREADY_INITILIZED = 0x81170101,
  SCE_SHARE_UTILITY_ERROR_NOT_INITIALIZED = 0x81170102,
  SCE_SHARE_UTILITY_ERROR_NOT_INITILIZED = 0x81170102,
  SCE_SHARE_UTILITY_ERROR_TOO_MANY_APPLICATION = 0x81170103,
  SCE_SHARE_UTILITY_ERROR_GET_APP_INFORMATION = 0x81170104,
  SCE_SHARE_UTILITY_ERROR_NOT_FLAG_IN_PARAM_SFO = 0x81170105,
  SCE_SHARE_UTILITY_ERROR_GET_USER_ID_INFORMATION = 0x81170106,
  SCE_SHARE_UTILITY_ERROR_NOT_OPEN = 0x81170201,
  SCE_SHARE_UTILITY_ERROR_NOT_OPEN_INVALID_FUNCTION_FLAG = 0x81170202,
  SCE_SHARE_UTILITY_ERROR_ALREADY_QUERY_FUNCTION = 0x81170301,
  SCE_SHARE_UTILITY_ERROR_NOT_QUERY_FUNCTION = 0x81170302,
  SCE_SHARE_UTILITY_ERROR_CANCELED_SERVICE_INFO = 0x81170303,
  SCE_SHARE_UTILITY_ERROR_GET_SERVICE_INFO = 0x81170304,
  SCE_SHARE_UTILITY_ERROR_SERVICE_INFO_BUSY = 0x81170305,
  SCE_SHARE_UTILITY_ERROR_CONTENT_NOT_FOUND = 0x81170401,
  SCE_SHARE_UTILITY_ERROR_TOO_MANY_TITLE_ID = 0x81170402,
  SCE_SHARE_UTILITY_ERROR_INVALID_CHARACTER = 0x81171001,
  SCE_SHARE_UTILITY_ERROR_INVALID_FORMAT = 0x81171002,
  SCE_SHARE_UTILITY_ERROR_INVALID_JSON_VALUE = 0x81171003,
  SCE_COREDUMP_ERROR_PARAM = 0x81180000,
  SCE_COREDUMP_ERROR_NOT_REGISTERED = 0x81180001,
  SCE_COREDUMP_ERROR_ALREADY_REGISTERED = 0x81180002,
  SCE_COREDUMP_ERROR_NOT_IN_COREDUMP_HANDLER = 0x81180003,
  SCE_COREDUMP_ERROR_THREAD_CREATE = 0x81180004,
  SCE_COREDUMP_ERROR_STOP_INFO_UNAVAILABLE = 0x81180005,
  SCE_CLOUD_CLIENT_ERROR_INTERNAL = 0x811A0001,
  SCE_CLOUD_CLIENT_ERROR_INVALID_SESSION = 0x811A0002,
  SCE_CLOUD_CLIENT_ERROR_INVALID_SEQUENCE = 0x811A0003,
  SCE_CLOUD_CLIENT_ERROR_AUTHORIZATION_FAILED = 0x811A0004,
  SCE_CLOUD_CLIENT_ERROR_ALLOCATE_SLOT_FAILED = 0x811A0005,
  SCE_CLOUD_CLIENT_ERROR_UNABLE_TO_CONNECT_TO_CLOUD = 0x811A0006,
  SCE_CLOUD_CLIENT_ERROR_FAILED_TO_CONNECT_TO_STREAMING_SERVER = 0x811A0007,
  SCE_CLOUD_CLIENT_ERROR_HANDSHAKE_FAILED = 0x811A0008,
  SCE_CLOUD_CLIENT_ERROR_FSM_ALREADY_EXISTS = 0x811A0009,
  SCE_CLOUD_CLIENT_ERROR_MISSING_REQUIRED_LAUNCH_PARAM = 0x811A000A,
  SCE_CLOUD_CLIENT_ERROR_HTTP_NOT_INITIALIZED = 0x811A000B,
  SCE_CLOUD_CLIENT_ERROR_GET_LOCK_FAILED = 0x811A000C,
  SCE_CLOUD_CLIENT_ERROR_GET_DATA_CENTERS_FAILED = 0x811A000D,
  SCE_CLOUD_CLIENT_ERROR_RTT_TEST_FAILED = 0x811A000E,
  SCE_CLOUD_CLIENT_ERROR_SELECT_DATA_CENTER_FAILED = 0x811A000F,
  SCE_CLOUD_CLIENT_ERROR_MTU_TEST_FAILED = 0x811A0010,
  SCE_CLOUD_CLIENT_ERROR_BANDWIDTH_TEST_FAILED = 0x811A0011,
  SCE_CLOUD_CLIENT_ERROR_STREAM_TEST_CHECK_FAILED = 0x811A0012,
  SCE_CLOUD_CLIENT_ERROR_GENERIC_UNKNOWN_TIMEOUT_REASON = 0x811A0013,
  SCE_CLOUD_CLIENT_ERROR_GENERIC_STATUS_CHECK_FAILED = 0x811A0014,
  SCE_CLOUD_CLIENT_ERROR_GENERIC_START_SLOT_FAILED = 0x811A0015,
  SCE_CLOUD_CLIENT_ERROR_GENERIC_START_STREAMING_SESSION_FAILED = 0x811A0016,
  SCE_CLOUD_CLIENT_ERROR_GENERIC_START_STREAMING_SESSION_CRITICAL = 0x811A0017,
  SCE_CLOUD_CLIENT_ERROR_GENERIC_INSTANCE_FAILED_START = 0x811A0018,
  SCE_CLOUD_CLIENT_ERROR_GENERIC_REMOTE_START_PROCESS_FAILED = 0x811A0019,
  SCE_CLOUD_CLIENT_ERROR_PARENTAL_CONTROL_LOCK = 0x811A001A,
  SCE_CLOUD_CLIENT_ERROR_INVALID_PARAM = 0x811A001B,
  SCE_CLOUD_CLIENT_ERROR_UNABLE_TO_RESOLVE_DNS = 0x811A001C,
  SCE_CLOUD_CLIENT_ERROR_UPSTREAM_BANDWIDTH_TEST_FAILED = 0x811A001D,
  SCE_CLOUD_CLIENT_ERROR_HTTP_REQUEST_FAILED = 0x811A001E,
  SCE_CLOUD_CLIENT_ERROR_HTTP_INVALID_RESPONSE = 0x811A001F,
  SCE_CLOUD_CLIENT_ERROR_UNKNOWN = 0x811A0020,
  SCE_CLOUD_CLIENT_ERROR_CONNECT_MANAGER_INTERNAL = 0x811A0021,
  SCE_CLOUD_CLIENT_ERROR_CONNECT_MANAGER_INVALID_SEQUENCE = 0x811A0022,
  SCE_CLOUD_CLIENT_ERROR_CONNECT_MANAGER_INVALID_PARAM = 0x811A0023,
  SCE_CLOUD_CLIENT_ERROR_CONNECT_MANAGER_GENERIC_STATUS_CHECK_FAILED = 0x811A0024,
  SCE_HEAD_TRACKER_ERROR_PARAM = 0x811B0000,
  SCE_HEAD_TRACKER_ERROR_NULL_POINTER = 0x811B0001,
  SCE_HEAD_TRACKER_ERROR_INVALID_ALIGNMENNT = 0x811B0002,
  SCE_HEAD_TRACKER_ERROR_INVALID_MEMORY_SIZE = 0x811B0003,
  SCE_HEAD_TRACKER_ERROR_INVALID_INPUT_DEPTH_IMAGE_SIZE = 0x811B0004,
  SCE_HEAD_TRACKER_ERROR_INSTANCE_NOT_IDLE = 0x811B0005,
  SCE_HEAD_TRACKER_ERROR_INSTANCE_NOT_RUNNING = 0x811B0006,
  SCE_HEAD_TRACKER_ERROR_FLEXIBLE_MEMORY_NOT_ENOUGH = 0x811B0007,
  SCE_HEAD_TRACKER_ERROR_NOT_INIT = 0x811B0008,
  SCE_HEAD_TRACKER_ERROR_ALREADY_INITIALIZED = 0x811B0009,
  SCE_HEAD_TRACKER_ERROR_FATAL = 0x811B00FF,
  SCE_VIDEODEC2_ERROR_API_FAIL = 0x811D0100,
  SCE_VIDEODEC2_ERROR_STRUCT_SIZE = 0x811D0101,
  SCE_VIDEODEC2_ERROR_ARGUMENT_POINTER = 0x811D0102,
  SCE_VIDEODEC2_ERROR_DECODER_INSTANCE = 0x811D0103,
  SCE_VIDEODEC2_ERROR_MEMORY_SIZE = 0x811D0104,
  SCE_VIDEODEC2_ERROR_MEMORY_POINTER = 0x811D0105,
  SCE_VIDEODEC2_ERROR_FRAME_BUFFER_SIZE = 0x811D0106,
  SCE_VIDEODEC2_ERROR_FRAME_BUFFER_POINTER = 0x811D0107,
  SCE_VIDEODEC2_ERROR_FRAME_BUFFER_ALIGNMENT = 0x811D0108,
  SCE_VIDEODEC2_ERROR_NOT_ONION_MEMORY = 0x811D0109,
  SCE_VIDEODEC2_ERROR_NOT_GARLIC_MEMORY = 0x811D010A,
  SCE_VIDEODEC2_ERROR_NOT_DIRECT_MEMORY = 0x811D010B,
  SCE_VIDEODEC2_ERROR_MEMORY_INFO = 0x811D010C,
  SCE_VIDEODEC2_ERROR_ACCESS_UNIT_SIZE = 0x811D010D,
  SCE_VIDEODEC2_ERROR_ACCESS_UNIT_POINTER = 0x811D010E,
  SCE_VIDEODEC2_ERROR_OUTPUT_INFO = 0x811D010F,
  SCE_VIDEODEC2_ERROR_COMPUTE_QUEUE = 0x811D0110,
  SCE_VIDEODEC2_ERROR_FATAL_STATE = 0x811D0111,
  SCE_VIDEODEC2_ERROR_PRESET_VALUE = 0x811D0112,
  SCE_VIDEODEC2_ERROR_CONFIG_INFO = 0x811D0200,
  SCE_VIDEODEC2_ERROR_COMPUTE_PIPE_ID = 0x811D0201,
  SCE_VIDEODEC2_ERROR_COMPUTE_QUEUE_ID = 0x811D0202,
  SCE_VIDEODEC2_ERROR_RESOURCE_TYPE = 0x811D0203,
  SCE_VIDEODEC2_ERROR_CODEC_TYPE = 0x811D0204,
  SCE_VIDEODEC2_ERROR_PROFILE_LEVEL = 0x811D0205,
  SCE_VIDEODEC2_ERROR_PIPELINE_DEPTH = 0x811D0206,
  SCE_VIDEODEC2_ERROR_AFFINITY_MASK = 0x811D0207,
  SCE_VIDEODEC2_ERROR_THREAD_PRIORITY = 0x811D0208,
  SCE_VIDEODEC2_ERROR_DPB_FRAME_COUNT = 0x811D0209,
  SCE_VIDEODEC2_ERROR_FRAME_WIDTH_HEIGHT = 0x811D020A,
  SCE_VIDEODEC2_ERROR_EXTRA_CONFIG_INFO = 0x811D020B,
  SCE_VIDEODEC2_ERROR_NEW_SEQUENCE = 0x811D0300,
  SCE_VIDEODEC2_ERROR_ACCESS_UNIT = 0x811D0301,
  SCE_VIDEODEC2_ERROR_OVERSIZE_DECODE = 0x811D0302,
  SCE_VIDEODEC2_ERROR_INVALID_SEQUENCE = 0x811D0303,
  SCE_VIDEODEC2_ERROR_FATAL_STREAM = 0x811D0304,
  SCE_PROFILE_CACHE_ERROR_NOT_INITIALIZED = 0x811E0001,
  SCE_PROFILE_CACHE_ERROR_ALREADY_INITIALIZED = 0x811E0002,
  SCE_PROFILE_CACHE_ERROR_INVALID_ARGUMENT = 0x811E0003,
  SCE_PROFILE_CACHE_ERROR_NO_MEMORY = 0x811E0004,
  SCE_PROFILE_CACHE_ERROR_INTERNAL = 0x811E0005,
  SCE_PROFILE_CACHE_ERROR_NOT_SIGNED_UP = 0x811E0006,
  SCE_PROFILE_CACHE_ERROR_NO_DATA = 0x811E0007,
  SCE_PROFILE_CACHE_ERROR_FILE_NOT_FOUND = 0x811E0008,
  SCE_PROFILE_CACHE_ERROR_FILE_SIZE_LIMIT_EXCEEDED = 0x811E0009,
  SCE_PROFILE_CACHE_ERROR_BINARY_READ_FAILED = 0x811E000A,
  SCE_BG_DAILY_CHECKER_ERROR_NO_MEMORY = 0x811F0000,
  SCE_BG_DAILY_CHECKER_ERROR_ALREADY_INITIALIZED = 0x811F0001,
  SCE_BG_DAILY_CHECKER_ERROR_NOT_INITIALIZED = 0x811F0002,
  SCE_BG_DAILY_CHECKER_ERROR_INVALID_ARG = 0x811F0003,
  SCE_BG_DAILY_CHECKER_ERROR_DATA_TOO_LONG = 0x811F0004,
  SCE_BG_DAILY_CHECKER_ERROR_DATA_ALREADY_REGISTERED = 0x811F0005,
  SCE_BG_DAILY_CHECKER_ERROR_CANCEL = 0x811F0006,
  SCE_BG_DAILY_CHECKER_ERROR_INVALID_DATETIME = 0x811F0007,
  SCE_BG_DAILY_CHECKER_ERROR_INTERNAL = 0x811F0008,
  SCE_BG_DAILY_CHECKER_ERROR_NOT_SUPPORTED = 0x811F0009,
  SCE_BG_DAILY_CHECKER_ERROR_INVALID_CONFIG_FILE = 0x811F000A,
  SCE_BG_DAILY_CHECKER_ERROR_OVERFLOW = 0x811F000B,
  SCE_BG_DAILY_CHECKER_ERROR_TOO_LONG_CONFIG_FILE = 0x811F000C,
  SCE_BG_DAILY_CHECKER_ERROR_HTTP_CONTENT_LENGTH_NOT_FOUND = 0x811F000D,
  SCE_BG_DAILY_CHECKER_ERROR_TIMEOUT = 0x811F000E,
  SCE_VSHCTL_ERROR_NOT_INITIALIZED = 0x81200001,
  SCE_VSHCTL_ERROR_NO_MEMORY = 0x81200002,
  SCE_VSHCTL_ERROR_INVALID_PARAM = 0x81200003,
  SCE_VSHCTL_ERROR_EVENT_QUEUE_FULL = 0x81200004,
  SCE_VSHCTL_ERROR_EVENT_QUEUE_EMPTY = 0x81200005,
  SCE_VSHCTL_ERROR_NOT_SUPPORTED = 0x81200006,
  SCE_VSHCTL_ERROR_NO_APP_INFO = 0x81200007,
  SCE_VSHCTL_ERROR_ALREADY_RUNNING = 0x81200008,
  SCE_VSHCTL_ERROR_SYSTEM_STATE = 0x81200009,
  SCE_VSHCTL_ERROR_NOT_IMPLEMENTED = 0x8120000A,
  SCE_VSHCTL_ERROR_GAME_RUNNING_ALREADY = 0x8120000B,
  SCE_VSHCTL_ERROR_GAME_NOT_RUNNING = 0x8120000C,
  SCE_VSHCTL_ERROR_NO_USER_LOGGED_IN = 0x8120000D,
  SCE_VSHCTL_ERROR_GAME_ASSET_EXPORT_REQUEST_TIMEOUT = 0x8120000E,
  SCE_VSHCTL_ERROR_NO_SUCH_USER = 0x8120000F,
  SCE_VSHCTL_ERROR_SPECIFIED_REGISTRY_ALREADY_SET = 0x81200010,
  SCE_VSHCTL_ERROR_SETTING_REGISTRY_AFTER_SET_ACCOUNT_INFO = 0x81200011,
  SCE_VSHCTL_ERROR_GAME_ASSET_BUSY = 0x81200012,
  SCE_VSHCTL_ERROR_NO_SUCH_GAME_ASSET = 0x81200013,
  SCE_VSHCTL_ERROR_GAME_ASSET_UNAVAILABLE = 0x81200014,
  SCE_VSHCTL_ERROR_DYNAMIC_GAME_MOUNT_PROTOCOL_VERSION = 0x81200015,
  SCE_VSHCTL_ERROR_HOME_IMG_BROKEN = 0x81200016,
  SCE_VSHCTL_ERROR_GAME_CRASH = 0x81200017,
  SCE_VSHCTL_ERROR_HOME_IMG_FILENAME_SUFFIX = 0x81200018,
  SCE_VSHCTL_ERROR_ILLEGAL_DEEPLINK_URL = 0x81200019,
  SCE_VSHCTL_ERROR_USER_STORAGE_UNAVAILABLE = 0x8120001A,
  SCE_VSHCTL_ERROR_CANT_USE_FEATURE_WHILE_COPYING_SAVED_DATA = 0x8120001B,
  SCE_AT9_ENC_ERROR_INTERNAL_ERROR = 0x81210000,
  SCE_AT9_ENC_ERROR_INVALID_POINTER = 0x81210001,
  SCE_AT9_ENC_ERROR_INVALID_WORK_MEM_SIZE = 0x81210002,
  SCE_AT9_ENC_ERROR_OUTPUT_BUFFER_SIZE = 0x81210003,
  SCE_AT9_ENC_ERROR_INVALID_UISIZE = 0x81210004,
  SCE_AT9_ENC_ERROR_INVALID_BIT_RATE = 0x81210005,
  SCE_AT9_ENC_ERROR_INVALID_NUM_CHANNELS = 0x81210006,
  SCE_AT9_ENC_ERROR_INVALID_SAMPLE_RATE = 0x81210007,
  SCE_AT9_ENC_ERROR_INVALID_INPUT_FORMAT = 0x81210008,
  SCE_AT9_ENC_ERROR_INVALID_SUPERFRAME = 0x81210009,
  SCE_AT9_ENC_ERROR_INVALID_DUAL = 0x8121000A,
  SCE_AT9_ENC_ERROR_INVALID_SLC = 0x8121000B,
  SCE_AT9_ENC_ERROR_INVALID_WBAND = 0x8121000C,
  SCE_AT9_ENC_ERROR_INVALID_NBANDS = 0x8121000D,
  SCE_AT9_ENC_ERROR_INVALID_ISBANDS = 0x8121000E,
  SCE_AT9_ENC_ERROR_INVALID_GRADMODE = 0x8121000F,
  SCE_AT9_ENC_ERROR_INVALID_PREVIOUS_INPUT_SIZE = 0x81210010,
  SCE_SHARE_PLAY_CLIENT_ERROR_NET_DISABLEDIF = 0x812201A1,
  SCE_SHARE_PLAY_CLIENT_ERROR_PS4_NOT_REGISTERED_FOR_INET = 0x81222C00,
  SCE_SHARE_PLAY_CLIENT_ERROR_FAILED_TO_SEND_WAKEUP_USER = 0x81222C02,
  SCE_SHARE_PLAY_CLIENT_ERROR_FAILED_TO_SEND_WAKEUP_DEVICE = 0x81222C03,
  SCE_SHARE_PLAY_CLIENT_ERROR_USER_NOT_FOUND = 0x81222C04,
  SCE_SHARE_PLAY_CLIENT_ERROR_PS4_NOTFOUND = 0x81228D00,
  SCE_SHARE_PLAY_CLIENT_ERROR_INVALID_RESPONSE = 0x81228D01,
  SCE_SHARE_PLAY_CLIENT_ERROR_PINCODE_ANOTHER_USER = 0x81228D02,
  SCE_SHARE_PLAY_CLIENT_ERROR_NETREG_FAIL = 0x81228D03,
  SCE_SHARE_PLAY_CLIENT_ERROR_NETREG_TOO_MANY_REGISTERED = 0x81228D04,
  SCE_SHARE_PLAY_CLIENT_ERROR_NETREG_INVALID_VALUE = 0x81228D05,
  SCE_SHARE_PLAY_CLIENT_ERROR_NETWORK_ILLEGAL_DATA = 0x81228D06,
  SCE_SHARE_PLAY_CLIENT_ERROR_NETWORK_CLOSED = 0x81228D07,
  SCE_SHARE_PLAY_CLIENT_ERROR_NETWORK_TIMEOUT = 0x81228D08,
  SCE_SHARE_PLAY_CLIENT_ERROR_PINCODE_INCORRECT = 0x81228D09,
  SCE_SHARE_PLAY_CLIENT_ERROR_REMOTE_PLAY_CONNECT_FULL = 0x81228D10,
  SCE_SHARE_PLAY_CLIENT_ERROR_LATEST_SYSTEM_SOFTWARE_IS_REQUIRED = 0x81228D11,
  SCE_SHARE_PLAY_CLIENT_ERROR_REMOTE_PLAY_IS_DISABLED = 0x81228D12,
  SCE_SHARE_PLAY_CLIENT_ERROR_OTHER_FEATURE_IS_WORKING = 0x81228D13,
  SCE_SHARE_PLAY_CLIENT_ERROR_CLIENT_IS_TOO_OLD = 0x81228D14,
  SCE_SHARE_PLAY_CLIENT_ERROR_REBOOT_IS_REQUIRED = 0x81228D15,
  SCE_SHARE_PLAY_CLIENT_ERROR_DISCPLAYER_RUNNING = 0x81228D16,
  SCE_SHARE_PLAY_CLIENT_ERROR_ALREADY_INITIALIZED = 0x81228D17,
  SCE_SHARE_PLAY_CLIENT_ERROR_NOT_INITIALIZED = 0x81228D18,
  SCE_SHARE_PLAY_CLIENT_ERROR_INVALID_ARG = 0x81228D19,
  SCE_SHARE_PLAY_CLIENT_ERROR_SLOW_NETWORK = 0x81228D20,
  SCE_SHARE_PLAY_CLIENT_ERROR_BATDATA = 0x81228D21,
  SCE_SHARE_PLAY_CLIENT_ERROR_FAIL = 0x81228D22,
  SCE_SHARE_PLAY_CLIENT_ERROR_SHUTTINGDOWN = 0x81228D23,
  SCE_SHARE_PLAY_CLIENT_ERROR_KEEP_ALIVE = 0x81228D24,
  SCE_SHARE_PLAY_CLIENT_ERROR_BAD_QUALITY = 0x81228D25,
  SCE_SHARE_PLAY_CLIENT_ERROR_GK_TESTRTT = 0x81228D26,
  SCE_SHARE_PLAY_CLIENT_ERROR_GK_TESTSTREAM = 0x81228D27,
  SCE_SHARE_PLAY_CLIENT_ERROR_OTHER_REASON = 0x81228D28,
  SCE_SHARE_PLAY_CLIENT_ERROR_OUT_OF_MEMORY = 0x81228D30,
  SCE_SHARE_PLAY_CLIENT_ERROR_FATAL = 0x81228D31,
  SCE_SHARE_PLAY_CLIENT_ERROR_INVALID_DATA = 0x81228D32,
  SCE_SHARE_PLAY_CLIENT_ERROR_TIMEOUT = 0x81228D33,
  SCE_SHARE_PLAY_CLIENT_ERROR_NET = 0x81228D34,
  SCE_SHARE_PLAY_CLIENT_ERROR_NET_TIMEOUT = 0x81228D35,
  SCE_SHARE_PLAY_CLIENT_ERROR_NET_AP = 0x81228D36,
  SCE_SHARE_PLAY_CLIENT_ERROR_NET_ECONNREFUSED = 0x81228D37,
  SCE_SHARE_PLAY_CLIENT_ERROR_M4VDEC = 0x81228D38,
  SCE_SHARE_PLAY_CLIENT_ERROR_AVCDEC = 0x81228D39,
  SCE_SHARE_PLAY_CLIENT_ERROR_BASE64_INVALID_LENGTH = 0x81228D3A,
  SCE_SHARE_PLAY_CLIENT_ERROR_BASE64_INVALID_CHARACTER = 0x81228D3B,
  SCE_SHARE_PLAY_CLIENT_ERROR_THREAD = 0x81228D3C,
  SCE_SHARE_PLAY_CLIENT_ERROR_FILE = 0x81228D3D,
  SCE_SHARE_PLAY_CLIENT_ERROR_CRYPT = 0x81228D3E,
  SCE_SHARE_PLAY_CLIENT_ERROR_NP_SERVER = 0x81228D3F,
  SCE_SHARE_PLAY_CLIENT_ERROR_NP_PS4_INFO_NOT_FOUND = 0x81228D40,
  SCE_SHARE_PLAY_CLIENT_ERROR_FORBIDDEN = 0x81228D41,
  SCE_SHARE_PLAY_CLIENT_ERROR_CONNECT = 0x81228D43,
  SCE_SHARE_PLAY_CLIENT_ERROR_ABORT = 0x81228D44,
  SCE_SHARE_PLAY_CLIENT_ERROR_NET_IF = 0x81228D45,
  SCE_SHARE_PLAY_CLIENT_ERROR_PS4_NOTFOUND_NET = 0x81228D46,
  SCE_SHARE_PLAY_CLIENT_ERROR_PS4_SHUTDOWN = 0x81228D47,
  SCE_SHARE_PLAY_CLIENT_ERROR_PS4_UNMATCHED_SIGNIN_ID = 0x81228D48,
  SCE_SHARE_PLAY_CLIENT_ERROR_NEED_DEVREG = 0x81228D49,
  SCE_SHARE_PLAY_CLIENT_ERROR_INVALID_PARAM = 0x81228D50,
  SCE_SHARE_PLAY_CLIENT_ERROR_BUF_OVERFLOW = 0x81228D51,
  SCE_SHARE_PLAY_CLIENT_ERROR_ABORT_COMPLETE = 0x81228D52,
  SCE_SHARE_PLAY_CLIENT_ERROR_PS4_DATA_OLD = 0x81228D53,
  SCE_SHARE_PLAY_CLIENT_ERROR_ENOBUFS = 0x81228D54,
  SCE_SHARE_PLAY_CLIENT_ERROR_CONTROLLER_DISCONNECT = 0x81228D55,
  SCE_SHARE_PLAY_CLIENT_ERROR_ALREADY_USED_RESOURCE = 0x81228D56,
  SCE_SHARE_PLAY_CLIENT_ERROR_LOGIN = 0x81228D70,
  SCE_SHARE_PLAY_CLIENT_ERROR_LOGIN_USER_FULL = 0x81228D71,
  SCE_SHARE_PLAY_CLIENT_ERROR_SECOND_SCREEN = 0x81228D80,
  SCE_SHARE_PLAY_CLIENT_ERROR_SEARCH_FAILED = 0x81228D90,
  SCE_SHARE_PLAY_CLIENT_ERROR_SEARCH_PROCESS_ERROR = 0x81228D91,
  SCE_SHARE_PLAY_CLIENT_ERROR_SEARCH_STANDBY_PS4_DETECTED = 0x81228D92,
  SCE_SHARE_PLAY_CLIENT_ERROR_INET_MATCH2_SERVER_UNAVAILABLE = 0x81228DA0,
  SCE_SHARE_PLAY_CLIENT_ERROR_INET_MATCH2_WORLD_ISSUE = 0x81228DA1,
  SCE_SHARE_PLAY_CLIENT_ERROR_INET_MATCH2_ROOM_ISSUE = 0x81228DA2,
  SCE_SHARE_PLAY_CLIENT_ERROR_INET_MATCH2_SIGNALING_ISSUE = 0x81228DA3,
  SCE_SHARE_PLAY_CLIENT_ERROR_INET_MATCH2_LEAVE_MEMBER = 0x81228DA4,
  SCE_SHARE_PLAY_CLIENT_ERROR_INET_MATCH2_PS4_CONNECT_FAIL = 0x81228DA5,
  SCE_SHARE_PLAY_CLIENT_ERROR_INET_MATCH2_FAILED = 0x81228DA6,
  SCE_SHARE_PLAY_CLIENT_ERROR_SP_MATCH2_SERVER_UNAVAILABLE = 0x81228DB0,
  SCE_SHARE_PLAY_CLIENT_ERROR_SP_MATCH2_ROOM_ISSUE = 0x81228DB1,
  SCE_SHARE_PLAY_CLIENT_ERROR_SP_MATCH2_SIGNALING_ISSUE = 0x81228DB2,
  SCE_SHARE_PLAY_CLIENT_ERROR_SP_MATCH2_LEAVE_MEMBER = 0x81228DB3,
  SCE_SHARE_PLAY_CLIENT_ERROR_SP_MATCH2_PS4_CONNECT_FAIL = 0x81228DB4,
  SCE_SHARE_PLAY_CLIENT_ERROR_SP_MATCH2_FAILED = 0x81228DB5,
  SCE_SHARE_PLAY_CLIENT_ERROR_INTERNAL_ERROR = 0x81228DFE,
  SCE_SHARE_PLAY_CLIENT_ERROR_GENERAL = 0x81228DFF,
  SCE_VIDEO_OUT_SYS_ERROR_CURSOR_INVALID_PROCEDURE = 0x81230001,
  SCE_VIDEO_OUT_SYS_ERROR_CURSOR_PERMISSION_DENIED = 0x81230002,
  SCE_VIDEO_OUT_SYS_ERROR_CURSOR_RESOURCE_NOT_READY = 0x81230003,
  SCE_MOUSE_MGR_ERROR_INVALID_OPERATION = 0x81240001,
  SCE_MOUSE_MGR_ERROR_INVALID_ARGUMENT = 0x81240002,
  SCE_MOUSE_MGR_ERROR_NO_MEMORY = 0x81240003,
  SCE_MOUSE_MGR_ERROR_INTERNAL = 0x81240004,
  SCE_GAME_LIVE_CORE_IMAGING_ERROR_NOT_INITIALIZED = 0x81250000,
  SCE_GAME_LIVE_CORE_IMAGING_ERROR_OUT_OF_MEMORY = 0x81250001,
  SCE_GAME_LIVE_CORE_IMAGING_ERROR_ALREADY = 0x81250002,
  SCE_GAME_LIVE_CORE_IMAGING_ERROR_BUFFER_NOT_UPDATED = 0x81250003,
  SCE_GAME_LIVE_CORE_IMAGING_ERROR_INVALID_ARG = 0x81250004,
  SCE_GAME_LIVE_CORE_IMAGING_ERROR_INVALID_SIZE = 0x81250005,
  SCE_GAME_LIVE_CORE_IMAGING_ERROR_VISION_RECOGNITION_SUSPENDED = 0x81250006,
  SCE_GAME_LIVE_CORE_IMAGING_ERROR_VISION_RECOGNITION_UNKNOWN = 0x81250007,
  SCE_VR_TRACKER_ERROR_NOT_INIT = 0x81260801,
  SCE_VR_TRACKER_ERROR_ALREADY_INITIALIZED = 0x81260802,
  SCE_VR_TRACKER_ERROR_DEVICE_NOT_REGISTERED = 0x81260803,
  SCE_VR_TRACKER_ERROR_DEVICE_ALREADY_REGISTERED = 0x81260804,
  SCE_VR_TRACKER_ERROR_DEVICE_LIMIT = 0x81260805,
  SCE_VR_TRACKER_ERROR_ARGUMENT_INVALID = 0x81260806,
  SCE_VR_TRACKER_ERROR_INVALID_DEVICE_HANDLE = 0x81260807,
  SCE_VR_TRACKER_ERROR_BUSY = 0x81260808,
  SCE_VR_TRACKER_ERROR_INTERNAL_ERROR = 0x81260809,
  SCE_VR_TRACKER_ERROR_NO_MOTION_SENSOR_DATA = 0x8126080A,
  SCE_VR_TRACKER_ERROR_DEVICE_NOT_ORIENTED = 0x8126080B,
  SCE_VR_TRACKER_ERROR_TIMESTAMP_OUT_OF_RANGE = 0x8126080C,
  SCE_VR_TRACKER_ERROR_CAMERA_ACCELEROMETER_INVALID_VALUE = 0x8126080D,
  SCE_VR_TRACKER_ERROR_NOT_EXECUTE_GPU_PROCESS = 0x8126080E,
  SCE_VR_TRACKER_ERROR_NOT_ENOUGH_SENSOR_HISTORY = 0x8126080F,
  SCE_VR_TRACKER_ERROR_NOT_YET_DETECTING_FRONT_LED = 0x81260810,
  SCE_VR_TRACKER_ERROR_ALREADY_PROCESSING_CAMERA_FRAME = 0x81260811,
  SCE_VR_TRACKER_ERROR_INVALID_CAMERA_CONFIGURATION = 0x81260812,
  SCE_VR_TRACKER_ERROR_INVALID_STATUS_OF_CAMERA_FRAME = 0x81260813,
  SCE_VR_TRACKER_ERROR_PLAYSTATION_CAMERA_NOT_CONNECTED = 0x81260814,
  SCE_VR_TRACKER_ERROR_NOT_EXECUTE_GPU_SUBMIT = 0x81260815,
  SCE_VR_TRACKER_ERROR_NOT_EXECUTE_GPU_WAIT = 0x81260816,
  SCE_VR_TRACKER_ERROR_UPDATE_HMD_MOTION_SENSOR_DATA = 0x81260817,
  SCE_VR_TRACKER_ERROR_UPDATE_DS4_MOTION_SENSOR_DATA = 0x81260818,
  SCE_VR_TRACKER_ERROR_UPDATE_MOVE_MOTION_SENSOR_DATA = 0x81260819,
  SCE_VR_TRACKER_ERROR_CAMERA_ADJUSTMENT_IS_NECESSARY = 0x8126081A,
  SCE_VR_TRACKER_ERROR_NOT_EXECUTE_CPU_PROCESS = 0x8126081B,
  SCE_VR_TRACKER_ERROR_NOT_STARTED = 0x8126081C,
  SCE_VR_TRACKER_ERROR_INVALID_CPU_MODE = 0x8126081D,
  SCE_VR_TRACKER_ERROR_NOT_SUPPORTED = 0x8126081E,
  SCE_VR_TRACKER_ERROR_FATAL = 0x812608FF,
  SCE_NP_SNS_YOUTUBE_DIALOG_ERROR_INTERNAL = 0x81270001,
  SCE_NP_SNS_YOUTUBE_DIALOG_ERROR_NOT_SIGNIN = 0x81270002,
  SCE_NP_SNS_YOUTUBE_DIALOG_ERROR_ACCESS_NOT_ALLOWED = 0x81270003,
  SCE_NP_SNS_YOUTUBE_DIALOG_ERROR_INCREASING_PERMISSION_FAILED = 0x81270004,
  SCE_NP_SNS_YOUTUBE_DIALOG_ERROR_CERTIFICATE_VERIFICATION = 0x81270005,
  SCE_NP_SNS_YOUTUBE_DIALOG_ERROR_WEB_APP_FATAL = 0x81270006,
  SCE_NP_SNS_YOUTUBE_DIALOG_ERROR_ACCOUNT_LINK_PARENTAL_CONTROL = 0x81270007,
  SCE_THEME_ERROR_INVALID_THEME_XML = 0x81290001,
  SCE_THEME_ERROR_INVALID_ICON_DATA = 0x81290002,
  SCE_THEME_ERROR_INVALID_SOUND_DATA = 0x81290003,
  SCE_THEME_ERROR_INVALID_SCENE_FORMAT = 0x81290004,
  SCE_THEME_ERROR_CPU_LIMIT = 0x81290005,
  SCE_THEME_ERROR_GPU_LIMIT = 0x81290006,
  SCE_THEME_ERROR_SCENE_MESH_LIMIT = 0x81290007,
  SCE_THEME_ERROR_SCENE_MEMORY_LIMIT = 0x81290008,
  SCE_THEME_ERROR_UNSUPPORTED_OPERATION = 0x81290010,
  SCE_THEME_ERROR_UNKNOWN = 0x81290020,
  SCE_USBMUSICPLAYER_ERROR_COULD_NOT_START = 0x812C0000,
  SCE_USBMUSICPLAYER_ERROR_NO_SONG_PLAYABLE = 0x812C0001,
  SCE_USBMUSICPLAYER_ERROR_OCCURRED = 0x812C0002,
  SCE_USBMUSICPLAYER_ERROR_DATA_OCCURRED = 0x812C0003,
  SCE_USBMUSICPLAYER_ERROR_NO_SONGS = 0x812C0004,
  SCE_USBMUSICPLAYER_ERROR_USB_STORAGE_USED_BY_ANOTHER_APP = 0x812C0005,
  SCE_USBMUSICPLAYER_ERROR_NO_USB_STORAGE_DEVICE = 0x812C0006,
  SCE_USB_STORAGE_DIALOG_ERROR_DISCONNECTED = 0x812D0000,
  SCE_USB_STORAGE_DIALOG_ERROR_NO_DEVICE = 0x812D0001,
  SCE_USB_STORAGE_DIALOG_ERROR_USED_BY_ANOTHER_APP = 0x812D0002,
  SCE_USB_STORAGE_DIALOG_ERROR_PATH_INVALID = 0x812D0003,
  SCE_CRASH_REPORTER_ERROR_INVALID_ARGUMENT = 0x812E0100,
  SCE_CRASH_REPORTER_ERROR_NOT_DIRECTORY = 0x812E0101,
  SCE_CRASH_REPORTER_ERROR_NOT_INCLUDED_TITLE_ID = 0x812E0102,
  SCE_CRASH_REPORTER_ERROR_NOT_INCLUDED_TIME = 0x812E0103,
  SCE_CRASH_REPORTER_ERROR_NOT_EXIST_BASE_DIRECTORY = 0x812E0104,
  SCE_CRASH_REPORTER_ERROR_DIRECTORY_OPEN = 0x812E0105,
  SCE_CRASH_REPORTER_ERROR_DIRECTRY_READ = 0x812E0106,
  SCE_CRASH_REPORTER_ERROR_DIRECTORY_DELETE = 0x812E0107,
  SCE_CRASH_REPORTER_ERROR_NOT_FOUND_CORE_FILE = 0x812E0108,
  SCE_CRASH_REPORTER_ERROR_NOT_FOUND_ENCRYPTED_CORE_FILE = 0x812E0109,
  SCE_CRASH_REPORTER_ERROR_NOT_FOUND_COREDUMP_DIRECTORY = 0x812E010A,
  SCE_CRASH_REPORTER_ERROR_MEM_ALLOC = 0x812E010B,
  SCE_CRASH_REPORTER_ERROR_MEM_ALLOC_FOR_CAF_HEADER = 0x812E010C,
  SCE_CRASH_REPORTER_ERROR_HTTP_NOT_CONNECTED = 0x812E010D,
  SCE_CRASH_REPORTER_ERROR_FILE_CREATE = 0x812E010E,
  SCE_CRASH_REPORTER_ERROR_FILE_OPEN = 0x812E010F,
  SCE_CRASH_REPORTER_ERROR_FILE_SEEK = 0x812E0110,
  SCE_CRASH_REPORTER_ERROR_FILE_READ = 0x812E0111,
  SCE_CRASH_REPORTER_ERROR_FILE_WRITE = 0x812E0112,
  SCE_CRASH_REPORTER_ERROR_FILE_CLOSE = 0x812E0113,
  SCE_CRASH_REPORTER_ERROR_REENTRANT_START = 0x812E0114,
  SCE_CRASH_REPORTER_ERROR_REENTRANT_UPLOAD = 0x812E0115,
  SCE_CRASH_REPORTER_ERROR_REENTRANT_MANIFEST = 0x812E0116,
  SCE_CRASH_REPORTER_ERROR_REENTRANT_OPTIMIZATION = 0x812E0117,
  SCE_CRASH_REPORTER_ERROR_LOCAL_SERVER_URL = 0x812E0118,
  SCE_CRASH_REPORTER_ERROR_MOVIE_FILE_SIZE_TOO_LARGE = 0x812E0119,
  SCE_CRASH_REPORTER_ERROR_MANIFEST_FILE_SIZE_TOO_LARGE = 0x812E011A,
  SCE_CRASH_REPORTER_ERROR_CORE_FILE_SIZE_ILLEGAL = 0x812E011B,
  SCE_CRASH_REPORTER_ERROR_CORE_FILE_SIZE_TOO_SMALL = 0x812E011C,
  SCE_CRASH_REPORTER_ERROR_KEY_INDEX_VALUE = 0x812E011D,
  SCE_CRASH_REPORTER_ERROR_CAF_SEGMENT_INIT = 0x812E011E,
  SCE_CRASH_REPORTER_ERROR_CAF_SEGMENT_TRANS = 0x812E011F,
  SCE_CRASH_REPORTER_ERROR_CAF_SEGMENT_FINAL = 0x812E0120,
  SCE_CRASH_REPORTER_ERROR_CAF_HEADER_INIT = 0x812E0121,
  SCE_CRASH_REPORTER_ERROR_CAF_HEADER_TRANS = 0x812E0122,
  SCE_CRASH_REPORTER_ERROR_CAF_HEADER_FINAL = 0x812E0123,
  SCE_CRASH_REPORTER_ERROR_ENCRYPTION = 0x812E0124,
  SCE_CRASH_REPORTER_ERROR_SCREEN_SHOT_FILE_SIZE_TOO_LARGE = 0x812E0125,
  SCE_CRASH_REPORTER_ERROR_CAF_SAVE_KEY_BLOCK = 0x812E0126,
  SCE_CRASH_REPORTER_ERROR_CAF_HEADER_INIT_DEC = 0x812E0127,
  SCE_CRASH_REPORTER_ERROR_DECRYPTION = 0x812E0128,
  SCE_CRASH_REPORTER_ERROR_CAF_KEY_BLOCK = 0x812E0129,
  SCE_CRASH_REPORTER_ERROR_FLOOD = 0x812E012A,
  SCE_CRASH_REPORTER_ERROR_INTERNAL = 0x812E7FFF,
  SCE_CRASH_REPORTER_ERROR_UPLOAD_REGISTER_002 = 0x812E8002,
  SCE_CRASH_REPORTER_ERROR_UPLOAD_REGISTER_003 = 0x812E8003,
  SCE_CRASH_REPORTER_ERROR_UPLOAD_REGISTER_004 = 0x812E8004,
  SCE_CRASH_REPORTER_ERROR_UPLOAD_REGISTER_008 = 0x812E8008,
  SCE_CRASH_REPORTER_ERROR_UPLOAD_REGISTER_018 = 0x812E8018,
  SCE_CRASH_REPORTER_ERROR_UPLOAD_FAILED = 0x812E801A,
  SCE_CRASH_REPORTER_ERROR_EINVAL = 0x812EFFFF,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_NOT_INITIALIZED = 0x812F0001,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_ALREADY_INITIALIZED = 0x812F0002,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_FATAL = 0x812F0003,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INVALID_ARGUMENT = 0x812F0004,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_TOO_MANY_ENTRY = 0x812F0101,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_NOT_EXIST = 0x812F0102,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_NOT_BEGIN_TRANSACTION = 0x812F0103,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_ALREADY_BEGIN_TRANSACTION = 0x812F0104,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INACTIVE = 0x812F0105,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_DATA_CORRUPTION_DETECTED = 0x812F0106,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_PROHIBITED = 0x812F0107,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_ALREADY_EXIST = 0x812F0108,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_ENOSPC = 0x812F0109,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_NO_EVENT = 0x812F010A,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_OPERATION_NOT_SUPPORTED = 0x812F010B,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_DATABASE = 0x812F8001,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_DBSETUP = 0x812F8002,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_JSON = 0x812F8003,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_PLAYER_CORE = 0x812F8004,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_TOO_MANY_ENTRY = 0x812F8005,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_NOT_EXIST = 0x812F8006,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_NOT_BEGIN_TRANSACTION = 0x812F8007,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_FATAL = 0x812F8008,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_ALREADY_BEGIN_TRANSACTION = 0x812F8009,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_DATA_CORRUPTION_DETECTED = 0x812F800A,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_NOT_INITIALIZED = 0x812F800B,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_ALREADY_EXIST = 0x812F800C,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_ENOSPC = 0x812F800D,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_CORE_INVALID_ARGUMENT = 0x812F800E,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_JSON_FIELD_UNEXPECTED = 0x812F8101,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_JSON_PARSE = 0x812F8102,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_JSON_SERIALIZE = 0x812F8103,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_JSON_FATAL = 0x812F8104,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_REQUEST_SENDER_INVALID_CALL = 0x812F8201,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_REQUEST_SENDER_TOO_MUCH_SIZE = 0x812F8202,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_REQUEST_SENDER_TIMEOUT = 0x812F8203,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_REQUEST_SENDER_FATAL = 0x812F8204,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_SPLITTER_IMPROPER_ORDER = 0x812F8301,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_SPLITTER_DIFFERENT_EVENT_NAME = 0x812F8302,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_SPLITTER_FATAL = 0x812F8303,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_REQUEST_RECEIVER_INVALID_CALL = 0x812F8401,
  SCE_MUSIC_PLAYER_SERVICE_ERROR_INTERNAL_REQUEST_RECEIVER_TOO_MUCH_SIZE = 0x812F8402,
  SCE_BACKUP_RESTORE_ERROR_NOT_INITIALIZED = 0x81300000,
  SCE_BACKUP_RESTORE_ERROR_ALREADY_INITIALIZED = 0x81300001,
  SCE_BACKUP_RESTORE_ERROR_NOMEM = 0x81300002,
  SCE_BACKUP_RESTORE_ERROR_INVALID_ARGUMENT = 0x81300003,
  SCE_BACKUP_RESTORE_ERROR_INVALID_STATE = 0x81300004,
  SCE_BACKUP_RESTORE_ERROR_CANCELLED = 0x81300005,
  SCE_BACKUP_RESTORE_ERROR_SQLITE_EXEC = 0x81300006,
  SCE_BACKUP_RESTORE_ERROR_USB_STORAGE_NOT_FOUND = 0x81300100,
  SCE_BACKUP_RESTORE_ERROR_USB_EACCES = 0x81300101,
  SCE_BACKUP_RESTORE_ERROR_USB_ENOSPC = 0x81300102,
  SCE_BACKUP_RESTORE_ERROR_USB_EIO = 0x81300103,
  SCE_BACKUP_RESTORE_ERROR_HDD_EACCES = 0x81300104,
  SCE_BACKUP_RESTORE_ERROR_HDD_ENOSPC = 0x81300105,
  SCE_BACKUP_RESTORE_ERROR_HDD_EIO = 0x81300106,
  SCE_BACKUP_RESTORE_ERROR_CAF_INVALID_MAGIC = 0x81300200,
  SCE_BACKUP_RESTORE_ERROR_INVALID_BACKUP_FILE = 0x81300201,
  SCE_BACKUP_RESTORE_ERROR_CAF_HEADER_CORRUPTED = 0x81300202,
  SCE_BACKUP_RESTORE_ERROR_DATA_CORRUPTED = 0x81300203,
  SCE_BACKUP_RESTORE_ERROR_NEED_SYSTEM_UPDATE = 0x81300204,
  SCE_BACKUP_RESTORE_ERROR_FILE_READ = 0x81300205,
  SCE_BACKUP_RESTORE_ERROR_FILE_WRITE = 0x81300206,
  SCE_BACKUP_RESTORE_ERROR_RESTORE_EPERM = 0x81300207,
  SCE_BACKUP_RESTORE_ERROR_NO_REGISTERED_USER = 0x81300208,
  SCE_BACKUP_RESTORE_ERROR_DIRNOENT = 0x81300300,
  SCE_BACKUP_RESTORE_ERROR_OUTPUTDIRNOENT = 0x81300301,
  SCE_BACKUP_RESTORE_ERROR_NOT_CSDIAG_MODE = 0x81300401,
  SCE_BACKUP_RESTORE_ERROR_NEED_FSCK = 0x81300402,
  SCE_BACKUP_RESTORE_ERROR_MOUNT_FAILED_USER = 0x81300403,
  SCE_BACKUP_RESTORE_ERROR_MOUNT_FAILED_SYSTEM_DATA = 0x81300404,
  SCE_BACKUP_RESTORE_ERROR_MOUNT_FAILED_USB_STORAGE = 0x81300405,
  SCE_BACKUP_RESTORE_ERROR_REGISTRY_SETUP_ERROR = 0x81300406,
  SCE_GLS_FOR_DEV_ERROR_BERS_INVALID_STATUS = 0x81310001,
  SCE_GLS_FOR_DEV_ERROR_BERS_TOO_MANY_STREAM = 0x81310002,
  SCE_GLS_FOR_DEV_ERROR_BERS_NG = 0x81310003,
  SCE_GLS_FOR_DEV_ERROR_BERS_INVALID_PARAM = 0x81310004,
  SCE_GLS_FOR_DEV_ERROR_UNKNOWN_BERS_ERROR = 0x81310005,
  SCE_GLS_FOR_DEV_ERROR_BERS_SOCKET = 0x81310006,
  SCE_GLS_FOR_DEV_ERROR_BERS_SETSOCKOPT = 0x81310007,
  SCE_GLS_FOR_DEV_ERROR_BERS_LISTEN = 0x81310008,
  SCE_GLS_FOR_DEV_ERROR_BERS_BIND = 0x81310009,
  SCE_GLS_FOR_DEV_ERROR_BERS_EPOLLCREATE = 0x8131000A,
  SCE_GLS_FOR_DEV_ERROR_BERS_EPOLLCONTROL = 0x8131000B,
  SCE_GLS_FOR_DEV_ERROR_BERS_SHUTDOWN = 0x8131000C,
  SCE_GLS_FOR_DEV_ERROR_BERS_RTMP_MISMATCH_MAGIC = 0x8131000D,
  SCE_GLS_FOR_DEV_ERROR_BERS_RTMP_HANDSHAKE = 0x8131000E,
  SCE_GLS_FOR_DEV_ERROR_BERS_RTMP_OVERFLOW_AND_DISCONNECT = 0x8131000F,
  SCE_GLS_FOR_DEV_ERROR_BERS_UNKNOWN_NETWORK_ERROR = 0x81310010,
  SCE_GLS_FOR_DEV_ERROR_BERS_NOT_ENOUGH_CLIENT_INSTANCE = 0x81310011,
  SCE_GLS_FOR_DEV_ERROR_UNKNOWN_IRC_ERROR = 0x81310201,
  SCE_GLS_FOR_DEV_ERROR_IRC_SOCKET = 0x81310202,
  SCE_GLS_FOR_DEV_ERROR_IRC_SETSOCKOPT = 0x81310203,
  SCE_GLS_FOR_DEV_ERROR_IRC_LISTEN = 0x81310204,
  SCE_GLS_FOR_DEV_ERROR_IRC_BIND = 0x81310205,
  SCE_GLS_FOR_DEV_ERROR_IRC_EPOLLCREATE = 0x81310206,
  SCE_GLS_FOR_DEV_ERROR_IRC_EPOLLCONTROL = 0x81310207,
  SCE_GLS_FOR_DEV_ERROR_IRC_RECV = 0x81310208,
  SCE_GLS_FOR_DEV_ERROR_IRC_RECVBUFFERSIZE_OVER = 0x81310209,
  SCE_GLS_FOR_DEV_ERROR_IRC_RECVLINESIZE_OVER = 0x81310210,
  SCE_GLS_FOR_DEV_ERROR_IRC_NOT_SUPPORTED = 0x81310211,
  SCE_GLS_FOR_DEV_ERROR_IRC_NOTFOUND_USERINFO = 0x81310212,
  SCE_GLS_FOR_DEV_ERROR_IRC_COMMAND_FORMAT = 0x81310213,
  SCE_GLS_FOR_DEV_ERROR_IRC_MAX_CLIENT_OVER = 0x81310214,
  SCE_GLS_FOR_DEV_ERROR_IRC_POOLCREATE = 0x81310215,
  SCE_GLS_FOR_DEV_ERROR_IRC_ALLOCATOR_INITIALIZE = 0x81310216,
  SCE_GLS_FOR_DEV_ERROR_IRC_LISTENER_INITIALIZE = 0x81310217,
  SCE_GLS_FOR_DEV_ERROR_IRC_USERINFO_MANAGER_INITIALIZE = 0x81310218,
  SCE_GLS_FOR_DEV_ERROR_IRC_CHANNELINFO_MANAGER_INITIALIZE = 0x81310219,
  SCE_GLS_FOR_DEV_ERROR_IRC_RECEIVER_INITIALIZE = 0x81310220,
  SCE_GLS_FOR_DEV_ERROR_IRC_SENDER_INITIALIZE = 0x81310221,
  SCE_GLS_FOR_DEV_ERROR_IRC_LISTENER_START = 0x81310222,
  SCE_GLS_FOR_DEV_ERROR_IRC_USERINFO_MANAGER_START = 0x81310223,
  SCE_GLS_FOR_DEV_ERROR_IRC_CHANNELINFO_MANAGER_START = 0x81310224,
  SCE_GLS_FOR_DEV_ERROR_IRC_RECEIVER_START = 0x81310225,
  SCE_GLS_FOR_DEV_ERROR_IRC_SENDER_START = 0x81310226,
  SCE_GLS_FOR_DEV_ERROR_IRC_AUTH_PASSWORD = 0x81310227,
  SCE_SP_MUSIC_SERVICE_WEBCORE_ERROR_FATAL = 0x81320001,
  SCE_SP_MUSIC_SERVICE_WEBCORE_ERROR_INACTIVE = 0x81320002,
  SCE_SP_MUSIC_SERVICE_WEBCORE_ERROR_SP_COMMAND = 0x81320003,
  SCE_SP_MUSIC_SERVICE_WEBCORE_ERROR_INVALID_ARGUMENT = 0x81320004,
  SCE_SP_MUSIC_SERVICE_ZEROCONF_ERROR_NOT_INSTALLED = 0x81330001,
  SCE_SP_MUSIC_SERVICE_ZEROCONF_ERROR_NOT_LOADED = 0x81330002,
  SCE_SP_MUSIC_SERVICE_ZEROCONF_ERROR_UNAVAILABLE = 0x81330003,
  SCE_SP_MUSIC_SERVICE_ZEROCONF_ERROR_FATAL = 0x81330004,
  SCE_SP_MUSIC_SERVICE_ZEROCONF_ERROR_INACTIVE = 0x81330005,
  SCE_SP_MUSIC_SERVICE_ZEROCONF_ERROR_INVALID_ARGUMENT = 0x81330006,
  SCE_SP_MUSIC_SERVICE_ZEROCONF_ERROR_NEED_PATCH_INSTALL = 0x81330007,
  SCE_SP_MUSIC_SERVICE_ZEROCONF_ERROR_NEED_SYSTEM_UPDATE = 0x81330008,
  SCE_LOGIN_DIALOG_ERROR_NOT_INITIALIZED = 0x81340001,
  SCE_LOGIN_DIALOG_ERROR_ALREADY_INITIALIZED = 0x81340002,
  SCE_LOGIN_DIALOG_ERROR_PARAM_INVALID = 0x81340003,
  SCE_LOGIN_DIALOG_ERROR_UNEXPECTED_FATAL = 0x81340004,
  SCE_LOGIN_DIALOG_ERROR_INVALID_STATE = 0x81340005,
  SCE_LOGIN_DIALOG_ERROR_SERVICE_BUSY = 0x81340006,
  SCE_LOGIN_DIALOG_ERROR_INVALID_USER_ID = 0x81340007,
  SCE_SIGNIN_DIALOG_ERROR_NOT_INITIALIZED = 0x81350001,
  SCE_SIGNIN_DIALOG_ERROR_ALREADY_INITIALIZED = 0x81350002,
  SCE_SIGNIN_DIALOG_ERROR_PARAM_INVALID = 0x81350003,
  SCE_SIGNIN_DIALOG_ERROR_UNEXPECTED_FATAL = 0x81350004,
  SCE_SIGNIN_DIALOG_ERROR_INVALID_STATE = 0x81350005,
  SCE_SIGNIN_DIALOG_ERROR_SERVICE_BUSY = 0x81350006,
  SCE_SIGNIN_DIALOG_ERROR_INVALID_USER_ID = 0x81350007,
  SCE_NP_SNS_DAILYMOTION_DIALOG_ERROR_INTERNAL = 0x81360001,
  SCE_NP_SNS_DAILYMOTION_DIALOG_ERROR_NOT_SIGNIN = 0x81360002,
  SCE_NP_SNS_DAILYMOTION_DIALOG_ERROR_CERTIFICATE_VERIFICATION = 0x81360003,
  SCE_NP_SNS_DAILYMOTION_DIALOG_ERROR_WEB_APP_FATAL = 0x81360004,
  SCE_NP_SNS_DAILYMOTION_DIALOG_ERROR_SUB_ACCOUNT = 0x81360005,
  SCE_NP_SNS_DAILYMOTION_DIALOG_ERROR_ACCOUNT_LINK_PARENTAL_CONTROL = 0x81360006,
  SCE_CRASH_REPORT_FILE_OPTIMIZER_ERROR_EFATAL = 0x81370001,
  SCE_CRASH_REPORT_FILE_OPTIMIZER_ERROR_EAGAIN = 0x81370002,
  SCE_CRASH_REPORT_FILE_OPTIMIZER_ERROR_EINVAL = 0x81370003,
  SCE_CRASH_REPORT_FILE_OPTIMIZER_ERROR_ENODATA = 0x81370004,
  SCE_CRASH_REPORT_FILE_OPTIMIZER_ERROR_EINTR = 0x81370005,
  SCE_CRASH_REPORT_FILE_OPTIMIZER_ERROR_ENOMEM = 0x81370006,
  SCE_CRASH_REPORT_FILE_OPTIMIZER_ERROR_ETIMEDOUT = 0x81370007,
  SCE_CUSTOM_MUSIC_CORE_ERROR_INVALID_PARAM = 0x81380001,
  SCE_CUSTOM_MUSIC_CORE_ERROR_NO_MEMORY = 0x81380002,
  SCE_CUSTOM_MUSIC_CORE_ERROR_FATAL = 0x81380003,
  SCE_CUSTOM_MUSIC_CORE_ERROR_BUSY = 0x81380004,
  SCE_CUSTOM_MUSIC_CORE_ERROR_ALREADY_STARTED = 0x81380005,
  SCE_CUSTOM_MUSIC_CORE_ERROR_NOT_STARTED = 0x81380006,
  SCE_CUSTOM_MUSIC_CORE_ERROR_CANNOT_OPEN_BGM_PORT = 0x81380101,
  SCE_CUSTOM_MUSIC_CORE_ERROR_BGM_PORT_NOT_OPENED = 0x81380102,
  SCE_CUSTOM_MUSIC_CORE_ERROR_CANNOT_ACCESS_BGM_VOLUME = 0x81380103,
  SCE_CUSTOM_MUSIC_CORE_ERROR_INVALID_FUNCTION_TABLE = 0x81380201,
  SCE_CUSTOM_MUSIC_CORE_ERROR_INSUFFICIENT_FUNCTION_TABLES = 0x81380202,
  SCE_CUSTOM_MUSIC_CORE_ERROR_CLIENT_NOT_ACTIVE = 0x81380301,
  SCE_CUSTOM_MUSIC_CORE_ERROR_INVALID_CLIENT_ID = 0x81380302,
  SCE_SHADER_PERF_ERROR_INVALID_ARGUMENT = 0x81390000,
  SCE_SHADER_PERF_ERROR_INVALID_SHADER_BINARY = 0x81390001,
  SCE_SHADER_PERF_ERROR_INVALID_MICROCODE_FORMAT = 0x81390002,
  SCE_SHADER_PERF_ERROR_INVALID_OPCODE = 0x81390003,
  SCE_SHADER_PERF_ERROR_INVALID_OPERAND = 0x81390004,
  SCE_SHADER_PERF_ERROR_BINARY_TRUNCATED = 0x81390005,
  SCE_SHADER_PERF_ERROR_IO = 0x81390006,
  SCE_SHADER_PERF_ERROR_OUT_OF_MEMORY = 0x81390007,
  SCE_SHADER_PERF_ERROR_INTERNAL = 0x81390008,
  SCE_SHADER_PERF_ERROR_INVALID_SDB_FILE = 0x81390009,
  SCE_SHADER_PERF_ERROR_UNKNOWN_BINARY_FORMAT = 0x8139000A,
  SCE_SHADER_PERF_ERROR_NO_MORE_ELEMENTS = 0x8139000B,
  SCE_LOGIN_SERVICE_ERROR_NOT_INITIALIZED = 0x813A0001,
  SCE_LOGIN_SERVICE_ERROR_ALREADY_INITIALIZED = 0x813A0002,
  SCE_LOGIN_SERVICE_ERROR_PARAM_INVALID = 0x813A0003,
  SCE_LOGIN_SERVICE_ERROR_UNEXPECTED_FATAL = 0x813A0004,
  SCE_LOGIN_SERVICE_ERROR_SERVICE_BUSY = 0x813A0005,
  SCE_LOGIN_SERVICE_ERROR_INVALID_USER_ID = 0x813A0006,
  SCE_LOGIN_SERVICE_ERROR_DEVICE_TYPE_HMD_SPECIFIED_MORE_THAN_ONE = 0x813A0007,
  SCE_PS2EMU_MENU_DIALOG_ERROR_SELECT_NO_VALUE = 0x813B0000,
  SCE_PS2EMU_MENU_DIALOG_ERROR_DETECT_QUICK_MENU = 0x813B0001,
  SCE_PS2EMU_MENU_DIALOG_ERROR_PARAM_INVALID = 0x813B0002,
  SCE_PS2EMU_MENU_DIALOG_ERROR_CRITICAL_ERROR = 0x813B0003,
  SCE_WK_FONT_CONFIG_ERROR_INVALID_ARGUMENT = 0x813C0001,
  SCE_WK_FONT_CONFIG_ERROR_INSUFFICIENT_BUFFER = 0x813C0002,
  SCE_WK_FONT_CONFIG_ERROR_FONT_NOT_FOUND = 0x813C0003,
  SCE_VORBISDEC_ERROR_INVALID_HANDLE = 0x813D0000,
  SCE_VORBISDEC_ERROR_INVALID_PARAMETER = 0x813D0001,
  SCE_VORBISDEC_ERROR_NOT_ENOUGH_MEMORY = 0x813D0002,
  SCE_VORBISDEC_ERROR_READ_ERROR = 0x813D0003,
  SCE_VORBISDEC_ERROR_OUT_OF_LINK = 0x813D0004,
  SCE_VORBISDEC_ERROR_NO_BITRATE_INFO = 0x813D0005,
  SCE_VORBISDEC_ERROR_NOT_SEEKABLE = 0x813D0006,
  SCE_VORBISDEC_ERROR_NEGATIVE_SEEK = 0x813D0007,
  SCE_VORBISDEC_ERROR_END_OF_STREAM = 0x813D0008,
  SCE_VORBISDEC_ERROR_NOT_SUPPORTED = 0x813D0009,
  SCE_VORBISDEC_ERROR_INVALID_NUM_OF_CHANS = 0x813D000A,
  SCE_VORBISDEC_ERROR_PAGE_TOO_BIG = 0x813D000B,
  SCE_VORBISDEC_ERROR_STREAM_TOO_SHORT = 0x813D000C,
  SCE_VORBISDEC_ERROR_PAGE_NOT_FOUND = 0x813D000D,
  SCE_VORBISDEC_ERROR_NO_DECODED_SAMPLES = 0x813D000E,
  SCE_VORBISDEC_ERROR_INVALID_STREAM = 0x813D000F,
  SCE_VORBISDEC_ERROR_TELL_ERROR = 0x813D0010,
  SCE_VORBISDEC_ERROR_INTERNAL_ERROR = 0x813D0011,
  SCE_LOGIN_MGR_SERVER_ERROR_NOT_INITIALIZED = 0x813E0001,
  SCE_LOGIN_MGR_SERVER_ERROR_INVALID_ARGUMENT = 0x813E0002,
  SCE_LOGIN_MGR_SERVER_ERROR_NO_MEMORY = 0x813E0003,
  SCE_LOGIN_MGR_SERVER_ERROR_SERVICE_BUSY = 0x813E0004,
  SCE_LOGIN_MGR_SERVER_ERROR_INTERNAL = 0x813E0005,
  SCE_LOGIN_MGR_SERVER_ERROR_INVALID_USERID = 0x813E0006,
  SCE_LOGIN_MGR_SERVER_ERROR_NEEDS_TO_SHOW_SAFETY_NOTICE = 0x813E0007,
  SCE_LOGIN_MGR_SERVER_ERROR_NEEDS_TO_SHOW_TUTORIAL = 0x813E0008,
  SCE_OPUS_CELT_ENC_ERROR_RESET_FAILED = 0x813F0000,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_STATE_POINTER = 0x813F0001,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_PCM_POINTER = 0x813F0002,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_FRAME_SIZE = 0x813F0003,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_DATA_POINTER = 0x813F0004,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_MAX_DATA_BYTES = 0x813F0005,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_REQUEST_POINTER = 0x813F0006,
  SCE_OPUS_CELT_ENC_ERROR_REQUEST_NOT_SUPPORTED = 0x813F0007,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_BITRATE = 0x813F0008,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_VBR = 0x813F0009,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_VBR_CONSTRAINT = 0x813F000A,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_FORCE_CHANNELS = 0x813F000B,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_NUM_CHANNELS = 0x813F000C,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_BANDWIDTH = 0x813F000D,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_MAX_BANDWIDTH = 0x813F000E,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_SAMPLE_RATE = 0x813F000F,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_APPLICATION = 0x813F0010,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_SIGNAL = 0x813F0011,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_COMPLEXITY = 0x813F0012,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_PACKET_LOSS_PERC = 0x813F0013,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_PRIORITY = 0x813F0014,
  SCE_OPUS_CELT_ENC_ERROR_INVALID_STATE = 0x813F0015,
  SCE_OPUS_CELT_ENC_ERROR_INITIALIZE_FAILED = 0x813F0016,
  SCE_OPUS_CELT_ENC_ERROR_ENCODE_FAILED = 0x813F0017,
  SCE_OPUS_CELT_ENC_ERROR_BAD_ARGUMENT = 0x813F0018,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_STATE_POINTER = 0x81400000,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_STATE = 0x81400001,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_SAMPLE_RATE = 0x81400002,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_NUM_CHANNELS = 0x81400003,
  SCE_OPUS_CELT_DEC_ERROR_CREATE_FAILED = 0x81400004,
  SCE_OPUS_CELT_DEC_ERROR_INITIALIZE_FAILED = 0x81400005,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_DATA_POINTER = 0x81400006,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_DATA_LENGTH = 0x81400007,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_PCM_BUFFER_POINTER = 0x81400008,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_PCM_BUFFER_LENGTH = 0x81400009,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_PRIORITY = 0x8140000A,
  SCE_OPUS_CELT_DEC_ERROR_DECODE_FAILED = 0x8140000B,
  SCE_OPUS_CELT_DEC_ERROR_INVALID_GAIN = 0x8140000C,
  SCE_OPUS_CELT_DEC_ERROR_BAD_ARGUMENT = 0x8140000D,
  SCE_OPUS_CELT_DEC_ERROR_REQUEST_NOT_SUPPORTED = 0x8140000E,
  SCE_OPUS_CELT_DEC_ERROR_RESET_FAILED = 0x8140000F,
  SCE_EVENT_APP_ERROR_GENERAL = 0x81410101,
  SCE_EVENT_APP_ERROR_JSON_PARSE_FAILED = 0x81410102,
  SCE_EVENT_APP_ERROR_FILE_IO = 0x81411101,
  SCE_EVENT_APP_ERROR_FILE_NOT_FOUND = 0x81411102,
  SCE_EVENT_APP_ERROR_NOT_SUPPORTED = 0x81411103,
  SCE_EVENT_APP_ERROR_NETWORK = 0x81411201,
  SCE_EVENT_APP_ERROR_PSN = 0x81411202,
  SCE_EVENT_APP_ERROR_INITIALIZE = 0x81419001,
  SCE_EVENT_APP_ERROR_OUT_OF_MEMORY = 0x81419002,
  SCE_EVENT_APP_ERROR_INVALID_PARAM = 0x81419003,
  SCE_EVENT_SERVICE_ERROR_NOT_INITIALIZED = 0x81420000,
  SCE_EVENT_SERVICE_ERROR_ALREADY_INITIALIZED = 0x81420001,
  SCE_EVENT_SERVICE_ERROR_NOT_CREATED = 0x81420002,
  SCE_EVENT_SERVICE_ERROR_ALREADY_CREATED = 0x81420003,
  SCE_EVENT_SERVICE_ERROR_NOT_OPENED = 0x81420004,
  SCE_EVENT_SERVICE_ERROR_ALREADY_OPENED = 0x81420005,
  SCE_EVENT_SERVICE_ERROR_INVALID_ARG = 0x81420100,
  SCE_EVENT_SERVICE_ERROR_OUT_OF_MEMORY = 0x81420101,
  SCE_EVENT_SERVICE_ERROR_NOT_FOUND = 0x81420102,
  SCE_EVENT_SERVICE_ERROR_STATUS_CODE = 0x81420103,
  SCE_EVENT_SERVICE_ERROR_INVALID_FORMAT = 0x81420104,
  SCE_EVENT_SERVICE_ERROR_NOT_CHANGED = 0x81420105,
  SCE_EVENT_SERVICE_ERROR_JOB_CANCELED = 0x81420200,
  SCE_EVENT_SERVICE_ERROR_JOB_MAX_ITEM = 0x81420201,
  SCE_EVENT_SERVICE_ERROR_CANCELED_EVENT = 0x81420300,
  SCE_EVENT_SERVICE_ERROR_CLOSED_EVENT = 0x81420301,
  SCE_EVENT_SERVICE_ERROR_BEFORE_DURATION = 0x81420302,
  SCE_EVENT_SERVICE_ERROR_AFTER_DURATION = 0x81420303,
  SCE_EVENT_SERVICE_ERROR_ALREADY_STARTED = 0x81420304,
  SCE_EVENT_SERVICE_ERROR_PAST_START_TIME = 0x81420305,
  SCE_EVENT_SERVICE_ERROR_INTERNAL = 0x8142FF00,
  SCE_MORPHEUS_UPD_ERROR_GENERAL = 0x81430000,
  SCE_MORPHEUS_UPD_ERROR_INVAL = 0x81430001,
  SCE_MORPHEUS_UPD_ERROR_NOMEM = 0x81430002,
  SCE_MORPHEUS_UPD_ERROR_BUSY = 0x81430003,
  SCE_MORPHEUS_UPD_ERROR_ALREADY = 0x81430004,
  SCE_MORPHEUS_UPD_ERROR_NOT_INITIALIZED = 0x81430005,
  SCE_MORPHEUS_UPD_ERROR_NOT_PERMITTED = 0x81430006,
  SCE_MORPHEUS_UPD_CORE_ERROR_GENERAL = 0x81431000,
  SCE_MORPHEUS_UPD_CORE_ERROR_INVAL = 0x81431001,
  SCE_MORPHEUS_UPD_CORE_ERROR_NOMEM = 0x81431002,
  SCE_MORPHEUS_UPD_CORE_ERROR_CANCELLED = 0x81431003,
  SCE_MORPHEUS_UPD_CORE_ERROR_OPEN_FIRM = 0x81431004,
  SCE_MORPHEUS_UPD_CORE_ERROR_READ_FIRM = 0x81431005,
  SCE_MORPHEUS_UPD_CORE_ERROR_STAT_FIRM = 0x81431006,
  SCE_MORPHEUS_UPD_CORE_ERROR_MUP_PLATFORM = 0x81431007,
  SCE_MORPHEUS_UPD_CORE_ERROR_MUP_HEADER = 0x81431008,
  SCE_MORPHEUS_UPD_CORE_ERROR_MUP_UNSUPPORTED = 0x81431009,
  SCE_MORPHEUS_UPD_CORE_ERROR_MUP_NOT_PERMITTED = 0x8143100A,
  SCE_MORPHEUS_UPD_CORE_ERROR_HMU_DISCONNECTED = 0x8143100B,
  SCE_MORPHEUS_UPD_CORE_ERROR_HMU_DISCONNECTED_IN_DFU = 0x8143100C,
  SCE_MORPHEUS_UPD_NET_ERROR_GENERAL = 0x81432000,
  SCE_MORPHEUS_UPD_NET_ERROR_INVAL = 0x81432001,
  SCE_MORPHEUS_UPD_NET_ERROR_NOMEM = 0x81432002,
  SCE_MORPHEUS_UPD_NET_ERROR_OPEN_FIRM = 0x81432003,
  SCE_MORPHEUS_UPD_NET_ERROR_WRITE_FIRM = 0x81432004,
  SCE_MORPHEUS_UPD_NET_ERROR_RECV_FIRM = 0x81432005,
  SCE_MORPHEUS_UPD_NET_ERROR_STATUS_NOT_OK = 0x81432006,
  SCE_MORPHEUS_UPD_NET_ERROR_STATUS_UNAVAILABLE = 0x81432007,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_VERSION = 0x81432008,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_TYPE = 0x81432009,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_SYS_VERSION = 0x8143200A,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_SIZE = 0x8143200B,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_URL = 0x8143200C,
  SCE_MORPHEUS_UPD_NET_ERROR_CANCELLED = 0x8143200D,
  SCE_MORPHEUS_UPD_NET_ERROR_NOT_STARTED = 0x8143200E,
  SCE_MORPHEUS_UPD_NET_ERROR_FINISHED = 0x8143200F,
  SCE_MORPHEUS_UPD_NET_ERROR_NO_URL = 0x81432010,
  SCE_MORPHEUS_UPD_NET_ERROR_SSL_VERIFY = 0x81432011,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_TAG_ROOT = 0x81432012,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_TAG_UPDATE = 0x81432013,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_TAG_FIRMWARE = 0x81432014,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_SMALL = 0x81432015,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_BIG = 0x81432016,
  SCE_MORPHEUS_UPD_NET_ERROR_UPDLS_HASH = 0x81432017,
  SCE_MORPHEUS_UPD_NET_ERROR_FW_CORRUPTED = 0x81432018,
  SCE_MORPHEUS_UPD_CLIENT_ERROR_GENERAL = 0x81433000,
  SCE_MORPHEUS_UPD_CLIENT_ERROR_RECOVERY_WAIT_TIMEOUT = 0x81433001,
  SCE_MORPHEUS_UPD_CLIENT_ERROR_UPDATE_WAIT_TIMEOUT = 0x81433002,
  SCE_MORPHEUS_UPD_CLIENT_ERROR_INVALID_DFU_STATUS = 0x81433003,
  SCE_MORPHEUS_UPD_CLIENT_ERROR_FW_DL_PU_DISCONNECTED = 0x81433004,
  SCE_MORPHEUS_UPD_CLIENT_ERROR_FW_DL_HMU_TURNED_OFF = 0x81433005,
  SCE_SOCIAL_SCREEN_ERROR_NOT_INITIALIZED = 0x81440001,
  SCE_SOCIAL_SCREEN_ERROR_ALREADY_INITIALIZED = 0x81440002,
  SCE_SOCIAL_SCREEN_ERROR_INVALID_ARGS = 0x81440003,
  SCE_SOCIAL_SCREEN_ERROR_OUT_OF_MEMORY = 0x81440004,
  SCE_SOCIAL_SCREEN_ERROR_FATAL = 0x81440005,
  SCE_SOCIAL_SCREEN_ERROR_NOT_OPEN_SEPARATE_MODE = 0x81440006,
  SCE_SOCIAL_SCREEN_ERROR_ALREADY_OPEN_SEPARATE_MODE = 0x81440007,
  SCE_SOCIAL_SCREEN_ERROR_NOT_SUPPORT = 0x81440008,
  SCE_SOCIAL_SCREEN_ERROR_CANNOT_OPEN_SEPARATE_MODE = 0x81440009,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_COMMON_INVALID_VALUE = 0x81441001,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_COMMON_BUSY = 0x81441002,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_COMMON_CHANGE_STATE = 0x81441003,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_COMMON_CANCEL = 0x81441004,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_COMMON_NO_CREATE_THREAD = 0x81441005,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_COMMON_FATAL = 0x81441006,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_COMMON_NO_STATE = 0x81441007,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_NOT_INITIALIZED = 0x81442001,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_OUT_OF_MEMORY = 0x81442002,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_INVALID_ARGS = 0x81442003,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_VIDEO_SEND_FAILED = 0x81442004,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_AUDIO_SEND_FAILED = 0x81442005,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_READ_RESUME_DATA_FAILED = 0x81442006,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_NOT_OPENED_DEVICE = 0x81442007,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_FATAL = 0x81442008,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_GET_VIDEO_HEADER_FAILED = 0x81442009,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_START_READING_FRAME_FAILED = 0x8144200A,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_READ_FRAME_FAILED = 0x8144200B,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_ALREADY_OPEN_SEPARATE_MODE = 0x8144200C,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_HMD_NOT_READY = 0x8144200D,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_DECODE_ERROR_ON_PU = 0x8144200E,
  SCE_SOCIAL_SCREEN_ERROR_LOCAL_SS_NOT_SEPARATE_MODE = 0x8144200F,
  SCE_REQUEST_SHARE_ERROR_NOT_INITIALIZED = 0x81450001,
  SCE_REQUEST_SHARE_ERROR_ALREADY_INITIALIZED = 0x81450002,
  SCE_REQUEST_SHARE_ERROR_INVALID_ARGUMENT = 0x81450003,
  SCE_REQUEST_SHARE_ERROR_NO_MEMORY = 0x81450004,
  SCE_REQUEST_SHARE_ERROR_INTERNAL = 0x81450005,
  SCE_REQUEST_SHARE_ERROR_ITEM_NOT_FOUND = 0x81450006,
  SCE_NET_CTL_AP_DIALOG_ERROR_INTERNAL = 0x81460001,
  SCE_AES_ERROR_INVALID_POINTER = 0x81470100,
  SCE_AES_ERROR_INVALID_CONTEXT = 0x81470101,
  SCE_AES_ERROR_INVALID_KEY_LENGTH = 0x81470102,
  SCE_AES_ERROR_INVALID_DATA_LENGTH = 0x81470103,
  SCE_AES_ERROR_INVALID_IV_LENGTH = 0x81470104,
  SCE_THUMBNAIL_PICKER_ERROR_INTERNAL = 0x81480000,
  SCE_THUMBNAIL_PICKER_ERROR_INVALID_PARAM = 0x81480001,
  SCE_THUMBNAIL_PICKER_ERROR_TIME_OUT = 0x81480002,
  SCE_THUMBNAIL_PICKER_ERROR_ABORTED = 0x81480003,
  SCE_THUMBNAIL_PICKER_ERROR_CAPACITY_EXCEEDED = 0x81480004,
  SCE_THUMBNAIL_PICKER_ERROR_WRITE = 0x81480005,
  SCE_THUMBNAIL_PICKER_ERROR_READ = 0x81480006,
  SCE_THUMBNAIL_PICKER_ERROR_NOT_AVAILABLE = 0x81480007,
  SCE_THUMBNAIL_PICKER_ERROR_CHECK_AVAILABILITY = 0x81480008,
  SCE_THUMBNAIL_PICKER_ERROR_NETWORK = 0x81480100,
  SCE_THUMBNAIL_PICKER_ERROR_HTTP_CONNECTION = 0x81480101,
  SCE_THUMBNAIL_PICKER_ERROR_HTTP_BAD_RESPONSE = 0x81480102,
  SCE_TEXT_TO_SPEECH_ERROR_NO_MEMORY = 0x81490001,
  SCE_TEXT_TO_SPEECH_ERROR_NO_RESOURCE = 0x81490002,
  SCE_TEXT_TO_SPEECH_ERROR_NOT_PERMITTED = 0x81490004,
  SCE_TEXT_TO_SPEECH_ERROR_TOO_FAST_INPUT = 0x81490006,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_CONFIG = 0x81490010,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_PARAM = 0x81490012,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_TEXT = 0x81490013,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_STATUS = 0x81490014,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_KEY = 0x81490015,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_WORD = 0x81490016,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_OPTIONS = 0x81490017,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_ITEM = 0x81490018,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_OFFSET = 0x81490019,
  SCE_TEXT_TO_SPEECH_ERROR_INVALID_LANGUAGES = 0x8149001A,
  SCE_TEXT_TO_SPEECH_ERROR_NOT_INITIALIZED = 0x81490020,
  SCE_TEXT_TO_SPEECH_ERROR_NOT_OPENED = 0x81490021,
  SCE_TEXT_TO_SPEECH_ERROR_NOT_CLOSED = 0x81490022,
  SCE_TEXT_TO_SPEECH_ERROR_ALREADY_INITIALIZED = 0x81490023,
  SCE_TEXT_TO_SPEECH_ERROR_INTERNAL = 0x814900FF,
  SCE_STICKER_ERROR_INTERNAL = 0x814A0000,
  SCE_STICKER_ERROR_INVALID_PARAM = 0x814A0001,
  SCE_STICKER_ERROR_FILE_ERROR = 0x814A0002,
  SCE_STICKER_ERROR_MEMORY_ERROR = 0x814A0003,
  SCE_STICKER_ERROR_PACKAGE_LIST_NOT_READY = 0x814A0004,
  SCE_STICKER_ERROR_NOT_INITIALIZE = 0x814A0005,
  SCE_STICKER_ERROR_DISK_FULL = 0x814A0006,
  SCE_STICKER_ERROR_NETWORK_ERROR = 0x814A0007,
  SCE_STICKER_ERROR_ABORTED = 0x814A0008,
  SCE_STICKER_ERROR_UNKNOWN_COMMAND = 0x814A0009,
  SCE_EDIT_MP4_ERROR_OUT_OF_MEMORY = 0x814B0001,
  SCE_EDIT_MP4_ERROR_INVALID_PARAMS = 0x814B0002,
  SCE_EDIT_MP4_ERROR_INVALID_HANDLE = 0x814B0003,
  SCE_EDIT_MP4_ERROR_INPUT_FILE_OPEN = 0x814B0004,
  SCE_EDIT_MP4_ERROR_INPUT_FILE_FORMAT = 0x814B0005,
  SCE_EDIT_MP4_ERROR_INPUT_FILE_READ = 0x814B0006,
  SCE_EDIT_MP4_ERROR_OUTPUT_FILE_CREATE = 0x814B0007,
  SCE_EDIT_MP4_ERROR_OUTPUT_FILE_WRITE = 0x814B0008,
  SCE_EDIT_MP4_ERROR_OUTPUT_FILE_OVERWRITE = 0x814B0009,
  SCE_EDIT_MP4_ERROR_OUTPUT_FILE_NO_SPACE = 0x814B000A,
  SCE_EDIT_MP4_ERROR_INVALID_EDIT_POINT = 0x814B000B,
  SCE_EDIT_MP4_ERROR_NOT_INITIALIZED = 0x814B000C,
  SCE_EDIT_MP4_ERROR_ABORT = 0x814B000D,
  SCE_EDIT_MP4_ERROR_BUSY = 0x814B000E,
  SCE_EDIT_MP4_ERROR_FATAL = 0x814B000F,
  SCE_WORKAROUND_CTL_ERROR_NOT_INITIALIZED = 0x814C0001,
  SCE_WORKAROUND_CTL_ERROR_NO_MEMORY = 0x814C0002,
  SCE_WORKAROUND_CTL_ERROR_INVALID_PARAM = 0x814C0003,
  SCE_WORKAROUND_CTL_ERROR_INVALID_XML_FORMAT = 0x814C0004,
  SCE_WORKAROUND_CTL_ERROR_INVALID_HTTP_RESPONSE = 0x814C0005,
  SCE_WORKAROUND_CTL_ERROR_NOT_MODIFIED_HTTP_RESPONSE = 0x814C0006,
  SCE_WORKAROUND_CTL_ERROR_ABORTED = 0x814C0007,
  SCE_WORKAROUND_CTL_ERROR_NOT_IPOBTAINED = 0x814C0008,
  SCE_WORKAROUND_CTL_ERROR_NO_VALID_TITLE_WORKAROUND_FILE = 0x814C0009,
  SCE_WORKAROUND_CTL_ERROR_INVALID_FILE_SIZE = 0x814C000A,
  SCE_WORKAROUND_CTL_ERROR_FILE_IO = 0x814C000B,
  SCE_WORKAROUND_CTL_ERROR_VALIDATION = 0x814C000C,
  SCE_WORKAROUND_CTL_ERROR_WRITE_FILE = 0x814C000D,
  SCE_WORKAROUND_CTL_ERROR_LAST_MODIFIED_NOT_FOUND = 0x814C000E,
  SCE_WORKAROUND_CTL_ERROR_NOT_SUPPORTED = 0x814C000F,
  SCE_WORKAROUND_CTL_ERROR_NEWER_VERSION_ALREADY_INSTALLED = 0x814C0010,
  SCE_HMD_DFU_ERROR_PARAM = 0x814D0000,
  SCE_HMD_DFU_ERROR_ALREADY_OPEN = 0x814D0001,
  SCE_HMD_DFU_ERROR_NOT_OPEN = 0x814D0002,
  SCE_HMD_DFU_ERROR_NOT_CONNECTED = 0x814D0003,
  SCE_HMD_DFU_ERROR_FATAL = 0x814D0004,
  SCE_HMD_DFU_ERROR_HOST_AUTH_FAILED = 0x814D0005,
  SCE_HMD_DFU_ERROR_HOST_AUTH_RETRY_TIMEOUT = 0x814D0006,
  SCE_HMD_DFU_ERROR_TRANSFER_TIMEOUT = 0x814D0007,
  SCE_HMD_DFU_ERROR_PERMISSION_DENIED = 0x814D0008,
  SCE_HMD_DFU_ERROR_PU_HMU_CABLE_DISCONNECTED = 0x814D1100,
  SCE_HMD_DFU_ERROR_PU_FILE_CORRUPTED = 0x814D1201,
  SCE_HMD_DFU_ERROR_PU_FILE_DECRYPT = 0x814D1202,
  SCE_HMD_DFU_ERROR_PU_INVALID_HWID = 0x814D1203,
  SCE_HMD_DFU_ERROR_PU_INVALID_VERSION = 0x814D1204,
  SCE_HMD_DFU_ERROR_PU_EQAF = 0x814D1205,
  SCE_HMD_DFU_ERROR_PU_INVALID_DESTINATION = 0x814D1206,
  SCE_HMD_DFU_ERROR_PU_FILE_TRANSFER_FAILED = 0x814D12FF,
  SCE_HMD_DFU_ERROR_PU_HMU_FILE_TRANSFER_FAILED = 0x814D1310,
  SCE_HMD_DFU_ERROR_PU_HMU_FILE_CORRUPTED = 0x814D1311,
  SCE_HMD_DFU_ERROR_PU_HMU_USB_ERROR = 0x814D1312,
  SCE_HMD_DFU_ERROR_PU_BASE_FILE_COPY_FAILED = 0x814D1330,
  SCE_HMD_DFU_ERROR_PU_MOUNT_FAILED = 0x814D1331,
  SCE_HMD_DFU_ERROR_PU_ADAPTATION_OF_DIFF_FAILED = 0x814D1332,
  SCE_HMD_DFU_ERROR_PU_EACCES = 0x814D1333,
  SCE_HMD_DFU_ERROR_PU_WRITE_BANK_FAILED = 0x814D1334,
  SCE_HMD_DFU_ERROR_PU_VERIFY_BANK_FAILED = 0x814D1335,
  SCE_HMD_DFU_ERROR_PU_UPDATE_FAILED = 0x814D13FF,
  SCE_CUSTOM_MUSIC_SERVICE_ERROR_FATAL = 0x814E0001,
  SCE_CUSTOM_MUSIC_SERVICE_ERROR_INVALID_ARGUMENT = 0x814E0002,
  SCE_CUSTOM_MUSIC_SERVICE_ERROR_NOT_INITIALIZED = 0x814E0003,
  SCE_CUSTOM_MUSIC_SERVICE_ERROR_ALREADY_INITIALIZED = 0x814E0004,
  SCE_CUSTOM_MUSIC_SERVICE_ERROR_BUSY = 0x814E0005,
  SCE_CUSTOM_MUSIC_SERVICE_ERROR_PROHIBITED = 0x814E0101,
  SCE_CL_SYS_CALL_WRAPPER_ERROR_INVALID_PARAM = 0x814F0001,
  SCE_CL_SYS_CALL_WRAPPER_ERROR_TOO_MANY = 0x814F0002,
  SCE_VDECSW_ERROR_API_FAIL = 0x81510100,
  SCE_VDECSW_ERROR_STRUCT_SIZE = 0x81510101,
  SCE_VDECSW_ERROR_ARGUMENT_POINTER = 0x81510102,
  SCE_VDECSW_ERROR_DECODER_INSTANCE = 0x81510103,
  SCE_VDECSW_ERROR_MEMORY_SIZE = 0x81510104,
  SCE_VDECSW_ERROR_MEMORY_POINTER = 0x81510105,
  SCE_VDECSW_ERROR_FRAME_BUFFER_SIZE = 0x81510106,
  SCE_VDECSW_ERROR_FRAME_BUFFER_POINTER = 0x81510107,
  SCE_VDECSW_ERROR_FRAME_BUFFER_ALIGNMENT = 0x81510108,
  SCE_VDECSW_ERROR_NOT_ONION_MEMORY = 0x81510109,
  SCE_VDECSW_ERROR_NOT_GARLIC_MEMORY = 0x8151010A,
  SCE_VDECSW_ERROR_NOT_DIRECT_MEMORY = 0x8151010B,
  SCE_VDECSW_ERROR_MEMORY_INFO = 0x8151010C,
  SCE_VDECSW_ERROR_ACCESS_UNIT_SIZE = 0x8151010D,
  SCE_VDECSW_ERROR_ACCESS_UNIT_POINTER = 0x8151010E,
  SCE_VDECSW_ERROR_OUTPUT_INFO = 0x8151010F,
  SCE_VDECSW_ERROR_COMPUTE_QUEUE = 0x81510110,
  SCE_VDECSW_ERROR_FATAL_STATE = 0x81510111,
  SCE_VDECSW_ERROR_PRESET_VALUE = 0x81510112,
  SCE_VDECSW_ERROR_INPUT_QUEUE_FULL = 0x81510113,
  SCE_VDECSW_ERROR_OUTPUT_BUFFER_FULL = 0x81510114,
  SCE_VDECSW_ERROR_OUTPUT_PENDING = 0x81510115,
  SCE_VDECSW_ERROR_INPUT_QUEUE_EMPTY = 0x81510116,
  SCE_VDECSW_ERROR_DECODE_PENDING = 0x81510117,
  SCE_VDECSW_ERROR_OUTPUT_BUFFER_EMPTY = 0x81510118,
  SCE_VDECSW_ERROR_CONFIG_INFO = 0x81510200,
  SCE_VDECSW_ERROR_COMPUTE_PIPE_ID = 0x81510201,
  SCE_VDECSW_ERROR_COMPUTE_QUEUE_ID = 0x81510202,
  SCE_VDECSW_ERROR_RESOURCE_TYPE = 0x81510203,
  SCE_VDECSW_ERROR_CODEC_TYPE = 0x81510204,
  SCE_VDECSW_ERROR_PROFILE_LEVEL = 0x81510205,
  SCE_VDECSW_ERROR_INPUT_QUEUE_DEPTH = 0x81510206,
  SCE_VDECSW_ERROR_AFFINITY_MASK = 0x81510207,
  SCE_VDECSW_ERROR_THREAD_PRIORITY = 0x81510208,
  SCE_VDECSW_ERROR_DPB_FRAME_COUNT = 0x81510209,
  SCE_VDECSW_ERROR_FRAME_WIDTH_HEIGHT = 0x8151020A,
  SCE_VDECSW_ERROR_EXTRA_CONFIG_INFO = 0x8151020B,
  SCE_VDECSW_ERROR_NEW_SEQUENCE = 0x81510300,
  SCE_VDECSW_ERROR_ACCESS_UNIT = 0x81510301,
  SCE_VDECSW_ERROR_OVERSIZE_DECODE = 0x81510302,
  SCE_VDECSW_ERROR_INVALID_SEQUENCE = 0x81510303,
  SCE_VDECSW_ERROR_FATAL_STREAM = 0x81510304,
  SCE_STICKER_UI_ERROR_INTERNAL = 0x81520000,
  SCE_STICKER_UI_ERROR_INVALID_ARGUMENT = 0x81520001,
  SCE_STICKER_UI_ERROR_MEMORY_ERROR = 0x81520002,
  SCE_STICKER_DIALOG_ERROR_NOT_INITIALIZED = 0x81530000,
  SCE_STICKER_DIALOG_ERROR_ALREADY_INITIALIZED = 0x81530001,
  SCE_STICKER_DIALOG_ERROR_PARAM_INVALID = 0x81530002,
  SCE_STICKER_DIALOG_ERROR_UNEXPECTED_FATAL = 0x81530003,
  SCE_STICKER_DIALOG_ERROR_INVALID_STATE = 0x81530004,
  SCE_STICKER_DIALOG_ERROR_SERVICE_BUSY = 0x81530005,
  SCE_BLUETOOTH_HID_ERROR_INVALID_PARAMETER = 0x81540001,
  SCE_BLUETOOTH_HID_ERROR_INVALID_VID_PID = 0x81540002,
  SCE_BLUETOOTH_HID_ERROR_DEVICE_NOT_REGISTERED = 0x81540003,
  SCE_BLUETOOTH_HID_ERROR_NOT_INITIALIZED = 0x81540004,
  SCE_BLUETOOTH_HID_ERROR_NOT_PAIRED = 0x81540005,
  SCE_BLUETOOTH_HID_ERROR_CALLBACK_NOT_REGISTERED = 0x81540006,
  SCE_BLUETOOTH_HID_ERROR_NOT_CONNECTED = 0x81540007,
  SCE_BLUETOOTH_HID_ERROR_TRANSFER_BUSY = 0x81540008,
  SCE_BLUETOOTH_HID_ERROR_TOO_SHORT = 0x81540009,
  SCE_BLUETOOTH_HID_ERROR_TRANSFER_NOT_READY = 0x8154000A,
  SCE_BLUETOOTH_HID_ERROR_MISSING_REPORT_ID = 0x8154000B,
  SCE_BLUETOOTH_HID_ERROR_TOO_BIG = 0x8154000C,
  SCE_BLUETOOTH_HID_ERROR_DEVICE_NOT_ALLOCATED = 0x8154000D,
  SCE_BLUETOOTH_HID_ERROR_CONNECTION_NOT_COMPLETED = 0x8154000E,
  SCE_BLUETOOTH_HID_ERROR_FATAL = 0x8154000F,
  SCE_BLUETOOTH_HID_ERROR_INVALID_ARGUMENT = 0x81548001,
  SCE_BLUETOOTH_HID_ERROR_DEVICE_NOT_FOUND = 0x81548002,
  SCE_BLUETOOTH_HID_ERROR_COPYOUT_FAILED = 0x81548003,
  SCE_BLUETOOTH_HID_ERROR_COPYIN_FAILED = 0x81548004,
  SCE_BLUETOOTH_HID_ERROR_NOT_SUPPORTED = 0x81548005,
  SCE_FRIEND_NOTIFICATION_ERROR_NOT_INITIALIZED = 0x81550001,
  SCE_FRIEND_NOTIFICATION_ERROR_ALREADY_INITIALIZED = 0x81550002,
  SCE_FRIEND_NOTIFICATION_ERROR_INVALID_ARGUMENT = 0x81550003,
  SCE_FRIEND_NOTIFICATION_ERROR_NO_MEMORY = 0x81550004,
  SCE_FRIEND_NOTIFICATION_ERROR_INTERNAL = 0x81550005,
  SCE_FRIEND_NOTIFICATION_ERROR_USER_NOT_FOUND = 0x81550006,
  SCE_FRIEND_NOTIFICATION_ERROR_FILE_NOT_FOUND = 0x81550007,
  SCE_FRIEND_NOTIFICATION_ERROR_INVALID_STATE = 0x81550008,
  SCE_HID_CONFIG_SERVICE_ERROR_NOT_INITIALIZED = 0x81560001,
  SCE_HID_CONFIG_SERVICE_ERROR_NO_MEMORY = 0x81560002,
  SCE_HID_CONFIG_SERVICE_ERROR_INVALID_PARAM = 0x81560003,
  SCE_HID_CONFIG_SERVICE_ERROR_INVALID_XML_FORMAT = 0x81560004,
  SCE_HID_CONFIG_SERVICE_ERROR_INVALID_HTTP_RESPONSE = 0x81560005,
  SCE_HID_CONFIG_SERVICE_ERROR_NOT_MODIFIED_HTTP_RESPONSE = 0x81560006,
  SCE_HID_CONFIG_SERVICE_ERROR_ABORTED = 0x81560007,
  SCE_HID_CONFIG_SERVICE_ERROR_NOT_IPOBTAINED = 0x81560008,
  SCE_HID_CONFIG_SERVICE_ERROR_NO_VALID_HID_CONFIG_FILE = 0x81560009,
  SCE_HID_CONFIG_SERVICE_ERROR_INVALID_FILE_SIZE = 0x8156000A,
  SCE_HID_CONFIG_SERVICE_ERROR_FILE_IO = 0x8156000B,
  SCE_HID_CONFIG_SERVICE_ERROR_VALIDATION = 0x8156000C,
  SCE_HID_CONFIG_SERVICE_ERROR_WRITE_FILE = 0x8156000D,
  SCE_HID_CONFIG_SERVICE_ERROR_LAST_MODIFIED_NOT_FOUND = 0x8156000E,
  SCE_VIDEO_DECODER_ARBITRATION_ERROR_INVALID_PARAM = 0x81570001,
  SCE_VIDEO_DECODER_ARBITRATION_ERROR_INVALID_STATUS = 0x81570002,
  SCE_VIDEO_DECODER_ARBITRATION_ERROR_CONNECTION_FAILED = 0x81570003,
  SCE_VIDEO_DECODER_ARBITRATION_ERROR_SCE_FUNCTION = 0x81570004,
  SCE_VIDEO_DECODER_ARBITRATION_ERROR_INTERNAL = 0x815700FF,
  SCE_JOB_ERROR_INVALID_VALUE = 0x81580000,
  SCE_JOB_ERROR_INVALID_POINTER = 0x81580001,
  SCE_JOB_ERROR_OUT_OF_MEMORY = 0x81580002,
  SCE_JOB_ERROR_BUSY = 0x81580003,
  SCE_JOB_ERROR_AGAIN = 0x81580004,
  SCE_JOB_ERROR_TIMEOUT = 0x81580005,
  SCE_JOB_ERROR_OUT_OF_SEQUENCE_INTERFACES = 0x81580006,
  SCE_JOB_ERROR_INVALID_SEQUENCE_INTERFACE = 0x81580007,
  SCE_JOB_MANAGER_ERROR_INVALID_VALUE = 0x81581000,
  SCE_JOB_MANAGER_ERROR_INVALID_POINTER = 0x81581001,
  SCE_JOB_MANAGER_ERROR_OUT_OF_MEMORY = 0x81581002,
  SCE_JOB_MANAGER_ERROR_UNINITIALIZED = 0x81581010,
  SCE_JOB_MANAGER_ERROR_ALREADY_INITIALIZED = 0x81581020,
  SCE_JOB_MANAGER_ERROR_INVALID_ALIGNMENT = 0x81581030,
  SCE_JOB_MANAGER_ERROR_INVALID_MEMORY_TYPE = 0x81581040,
  SCE_JOB_MANAGER_ERROR_INVALID_MEMORY_PROTECTION = 0x81581050,
  SCE_JOB_MANAGER_TEST_ERROR_INVALID_VALUE = 0x8158F000,
  SCE_JOB_MANAGER_TEST_ERROR_OUT_OF_MEMORY = 0x8158F002,
  SCE_JOB_MANAGER_TEST_ERROR_UNINITIALIZED = 0x8158F010,
  SCE_JOB_MANAGER_TEST_ERROR_ALREADY_INITIALIZED = 0x8158F020,
  SCE_NP_SNS_TWITCH_DIALOG_ERROR_INTERNAL = 0x81590001,
  SCE_NP_SNS_TWITCH_DIALOG_ERROR_NOT_SIGNIN = 0x81590002,
  SCE_NP_SNS_TWITCH_DIALOG_ERROR_CERTIFICATE_VERIFICATION = 0x81590003,
  SCE_NP_SNS_TWITCH_DIALOG_ERROR_WEB_APP_FATAL = 0x81590004,
  SCE_NP_SNS_TWITCH_DIALOG_ERROR_SUB_ACCOUNT = 0x81590005,
  SCE_MY_GAME_LIST_ERROR_INVALID_ARGUMENT = 0x815A0001,
  SCE_MY_GAME_LIST_ERROR_NO_MEMORY = 0x815A0002,
  SCE_MY_GAME_LIST_ERROR_INTERNAL = 0x815A0003,
  SCE_MY_GAME_LIST_ERROR_INVALID_JSON_FORMAT = 0x815A0004,
  SCE_SHARE_BLOCKINGCACHE_ERROR_INVALID_ARGUMENT = 0x815B0101,
  SCE_SHARE_BLOCKINGCACHE_ERROR_GENERIC = 0x815B0102,
  SCE_SHARE_BLOCKINGCACHE_ERROR_NOTFOUND_DATA = 0x815B0103,
  SCE_SHARE_BLOCKINGCACHE_ERROR_NOT_INITILIZED = 0x815B0104,
  SCE_SHARE_BLOCKINGCACHE_ERROR_CORRUPTED_FILE = 0x815B0105,
  SCE_SHARE_BLOCKINGCACHE_ERROR_NOTEXIST_FILE = 0x815B0106,
  SCE_SHARE_BLOCKINGCACHE_ERROR_READ_SRC_FILE = 0x815B0107,
  SCE_SHARE_BLOCKINGCACHE_ERROR_READ_SRC_OTHER_REASONS = 0x815B0108,
  SCE_SHARE_BLOCKINGCACHE_ERROR_INVALID_FORMAT_SRC_FILE = 0x815B0109,
  SCE_SHARE_BLOCKINGCACHE_ERROR_READ_DST_FILE = 0x815B010A,
  SCE_SHARE_BLOCKINGCACHE_ERROR_READ_DST_OTHER_REASONS = 0x815B010B,
  SCE_SHARE_BLOCKINGCACHE_ERROR_INVALID_FORMAT_DST_FILE = 0x815B010C,
  SCE_SHARE_BLOCKINGCACHE_ERROR_CANT_READ_MST = 0x815B010D,
  SCE_SHARE_BLOCKINGCACHE_ERROR_OTHER_MST = 0x815B010E,
  SCE_SHARE_BLOCKINGCACHE_ERROR_CANT_READ_MST_WITH_MANY_TITLES = 0x815B010F,
  SCE_SHARE_BLOCKINGCACHE_ERROR_OTHER_MST_WITH_MANY_TITLES = 0x815B0110,
  SCE_MAT_ERROR_UNKNOWN = 0x815C0000,
  SCE_MAT_ERROR_COMMS_INIT = 0x815C0001,
  SCE_MAT_ERROR_THREAD_CREATE = 0x815C0002,
  SCE_MAT_ERROR_INVALID_ARGUMENT = 0x815C0003,
  SCE_MAT_ERROR_NOMEMORY = 0x815C0004,
  SCE_SRC_UTL_ERROR_INVALID_HANDLE = 0x815D0000,
  SCE_SRC_UTL_ERROR_INVALID_PARAMETER = 0x815D0001,
  SCE_SRC_UTL_ERROR_INVALID_CHANNEL_NUMBER = 0x815D0002,
  SCE_SRC_UTL_ERROR_INVALID_PCM_FORMAT = 0x815D0003,
  SCE_SRC_UTL_ERROR_INVALID_INPUT_SAMPLING_FREQUENCY = 0x815D0004,
  SCE_SRC_UTL_ERROR_INVALID_OUTPUT_SAMPLING_FREQUENCY = 0x815D0005,
  SCE_SRC_UTL_ERROR_INITIALIZE_FAILED = 0x815D0006,
  SCE_SRC_UTL_ERROR_RESAMPLE_FAILED = 0x815D0007,
  SCE_SRC_UTL_ERROR_INSUFFICIENT_OUTPUT_BUFFER = 0x815D0008,
  SCE_SRC_UTL_ERROR_FLUSHED = 0x815D0009,
  SCE_SRC_UTL_ERROR_RESAMPLED_LAST_CHUNK = 0x815D000A,
  SCE_DSEEHX_ERROR_INVALID_POINTER = 0x815F0000,
  SCE_DSEEHX_ERROR_INVALID_EXTENSION_TYPE = 0x815F0001,
  SCE_DSEEHX_ERROR_INVALID_INPUT_CH = 0x815F0002,
  SCE_DSEEHX_ERROR_INVALID_INPUT_FS = 0x815F0003,
  SCE_DSEEHX_ERROR_INVALID_CODEC_TYPE = 0x815F0004,
  SCE_DSEEHX_ERROR_INVALID_BIT_RATE = 0x815F0005,
  SCE_DSEEHX_ERROR_INVALID_BAND_EXTENSION_MODE = 0x815F0006,
  SCE_DSEEHX_ERROR_INVALID_BAND_EXTENSION_RATIO = 0x815F0007,
  SCE_DSEEHX_ERROR_INVALID_SOURCE_FS = 0x815F0008,
  SCE_DSEEHX_ERROR_INVALID_VBR_FLAG = 0x815F0009,
  SCE_DSEEHX_ERROR_INVALID_INPUT_FORMAT = 0x815F000A,
  SCE_DSEEHX_ERROR_INVALID_OUTPUT_FORMAT = 0x815F000B,
  SCE_DSEEHX_ERROR_INVALID_SOURCE_FORMAT = 0x815F000C,
  SCE_DSEEHX_ERROR_INVALID_INPUT_SAMPLES = 0x815F000D,
  SCE_DSEEHX_ERROR_INVALID_START_BAND = 0x815F000E,
  SCE_DSEEHX_ERROR_INVALID_HEAD_MARGIN = 0x815F000F,
  SCE_DSEEHX_ERROR_INVALID_DCR_FLAG = 0x815F0010,
  SCE_DSEEHX_ERROR_INVALID_GAIN_COMPENSATION = 0x815F0011,
  SCE_DSEEHX_ERROR_INVALID_DSEE_OFFSET = 0x815F0012,
  SCE_DSEEHX_ERROR_INVALID_INTERNAL_PARAM = 0x815F0013,
  SCE_S3DA_ERROR_PARAMETER_NULL = 0x81600001,
  SCE_S3DA_ERROR_PARAMETER_INVALID = 0x81600002,
  SCE_S3DA_ERROR_NOT_SUPPORTED = 0x81600003,
  SCE_S3DA_ERROR_HANDLE_INVALID = 0x81600004,
  SCE_S3DA_ERROR_DEVICE_DISCONNECTED = 0x81600005,
  SCE_S3DA_ERROR_ALREADY_OPENED = 0x81600006,
  SCE_S3DA_ERROR_COPYOUT_FAILED = 0x81600007,
  SCE_S3DA_ERROR_COPYIN_FAILED = 0x81600008,
  SCE_S3DA_ERROR_FATAL = 0x81600009,
  SCE_S3DA_ERROR_INSUFFICIENT_RESOURCE = 0x8160000A,
  SCE_DATA_TRANSFER_ERROR_NOT_INITIALIZED = 0x81620000,
  SCE_DATA_TRANSFER_ERROR_ALREADY_INITIALIZED = 0x81620001,
  SCE_DATA_TRANSFER_ERROR_NOMEM = 0x81620002,
  SCE_DATA_TRANSFER_ERROR_INVALID_ARGUMENT = 0x81620003,
  SCE_DATA_TRANSFER_ERROR_INVALID_STATE = 0x81620004,
  SCE_DATA_TRANSFER_ERROR_CANCELLED = 0x81620005,
  SCE_DATA_TRANSFER_ERROR_FILE_READ = 0x81620006,
  SCE_DATA_TRANSFER_ERROR_FILE_WRITE = 0x81620007,
  SCE_DATA_TRANSFER_ERROR_INVALID_SERVER_RESPONSE = 0x81620008,
  SCE_DATA_TRANSFER_ERROR_NETWORK_RECV = 0x81620009,
  SCE_DATA_TRANSFER_ERROR_NETWORK_SEND = 0x8162000A,
  SCE_DATA_TRANSFER_ERROR_LAN_CABLE = 0x8162000B,
  SCE_DATA_TRANSFER_ERROR_NETWORK_TYPE_IS_NOT_WIFI = 0x8162000C,
  SCE_DATA_TRANSFER_ERROR_NETWORK_TYPE_IS_NOT_LAN = 0x8162000D,
  SCE_DATA_TRANSFER_ERROR_POSTPROCESS_ACTIVATION = 0x8162000E,
  SCE_DATA_TRANSFER_ERROR_POSTPROCESS_DB = 0x8162000F,
  SCE_DATA_TRANSFER_ERROR_SRC_UPDATE_REQUIRED = 0x81620010,
  SCE_DATA_TRANSFER_ERROR_SEARCH_TIMEOUT = 0x81620100,
  SCE_DATA_TRANSFER_ERROR_LAUNCH_TIMEOUT = 0x81620101,
  SCE_DATA_TRANSFER_ERROR_PWR_REQ_TIMEOUT = 0x81620102,
  SCE_DATA_TRANSFER_ERROR_SERVER_STANDBY = 0x81620103,
  SCE_DATA_TRANSFER_ERROR_SERVER_FORBIDDEN = 0x81620104,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_INVALID_PACKET = 0x81621001,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_UNSUPPORTED_CMD = 0x81621002,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_DEST_UPDATE_REQUIRED = 0x81621003,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_SRC_UPDATE_REQUIRED = 0x81621004,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_INVALID_PARAM = 0x81621005,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_INTERNAL_SERVER_ERROR = 0x81621006,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_AUTH_NO_ACCOUNT = 0x81621011,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_AUTH_TIMEOUT = 0x81621012,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_AUTH_FAILED = 0x81621013,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_DENIED = 0x81621014,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_NO_ACCOUNT = 0x81621015,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_MISMATCH_NPENV = 0x81621016,
  SCE_DATA_TRANSFER_ERROR_PROTOCOL_MISMATCH_HARDWARE = 0x81621017,
  SCE_SHARE_FACTORY_UTIL_ERROR_INTERNAL = 0x81630001,
  SCE_SHARE_FACTORY_UTIL_ERROR_NOT_INITIALIZED = 0x81630002,
  SCE_SHARE_FACTORY_UTIL_ERROR_UNAVAILABLE = 0x81630003,
  SCE_SHARE_FACTORY_UTIL_ERROR_NO_MEMORY = 0x81630004,
  SCE_SHARE_FACTORY_UTIL_ERROR_INVALID_PARAM = 0x81630005,
  SCE_SHARE_FACTORY_UTIL_ERROR_NOT_SUPPORTED = 0x81630006,
  SCE_SHARE_FACTORY_UTIL_ERROR_SYSTEM_STATE = 0x81630007,
  SCE_SHARE_FACTORY_UTIL_ERROR_NOT_IMPLEMENTED = 0x81630008,
  SCE_SHARE_FACTORY_UTIL_ERROR_SHARE_FACTORY_ALREADY_RUNNING = 0x81630009,
  SCE_SHARE_FACTORY_UTIL_ERROR_GO_BACK_TO_SYSTEM_UI = 0x8163000A,
  SCE_AESOCKET_ERROR_BEFORE_INIT = 0x81640001,
  SCE_AESOCKET_ERROR_ALREADY_INITED = 0x81640002,
  SCE_AESOCKET_ERROR_INVALID_ID = 0x81640003,
  SCE_AESOCKET_ERROR_INVALID_VALUE = 0x81640004,
  SCE_AESOCKET_ERROR_OUT_OF_MEMORY = 0x81640005,
  SCE_AESOCKET_ERROR_ABORTED = 0x81640006,
  SCE_AESOCKET_ERROR_BUSY = 0x81640007,
  SCE_AESOCKET_ERROR_OUT_OF_SIZE = 0x81640008,
  SCE_AESOCKET_ERROR_EXPLICIT_IV_OVERFLOW = 0x81640009,
  SCE_AESOCKET_ERROR_NEGOTIATION_UNKNOWN_CSUITE = 0x8164000A,
  SCE_AESOCKET_ERROR_NEGOTIATION_PARAM_MISMATCH = 0x8164000B,
  SCE_AESOCKET_ERROR_NEGOTIATION_BROKEN_MSG = 0x8164000C,
  SCE_AESOCKET_ERROR_NEGOTIATION_REFUSED = 0x8164000D,
  SCE_AESOCKET_ERROR_BROKEN_PAYLOAD = 0x8164000E,
  SCE_AESOCKET_ERROR_INVALID_STATE = 0x8164000F,
  SCE_AESOCKET_ERROR_SOCKET_SEND_INCOMPLETED = 0x81640010,
  SCE_AESOCKET_ERROR_SOCKET_RECV_INCOMPLETED = 0x81640011,
  SCE_PATCH_CHECKER_ERROR_NO_APPLICABLE_DATETIME = 0x81650000,
  SCE_PATCH_CHECKER_ERROR_NO_PATCH = 0x81650001,
  SCE_PATCH_CHECKER_ERROR_CACHE_FILE_CORRUPTED = 0x81650002,
  SCE_PATCH_CHECKER_ERROR_AUTO_DOWNLOAD_DISABLED = 0x81650003,
  SCE_PATCH_CHECKER_ERROR_TIMEOUT = 0x81650004,
  SCE_PSM_SHARED_DMEM_ERROR_SERVER_BUSY = 0x81668201,
  SCE_PSM_SHARED_DMEM_ERROR_SERVER_NO_MEMORY = 0x81668202,
  SCE_PSM_SHARED_DMEM_ERROR_SERVER_NOT_EXIST = 0x81668203,
  SCE_PSM_SHARED_DMEM_ERROR_INTERNAL = 0x81668204,
  SCE_PSM_SHARED_DMEM_ERROR_ABORT = 0x81668205,
  SCE_PSM_SHARED_DMEM_ERROR_INVALID_ARGUMENT = 0x81668206,
  SCE_PSM_SHARED_DMEM_ERROR_NO_MEMORY = 0x81668207,
  SCE_VSMALLOC_ERROR_INVALID_ARGUMENT = 0x81668401,
  SCE_DISCID_ERROR_NOT_SUPPORTED = 0x81680002,
  SCE_DISCID_ERROR_INVALID = 0x81680016,
  SCE_DISCID_ERROR_NO_ID = 0x81680032,
  SCE_DISCID_ERROR_FATAL = 0x816800FF,
  SCE_RTC_UTIL_ERROR_INVALID_ARGUMENT = 0x81690000,
  SCE_RTC_UTIL_ERROR_INVALID_REG_VALUE = 0x81690001,
  SCE_RTC_UTIL_ERROR_ENOMEM = 0x81690002,
  SCE_VIDEO_TRIM_ERROR_INVALID_ARGUMENT = 0x816A0100,
  SCE_VIDEO_TRIM_ERROR_GENERIC = 0x816A0101,
  SCE_VIDEO_TRIM_ERROR_NOTFOUND_DATA = 0x816A0102,
  SCE_VIDEO_TRIM_ERROR_PARENTAL_CONTROL_LOCK = 0x816A0103,
  SCE_SYSTEM_SERVICE_ERROR_PLATFORM_PRIVACY_UNKNOWN = 0x816B0001,
  SCE_SYSTEM_SERVICE_ERROR_PLATFORM_PRIVACY_DEFINITION_NOT_FOUND = 0x816B0002,
  SCE_SYSTEM_SERVICE_ERROR_PLATFORM_PRIVACY_DEFINITION_INVALID_DATA = 0x816B0003,
  SCE_LIBRESSL_ERROR_INVALID_ARG = 0x816C0001,
  SCE_LIBRESSL_ERROR_NOT_INITIALIZED = 0x816C0002,
  SCE_LIBRESSL_ERROR_INVALID_ID = 0x816C0003,
  SCE_LIBRESSL_ERROR_NO_MEMORY = 0x816C0004,
  SCE_LIBRESSL_ERROR_BUSY = 0x816C0005,
  SCE_MIRANDA_ARCH_ERROR_ENOMEM = 0x816D8001,
  SCE_MIRANDA_ARCH_ERROR_EINVAL = 0x816D8002,
  SCE_MIRANDA_ARCH_ERROR_ENOTREADY = 0x816D8003,
  SCE_MIRANDA_ARCH_ERROR_EBADREQUEST = 0x816D8004,
  SCE_MIRANDA_ARCH_ERROR_EUNEXPECTED = 0x816D8005,
  SCE_MIRANDA_ARCH_ERROR_EINTERNAL = 0x816D8006,
  SCE_MIRANDA_ARCH_ERROR_ETIMEOUT = 0x816D8007,
  SCE_MIRANDA_ARCH_ERROR_EALREADYINITIALIZED = 0x816D8008,
  SCE_MIRANDA_ARCH_ERROR_ENOTINITIALIZED = 0x816D8009,
  SCE_MIRANDA_ARCH_ERROR_EBROKEN_MESSAGE = 0x816D800A,
  SCE_MIRANDA_ARCH_ERROR_EABORTED = 0x816D800B,
  SCE_MIRANDA_ARCH_ERROR_EBUSY = 0x816D800C,
  SCE_MIRANDA_ARCH_ERROR_INTERNAL = 0x816D82FF,
  SCE_MIRANDA_EXT_ERROR_NOT_INITIALIZED = 0x816D8301,
  SCE_MIRANDA_EXT_ERROR_ALREADY_INITIALIZED = 0x816D8302,
  SCE_MIRANDA_EXT_ERROR_NOT_TERMINATED = 0x816D8303,
  SCE_MIRANDA_EXT_ERROR_INVALID_ARGUMENT = 0x816D8304,
  SCE_MIRANDA_EXT_ERROR_ABORTED = 0x816D8305,
  SCE_MIRANDA_EXT_ERROR_TIME_OUT = 0x816D8306,
  SCE_MIRANDA_EXT_ERROR_OUT_OF_MEMORY = 0x816D8307,
  SCE_MIRANDA_EXT_ERROR_BAD_REQUEST = 0x816D8308,
  SCE_MIRANDA_EXT_ERROR_INVALID_NAME_LENGTH = 0x816D8309,
  SCE_MIRANDA_EXT_ERROR_UNEXPECTED = 0x816D830A,
  SCE_MIRANDA_EXT_ERROR_NOT_READY = 0x816D830B,
  SCE_MIRANDA_EXT_ERROR_QUEUE_FULL = 0x816D830C,
  SCE_MIRANDA_EXT_ERROR_QUEUE_EMPTY = 0x816D830D,
  SCE_MIRANDA_EXT_ERROR_INTERNAL = 0x816D85FF,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_NOT_INITIALIZED = 0x816D8601,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_NOT_TERMINATED = 0x816D8602,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_INVALID_ARGUMENT = 0x816D8603,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_OUT_OF_MEMORY = 0x816D8604,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_BAD_REQUEST = 0x816D8605,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_UNEXPECTED = 0x816D8606,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_MSPACE_CREATION_FAILED = 0x816D8607,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_SESSION_DESCRIPTION_BUF_SIZE_TOO_SMALL = 0x816D8608,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_SDP_STRINGIZE_FAILED = 0x816D8609,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_CREATE_OFFER_FAILED = 0x816D860A,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_CREATE_ANSWER_FAILED = 0x816D860B,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_SET_LOCAL_DESCRIPTION_FAILED = 0x816D860C,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_SET_REMOTE_DESCRIPTION_FAILED = 0x816D860D,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_LOCAL_DESCRIPTION_NOT_FOUND = 0x816D860E,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_REMOTE_DESCRIPTION_NOT_FOUND = 0x816D860F,
  SCE_MIRANDA_SCE_WEBRTC_ERROR_INTERNAL = 0x816D87FF,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_NOMEM = 0x816D8801,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_INVALID_ARGUMENT = 0x816D8802,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_NOT_INITIALIZED = 0x816D8803,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_ALREADY_INITIALIZED = 0x816D8804,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_SOCKET = 0x816D8805,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_INVALID_RECEIVED_DATA = 0x816D8806,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_INVALID_IPC_ASYNC_MESSAGE = 0x816D8807,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_INVALID_SDP_TYPE = 0x816D8808,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_INVALID_SDP = 0x816D8809,
  SCE_MIRANDA_SCE_WEBRTC_COMMON_ERROR_INTERNAL = 0x816D88FF,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_NOMEM = 0x816D8A01,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_INVALID_ARGUMENT = 0x816D8A02,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_NOT_INITIALIZED = 0x816D8A03,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_ALREADY_INITIALIZED = 0x816D8A04,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_INVALID_PARAMETER = 0x816D8A05,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_TIMEOUT = 0x816D8A06,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_INSUFFICIENT_BUFFER_SIZE = 0x816D8A07,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_EXCEED_BUFFER = 0x816D8A08,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_INSUFFICIENT_FREE_BUFFER = 0x816D8A09,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_EXCEED_RECORD_INDEX = 0x816D8A0A,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_EMPTY_RECORD = 0x816D8A0B,
  SCE_MIRANDA_SCE_WEBRTC_SHM_ERROR_INTERNAL = 0x816D8AFF,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_NOMEM = 0x816D8C01,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_INVALID_ARGUMENT = 0x816D8C02,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_NOT_INITIALIZED = 0x816D8C03,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_ALREADY_INITIALIZED = 0x816D8C04,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_API_NOT_SUPPORTED = 0x816D8C05,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_IPC_INVALID_SERVER = 0x816D8C06,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_IPC_ASYNC_MESSAGE_BUF_SIZE_NOT_ENOUGH = 0x816D8C07,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_IPC_INVALID_RECEIVED_DATA_SIZE = 0x816D8C08,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_SHM_STREAM_NOT_FOUND = 0x816D8C09,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_SHM_INVALID_AUDIO_FRAME_RECEIVED = 0x816D8C0A,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_WEBRTC_CONTEXT_NOT_FOUND = 0x816D8C0B,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_WEBRTC_CONTEXT_ALREADY_EXIST = 0x816D8C0C,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_PEER_CONNECTION_NOT_FOUND = 0x816D8C0D,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_SDP_TRANSCEIVER_NOT_FOUND = 0x816D8C0E,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_CALLBACK_NOT_FOUND = 0x816D8C0F,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_RTP_SENDER_NOT_FOUND = 0x816D8C10,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_DATA_CHANNEL_SOURCE_NOT_FOUND = 0x816D8C11,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_DATA_CHANNEL_NOT_FOUND = 0x816D8C12,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_AUDIO_TRACK_SINK_NOT_FOUND = 0x816D8C13,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_LOCAL_AUDIO_TRACK_NOT_FOUND = 0x816D8C14,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_LOCAL_STREAM_NOT_FOUND = 0x816D8C15,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_REMOTE_AUDIO_TRACK_NOT_FOUND = 0x816D8C16,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_REMOTE_STREAM_NOT_FOUND = 0x816D8C17,
  SCE_MIRANDA_SCE_WEBRTC_CLIENT_ERROR_INTERNAL = 0x816D8CFF,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_NOMEM = 0x816D8E01,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_INVALID_ARGUMENT = 0x816D8E02,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_NOT_INITIALIZED = 0x816D8E03,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_ALREADY_INITIALIZED = 0x816D8E04,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_API_NOT_SUPPORTED = 0x816D8E05,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_SIGNALING_THREAD_ALREADY_CREATED = 0x816D8E06,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_SIGNALING_THREAD_NOT_CREATED = 0x816D8E07,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_SIGNALING_THREAD_STOPPING = 0x816D8E08,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_IPMI_SESSION_FULL = 0x816D8E09,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_SHM_STREAM_NOT_FOUND = 0x816D8E0A,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_SHM_INVALID_AUDIO_FRAME_RECEIVED = 0x816D8E0B,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_IPC_SESSION_NOT_FOUND = 0x816D8E0C,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_WEBRTC_CONTEXT_NOT_FOUND = 0x816D8E0D,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_WEBRTC_CONTEXT_ALREADY_EXIST = 0x816D8E0E,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_PEER_CONNECTION_NOT_FOUND = 0x816D8E0F,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_SDP_TRANSCEIVER_NOT_FOUND = 0x816D8E10,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_CALLBACK_NOT_FOUND = 0x816D8E11,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_RTP_SENDER_NOT_FOUND = 0x816D8E12,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_DATA_CHANNEL_SOURCE_NOT_FOUND = 0x816D8E13,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_DATA_CHANNEL_NOT_FOUND = 0x816D8E14,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_AUDIO_TRACK_SINK_NOT_FOUND = 0x816D8E15,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_LOCAL_AUDIO_TRACK_NOT_FOUND = 0x816D8E16,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_LOCAL_STREAM_NOT_FOUND = 0x816D8E17,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_REMOTE_AUDIO_TRACK_NOT_FOUND = 0x816D8E18,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_REMOTE_STREAM_NOT_FOUND = 0x816D8E19,
  SCE_MIRANDA_SCE_WEBRTC_SERVER_ERROR_INTERNAL = 0x816D8EFF,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_ALREADY_INITIALIZED = 0x816D9101,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_NOT_INITIALIZED = 0x816D9102,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_OUT_OF_MEMORY = 0x816D9103,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_INVALID_ARGUMENT = 0x816D9104,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_NOT_READY = 0x816D9105,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_BAD_REQUEST = 0x816D9106,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_UNEXPECTED = 0x816D9107,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_TIME_OUT = 0x816D9108,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_BROKEN_MESSAGE = 0x816D9109,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_ABORTED = 0x816D910A,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_INVALID_DATACHANNEL_LABEL_FORMAT = 0x816D910B,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_UNEXPECTED_DC_API_RESPONSE_TYPE = 0x816D910C,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_API_400 = 0x816D910D,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_API_401 = 0x816D910E,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_API_503 = 0x816D910F,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_API_OTHER = 0x816D9110,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_API_400 = 0x816D9111,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_API_401 = 0x816D9112,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_API_404 = 0x816D9113,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_API_OTHER = 0x816D9114,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_API_400 = 0x816D9115,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_API_401 = 0x816D9116,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_API_404 = 0x816D9117,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_API_OTHER = 0x816D9118,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_API_400 = 0x816D9119,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_API_401 = 0x816D911A,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_API_404 = 0x816D911B,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_API_OTHER = 0x816D911C,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_PEER_API_400 = 0x816D911D,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_PEER_API_401 = 0x816D911E,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_PEER_API_403 = 0x816D911F,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_PEER_API_404 = 0x816D9120,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_GET_BRIDGE_PEER_API_OTHER = 0x816D9121,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_PEER_API_400 = 0x816D9122,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_PEER_API_401 = 0x816D9123,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_PEER_API_403 = 0x816D9124,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_PEER_API_404 = 0x816D9125,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_DELETE_BRIDGE_PEER_API_OTHER = 0x816D9126,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_OFFER_API_400 = 0x816D9127,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_OFFER_API_401 = 0x816D9128,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_OFFER_API_403 = 0x816D9129,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_OFFER_API_404 = 0x816D912A,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_OFFER_API_OTHER = 0x816D912B,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_ANSWER_API_400 = 0x816D912C,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_ANSWER_API_401 = 0x816D912D,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_ANSWER_API_403 = 0x816D912E,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_ANSWER_API_404 = 0x816D912F,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_ANSWER_API_409 = 0x816D9130,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_RTCBRIDGE_POST_BRIDGE_PEER_ANSWER_API_OTHER = 0x816D9131,
  SCE_MIRANDA_BRIDGE_CLIENT_ERROR_INTERNAL = 0x816D91FF,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_OUT_OF_MEMORY = 0x816D9201,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_INVALID_ARGUMENT = 0x816D9202,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_NOT_READY = 0x816D9203,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_BAD_REQUEST = 0x816D9204,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_UNEXPECTED = 0x816D9205,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_TIMEOUT = 0x816D9206,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_ALREADY_INITIALIZED = 0x816D9207,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_BROKEN_MESSAGE = 0x816D9208,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_ABORTED = 0x816D9209,
  SCE_MIRANDA_BRIDGE_MANAGEMENT_ERROR_INTERNAL = 0x816D92FF,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_OUT_OF_MEMORY = 0x816D9301,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_INVALID_ARGUMENT = 0x816D9302,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_NOT_READY = 0x816D9303,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_BAD_REQUEST = 0x816D9304,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_UNEXPECTED = 0x816D9305,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_TIMEOUT = 0x816D9306,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_ALREADY_INITIALIZED = 0x816D9307,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_NOT_INITIALIZED = 0x816D9308,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_BROKEN_MESSAGE = 0x816D9309,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_ABORTED = 0x816D930A,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_E2E_SIGNALING_SERVICE_NOT_EXIST = 0x816D930B,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_E2E_AUDIO_SEND_TRACK_NOT_EXIST = 0x816D930C,
  SCE_MIRANDA_E2E_SIGNALING_ERROR_INTERNAL = 0x816D93FF,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_OUT_OF_MEMORY = 0x816D9401,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_INVALID_ARGUMENT = 0x816D9402,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_NOT_READY = 0x816D9403,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_BAD_REQUEST = 0x816D9404,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_UNEXPECTED = 0x816D9405,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_TIMEOUT = 0x816D9406,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_NOT_INITIALIZED = 0x816D9407,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_ALREADY_INITIALIZED = 0x816D9408,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_BROKEN_MESSAGE = 0x816D9409,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_ABORTED = 0x816D940A,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_DISCONNECTED_BY_ICE_CONNECTION_STATE_FAILED = 0x816D940B,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_DISCONNECTED_BY_BRIDGE_MAINTENANCE = 0x816D940C,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_DISCONNECTED_BY_UNKNOWN_ERROR = 0x816D940D,
  SCE_MIRANDA_TOPOLOGY_MANAGEMENT_ERROR_INTERNAL = 0x816D95FF,
  SCE_MIRANDA_NETWORK_UTILITY_ERROR_NOT_INITIALIZED = 0x816D9601,
  SCE_MIRANDA_NETWORK_UTILITY_ERROR_NOT_TERMINATED = 0x816D9602,
  SCE_MIRANDA_NETWORK_UTILITY_ERROR_OUT_OF_MEMORY = 0x816D9603,
  SCE_MIRANDA_NETWORK_UTILITY_ERROR_ABORTED = 0x816D9604,
  SCE_MIRANDA_NETWORK_UTILITY_ERROR_BAD_REQUEST = 0x816D9605,
  SCE_MIRANDA_NETWORK_UTILITY_ERROR_INVALID_ARGUMENT = 0x816D9606,
  SCE_MIRANDA_NETWORK_UTILITY_ERROR_INTERNAL = 0x816D96FF,
  SCE_MIRANDA_NP_WEBAPI_ERROR_ALREADY_INITIALIZED = 0x816D9701,
  SCE_MIRANDA_NP_WEBAPI_ERROR_NOT_INITIALIZED = 0x816D9702,
  SCE_MIRANDA_NP_WEBAPI_ERROR_INVALID_ARGUMENT = 0x816D9703,
  SCE_MIRANDA_NP_WEBAPI_ERROR_TOO_MANY_LIB_CONTEXT = 0x816D9704,
  SCE_MIRANDA_NP_WEBAPI_ERROR_TOO_MANY_USER_CONTEXT = 0x816D9705,
  SCE_MIRANDA_NP_WEBAPI_ERROR_TOO_MANY_REQUEST = 0x816D9706,
  SCE_MIRANDA_NP_WEBAPI_ERROR_LIB_CONTEXT_NOT_FOUND = 0x816D9707,
  SCE_MIRANDA_NP_WEBAPI_ERROR_USER_CONTEXT_NOT_FOUND = 0x816D9708,
  SCE_MIRANDA_NP_WEBAPI_ERROR_REQUEST_NOT_FOUND = 0x816D9709,
  SCE_MIRANDA_NP_WEBAPI_ERROR_OUT_OF_MEMORY = 0x816D970A,
  SCE_MIRANDA_NP_WEBAPI_ERROR_ABORTED = 0x816D970B,
  SCE_MIRANDA_NP_WEBAPI_ERROR_INTERNAL = 0x816D98FF,
  SCE_MIRANDA_STATS_ERROR_NOT_INITIALIZED = 0x816D9901,
  SCE_MIRANDA_STATS_ERROR_ALREADY_INITIALIZED = 0x816D9902,
  SCE_MIRANDA_STATS_ERROR_INVALID_ARGUMENT = 0x816D9903,
  SCE_MIRANDA_STATS_ERROR_OUT_OF_MEMORY = 0x816D9904,
  SCE_MIRANDA_STATS_ERROR_DATA_SIZE_TOO_BIG = 0x816D9905,
  SCE_MIRANDA_STATS_ERROR_TOO_MANY_STATS_REPORT = 0x816D9906,
  SCE_MIRANDA_STATS_ERROR_STATS_REPORT_NOT_EXIST = 0x816D9907,
  SCE_MIRANDA_STATS_ERROR_STATS_PROVIDER_ALREADY_EXIST = 0x816D9908,
  SCE_MIRANDA_STATS_ERROR_INTERNAL = 0x816D99FF,
  SCE_MIRANDA_SCE_WEBRTC_NON_IPC_CLIENT_ERROR_NOT_INITIALIZED = 0x816D9A01,
  SCE_MIRANDA_SCE_WEBRTC_NON_IPC_CLIENT_ERROR_ALREADY_INITIALIZED = 0x816D9A02,
  SCE_MIRANDA_SCE_WEBRTC_NON_IPC_CLIENT_ERROR_INVALID_ARGUMENT = 0x816D9A03,
  SCE_MIRANDA_SCE_WEBRTC_NON_IPC_CLIENT_ERROR_OUT_OF_MEMORY = 0x816D9A04,
  SCE_MIRANDA_SCE_WEBRTC_NON_IPC_CLIENT_ERROR_BAD_REQUEST = 0x816D9A05,
  SCE_MIRANDA_SCE_WEBRTC_NON_IPC_CLIENT_ERROR_INTERNAL = 0x816D9BFF,
  SCE_MIRANDA_NP_UTILITY_ERROR_NOT_INITIALIZED = 0x816D9C01,
  SCE_MIRANDA_NP_UTILITY_ERROR_INVALID_ARGUMENT = 0x816D9C02,
  SCE_MIRANDA_NP_UTILITY_ERROR_INTERNAL = 0x816D9CFF,
  SCE_MIRANDA_WEBRTC_ERROR_NOT_INITIALIZED = 0x816DA601,
  SCE_MIRANDA_WEBRTC_ERROR_NOT_TERMINATED = 0x816DA602,
  SCE_MIRANDA_WEBRTC_ERROR_ALREADY_INITIALIZED = 0x816DA603,
  SCE_MIRANDA_WEBRTC_ERROR_INVALID_ARGUMENT = 0x816DA604,
  SCE_MIRANDA_WEBRTC_ERROR_BAD_REQUEST = 0x816DA605,
  SCE_MIRANDA_WEBRTC_ERROR_AUDIO_CACHE_NOT_FOUND = 0x816DA606,
  SCE_MIRANDA_WEBRTC_ERROR_NO_ENOUGH_BUFFER = 0x816DA607,
  SCE_DEATHSTAR_ERROR_UNKNOWN = 0x816E0000,
  SCE_DEATHSTAR_ERROR_TIMEOUT = 0x816E0001,
  SCE_DEATHSTAR_ERROR_INVALID_CONFIGURATION = 0x816E0002,
  SCE_DEATHSTAR_ERROR_UNEXPECTED_SERVER_ERROR = 0x816E0003,
  SCE_DEATHSTAR_ERROR_NO_SUCH_ROUTE = 0x816E0004,
  SCE_DEATHSTAR_ERROR_UNEXPECTED_JS_ERROR = 0x816E0005,
  SCE_DEATHSTAR_ERROR_UNIMPLEMENTED = 0x816E0006,
  SCE_DEATHSTAR_ERROR_I18N_FAILED = 0x816E0007,
  SCE_DEATHSTAR_ERROR_AVATAR_INDEX_MISMATCH = 0x816E0008,
  SCE_DEATHSTAR_ERROR_INVALID_SSO_AFTER_PW_RESET = 0x816E0009,
  SCE_DEATHSTAR_ERROR_INVALID_SSO = 0x816E000A,
  SCE_DEATHSTAR_ERROR_UNEXPECTED_VSH_ERROR = 0x816E000B,
  SCE_DEATHSTAR_ERROR_PREFETCH_SPRITE = 0x816E000C,
  SCE_DEATHSTAR_ERROR_NO_ENTITLEMENT_ID = 0x816E000D,
  SCE_VNA_ERROR_NOMEM = 0x816F8000,
  SCE_VNA_ERROR_TIMER_CREATE = 0x816F8001,
  SCE_VNA_ERROR_ALREADY = 0x816F8002,
  SCE_VNA_ERROR_INVALID_OPERATION = 0x816F8003,
  SCE_VNA_ERROR_INVALID_ARGUMENT = 0x816F8004,
  SCE_VNA_ERROR_NOT_FOUND = 0x816F8005,
  SCE_VNA_ERROR_INTERNAL = 0x816F8006,
  SCE_VNA_ERROR_NOT_INITIALIZED = 0x816F8007,
  SCE_VNA_ERROR_INVALID_USER_STATE = 0x816F8008,
  SCE_VNA_ERROR_INVALID_USER_ID = 0x816F8009,
  SCE_VNA_ERROR_CORE_FATAL = 0x816F800A,
  SCE_VNA_ERROR_DETECTOR_NOMEM = 0x816F800B,
  SCE_VNA_ERROR_DETECTOR_NOT_INITIALIZED = 0x816F800C,
  SCE_VNA_ERROR_DETECTOR_INVALID_ARGUMENT = 0x816F800D,
  SCE_VNA_ERROR_DETECTOR_DICTIONARY_BUFFER_OVER = 0x816F800E,
  SCE_VNA_ERROR_DETECTOR_VAD_NOT_INITIALIZED = 0x816F800F,
  SCE_VNA_ERROR_DETECTOR_VAD_INVALID_ARGUMENT = 0x816F8010,
  SCE_VNA_ERROR_DETECTOR_VOICE_COMMAND_INVALID_ARGUMENT = 0x816F8011,
  SCE_VNA_ERROR_DETECTOR_VOICE_COMMAND_NOT_SUPPORTED_LANGUAGE = 0x816F8012,
  SCE_VNA_ERROR_ANA_TTS_DOWNLOAD_QUEUE_IS_OVER = 0x816F8013,
  SCE_VNA_ERROR_ANA_HASHED_ACCOUNT_ID_IS_INVALID = 0x816F8014,
  SCE_VNA_ERROR_ANA_INVALID_INITIALIZE_PARAMETER = 0x816F8015,
  SCE_VNA_ERROR_ANA_NOT_SUPPORTED = 0x816F8016,
  SCE_VNA_ERROR_ANA_OPEN_TIMEOUT = 0x816F8017,
  SCE_VNA_ERROR_ANA_ACCESS_TOKEN_TIMEOUT = 0x816F8018,
  SCE_VNA_ERROR_ANA_ACTIVATE_TIMEOUT = 0x816F8019,
  SCE_VNA_ERROR_ANA_RECOGNITION_TIMEOUT = 0x816F801A,
  SCE_VNA_ERROR_ANA_NOMEM = 0x816F801B,
  SCE_VNA_ERROR_ANA_INVALID_ARGUMENT = 0x816F801C,
  SCE_VNA_ERROR_ANA_INVALID_RECOGNITION_MODE = 0x816F801D,
  SCE_VNA_ERROR_ANA_WEBSOCKET_NOT_CONNECTED = 0x816F801E,
  SCE_VNA_ERROR_ANA_OFFLINE = 0x816F801F,
  SCE_VNA_ERROR_ANA_HASHED_ACCOUNT_ID_TIMEOUT = 0x816F8020,
  SCE_VNA_ERROR_ANA_MAX_DUMP_FILE = 0x816F8021,
  SCE_VNA_ERROR_ANA_NOT_SIGNED_IN = 0x816F8022,
  SCE_VNA_ERROR_ANA_TOO_LARGE_ASR_TEXT_SIZE = 0x816F8023,
  SCE_VNA_ERROR_ANA_INCORRECT_SEQUENCE = 0x816F8024,
  SCE_VNA_ERROR_ANA_SERVER_ERROR = 0x816F8025,
  SCE_VNA_ERROR_ANA_INVALID_SETTINGS = 0x816F8026,
  SCE_VNA_ERROR_TTS_COULDNT_CREATE_CACHE_FILE = 0x816F8027,
  SCE_VNA_ERROR_TTS_SPEECH_REQUEST_QUEUE_IS_OVER = 0x816F8028,
  SCE_VNA_ERROR_TTS_INVALID_READ_OPERATION = 0x816F8029,
  SCE_VNA_ERROR_TTS_INVALID_WRITE_OPERATION = 0x816F802A,
  SCE_VNA_ERROR_TTS_COULDNT_OPEN_CACHE_FILE = 0x816F802B,
  SCE_VNA_ERROR_TTS_FAILED_TO_SERIARIZE_META = 0x816F802C,
  SCE_VNA_ERROR_TTS_FAILED_TO_DESERIARIZE_META = 0x816F802D,
  SCE_VNA_ERROR_TTS_NOMEM = 0x816F802E,
  SCE_VNA_ERROR_TTS_INVALID_META_DATA = 0x816F802F,
  SCE_VNA_ERROR_TTS_DOWNLOAD_INTERRUPTED = 0x816F8030,
  SCE_VNA_ERROR_TTS_HASH_COLLISTION_DETECTED = 0x816F8031,
  SCE_VNA_ERROR_TTS_PLAY_INTERRUPTED = 0x816F8032,
  SCE_VNA_ERROR_TTS_FILE_BROKEN = 0x816F8033,
  SCE_VNA_ERROR_TTS_REQUEST_TIMED_OUT = 0x816F8034,
  SCE_VNA_ERROR_TTS_PROCESSING = 0x816F8035,
  SCE_VNA_ERROR_TTS_OFFLINE = 0x816F8036,
  SCE_VNA_ERROR_TTS_SERVER_ERROR = 0x816F8037,
  SCE_VNS_ERROR_TTS_TOO_LARGE_DOWNLOAD_SIZE = 0x816F8038,
  SCE_VNS_ERROR_TTS_INVALID_DOWNLOAD_SIZE = 0x816F8039,
  SCE_VNA_ERROR_WS_INVALID_PARAM = 0x816FA000,
  SCE_VNA_ERROR_WS_NOMEM = 0x816FA001,
  SCE_VNA_ERROR_WS_INVALID_OPERATION = 0x816FA002,
  SCE_VNA_ERROR_WS_INVALID_PAYLOAD = 0x816FA003,
  SCE_VNA_ERROR_WS_NOT_SUPPORTED = 0x816FA004,
  SCE_VNA_ERROR_WS_INVALID_HTTP_RESPNSE = 0x816FA005,
  SCE_VNA_ERROR_WS_HTTP_STATUS_CODE = 0x816FA006,
  SCE_VNA_ERROR_WS_INVALID_SOCK = 0x816FA007,
  SCE_VNA_ERROR_WS_INTERNAL = 0x816FA008,
  SCE_VNA_ERROR_WS_CLOSED_BY_SERVER = 0x816FA009,
  SCE_VNA_ERROR_WS_DISCONNECTED_BY_SERVER = 0x816FA00A,
  SCE_VNA_ERROR_WS_INVALID_URI = 0x816FA00B,
  SCE_VNA_ERROR_WS_TOO_LARGE_RECV_TEXT_SIZE = 0x816FA00C,
  SCE_RNPS_NM_VSH_VIDEO_ERROR_UNKNOWN = 0x81700100,
  SCE_RNPS_NM_VSH_VIDEO_ERROR_INVALID_PARAMETER = 0x81700101,
  SCE_RNPS_NM_VSH_REGISTRY_ERROR_INVALID_PARAMETER = 0x81700300,
  SCE_RNPS_NM_VSH_REGISTRY_ERROR_OUT_OF_RANGE = 0x81700301,
  SCE_RNPS_NM_VSH_USER_ERROR_INVALID_PARAMETER = 0x81700400,
  SCE_RNPS_NM_VSH_PSN_ERROR_UNKNOWN = 0x81700500,
  SCE_RNPS_NM_VSH_PSN_ERROR_NOT_INITIALIZED = 0x81700501,
  SCE_RNPS_NM_VSH_PSN_ERROR_CANCELLED = 0x81700502,
  SCE_RNPS_NM_VSH_PSN_ERROR_NOT_PERMITTED = 0x81700503,
  SCE_RNPS_NM_VSH_PSN_ERROR_INVALID_PARAMETER = 0x81700504,
  SCE_RNPS_NM_VSH_PSN_ERROR_BUSY = 0x81700505,
  SCE_RNPS_NM_VSH_PSN_ACCOUNT_ERROR_GET_PASSWORD = 0x81700600,
  SCE_RNPS_NM_VSH_PSN_UTILITY_ERROR_INVALID_NP_TITLE_ID = 0x81700800,
  SCE_RNPS_NM_VSH_SYSTEM_ERROR_UNKNOWN = 0x81701000,
  SCE_RNPS_NM_VSH_SYSTEM_ERROR_NOT_INITIALIZED = 0x81701001,
  SCE_RNPS_NM_VSH_SYSTEM_ERROR_INVALID_PARAMETER = 0x81701002,
  SCE_RNPS_NM_VSH_SYSTEM_ERROR_CANCELLED = 0x81701003,
  SCE_RNPS_NM_VSH_DATABASE_ERROR_UNKNOWN = 0x81701100,
  SCE_RNPS_NM_VSH_DATABASE_ERROR_INVALID_PARAMETER = 0x81701101,
  SCE_RNPS_NM_VSH_DATABASE_ERROR_CANCELED = 0x81701102,
  SCE_RNPS_NM_VSH_DATABASE_ERROR_NOT_SUPPORTED = 0x81701103,
  SCE_RNPS_NM_VSH_DATABASE_ERROR_INVALID_OPERATION = 0x81701104,
  SCE_RNPS_NM_VSH_DATABASE_ERROR_ARGUMENT_OUT_OF_RANGE = 0x81701105,
  SCE_RNPS_NM_VSH_DATABASE_ERROR_ARGUMENT_NULL = 0x81701106,
  SCE_RNPS_NM_VSH_DATABASE_ERROR_INVALID_PROGRAM = 0x81701107,
  SCE_RNPS_NM_VSH_PSNOW_ERROR_UNKNOWN = 0x81701200,
  SCE_RNPS_NM_VSH_PSNOW_ERROR_INVALID_PARAMETER = 0x81701201,
  SCE_RNPS_NM_VSH_PSNOW_ERROR_TIMEOUT = 0x81701202,
  SCE_RNPS_NM_VSH_PSNOW_ERROR_BUSY = 0x81701203,
  SCE_RNPS_NM_VSH_PSNOW_ERROR_INTERNAL = 0x81701204,
  SCE_RNPS_NM_VSH_PSNOW_ERROR_CANCELLED = 0x81701205,
  SCE_RNPS_NM_VSH_APPLICATION_ERROR_UNKNOWN = 0x81701300,
  SCE_RNPS_NM_VSH_APPLICATION_ERROR_NOT_SUPPORTED = 0x81701301,
  SCE_RNPS_NM_VSH_APPLICATION_ERROR_INVALID_URL = 0x81701302,
  SCE_RNPS_NM_VSH_TESTUTILITY_ERROR_UNKNOWN = 0x81701400,
  SCE_RNPS_NM_VSH_TESTUTILITY_ERROR_FILE_DOES_NOT_EXIST = 0x81701401,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_GENERAL = 0x81720100,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_INVALID_ARGUMENT = 0x81720101,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_OUT_OF_MEMORY = 0x81720102,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_OUT_OF_RANGE = 0x81720103,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_NOT_FOUND = 0x81720104,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_USB_STORAGE_DISCONNECTED = 0x81720105,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_CANNOT_OPEN_THUMBNAILDATA = 0x81720106,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_CANNOT_READ_THUMBNAILDATA = 0x81720107,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_CANNOT_CLOSE_THUMBNAILDATA = 0x81720108,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_CANNOT_RAED_META = 0x81720109,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_CANNOT_OPEN_DIRECTORY = 0x8172010A,
  SCE_FILE_SELECTOR_ADVANCE_ERROR_NOT_FOUND_FILE = 0x8172010B,
  SCE_VSH_CSHARP_WRAPPER_REGISTRY_ERROR_INVALID_UTF8_STRING = 0x81730100,
  SCE_OPUS_DEC_ERROR_INVALID_STATE_POINTER = 0x81740000,
  SCE_OPUS_DEC_ERROR_INVALID_STATE = 0x81740001,
  SCE_OPUS_DEC_ERROR_INVALID_SAMPLE_RATE = 0x81740002,
  SCE_OPUS_DEC_ERROR_INVALID_NUM_CHANNELS = 0x81740003,
  SCE_OPUS_DEC_ERROR_CREATE_FAILED = 0x81740004,
  SCE_OPUS_DEC_ERROR_INVALID_DATA_POINTER = 0x81740006,
  SCE_OPUS_DEC_ERROR_INVALID_DATA_LENGTH = 0x81740007,
  SCE_OPUS_DEC_ERROR_INVALID_PCM_BUFFER_POINTER = 0x81740008,
  SCE_OPUS_DEC_ERROR_INVALID_PCM_BUFFER_LENGTH = 0x81740009,
  SCE_OPUS_DEC_ERROR_INVALID_PRIORITY = 0x8174000A,
  SCE_OPUS_DEC_ERROR_DECODE_FAILED = 0x8174000B,
  SCE_OPUS_DEC_ERROR_INVALID_GAIN = 0x8174000C,
  SCE_OPUS_DEC_ERROR_BAD_ARGUMENT = 0x8174000D,
  SCE_OPUS_DEC_ERROR_REQUEST_NOT_SUPPORTED = 0x8174000E,
  SCE_OPUS_DEC_ERROR_RESET_FAILED = 0x8174000F,
  SCE_OPUS_DEC_ERROR_INVALID_INBAND_FEC = 0x81740010,
  SCE_OPUS_DEC_ERROR_INVALID_LOST_FLAG = 0x81740011,
  SCE_OPUS_DEC_ERROR_IN_PROGRESS = 0x81740012,
  SCE_OPUS_DEC_ERROR_RETRY = 0x81740013,
  SCE_OPUS_DEC_ERROR_CANCELLED = 0x81740014,
  SCE_GIC_ERROR_NOT_SUPPORTED = 0x81750002,
  SCE_GIC_ERROR_INVALID = 0x81750016,
  SCE_GIC_ERROR_FATAL = 0x817500FF,
  SCE_RNPS_ARCRUNNER_ERROR_JS_EXCEPTION = 0x81760000,
  SCE_RNPS_ARCRUNNER_ERROR_API_EXCEPTION = 0x81760001,
  SCE_OPUS_SILK_ENC_ERROR_RESET_FAILED = 0x81770000,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_STATE_POINTER = 0x81770001,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_PCM_POINTER = 0x81770002,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_FRAME_SIZE = 0x81770003,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_DATA_POINTER = 0x81770004,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_MAX_DATA_BYTES = 0x81770005,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_REQUEST_POINTER = 0x81770006,
  SCE_OPUS_SILK_ENC_ERROR_REQUEST_NOT_SUPPORTED = 0x81770007,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_BITRATE = 0x81770008,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_VBR = 0x81770009,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_VBR_CONSTRAINT = 0x8177000A,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_FORCE_CHANNELS = 0x8177000B,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_NUM_CHANNELS = 0x8177000C,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_BANDWIDTH = 0x8177000D,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_MAX_BANDWIDTH = 0x8177000E,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_SAMPLE_RATE = 0x8177000F,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_APPLICATION = 0x81770010,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_SIGNAL = 0x81770011,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_COMPLEXITY = 0x81770012,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_PACKET_LOSS_PERC = 0x81770013,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_PRIORITY = 0x81770014,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_STATE = 0x81770015,
  SCE_OPUS_SILK_ENC_ERROR_INITIALIZE_FAILED = 0x81770016,
  SCE_OPUS_SILK_ENC_ERROR_ENCODE_FAILED = 0x81770017,
  SCE_OPUS_SILK_ENC_ERROR_BAD_ARGUMENT = 0x81770018,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_INBAND_FEC = 0x81770019,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_DTX = 0x8177001A,
  SCE_OPUS_SILK_ENC_ERROR_INVALID_FORCE_MODE = 0x8177001B,
  SCE_OPUS_SILK_ENC_ERROR_IN_PROGRESS = 0x8177001C,
  SCE_OPUS_SILK_ENC_ERROR_RETRY = 0x8177001D,
  SCE_OPUS_SILK_ENC_ERROR_CANCELLED = 0x8177001E,
  SCE_HTTPCACHE_ERROR_UNKNOWN = 0x817A0000,
  SCE_HTTPCACHE_ERROR_OUT_OF_MEMORY = 0x817A0001,
  SCE_HTTPCACHE_ERROR_OUT_OF_SIZE = 0x817A0002,
  SCE_HTTPCACHE_ERROR_INVALID_ID = 0x817A0011,
  SCE_HTTPCACHE_ERROR_INVALID_VALUE = 0x817A0012,
  SCE_HTTPCACHE_ERROR_INVALID_USER_ID = 0x817A0013,
  SCE_HTTP2_ERROR_BEFORE_INIT = 0x817B1001,
  SCE_HTTP2_ERROR_BUSY = 0x817B1021,
  SCE_HTTP2_ERROR_OUT_OF_MEMORY = 0x817B1022,
  SCE_HTTP2_ERROR_NOT_FOUND = 0x817B1025,
  SCE_HTTP2_ERROR_UNKNOWN_SCHEME = 0x817B1061,
  SCE_HTTP2_ERROR_BAD_RESPONSE = 0x817B1064,
  SCE_HTTP2_ERROR_BEFORE_SEND = 0x817B1065,
  SCE_HTTP2_ERROR_AFTER_SEND = 0x817B1066,
  SCE_HTTP2_ERROR_TIMEOUT = 0x817B1068,
  SCE_HTTP2_ERROR_UNKNOWN_AUTH_TYPE = 0x817B1069,
  SCE_HTTP2_ERROR_INVALID_VERSION = 0x817B106A,
  SCE_HTTP2_ERROR_TOO_LARGE_RESPONSE_HEADER = 0x817B1073,
  SCE_HTTP2_ERROR_INSUFFICIENT_STACKSIZE = 0x817B1076,
  SCE_HTTP2_ERROR_EAGAIN = 0x817B1079,
  SCE_HTTP2_ERROR_ABORTED = 0x817B1080,
  SCE_HTTP2_ERROR_PROXY = 0x817B1084,
  SCE_HTTP2_ERROR_INVALID_ID = 0x817B1100,
  SCE_HTTP2_ERROR_OUT_OF_SIZE = 0x817B1104,
  SCE_HTTP2_ERROR_INVALID_VALUE = 0x817B11FE,
  SCE_HTTP2_ERROR_DATA_FRAME_INVALID_FORMAT = 0x817B1200,
  SCE_HTTP2_ERROR_HEADERS_FRAME_INVALID_FORMAT = 0x817B1201,
  SCE_HTTP2_ERROR_RST_STREAM_FRAME_INVALID_FORMAT = 0x817B1202,
  SCE_HTTP2_ERROR_PUSH_PROMISE_FRAME_INVALID_FORMAT = 0x817B1203,
  SCE_HTTP2_ERROR_SETTING_FRAME_INVALID_FORMAT = 0x817B1204,
  SCE_HTTP2_ERROR_PING_FRAME_INVALID_FORMAT = 0x817B1205,
  SCE_HTTP2_ERROR_GOAWAY_FRAME_INVALID_FORMAT = 0x817B1206,
  SCE_HTTP2_ERROR_WINDOW_UPDATE_FRAME_INVALID_FORMAT = 0x817B1207,
  SCE_HTTP2_ERROR_CONTINUATION_FRAME_INVALID_FORMAT = 0x817B1208,
  SCE_HTTP2_ERROR_FRAME_HEADER_INVALID_FORMAT = 0x817B1209,
  SCE_HTTP2_ERROR_REASON_NO_ERROR = 0x817B120A,
  SCE_HTTP2_ERROR_REASON_PROTOCOL = 0x817B120B,
  SCE_HTTP2_ERROR_REASON_INTERNAL = 0x817B120C,
  SCE_HTTP2_ERROR_REASON_FLOW_CONTROL = 0x817B120D,
  SCE_HTTP2_ERROR_REASON_SETTINGS_TIMEOUT = 0x817B120E,
  SCE_HTTP2_ERROR_REASON_STREAM_CLOSED = 0x817B120F,
  SCE_HTTP2_ERROR_REASON_FRAME_SIZE = 0x817B1210,
  SCE_HTTP2_ERROR_REASON_REFUSED_STREAM = 0x817B1211,
  SCE_HTTP2_ERROR_REASON_CANCEL = 0x817B1212,
  SCE_HTTP2_ERROR_REASON_COMPRESSION = 0x817B1213,
  SCE_HTTP2_ERROR_REASON_CONNECT = 0x817B1214,
  SCE_HTTP2_ERROR_REASON_ENHANCE_YOUR_CALM = 0x817B1215,
  SCE_HTTP2_ERROR_REASON_INADEQUATE_SECURITY = 0x817B1216,
  SCE_HTTP2_ERROR_REASON_HTTP_1_1_REQUIRED = 0x817B1217,
  SCE_HTTP2_ERROR_REASON_UNKNOWN = 0x817B1218,
  SCE_HTTP2_ERROR_COOKIE_INVALID_DOMAIN = 0x817B1219,
  SCE_HTTP2_ERROR_INVALID_DATA_FORMAT = 0x817B121A,
  SCE_HTTP2_ERROR_INSUFFICIENT_SSL_HEAPSIZE = 0x817B121C,
  SCE_HTTP2_ERROR_INSUFFICIENT_HEAPSIZE = 0x817B121D,
  SCE_HTTP2_ERROR_UNKNOWN_FRAME_TYPE = 0x817B121F,
  SCE_HTTP2_ERROR_CONNECT_TIMEOUT = 0x817B1221,
  SCE_HTTP2_ERROR_RECV_TIMEOUT = 0x817B1222,
  SCE_HTTP2_ERROR_SEND_TIMEOUT = 0x817B1223,
  SCE_HTTP2_ERROR_NULL_POINTER = 0x817B1225,
  SCE_HTTP2_ERROR_TOO_LARGE_HPACK_NUM = 0x817B1226,
  SCE_HTTP2_ERROR_NO_STATUS = 0x817B1227,
  SCE_HTTP2_ERROR_MEMSTAT_ERROR = 0x817B1228,
  SCE_HTTP2_ERROR_INFLATE = 0x817B1229,
  SCE_HTTP2_ERROR_PROHIBITED = 0x817B5224,
  SCE_RANDOM_ERROR_INVALID = 0x817C0016,
  SCE_RANDOM_ERROR_OUT_OF_RESOURCES = 0x817C001C,
  SCE_RANDOM_ERROR_FATAL = 0x817C00FF,
  SCE_RNPS_APP_MGR_ERROR_NOT_INITIALIZED = 0x81850001,
  SCE_RNPS_APP_MGR_ERROR_NO_MEMORY = 0x81850002,
  SCE_RNPS_APP_MGR_ERROR_INVALID_PARAM = 0x81850003,
  SCE_RNPS_APP_MGR_ERROR_NOT_ALLOWED = 0x81850004,
  SCE_RNPS_APP_MGR_ERROR_NOT_IMPLEMENTED = 0x81850005,
  SCE_RNPS_APP_MGR_ERROR_FILE_READ = 0x81850006,
  SCE_RNPS_APP_MGR_ERROR_FILE_WRITE = 0x81850007,
  SCE_RNPS_APP_MGR_ERROR_NO_APP_INFO = 0x81850008,
  SCE_RNPS_APP_MGR_ERROR_INVALID_REQ_ID = 0x81850009,
  SCE_RNPS_APP_MGR_ERROR_INVALID_URL = 0x8185000A,
  SCE_RNPS_APP_MGR_ERROR_NO_PATCH = 0x8185000B,
  SCE_RNPS_APP_MGR_ERROR_HTTP_READ = 0x8185000C,
  SCE_RNPS_APP_MGR_ERROR_SERVER_RESPONSE = 0x8185000D,
  SCE_RNPS_APP_MGR_ERROR_NO_EVENT = 0x8185000E,
  SCE_RNPS_APP_MGR_ERROR_NOT_REMOVABLE_APP = 0x8185000F,
  SCE_RNPS_APP_MGR_ERROR_DECRYPT_INVALID_CERT = 0x81850010,
  SCE_RNPS_APP_MGR_ERROR_DECRYPT_INTERNAL = 0x81850011,
  SCE_RNPS_APP_MGR_ERROR_DECRYPT_BROKEN_PKG = 0x81850012,
  SCE_RNPS_APP_MGR_ERROR_HTTP_CONNECTION_BUSY = 0x81850013,
  SCE_RNPS_APP_MGR_ERROR_HTTP_NO_NOTIFY_TARGET = 0x81850014,
  SCE_RNPS_APP_MGR_ERROR_ABORTED = 0x81850015,
  SCE_RNPS_APP_MGR_ERROR_CRL_NOT_FOUND = 0x81850016,
  SCE_RNPS_APP_MGR_ERROR_INVALID_CRL_FILESIZE = 0x81850017,
  SCE_RNPS_APP_MGR_ERROR_INVALID_PKG_FILESIZE = 0x81850018,
  SCE_RNPS_APP_MGR_ERROR_DECRYPT_OBSOLETE_PKG = 0x81850019,
  SCE_RNPS_APP_MGR_ERROR_INSTALL_BLOCKED_APP = 0x8185001A,
  SCE_RNPS_APP_MGR_ERROR_DECRYPT_BAD_SIGNATURE_PKG = 0x8185001B,
  SCE_RNPS_APP_MGR_ERROR_UFS_IMAGE_RECOVERING = 0x8185001C,
  SCE_RNPS_APP_MGR_ERROR_UFS_IMAGE_NOT_RECOVERABLE = 0x8185001D,
  SCE_RNPS_APP_MGR_ERROR_UFS_IMAGE_MANUFACTURING_MODE = 0x8185001E,
  SCE_RNPS_APP_MGR_ERROR_UFS_IMAGE_NOT_REMOVABLE = 0x8185001F,
  SCE_RNPS_APP_MGR_ERROR_UFS_IMAGE_VERSION_DIFFERENCE = 0x81850020,
  SCE_ASI_ERROR_INVAL = 0x81860001,
  SCE_ASI_ERROR_NOENT = 0x81860002,
  SCE_ASI_ERROR_NOT_FOUND = 0x81860003,
  SCE_ASI_ERROR_MULTIPLE_OPEN = 0x81860004,
  SCE_ASI_ERROR_CORRUPTED = 0x81860005,
  SCE_ASI_ERROR_VERSION_HIGH = 0x81860006,
  SCE_ASI_ERROR_NOT_OPENED = 0x81860007,
  SCE_ASI_ERROR_NOT_CLOSED = 0x81860008,
  SCE_ASI_ERROR_CANCELED = 0x81860009,
  SCE_ASI_ERROR_FILE_SIZE_LIMIT = 0x8186000A,
  SCE_ASI_ERROR_LARGE_KEY = 0x8186000B,
  SCE_ASI_ERROR_LARGE_VALUE = 0x8186000C,
  SCE_ASI_ERROR_BUSY = 0x8186000D,
  SCE_ASI_ERROR_WRONG_STATUS = 0x8186000E,
  SCE_RNPS_UNZIP_ERROR_INVALID_PARAM = 0x81870001,
  SCE_RNPS_UNZIP_ERROR_OUT_OF_MEMORY = 0x81870002,
  SCE_RNPS_UNZIP_ERROR_UNSUPPORTED_ZIP_FORMAT = 0x81870003,
  SCE_RNPS_UNZIP_ERROR_UNSUPPORTED_STREAM_ZIP = 0x81870004,
  SCE_RNPS_UNZIP_ERROR_UNSUPPORTED_COMPRESSION = 0x81870005,
  SCE_RNPS_UNZIP_ERROR_UNSUPPORTED_DECOMPRESS_PATH = 0x81870006,
  SCE_RNPS_UNZIP_ERROR_INVALID_CRC = 0x81870007,
  SCE_RNPS_UNZIP_ERROR_COMPRESSED_FILE_READ_ERROR = 0x81870008,
  SCE_RNPS_UNZIP_ERROR_MISMATCH_DECOMPRESSED_FILESIZE = 0x81870009,
  SCE_RNPS_UNZIP_ERROR_TOO_LONG_DECOMPRESSPATH_LENGTH = 0x8187000A,
  SCE_RNPS_UNZIP_ERROR_ZIP_FORMAT_ERROR = 0x8187000B,
  SCE_RNPS_UNZIP_ERROR_DEFLATE_STREAM_ERROR = 0x8187000C,
  SCE_RNPS_UNZIP_ERROR_DEFLATE_DATA_ERROR = 0x8187000D,
  SCE_RNPS_UNZIP_ERROR_DEFLATE_MEM_ERROR = 0x8187000E,
  SCE_RNPS_UNZIP_ERROR_DEFLATE_NEED_DICT = 0x8187000F,
  SCE_RNPS_UNZIP_ERROR_FILE_READ = 0x81870010,
  SCE_RNPS_UNZIP_ERROR_FILE_WRITE = 0x81870011,
  SCE_SQLITE_ERROR_GENERIC_ERROR = 0x81880001,
  SCE_SQLITE_ERROR_INTERNAL = 0x81880002,
  SCE_SQLITE_ERROR_PERM = 0x81880003,
  SCE_SQLITE_ERROR_ABORT = 0x81880004,
  SCE_SQLITE_ERROR_BUSY = 0x81880005,
  SCE_SQLITE_ERROR_LOCKED = 0x81880006,
  SCE_SQLITE_ERROR_NOMEM = 0x81880007,
  SCE_SQLITE_ERROR_READONLY = 0x81880008,
  SCE_SQLITE_ERROR_INTERRUPT = 0x81880009,
  SCE_SQLITE_ERROR_IOERR = 0x8188000A,
  SCE_SQLITE_ERROR_CORRUPT = 0x8188000B,
  SCE_SQLITE_ERROR_NOTFOUND = 0x8188000C,
  SCE_SQLITE_ERROR_FULL = 0x8188000D,
  SCE_SQLITE_ERROR_CANTOPEN = 0x8188000E,
  SCE_SQLITE_ERROR_PROTOCOL = 0x8188000F,
  SCE_SQLITE_ERROR_EMPTY = 0x81880010,
  SCE_SQLITE_ERROR_SCHEMA = 0x81880011,
  SCE_SQLITE_ERROR_TOOBIG = 0x81880012,
  SCE_SQLITE_ERROR_CONSTRAINT = 0x81880013,
  SCE_SQLITE_ERROR_MISMATCH = 0x81880014,
  SCE_SQLITE_ERROR_MISUSE = 0x81880015,
  SCE_SQLITE_ERROR_NOLFS = 0x81880016,
  SCE_SQLITE_ERROR_AUTH = 0x81880017,
  SCE_SQLITE_ERROR_FORMAT = 0x81880018,
  SCE_SQLITE_ERROR_RANGE = 0x81880019,
  SCE_SQLITE_ERROR_NOTADB = 0x8188001A,
  SCE_SQLITE_ERROR_BUSY_RECOVERY = 0x81880105,
  SCE_SQLITE_ERROR_LOCKED_SHAREDCACHE = 0x81880106,
  SCE_SQLITE_ERROR_READONLY_RECOVERY = 0x81880108,
  SCE_SQLITE_ERROR_IOERR_READ = 0x8188010A,
  SCE_SQLITE_ERROR_CORRUPT_VTAB = 0x8188010B,
  SCE_SQLITE_ERROR_CANTOPEN_NOTEMPDIR = 0x8188010E,
  SCE_SQLITE_ERROR_ABORT_ROLLBACK = 0x81880204,
  SCE_SQLITE_ERROR_READONLY_CANTLOCK = 0x81880208,
  SCE_SQLITE_ERROR_IOERR_SHORT_READ = 0x8188020A,
  SCE_SQLITE_ERROR_CANTOPEN_ISDIR = 0x8188020E,
  SCE_SQLITE_ERROR_IOERR_WRITE = 0x8188030A,
  SCE_SQLITE_ERROR_IOERR_FSYNC = 0x8188040A,
  SCE_SQLITE_ERROR_IOERR_DIR_FSYNC = 0x8188050A,
  SCE_SQLITE_ERROR_IOERR_TRUNCATE = 0x8188060A,
  SCE_SQLITE_ERROR_IOERR_FSTAT = 0x8188070A,
  SCE_SQLITE_ERROR_IOERR_UNLOCK = 0x8188080A,
  SCE_SQLITE_ERROR_IOERR_RDLOCK = 0x8188090A,
  SCE_SQLITE_ERROR_IOERR_DELETE = 0x81880A0A,
  SCE_SQLITE_ERROR_IOERR_BLOCKED = 0x81880B0A,
  SCE_SQLITE_ERROR_IOERR_NOMEM = 0x81880C0A,
  SCE_SQLITE_ERROR_IOERR_ACCESS = 0x81880D0A,
  SCE_SQLITE_ERROR_IOERR_CHECKRESERVEDLOCK = 0x81880E0A,
  SCE_SQLITE_ERROR_IOERR_LOCK = 0x81880F0A,
  SCE_SQLITE_ERROR_IOERR_CLOSE = 0x8188100A,
  SCE_SQLITE_ERROR_IOERR_DIR_CLOSE = 0x8188110A,
  SCE_SQLITE_ERROR_IOERR_SHMOPEN = 0x8188120A,
  SCE_SQLITE_ERROR_IOERR_SHMSIZE = 0x8188130A,
  SCE_SQLITE_ERROR_IOERR_SHMLOCK = 0x8188140A,
  SCE_SQLITE_ERROR_IOERR_SHMMAP = 0x8188150A,
  SCE_SQLITE_ERROR_IOERR_SEEK = 0x8188160A,
  SCE_SQLITE_ERROR_INVALID_ARGUMENT = 0x8188FFFE,
  SCE_SQLITE_ERROR_CONVERT_ERRORCODE = 0x8188FFFF,
  SCE_HDR_SCOPES_ERROR_INIT_ERROR = 0x81890001,
  SCE_HDR_SCOPES_ERROR_NOT_INIT = 0x81890002,
  SCE_HDR_SCOPES_ERROR_ALREADY_INIT = 0x81890003,
  SCE_HDR_SCOPES_ERROR_INVALID_ARG = 0x81890004,
  SCE_HDR_SCOPES_ERROR_INTERNAL_ERROR = 0x81890005,
  SCE_HDR_SCOPES_ERROR_CMD_BUFFER_OOM = 0x81890006,
  SCE_HDR_SCOPES_ERROR_OOM = 0x81890007,
  SCE_HDR_SCOPES_ERROR_FATAL_ERROR = 0x81890008,
  SCE_PUBTOOLS_ERROR_UNKNOWN = 0x818B0001,
  SCE_PUBTOOLS_ERROR_INVALID_ARGUMENT = 0x818B0002,
  SCE_PUBTOOLS_ERROR_NOT_INITIALIZED = 0x818B0003,
  SCE_SYSTEM_LOGGER2_ERROR_GENERIC = 0x818C0001,
  SCE_SYSTEM_LOGGER2_ERROR_INVALID_ARGUMENT = 0x818C0002,
  SCE_SYSTEM_LOGGER2_ERROR_NO_MEMORY = 0x818C0003,
  SCE_SYSTEM_LOGGER2_ERROR_NOT_INITIALIZED = 0x818C0004,
  SCE_SYSTEM_LOGGER2_ERROR_ALREADY_INITIALIZED = 0x818C0005,
  SCE_SYSTEM_LOGGER2_ERROR_NOT_FOUND = 0x818C0006,
  SCE_SL2_ERROR_NOMEM = 0x818C1001,
  SCE_SL2_ERROR_TIMER_CREATE = 0x818C1002,
  SCE_SL2_ERROR_INVALID_ARGUMENT = 0x818C1003,
  SCE_SL2_ERROR_NOT_FOUND = 0x818C1004,
  SCE_SL2_ERROR_INTERNAL = 0x818C1005,
  SCE_SL2_ERROR_NOT_INITIALIZED = 0x818C1006,
  SCE_SL2_ERROR_ALREADY_INITIALIZED = 0x818C1007,
  SCE_HUB_APP_UTIL_ERROR_INTERNAL = 0x818D0001,
  SCE_HUB_APP_UTIL_ERROR_INVAL = 0x818D0002,
  SCE_HUB_APP_UTIL_ERROR_PERM = 0x818D0003,
  SCE_NP_EA_ACCESS_ERROR_NOT_INITIALIZED = 0x819D0001,
  SCE_NP_EA_ACCESS_ERROR_PARAMETER = 0x819D0002,
  SCE_NP_EA_ACCESS_ERROR_BUSY = 0x819D0003,
  SCE_NP_EA_ACCESS_ERROR_INTERNAL = 0x819D000A,
  SCE_NP_EA_ACCESS_ERROR_OUT_OF_MEMORY = 0x819D0010,
  SCE_NP_EA_ACCESS_ERROR_NETWORK = 0x819D0013,
  SCE_NP_EA_ACCESS_ERROR_SIGNED_OUT = 0x819D0014,
  SCE_NP_EA_ACCESS_ERROR_REQUEST_NOT_FOUND = 0x819D0015,
  SCE_NP_EA_ACCESS_ERROR_ABORTED = 0x819D0016,
  SCE_NP_EA_ACCESS_ERROR_TIMEOUT = 0x819D0018,
  SCE_NP_EA_ACCESS_SERVER_ERROR_INTERNAL = 0x819D100B,
  SCE_NP_EA_ACCESS_SERVER_ERROR_INVALID_RESPONSE = 0x819D1012,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_1_ERROR_BAD_REQUEST = 0x82000001,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_2_ERROR_UNKNOWN_ERROR = 0x82000002,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_3_ERROR_TIMEOUT_ERROR = 0x82000003,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_4_ERROR_NO_DATA_FOUND = 0x82000004,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_5_ERROR_SESSION_EXPIRED = 0x82000005,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_6_ERROR_VERSION_NOT_SUPPORTED = 0x82000006,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_7_ERROR_ACCESS_PERMISSION_DENIED = 0x82000007,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_10_ERROR_CATEGORY_DOES_NOT_EXIST = 0x82000010,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_11_ERROR_PRODUCT_DOES_NOT_EXIST = 0x82000011,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_12_ERROR_REQUIRES_PASSWORD = 0x82000012,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_13_ERROR_NOT_ELIGIBLE = 0x82000013,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_14_ERROR_INVALID_LOGIN = 0x82000014,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_15_ERROR_CURRENCY_DOES_NOT_EXIST = 0x82000015,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_16_ERROR_NO_PAYMENT_INFO = 0x82000016,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_17_ERROR_CART_FULL = 0x82000017,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_18_ERROR_INVALID_QUANTITY = 0x82000018,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_19_ERROR_ITEM_ALREADY_IN_CART = 0x82000019,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_1A_ERROR_INVALID_SKU = 0x8200001A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_1B_ERROR_INACTIVE_ACCOUNT = 0x8200001B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_1C_ERROR_SUSPENDED_ACCOUNT = 0x8200001C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_1D_ERROR_SUSPENDED_CONSOLE = 0x8200001D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_1E_ERROR_NO_SUCH_TITLE = 0x8200001E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_1F_ERROR_EXCEEDS_MAX_WALLET_PURCHASE = 0x8200001F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_20_ERROR_OVER_SPENDING_LIMIT = 0x82000020,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_21_ERROR_AUTO_TOPUP_FAILED = 0x82000021,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_22_ERROR_INSUFFICIENT_FUNDS = 0x82000022,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_23_ERROR_CART_LOAD_FAILURE = 0x82000023,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_24_ERROR_PURCHASE_FAILED = 0x82000024,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_25_ERROR_INVALID_PURCHASE = 0x82000025,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_26_ERROR_CART_EMPTY = 0x82000026,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_27_ERROR_PAYMENT_ALREADY_EXIST = 0x82000027,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_28_ERROR_INVALID_CC_NUMBER = 0x82000028,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_29_ERROR_INVALID_CC_SECURITY = 0x82000029,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_2A_ERROR_INVALID_CC_ADDRESS = 0x8200002A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_2B_ERROR_INVALID_PAYMENT_ERROR = 0x8200002B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_2C_ERROR_EXPIRED_CC = 0x8200002C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_2D_ERROR_ACTION_NOT_ALLOWED = 0x8200002D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_2E_ERROR_NO_WALLET_INFO = 0x8200002E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_2F_ERROR_INVALID_VOUCHER = 0x8200002F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_30_ERROR_VOUCHER_ALREADY_CONSUMED = 0x82000030,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_31_ERROR_VOUCHER_TRANSACTION_OVER_LIMIT = 0x82000031,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_32_ERROR_FAILED_AGE_REQUIREMENT = 0x82000032,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_33_ERROR_VOUCHER_EXPIRED = 0x82000033,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_34_ERROR_VOUCHER_SKU_REGION_MISMATCH = 0x82000034,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_35_ERROR_VOUCHER_SKU_PRICE_NOT_FOUND = 0x82000035,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_36_ERROR_DEPOSIT_IN_PROGRESS_ERROR = 0x82000036,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_37_ERROR_EDY_TRANSACTION_FAILED = 0x82000037,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_38_ERROR_DDEPOSIT_FAILED = 0x82000038,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_39_ERROR_EXCEEDS_AGE_LIMIT_IN_BROWSING = 0x82000039,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_3D_ERROR_COUPON_ALREADY_CONSUMED = 0x8200003D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_3E_ERROR_COUPON_EXHAUSTED = 0x8200003E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_3F_ERROR_CVV_VERIFICATION_REQUIRED = 0x8200003F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_40_ERROR_INVALID_EULA_VERSION = 0x82000040,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_41_ERROR_INVALID_ADDRESS = 0x82000041,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_42_ERROR_INVALID_PASSWORD = 0x82000042,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_43_ERROR_SAME_LOGIN_ID = 0x82000043,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_44_ERROR_LOGIN_ID_EXISTS = 0x82000044,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_45_ERROR_INVALID_SUB_ACCOUNT = 0x82000045,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_46_ERROR_INVALID_BIRTH_DATE = 0x82000046,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_47_ERROR_INVALID_COUNTRY = 0x82000047,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_48_ERROR_ONLINE_ID_EXISTS = 0x82000048,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_49_ERROR_INVALID_ONLINE_ID = 0x82000049,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_4A_ERROR_CORRUPTED_DATA = 0x8200004A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_4B_ERROR_TOO_MANY_SUBACCOUNTS = 0x8200004B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_4C_ERROR_CONSOLE_REG_EXCEEDED = 0x8200004C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_4D_ERROR_ACCOUNT_BINDING_DISABLED = 0x8200004D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_4E_ERROR_INVALID_KOREAN_RRN = 0x8200004E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_4F_ERROR_INVALID_LOGIN_DOB = 0x8200004F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_50_ERROR_INVALID_SECURITY_ANSWER = 0x82000050,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_51_ERROR_INVALID_PARENT = 0x82000051,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_52_ERROR_INCORRECT_REGION = 0x82000052,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_53_ERROR_CHILD_NOT_ALLOWED = 0x82000053,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_54_ERROR_INVALID_CONSOLE_ID = 0x82000054,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_55_ERROR_CC_VERIFICATION_REQUIRED = 0x82000055,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_56_ERROR_RATE_LIMIT_EXCEEDED = 0x82000056,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_57_ERROR_NO_ACTIVE_REWARD = 0x82000057,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_58_ERROR_UPGRADE_REQUIRED = 0x82000058,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_59_ERROR_SUBACC_NEEDS_UPGRADE = 0x82000059,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_5A_ERROR_NO_OF_CC_LIMIT_EXCEEDED = 0x8200005A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_5B_ERROR_REQUIRE_CC_REACTIVATION = 0x8200005B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_5C_ERROR_INVALID_DOMAIN = 0x8200005C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_5D_ERROR_CONTENT_FILEID_NOT_FOUND = 0x8200005D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_5E_ERROR_UNIFIED_ID_ACC_NEEDS_IMPORT = 0x8200005E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_5F_ERROR_AUTO_DEPOSIT_FLAG_REQUIRED = 0x8200005F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_60_ERROR_INVALID_TICKET = 0x82000060,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_61_ERROR_EXPIRED_TICKET = 0x82000061,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_62_ERROR_CC_REQUIRED = 0x82000062,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_63_ERROR_ADDL_ATTRIBUTES_REQUIRED_FOR_TAX_CALC = 0x82000063,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_64_ERROR_PWD_EXPIRED = 0x82000064,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_65_ERROR_REDIRECT_TO_PC = 0x82000065,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_66_ERROR_ORDER_ITEM_CHARGE_ALREADY_PROCESSED = 0x82000066,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_67_ERROR_MUST_REACCEPT_EULA = 0x82000067,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_68_ERROR_INVALID_USE_COUNT = 0x82000068,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_69_ERROR_ENTITLEMENT_EXPIRED = 0x82000069,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_6A_ERROR_COUPON_CODE_WRONG_COUNTRY = 0x8200006A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_6B_ERROR_COUPON_EXPIRED = 0x8200006B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_6C_ERROR_COUPON_INVALID_FOR_PRODUCT = 0x8200006C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_6D_ERROR_COUPON_INVALID_FOR_PLATFORM = 0x8200006D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_70_ERROR_INVALID_ESN = 0x82000070,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_71_ERROR_FRAUD_ERROR_INVALID_CC = 0x82000071,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_72_ERROR_EMAIL_VERIFICATION_REQUIRED = 0x82000072,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_73_ERROR_EMAIL_ALREADY_VERIFIED = 0x82000073,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_74_ERROR_INVALID_USER_LOCALE = 0x82000074,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_75_ERROR_INVALID_EMAIL = 0x82000075,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_76_ERROR_INVALID_AFFILIATION_TOKEN = 0x82000076,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_77_ERROR_REG_CODE_FAILED = 0x82000077,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_78_ERROR_ACCOUNT_VERIFICATION_FAILED = 0x82000078,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_79_ERROR_MAILSERVICE_FAILED = 0x82000079,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_7A_ERROR_IMMEDIATE_CHARGE_REQUIRED = 0x8200007A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_7B_ERROR_COUPON_MIN_SPENDING_NOT_MET = 0x8200007B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_7C_ERROR_INVALID_LANGUAGE = 0x8200007C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_7D_ERROR_SERVICE_NOT_AVAILABLE_IN_REGION = 0x8200007D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_7E_ERROR_INVALID_COUPON_CODE = 0x8200007E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_7F_ERROR_MULTIPLE_COUPONS_NOT_ALLOWED = 0x8200007F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_80_ERROR_NO_PAYMENT_INSTRUMENT_ON_FILE = 0x82000080,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_102_ERROR_102_UNKNOWN_ERROR = 0x82000102,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_103_ERROR_103_TIMEOUT = 0x82000103,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_105_ERROR_104_SESSION_EXPIRED = 0x82000105,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_107_ERROR_107_PERMISSION_DENIED = 0x82000107,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_112_ERROR_PASSWORD_REQUIRED = 0x82000112,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_113_ERROR_AGAINST_ELIGIBILITY_RULE = 0x82000113,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_114_ERROR_INVALID_LOGIN = 0x82000114,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_119_ERROR_ITEM_ALREADY_IN_CART = 0x82000119,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_11A_ERROR_INVALID_SKU = 0x8200011A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_11B_ERROR_INACTIVE_ACCOUNT = 0x8200011B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_11F_ERROR_EXCEEDED_MAS_WALLET_PURCHASE = 0x8200011F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_120_ERROR_OVER_SPENDING_LIMIT = 0x82000120,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_121_ERROR_AUTO_TOP_UP_FAILED = 0x82000121,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_122_ERROR_INSUFFICIENT_FUNDS = 0x82000122,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_125_ERROR_INVALID_PURCHASE = 0x82000125,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_126_ERROR_CART_EMPTY = 0x82000126,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_12F_ERROR_INVALID_VOUCHER_CODE = 0x8200012F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_130_ERROR_VOUCHER_ALREADY_CONSUMED = 0x82000130,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_131_ERROR_VOUCHER_TRANSACTION_OVER_LIMIT = 0x82000131,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_132_ERROR_FAILED_AGE_REQUIREMENT = 0x82000132,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_133_ERROR_VOUCHER_EXPIRED = 0x82000133,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_134_ERROR_VOUCHER_SKU_REGION_MISMATCH = 0x82000134,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_138_ERROR_DEPOSIT_FAILED = 0x82000138,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_156_ERROR_RATE_LIMIT_EXCEEDED = 0x82000156,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_157_ERROR_NO_ACTIVE_REWARD = 0x82000157,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_15F_ERROR_AUTO_DEPOSIT_FLAG_REQUIRED = 0x8200015F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_162_ERROR_CREDIT_CARD_REQUIRED = 0x82000162,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_171_ERROR_FRAUD_ERROR_INVALID_CREDIT_CARD = 0x82000171,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_180_ERROR_VOUCHER_PRECONDITION_FAILED = 0x82000180,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_1F7_ERROR_HTTP_STATUS_CODE_503 = 0x820001F7,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_302_ERROR_UNKNOWN_ERROR_RDST = 0x82000302,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_KMJ_SERVER_304_ERROR_PROFILE_NOT_FOUND_RDST = 0x82000304,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SERVICE_ENDED = 0x82020000,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_BAD_REQUEST = 0x82020001,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_UNKNOWN_ERROR = 0x82020002,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_NO_DATA_FOUND = 0x82020004,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_UNKNOWN_RESOURCE = 0x82020005,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_FW_UPGRADE_REQ = 0x82020012,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_LOGIN = 0x82020014,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INACTIVE_ACCOUNT = 0x8202001B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SUSPENDED_ACCOUNT = 0x8202001C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SUSPENDED_DEVICE = 0x8202001D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_FAILED_AGE_REQD = 0x82020032,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_EMAIL_VERIFICATION_REQD = 0x82020033,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_WRONG_TOSUA_VERSION = 0x82020040,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INSECURE_PWD = 0x82020042,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_BIRTHDATE = 0x82020046,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_COUNTRY = 0x82020047,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_UNDER_AGE_ACC = 0x82020053,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_DEVICEID = 0x82020054,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PWD_EXPIRED = 0x82020064,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_TOSUA_BE_REACCEPTED = 0x82020067,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PARAMETER_X_DUP = 0x82020FFF,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SKU_NOT_AVAILABLE = 0x82021000,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_TOKEN = 0x82021001,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_MANDATORY_PARAM_MISSING = 0x82021002,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PARAM_MALFORMED = 0x82021003,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_ACCOUNT_NOT_FOUND = 0x82021004,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_DEVICE_NOT_FOUND = 0x82021005,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_CREDENTIALS = 0x82021006,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_SERVICE_ENTITY = 0x82021007,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_MAX_DEVICES_EXCEEDED = 0x82021008,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_MAX_ACC_EXCEEDED = 0x82021009,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PAYMENT_INSTRUMENT_FAILED = 0x8202100A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PSN_HANDLE_IN_USE = 0x8202100B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_LOGIN_IN_USE = 0x8202100C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_COUNTRY_DIFF_ON_SUB_MASTER_ACC = 0x8202100D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_REACHED_MAX_SUB_ACC = 0x8202100E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_DEVICE_NOT_SUPPORTED = 0x8202100F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_LANGUAGE_NOT_AVAILABLE = 0x82021010,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_COUNTRY_ID = 0x82021011,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CLIENT_MISSING_SCOPE = 0x82021012,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INACTIVE_PRODUCT = 0x82021013,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PAYMENT_CHARGE_FAILED = 0x82021014,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PAYMENT_INSTRUMENT_EXPIRED = 0x82021015,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_EXCEEDS_SPENDING_LIMIT = 0x82021016,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_EXCEEDS_WALLET_BALANCE = 0x82021017,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_ALREADY_SUBSCRIBED = 0x82021018,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_NOT_SUBSCRIBABLE = 0x82021019,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_UNKNOWN_DEVICE_TYPE = 0x8202101A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_MIN_CHARGE_NOT_MET = 0x8202101B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_EXCEEDS_MAX_PURCHASE = 0x8202101C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INSUFFICIENT_FUNDS = 0x8202101D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_COUNTRY_NOT_FOUND_ESN = 0x8202101E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_COUNTRY_NOT_SUPPORTED = 0x8202101F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_ESN = 0x82021020,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_ESN_NOT_IN_DB = 0x82021021,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_QUERY_PARAMS_NOT_ALLOWED = 0x82021022,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CART_EMPTY = 0x82021023,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_MALFORMED_BODY = 0x82021024,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_EXTN_CONTENTTYPE_MISMATCH = 0x82021025,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_DEVICE_ALREADY_ADDED = 0x82021026,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_MANDATORY_ACC_ATTRIBUTES_MISSING = 0x82021027,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_DEVICE_NAME = 0x82021028,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_RESERVATION_NOT_FOUND = 0x82021029,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_IMPROPER_ONLINE_ID = 0x8202102A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PARAM_CANNOT_BE_UPDATED = 0x8202102B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PROVINCE_ID_NOT_FOUND = 0x8202102C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CC_ID_NOT_FOUND = 0x8202102D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_TRANSACTION_ID_NOT_FOUND = 0x8202102E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_STORE_ID_NOT_FOUND = 0x8202102F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_ADDRESS_ID_NOT_FOUND = 0x82021030,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SKU_CANNOT_BE_ENTITLED = 0x82021031,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SKU_ALREADY_IN_CART = 0x82021032,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_RESOURCE_ID_NOT_FOUND = 0x82021033,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PARAM_VALUE_NOT_SUPPORTED = 0x82021034,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CC_ALREADY_EXISTS = 0x82021035,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_REQUEST = 0x82021036,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_NO_GRANT_TYPE = 0x82021037,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_GRANT_TYPE_NOT_SUPPORTED = 0x82021038,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_SCOPE = 0x82021039,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_CONSOLE_TOKEN = 0x8202103A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_TOKEN_NOT_FOUND = 0x8202103B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_REFRESH_TOKEN = 0x8202103F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CLIENT_NOT_FOUND_401 = 0x82021041,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_REACCEPT_TOSUA_FOR_SUBACC = 0x82021042,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CLIENT_ALREADY_EXISTS = 0x82021043,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CLIENT_NOT_FOUND_404 = 0x82021044,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_USER_NOT_AUTHENTICATED = 0x82021045,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SCOPE_NOT_FOUND = 0x82021046,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_QUERY_EXECUTION_FAIL = 0x82021049,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_ACCESS_DENIED = 0x8202104A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_TOKEN_EXPIRED = 0x8202104B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_TOKEN_INVALID = 0x8202104C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_CLIENT = 0x8202104D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_REDIRECT_URI_MISMATCH = 0x8202104E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_METHOD_NOT_ALLOWED = 0x8202104F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_BANNED_ACCOUNT = 0x82021050,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_ADDRESS_VERIFICATION = 0x82021051,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_RATE_LIMIT_EXCEEDED = 0x82021052,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CC_EXPIRED = 0x82021053,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_CC_INVALID = 0x82021054,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_BACKEND_TIMEOUT = 0x82021055,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_NOT_MASTER_ACC = 0x82021056,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_ACTIVATION_TYPE_UNSUPPORTED = 0x82021057,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INACTIVE_VOUCHER = 0x82021058,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_NOT_CONSUMABLE = 0x82021059,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_COUNTRY_MISMATCH = 0x8202105A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PURCHASE_RESULT_UNKNOWN = 0x8202105B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_TRANSACTION_OVER_LIMIT = 0x8202105C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_VOUCHER = 0x8202105D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_ALREADY_CONSUMED = 0x8202105E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_EXPIRED = 0x8202105F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_UNEXPECTED_PARAM = 0x82021060,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INACTIVE_SKU = 0x82021061,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_DEVICE_NOT_ACTIVATED = 0x82021062,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_START_DAY_IN_FUTURE = 0x82021063,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUNCHER_AGE_UNAPPROVED = 0x82021064,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_TAX_INFO_REQD = 0x82021065,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_SKU_REGION_MISMATCH = 0x82021066,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_SKU = 0x82021067,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_MINFIRMWAREVERSION_NOT_FOUND = 0x82021068,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_DEVICE_TYPE = 0x82021069,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_MAX_CC_REGISTRATION = 0x8202106B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_BACKEND_ERROR = 0x82021071,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PARAM_EXPIRED = 0x82021072,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_GCIM_ACCOUNT = 0x82021073,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_CONSUMPTION_FAILED = 0x82021074,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_NOT_MONEY_VOUCHER = 0x82021075,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_VOUCHER_ALREADY_CANCELLED = 0x82021076,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_NOT_A_PRODUCT_VOUCHER = 0x82021077,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_RESOURCE_NOT_SUPPORTED = 0x82021078,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SECURITY_CODE_REQUIRED = 0x82021079,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SKU_SHOULD_BE_BOUGHT_ALONE = 0x8202107A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SKU_REQUIRES_CC = 0x8202107B,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SKU_REQUIRES_AUTO_DEPOSIT = 0x8202107C,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INVALID_PASSWORD = 0x8202107D,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SUBACC_SHOULD_REACCEPT_TOSUA = 0x8202107E,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SUBSCOPE_CANNOT_BE_USED = 0x8202107F,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_UNSUPPORTED_OPERATION = 0x82021080,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PAYMENT_INSTRUMENT_NOT_FOUND = 0x82021081,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PREVIEW_FAILED = 0x82021082,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SCOPE_DOES_NOT_EXIST = 0x82021083,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_NOT_A_SUBACCOUNT = 0x82021084,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_INELIGIBLE_SKU = 0x82021085,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_SUBSCRIPTION_CONFLICT = 0x82021086,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_UNKNOWN_BACKEND_ERROR = 0x82021087,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PAYMENT_INSTRUMENT_DUPLICATED = 0x82021088,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PAYMENT_INSTRUMENT_BANNED = 0x82021089,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_REGCAM_ERROR_PAYMENT_INSTRUMENT_FIELD_BANNED = 0x8202108A,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_ACCOUNT_NOT_FOUND = 0x820403E8,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_RESOURCE_NOT_FOUND = 0x820403E9,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_ACCOUNT_INACTIVE = 0x820403EA,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_METHOD_ABSENT_OR_INVALID = 0x82040BB8,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_COUNTRY_MIN_MAX_NOT_DEFINED = 0x82040BB9,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_INSTRUMENT_EXPIRED = 0x82040BBA,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_INSTRUMENT_BANNED = 0x82040BBB,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_DEPOSIT_FAILED = 0x82040BBC,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_FAILED_FRAUD_SCREENING = 0x82040BBD,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_FAILED_CHALLENGE_CODE = 0x82040BBE,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_DEPOSIT_NOT_ALLOWED = 0x82040BBF,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_DEPOSIT_WILL_EXCEED_MAX_LIMIT = 0x82040BC1,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_AMOUNT_BELOW_MINIMUM = 0x82040BC2,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_INVALID_CLIENT_IP = 0x82040BC3,
  SCE_NP_WEB_CLIENT_ERROR_COMMERCE_WALLET_DEPOSIT_AUTHENTICATION_FAILED = 0x82040BC4,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_RATE_LIMIT_EXCEEDED = 0x82100000,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_SCHEMA_REQUEST_VALIDATION_ERROR = 0x82100081,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_BAD_REQUEST_PARAMETER = 0x82100082,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_TOKEN_NOT_FOUND = 0x82100101,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_SUSPENDED_ACCOUNT = 0x82100102,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_BANNED_ACCOUNT = 0x82100103,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_PASSWORD_EXPIRED = 0x82100104,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_TOSUA_MUST_BE_RE_ACCEPTED = 0x82100105,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_TOSUA_MUST_BE_REACCEPTED_FOR_SUBACCOUNT = 0x82100106,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_TOSUA_MUST_BE_REACCEPTED_FOR_SUBACCOUNT_BY_SUBACCOUNT = 0x82100107,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_TOKEN_IS_EXPIRED = 0x82100108,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_TOKEN_IS_INVALID = 0x82100109,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_INVALID_SCOPES = 0x8210010A,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_NO_ACCESS_TOKEN = 0x8210010B,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_OAUTH_SERVICE_UNAVAILABLE = 0x8210010C,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_OAUTH_COMMUNICATION_FAILURE = 0x8210010D,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_TOKEN_INVALID_BAD_LOGIN = 0x8210010E,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_ACCOUNT_NO_LONGER_EXISTS = 0x8210010F,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_UKNOWN_ERROR = 0x82100112,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_ACCOUNT_DOES_NOT_EXIST = 0x82101001,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_ACCOUNT_IN_TOKEN_DOES_NOT_MATCH_REQUESTING_ACCOUNT = 0x82101009,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_CANNOT_ACCESS_FAMILY_MEMBER_INFO = 0x821010A8,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_OFFLINE_ACCOUNT_NOT_FOUND = 0x821010AD,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_NOT_AUTHORIZED_FOR_NON_CLIENT_CREDENTIAL_ACCESS = 0x821010B4,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_OPERATION_NOT_SUPPORTED_FOR_NON_NP_ACCOUNT = 0x821010CA,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNTS_ACCOUNT_ID_NOT_FOUND_IN_FAMILY_MEMBERS = 0x821010E4,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_MINOR_ACCOUNT_LINK_PROHIBITED = 0x82104000,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_INVALID_SCOPES = 0x82104001,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_NO_PSN_REDIRECT_URL_AVAILABLE = 0x82104002,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_NO_BASE_URL_AVAILABLE = 0x82104003,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_NO_SCOPES_AVAILABLE = 0x82104004,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_ENTITY_ALREADY_EXISTS = 0x82104005,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_INVALID_PARTNER_AUTHENTICATION = 0x82104006,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_NOT_SUPPORTED_BY_COUNTRY = 0x82104007,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_ACCOUNT_LINK_NOT_FOUND = 0x82104008,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_TOKEN_NOT_FOUND = 0x82104009,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_LINK_URL_NOT_FOUND = 0x8210400A,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_CLIENT_CONFIGURATION_NOT_FOUND = 0x8210400B,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_CIRCUIT_BREAKER_OPEN = 0x8210400C,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_BULKHEAD_FULL = 0x8210400D,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_USER_CONSENT_FAILURE = 0x8210400E,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_MULTI_LINKING_NOT_ALLOWED = 0x8210400F,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_CLIENT_ID_TITLE_ID_MISMATCH = 0x82104010,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_INTERNAL_SERVER_ERROR = 0x82104011,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_UNAUTHORIZED = 0x82104012,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_METADATA_NOT_FOUND = 0x82104013,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_CREDENTIALS_NOT_FOUND = 0x82104014,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_SCOPES_NOT_FOUND = 0x82104015,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_ENTITY_NOT_FOUND = 0x82104016,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_ACCOUNT_BIND_NOT_FOUND = 0x82104017,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_ACCOUNT_LINK_EXPIRED = 0x82104018,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_SCOPE_REQUIRED = 0x82104019,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PENDING_USER_AUTHORIZATION = 0x8210401A,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_DEVICE_CODE_EXPIRED = 0x8210401B,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_EXCESSIVE_POLLING = 0x8210401C,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_UNSUPPORTED_OPERATION = 0x8210401D,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_INVALID_DEVICE_CODE = 0x8210401E,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_MISSING_DEVICE_CODE = 0x8210401F,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_GET_PARTNER_TOKEN_BY_AUTH_CODE = 0x82104022,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PARTNER_ERROR = 0x82104023,
  SCE_NP_WEBAPI_SERVER_ERROR_CONNECTED_ID_PREMIUM_USER_UNLINK = 0x82104024,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNT_CLOSURE_INVALID_START_DATE_THE_DATE_IS_IN_FUTURE = 0x821053B1,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNT_CLOSURE_INVALID_END_DATE_THE_DATE_IS_IN_FUTURE = 0x821053B2,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNT_CLOSURE_INVALID_START_DATE_THE_DATE_IS_AFTER_END_DATE = 0x821053B3,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNT_CLOSURE_INVALID_START_DATE_THE_DATE_IS_TOO_OLD = 0x821053B4,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNT_CLOSURE_INVALID_OFFSET_VALUE = 0x821053B5,
  SCE_NP_WEBAPI_SERVER_ERROR_ACCOUNT_CLOSURE_TOKEN_IS_NOT_CLIENT_CREDENTIALS_GRANT_TYPE = 0x821053B6,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_UNEXPECTED_ERROR = 0x82106000,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_DOWNSTREAM_SERVICE_TIMEOUT = 0x82106001,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_DOWNSTREAM_SERVICE_FAILURE = 0x82106002,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDER_SERVICE_FAILURE = 0x82106003,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_CATALOG_SERVICE_FAILURE = 0x82106004,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_WALLET_SERVICE_FAILURE = 0x82106005,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_KMJ_COMMERCE_SERVICE_FAILURE = 0x82106006,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_OAUTH_SERVICE_FAILURE = 0x82106007,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_DYNAMODB_FAILURE = 0x82106008,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_BAD_REQUEST = 0x82106030,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INVALID_DATA = 0x82106031,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INVALID_SKU = 0x82106032,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INVALID_SKU_ID = 0x82106033,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INVALID_COUPON_CODE = 0x82106034,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_MULTIPLE_CART_DISCOUNT_COUPON_NOT_ALLOWED = 0x82106035,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_COUPON_CODE_MIN_SPEND_NOT_MET = 0x82106036,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_COUPON_EXHAUSTED = 0x82106037,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_COUPON_NOT_VALID_NOW = 0x82106038,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INVALID_COUPON_PRODUCT_NOT_IN_CART = 0x82106039,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_SKU_CANNOT_ENTITLE = 0x8210603A,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_TOTAL_EXCEEDS_SPENDING_LIMIT = 0x8210603B,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_TOTAL_EXCEEDS_WALLET_BALANCE = 0x8210603C,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_TOTAL_EXCEEDS_MAX_WALLET_BALANCE = 0x8210603D,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_PAYMENT_INSTRUMENT_VALIDATION_FAILED = 0x8210603E,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INVALID_COUPON_WRONG_COUNTRY = 0x8210603F,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INVALID_COUPON_WRONG_PLATFORM = 0x82106040,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INVALID_SKU_MIN_AGE_REQUIREMENT = 0x82106041,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_PAYMENT_INSTRUMENT_TYPE_ANY_REQUIRED = 0x82106042,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_PAYMENT_INSTRUMENT_TYPE_CC_REQUIRED = 0x82106043,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_PAYMENT_INSTRUMENT_EXPIRED = 0x82106044,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_REQUIRES_IMMEDIATE_CHARGE = 0x82106045,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_MULTIPLE_PSPLUS_SUBSCRIPTIONS_NOT_ALLOWED = 0x82106046,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_COUPON_ALREADY_USED = 0x82106047,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_INELIGIBLE_SKU = 0x82106048,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_ORDERS_SUBACCOUNT_CANNOT_PURCHASE_SKU_WITH_PAYMENT_INSTRUMENT = 0x82106049,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_CATALOG_BAD_REQUEST = 0x821060F8,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_WALLETS_BAD_REQUEST = 0x8210615C,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_KMJ_COMMERCE_BAD_REQUEST = 0x821061C0,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_OAUTH_SERVICE_BAD_REQUEST = 0x82106224,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_OAUTH_SERVICE_INVALID_CREDENTIALS = 0x82106225,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_CART_HASH_MISMATCH = 0x82106738,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_CART_IS_EMPTY = 0x82106739,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_CART_SIZE_LIMIT_EXCEEDED = 0x8210673A,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_COUPON_SCOPE_NOT_FOUND = 0x8210673B,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_COUPON_SUMMARY_NOT_FOUND = 0x8210673C,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_COUPON_ALREADY_EXISTS = 0x8210673D,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_SKU_NOT_IN_CART = 0x8210673E,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_COUPON_NOT_IN_CART = 0x8210673F,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_COUPON_IN_EMPTY_CART = 0x82106740,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_REQUIRE_PASSWORD_AT_CHECKOUT = 0x82106741,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_SKU_IS_BLACKLISTED = 0x82106742,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_REQUIRE_USER_TOKEN = 0x82106743,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_TRIAL_CANNOT_BE_ADDED = 0x82106744,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_TRIAL_NOT_ELIGIBLE = 0x82106745,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_TRIAL_KEY_IS_EMPTY = 0x82106746,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_SKU_ALREADY_EXISTS = 0x82106747,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_DUPLICATE_SKU_IN_REQUEST = 0x82106748,
  SCE_NP_WEBAPI_SERVER_ERROR_CART_INVALID_PLATFORM = 0x82106749,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_BAD_REQUEST = 0x82200001,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_UNSUPPORTED_API_VERSION = 0x82200002,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_TOO_LARGE_BODY = 0x82200003,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_NP_ENVIRONMENT = 0x82200004,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_NP_TITLE_ID = 0x82200005,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_NP_SERVICE_LABEL = 0x82200006,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_NP_COMMUNICATION_ID = 0x82200007,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_SERVICE_ID = 0x82200008,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_NP_SERVICE_NAME = 0x82200009,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_OAUTH_CLIENT_ID = 0x8220000A,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220000B,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_USER_NOT_FOUND = 0x8220000C,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_RESOURCE_NOT_FOUND = 0x8220000D,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220000E,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_QUERY_STRING = 0x82200100,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_QUERY_PARAMETER = 0x82200101,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_QUERY_PARAMETER_COMBINATION = 0x82200102,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82200103,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_PARAMETER_IN_URL = 0x82200104,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_MANDATORY_QUERY_PARAMETER_MISSING = 0x82200105,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_HEADER = 0x82200140,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_HEADER_REQUIRED = 0x82200141,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_BODY = 0x82200180,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NULL_VALUE_NOT_ALLOWED = 0x82200181,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_BODY_PARAMETER = 0x82200182,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82200183,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_BODY_PARAMETER_COMBINATION = 0x82200184,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_BLOCKED_USER_EXISTS = 0x82200185,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_MANDATORY_BODY_PARAMETER_MISSING = 0x82200186,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_MULTIPART_HEADER = 0x82200187,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_MANDATORY_MULTIPART_HEADER_MISSING = 0x82200188,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_ACCESS_TOKEN_REQUIRED = 0x82200200,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_ACCESS_TOKEN = 0x82200201,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_EXPIRED_ACCESS_TOKEN = 0x82200202,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NP_TITLE_TOKEN_REQUIRED = 0x82200203,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_NP_TITLE_TOKEN = 0x82200204,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_EXPIRED_NP_TITLE_TOKEN = 0x82200205,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NOT_AUTHORIZED = 0x82200206,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_BANNED_APPLICATION = 0x82200207,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_BANNED_USER = 0x82200208,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_BANNED_DEVICE = 0x82200209,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220020A,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_RATE_LIMIT_EXCEEDED = 0x8220020B,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220020C,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220020D,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NEED_TO_UPGRADE = 0x8220020E,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NOT_AUTHORIZED_ON_PLATFORM = 0x8220020F,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_USERS_ACCESS_TOKEN_REQUIRED = 0x82200210,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82200211,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_UNKNOWN_CLIENT = 0x82200280,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NP_TITLE_ID_NOT_FOUND = 0x82200281,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NP_SERVICE_LABEL_NOT_FOUND = 0x82200282,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NOT_AUTHORIZED_APPLICATION = 0x82200283,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NP_COMMUNICATION_ID_NOT_FOUND = 0x82200284,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_SERVICE_ID_NOT_FOUND = 0x82200285,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_UNEXPECTED_ERROR = 0x82200300,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INTERNAL_SERVER_ERROR = 0x82200301,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82200302,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_SERVER_BUSY = 0x82200303,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_AUTHORIZATION_SERVER_ERROR = 0x82200304,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_ENTITLEMENT_SERVER_ERROR = 0x82200305,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_UNDER_MAINTENANCE = 0x82200340,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_SERVICE_CLOSED = 0x82200341,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_SERVICE_NOT_READY = 0x82200342,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_UNKNOWN_ERROR = 0x82200380,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_INVALID_API_GROUP = 0x82200400,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_BASE_URL_UNDEFINED = 0x82200401,
  SCE_NP_WEBAPI_SERVER_ERROR_ASM_NOT_AUTHORIZED_APPLICATION_TO_USE_THE_API_GROUP = 0x82200401,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_BAD_REQUEST = 0x82201001,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_UNSUPPORTED_API_VERSION = 0x82201002,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_TOO_LARGE_BODY = 0x82201003,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_NP_ENVIRONMENT = 0x82201004,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_NP_TITLE_ID = 0x82201005,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_NP_SERVICE_LABEL = 0x82201006,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_NP_COMMUNICATION_ID = 0x82201007,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_SERVICE_ID = 0x82201008,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_NP_SERVICE_NAME = 0x82201009,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_OAUTH_CLIENT_ID = 0x8220100A,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220100B,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_USER_NOT_FOUND = 0x8220100C,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_RESOURCE_NOT_FOUND = 0x8220100D,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220100E,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_QUERY_STRING = 0x82201100,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_QUERY_PARAMETER = 0x82201101,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_QUERY_PARAMETER_COMBINATION = 0x82201102,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82201103,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_PARAMETER_IN_URL = 0x82201104,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_MANDATORY_QUERY_PARAMETER_MISSING = 0x82201105,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_HEADER = 0x82201140,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_HEADER_REQUIRED = 0x82201141,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_BODY = 0x82201180,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NULL_VALUE_NOT_ALLOWED = 0x82201181,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_BODY_PARAMETER = 0x82201182,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82201183,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_BODY_PARAMETER_COMBINATION = 0x82201184,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_BLOCKED_USER_EXISTS = 0x82201185,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_MANDATORY_BODY_PARAMETER_MISSING = 0x82201186,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_MULTIPART_HEADER = 0x82201187,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_MANDATORY_MULTIPART_HEADER_MISSING = 0x82201188,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_ACCESS_TOKEN_REQUIRED = 0x82201200,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_ACCESS_TOKEN = 0x82201201,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_EXPIRED_ACCESS_TOKEN = 0x82201202,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NP_TITLE_TOKEN_REQUIRED = 0x82201203,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INVALID_NP_TITLE_TOKEN = 0x82201204,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_EXPIRED_NP_TITLE_TOKEN = 0x82201205,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NOT_AUTHORIZED = 0x82201206,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_BANNED_APPLICATION = 0x82201207,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_BANNED_USER = 0x82201208,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_BANNED_DEVICE = 0x82201209,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220120A,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_RATE_LIMIT_EXCEEDED = 0x8220120B,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220120C,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220120D,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NEED_TO_UPGRADE = 0x8220120E,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NOT_AUTHORIZED_ON_PLATFORM = 0x8220120F,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_USERS_ACCESS_TOKEN_REQUIRED = 0x82201210,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82201211,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_UNKNOWN_CLIENT = 0x82201280,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NP_TITLE_ID_NOT_FOUND = 0x82201281,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NP_SERVICE_LABEL_NOT_FOUND = 0x82201282,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NOT_AUTHORIZED_APPLICATION = 0x82201283,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NP_COMMUNICATION_ID_NOT_FOUND = 0x82201284,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_SERVICE_ID_NOT_FOUND = 0x82201285,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_UNEXPECTED_ERROR = 0x82201300,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_INTERNAL_SERVER_ERROR = 0x82201301,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82201302,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_SERVER_BUSY = 0x82201303,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_AUTHORIZATION_SERVER_ERROR = 0x82201304,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_ENTITLEMENT_SERVER_ERROR = 0x82201305,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_UNDER_MAINTENANCE = 0x82201340,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_SERVICE_CLOSED = 0x82201341,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_SERVICE_NOT_READY = 0x82201342,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_UNKNOWN_ERROR = 0x82201380,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_ALREADY_BOUND_THE_USER = 0x82201401,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_EXCEED_THE_MAX_COUNT_OF_BIND_USER = 0x82201402,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_THE_USER_IS_NOT_BIND_USER = 0x82201403,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_FAILED_TO_DELIVER_NO_SUCH_USER = 0x82201501,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_FAILED_TO_DELIVER_THE_USER_IS_NOT_BIND_USER = 0x82201502,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_FAILED_TO_DELIVER_USER_STATUS_IS_NOT_ACTIVE = 0x82201503,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_FAILED_TO_DELIVER_NO_SUCH_DEVICE = 0x82201504,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_FAILED_TO_DELIVER_NO_PERMISSION = 0x82201505,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NO_PERMISSION_TO_BECOME_ACTIVE_STATUS = 0x82201506,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_NOT_ALLOWED_TO_CHANGE_STATUS = 0x82201507,
  SCE_NP_WEBAPI_SERVER_ERROR_PUSH_NOTIFICATION_CONFLICT_WITH_THE_SAME_USER = 0x82201508,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_BAD_REQUEST = 0x82202001,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_UNSUPPORTED_API_VERSION = 0x82202002,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_TOO_LARGE_BODY = 0x82202003,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_NP_ENVIRONMENT = 0x82202004,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_NP_TITLE_ID = 0x82202005,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_NP_SERVICE_LABEL = 0x82202006,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_NP_COMMUNICATION_ID = 0x82202007,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_SERVICE_ID = 0x82202008,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_NP_SERVICE_NAME = 0x82202009,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_OAUTH_CLIENT_ID = 0x8220200A,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220200B,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_USER_NOT_FOUND = 0x8220200C,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_RESOURCE_NOT_FOUND = 0x8220200D,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220200E,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_QUERY_STRING = 0x82202100,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_QUERY_PARAMETER = 0x82202101,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_QUERY_PARAMETER_COMBINATION = 0x82202102,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82202103,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_PARAMETER_IN_URL = 0x82202104,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_MANDATORY_QUERY_PARAMETER_MISSING = 0x82202105,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_HEADER = 0x82202140,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_HEADER_REQUIRED = 0x82202141,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_BODY = 0x82202180,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NULL_VALUE_NOT_ALLOWED = 0x82202181,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_BODY_PARAMETER = 0x82202182,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82202183,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_BODY_PARAMETER_COMBINATION = 0x82202184,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_BLOCKED_USER_EXISTS = 0x82202185,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_MANDATORY_BODY_PARAMETER_MISSING = 0x82202186,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_MULTIPART_HEADER = 0x82202187,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_MANDATORY_MULTIPART_HEADER_MISSING = 0x82202188,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ACCESS_TOKEN_REQUIRED = 0x82202200,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_ACCESS_TOKEN = 0x82202201,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_EXPIRED_ACCESS_TOKEN = 0x82202202,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NP_TITLE_TOKEN_REQUIRED = 0x82202203,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INVALID_NP_TITLE_TOKEN = 0x82202204,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_EXPIRED_NP_TITLE_TOKEN = 0x82202205,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NOT_AUTHORIZED = 0x82202206,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_BANNED_APPLICATION = 0x82202207,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_BANNED_USER = 0x82202208,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_BANNED_DEVICE = 0x82202209,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220220A,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_RATE_LIMIT_EXCEEDED = 0x8220220B,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220220C,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220220D,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NEED_TO_UPGRADE = 0x8220220E,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NOT_AUTHORIZED_ON_PLATFORM = 0x8220220F,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_USERS_ACCESS_TOKEN_REQUIRED = 0x82202210,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82202211,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_UNKNOWN_CLIENT = 0x82202280,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NP_TITLE_ID_NOT_FOUND = 0x82202281,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NP_SERVICE_LABEL_NOT_FOUND = 0x82202282,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NOT_AUTHORIZED_APPLICATION = 0x82202283,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NP_COMMUNICATION_ID_NOT_FOUND = 0x82202284,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_SERVICE_ID_NOT_FOUND = 0x82202285,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_UNEXPECTED_ERROR = 0x82202300,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_INTERNAL_SERVER_ERROR = 0x82202301,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82202302,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_SERVER_BUSY = 0x82202303,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_AUTHORIZATION_SERVER_ERROR = 0x82202304,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ENTITLEMENT_SERVER_ERROR = 0x82202305,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_UNDER_MAINTENANCE = 0x82202340,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_SERVICE_CLOSED = 0x82202341,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_SERVICE_NOT_READY = 0x82202342,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_UNKNOWN_ERROR = 0x82202380,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_REQUEST_NOT_ALLOWED_DUE_TO_ONLINE_STATUS = 0x82202400,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_CANNOT_ADD_YOUR_OWN_SELF = 0x82202401,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_FRIEND_REQUEST_NOT_FOUND = 0x82202900,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NOT_IN_FRIEND_LIST = 0x82202901,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ALREADY_FRIEND = 0x82202902,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ALREADY_FRIEND_REQUESTED = 0x82202903,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_REQUESTERS_FRIEND_LIST_FULL = 0x82202904,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_REQUESTED_USERS_FRIEND_LIST_FULL = 0x82202905,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NAME_ALREADY_SHARED = 0x82202906,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_BLOCKED_USER = 0x82202907,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NAME_SHARING_REQUEST_NOT_FOUND = 0x82202908,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_ALREADY_NAME_SHARING_REQUESTED = 0x82202909,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NAME_REGISTRATION_REQUIRED = 0x8220290A,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_TARGET_USER_NOT_REGISTERED_NAME = 0x8220290B,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_CANNOT_SPECIFY_YOUR_OWN_SELF = 0x8220290C,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NON_FRIEND_NOT_ALLOWED = 0x82202A00,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_DEVICE_ID_NOT_MATCHED = 0x82202A01,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_NP_TITLE_ID_NOT_MATCHED = 0x82202A02,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_BLOCK_LIST_FULL = 0x82202B00,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_CONSOLE_NOT_REGISTERED = 0x82202C00,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_OTHER_CONSOLE_ALREADY_REGISTERED = 0x82202C01,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_FAILED_TO_SEND_WAKE_UP_PACKET_USER_NOT_BOUND = 0x82202C02,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_FAILED_TO_SEND_WAKE_UP_PACKET_DEVICE_NOT_BOUND = 0x82202C03,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_FAILED_TO_SEND_WAKE_UP_PACKET_SERVER_ERROR = 0x82202C04,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_START_LOG_NOT_FOUND = 0x82202D00,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_BAD_REQUEST = 0x82204001,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_UNSUPPORTED_API_VERSION = 0x82204002,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_TOO_LARGE_BODY = 0x82204003,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_NP_ENVIRONMENT = 0x82204004,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_NP_TITLE_ID = 0x82204005,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_NP_SERVICE_LABEL = 0x82204006,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_NP_COMMUNICATION_ID = 0x82204007,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_SERVICE_ID = 0x82204008,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_NP_SERVICE_NAME = 0x82204009,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_OAUTH_CLIENT_ID = 0x8220400A,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220400B,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_USER_NOT_FOUND = 0x8220400C,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_RESOURCE_NOT_FOUND = 0x8220400D,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220400E,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_QUERY_STRING = 0x82204100,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_QUERY_PARAMETER = 0x82204101,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_QUERY_PARAMETER_COMBINATION = 0x82204102,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82204103,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_PARAMETER_IN_URL = 0x82204104,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_MANDATORY_QUERY_PARAMETER_MISSING = 0x82204105,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_HEADER = 0x82204140,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_HEADER_REQUIRED = 0x82204141,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_BODY = 0x82204180,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NULL_VALUE_NOT_ALLOWED = 0x82204181,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_BODY_PARAMETER = 0x82204182,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82204183,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_BODY_PARAMETER_COMBINATION = 0x82204184,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_BLOCKED_USER_EXISTS = 0x82204185,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_MANDATORY_BODY_PARAMETER_MISSING = 0x82204186,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_MULTIPART_HEADER = 0x82204187,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_MANDATORY_MULTIPART_HEADER_MISSING = 0x82204188,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ACCESS_TOKEN_REQUIRED = 0x82204200,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_ACCESS_TOKEN = 0x82204201,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_EXPIRED_ACCESS_TOKEN = 0x82204202,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NP_TITLE_TOKEN_REQUIRED = 0x82204203,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INVALID_NP_TITLE_TOKEN = 0x82204204,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_EXPIRED_NP_TITLE_TOKEN = 0x82204205,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NOT_AUTHORIZED = 0x82204206,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_BANNED_APPLICATION = 0x82204207,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_BANNED_USER = 0x82204208,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_BANNED_DEVICE = 0x82204209,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220420A,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_RATE_LIMIT_EXCEEDED = 0x8220420B,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220420C,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220420D,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NEED_TO_UPGRADE = 0x8220420E,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NOT_AUTHORIZED_ON_PLATFORM = 0x8220420F,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_USERS_ACCESS_TOKEN_REQUIRED = 0x82204210,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82204211,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_UNKNOWN_CLIENT = 0x82204280,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NP_TITLE_ID_NOT_FOUND = 0x82204281,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NP_SERVICE_LABEL_NOT_FOUND = 0x82204282,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NOT_AUTHORIZED_APPLICATION = 0x82204283,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NP_COMMUNICATION_ID_NOT_FOUND = 0x82204284,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_SERVICE_ID_NOT_FOUND = 0x82204285,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_UNEXPECTED_ERROR = 0x82204300,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_INTERNAL_SERVER_ERROR = 0x82204301,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82204302,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_SERVER_BUSY = 0x82204303,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_AUTHORIZATION_SERVER_ERROR = 0x82204304,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ENTITLEMENT_SERVER_ERROR = 0x82204305,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_UNDER_MAINTENANCE = 0x82204340,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_SERVICE_CLOSED = 0x82204341,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_SERVICE_NOT_READY = 0x82204342,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_UNKNOWN_ERROR = 0x82204380,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_NOT_PERMIT_TO_ACCESS_THE_SESSION = 0x82204400,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_THE_SESSION_IS_FULL = 0x82204401,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ONLY_SESSION_CREATOR_PERMITTED = 0x82204402,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ONLY_SESSION_MEMBER_PERMITTED = 0x82204403,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_USER_NOT_ONLINE = 0x82204404,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_ALREADY_JOINED_SESSION = 0x82204405,
  SCE_NP_WEBAPI_SERVER_ERROR_SESSION_INVITATION_EXPIRED_INVITATION = 0x82204800,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_BAD_REQUEST = 0x82205001,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_UNSUPPORTED_API_VERSION = 0x82205002,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_TOO_LARGE_BODY = 0x82205003,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_NP_ENVIRONMENT = 0x82205004,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_NP_TITLE_ID = 0x82205005,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_NP_SERVICE_LABEL = 0x82205006,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_NP_COMMUNICATION_ID = 0x82205007,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_SERVICE_ID = 0x82205008,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_NP_SERVICE_NAME = 0x82205009,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_OAUTH_CLIENT_ID = 0x8220500A,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220500B,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_USER_NOT_FOUND = 0x8220500C,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_RESOURCE_NOT_FOUND = 0x8220500D,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220500E,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_QUERY_STRING = 0x82205100,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_QUERY_PARAMETER = 0x82205101,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_QUERY_PARAMETER_COMBINATION = 0x82205102,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82205103,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_PARAMETER_IN_URL = 0x82205104,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_MANDATORY_QUERY_PARAMETER_MISSING = 0x82205105,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_HEADER = 0x82205140,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_HEADER_REQUIRED = 0x82205141,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_BODY = 0x82205180,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NULL_VALUE_NOT_ALLOWED = 0x82205181,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_BODY_PARAMETER = 0x82205182,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82205183,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_BODY_PARAMETER_COMBINATION = 0x82205184,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_BLOCKED_USER_EXISTS = 0x82205185,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_MANDATORY_BODY_PARAMETER_MISSING = 0x82205186,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_MULTIPART_HEADER = 0x82205187,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_MANDATORY_MULTIPART_HEADER_MISSING = 0x82205188,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_ACCESS_TOKEN_REQUIRED = 0x82205200,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_ACCESS_TOKEN = 0x82205201,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_EXPIRED_ACCESS_TOKEN = 0x82205202,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NP_TITLE_TOKEN_REQUIRED = 0x82205203,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INVALID_NP_TITLE_TOKEN = 0x82205204,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_EXPIRED_NP_TITLE_TOKEN = 0x82205205,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NOT_AUTHORIZED = 0x82205206,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_BANNED_APPLICATION = 0x82205207,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_BANNED_USER = 0x82205208,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_BANNED_DEVICE = 0x82205209,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220520A,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_RATE_LIMIT_EXCEEDED = 0x8220520B,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220520C,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220520D,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NEED_TO_UPGRADE = 0x8220520E,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NOT_AUTHORIZED_ON_PLATFORM = 0x8220520F,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_USERS_ACCESS_TOKEN_REQUIRED = 0x82205210,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82205211,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_UNKNOWN_CLIENT = 0x82205280,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NP_TITLE_ID_NOT_FOUND = 0x82205281,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NP_SERVICE_LABEL_NOT_FOUND = 0x82205282,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NOT_AUTHORIZED_APPLICATION = 0x82205283,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_NP_COMMUNICATION_ID_NOT_FOUND = 0x82205284,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_SERVICE_ID_NOT_FOUND = 0x82205285,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_UNEXPECTED_ERROR = 0x82205300,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_INTERNAL_SERVER_ERROR = 0x82205301,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82205302,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_SERVER_BUSY = 0x82205303,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_AUTHORIZATION_SERVER_ERROR = 0x82205304,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_ENTITLEMENT_SERVER_ERROR = 0x82205305,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_UNDER_MAINTENANCE = 0x82205340,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_SERVICE_CLOSED = 0x82205341,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_SERVICE_NOT_READY = 0x82205342,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_UNKNOWN_ERROR = 0x82205380,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_TOO_LARGE_IMAGE_DATA = 0x82205400,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_EXPIRED_GAME_CUSTOM_DATA = 0x82205800,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_CUSTOM_DATA_ALREADY_USED_GAME_CUSTOM_DATA = 0x82205801,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_BAD_REQUEST = 0x82206001,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_UNSUPPORTED_API_VERSION = 0x82206002,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_TOO_LARGE_BODY = 0x82206003,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_NP_ENVIRONMENT = 0x82206004,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_NP_TITLE_ID = 0x82206005,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_NP_SERVICE_LABEL = 0x82206006,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_NP_COMMUNICATION_ID = 0x82206007,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_SERVICE_ID = 0x82206008,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_NP_SERVICE_NAME = 0x82206009,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_OAUTH_CLIENT_ID = 0x8220600A,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220600B,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_USER_NOT_FOUND = 0x8220600C,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_RESOURCE_NOT_FOUND = 0x8220600D,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220600E,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_QUERY_STRING = 0x82206100,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_QUERY_PARAMETER = 0x82206101,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_QUERY_PARAMETER_COMBINATION = 0x82206102,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82206103,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_PARAMETER_IN_URL = 0x82206104,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_MANDATORY_QUERY_PARAMETER_MISSING = 0x82206105,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_HEADER = 0x82206140,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_HEADER_REQUIRED = 0x82206141,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_BODY = 0x82206180,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NULL_VALUE_NOT_ALLOWED = 0x82206181,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_BODY_PARAMETER = 0x82206182,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82206183,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_BODY_PARAMETER_COMBINATION = 0x82206184,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_BLOCKED_USER_EXISTS = 0x82206185,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_MANDATORY_BODY_PARAMETER_MISSING = 0x82206186,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_MULTIPART_HEADER = 0x82206187,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_MANDATORY_MULTIPART_HEADER_MISSING = 0x82206188,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_ACCESS_TOKEN_REQUIRED = 0x82206200,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_ACCESS_TOKEN = 0x82206201,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_EXPIRED_ACCESS_TOKEN = 0x82206202,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NP_TITLE_TOKEN_REQUIRED = 0x82206203,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_NP_TITLE_TOKEN = 0x82206204,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_EXPIRED_NP_TITLE_TOKEN = 0x82206205,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NOT_AUTHORIZED = 0x82206206,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_BANNED_APPLICATION = 0x82206207,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_BANNED_USER = 0x82206208,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_BANNED_DEVICE = 0x82206209,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220620A,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_RATE_LIMIT_EXCEEDED = 0x8220620B,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220620C,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220620D,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NEED_TO_UPGRADE = 0x8220620E,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NOT_AUTHORIZED_ON_PLATFORM = 0x8220620F,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_USERS_ACCESS_TOKEN_REQUIRED = 0x82206210,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82206211,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_UNKNOWN_CLIENT = 0x82206280,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NP_TITLE_ID_NOT_FOUND = 0x82206281,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NP_SERVICE_LABEL_NOT_FOUND = 0x82206282,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NOT_AUTHORIZED_APPLICATION = 0x82206283,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_NP_COMMUNICATION_ID_NOT_FOUND = 0x82206284,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_SERVICE_ID_NOT_FOUND = 0x82206285,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_UNEXPECTED_ERROR = 0x82206300,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INTERNAL_SERVER_ERROR = 0x82206301,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82206302,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_SERVER_BUSY = 0x82206303,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_AUTHORIZATION_SERVER_ERROR = 0x82206304,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_ENTITLEMENT_SERVER_ERROR = 0x82206305,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_UNDER_MAINTENANCE = 0x82206340,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_SERVICE_CLOSED = 0x82206341,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_SERVICE_NOT_READY = 0x82206342,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_UNKNOWN_ERROR = 0x82206380,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_TOO_LARGE_IMAGE_DATA = 0x82206400,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_TOO_LARGE_VOICE_DATA = 0x82206802,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_ALREADY_GROUP_MEMBER = 0x82206803,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_EXCEEDED_GROUP_MEMBERS_LIMIT = 0x82206804,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_ALREADY_GROUP_EXISTS = 0x82206805,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_EXCEEDED_MY_GROUPS_LIMIT = 0x82206806,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_REJECTED_DUE_TO_ALL_TARGETS_SETTINGS = 0x82206807,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_COMPUTER_VIRUS_DETECTED = 0x82206808,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_INVALID_API = 0x82206810,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUP_MESSAGING_PROCESSING_CLOSE_ACCOUNT = 0x82206811,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_BAD_REQUEST = 0x82207001,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_UNSUPPORTED_API_VERSION = 0x82207002,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_TOO_LARGE_BODY = 0x82207003,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_NP_ENVIRONMENT = 0x82207004,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_NP_TITLE_ID = 0x82207005,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_NP_SERVICE_LABEL = 0x82207006,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_NP_COMMUNICATION_ID = 0x82207007,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_SERVICE_ID = 0x82207008,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_NP_SERVICE_NAME = 0x82207009,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_OAUTH_CLIENT_ID = 0x8220700A,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220700B,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_USER_NOT_FOUND = 0x8220700C,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_RESOURCE_NOT_FOUND = 0x8220700D,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220700E,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_QUERY_STRING = 0x82207100,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_QUERY_PARAMETER = 0x82207101,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_QUERY_PARAMETER_COMBINATION = 0x82207102,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82207103,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_PARAMETER_IN_URL = 0x82207104,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_MANDATORY_QUERY_PARAMETER_MISSING = 0x82207105,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_HEADER = 0x82207140,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_HEADER_REQUIRED = 0x82207141,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_BODY = 0x82207180,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NULL_VALUE_NOT_ALLOWED = 0x82207181,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_BODY_PARAMETER = 0x82207182,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82207183,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_BODY_PARAMETER_COMBINATION = 0x82207184,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_BLOCKED_USER_EXISTS = 0x82207185,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_MANDATORY_BODY_PARAMETER_MISSING = 0x82207186,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_MULTIPART_HEADER = 0x82207187,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_MANDATORY_MULTIPART_HEADER_MISSING = 0x82207188,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_ACCESS_TOKEN_REQUIRED = 0x82207200,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_ACCESS_TOKEN = 0x82207201,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_EXPIRED_ACCESS_TOKEN = 0x82207202,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NP_TITLE_TOKEN_REQUIRED = 0x82207203,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INVALID_NP_TITLE_TOKEN = 0x82207204,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_EXPIRED_NP_TITLE_TOKEN = 0x82207205,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NOT_AUTHORIZED = 0x82207206,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_BANNED_APPLICATION = 0x82207207,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_BANNED_USER = 0x82207208,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_BANNED_DEVICE = 0x82207209,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220720A,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_RATE_LIMIT_EXCEEDED = 0x8220720B,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220720C,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220720D,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NEED_TO_UPGRADE = 0x8220720E,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NOT_AUTHORIZED_ON_PLATFORM = 0x8220720F,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_USERS_ACCESS_TOKEN_REQUIRED = 0x82207210,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82207211,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_UNKNOWN_CLIENT = 0x82207280,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NP_TITLE_ID_NOT_FOUND = 0x82207281,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NP_SERVICE_LABEL_NOT_FOUND = 0x82207282,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NOT_AUTHORIZED_APPLICATION = 0x82207283,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_NP_COMMUNICATION_ID_NOT_FOUND = 0x82207284,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_SERVICE_ID_NOT_FOUND = 0x82207285,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_UNEXPECTED_ERROR = 0x82207300,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_INTERNAL_SERVER_ERROR = 0x82207301,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82207302,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_SERVER_BUSY = 0x82207303,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_AUTHORIZATION_SERVER_ERROR = 0x82207304,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_ENTITLEMENT_SERVER_ERROR = 0x82207305,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_UNDER_MAINTENANCE = 0x82207340,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_SERVICE_CLOSED = 0x82207341,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_SERVICE_NOT_READY = 0x82207342,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_UNKNOWN_ERROR = 0x82207380,
  SCE_NP_WEBAPI_SERVER_ERROR_NOTIFICATION_LIST_TEMPLATE_NOT_PERMITTED = 0x82207400,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_BAD_REQUEST = 0x8220A001,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_UNSUPPORTED_API_VERSION = 0x8220A002,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_TOO_LARGE_BODY = 0x8220A003,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_NP_ENVIRONMENT = 0x8220A004,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_NP_TITLE_ID = 0x8220A005,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_NP_SERVICE_LABEL = 0x8220A006,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_NP_COMMUNICATION_ID = 0x8220A007,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_SERVICE_ID = 0x8220A008,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_NP_SERVICE_NAME = 0x8220A009,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_OAUTH_CLIENT_ID = 0x8220A00A,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220A00B,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_USER_NOT_FOUND = 0x8220A00C,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_RESOURCE_NOT_FOUND = 0x8220A00D,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220A00E,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_QUERY_STRING = 0x8220A100,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_QUERY_PARAMETER = 0x8220A101,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_QUERY_PARAMETER_COMBINATION = 0x8220A102,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x8220A103,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_PARAMETER_IN_URL = 0x8220A104,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_MANDATORY_QUERY_PARAMETER_MISSING = 0x8220A105,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_HEADER = 0x8220A140,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_HEADER_REQUIRED = 0x8220A141,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_BODY = 0x8220A180,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NULL_VALUE_NOT_ALLOWED = 0x8220A181,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_BODY_PARAMETER = 0x8220A182,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x8220A183,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_BODY_PARAMETER_COMBINATION = 0x8220A184,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_BLOCKED_USER_EXISTS = 0x8220A185,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_MANDATORY_BODY_PARAMETER_MISSING = 0x8220A186,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_MULTIPART_HEADER = 0x8220A187,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_MANDATORY_MULTIPART_HEADER_MISSING = 0x8220A188,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_ACCESS_TOKEN_REQUIRED = 0x8220A200,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_ACCESS_TOKEN = 0x8220A201,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_EXPIRED_ACCESS_TOKEN = 0x8220A202,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NP_TITLE_TOKEN_REQUIRED = 0x8220A203,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INVALID_NP_TITLE_TOKEN = 0x8220A204,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_EXPIRED_NP_TITLE_TOKEN = 0x8220A205,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NOT_AUTHORIZED = 0x8220A206,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_BANNED_APPLICATION = 0x8220A207,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_BANNED_USER = 0x8220A208,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_BANNED_DEVICE = 0x8220A209,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220A20A,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_RATE_LIMIT_EXCEEDED = 0x8220A20B,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220A20C,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220A20D,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NEED_TO_UPGRADE = 0x8220A20E,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NOT_AUTHORIZED_ON_PLATFORM = 0x8220A20F,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_USERS_ACCESS_TOKEN_REQUIRED = 0x8220A210,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x8220A211,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_UNKNOWN_CLIENT = 0x8220A280,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NP_TITLE_ID_NOT_FOUND = 0x8220A281,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NP_SERVICE_LABEL_NOT_FOUND = 0x8220A282,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NOT_AUTHORIZED_APPLICATION = 0x8220A283,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_NP_COMMUNICATION_ID_NOT_FOUND = 0x8220A284,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_SERVICE_ID_NOT_FOUND = 0x8220A285,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_UNEXPECTED_ERROR = 0x8220A300,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_INTERNAL_SERVER_ERROR = 0x8220A301,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_SERVICE_TEMPORARILY_UNAVAILABLE = 0x8220A302,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_SERVER_BUSY = 0x8220A303,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_AUTHORIZATION_SERVER_ERROR = 0x8220A304,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_ENTITLEMENT_SERVER_ERROR = 0x8220A305,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_UNDER_MAINTENANCE = 0x8220A340,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_SERVICE_CLOSED = 0x8220A341,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_SERVICE_NOT_READY = 0x8220A342,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_UNKNOWN_ERROR = 0x8220A380,
  SCE_NP_WEBAPI_SERVER_ERROR_TROPHY_DELETION_CONDITIONS_NOT_FULFILLED = 0x8220A400,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_BAD_REQUEST = 0x8220B001,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_UNSUPPORTED_API_VERSION = 0x8220B002,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_TOO_LARGE_BODY = 0x8220B003,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_NP_ENVIRONMENT = 0x8220B004,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_NP_TITLE_ID = 0x8220B005,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_NP_SERVICE_LABEL = 0x8220B006,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_NP_COMMUNICATION_ID = 0x8220B007,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_SERVICE_ID = 0x8220B008,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_NP_SERVICE_NAME = 0x8220B009,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_OAUTH_CLIENT_ID = 0x8220B00A,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220B00B,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_USER_NOT_FOUND = 0x8220B00C,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_RESOURCE_NOT_FOUND = 0x8220B00D,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220B00E,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_QUERY_STRING = 0x8220B100,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_QUERY_PARAMETER = 0x8220B101,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_QUERY_PARAMETER_COMBINATION = 0x8220B102,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x8220B103,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_PARAMETER_IN_URL = 0x8220B104,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_MANDATORY_QUERY_PARAMETER_MISSING = 0x8220B105,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_HEADER = 0x8220B140,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_HEADER_REQUIRED = 0x8220B141,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_BODY = 0x8220B180,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NULL_VALUE_NOT_ALLOWED = 0x8220B181,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_BODY_PARAMETER = 0x8220B182,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x8220B183,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_BODY_PARAMETER_COMBINATION = 0x8220B184,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_BLOCKED_USER_EXISTS = 0x8220B185,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_MANDATORY_BODY_PARAMETER_MISSING = 0x8220B186,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_MULTIPART_HEADER = 0x8220B187,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_MANDATORY_MULTIPART_HEADER_MISSING = 0x8220B188,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_ACCESS_TOKEN_REQUIRED = 0x8220B200,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_ACCESS_TOKEN = 0x8220B201,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_EXPIRED_ACCESS_TOKEN = 0x8220B202,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NP_TITLE_TOKEN_REQUIRED = 0x8220B203,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INVALID_NP_TITLE_TOKEN = 0x8220B204,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_EXPIRED_NP_TITLE_TOKEN = 0x8220B205,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NOT_AUTHORIZED = 0x8220B206,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_BANNED_APPLICATION = 0x8220B207,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_BANNED_USER = 0x8220B208,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_BANNED_DEVICE = 0x8220B209,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220B20A,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_RATE_LIMIT_EXCEEDED = 0x8220B20B,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220B20C,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220B20D,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NEED_TO_UPGRADE = 0x8220B20E,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NOT_AUTHORIZED_ON_PLATFORM = 0x8220B20F,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_USERS_ACCESS_TOKEN_REQUIRED = 0x8220B210,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x8220B211,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_UNKNOWN_CLIENT = 0x8220B280,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NP_TITLE_ID_NOT_FOUND = 0x8220B281,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NP_SERVICE_LABEL_NOT_FOUND = 0x8220B282,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NOT_AUTHORIZED_APPLICATION = 0x8220B283,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_NP_COMMUNICATION_ID_NOT_FOUND = 0x8220B284,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_SERVICE_ID_NOT_FOUND = 0x8220B285,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_UNEXPECTED_ERROR = 0x8220B300,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_INTERNAL_SERVER_ERROR = 0x8220B301,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_SERVICE_TEMPORARILY_UNAVAILABLE = 0x8220B302,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_SERVER_BUSY = 0x8220B303,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_AUTHORIZATION_SERVER_ERROR = 0x8220B304,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_ENTITLEMENT_SERVER_ERROR = 0x8220B305,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_UNDER_MAINTENANCE = 0x8220B340,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_SERVICE_CLOSED = 0x8220B341,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_SERVICE_NOT_READY = 0x8220B342,
  SCE_NP_WEBAPI_SERVER_ERROR_GRIEF_REPORT_UNKNOWN_ERROR = 0x8220B380,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_BAD_REQUEST = 0x8220C001,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_UNSUPPORTED_API_VERSION = 0x8220C002,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_TOO_LARGE_BODY = 0x8220C003,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_NP_ENVIRONMENT = 0x8220C004,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_NP_TITLE_ID = 0x8220C005,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_NP_SERVICE_LABEL = 0x8220C006,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_NP_COMMUNICATION_ID = 0x8220C007,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_SERVICE_ID = 0x8220C008,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_NP_SERVICE_NAME = 0x8220C009,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_OAUTH_CLIENT_ID = 0x8220C00A,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8220C00B,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_USER_NOT_FOUND = 0x8220C00C,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_RESOURCE_NOT_FOUND = 0x8220C00D,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8220C00E,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_QUERY_STRING = 0x8220C100,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_QUERY_PARAMETER = 0x8220C101,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_QUERY_PARAMETER_COMBINATION = 0x8220C102,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x8220C103,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_PARAMETER_IN_URL = 0x8220C104,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_MANDATORY_QUERY_PARAMETER_MISSING = 0x8220C105,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_HEADER = 0x8220C140,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_HEADER_REQUIRED = 0x8220C141,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_BODY = 0x8220C180,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NULL_VALUE_NOT_ALLOWED = 0x8220C181,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_BODY_PARAMETER = 0x8220C182,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x8220C183,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_BODY_PARAMETER_COMBINATION = 0x8220C184,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_BLOCKED_USER_EXISTS = 0x8220C185,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_MANDATORY_BODY_PARAMETER_MISSING = 0x8220C186,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_MULTIPART_HEADER = 0x8220C187,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_MANDATORY_MULTIPART_HEADER_MISSING = 0x8220C188,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_ACCESS_TOKEN_REQUIRED = 0x8220C200,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_ACCESS_TOKEN = 0x8220C201,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_EXPIRED_ACCESS_TOKEN = 0x8220C202,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NP_TITLE_TOKEN_REQUIRED = 0x8220C203,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INVALID_NP_TITLE_TOKEN = 0x8220C204,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_EXPIRED_NP_TITLE_TOKEN = 0x8220C205,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NOT_AUTHORIZED = 0x8220C206,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_BANNED_APPLICATION = 0x8220C207,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_BANNED_USER = 0x8220C208,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_BANNED_DEVICE = 0x8220C209,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8220C20A,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_RATE_LIMIT_EXCEEDED = 0x8220C20B,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8220C20C,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8220C20D,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NEED_TO_UPGRADE = 0x8220C20E,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NOT_AUTHORIZED_ON_PLATFORM = 0x8220C20F,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_USERS_ACCESS_TOKEN_REQUIRED = 0x8220C210,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x8220C211,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_UNKNOWN_CLIENT = 0x8220C280,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NP_TITLE_ID_NOT_FOUND = 0x8220C281,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NP_SERVICE_LABEL_NOT_FOUND = 0x8220C282,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NOT_AUTHORIZED_APPLICATION = 0x8220C283,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_NP_COMMUNICATION_ID_NOT_FOUND = 0x8220C284,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_SERVICE_ID_NOT_FOUND = 0x8220C285,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_UNEXPECTED_ERROR = 0x8220C300,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_INTERNAL_SERVER_ERROR = 0x8220C301,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_SERVICE_TEMPORARILY_UNAVAILABLE = 0x8220C302,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_SERVER_BUSY = 0x8220C303,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_AUTHORIZATION_SERVER_ERROR = 0x8220C304,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_ENTITLEMENT_SERVER_ERROR = 0x8220C305,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_UNDER_MAINTENANCE = 0x8220C340,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_SERVICE_CLOSED = 0x8220C341,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_SERVICE_NOT_READY = 0x8220C342,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_UNKNOWN_ERROR = 0x8220C380,
  SCE_NP_WEBAPI_SERVER_ERROR_TSS_TOO_LARGE_TSS_FILE = 0x8220C400,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_BAD_REQUEST = 0x82211001,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_UNSUPPORTED_API_VERSION = 0x82211002,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_TOO_LARGE_BODY = 0x82211003,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_NP_ENVIRONMENT = 0x82211004,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_NP_TITLE_ID = 0x82211005,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_NP_SERVICE_LABEL = 0x82211006,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_NP_COMMUNICATION_ID = 0x82211007,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_SERVICE_ID = 0x82211008,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_NP_SERVICE_NAME = 0x82211009,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_OAUTH_CLIENT_ID = 0x8221100A,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221100B,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_USER_NOT_FOUND = 0x8221100C,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_RESOURCE_NOT_FOUND = 0x8221100D,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221100E,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_QUERY_STRING = 0x82211100,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_QUERY_PARAMETER = 0x82211101,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_QUERY_PARAMETER_COMBINATION = 0x82211102,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82211103,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_PARAMETER_IN_URL = 0x82211104,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_MANDATORY_QUERY_PARAMETER_MISSING = 0x82211105,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_HEADER = 0x82211140,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_HEADER_REQUIRED = 0x82211141,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_BODY = 0x82211180,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NULL_VALUE_NOT_ALLOWED = 0x82211181,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_BODY_PARAMETER = 0x82211182,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82211183,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_BODY_PARAMETER_COMBINATION = 0x82211184,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_BLOCKED_USER_EXISTS = 0x82211185,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_MANDATORY_BODY_PARAMETER_MISSING = 0x82211186,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_MULTIPART_HEADER = 0x82211187,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_MANDATORY_MULTIPART_HEADER_MISSING = 0x82211188,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_ACCESS_TOKEN_REQUIRED = 0x82211200,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_ACCESS_TOKEN = 0x82211201,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_EXPIRED_ACCESS_TOKEN = 0x82211202,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NP_TITLE_TOKEN_REQUIRED = 0x82211203,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INVALID_NP_TITLE_TOKEN = 0x82211204,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_EXPIRED_NP_TITLE_TOKEN = 0x82211205,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NOT_AUTHORIZED = 0x82211206,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_BANNED_APPLICATION = 0x82211207,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_BANNED_USER = 0x82211208,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_BANNED_DEVICE = 0x82211209,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221120A,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_RATE_LIMIT_EXCEEDED = 0x8221120B,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221120C,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221120D,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NEED_TO_UPGRADE = 0x8221120E,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NOT_AUTHORIZED_ON_PLATFORM = 0x8221120F,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_USERS_ACCESS_TOKEN_REQUIRED = 0x82211210,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82211211,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_UNKNOWN_CLIENT = 0x82211280,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NP_TITLE_ID_NOT_FOUND = 0x82211281,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NP_SERVICE_LABEL_NOT_FOUND = 0x82211282,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NOT_AUTHORIZED_APPLICATION = 0x82211283,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_NP_COMMUNICATION_ID_NOT_FOUND = 0x82211284,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_SERVICE_ID_NOT_FOUND = 0x82211285,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_UNEXPECTED_ERROR = 0x82211300,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_INTERNAL_SERVER_ERROR = 0x82211301,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82211302,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_SERVER_BUSY = 0x82211303,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_AUTHORIZATION_SERVER_ERROR = 0x82211304,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_ENTITLEMENT_SERVER_ERROR = 0x82211305,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_UNDER_MAINTENANCE = 0x82211340,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_SERVICE_CLOSED = 0x82211341,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_SERVICE_NOT_READY = 0x82211342,
  SCE_NP_WEBAPI_SERVER_ERROR_WORD_FILTER_UNKNOWN_ERROR = 0x82211380,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_BAD_REQUEST = 0x82212001,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_UNSUPPORTED_API_VERSION = 0x82212002,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_TOO_LARGE_BODY = 0x82212003,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_NP_ENVIRONMENT = 0x82212004,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_NP_TITLE_ID = 0x82212005,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_NP_SERVICE_LABEL = 0x82212006,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_NP_COMMUNICATION_ID = 0x82212007,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_SERVICE_ID = 0x82212008,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_NP_SERVICE_NAME = 0x82212009,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_OAUTH_CLIENT_ID = 0x8221200A,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221200B,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_USER_NOT_FOUND = 0x8221200C,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_RESOURCE_NOT_FOUND = 0x8221200D,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221200E,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_QUERY_STRING = 0x82212100,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_QUERY_PARAMETER = 0x82212101,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_QUERY_PARAMETER_COMBINATION = 0x82212102,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82212103,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_PARAMETER_IN_URL = 0x82212104,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_MANDATORY_QUERY_PARAMETER_MISSING = 0x82212105,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_HEADER = 0x82212140,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_HEADER_REQUIRED = 0x82212141,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_BODY = 0x82212180,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NULL_VALUE_NOT_ALLOWED = 0x82212181,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_BODY_PARAMETER = 0x82212182,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82212183,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_BODY_PARAMETER_COMBINATION = 0x82212184,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_BLOCKED_USER_EXISTS = 0x82212185,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_MANDATORY_BODY_PARAMETER_MISSING = 0x82212186,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_MULTIPART_HEADER = 0x82212187,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_MANDATORY_MULTIPART_HEADER_MISSING = 0x82212188,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_ACCESS_TOKEN_REQUIRED = 0x82212200,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_ACCESS_TOKEN = 0x82212201,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_EXPIRED_ACCESS_TOKEN = 0x82212202,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NP_TITLE_TOKEN_REQUIRED = 0x82212203,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INVALID_NP_TITLE_TOKEN = 0x82212204,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_EXPIRED_NP_TITLE_TOKEN = 0x82212205,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NOT_AUTHORIZED = 0x82212206,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_BANNED_APPLICATION = 0x82212207,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_BANNED_USER = 0x82212208,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_BANNED_DEVICE = 0x82212209,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221220A,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_RATE_LIMIT_EXCEEDED = 0x8221220B,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221220C,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221220D,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NEED_TO_UPGRADE = 0x8221220E,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NOT_AUTHORIZED_ON_PLATFORM = 0x8221220F,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_USERS_ACCESS_TOKEN_REQUIRED = 0x82212210,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82212211,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_UNKNOWN_CLIENT = 0x82212280,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NP_TITLE_ID_NOT_FOUND = 0x82212281,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NP_SERVICE_LABEL_NOT_FOUND = 0x82212282,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NOT_AUTHORIZED_APPLICATION = 0x82212283,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_NP_COMMUNICATION_ID_NOT_FOUND = 0x82212284,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_SERVICE_ID_NOT_FOUND = 0x82212285,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_UNEXPECTED_ERROR = 0x82212300,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_INTERNAL_SERVER_ERROR = 0x82212301,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82212302,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_SERVER_BUSY = 0x82212303,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_AUTHORIZATION_SERVER_ERROR = 0x82212304,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_ENTITLEMENT_SERVER_ERROR = 0x82212305,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_UNDER_MAINTENANCE = 0x82212340,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_SERVICE_CLOSED = 0x82212341,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_SERVICE_NOT_READY = 0x82212342,
  SCE_NP_WEBAPI_SERVER_ERROR_SCORE_RANKING_UNKNOWN_ERROR = 0x82212380,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_BAD_REQUEST = 0x82213001,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_UNSUPPORTED_API_VERSION = 0x82213002,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_TOO_LARGE_BODY = 0x82213003,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_NP_ENVIRONMENT = 0x82213004,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_NP_TITLE_ID = 0x82213005,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_NP_SERVICE_LABEL = 0x82213006,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_NP_COMMUNICATION_ID = 0x82213007,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_SERVICE_ID = 0x82213008,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_NP_SERVICE_NAME = 0x82213009,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_OAUTH_CLIENT_ID = 0x8221300A,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221300B,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_USER_NOT_FOUND = 0x8221300C,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_RESOURCE_NOT_FOUND = 0x8221300D,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221300E,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_QUERY_STRING = 0x82213100,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_QUERY_PARAMETER = 0x82213101,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_QUERY_PARAMETER_COMBINATION = 0x82213102,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82213103,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_PARAMETER_IN_URL = 0x82213104,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_MANDATORY_QUERY_PARAMETER_MISSING = 0x82213105,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_HEADER = 0x82213140,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_HEADER_REQUIRED = 0x82213141,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_BODY = 0x82213180,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NULL_VALUE_NOT_ALLOWED = 0x82213181,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_BODY_PARAMETER = 0x82213182,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82213183,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_BODY_PARAMETER_COMBINATION = 0x82213184,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_BLOCKED_USER_EXISTS = 0x82213185,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_MANDATORY_BODY_PARAMETER_MISSING = 0x82213186,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_MULTIPART_HEADER = 0x82213187,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_MANDATORY_MULTIPART_HEADER_MISSING = 0x82213188,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_ACCESS_TOKEN_REQUIRED = 0x82213200,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_ACCESS_TOKEN = 0x82213201,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_EXPIRED_ACCESS_TOKEN = 0x82213202,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NP_TITLE_TOKEN_REQUIRED = 0x82213203,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INVALID_NP_TITLE_TOKEN = 0x82213204,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_EXPIRED_NP_TITLE_TOKEN = 0x82213205,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NOT_AUTHORIZED = 0x82213206,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_BANNED_APPLICATION = 0x82213207,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_BANNED_USER = 0x82213208,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_BANNED_DEVICE = 0x82213209,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221320A,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_RATE_LIMIT_EXCEEDED = 0x8221320B,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221320C,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221320D,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NEED_TO_UPGRADE = 0x8221320E,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NOT_AUTHORIZED_ON_PLATFORM = 0x8221320F,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_USERS_ACCESS_TOKEN_REQUIRED = 0x82213210,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82213211,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_UNKNOWN_CLIENT = 0x82213280,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NP_TITLE_ID_NOT_FOUND = 0x82213281,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NP_SERVICE_LABEL_NOT_FOUND = 0x82213282,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NOT_AUTHORIZED_APPLICATION = 0x82213283,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_NP_COMMUNICATION_ID_NOT_FOUND = 0x82213284,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_SERVICE_ID_NOT_FOUND = 0x82213285,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_UNEXPECTED_ERROR = 0x82213300,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_INTERNAL_SERVER_ERROR = 0x82213301,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82213302,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_SERVER_BUSY = 0x82213303,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_AUTHORIZATION_SERVER_ERROR = 0x82213304,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_ENTITLEMENT_SERVER_ERROR = 0x82213305,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_UNDER_MAINTENANCE = 0x82213340,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_SERVICE_CLOSED = 0x82213341,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_SERVICE_NOT_READY = 0x82213342,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_UNKNOWN_ERROR = 0x82213380,
  SCE_NP_WEBAPI_SERVER_ERROR_TUS_CONDITIONS_NOT_FULFILLED = 0x82213400,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_BAD_REQUEST = 0x82214001,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_UNSUPPORTED_API_VERSION = 0x82214002,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_TOO_LARGE_BODY = 0x82214003,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_NP_ENVIRONMENT = 0x82214004,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_NP_TITLE_ID = 0x82214005,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_NP_SERVICE_LABEL = 0x82214006,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_NP_COMMUNICATION_ID = 0x82214007,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_SERVICE_ID = 0x82214008,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_NP_SERVICE_NAME = 0x82214009,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_OAUTH_CLIENT_ID = 0x8221400A,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221400B,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_USER_NOT_FOUND = 0x8221400C,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_RESOURCE_NOT_FOUND = 0x8221400D,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221400E,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_QUERY_STRING = 0x82214100,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_QUERY_PARAMETER = 0x82214101,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_QUERY_PARAMETER_COMBINATION = 0x82214102,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82214103,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_PARAMETER_IN_URL = 0x82214104,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_MANDATORY_QUERY_PARAMETER_MISSING = 0x82214105,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_HEADER = 0x82214140,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_HEADER_REQUIRED = 0x82214141,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_BODY = 0x82214180,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NULL_VALUE_NOT_ALLOWED = 0x82214181,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_BODY_PARAMETER = 0x82214182,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82214183,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_BODY_PARAMETER_COMBINATION = 0x82214184,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_BLOCKED_USER_EXISTS = 0x82214185,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_MANDATORY_BODY_PARAMETER_MISSING = 0x82214186,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_MULTIPART_HEADER = 0x82214187,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_MANDATORY_MULTIPART_HEADER_MISSING = 0x82214188,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_ACCESS_TOKEN_REQUIRED = 0x82214200,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_ACCESS_TOKEN = 0x82214201,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_EXPIRED_ACCESS_TOKEN = 0x82214202,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NP_TITLE_TOKEN_REQUIRED = 0x82214203,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INVALID_NP_TITLE_TOKEN = 0x82214204,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_EXPIRED_NP_TITLE_TOKEN = 0x82214205,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NOT_AUTHORIZED = 0x82214206,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_BANNED_APPLICATION = 0x82214207,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_BANNED_USER = 0x82214208,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_BANNED_DEVICE = 0x82214209,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221420A,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_RATE_LIMIT_EXCEEDED = 0x8221420B,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221420C,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221420D,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NEED_TO_UPGRADE = 0x8221420E,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NOT_AUTHORIZED_ON_PLATFORM = 0x8221420F,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_USERS_ACCESS_TOKEN_REQUIRED = 0x82214210,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82214211,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_UNKNOWN_CLIENT = 0x82214280,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NP_TITLE_ID_NOT_FOUND = 0x82214281,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NP_SERVICE_LABEL_NOT_FOUND = 0x82214282,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NOT_AUTHORIZED_APPLICATION = 0x82214283,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_NP_COMMUNICATION_ID_NOT_FOUND = 0x82214284,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_SERVICE_ID_NOT_FOUND = 0x82214285,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_UNEXPECTED_ERROR = 0x82214300,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_INTERNAL_SERVER_ERROR = 0x82214301,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82214302,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_SERVER_BUSY = 0x82214303,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_AUTHORIZATION_SERVER_ERROR = 0x82214304,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_ENTITLEMENT_SERVER_ERROR = 0x82214305,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_UNDER_MAINTENANCE = 0x82214340,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_SERVICE_CLOSED = 0x82214341,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_SERVICE_NOT_READY = 0x82214342,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_UNKNOWN_ERROR = 0x82214380,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_IP_ADDRESS_IS_ALREADY_REGISTERED = 0x82214400,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_ACCESS_SOURCE_IP_ADDRESS_IS_SPECIFIED_FOR_DELETION = 0x82214401,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_EXCEED_REGISTRATION_LIMIT = 0x82214402,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_CANNOT_DELETE_LAST_IP_ADDRESS_ENTRY = 0x82214403,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_MANAGEMENT_TARGET_SERVICE_NOT_READY_IN_THE_ENVIRONMENT = 0x82214404,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_CONDITIONS_NOT_FULFILLED = 0x82214500,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_SETTERID_USER_NOT_FOUND = 0x82214501,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_OVER_THE_GAME_DATA_LIMIT = 0x82214580,
  SCE_NP_WEBAPI_SERVER_ERROR_MANAGEMENT_RANKING_GAME_DATA_ALREADY_EXISTS = 0x82214581,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_BAD_REQUEST = 0x82217001,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_UNSUPPORTED_API_VERSION = 0x82217002,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_TOO_LARGE_BODY = 0x82217003,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_NP_ENVIRONMENT = 0x82217004,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_NP_TITLE_ID = 0x82217005,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_NP_SERVICE_LABEL = 0x82217006,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_NP_COMMUNICATION_ID = 0x82217007,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_SERVICE_ID = 0x82217008,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_NP_SERVICE_NAME = 0x82217009,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_OAUTH_CLIENT_ID = 0x8221700A,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221700B,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_USER_NOT_FOUND = 0x8221700C,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_RESOURCE_NOT_FOUND = 0x8221700D,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221700E,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_QUERY_STRING = 0x82217100,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_QUERY_PARAMETER = 0x82217101,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_QUERY_PARAMETER_COMBINATION = 0x82217102,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82217103,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_PARAMETER_IN_URL = 0x82217104,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_MANDATORY_QUERY_PARAMETER_MISSING = 0x82217105,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_HEADER = 0x82217140,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_HEADER_REQUIRED = 0x82217141,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_BODY = 0x82217180,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NULL_VALUE_NOT_ALLOWED = 0x82217181,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_BODY_PARAMETER = 0x82217182,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82217183,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_BODY_PARAMETER_COMBINATION = 0x82217184,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_BLOCKED_USER_EXISTS = 0x82217185,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_MANDATORY_BODY_PARAMETER_MISSING = 0x82217186,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_MULTIPART_HEADER = 0x82217187,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_MANDATORY_MULTIPART_HEADER_MISSING = 0x82217188,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_ACCESS_TOKEN_REQUIRED = 0x82217200,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_ACCESS_TOKEN = 0x82217201,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_EXPIRED_ACCESS_TOKEN = 0x82217202,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NP_TITLE_TOKEN_REQUIRED = 0x82217203,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INVALID_NP_TITLE_TOKEN = 0x82217204,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_EXPIRED_NP_TITLE_TOKEN = 0x82217205,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NOT_AUTHORIZED = 0x82217206,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_BANNED_APPLICATION = 0x82217207,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_BANNED_USER = 0x82217208,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_BANNED_DEVICE = 0x82217209,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221720A,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_RATE_LIMIT_EXCEEDED = 0x8221720B,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221720C,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221720D,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NEED_TO_UPGRADE = 0x8221720E,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NOT_AUTHORIZED_ON_PLATFORM = 0x8221720F,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_USERS_ACCESS_TOKEN_REQUIRED = 0x82217210,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82217211,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_UNKNOWN_CLIENT = 0x82217280,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NP_TITLE_ID_NOT_FOUND = 0x82217281,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NP_SERVICE_LABEL_NOT_FOUND = 0x82217282,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NOT_AUTHORIZED_APPLICATION = 0x82217283,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_NP_COMMUNICATION_ID_NOT_FOUND = 0x82217284,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_SERVICE_ID_NOT_FOUND = 0x82217285,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_UNEXPECTED_ERROR = 0x82217300,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_INTERNAL_SERVER_ERROR = 0x82217301,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82217302,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_SERVER_BUSY = 0x82217303,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_AUTHORIZATION_SERVER_ERROR = 0x82217304,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_ENTITLEMENT_SERVER_ERROR = 0x82217305,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_UNDER_MAINTENANCE = 0x82217340,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_SERVICE_CLOSED = 0x82217341,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_SERVICE_NOT_READY = 0x82217342,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_UNKNOWN_ERROR = 0x82217380,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_RESOURCE_BEING_LOCKED = 0x82217400,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_FOLLOWING_FULL = 0x82217401,
  SCE_NP_WEBAPI_SERVER_ERROR_FOLLOW_FOLLOWERS_FULL = 0x82217403,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_BAD_REQUEST = 0x82218001,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_UNSUPPORTED_API_VERSION = 0x82218002,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_TOO_LARGE_BODY = 0x82218003,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_NP_ENVIRONMENT = 0x82218004,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_NP_TITLE_ID = 0x82218005,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_NP_SERVICE_LABEL = 0x82218006,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_NP_COMMUNICATION_ID = 0x82218007,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_SERVICE_ID = 0x82218008,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_NP_SERVICE_NAME = 0x82218009,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_OAUTH_CLIENT_ID = 0x8221800A,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221800B,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_USER_NOT_FOUND = 0x8221800C,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_RESOURCE_NOT_FOUND = 0x8221800D,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221800E,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_QUERY_STRING = 0x82218100,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_QUERY_PARAMETER = 0x82218101,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_QUERY_PARAMETER_COMBINATION = 0x82218102,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x82218103,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_PARAMETER_IN_URL = 0x82218104,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_MANDATORY_QUERY_PARAMETER_MISSING = 0x82218105,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_HEADER = 0x82218140,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_HEADER_REQUIRED = 0x82218141,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_BODY = 0x82218180,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NULL_VALUE_NOT_ALLOWED = 0x82218181,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_BODY_PARAMETER = 0x82218182,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x82218183,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_BODY_PARAMETER_COMBINATION = 0x82218184,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_BLOCKED_USER_EXISTS = 0x82218185,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_MANDATORY_BODY_PARAMETER_MISSING = 0x82218186,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_MULTIPART_HEADER = 0x82218187,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_MANDATORY_MULTIPART_HEADER_MISSING = 0x82218188,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ACCESS_TOKEN_REQUIRED = 0x82218200,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_ACCESS_TOKEN = 0x82218201,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EXPIRED_ACCESS_TOKEN = 0x82218202,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NP_TITLE_TOKEN_REQUIRED = 0x82218203,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INVALID_NP_TITLE_TOKEN = 0x82218204,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EXPIRED_NP_TITLE_TOKEN = 0x82218205,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NOT_AUTHORIZED = 0x82218206,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_BANNED_APPLICATION = 0x82218207,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_BANNED_USER = 0x82218208,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_BANNED_DEVICE = 0x82218209,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221820A,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_RATE_LIMIT_EXCEEDED = 0x8221820B,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221820C,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221820D,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NEED_TO_UPGRADE = 0x8221820E,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NOT_AUTHORIZED_ON_PLATFORM = 0x8221820F,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_USERS_ACCESS_TOKEN_REQUIRED = 0x82218210,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x82218211,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_UNKNOWN_CLIENT = 0x82218280,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NP_TITLE_ID_NOT_FOUND = 0x82218281,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NP_SERVICE_LABEL_NOT_FOUND = 0x82218282,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NOT_AUTHORIZED_APPLICATION = 0x82218283,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NP_COMMUNICATION_ID_NOT_FOUND = 0x82218284,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_SERVICE_ID_NOT_FOUND = 0x82218285,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_UNEXPECTED_ERROR = 0x82218300,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_INTERNAL_SERVER_ERROR = 0x82218301,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_SERVICE_TEMPORARILY_UNAVAILABLE = 0x82218302,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_SERVER_BUSY = 0x82218303,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_AUTHORIZATION_SERVER_ERROR = 0x82218304,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ENTITLEMENT_SERVER_ERROR = 0x82218305,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_UNDER_MAINTENANCE = 0x82218340,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_SERVICE_CLOSED = 0x82218341,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_SERVICE_NOT_READY = 0x82218342,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_UNKNOWN_ERROR = 0x82218380,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_IP_ADDRESS_IS_ALREADY_REGISTERED = 0x82218800,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ACCESS_SOURCE_IP_ADDRESS_IS_SPECIFIED_FOR_DELETION = 0x82218801,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EXCEED_REGISTRATION_LIMIT = 0x82218802,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_CANNOT_DELETE_LAST_IP_ADDRESS_ENTRY = 0x82218803,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ONLINEID_IS_ALREADY_REGISTERED_IN_ACL = 0x82218810,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EXCEED_REGISTRATION_LIMIT_OF_ONLINEID_ACL = 0x82218811,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_DURATION_SETTINGS_IS_INVALID = 0x82218820,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EVENT_IS_ALREADY_PROMOTED = 0x82218821,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_TOTAL_SEARCHABLE_EVENTS_COUNT_EXCEED_THE_LIMIT = 0x82218822,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_SAME_COUNTRY_CODE_CANNOT_BE_REUSED_IN_MULTIPLE_COUNTRIES_PARAMETER = 0x82218823,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_THE_TARGET_EVENT_IS_CURRENTLY_BEING_UPDATED_BY_OTHER_REQUESTS = 0x82218824,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_PROCESS_OF_UPDATING_DID_NOT_COMPLETE = 0x82218825,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_PARAMETER_IN_BODY_CONFLICT_WITH_THE_TARGET_EVENT_TYPE = 0x82218826,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_DOES_NOT_MEET_THE_EVENT_PARTICIPATION_CONDITIONS = 0x82218900,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EXPIRATION_OF_PARTICIPATION_DATA_AND_TIME = 0x82218901,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_REACHED_THE_MAXIMUM_NUMBER_OF_REGISTERED_EVENTS = 0x82218902,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_CANNOT_UNREGISTER_BECAUSE_EVENT_HAS_ALREADY_FINISHED = 0x82218903,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EVENT_HAS_BEEN_CANCELED = 0x82218904,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_REACHED_THE_MAXIMUM_NUMBER_OF_CREATED_EVENTS = 0x82218905,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_CANNOT_UPDATE_BECAUSE_EVENT_HAS_ALREADY_FINISHED = 0x82218906,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_CANNOT_SET_THE_MAXIMUM_NUMBER_OF_MEMBERS_SMALLER_THAN_CURRENT_PARTICIPANTS = 0x82218907,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_REACHED_THE_MAXIMUM_NUMBER_OF_PARTICIPANTS = 0x82218908,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_CANNOT_REGISTER_DUE_TO_EVENT_OWNER = 0x82218909,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_CANNOT_UPDATE_BECAUSE_EVENT_HAS_ALREADY_STARTED = 0x8221890A,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_CANNOT_UPDATE_BECAUSE_EVENT_HAS_NOT_BEEN_HELD = 0x8221890B,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_CANNOT_REGISTER_EVENT_HAVING_MEMBER_BLOCKED = 0x8221890C,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_NOT_ALLOWED_TO_REGISTER = 0x8221890D,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ALREADY_REGISTERED_EVENT = 0x8221890E,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EVENT_HAS_ALREADY_FINISHED = 0x8221890F,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_THE_RESULT_IS_ALREADY_SET = 0x82218910,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ACCOUNT_HAS_NOT_BEEN_LINKED_OR_LINKAGE_HAS_EXPIRED = 0x82218911,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_TOURNAMENT_VENDOR_SERVER_TEMPORARILY_UNAVAILABLE = 0x82218912,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_THIS_API_DOES_NOT_SUPPORT_THE_EVENT_TYPE = 0x82218913,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_TOURNAMENT_VENDOR_SERVER_RETURNS_AN_ERROR_RESPONSE = 0x82218914,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_YOU_MUST_REGISTER_THE_EVENT_BEFORE_CHECK_IN = 0x82218915,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_EXPIRATION_OF_CHECK_IN_TIME = 0x82218916,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_YOU_MUST_REGISTER_THE_EVENT_BEFORE_SET_PREFERENCE = 0x82218917,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_ACCESS_DENIED_DUE_TO_INVALID_TEAM_PERMISSION = 0x82218918,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_TEAM_IS_ALREADY_REGISTERED_WITH_ANOTHER_ROSTER = 0x82218919,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_MAXIMUM_NUMBER_OF_ROSTER_MEMBERS_REACHED = 0x8221891A,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_API_DOES_NOT_SUPPORT_THE_SPECIFIED_TOURNAMENT_FORMAT = 0x8221891B,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_TEMPORARY_RESULTS_ARE_NOT_AVAILABLE_FOR_THE_EVENT = 0x8221891C,
  SCE_NP_WEBAPI_SERVER_ERROR_EVENTS_FORMAT_OF_RESULTS_IS_NOT_SUPPORTED_BY_VENDOR = 0x8221891D,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_BAD_REQUEST = 0x8221B001,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_UNSUPPORTED_API_VERSION = 0x8221B002,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_TOO_LARGE_BODY = 0x8221B003,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_NP_ENVIRONMENT = 0x8221B004,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_NP_TITLE_ID = 0x8221B005,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_NP_SERVICE_LABEL = 0x8221B006,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_NP_COMMUNICATION_ID = 0x8221B007,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_SERVICE_ID = 0x8221B008,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_NP_SERVICE_NAME = 0x8221B009,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_OAUTH_CLIENT_ID = 0x8221B00A,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221B00B,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_USER_NOT_FOUND = 0x8221B00C,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_RESOURCE_NOT_FOUND = 0x8221B00D,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221B00E,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_QUERY_STRING = 0x8221B100,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_QUERY_PARAMETER = 0x8221B101,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_QUERY_PARAMETER_COMBINATION = 0x8221B102,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x8221B103,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_PARAMETER_IN_URL = 0x8221B104,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_MANDATORY_QUERY_PARAMETER_MISSING = 0x8221B105,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_HEADER = 0x8221B140,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_HEADER_REQUIRED = 0x8221B141,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_BODY = 0x8221B180,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NULL_VALUE_NOT_ALLOWED = 0x8221B181,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_BODY_PARAMETER = 0x8221B182,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x8221B183,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_BODY_PARAMETER_COMBINATION = 0x8221B184,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_BLOCKED_USER_EXISTS = 0x8221B185,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_MANDATORY_BODY_PARAMETER_MISSING = 0x8221B186,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_MULTIPART_HEADER = 0x8221B187,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_MANDATORY_MULTIPART_HEADER_MISSING = 0x8221B188,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_ACCESS_TOKEN_REQUIRED = 0x8221B200,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_ACCESS_TOKEN = 0x8221B201,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_EXPIRED_ACCESS_TOKEN = 0x8221B202,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NP_TITLE_TOKEN_REQUIRED = 0x8221B203,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INVALID_NP_TITLE_TOKEN = 0x8221B204,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_EXPIRED_NP_TITLE_TOKEN = 0x8221B205,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NOT_AUTHORIZED = 0x8221B206,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_BANNED_APPLICATION = 0x8221B207,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_BANNED_USER = 0x8221B208,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_BANNED_DEVICE = 0x8221B209,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221B20A,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_RATE_LIMIT_EXCEEDED = 0x8221B20B,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221B20C,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221B20D,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NEED_TO_UPGRADE = 0x8221B20E,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NOT_AUTHORIZED_ON_PLATFORM = 0x8221B20F,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_USERS_ACCESS_TOKEN_REQUIRED = 0x8221B210,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x8221B211,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_UNKNOWN_CLIENT = 0x8221B280,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NP_TITLE_ID_NOT_FOUND = 0x8221B281,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NP_SERVICE_LABEL_NOT_FOUND = 0x8221B282,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NOT_AUTHORIZED_APPLICATION = 0x8221B283,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NP_COMMUNICATION_ID_NOT_FOUND = 0x8221B284,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_SERVICE_ID_NOT_FOUND = 0x8221B285,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_UNEXPECTED_ERROR = 0x8221B300,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_INTERNAL_SERVER_ERROR = 0x8221B301,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_SERVICE_TEMPORARILY_UNAVAILABLE = 0x8221B302,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_SERVER_BUSY = 0x8221B303,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_AUTHORIZATION_SERVER_ERROR = 0x8221B304,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_ENTITLEMENT_SERVER_ERROR = 0x8221B305,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_UNDER_MAINTENANCE = 0x8221B340,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_SERVICE_CLOSED = 0x8221B341,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_SERVICE_NOT_READY = 0x8221B342,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_UNKNOWN_ERROR = 0x8221B380,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_EXCEEDED_GROUP_MEMBERS_LIMIT = 0x8221B400,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_EXCEEDED_PARTICIPATING_GROUPS_LIMIT = 0x8221B401,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_ALREADY_GROUP_MEMBER = 0x8221B402,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_REJECTED_DUE_TO_ALL_TARGETS_SETTINGS = 0x8221B404,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_REJECTED_DUE_TO_APPLICANT_ROLE = 0x8221B405,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_NOT_REGISTERED_TO_THE_TEAM = 0x8221B406,
  SCE_NP_WEBAPI_SERVER_ERROR_GROUPS_REJECTED_DUE_TO_APPLICANT_STATUS = 0x8221B407,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_ONLY_FRIEND_CAN_JOIN_CUSTOM_LIST = 0x8221C420,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_CUSTOM_LIST_NOT_FOUND = 0x8221C421,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_DUPLICATED_CUSTOM_LIST_IDS = 0x8221C422,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_CUSTOM_LIST_EXCEEDS_LIMIT = 0x8221C423,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_CUSTOM_LIST_INVALID_ACCOUNT_ID = 0x8221C424,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_ACCOUNT_NUMBER_EXCEEDS_LIMIT = 0x8221C429,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_BAD_REQUEST = 0x8221D001,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_UNSUPPORTED_API_VERSION = 0x8221D002,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_TOO_LARGE_BODY = 0x8221D003,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_NP_ENVIRONMENT = 0x8221D004,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_NP_TITLE_ID = 0x8221D005,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_NP_SERVICE_LABEL = 0x8221D006,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_NP_COMMUNICATION_ID = 0x8221D007,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_SERVICE_ID = 0x8221D008,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_NP_SERVICE_NAME = 0x8221D009,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_OAUTH_CLIENT_ID = 0x8221D00A,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221D00B,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_USER_NOT_FOUND = 0x8221D00C,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_RESOURCE_NOT_FOUND = 0x8221D00D,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221D00E,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_QUERY_STRING = 0x8221D100,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_QUERY_PARAMETER = 0x8221D101,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_QUERY_PARAMETER_COMBINATION = 0x8221D102,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x8221D103,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_PARAMETER_IN_URL = 0x8221D104,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_MANDATORY_QUERY_PARAMETER_MISSING = 0x8221D105,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_HEADER = 0x8221D140,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_HEADER_REQUIRED = 0x8221D141,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_BODY = 0x8221D180,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NULL_VALUE_NOT_ALLOWED = 0x8221D181,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_BODY_PARAMETER = 0x8221D182,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x8221D183,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_BODY_PARAMETER_COMBINATION = 0x8221D184,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_BLOCKED_USER_EXISTS = 0x8221D185,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_MANDATORY_BODY_PARAMETER_MISSING = 0x8221D186,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_MULTIPART_HEADER = 0x8221D187,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_MANDATORY_MULTIPART_HEADER_MISSING = 0x8221D188,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_ACCESS_TOKEN_REQUIRED = 0x8221D200,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_ACCESS_TOKEN = 0x8221D201,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_EXPIRED_ACCESS_TOKEN = 0x8221D202,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NP_TITLE_TOKEN_REQUIRED = 0x8221D203,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INVALID_NP_TITLE_TOKEN = 0x8221D204,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_EXPIRED_NP_TITLE_TOKEN = 0x8221D205,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NOT_AUTHORIZED = 0x8221D206,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_BANNED_APPLICATION = 0x8221D207,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_BANNED_USER = 0x8221D208,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_BANNED_DEVICE = 0x8221D209,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221D20A,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_RATE_LIMIT_EXCEEDED = 0x8221D20B,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221D20C,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221D20D,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NEED_TO_UPGRADE = 0x8221D20E,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NOT_AUTHORIZED_ON_PLATFORM = 0x8221D20F,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_USERS_ACCESS_TOKEN_REQUIRED = 0x8221D210,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x8221D211,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_UNKNOWN_CLIENT = 0x8221D280,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NP_TITLE_ID_NOT_FOUND = 0x8221D281,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NP_SERVICE_LABEL_NOT_FOUND = 0x8221D282,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NOT_AUTHORIZED_APPLICATION = 0x8221D283,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_NP_COMMUNICATION_ID_NOT_FOUND = 0x8221D284,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_SERVICE_ID_NOT_FOUND = 0x8221D285,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_UNEXPECTED_ERROR = 0x8221D300,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_INTERNAL_SERVER_ERROR = 0x8221D301,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_SERVICE_TEMPORARILY_UNAVAILABLE = 0x8221D302,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_SERVER_BUSY = 0x8221D303,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_AUTHORIZATION_SERVER_ERROR = 0x8221D304,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_ENTITLEMENT_SERVER_ERROR = 0x8221D305,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_UNDER_MAINTENANCE = 0x8221D340,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_SERVICE_CLOSED = 0x8221D341,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_SERVICE_NOT_READY = 0x8221D342,
  SCE_NP_WEBAPI_SERVER_ERROR_UNIVERSAL_DATA_SYSTEM_GATEWAY_UNKNOWN_ERROR = 0x8221D380,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_BAD_REQUEST = 0x8221E001,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_UNSUPPORTED_API_VERSION = 0x8221E002,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_TOO_LARGE_BODY = 0x8221E003,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_NP_ENVIRONMENT = 0x8221E004,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_NP_TITLE_ID = 0x8221E005,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_NP_SERVICE_LABEL = 0x8221E006,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_NP_COMMUNICATION_ID = 0x8221E007,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_SERVICE_ID = 0x8221E008,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_NP_SERVICE_NAME = 0x8221E009,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_OAUTH_CLIENT_ID = 0x8221E00A,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NP_TITLE_ID_NOT_MATCHING_TOKENS = 0x8221E00B,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_USER_NOT_FOUND = 0x8221E00C,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_RESOURCE_NOT_FOUND = 0x8221E00D,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_ACCESS_DENIED_BY_RESOURCE_OWNERSHIP = 0x8221E00E,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_QUERY_STRING = 0x8221E100,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_QUERY_PARAMETER = 0x8221E101,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_QUERY_PARAMETER_COMBINATION = 0x8221E102,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_UNAVAILABLE_QUERY_PARAMETER_FOR_RESOURCE = 0x8221E103,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_PARAMETER_IN_URL = 0x8221E104,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_MANDATORY_QUERY_PARAMETER_MISSING = 0x8221E105,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_HEADER = 0x8221E140,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_HEADER_REQUIRED = 0x8221E141,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_BODY = 0x8221E180,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NULL_VALUE_NOT_ALLOWED = 0x8221E181,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_BODY_PARAMETER = 0x8221E182,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_BODY_PARAMETER_LIST_LENGTH = 0x8221E183,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_BODY_PARAMETER_COMBINATION = 0x8221E184,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_BLOCKED_USER_EXISTS = 0x8221E185,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_MANDATORY_BODY_PARAMETER_MISSING = 0x8221E186,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_MULTIPART_HEADER = 0x8221E187,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_MANDATORY_MULTIPART_HEADER_MISSING = 0x8221E188,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_ACCESS_TOKEN_REQUIRED = 0x8221E200,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_ACCESS_TOKEN = 0x8221E201,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_EXPIRED_ACCESS_TOKEN = 0x8221E202,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NP_TITLE_TOKEN_REQUIRED = 0x8221E203,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INVALID_NP_TITLE_TOKEN = 0x8221E204,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_EXPIRED_NP_TITLE_TOKEN = 0x8221E205,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NOT_AUTHORIZED = 0x8221E206,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_BANNED_APPLICATION = 0x8221E207,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_BANNED_USER = 0x8221E208,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_BANNED_DEVICE = 0x8221E209,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_ACCESS_DENIED_DUE_TO_TITILE_MISMATCH = 0x8221E20A,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_RATE_LIMIT_EXCEEDED = 0x8221E20B,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_ACCESS_DENIED_BY_PRIVACY_LEVEL = 0x8221E20C,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NOT_AUTHORIZED_ACCESS_TOKEN = 0x8221E20D,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NEED_TO_UPGRADE = 0x8221E20E,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NOT_AUTHORIZED_ON_PLATFORM = 0x8221E20F,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_USERS_ACCESS_TOKEN_REQUIRED = 0x8221E210,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_ACCESS_DENIED_DUE_TO_PARENTAL_CONTROL_SETTINGS = 0x8221E211,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_UNKNOWN_CLIENT = 0x8221E280,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NP_TITLE_ID_NOT_FOUND = 0x8221E281,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NP_SERVICE_LABEL_NOT_FOUND = 0x8221E282,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NOT_AUTHORIZED_APPLICATION = 0x8221E283,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_NP_COMMUNICATION_ID_NOT_FOUND = 0x8221E284,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_SERVICE_ID_NOT_FOUND = 0x8221E285,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_UNEXPECTED_ERROR = 0x8221E300,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_INTERNAL_SERVER_ERROR = 0x8221E301,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_SERVICE_TEMPORARILY_UNAVAILABLE = 0x8221E302,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_SERVER_BUSY = 0x8221E303,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_AUTHORIZATION_SERVER_ERROR = 0x8221E304,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_ENTITLEMENT_SERVER_ERROR = 0x8221E305,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_UNDER_MAINTENANCE = 0x8221E340,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_SERVICE_CLOSED = 0x8221E341,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_SERVICE_NOT_READY = 0x8221E342,
  SCE_NP_WEBAPI_SERVER_ERROR_USER_PROFILE_GATEWAY_UNKNOWN_ERROR = 0x8221E380,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_INVALID_REQUEST = 0x82302F01,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_INTERNAL_ERROR = 0x82302F02,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_SERVICE_UNAVAILABLE = 0x82302F03,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_INVALID_PARAMETER = 0x82302F05,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_NOT_IMPLEMENTED = 0x82302F07,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_SERVER_ERROR = 0x82302F08,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_CLIENT_ERROR = 0x82302F09,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_UNSUPPORTED_MEDIA_TYPE = 0x82302F0A,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_INVALID_PSN_ACCESS_TOKEN = 0x82302F12,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_PRIVACY_VIOLATION = 0x82302F14,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_POST_RATE_LIMIT_EXCEEDED = 0x82302F31,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_NO_FEED_CONTENT = 0x82302F32,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_SOURCE_ID_DOES_NOT_MATCH = 0x82302F33,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_TITLE_ID_DOES_NOT_MATCH = 0x82302F35,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_USER_PRIVACY_DOESNT_ALLOW_SHARING = 0x82302F36,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_INVALID_JSON = 0x82302F38,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_INVALID_ASPECT_RATIO = 0x82302F39,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_ONLINE_ID_NOT_SET = 0x82302F3A,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_INVALID_POST_OR_STORY = 0x82302F3B,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_CONTENT_NOT_FOUND = 0x82302F63,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_NOT_AUTHORIZED = 0x82302F64,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_REQUEST_TOO_LONG = 0x82302F67,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_REQUEST_URI_TOO_LONG = 0x82302F68,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_HTTP_NOT_IMPLEMENTED = 0x82302F69,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_COMMENT_EXCEEDED_CHARACTER_LIMIT = 0x82302F98,
  SCE_NP_WEBAPI_SERVER_ERROR_ACTIVITY_FEED_COMMENT_EXCEEDED_POST_LIMIT = 0x82302F99,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_INVALID_PSN_ACCESS_TOKEN_2 = 0x82303112,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_INVALID_REQUEST = 0x82303F01,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_INTERNAL_ERROR = 0x82303F02,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_SERVICE_UNAVAILABLE = 0x82303F03,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_RESOURCE_NOT_FOUND = 0x82303F04,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_INVALID_PARAMETER = 0x82303F05,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_DATA_ACCESS_ERROR = 0x82303F06,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_NOT_IMPLEMENTED = 0x82303F07,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_SERVER_ERROR = 0x82303F08,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_CLIENT_ERROR = 0x82303F09,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_UNSUPPORTED_MEDIA_TYPE = 0x82303F0A,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_INVALID_PSN_ACCESS_TOKEN = 0x82303F12,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_RATE_LIMIT_EXCEEDED = 0x82303F31,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_NOT_AUTHORIZED = 0x82303F64,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_NOT_ALLOWED = 0x82303F65,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_FORBIDDEN = 0x82303F66,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_REQUEST_TOO_LONG = 0x82303F67,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_REQUEST_URI_TOO_LONG = 0x82303F68,
  SCE_NP_WEBAPI_SERVER_ERROR_ENTITLEMENTS_HTTP_NOT_IMPLEMENTED = 0x82303F69,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_INVALID_PSN_ACCESS_TOKEN_2 = 0x82304112,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_INVALID_REQUEST = 0x82304F01,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_INTERNAL_ERROR = 0x82304F02,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_SERVICE_UNAVAILABLE = 0x82304F03,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_RESOURCE_NOT_FOUND = 0x82304F04,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_INVALID_PARAMETER = 0x82304F05,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_DATA_ACCESS_ERROR = 0x82304F06,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_NOT_IMPLEMENTED = 0x82304F07,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_SERVER_ERROR = 0x82304F08,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_CLIENT_ERROR = 0x82304F09,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_UNSUPPORTED_MEDIA_TYPE = 0x82304F0A,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_INVALID_PSN_ACCESS_TOKEN = 0x82304F12,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_RATE_LIMIT_EXCEEDED = 0x82304F31,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_CONTAINER_NOT_FOUND = 0x82304F61,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_DEVICE_NOT_FOUND = 0x82304F62,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_CONTENT_NOT_FOUND = 0x82304F63,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_NOT_AUTHORIZED = 0x82304F64,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_NOT_ALLOWED = 0x82304F65,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_FORBIDDEN = 0x82304F66,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_REQUEST_TOO_LONG = 0x82304F67,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_REQUEST_URI_TOO_LONG = 0x82304F68,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_HTTP_NOT_IMPLEMENTED = 0x82304F69,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_HTTP_VERSION_NOT_SUPPORTED = 0x82304F6A,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_CACHE_OUT_OF_DATE = 0x82304F6B,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_PASSWORD_REQUIRED = 0x82304F6C,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_CREDIT_CARD_INFO_REQUIRED = 0x82304F6D,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMERCE_NOT_ELIGIBLE = 0x82304F6E,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_INVALID_REQUEST = 0x82305F01,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_INTERNAL_ERROR = 0x82305F02,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_SERVICE_UNAVAILABLE = 0x82305F03,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_RESOURCE_NOT_FOUND = 0x82305F04,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_INVALID_PARAMETER = 0x82305F05,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_DATA_ACCESS_ERROR = 0x82305F06,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_NOT_IMPLEMENTED = 0x82305F07,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_SERVER_ERROR = 0x82305F08,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_CLIENT_ERROR = 0x82305F09,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_UNSUPPORTED_MEDIA_TYPE = 0x82305F0A,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_3RD_PARTY_RATE_LIMIT_EXCEEDED = 0x82305F0C,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_INVALID_PSN_ACCESS_TOKEN = 0x82305F12,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_INVALID_3RD_PARTY_TOKEN = 0x82305F13,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_PRIVACY_VIOLATION = 0x82305F14,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_REQUIRE_PROFILE_UPDATE = 0x82305F21,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_REQUIRE_AUTHORIZATION = 0x82305F22,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_POST_RATE_LIMIT_EXCEEDED = 0x82305F31,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_INVALID_JSON = 0x82305F38,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_OG_TEMPLATE_ERROR = 0x82305F41,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_INVALID_MASTER_TOKEN = 0x82305F42,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_PROXY_AUTH_FAILURE = 0x82305F43,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_INVALID_APP_ID = 0x82305F44,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_NON_REGISTERED_TITLE_ID = 0x82305F45,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_NOT_SUPPORTED = 0x82305F47,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_CONTENT_NOT_FOUND = 0x82305F63,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_NOT_AUTHORIZED = 0x82305F64,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_NOT_ALLOWED = 0x82305F65,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_FORBIDDEN = 0x82305F66,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_REQUEST_TOO_LONG = 0x82305F67,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_REQUEST_URI_TOO_LONG = 0x82305F68,
  SCE_NP_WEBAPI_SERVER_ERROR_SOCIAL_NETWORK_HTTP_NOT_IMPLEMENTED = 0x82305F69,
  SCE_NP_WEBAPI_SERVER_ERROR_AUTH_ACCOUNT_UNAUTHORIZED = 0x82307201,
  SCE_NP_WEBAPI_SERVER_ERROR_AUTH_ACCOUNT_BAD_REQUEST = 0x82307842,
  SCE_NP_WEBAPI_SERVER_ERROR_AUTH_ACCOUNT_MANDATORY_ACCOUNT_ATTRIBUTE_MISSING = 0x82307845,
  SCE_NP_WEBAPI_SERVER_ERROR_AUTH_ACCOUNT_MISSING_PRIVACY_ATTRIBUTE = 0x82307846,
  SCE_NP_WEBAPI_SERVER_ERROR_AUTH_ACCOUNT_INTERNAL_SERVER_ERROR = 0x82307850,
  SCE_NP_WEBAPI_SERVER_ERROR_AUTH_ACCOUNT_NEEDS_RESUME_FLOW = 0x82307851,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_INVALID_REQUEST = 0x8230CF01,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_INTERNAL_ERROR = 0x8230CF02,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_SERVICE_UNAVAILABLE = 0x8230CF03,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_RESOURCE_NOT_FOUND = 0x8230CF04,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_INVALID_PARAMETER = 0x8230CF05,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_NOT_IMPLEMENTED = 0x8230CF07,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_SERVER_ERROR = 0x8230CF08,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_CLIENT_ERROR = 0x8230CF09,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_INVALID_PSN_ACCESS_TOKEN = 0x8230CF12,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_PRIVACY_VIOLATION = 0x8230CF14,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_NO_FEED_CONTENT = 0x8230CF32,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_INVALID_JSON = 0x8230CF38,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_GET_RATE_LIMIT_EXCEEDED = 0x8230CF3E,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_NOT_SUPPORTED = 0x8230CF47,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_CONTENT_NOT_FOUND = 0x8230CF63,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_FORBIDDEN = 0x8230CF66,
  SCE_NP_WEBAPI_SERVER_ERROR_FRIEND_FINDER_HTTP_NOT_IMPLEMENTED = 0x8230CF69,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_REQUEST = 0x8230DF01,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INTERNAL_ERROR = 0x8230DF02,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_SERVICE_UNAVAILABLE = 0x8230DF03,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_RESOURCE_NOT_FOUND = 0x8230DF04,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_PARAMETER = 0x8230DF05,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_DATA_ACCESS_ERROR = 0x8230DF06,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NOT_IMPLEMENTED = 0x8230DF07,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_SERVER_ERROR = 0x8230DF08,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_CLIENT_ERROR = 0x8230DF09,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_UNSUPPORTED_MEDIA_TYPE = 0x8230DF0A,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_LENGTH_REQUIRED = 0x8230DF0B,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_RATE_LIMIT_EXCEEDED = 0x8230DF0C,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PROMPT_FOR_PERMISSIONS = 0x8230DF11,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_PSN_ACCESS_TOKEN = 0x8230DF12,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_3RD_PARTY_TOKEN = 0x8230DF13,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PRIVACY_VIOLATION = 0x8230DF14,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_REQUIRE_PROFILE_UPDATE = 0x8230DF21,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_REQUIRE_AUTHORIZATION = 0x8230DF22,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_POST_RATE_LIMIT_EXCEEDED = 0x8230DF31,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NO_FEED_CONTENT = 0x8230DF32,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_SOURCE_ID_DOES_NOT_MATCH = 0x8230DF33,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_USERS_ARE_NOT_FRIENDS = 0x8230DF34,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_TITLE_ID_DOES_NOT_MATCH = 0x8230DF35,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_USER_PRIVACY_DOESNT_ALLOW_SHARING = 0x8230DF36,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_TROPHY_DOES_NOT_EXIST = 0x8230DF37,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_JSON = 0x8230DF38,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_ASPECT_RATIO = 0x8230DF39,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_ONLINE_ID_NOT_SET = 0x8230DF3A,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_POST_OR_STORY = 0x8230DF3B,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NOT_MODIFIED = 0x8230DF3C,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_RESET_CONTENT = 0x8230DF3D,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_GET_RATE_LIMIT_EXCEEDED = 0x8230DF3E,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NO_PRIVACY_CONTENT = 0x8230DF3F,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_OG_TEMPLATE_ERROR = 0x8230DF41,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_MASTER_TOKEN = 0x8230DF42,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PROXY_AUTH_FAILURE = 0x8230DF43,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_APP_ID = 0x8230DF44,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NON_REGISTERED_TITLE_ID = 0x8230DF45,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_REFRESH_TOKEN = 0x8230DF46,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NOT_SUPPORTED = 0x8230DF47,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NICOLIVE_PROGRAM_CLOSED = 0x8230DF49,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_STATS_NOT_FOUND = 0x8230DF51,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_CONTAINER_NOT_FOUND = 0x8230DF61,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_DEVICE_NOT_FOUND = 0x8230DF62,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_CONTENT_NOT_FOUND = 0x8230DF63,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NOT_AUTHORIZED = 0x8230DF64,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NOT_ALLOWED = 0x8230DF65,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_FORBIDDEN = 0x8230DF66,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_REQUEST_TOO_LONG = 0x8230DF67,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_REQUEST_URI_TOO_LONG = 0x8230DF68,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_HTTP_NOT_IMPLEMENTED = 0x8230DF69,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_HTTP_VERSION_NOT_SUPPORTED = 0x8230DF6A,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_CACHE_OUT_OF_DATE = 0x8230DF6B,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PASSWORD_REQUIRED = 0x8230DF6C,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_CREDIT_CARD_INFO_REQUIRED = 0x8230DF6D,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NOT_ELIGIBLE = 0x8230DF6E,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_DUPLICATE_TILE_ID = 0x8230DF71,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_TILE_ID_NOT_FOUND = 0x8230DF72,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_STATUS_FOR_CANCEL = 0x8230DF73,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PUSH_NOTIFICATION_SERVER_BUSY = 0x8230DF74,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PUSH_NOTIFICATION_NO_SUCH_USER = 0x8230DF75,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PUSH_NOTIFICATION_BAD_REQUEST = 0x8230DF76,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PUSH_NOTIFICATION_INTERNAL_SERVER_ERROR = 0x8230DF77,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_PUSH_NOTIFICATION_SERVICE_UNAVAILABLE = 0x8230DF78,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_UNSUPPORTED_ENTITLEMENT_TYPE = 0x8230DF79,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_TROPHY_SERVICE_NOT_FOUND = 0x8230DF7A,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_TROPHY_RECORDS_NOT_FOUND = 0x8230DF7B,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_FRIEND_RECORDS_NOT_FOUND = 0x8230DF7C,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NPCOMMID_NOT_FOUND = 0x8230DF7D,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_ENTITLEMENTID_NOT_FOUND = 0x8230DF80,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_DATA_NOT_FOUND = 0x8230DF81,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_XLIFF = 0x8230DF82,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_UNAVAILABLE_FOR_LEGAL_REASONS = 0x8230DF83,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_FACEBOOK_URL_IS_NOT_ACCEPTED = 0x8230DF84,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_CAMPAIGN_NOT_FOUND = 0x8230DF91,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_CAMPAIGN_DATA_ACCESS_ERROR = 0x8230DF92,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_CAMPAIGN_CACHE_ISSUE = 0x8230DF93,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_USER_ALREADY_VOTED = 0x8230DF94,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_STATUS_FOR_UPDATE_VOTE = 0x8230DF95,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_SUBMIT_VOTE_ERROR = 0x8230DF96,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_NO_COMMENTS_FOUND = 0x8230DF97,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_EXCEEDED_CHARACTER_LIMIT = 0x8230DF98,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_MAXIMUM_COMMENTS_LIMIT = 0x8230DF99,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_UNABLE_TO_DELETE_DEFAULT_LIVE_THREAD = 0x8230DFA0,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_LIVE_THREAD_NOT_FOUND = 0x8230DFA1,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_LIVE_THREAD_LIMIT_REACHED = 0x8230DFA2,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_AGE_RESTRICTED_TITLE = 0x8230DFA3,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_COMMUNITY_TYPE_REQUIRED = 0x8230DFA4,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_DESCRIPTION_EXCEEDS_CHARACTER_LIMIT = 0x8230DFA5,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_EMPTY_MESSAGE = 0x8230DFA6,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INAPPROPRIATE_DESCRIPTION = 0x8230DFA7,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INAPPROPRIATE_MESSAGE = 0x8230DFA8,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INAPPROPRIATE_NAME = 0x8230DFA9,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_LANGUAGE_CODE = 0x8230DFAA,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_STATE = 0x8230DFAB,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_UNAVAILABLE_TITLE = 0x8230DFAC,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_TITLE_ID_REQUIRED = 0x8230DFAD,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_INVALID_NAME = 0x8230DFAE,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_POST_NOT_FOUND = 0x8230DFB8,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_POST_TAKEN_DOWN = 0x8230DFB9,
  SCE_NP_WEBAPI_SERVER_ERROR_COMMUNITY_REPLY_NOT_FOUND = 0x8230DFBA,
  SCE_NP_WEBAPI_SERVER_ERROR_LISTS_INTERNAL_ERROR = 0x82314F02,
  SCE_NP_WEBAPI_SERVER_ERROR_LISTS_RESOURCE_NOT_FOUND = 0x82314F04,
  SCE_NP_WEBAPI_SERVER_ERROR_LISTS_INVALID_PARAMETER = 0x82314F05,
  SCE_NP_WEBAPI_SERVER_ERROR_LISTS_INVALID_PSN_ACCESS_TOKEN = 0x82314F12,
  SCE_NP_WEBAPI_SERVER_ERROR_LISTS_NOT_ALLOWED = 0x82314F65,
  SCE_NP_WEBAPI_SERVER_ERROR_LISTS_FORBIDDEN = 0x82314F66,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_LIST_INTERNAL_ERROR = 0x82317F02,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_LIST_RESOURCE_NOT_FOUND = 0x82317F04,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_LIST_INVALID_PARAMETER = 0x82317F05,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_LIST_INVALID_PSN_ACCESS_TOKEN = 0x82317F12,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_LIST_NOT_ALLOWED = 0x82317F65,
  SCE_NP_WEBAPI_SERVER_ERROR_GAME_LIST_FORBIDDEN = 0x82317F66,
  SCE_NP_WEBAPI_SERVER_ERROR_SHARED_MEDIA_INVALID_TITLE_ID_LOOKUP = 0x82318502,
  SCE_NP_WEBAPI_SERVER_ERROR_SHARED_MEDIA_INVALID_ONLINE_ID = 0x82318F01,
  SCE_NP_WEBAPI_SERVER_ERROR_SHARED_MEDIA_RATE_LIMIT_EXCEEDED = 0x82318F0C,
  SCE_NP_WEBAPI_SERVER_ERROR_SHARED_MEDIA_INVALID_APP_ID = 0x82318F44,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_INVALID_PSN_ACCESS_TOKEN = 0x8231C212,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_RATE_LIMIT_EXCEEDED = 0x8231C231,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_NOT_AUTHORIZED = 0x8231C264,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_SP_SERVER_UNAVAILABLE = 0x8231CA03,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_SP_SERVER_FORBIDDEN = 0x8231CA66,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_INVALID_REQUEST = 0x8231CF01,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_INTERNAL_ERROR = 0x8231CF02,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_SERVER_UNAVAILABLE = 0x8231CF03,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_INVALID_PARAMETER = 0x8231CF05,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_NOT_IMPLEMENTED = 0x8231CF07,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_NOT_ENOUGH_SCOPES = 0x8231CF64,
  SCE_NP_WEBAPI_SERVER_ERROR_PS_MUSIC_HTTP_NOT_IMPLEMENTED = 0x8231CF69,
  SCE_NP_WEBAPI_SERVER_ERROR_EMS_SERVER_UNAVAILABLE = 0x82385F03,
  SCE_NP_WEBAPI_SERVER_ERROR_EMS_SERVER_ERROR = 0x82385F08,
  SCE_NP_WEBAPI_SERVER_ERROR_EMS_DATA_NOT_FOUND = 0x82385F81,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_SCHEMA_REQUEST_VALIDATION_ERROR = 0x82D0044C,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_BAD_REQUEST_PARAMETER = 0x82D0044D,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_EMPTY_REQUEST_PAYLOAD = 0x82D0044E,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_TOKEN_NOT_FOUND = 0x82D00834,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_SUSPENDED_ACCOUNT = 0x82D00835,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_BANNED_ACCOUNT = 0x82D00836,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_PASSWORD_EXPIRED = 0x82D00837,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_TOSUA_MUST_BE_RE_ACCEPTED = 0x82D0083E,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_TOSUA_MUST_BE_REACCEPTED_FOR_SUBACCOUNT = 0x82D0083F,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_TOSUA_MUST_BE_REACCEPTED_FOR_SUBACCOUNT_BY_SUBACCOUNT = 0x82D00840,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_TOKEN_IS_EXPIRED = 0x82D00848,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_TOKEN_IS_INVALID = 0x82D00849,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_INVALID_SCOPES = 0x82D0084A,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_NO_ACCESS_TOKEN = 0x82D0084B,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_ACCOUNT_NO_LONGER_EXISTS = 0x82D0084C,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_OAUTH_SERVICE_UNAVAILABLE = 0x82D01388,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_COMMON_OAUTH_COMMUNICATION_FAILURE = 0x82D01389,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ACCOUNTS_ACCOUNT_DOES_NOT_EXIST = 0x82D103E9,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ACCOUNTS_INSECURE_PASSWORD = 0x82D10C82,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ACCOUNTS_MANDATORY_PARAMETER_MISSING = 0x82D10C85,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ACCOUNTS_MISSING_ACCOUNT_COMPONENT = 0x82D10FAA,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ACCOUNTS_SMS_RATE_LIMITED = 0x82D10FAB,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ACCOUNTS_REQUEST_RATE_LIMITED = 0x82D10FAC,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ENTITLEMENTS_ACS_SERVER_ERROR = 0x82D20FA0,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ENTITLEMENTS_ACS_API_TIMEOUT = 0x82D20FA1,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ENTITLEMENTS_UNEXCTED_INTERNAL_SERVER_ERROR = 0x82D20FA2,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ENTITLEMENTS_DATA_PLATFORM_ERROR = 0x82D20FA3,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ENTITLEMENTS_INVALID_CALL_VOLUME = 0x82D20FA4,
  SCE_NP_WEB_CLIENT_ERROR_KORRA_ENTITLEMENTS_SERVICE_UNAVAILABLE = 0x82D21388,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_1_INVALID_REQUEST = 0x82E00001,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_2_UNKNOWN_ERROR_HAS_OCCURRED = 0x82E00002,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_18_NEEDS_SOFTWARE_UPDATE = 0x82E00012,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_20_UNMATCH_SIGN_IN_ID_OR_PASSWORD = 0x82E00014,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_27_ACCOUNT_HAS_BEEN_REMOVED_LOGICALLY = 0x82E0001B,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_28_ACCOUNT_HAS_BEEN_BANNED = 0x82E0001C,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_29_CONSOLE_HAS_BEEN_BANNED = 0x82E0001D,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_51_ERROR_CODE_RESERVED_FOR_FUTURE_USE = 0x82E00033,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_51_NEEDS_EMAIL_VERIFICATION = 0x82E00033,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_100_PASSWORD_WAS_RESET_BY_SERVER = 0x82E00064,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_103_NEEDS_EULA_RE_AGREEMENT = 0x82E00067,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4098_MANDATORY_PARAMETER_IS_MISSING = 0x82E01002,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4099_PARAMETER_IS_MALFORMED = 0x82E01003,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4102_BAD_CLIENT_CREDENTIALS = 0x82E01006,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4114_INSUFFICIENT_SCOPE = 0x82E01012,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4130_QUERY_PARAMETERS_NOT_ALLOWED_FOR_POST = 0x82E01022,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4135_NEEDS_UPGRADE_TO_USE_PSN_SERVICE = 0x82E01027,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4150_INVALID_REQUEST = 0x82E01036,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4151_UNAUTHORIZED_CLIENT = 0x82E01037,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4152_UNSUPPORTED_GRANT_TYPE = 0x82E01038,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4153_INVALID_SCOPE = 0x82E01039,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4154_INVALID_CONSOLE_TOKEN = 0x82E0103A,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4155_TOKEN_IS_EXPIRED_OR_NOT_FOUND = 0x82E0103B,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4156_UNSUPPORTED_RESPONSE_TYPE = 0x82E0103C,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4157_SERVER_ERROR = 0x82E0103D,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4158_TEMPORARILY_UNAVAILABLE = 0x82E0103E,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4159_INVALID_REFRESH_TOKEN = 0x82E0103F,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4160_NO_DETAILS_AVAILABLE = 0x82E01040,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4161_CLIENT_WAS_NOT_FOUND = 0x82E01041,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4162_ACCOUNT_MUST_BE_SUBACCOUNT_AND_NEEDS_EULA_RE_AGREEMENT = 0x82E01042,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4162_MASTER_ACCOUNT_NEEDS_EULA_RE_AGREEMENT_FOR_SUB_ACCOUNT = 0x82E01042,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4165_PASSWORD_WAS_PROBABLY_CHANGED = 0x82E01045,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4170_ACCESS_DENIED = 0x82E0104A,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4171_TOKEN_IS_EXPIRED = 0x82E0104B,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4172_TOKEN_IS_INVALID = 0x82E0104C,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4173_INVALID_CLIENT = 0x82E0104D,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4174_REDIRECT_URI_MISMATCH = 0x82E0104E,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4175_METHOD_NOT_ALLOWED = 0x82E0104F,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4176_ACCOUNT_HAS_BEEN_BANNED = 0x82E01050,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4192_UNEXPECTED_PARAMETER = 0x82E01060,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4199_SERVICE_HAS_ENDED = 0x82E01067,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4202_SERVICE_IS_UNDER_MAINTENANCE = 0x82E0106A,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_4222_SUB_ACCOUNT_NEEDS_EULA_RE_AGREEMENT = 0x82E0107E,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_9001_SERVICE_DEPENDENCY_IS_TEMPORARILY_UNAVAILABLE = 0x82E02329,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_9002_SERVICE_IS_BUSY = 0x82E0232A,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_9003_AUTH_SERVICE_IS_UNDER_MAINTENANCE = 0x82E0232B,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_100_CONTINUE = 0x82E10064,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_101_SWITCHING_PROTOCOLS = 0x82E10065,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_102_PROCESSING = 0x82E10066,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_200_OK = 0x82E100C8,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_201_CREATED = 0x82E100C9,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_202_ACCEPTED = 0x82E100CA,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_203_NON_AUTHORITATIVE_INFORMATION = 0x82E100CB,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_204_NO_CONTENT = 0x82E100CC,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_205_RESET_CONTENT = 0x82E100CD,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_206_PARTIAL_CONTENT = 0x82E100CE,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_207_MULTI_STATUS = 0x82E100CF,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_208_ALREADY_REPORTED = 0x82E100D0,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_226_IM_USED = 0x82E100E2,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_300_MULTIPLE_CHOICES = 0x82E1012C,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_301_MOVED_PERMANENTLY = 0x82E1012D,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_302_FOUND = 0x82E1012E,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_303_SEE_OTHER = 0x82E1012F,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_304_NOT_MODIFIED = 0x82E10130,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_305_USE_PROXY = 0x82E10131,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_306_SWITCH_PROXY = 0x82E10132,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_307_TEMPORARY_REDIRECT = 0x82E10133,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_308_PERMANENT_REDIRECT = 0x82E10134,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_400_BAD_REQUEST = 0x82E10190,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_401_UNAUTHORIZED = 0x82E10191,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_402_PAYMENT_REQUIRED = 0x82E10192,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_403_FORBIDDEN = 0x82E10193,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_404_NOT_FOUND = 0x82E10194,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_405_METHOD_NOT_ALLOWED = 0x82E10195,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_406_NOT_ACCEPTABLE = 0x82E10196,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_407_PROXY_AUTHENTICATION_REQUIRED = 0x82E10197,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_408_REQUEST_TIMEOUT = 0x82E10198,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_409_CONFLICT = 0x82E10199,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_410_GONE = 0x82E1019A,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_411_LENGTH_REQUIRED = 0x82E1019B,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_412_PRECONDITION_FAILED = 0x82E1019C,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_413_REQUEST_ENTITY_TOO_LARGE = 0x82E1019D,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_414_REQUEST_URI_TOO_LONG = 0x82E1019E,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_415_UNSUPPORTED_MEDIA_TYPE = 0x82E1019F,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_416_REQUESTED_RANGE_NOT_SATISFIABLE = 0x82E101A0,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_417_EXPECTATION_FAILED = 0x82E101A1,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_418_I_M_A_TEAPOT = 0x82E101A2,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_419_AUTHENTICATION_TIMEOUT = 0x82E101A3,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_420_METHOD_FAILURE_ENHANCE_YOUR_CALM = 0x82E101A4,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_422_UNPROCESSABLE_ENTITY = 0x82E101A6,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_423_LOCKED = 0x82E101A7,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_424_FAILED_DEPENDENCY = 0x82E101A8,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_425_METHOD_FAILURE = 0x82E101A9,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_426_UNORDERED_COLLECTION = 0x82E101AA,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_427_UPGRADE_REQUIRED = 0x82E101AB,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_428_PRECONDITION_REQUIRED = 0x82E101AC,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_429_TOO_MANY_REQUESTS = 0x82E101AD,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 0x82E101AF,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_444_NO_RESPONSE = 0x82E101BC,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_449_RETRY_WITH = 0x82E101C1,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_450_BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS = 0x82E101C2,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_451_UNAVAILABLE_FOR_LEGAL_REASONS = 0x82E101C3,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_499_CLIENT_CLOSED_REQUEST = 0x82E101F3,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_500_INTERNAL_SERVER_ERROR = 0x82E101F4,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_501_NOT_IMPLEMENTED = 0x82E101F5,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_502_BAD_GATEWAY = 0x82E101F6,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_503_SERVICE_UNAVAILABLE = 0x82E101F7,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_504_GATEWAY_TIMEOUT = 0x82E101F8,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_505_HTTP_VERSION_NOT_SUPPORTED = 0x82E101F9,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_506_VARIANT_ALSO_NEGOTIATES = 0x82E101FA,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_507_INSUFFICIENT_STORAGE = 0x82E101FB,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_508_LOOP_DETECTED = 0x82E101FC,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_509_BANDWIDTH_LIMIT_EXCEEDED = 0x82E101FD,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_510_NOT_EXTENDED = 0x82E101FE,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_511_NETWORK_AUTHENTICATION_REQUIRED = 0x82E101FF,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_522_CONNECTION_TIMED_OUT = 0x82E1020A,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_598_NETWORK_READ_TIMEOUT_ERROR = 0x82E10256,
  SCE_NP_WEBAPI_SERVER_ERROR_OAUTH_HTTP_STATUS_CODE_599_NETWORK_CONNECT_TIMEOUT_ERROR = 0x82E10257,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_100_CONTINUE = 0x82F00064,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_101_SWITCHING_PROTOCOLS = 0x82F00065,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_102_PROCESSING = 0x82F00066,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_200_OK = 0x82F000C8,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_201_CREATED = 0x82F000C9,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_202_ACCEPTED = 0x82F000CA,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_203_NON_AUTHORITATIVE_INFORMATION = 0x82F000CB,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_204_NO_CONTENT = 0x82F000CC,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_205_RESET_CONTENT = 0x82F000CD,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_206_PARTIAL_CONTENT = 0x82F000CE,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_207_MULTI_STATUS = 0x82F000CF,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_208_ALREADY_REPORTED = 0x82F000D0,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_226_IM_USED = 0x82F000E2,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_300_MULTIPLE_CHOICES = 0x82F0012C,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_301_MOVED_PERMANENTLY = 0x82F0012D,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_302_FOUND = 0x82F0012E,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_303_SEE_OTHER = 0x82F0012F,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_304_NOT_MODIFIED = 0x82F00130,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_305_USE_PROXY = 0x82F00131,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_306_SWITCH_PROXY = 0x82F00132,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_307_TEMPORARY_REDIRECT = 0x82F00133,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_308_PERMANENT_REDIRECT = 0x82F00134,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_400_BAD_REQUEST = 0x82F00190,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_401_UNAUTHORIZED = 0x82F00191,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_402_PAYMENT_REQUIRED = 0x82F00192,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_403_FORBIDDEN = 0x82F00193,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_404_NOT_FOUND = 0x82F00194,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_405_METHOD_NOT_ALLOWED = 0x82F00195,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_406_NOT_ACCEPTABLE = 0x82F00196,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_407_PROXY_AUTHENTICATION_REQUIRED = 0x82F00197,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_408_REQUEST_TIMEOUT = 0x82F00198,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_409_CONFLICT = 0x82F00199,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_410_GONE = 0x82F0019A,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_411_LENGTH_REQUIRED = 0x82F0019B,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_412_PRECONDITION_FAILED = 0x82F0019C,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_413_REQUEST_ENTITY_TOO_LARGE = 0x82F0019D,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_414_REQUEST_URI_TOO_LONG = 0x82F0019E,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_415_UNSUPPORTED_MEDIA_TYPE = 0x82F0019F,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_416_REQUESTED_RANGE_NOT_SATISFIABLE = 0x82F001A0,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_417_EXPECTATION_FAILED = 0x82F001A1,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_418_I_M_A_TEAPOT = 0x82F001A2,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_419_AUTHENTICATION_TIMEOUT = 0x82F001A3,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_420_METHOD_FAILURE_ENHANCE_YOUR_CALM = 0x82F001A4,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_422_UNPROCESSABLE_ENTITY = 0x82F001A6,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_423_LOCKED = 0x82F001A7,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_424_FAILED_DEPENDENCY = 0x82F001A8,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_425_METHOD_FAILURE = 0x82F001A9,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_426_UNORDERED_COLLECTION = 0x82F001AA,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_427_UPGRADE_REQUIRED = 0x82F001AB,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_428_PRECONDITION_REQUIRED = 0x82F001AC,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_429_TOO_MANY_REQUESTS = 0x82F001AD,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_431_REQUEST_HEADER_FIELDS_TOO_LARGE = 0x82F001AF,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_444_NO_RESPONSE = 0x82F001BC,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_449_RETRY_WITH = 0x82F001C1,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_450_BLOCKED_BY_WINDOWS_PARENTAL_CONTROLS = 0x82F001C2,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_451_UNAVAILABLE_FOR_LEGAL_REASONS = 0x82F001C3,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_499_CLIENT_CLOSED_REQUEST = 0x82F001F3,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_500_INTERNAL_SERVER_ERROR = 0x82F001F4,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_501_NOT_IMPLEMENTED = 0x82F001F5,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_502_BAD_GATEWAY = 0x82F001F6,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_503_SERVICE_UNAVAILABLE = 0x82F001F7,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_504_GATEWAY_TIMEOUT = 0x82F001F8,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_505_HTTP_VERSION_NOT_SUPPORTED = 0x82F001F9,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_506_VARIANT_ALSO_NEGOTIATES = 0x82F001FA,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_507_INSUFFICIENT_STORAGE = 0x82F001FB,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_508_LOOP_DETECTED = 0x82F001FC,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_509_BANDWIDTH_LIMIT_EXCEEDED = 0x82F001FD,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_510_NOT_EXTENDED = 0x82F001FE,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_511_NETWORK_AUTHENTICATION_REQUIRED = 0x82F001FF,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_522_CONNECTION_TIMED_OUT = 0x82F0020A,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_598_NETWORK_READ_TIMEOUT_ERROR = 0x82F00256,
  SCE_NP_WEBAPI_SERVER_ERROR_HTTP_STATUS_CODE_599_NETWORK_CONNECT_TIMEOUT_ERROR = 0x82F00257,
  SCE_NP_WEBAPI_SERVER_ERROR_UNEXPECTED_ERROR = 0x82FFFFFF,
  SCE_SHADER_LIVE_EDITING_ERROR_INIT_ERROR = 0x83100000,
  SCE_SHADER_LIVE_EDITING_ERROR_NOT_INIT = 0x83100001,
  SCE_SHADER_LIVE_EDITING_ERROR_ALREADY_INIT = 0x83100002,
  SCE_SHADER_LIVE_EDITING_ERROR_INVALID_ARG = 0x83100003,
  SCE_SHADER_LIVE_EDITING_ERROR_INTERNAL_ERROR = 0x83100004,
  SCE_SHADER_LIVE_EDITING_ERROR_OOM = 0x83100005,
  SCE_SHADER_LIVE_EDITING_ERROR_FATAL_ERROR = 0x83100006,
};

typedef signed __int64 _Unwind_Sword;

typedef unsigned __int64 _Unwind_Ptr;

typedef unsigned __int64 _Unwind_Internal_Ptr;

typedef unsigned __int64 _Unwind_Word;

typedef int _Unwind_Action;

typedef unsigned __int64 _Unwind_Exception_Class;

enum $BDF88968CAE1EA74E42809B9AE857E7C
{
  _URC_NO_REASON = 0x0,
  _URC_FOREIGN_EXCEPTION_CAUGHT = 0x1,
  _URC_FATAL_PHASE2_ERROR = 0x2,
  _URC_FATAL_PHASE1_ERROR = 0x3,
  _URC_NORMAL_STOP = 0x4,
  _URC_END_OF_STACK = 0x5,
  _URC_HANDLER_FOUND = 0x6,
  _URC_INSTALL_CONTEXT = 0x7,
  _URC_CONTINUE_UNWIND = 0x8,
};

typedef enum $BDF88968CAE1EA74E42809B9AE857E7C _Unwind_Reason_Code;

struct _Unwind_Exception;

struct _Unwind_Context;

typedef void (__fastcall *_Unwind_Exception_Cleanup_Fn)(_Unwind_Reason_Code, struct _Unwind_Exception *);

typedef _Unwind_Reason_Code (__fastcall *_Unwind_Personality_Fn)(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *);

typedef _Unwind_Reason_Code (__fastcall *_Unwind_Stop_Fn)(int, _Unwind_Action, _Unwind_Exception_Class, struct _Unwind_Exception *, struct _Unwind_Context *, void *);

typedef _Unwind_Reason_Code (__fastcall *_Unwind_Trace_Fn)(struct _Unwind_Context *, void *);

typedef _Unwind_Sword __guard;

struct sce::Json::MemAllocator
{
  int (**_vptr$MemAllocator)(void);
};

struct sce::Json::RootParam;

typedef __int64 __int64_t;

typedef __int64_t int64_t;

typedef unsigned __int64 __uint64_t;

typedef __uint64_t uint64_t;

union sce::Json::Value::$098264421DCE8DF7120629DD57D0E419
{
  bool m_boolean;
  int64_t m_integer;
  uint64_t m_uinteger;
  double m_real;
  sce::Json::String *m_string;
  sce::Json::Array *m_array;
  sce::Json::Object *m_object;
};

enum sce::Json::ValueType : __int32
{
  kValueTypeNull = 0x0,
  kValueTypeBoolean = 0x1,
  kValueTypeInteger = 0x2,
  kValueTypeUInteger = 0x3,
  kValueTypeReal = 0x4,
  kValueTypeString = 0x5,
  kValueTypeArray = 0x6,
  kValueTypeObject = 0x7,
};

struct sce::Json::Value
{
  sce::Json::Value *m_parent;
  sce::Json::RootParam *m_rootparam;
  sce::Json::Value::$098264421DCE8DF7120629DD57D0E419 _anon_0;
  char _padding[4];
  sce::Json::ValueType m_type;
};

struct sce::Json::String
{
  void *m_impl;
};

struct sce::Json::Array
{
  void *m_impl;
};

struct sce::Json::Object
{
  void *m_impl;
};

struct sce::Json::Initializer
{
  bool initstatus;
};

struct sce::Json::Parser;

struct ctl::CAPCOM_NULL
{
  __int8 gap0[1];
};

typedef float f32;

struct MtObject
{
  int (**_vptr$MtObject)(void);
};

typedef unsigned int u32;

struct cArea::$E45F515631DCF3E393673D7AC0D71256::$E92EBFFBC43FAA0E7B715B8C6ED7721C
{
  unsigned __int32 mRno0 : 8;
  unsigned __int32 mRno1 : 8;
  unsigned __int32 mRno2 : 8;
  unsigned __int32 mRno3 : 8;
};

union cArea::$E45F515631DCF3E393673D7AC0D71256
{
  u32 mRno;
  cArea::$E45F515631DCF3E393673D7AC0D71256::$E92EBFFBC43FAA0E7B715B8C6ED7721C _anon_0;
};

struct pthread_mutex;

typedef struct pthread_mutex *pthread_mutex_t;

typedef pthread_mutex_t ScePthreadMutex;

struct MtCriticalSection
{
  ScePthreadMutex mCSection;
};

typedef int s32;

struct MtString
{
  MtString::STRING *value;
};

struct __cppobj cArea : MtObject
{
  cArea::$E45F515631DCF3E393673D7AC0D71256 _anon_0;
  MtCriticalSection mCs;
  bool mInit;
  s32 mAreaPt;
  MtString mSegmentName;
  rArchive *mpShaderArchive;
};

typedef cArcLoaderBase *TICKET;

struct __cppobj aBase : cArea
{
  TICKET mArcTicket;
};

typedef unsigned __int8 u8;

struct __attribute__((aligned(4))) MtString::STRING
{
  s32 ref;
  u32 length;
  u8 str[1];
};

typedef char MT_CHAR;

typedef __uint64_t u64;

struct __cppobj cResource : MtObject
{
  unsigned __int32 mMagicID : 16;
  unsigned __int32 mMagicTag : 16;
  MT_CHAR mPath[64];
  s32 mRefCount;
  u32 mAttr;
  unsigned __int32 mState : 8;
  unsigned __int32 mQuality : 3;
  unsigned __int32 mTag : 21;
  u32 mSize;
  u64 mID;
  u32 _padding0;
  u32 _padding1;
};

typedef unsigned __int16 u16;

struct rArchive::ARCHIVE_HDR
{
  u32 magic;
  u16 version;
  u16 resource_num;
};

struct __cppobj __attribute__((aligned(8))) rArchive : cResource
{
  rArchive::ARCHIVE_HDR mStreamUseHdr;
  cResource **mpResource;
  u32 mResourceNum;
  u32 mTotalSize;
  u32 mCurrentSize;
  f32 mElapsedTime;
  u32 mbCrypted;
};

typedef rArchive *cArcLoaderBase::rArchivePtr;

typedef u32 ARC_TAGID;

typedef __int16 s16;

struct __cppobj __attribute__((aligned(8))) cArcLoaderBase : MtObject
{
  cArcLoaderBase::rArchivePtr *mppArc;
  ARC_TAGID *mpTag;
  u8 mMaxNum;
  u8 mNum;
  u8 mReqNum;
  u8 mPickedFlag;
  s16 mPri;
  s16 mHandle;
  u8 mState;
  u8 mRetFlag;
  u8 mTicketEnable;
  u8 _padding00;
};

typedef const MT_CHAR *MT_CTSTR;

struct MtDTI
{
  int (**_vptr$MtDTI)(void);
  MT_CTSTR mName;
  MtDTI *mpNext;
  MtDTI *mpChild;
  MtDTI *mpParent;
  MtDTI *mpLink;
  unsigned __int32 mSize : 23;
  unsigned __int32 mAllocatorIndex : 6;
  unsigned __int32 mAttr : 3;
  u32 mID;
};

struct __cppobj aBase::MyDTI : MtDTI
{
};

enum aBase::$CFFBBC157A78F3C907806DCA8172A7E2 : __int32
{
  LOAD_R0_INIT = 0x0,
  LOAD_R0_MOVE = 0x1,
  LOAD_R0_EXIT = 0x2,
};

enum aBase::$DF1D57C6AA56AF4DD21A2AD01788C501 : __int32
{
  MOVE_R0_INIT = 0x0,
  MOVE_R0_TO_LOBBY = 0x1,
};

struct __cppobj cArea::MyDTI : MtDTI
{
};

struct __cppobj MtObject::MyDTI : MtDTI
{
};

typedef unsigned __int64 sizetype;

typedef unsigned __int64 _Sizet;

typedef _Sizet size_t;

struct MtUI
{
  __int8 gap0[1];
};

struct MtSize::$7D1E8F1E15ED0AC4E32578D96F6E1FE1::$B3A3A4336EC990ACC391E96ADD3FA671
{
  s32 w;
  s32 h;
};

union MtSize::$7D1E8F1E15ED0AC4E32578D96F6E1FE1
{
  MtSize::$7D1E8F1E15ED0AC4E32578D96F6E1FE1::$B3A3A4336EC990ACC391E96ADD3FA671 _anon_0;
  u64 wh;
};

struct MtSize
{
  MtSize::$7D1E8F1E15ED0AC4E32578D96F6E1FE1 _anon_0;
};

struct MtSizeF
{
  f32 w;
  f32 h;
};

struct MtFloat2
{
  f32 x;
  f32 y;
};

struct MtVector3
{
  f32 x;
  f32 y;
  f32 z;
  f32 pad_;
};

struct MtVector4
{
  f32 x;
  f32 y;
  f32 z;
  f32 w;
};

struct MtQuaternion
{
  f32 x;
  f32 y;
  f32 z;
  f32 w;
};

struct MtFloat4
{
  f32 x;
  f32 y;
  f32 z;
  f32 w;
};

struct MtFloat3
{
  f32 x;
  f32 y;
  f32 z;
};

struct MtFloat4A
{
  f32 x;
  f32 y;
  f32 z;
  f32 w;
};

struct MtFloat3A
{
  f32 x;
  f32 y;
  f32 z;
};

struct MtMatrix
{
  MtVector4 m[4];
};

struct MtMatrix33
{
  MtVector3 m[3];
};

struct MtFloat3x3
{
  f32 m[3][3];
};

struct MtVector2
{
  f32 x;
  f32 y;
};

struct MtFloat2A
{
  f32 x;
  f32 y;
};

struct MtHalf4
{
  s16 x;
  s16 y;
  s16 z;
  s16 w;
};

struct MtHalf2
{
  s16 x;
  s16 y;
};

struct MtFloat4x3
{
  f32 m[4][3];
};

struct MtFloat3x4
{
  f32 m[3][4];
};

struct MtFloat4x4
{
  f32 m[4][4];
};

typedef void (*MT_MFUNC)(MtObject *);

typedef void (*MT_MFUNC32)(MtObject *, u32);

typedef void (*MT_MFUNC64)(MtObject *, u64);

union __attribute__((aligned(16))) MtProperty::$1CD642C785520FF42488FF2A10B48BA4
{
  void *mpAdr;
  MT_MFUNC mpGetter;
  MT_MFUNC32 mpGetter32;
  MT_MFUNC64 mpGetter64;
};

union __attribute__((aligned(16))) MtProperty::$40D3676346E0918370E0E1738F55A89F
{
  u32 mCount;
  u64 mCount64;
  MT_MFUNC mpGetCount;
};

struct MtProperty
{
  MT_CTSTR mName;
  unsigned __int32 mType : 16;
  unsigned __int32 mAttr : 16;
  MtObject *mpOwner;
  __attribute__((packed)) __attribute__((aligned(1))) MtProperty::$1CD642C785520FF42488FF2A10B48BA4 _anon_0;
  __attribute__((packed)) __attribute__((aligned(1))) MtProperty::$40D3676346E0918370E0E1738F55A89F _anon_1;
  MT_MFUNC mpSetter;
  _BYTE gap40[8];
  MT_MFUNC mpSetCount;
  _BYTE gap50[8];
  u32 mIndex;
  MtProperty *mpNext;
  MtProperty *mpPrev;
};

enum MtProperty::TYPE : __int32
{
  TYPE_UNDEFINED = 0x0,
  TYPE_CLASS = 0x1,
  TYPE_CLASSREF = 0x2,
  TYPE_BOOL = 0x3,
  TYPE_U8 = 0x4,
  TYPE_U16 = 0x5,
  TYPE_U32 = 0x6,
  TYPE_U64 = 0x7,
  TYPE_S8 = 0x8,
  TYPE_S16 = 0x9,
  TYPE_S32 = 0xA,
  TYPE_S64 = 0xB,
  TYPE_F32 = 0xC,
  TYPE_F64 = 0xD,
  TYPE_STRING = 0xE,
  TYPE_COLOR = 0xF,
  TYPE_POINT = 0x10,
  TYPE_SIZE = 0x11,
  TYPE_RECT = 0x12,
  TYPE_MATRIX = 0x13,
  TYPE_VECTOR3 = 0x14,
  TYPE_VECTOR4 = 0x15,
  TYPE_QUATERNION = 0x16,
  TYPE_PROPERTY = 0x17,
  TYPE_EVENT = 0x18,
  TYPE_GROUP = 0x19,
  TYPE_PAGE_BEGIN = 0x1A,
  TYPE_PAGE_END = 0x1B,
  TYPE_EVENT32 = 0x1C,
  TYPE_ARRAY = 0x1D,
  TYPE_PROPERTYLIST = 0x1E,
  TYPE_GROUP_END = 0x1F,
  TYPE_CSTRING = 0x20,
  TYPE_TIME = 0x21,
  TYPE_FLOAT2 = 0x22,
  TYPE_FLOAT3 = 0x23,
  TYPE_FLOAT4 = 0x24,
  TYPE_FLOAT3x3 = 0x25,
  TYPE_FLOAT4x3 = 0x26,
  TYPE_FLOAT4x4 = 0x27,
  TYPE_EASECURVE = 0x28,
  TYPE_LINE = 0x29,
  TYPE_LINESEGMENT = 0x2A,
  TYPE_RAY = 0x2B,
  TYPE_PLANE = 0x2C,
  TYPE_SPHERE = 0x2D,
  TYPE_CAPSULE = 0x2E,
  TYPE_AABB = 0x2F,
  TYPE_OBB = 0x30,
  TYPE_CYLINDER = 0x31,
  TYPE_TRIANGLE = 0x32,
  TYPE_CONE = 0x33,
  TYPE_TORUS = 0x34,
  TYPE_ELLIPSOID = 0x35,
  TYPE_RANGE = 0x36,
  TYPE_RANGEF = 0x37,
  TYPE_RANGEU16 = 0x38,
  TYPE_HERMITECURVE = 0x39,
  TYPE_ENUMLIST = 0x3A,
  TYPE_FLOAT3x4 = 0x3B,
  TYPE_LINESEGMENT4 = 0x3C,
  TYPE_AABB4 = 0x3D,
  TYPE_OSCILLATOR = 0x3E,
  TYPE_VARIABLE = 0x3F,
  TYPE_VECTOR2 = 0x40,
  TYPE_MATRIX33 = 0x41,
  TYPE_RECT3D_XZ = 0x42,
  TYPE_RECT3D = 0x43,
  TYPE_RECT3D_COLLISION = 0x44,
  TYPE_PLANE_XZ = 0x45,
  TYPE_RAY_Y = 0x46,
  TYPE_POINTF = 0x47,
  TYPE_SIZEF = 0x48,
  TYPE_RECTF = 0x49,
  TYPE_EVENT64 = 0x4A,
  TYPE_END = 0x4B,
  TYPE_CUSTOM = 0x80,
};

struct MtProperty::Custom
{
  int (**_vptr$Custom)(void);
};

struct MtProperty::Custom::PARAM
{
  MT_CTSTR name;
  MT_CTSTR value;
};

typedef char s8;

typedef __int64_t s64;

typedef double f64;

typedef __uint64_t __uintptr_t;

typedef __uintptr_t uintptr;

struct __cppobj __attribute__((aligned(8))) MtAllocator : MtObject
{
  size_t mUsedSize;
  size_t mMaxUsedSize;
  size_t mTotalSize;
  MT_CHAR mNameStr[32];
  MT_CTSTR mName;
  u16 mType;
  u16 mAttr;
  uintptr mOwner;
  MtCriticalSection mCS;
  u32 mAllocatorIndex;
};

struct __cppobj MtAllocator::MyDTI : MtDTI
{
};

enum MtAllocator::TYPE : __int32
{
  TYPE_VIRTUAL = 0x0,
  TYPE_VIRTUAL64KB = 0x1,
  TYPE_PHYSICAL = 0x2,
  TYPE_PHYSICAL64KB = 0x3,
  TYPE_PHYSICAL16MB = 0x4,
  TYPE_DEVELOP = 0x5,
  TYPE_CACHE = 0x6,
  TYPE_SHARED = 0x7,
  TYPE_ONION = 0x8,
  TYPE_GARLIC = 0x9,
  TYPE_ADDR32BIT = 0xA,
  TYPE_UNKNOWN = 0xFFFF,
};

typedef MT_CHAR *MT_STR;

struct MtColor::$044F4D5D83FE71122ED276C2E92405EB::$BECB3E075D44154C45C7731D2AAEAC58
{
  unsigned __int32 r : 8;
  unsigned __int32 g : 8;
  unsigned __int32 b : 8;
  unsigned __int32 a : 8;
};

union MtColor::$044F4D5D83FE71122ED276C2E92405EB
{
  MtColor::$044F4D5D83FE71122ED276C2E92405EB::$BECB3E075D44154C45C7731D2AAEAC58 _anon_0;
  u32 rgba;
};

struct MtColor
{
  MtColor::$044F4D5D83FE71122ED276C2E92405EB _anon_0;
};

struct MtColorF
{
  f32 r;
  f32 g;
  f32 b;
  f32 a;
};

struct MtPoint::$2E4711ED89F8BABB2324E58F83913C61::$BCF01A302A240F77107AEA73FF73102F
{
  s32 x;
  s32 y;
};

union MtPoint::$2E4711ED89F8BABB2324E58F83913C61
{
  MtPoint::$2E4711ED89F8BABB2324E58F83913C61::$BCF01A302A240F77107AEA73FF73102F _anon_0;
  u64 xy;
};

struct MtPoint
{
  MtPoint::$2E4711ED89F8BABB2324E58F83913C61 _anon_0;
};

struct MtPointF
{
  f32 x;
  f32 y;
};

struct MtRect
{
  s32 l;
  s32 t;
  s32 r;
  s32 b;
};

struct MtRectF
{
  f32 l;
  f32 t;
  f32 r;
  f32 b;
};

struct MtEaseCurve
{
  f32 p1;
  f32 p2;
};

struct MtHermiteCurve
{
  f32 x[8];
  f32 y[8];
};

typedef __int64 time_t;

typedef time_t t64;

struct MtTime
{
  t64 mTime;
};

struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};

typedef uint64_t SceFiosDate;

struct MtLine
{
  MtVector3 from;
  MtVector3 dir;
};

struct MtLineSegment
{
  MtVector3 p0;
  MtVector3 p1;
};

struct MtAABB
{
  MtVector3 minpos;
  MtVector3 maxpos;
};

struct MtSphere
{
  MtFloat3A pos;
  f32 r;
};

struct MtPlane
{
  MtFloat3A normal;
  f32 dist;
};

struct MtOBB
{
  MtMatrix coord;
  MtVector3 extent;
};

struct MtCollisionUtil::MtSoaVector1
{
  MtVector4 v;
};

struct MtCollisionUtil::MtSoaVector3
{
  MtCollisionUtil::MtSoaVector1 x;
  MtCollisionUtil::MtSoaVector1 y;
  MtCollisionUtil::MtSoaVector1 z;
};

struct MtLineSegment4
{
  MtCollisionUtil::MtSoaVector3 p0_4;
  MtCollisionUtil::MtSoaVector3 p1_4;
};

struct MtCollisionUtil::MtVectorU4
{
  u32 u4[4];
};

struct MtCollisionUtil::MtVectorU43
{
  MtCollisionUtil::MtVectorU4 x;
  MtCollisionUtil::MtVectorU4 y;
  MtCollisionUtil::MtVectorU4 z;
};

struct MtCollisionUtil::MtRect3DC
{
  MtVector3 lt;
  MtVector3 lb;
  MtVector3 rt;
  MtVector3 rb;
  MtPlane plane;
  MtVector3 DirLR;
  MtVector3 DirTB;
  f32 DirLRLen;
  f32 DirTBLen;
  __attribute__((aligned(16))) MtVector3 DirLR_Normalize;
  MtVector3 DirTB_Normalize;
};

struct MtRay
{
  MtVector3 from;
  MtVector3 dir;
};

struct __attribute__((aligned(16))) MtCapsule
{
  MtVector3 p0;
  MtVector3 p1;
  f32 r;
};

struct MtAABB4
{
  MtCollisionUtil::MtSoaVector3 minpos4;
  MtCollisionUtil::MtSoaVector3 maxpos4;
};

struct __attribute__((aligned(16))) MtCylinder
{
  MtVector3 p0;
  MtVector3 p1;
  f32 r;
};

struct MtTriangle
{
  MtVector3 p0;
  MtVector3 p1;
  MtVector3 p2;
};

struct MtCone
{
  MtFloat3A p0;
  f32 r0;
  MtFloat3A p1;
  f32 r1;
};

struct MtTorus
{
  MtFloat3A pos;
  f32 r;
  MtFloat3A axis;
  f32 cr;
};

struct MtEllipsoid
{
  MtVector3 pos;
  MtVector3 r;
};

struct MtRange
{
  s32 s;
  u32 r;
};

struct MtRangeF
{
  f32 s;
  f32 r;
};

struct MtRangeU16
{
  unsigned __int32 s : 16;
  unsigned __int32 r : 16;
};

struct __attribute__((aligned(8))) MT_ENUM
{
  MT_CTSTR name;
  s32 value;
};

enum MtOscillator::Type : __int32
{
  SAW = 0x0,
  SQUARE = 0x1,
  TRIANGLE = 0x2,
  SINE = 0x3,
  NOISE = 0x4,
  FORCEWORD = 0xFFFFFFFF,
};

typedef void (*MtOscillator::UpdateFunc)(MtOscillator *, f32);

struct __attribute__((aligned(16))) MtOscillator
{
  MtOscillator::Type mType;
  f32 mDefaultValue;
  f32 mCurrentValue;
  f32 mAmplitude;
  f32 mCurrentAmp;
  f32 mFrameTime;
  f32 mFrequency;
  f32 mCurrentTime;
  bool mEnable;
  bool mEnvMode;
  bool mTriggerMode;
  bool mTriggerEnd;
  f32 mEnvelopeTime;
  f32 mCurrentEnvTime;
  MtOscillator::UpdateFunc mpUpdateFunc;
};

enum MtVariable::Type : __int32
{
  UINT = 0x0,
  INT = 0x1,
  FLOAT = 0x2,
  FORCEWORD_0 = 0xFFFFFFFF,
};

union MtVariable::$6B89E0F9F653A1DAF23063F9687C9513
{
  u32 mUint;
  s32 mInt;
  f32 mFloat;
};

struct MtVariable
{
  MtVariable::Type mType;
  MtVariable::$6B89E0F9F653A1DAF23063F9687C9513 _anon_0;
};

struct __attribute__((aligned(16))) MtRect3D_XZ
{
  MtVector2 lt;
  MtVector2 lb;
  MtVector2 rt;
  MtVector2 rb;
  f32 height;
};

struct MtRect3D
{
  MtFloat3 normal;
  f32 sizeW;
  MtFloat3 center;
  f32 sizeH;
};

struct MtPlaneXZ
{
  f32 dist;
};

struct MtRayY
{
  MtFloat3 from;
  f32 dir;
};

struct __cppobj MtPropertyList : MtObject
{
  MtProperty *mpElement;
};

struct __cppobj MtPropertyList::MyDTI : MtDTI
{
};

struct MtPropertyList::poolChain
{
  MtProperty *pPool;
  u16 poolPt;
  u16 poolSize;
  MtPropertyList::poolChain *pPrev;
  MtPropertyList::poolChain *pNext;
};

struct __cppobj rArchive::MyDTI : MtDTI
{
};

typedef bool (*rArchive::PATH_FILTER)(MtObject *, MT_CTSTR, const MtDTI *, MT_CTSTR);

typedef bool (*rArchive::cipher_cb)(rArchive::CIPHER_KEY *, rArchive *);

struct rArchive::CIPHER_KEY
{
  u8 key[56];
};

struct __cppobj cResource::MyDTI : MtDTI
{
};

enum cResource::CONVERT_TYPE : __int32
{
  CONVERT_DEFAULT = 0x0,
  CONVERT_360 = 0x2000,
  CONVERT_PS3 = 0x4000,
  CONVERT_VITA = 0x8000,
  CONVERT_CAFE = 0x10000,
  CONVERT_VITAEMU = 0x40000,
  CONVERT_XBOXONE = 0x100000,
  CONVERT_PS4 = 0x80000,
};

struct __cppobj MtStream : MtObject
{
};

struct __cppobj MtStream::MyDTI : MtDTI
{
};

enum MtStream::SEEK_ORIGIN : __int32
{
  ORG_BEGIN = 0x0,
  ORG_CURRENT = 0x1,
  ORG_END = 0x2,
};

struct __cppobj cArcLoaderBase::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cSystem : MtObject
{
  MtCriticalSection mCS;
  bool mThreadSafe;
};

struct res_ptr<rArchiveListArray>
{
  rArchiveListArray *mpPtr;
};

struct nDDOUtility::cArray<rArchiveListArrayPtr,128>
{
  res_ptr<rArchiveListArray> elems[128];
};

typedef nDDOUtility::cArray<rArchiveListArrayPtr,128> sArchiveManager::rArchiveListArrayPtrList;

struct nDDOUtility::cArray<cArcLoaderBase *,256>
{
  cArcLoaderBase *elems[256];
};

struct __cppobj cArcLoader<16> : cArcLoaderBase
{
  rArchive *mArcBuff[16];
  ARC_TAGID mTagBuff[16];
};

struct nDDOUtility::cArray<cArcLoader16,2048>
{
  cArcLoader<16> elems[2048];
};

struct nDDOUtility::cArray<cArcLoader16 *,2048>
{
  cArcLoader<16> *elems[2048];
};

struct __cppobj __attribute__((aligned(8))) sArchiveManager : cSystem
{
  sArchiveManager::rArchiveListArrayPtrList mpArchiveListArray;
  rArchive *mpAla;
  rLanguageResIDConverter *mpLangConv;
  nDDOUtility::cArray<cArcLoaderBase *,256> mArcLoaderStack;
  cArcLoaderBase *mpArcLoaderActive;
  s32 mArcLoaderNum;
  s32 mArcLoaderReqIndex;
  u32 mArcLoaderMode;
  bool mArcLoaderRelease;
  nDDOUtility::cArray<cArcLoader16,2048> mTicket3Pool;
  nDDOUtility::cArray<cArcLoader16 *,2048> mTicket3Stack;
  s32 mTicket3UseNum;
  s32 mTicket3ReqIndex;
  bool mTicket3Release;
};

struct __cppobj rArchiveListArray : cResource
{
  rArchiveListArray::stHeader *mpHeader;
  cArchiveListNode::stDbgResData *mpDbgResDat;
};

struct __cppobj rLanguageResIDConverter : cResource
{
  rLanguageResIDConverter::stHeader *mpHeader;
};

struct cArchiveListTag
{
  MT_CHAR *mpArcPath;
  u32 mTagId;
  u32 mGroup;
  u32 mType;
  u32 mNodeNum;
  cArchiveListNode *mpNodeArray;
};

struct rArchiveListArray::stHeader
{
  u32 Version;
  u32 MagicNo;
  u32 ConvHash;
  u16 TagNum;
  u16 TargetTagNo;
  cArchiveListTag Tag[1];
};

struct cArchiveListNode::stDbgResData
{
  const MtDTI *mpDTI;
  MT_CHAR *mpPath;
};

struct rLanguageResIDConverter::stResList
{
  u32 dtiId;
  u32 hashBase;
  u32 hashLng;
};

struct rLanguageResIDConverter::stHeader
{
  u32 version;
  u32 num;
  u16 topOfs[256];
  u16 nodeNum[256];
  rLanguageResIDConverter::stResList dat[1];
};

struct cArchiveListNode
{
  u32 mSearchId;
  u32 mTagId;
  u64 mResId;
  cArchiveListNode::stDbgResData *mpDbgResData;
};

struct cResPtrBase
{
  __int8 gap0[1];
};

struct __cppobj sArchiveManager::MyDTI : MtDTI
{
};

enum sArchiveManager::ARC_ATTR : __int32
{
  ARC_ATTR_NONE = 0x0,
  ARC_ATTR_MAX = 0xFFFFFFFF,
};

struct __cppobj cSystem::MyDTI : MtDTI
{
};

struct __cppobj rArchiveListArray::MyDTI : MtDTI
{
};

typedef u32 ARC_SEARCHID;

struct __cppobj rLanguageResIDConverter::MyDTI : MtDTI
{
};

enum nDraw::USAGE_TYPE : __int32
{
  USAGE_DEFAULT = 0x0,
  USAGE_DYNAMIC = 0x1,
  USAGE_RENDERTARGET = 0x2,
  USAGE_STAGING = 0x3,
  USAGE_MANAGED = 0x4,
  USAGE_DEPTHSTENCIL = 0x5,
  USAGE_DISPLAYBUFFER = 0x6,
};

enum nDraw::FORMAT_TYPE : __int32
{
  FORMAT_UNKNOWN = 0x0,
  FORMAT_R32G32B32A32_FLOAT = 0x1,
  FORMAT_R16G16B16A16_FLOAT = 0x2,
  FORMAT_R16G16B16A16_UNORM = 0x3,
  FORMAT_R16G16B16A16_SNORM = 0x4,
  FORMAT_R32G32_FLOAT = 0x5,
  FORMAT_R10G10B10A2_UNORM = 0x6,
  FORMAT_R8G8B8A8_UNORM = 0x7,
  FORMAT_R8G8B8A8_SNORM = 0x8,
  FORMAT_R8G8B8A8_UNORM_SRGB = 0x9,
  FORMAT_B4G4R4A4_UNORM = 0xA,
  FORMAT_R16G16_FLOAT = 0xB,
  FORMAT_R16G16_UNORM = 0xC,
  FORMAT_R16G16_SNORM = 0xD,
  FORMAT_R32_FLOAT = 0xE,
  FORMAT_D24_UNORM_S8_UINT = 0xF,
  FORMAT_R16_FLOAT = 0x10,
  FORMAT_R16_UNORM = 0x11,
  FORMAT_A8_UNORM = 0x12,
  FORMAT_BC1_UNORM = 0x13,
  FORMAT_BC1_UNORM_SRGB = 0x14,
  FORMAT_BC2_UNORM = 0x15,
  FORMAT_BC2_UNORM_SRGB = 0x16,
  FORMAT_BC3_UNORM = 0x17,
  FORMAT_BC3_UNORM_SRGB = 0x18,
  FORMAT_BCX_GRAYSCALE = 0x19,
  FORMAT_BCX_ALPHA = 0x1A,
  FORMAT_BC5_SNORM = 0x1B,
  FORMAT_B5G6R5_UNORM = 0x1C,
  FORMAT_B5G5R5A1_UNORM = 0x1D,
  FORMAT_BCX_NM1 = 0x1E,
  FORMAT_BCX_NM2 = 0x1F,
  FORMAT_BCX_RGBI = 0x20,
  FORMAT_BCX_RGBY = 0x21,
  FORMAT_B8G8R8X8_UNORM = 0x22,
  FORMAT_BCX_RGBI_SRGB = 0x23,
  FORMAT_BCX_RGBY_SRGB = 0x24,
  FORMAT_BCX_NH = 0x25,
  FORMAT_R11G11B10_FLOAT = 0x26,
  FORMAT_B8G8R8A8_UNORM = 0x27,
  FORMAT_B8G8R8A8_UNORM_SRGB = 0x28,
  FORMAT_BCX_RGBNL = 0x29,
  FORMAT_BCX_YCCA = 0x2A,
  FORMAT_BCX_YCCA_SRGB = 0x2B,
  FORMAT_R8_UNORM = 0x2C,
  FORMAT_B8G8R8A8_UNORM_LE = 0x2D,
  FORMAT_B10G10R10A2_UNORM_LE = 0x2E,
  FORMAT_BCX_SRGBA = 0x2F,
  FORMAT_BC7_UNORM = 0x30,
  FORMAT_BC7_UNORM_SRGB = 0x31,
  FORMAT_SE5M9M9M9 = 0x32,
  FORMAT_R10G10B10A2_FLOAT = 0x33,
  FORMAT_YVU420P2_CSC1 = 0x34,
  FORMAT_R8A8_UNORM = 0x35,
  FORMAT_A8_UNORM_WHITE = 0x36,
};

enum nDraw::TEXMEMORY_TYPE : __int32
{
  TEXMEMORY_NONE = 0x1,
  TEXMEMORY_VRAMorHOST = 0x2,
  TEXMEMORY_VRAM = 0x10,
  TEXMEMORY_HOST = 0x20,
  FORCE_TEXMEMORY_TYPE_SIZE = 0xFF,
};

enum nDraw::MAP_TYPE : __int32
{
  MAP_READ = 0x0,
  MAP_WRITE = 0x1,
  MAP_READ_WRITE = 0x2,
  MAP_WRITE_DISCARD = 0x3,
  MAP_WRITE_NO_OVERWRITE = 0x4,
};

enum nDraw::TEXTURE_TYPE : __int32
{
  TT_UNDEFINED = 0x0,
  TT_1D = 0x1,
  TT_2D = 0x2,
  TT_3D = 0x3,
  TT_1DARRAY = 0x4,
  TT_2DARRAY = 0x5,
  TT_CUBE = 0x6,
  TT_CUBEARRAY = 0x7,
  TT_2DMS = 0x8,
  TT_2DMSARRAY = 0x9,
};

enum nDraw::PASS_TYPE : __int32
{
  PASS_SUBSCENE = 0x0,
  PASS_BEGIN = 0x1,
  PASS_BACKFACE_ZPASS = 0x2,
  PASS_ZPREPASS = 0x3,
  PASS_GBUFFER = 0x4,
  PASS_GBUFFER_OVERLAP = 0x5,
  PASS_LIGHT_MASK = 0x6,
  PASS_LIGHTING = 0x7,
  PASS_GBUFFER_TRANS = 0x8,
  PASS_LIGHTING_TRANS = 0x9,
  PASS_AMBIENT_MASK = 0xA,
  PASS_TANGENT = 0xB,
  PASS_SOLID = 0xC,
  PASS_ALPHA_MASK = 0xD,
  PASS_FILL = 0xE,
  PASS_OVERLAP = 0xF,
  PASS_WATER = 0x10,
  PASS_TRANSPARENT = 0x11,
  PASS_ZPOSTPASS = 0x12,
  PASS_EFFECT = 0x13,
  PASS_PREFILTER = 0x14,
  PASS_DISTORTION = 0x15,
  PASS_FILTER = 0x16,
  PASS_SCREEN = 0x17,
  PASS_END = 0x18,
  MAX_PASS = 0x19,
};

enum nDraw::COMPARISON_FUNC : __int32
{
  CMP_NEVER = 0x0,
  CMP_LESS = 0x1,
  CMP_EQUAL = 0x2,
  CMP_LESS_EQUAL = 0x3,
  CMP_GREATER = 0x4,
  CMP_NOT_EQUAL = 0x5,
  CMP_GREATER_EQUAL = 0x6,
  CMP_ALWAYS = 0x7,
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) nDraw::Resource:160 : MtObject
{
  s32 mRefFrame;
  s32 mRefCount;
  u32 mCRC;
};

typedef u32 SO_HANDLE;

struct nDraw::Material::ANIMATION_STATE
{
  __int32 no : 16;
  unsigned __int32 state : 16;
  f32 frame;
};

struct __cppobj nDraw::Material : nDraw::Resource:160
{
  SO_HANDLE mTechnique;
  unsigned __int32 mStencilRef : 8;
  unsigned __int32 mAlphaTestEnable : 1;
  unsigned __int32 mAlphaTestCmpFunc : 4;
  unsigned __int32 mAlphaTestRopTest : 1;
  unsigned __int32 mAlphaTestRef : 8;
  unsigned __int32 mSelect : 1;
  unsigned __int32 mLayerID : 2;
  unsigned __int32 mDeferredShadowEnable : 1;
  unsigned __int32 mDrawPass : 5;
  unsigned __int32 mFogEnable : 1;
  unsigned __int32 mStateNum : 9;
  unsigned __int32 mAnimationNum : 9;
  unsigned __int32 mProceduralTextureNum : 4;
  unsigned __int32 mReserve_fId : 6;
  unsigned __int32 mDeferredLighting : 1;
  unsigned __int32 mAlbedoAlpha : 1;
  unsigned __int32 mTangent : 1;
  unsigned __int32 mHalfLambert : 1;
  u16 mID;
  f32 mAnimationSpeed;
  nDraw::BlendState *mpBlendState;
  nDraw::RasterizerState *mpRasterizerState;
  nDraw::DepthStencilState *mpDepthStencilState;
  SO_HANDLE mBlendStateHandle;
  nDraw::Material::STATE *mStates;
  MtColorF mBlendFactor;
  nDraw::Material::ANIMATION_STATE mAnimationState[4];
  nDraw::Material::PROCEDURAL_TEXTURE *mProceduralTexture;
  nDraw::Animation *mpAnimation;
  nDraw::CBufferSystem *mpCBuffer;
  bool mLegacyAnimation;
  u32 *mpStateAccessTable[4];
  u32 mStateAccessTableNum[4];
};

struct nDraw::BLEND_DESC
{
  unsigned __int32 atc_enable : 1;
  unsigned __int32 blend_enable : 8;
  unsigned __int32 blend_src : 8;
  unsigned __int32 blend_dest : 8;
  unsigned __int32 blend_op : 7;
  unsigned __int32 blend_asrc : 8;
  unsigned __int32 blend_adest : 8;
  unsigned __int32 blend_aop : 7;
  u8 wmask[8];
};

typedef unsigned int __uint32_t;

typedef __uint32_t uint32_t;

struct sce::Gnm::BlendControl
{
  uint32_t m_reg;
};

struct sce::Gnm::AlphaToMaskControl
{
  uint32_t m_reg;
};

struct nDraw::BlendState::BLEND_STATES
{
  sce::Gnm::BlendControl blendControl;
  u32 renderTargetMask;
  sce::Gnm::AlphaToMaskControl alphaToMaskControl;
};

struct __cppobj nDraw::BlendState : nDraw::Resource:160
{
  nDraw::BLEND_DESC mDesc;
  nDraw::BlendState::BLEND_STATES mBlendStates;
};

struct nDraw::RASTERIZER_DESC
{
  unsigned __int32 fill_mode : 3;
  unsigned __int32 cull_mode : 3;
  unsigned __int32 front_counter : 1;
  unsigned __int32 dclip_enable : 1;
  unsigned __int32 scissor_enable : 1;
  unsigned __int32 msaa_enable : 1;
  unsigned __int32 aline_enable : 1;
  s32 dbias;
  f32 dbias_clamp;
  f32 dbias_slope;
};

struct sce::Gnm::PrimitiveSetup
{
  uint32_t m_reg;
};

enum sce::Gnm::ScanModeControlViewportScissor : __int32
{
  kScanModeControlViewportScissorDisable = 0x0,
  kScanModeControlViewportScissorEnable = 0x1,
};

typedef sce::Gnm::ScanModeControlViewportScissor sce::Gnm::ScanModeControlViewportScissor_0;

enum sce::Gnm::ScanModeControlAa : __int32
{
  kScanModeControlAaDisable = 0x0,
  kScanModeControlAaEnable = 0x1,
};

typedef sce::Gnm::ScanModeControlAa sce::Gnm::ScanModeControlAa_0;

struct nDraw::RasterizerState::RASTERIZER_STATES
{
  sce::Gnm::PrimitiveSetup primSetup;
  sce::Gnm::ScanModeControlViewportScissor_0 scissor;
  sce::Gnm::ScanModeControlAa_0 msaa;
  f32 poFrontScale;
  f32 poFrontOffset;
  f32 poBackScale;
  f32 poBackOffset;
  f32 poClamp;
};

struct __cppobj __attribute__((aligned(8))) nDraw::RasterizerState : nDraw::Resource:160
{
  nDraw::RASTERIZER_DESC mDesc;
  nDraw::RasterizerState::RASTERIZER_STATES mRasterizerStates[2];
};

struct nDraw::DEPTHSTENCIL_DESC
{
  unsigned __int32 depth_enable : 1;
  unsigned __int32 depth_wmask : 1;
  unsigned __int32 depth_func : 4;
  unsigned __int32 stencil_enable : 1;
  unsigned __int32 stencil_rmask : 8;
  unsigned __int32 stencil_wmask : 8;
  unsigned __int32 fface_op_fail : 4;
  unsigned __int32 fface_op_dfail : 4;
  unsigned __int32 fface_op_pass : 4;
  unsigned __int32 fface_func : 4;
  unsigned __int32 bface_op_fail : 4;
  unsigned __int32 bface_op_dfail : 4;
  unsigned __int32 bface_op_pass : 4;
  unsigned __int32 bface_func : 4;
};

struct sce::Gnm::DepthStencilControl
{
  uint32_t m_reg;
};

typedef unsigned __int8 __uint8_t;

typedef __uint8_t uint8_t;

struct sce::Gnm::StencilControl
{
  uint8_t m_testVal;
  uint8_t m_mask;
  uint8_t m_writeMask;
  uint8_t m_opVal;
};

struct sce::Gnm::StencilOpControl
{
  uint32_t m_reg;
};

struct nDraw::DepthStencilState::DEPTHSTENCIL_STATES
{
  sce::Gnm::DepthStencilControl dsControl;
  sce::Gnm::StencilControl sControl;
  sce::Gnm::StencilOpControl sOpControl;
};

struct __cppobj nDraw::DepthStencilState : nDraw::Resource:160
{
  nDraw::DEPTHSTENCIL_DESC mDesc;
  nDraw::DepthStencilState::DEPTHSTENCIL_STATES mDepthStencilStates;
};

union nDraw::SHADER_STATE::$0E726F8D3809F01F50834B72F4C83477
{
  uintptr ivalue;
  void *pvalue;
};

struct nDraw::SHADER_STATE
{
  nDraw::SHADER_STATE::$0E726F8D3809F01F50834B72F4C83477 _anon_0;
  u32 crc;
  u32 padding;
};

struct nDraw::Material::STATE
{
  unsigned __int32 type : 4;
  unsigned __int32 group : 16;
  unsigned __int32 index : 12;
  u32 padding;
  nDraw::SHADER_STATE state;
};

struct nDraw::Material::PROCEDURAL_TEXTURE
{
  nDraw::Texture *ptex;
  u32 crc;
  unsigned __int32 pass : 16;
  unsigned __int32 state_num : 16;
  nDraw::Material::STATE states[4];
};

struct __cppobj __attribute__((aligned(8))) nDraw::Resource : MtObject
{
  s32 mRefFrame;
  s32 mRefCount;
  u32 mCRC;
};

struct __cppobj __attribute__((aligned(8))) nDraw::Animation : nDraw::Resource
{
  nDraw::Animation::ANIMATION_LIST *mpList;
  u32 mBufferSize;
};

struct __cppobj nDraw::CBufferSystem : nDraw::Resource
{
  nDraw::CBuffer *mAnimation;
  nDraw::CBuffer *mVertexDisplacement;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(2))) nDraw::Buffer:336 : nDraw::Resource:160
{
  nDraw::USAGE_TYPE mUsageType;
  u32 mBufSize;
  _BYTE gap1C[4];
  void *mpBuffer;
  bool mDirty;
  bool mSuspend;
};

struct sce::Gnm::DataFormat::$3C02D057825C2F94C07026BFD212AF12::$9DEE61FB2C56223582767F8DB8320C22
{
  unsigned __int32 m_surfaceFormat : 8;
  unsigned __int32 m_channelType : 4;
  unsigned __int32 m_channelX : 3;
  unsigned __int32 m_channelY : 3;
  unsigned __int32 m_channelZ : 3;
  unsigned __int32 m_channelW : 3;
  unsigned __int32 m_unused : 8;
};

union sce::Gnm::DataFormat::$3C02D057825C2F94C07026BFD212AF12
{
  sce::Gnm::DataFormat::$3C02D057825C2F94C07026BFD212AF12::$9DEE61FB2C56223582767F8DB8320C22 m_bits;
  uint32_t m_asInt;
};

struct sce::Gnm::DataFormat
{
  sce::Gnm::DataFormat::$3C02D057825C2F94C07026BFD212AF12 _anon_0;
};

typedef sce::Gnm::DataFormat nDraw::GPUFORMAT_TYPE;

typedef sce::Gnm::Texture *nDraw::HTexture;

struct sce::Gnm::Texture
{
  uint32_t m_regs[8];
};

struct __cppobj nDraw::Texture : nDraw::Buffer:336
{
  unsigned __int32 mWidth : 16;
  unsigned __int32 mHeight : 14;
  unsigned __int32 mSRGB : 1;
  unsigned __int32 mScratch : 1;
  unsigned __int32 mArrayCount : 8;
  unsigned __int32 mLevelCount : 8;
  unsigned __int32 mDepth : 11;
  unsigned __int32 mTextureType : 4;
  u32 mFormatType;
  u32 mMiscFlags;
  nDraw::GPUFORMAT_TYPE mGPUFormatType;
  nDraw::HTexture mpTexture;
  nDraw::Texture *mpSharedTexture;
  nDraw::RenderTargetView **mpRTView;
  nDraw::DepthStencilView **mpDSView;
  u32 mViewNum;
  sce::Gnm::Texture mTextureObject;
  void **mpMappingAddresses;
};

struct nDraw::Animation::ANIMATION_LIST
{
  u32 animation_num;
  u32 padding;
  nDraw::Animation::ANIMATION *animations[1];
};

struct __cppobj nDraw::CBuffer : nDraw::Resource:160
{
  unsigned __int32 mHandleCount : 16;
  unsigned __int32 mTempCount : 16;
  SO_HANDLE *mHandles;
  void **mppCBuffers[3];
};

typedef sce::Gnm::RenderTarget *nDraw::HRenderTarget;

struct sce::Gnm::RenderTarget
{
  uint32_t m_regs[11];
};

struct __cppobj nDraw::RenderTargetView : nDraw::Resource
{
  nDraw::Texture *mpTexture;
  nDraw::HRenderTarget mpHandle;
  unsigned __int32 mWidth : 16;
  unsigned __int32 mHeight : 15;
  unsigned __int32 mSRGB : 1;
  u32 mSubResource;
  u32 mMiscFlags;
  nDraw::GPUFORMAT_TYPE mGPUFormatType;
  sce::Gnm::RenderTarget mRenderTarget;
  void *mpSurfaceAddress;
};

typedef sce::Gnm::DepthRenderTarget *nDraw::HDepthStencil;

struct sce::Gnm::DepthRenderTarget
{
  uint32_t m_regs[12];
  uint32_t m_widthHeight;
};

struct __cppobj nDraw::DepthStencilView : nDraw::Resource
{
  nDraw::Texture *mpTexture;
  nDraw::HDepthStencil mpHandle;
  unsigned __int32 mWidth : 16;
  unsigned __int32 mHeight : 16;
  u32 mSubResource;
  u32 mMiscFlags;
  nDraw::GPUFORMAT_TYPE mGPUFormatType;
  sce::Gnm::DepthRenderTarget mDepthRenderTarget;
  void *mpHtileAddress;
  void *mpStencilAddress;
  void *mpDepthAddress;
};

struct nDraw::Animation::ANIMATION
{
  u32 length;
  unsigned __int32 repeat : 1;
  unsigned __int32 run : 1;
  unsigned __int32 param_num : 16;
  unsigned __int32 cbuffer_num : 14;
  SO_HANDLE *cbuffers;
  u32 crc;
  u32 padding;
  nDraw::Animation::PARAM *params[1];
};

struct nDraw::Animation::PARAM
{
  SO_HANDLE handle;
  unsigned __int32 type : 4;
  unsigned __int32 interpolate : 4;
  unsigned __int32 key_num : 24;
};

struct __cppobj __attribute__((aligned(8))) nDraw::Buffer : nDraw::Resource:160
{
  nDraw::USAGE_TYPE mUsageType;
  u32 mBufSize;
  void *mpBuffer;
  bool mDirty;
  bool mSuspend;
};

struct __cppobj nDraw::Material::MyDTI : MtDTI
{
};

enum nDraw::Material::SLOT_TYPE : __int32
{
  SLOT_0 = 0x0,
  SLOT_1 = 0x1,
  SLOT_2 = 0x2,
  SLOT_3 = 0x3,
  MAX_SLOT = 0x4,
};

enum nDraw::Material::STATE_TYPE : __int32
{
  STATE_FUNCTION = 0x0,
  STATE_CBUFFER = 0x1,
  STATE_SAMPLER = 0x2,
  STATE_TEXTURE = 0x3,
  STATE_PROCEDURAL = 0x4,
};

struct __cppobj nDraw::Resource::MyDTI : MtDTI
{
};

struct __cppobj nDraw::BlendState::MyDTI : MtDTI
{
};

struct __cppobj nDraw::RasterizerState::MyDTI : MtDTI
{
};

struct __cppobj nDraw::DepthStencilState::MyDTI : MtDTI
{
};

struct __cppobj nDraw::Texture::MyDTI : MtDTI
{
};

struct __cppobj nDraw::Buffer::MyDTI : MtDTI
{
};

struct __cppobj nDraw::RenderTargetView::MyDTI : MtDTI
{
};

struct __cppobj nDraw::DepthStencilView::MyDTI : MtDTI
{
};

struct __cppobj nDraw::Animation::MyDTI : MtDTI
{
};

struct nDraw::Animation::BUFSTATE
{
  u8 *pbuf;
  u32 bufsize;
  u32 pt;
};

struct __cppobj nDraw::CBufferSystem::MyDTI : MtDTI
{
};

struct __cppobj nDraw::CBuffer::MyDTI : MtDTI
{
};

enum nDraw::HDR_TYPE : __int32
{
  HDR_NONE = 0x0,
  HDR_DEFAULT = 0x1,
  HDR_FLOAT = 0x2,
  __HDR_TYPE__U32 = 0xFFFFFFFF,
};

enum nDraw::ANTIALIAS_TYPE : __int32
{
  ANTIALIAS_NONE = 0x0,
  ANTIALIAS_MSAA2X = 0x1,
  ANTIALIAS_MSAA4X = 0x2,
  ANTIALIAS_MSAA8X = 0x3,
  ANTIALIAS_MSAA4X_8Q = 0x4,
  ANTIALIAS_MSAA8X_8Q = 0x5,
  ANTIALIAS_MSAA4X_16Q = 0x6,
  ANTIALIAS_MSAA8X_16Q = 0x7,
  ANTIALIAS_MSAA8X_32Q = 0x8,
  __ANTIALIAS_TYPE__U32 = 0xFFFFFFFF,
};

enum nDraw::DEFERRED_LIGHTING_LIGHT_TYPE : __int32
{
  DL_LIGHT_MONOCHROME_SPECULAR = 0x0,
  DL_LIGHT_APPROXIMATE_SPECULAR = 0x1,
  DL_LIGHT_SEPARATE_SPECULAR = 0x2,
};

enum nDraw::DEFERRED_LIGHTING_HDR_TYPE : __int32
{
  DL_HDR_INTEGER = 0x0,
  DL_HDR_FLOAT = 0x1,
  DL_HDR_FLOAT_PRECISION = 0x2,
  DL_HDR_INTEGER_LOG = 0x3,
};

enum nDraw::DEFERRED_LIGHTING_TRANSPARENT_TYPE : __int32
{
  DL_TRANSPARENT_SIZE_QUARTER_LAYER_4 = 0x0,
  DL_TRANSPARENT_SIZE_QUARTER_LAYER_1 = 0x1,
  DL_TRANSPARENT_SIZE_FULL_LAYER_1 = 0x2,
};

enum nDraw::DRAW_MODE : __int32
{
  MODE_DEFAULT = 0x1,
  MODE_REFLECTION = 0x2,
  MODE_SHADOW0_RECV = 0x4,
  MODE_SHADOW0_CAST = 0x8,
  MODE_ENV = 0x10,
  MODE_MOTIONBLUR = 0x20,
  MODE_SHADOW1_RECV = 0x100,
  MODE_SHADOW1_CAST = 0x200,
  MODE_REFRACTION = 0x800,
  MODE_OUTLINE = 0x1000,
  MODE_STATIC_SHADOW = 0x2000,
  MODE_INDIRECT_LIGHT = 0x4000,
  MODE_ZPREPASS = 0x8000,
};

enum nDraw::DRAW_VIEW : __int32
{
  VIEW_0 = 0x0,
  VIEW_1 = 0x1,
  VIEW_2 = 0x2,
  VIEW_3 = 0x3,
  VIEW_4 = 0x4,
  VIEW_5 = 0x5,
  VIEW_6 = 0x6,
  VIEW_7 = 0x7,
  VIEW_OVERLAY = 0x8,
  VIEW_COMMON = 0x9,
  MAX_VIEW = 0xA,
};

enum nDraw::PRIMITIVE_TOPOLOGY : __int32
{
  PT_POINTLIST = 0x0,
  PT_LINELIST = 0x1,
  PT_LINESTRIP = 0x2,
  PT_TRIANGLELIST = 0x3,
  PT_TRIANGLESTRIP = 0x4,
  PT_LINELIST_ADJ = 0x5,
  PT_LINESTRIP_ADJ = 0x6,
  PT_TRIANGLELIST_ADJ = 0x7,
  PT_TRIANGLESTRIP_ADJ = 0x8,
  PT_RECTLIST = 0x9,
  PT_QUADLIST = 0xA,
  PT_1_CONTROL_POINT_PATCHLIST = 0xB,
  PT_2_CONTROL_POINT_PATCHLIST = 0xC,
  PT_3_CONTROL_POINT_PATCHLIST = 0xD,
  PT_4_CONTROL_POINT_PATCHLIST = 0xE,
  PT_5_CONTROL_POINT_PATCHLIST = 0xF,
};

enum nDraw::EARLY_STENCIL_CULLING : __int32
{
  EARLY_STENCIL_CULLING_DISABLE = 0x0,
  EARLY_STENCIL_CULLING_WRITE_ENABLE = 0x1,
  EARLY_STENCIL_CULLING_TEST_ENABLE = 0x2,
  MAX_EARLY_STENCIL_CULLING = 0x3,
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) nDraw::Buffer:352 : nDraw::Resource:160
{
  nDraw::USAGE_TYPE mUsageType;
  u32 mBufSize;
  _BYTE gap1C[4];
  void *mpBuffer;
  bool mDirty;
  bool mSuspend;
};

typedef void *nDraw::HQuery;

struct __cppobj __attribute__((aligned(8))) nDraw::Query : nDraw::Buffer:352
{
  u32 mWriteBuffer;
  u32 mReadBuffer;
  bool mBusy;
  u32 mType;
  s32 mQueryIssuedFrame[4];
  nDraw::HQuery mpQuery[4];
  u32 mDataSize;
};

struct __cppobj nDraw::Query::MyDTI : MtDTI
{
};

enum nDraw::Query::QUERY_TYPE : __int32
{
  TYPE_OCCLUSION = 0x0,
};

typedef void *nDraw::HVertexBuffer;

struct __cppobj nDraw::VertexBuffer : nDraw::Buffer
{
  nDraw::HVertexBuffer mpVertexBuffer;
};

struct __cppobj nDraw::VertexBuffer::MyDTI : MtDTI
{
};

typedef void *nDraw::HIndexBuffer;

struct __cppobj nDraw::IndexBuffer : nDraw::Buffer
{
  nDraw::HIndexBuffer mpIndexBuffer;
};

struct __cppobj nDraw::IndexBuffer::MyDTI : MtDTI
{
};

struct nDraw::MAPPED_TEXTURE
{
  void *pdata;
  u32 pitch;
  u32 depth;
};

struct nDraw::OBJECT
{
  MT_CTSTR name;
  MT_CTSTR sname;
  unsigned __int32 type : 6;
  unsigned __int32 attr : 16;
  unsigned __int32 annotation_num : 10;
  unsigned __int32 sindex : 16;
  unsigned __int32 index : 16;
  u32 hash;
  u32 padding1;
  nDraw::VARIABLE *annotations;
};

struct nDraw::VARIABLE::$9D1DEAC54BDF28EBBBC7F60B524D9980::$A365FB3ECBA8535CF1578E193D019203
{
  unsigned __int32 dtype : 4;
  unsigned __int32 col_num : 4;
  unsigned __int32 row_num : 4;
  unsigned __int32 reserved : 8;
  unsigned __int32 element_num : 12;
};

struct nDraw::VARIABLE::$9D1DEAC54BDF28EBBBC7F60B524D9980::$9E49AD0099F44D7FCD3D28F35C205325
{
  unsigned __int32 hstruct : 12;
  unsigned __int32 padding4 : 8;
  unsigned __int32 padding : 12;
};

struct nDraw::VARIABLE::$9D1DEAC54BDF28EBBBC7F60B524D9980::$B237FDD58A6F3D72CF0A36C8F690C180
{
  unsigned __int32 padding2 : 12;
  unsigned __int32 otype : 4;
  unsigned __int32 ttype : 4;
  unsigned __int32 padding3 : 12;
};

union nDraw::VARIABLE::$9D1DEAC54BDF28EBBBC7F60B524D9980
{
  nDraw::VARIABLE::$9D1DEAC54BDF28EBBBC7F60B524D9980::$A365FB3ECBA8535CF1578E193D019203 _anon_0;
  nDraw::VARIABLE::$9D1DEAC54BDF28EBBBC7F60B524D9980::$9E49AD0099F44D7FCD3D28F35C205325 _anon_1;
  nDraw::VARIABLE::$9D1DEAC54BDF28EBBBC7F60B524D9980::$B237FDD58A6F3D72CF0A36C8F690C180 _anon_2;
};

struct nDraw::VARIABLE
{
  MT_CTSTR name;
  unsigned __int32 attr : 19;
  unsigned __int32 ctype : 3;
  unsigned __int32 size : 10;
  nDraw::VARIABLE::$9D1DEAC54BDF28EBBBC7F60B524D9980 _anon_0;
  MT_CTSTR sname;
  unsigned __int32 sindex : 8;
  unsigned __int32 offset : 10;
  unsigned __int32 svalue : 6;
  unsigned __int32 annotation_num : 8;
  u32 padding1;
  nDraw::VARIABLE *annotations;
  void *pinitvalues;
};

struct nDraw::OBJECT_INFO
{
  unsigned __int32 id : 20;
  unsigned __int32 function_num : 6;
  unsigned __int32 object_num : 6;
  const u16 *indices;
};

struct nDraw::SHADER_DESC
{
  unsigned __int32 colorout : 8;
  unsigned __int32 depthout : 1;
  unsigned __int32 discard : 1;
  unsigned __int32 compiled : 1;
  unsigned __int32 reserved : 21;
  u32 padding;
};

struct nDraw::SHADER_PARAMINFO
{
  unsigned __int32 param_num : 8;
  unsigned __int32 sampler_num : 8;
  unsigned __int32 texture_num : 8;
  unsigned __int32 cbuffer_num : 8;
};

typedef nPS4::VertexShaderObject *nDraw::HVertexShader;

typedef nPS4::PixelShaderObject *nDraw::HPixelShader;

typedef nPS4::GeometryShaderObject *nDraw::HGeometryShader;

typedef void *nDraw::HHullShader;

typedef void *nDraw::HDomainShader;

typedef void *nDraw::HComputeShader;

typedef nDraw::InputLayouts *nDraw::HInputLayout;

struct nDraw::SHADER
{
  nDraw::SHADER_DESC desc;
  nDraw::SHADER_PARAM *params;
  nDraw::SHADER_PARAMINFO vs_param;
  nDraw::SHADER_PARAMINFO ps_param;
  nDraw::SHADER_PARAMINFO gs_param;
  nDraw::SHADER_PARAMINFO hs_param;
  nDraw::SHADER_PARAMINFO ds_param;
  nDraw::SHADER_PARAMINFO cs_param;
  nDraw::HVertexShader pvs;
  nDraw::HPixelShader pps;
  nDraw::HGeometryShader pgs;
  nDraw::HHullShader phs;
  nDraw::HDomainShader pds;
  nDraw::HComputeShader pcs;
  nDraw::HInputLayout playout;
  u32 *resources;
  u32 resource_num;
  u32 padding;
};

struct nDraw::SHADER_PARAM::$8C71064C6D07ECDEC3F1E932DAEA4F34::$E98748134A19BB130100ACEB9D41934F
{
  unsigned __int32 slot : 6;
  unsigned __int32 index : 10;
  unsigned __int32 size : 16;
};

struct nDraw::SHADER_PARAM::$8C71064C6D07ECDEC3F1E932DAEA4F34::$9F9FD330B7AA2180CF1581D8695603B5
{
  unsigned __int32 slot : 6;
  unsigned __int32 index : 10;
  unsigned __int32 reserve : 16;
};

union nDraw::SHADER_PARAM::$8C71064C6D07ECDEC3F1E932DAEA4F34
{
  nDraw::SHADER_PARAM::$8C71064C6D07ECDEC3F1E932DAEA4F34::$E98748134A19BB130100ACEB9D41934F constant;
  nDraw::SHADER_PARAM::$8C71064C6D07ECDEC3F1E932DAEA4F34::$9F9FD330B7AA2180CF1581D8695603B5 sampler;
  nDraw::SHADER_PARAM::$8C71064C6D07ECDEC3F1E932DAEA4F34::$9F9FD330B7AA2180CF1581D8695603B5 texture;
};

struct nDraw::SHADER_PARAM
{
  nDraw::SHADER_PARAM::$8C71064C6D07ECDEC3F1E932DAEA4F34 _anon_0;
};

struct __attribute__((aligned(8))) nPS4::BufferObject
{
  int (**_vptr$BufferObject)(void);
  void *mpBuffer;
  u32 mBufferSize;
};

struct __cppobj nPS4::ShaderObject : nPS4::BufferObject
{
};

typedef unsigned __int16 __uint16_t;

typedef __uint16_t uint16_t;

struct __attribute__((aligned(2))) sce::Gnmx::InputResourceOffsets
{
  uint16_t requiredBufferSizeInDwords;
  uint8_t shaderStage;
  bool isSrtShader;
  uint8_t fetchShaderPtrSgpr;
  uint8_t vertexBufferPtrSgpr;
  uint8_t streamOutPtrSgpr;
  uint8_t userExtendedData1PtrSgpr;
  uint8_t constBufferPtrSgpr;
  uint8_t resourcePtrSgpr;
  uint8_t rwResourcePtrSgpr;
  uint8_t samplerPtrSgpr;
  uint8_t globalInternalPtrSgpr;
  uint8_t appendConsumeCounterSgpr;
  uint8_t gdsMemoryRangeSgpr;
  uint8_t ldsEsGsSizeSgpr;
  uint8_t userSrtDataSgpr;
  uint8_t userSrtDataCount;
  uint8_t gdsKickRingBufferOffsetSgpr;
  uint8_t vertexRingBufferOffsetSgpr;
  uint8_t dispatchDrawPtrSgpr;
  uint8_t dispatchDrawInstancesSgpr;
  uint16_t constBufferArrayDwOffset;
  uint16_t vertexBufferArrayDwOffset;
  uint16_t resourceArrayDwOffset;
  uint16_t rwResourceArrayDwOffset;
  uint16_t samplerArrayDwOffset;
  uint16_t streamOutArrayDwOffset;
  uint16_t resourceDwOffset[16];
  uint16_t rwResourceDwOffset[16];
  uint16_t samplerDwOffset[16];
  uint16_t constBufferDwOffset[20];
  uint16_t vertexBufferDwOffset[16];
  uint16_t streamOutDwOffset[4];
  uint8_t resourceSlotCount;
  uint8_t rwResourceSlotCount;
  uint8_t samplerSlotCount;
  uint8_t constBufferSlotCount;
  uint8_t vertexBufferSlotCount;
};

struct __cppobj __attribute__((aligned(8))) nPS4::VertexShaderObject : nPS4::ShaderObject
{
  sce::Gnmx::VsShader *mpVs;
  sce::Gnmx::EsShader *mpEs;
  void *mpFetchShader;
  u32 mShaderModifier;
  sce::Gnmx::InputResourceOffsets mInputResourceOffsets;
};

struct __cppobj nPS4::PixelShaderObject : nPS4::ShaderObject
{
  sce::Gnmx::PsShader *mpPs;
  sce::Gnmx::InputResourceOffsets mInputResourceOffsets;
};

struct __cppobj nPS4::GeometryShaderObject : nPS4::ShaderObject
{
  sce::Gnmx::GsShader *mpGs;
  sce::Gnmx::InputResourceOffsets mInputResourceOffsets;
};

struct nDraw::InputLayouts
{
  u32 num;
  nDraw::Layout *layouts;
};

struct sce::Gnmx::ShaderCommonData
{
  unsigned __int32 m_shaderSize : 23;
  unsigned __int32 m_shaderIsUsingSrt : 1;
  unsigned __int32 m_numInputUsageSlots : 8;
  uint16_t m_embeddedConstantBufferSizeInDQW;
  uint16_t m_scratchSizeInDWPerThread;
};

struct sce::Gnm::VsStageRegisters
{
  uint32_t m_spiShaderPgmLoVs;
  uint32_t m_spiShaderPgmHiVs;
  uint32_t m_spiShaderPgmRsrc1Vs;
  uint32_t m_spiShaderPgmRsrc2Vs;
  uint32_t m_spiVsOutConfig;
  uint32_t m_spiShaderPosFormat;
  uint32_t m_paClVsOutCntl;
};

struct sce::Gnmx::VsShader
{
  sce::Gnmx::ShaderCommonData m_common;
  sce::Gnm::VsStageRegisters m_vsStageRegisters;
  uint8_t m_numInputSemantics;
  uint8_t m_numExportSemantics;
  uint8_t m_gsModeOrNumInputSemanticsCs;
  uint8_t m_fetchControl;
};

struct sce::Gnm::EsStageRegisters
{
  uint32_t m_spiShaderPgmLoEs;
  uint32_t m_spiShaderPgmHiEs;
  uint32_t m_spiShaderPgmRsrc1Es;
  uint32_t m_spiShaderPgmRsrc2Es;
};

struct sce::Gnmx::EsShader
{
  sce::Gnmx::ShaderCommonData m_common;
  sce::Gnm::EsStageRegisters m_esStageRegisters;
  uint8_t m_numInputSemantics;
  uint8_t m_fetchControl;
  unsigned __int16 m_isOnChip : 1;
  unsigned __int16 m_reserved : 15;
  uint32_t m_memExportVertexSizeInDWord;
};

struct sce::Gnm::PsStageRegisters
{
  uint32_t m_spiShaderPgmLoPs;
  uint32_t m_spiShaderPgmHiPs;
  uint32_t m_spiShaderPgmRsrc1Ps;
  uint32_t m_spiShaderPgmRsrc2Ps;
  uint32_t m_spiShaderZFormat;
  uint32_t m_spiShaderColFormat;
  uint32_t m_spiPsInputEna;
  uint32_t m_spiPsInputAddr;
  uint32_t m_spiPsInControl;
  uint32_t m_spiBarycCntl;
  uint32_t m_dbShaderControl;
  uint32_t m_cbShaderMask;
};

struct sce::Gnmx::PsShader
{
  sce::Gnmx::ShaderCommonData m_common;
  sce::Gnm::PsStageRegisters m_psStageRegisters;
  uint8_t m_numInputSemantics;
  uint8_t m_reserved[3];
};

struct sce::Gnm::GsStageRegisters
{
  uint32_t m_spiShaderPgmLoGs;
  uint32_t m_spiShaderPgmHiGs;
  uint32_t m_spiShaderPgmRsrc1Gs;
  uint32_t m_spiShaderPgmRsrc2Gs;
  uint32_t m_vgtStrmoutConfig;
  uint32_t m_vgtGsOutPrimType;
  uint32_t m_vgtGsInstanceCnt;
};

struct sce::Gnmx::GsShader
{
  sce::Gnmx::ShaderCommonData m_common;
  sce::Gnm::GsStageRegisters m_gsStageRegisters;
  uint32_t m_memExportVertexSizeInDWord[4];
  unsigned __int32 m_maxOutputVertexCount : 11;
  unsigned __int32 m_inputVertexCountMinus1 : 5;
  unsigned __int32 m_inputVertexSizeInDWord : 8;
  unsigned __int32 m_isPatchTopology : 1;
  unsigned __int32 m_reserved : 7;
};

struct nDraw::Layout
{
  u32 slot;
  u32 offset;
  bool instance;
  sce::Gnm::DataFormat format;
};

struct __cppobj __attribute__((aligned(8))) nDraw::Scene : nDraw::Resource:160
{
  u32 mAttributes;
  f32 mHDREmphasis;
  nDraw::Texture *mpRTView[25][4];
  nDraw::Texture *mpDSView[25];
  nDraw::Texture *mpTexture[25];
  nDraw::Texture *mpDepthStencil;
  nDraw::Texture *mpDepthStencilRO;
  nDraw::Texture *mpRTDepthStencil;
  nDraw::Texture *mpStencil;
  nDraw::Texture *mpDepth;
  nDraw::Texture *mpZPrepassDummy;
  nDraw::Texture *mpOcclusionTexture;
  nDraw::Texture *mpRTMainTarget2;
  nDraw::Texture *mpRTDepthStencil2;
  nDraw::Texture *mpMainTarget2;
  nDraw::Texture *mpDepthStencil2;
  nDraw::Texture *mpDepthStencilReduction;
  nDraw::Texture *mpRTMainTarget;
  nDraw::Texture *mpRTPostTarget;
  nDraw::Texture *mpMainTarget;
  nDraw::Texture *mpMainTargetReduction;
  nDraw::Texture *mpPostTarget;
  nDraw::Texture *mpLightMask;
  nDraw::Texture *mpAmbientMask;
  nDraw::Texture *mpHDRTarget;
  nDraw::Texture *mpHDRQTarget;
  nDraw::Texture *mpBlendTarget;
  nDraw::Texture *mpHDRDepthStencil;
  nDraw::Texture *mpGBuffer;
  nDraw::Texture *mpLightAccumulation0;
  nDraw::Texture *mpLightAccumulation1;
  nDraw::Texture *mpLightAccumulationTexture;
  nDraw::Texture *mpGBufferTrans;
  nDraw::Texture *mpDSFBufferTrans;
  nDraw::Texture *mpLightAccumulationTrans0;
  nDraw::Texture *mpLightAccumulationTrans1;
  nDraw::Texture *mpLightAccumulationTransTexture;
  nDraw::Texture *mpDepthStencilTrans;
  nDraw::Texture *mpBackFaceDepthStencil;
  nDraw::Texture *mpTempDistortionTex;
  nDraw::Texture *mpTanBuffer;
  MtColor mClearColor;
  nDraw::HDR_TYPE mHDRType;
  nDraw::ANTIALIAS_TYPE mAntiAliasType;
  nDraw::DEFERRED_LIGHTING_LIGHT_TYPE mDeferredLightingLightType;
  nDraw::DEFERRED_LIGHTING_HDR_TYPE mDeferredLightingHDRType;
  nDraw::DEFERRED_LIGHTING_TRANSPARENT_TYPE mDeferredLightingTransparentType;
  bool mReduction;
};

struct __cppobj nDraw::Scene::MyDTI : MtDTI
{
};

struct nDraw::ConstantTable
{
  u32 mBuffer[1];
};

struct nDraw::SCENE_DESC
{
  u32 width;
  u32 height;
  nDraw::HDR_TYPE hdr_type;
  nDraw::ANTIALIAS_TYPE aa_type;
  u32 scene_attr;
  f32 hdr_emphasis;
  MtColor clear_color;
  nDraw::DEFERRED_LIGHTING_LIGHT_TYPE dl_light;
  nDraw::DEFERRED_LIGHTING_HDR_TYPE dl_hdr;
  nDraw::DEFERRED_LIGHTING_TRANSPARENT_TYPE dl_transparent;
};

struct nDraw::CommandCache::PATCH_INFO
{
  unsigned __int32 mode : 1;
  unsigned __int32 index : 12;
  unsigned __int32 adr_num : 19;
  u32 *offsets;
};

struct __cppobj nDraw::CommandCache : nDraw::Resource
{
  void *mpBuffer;
  u32 mBufSize;
  u32 mBufPt;
  cDraw::TAG *mTags;
  nDraw::CommandCache::PATCH_INFO mPatchInfos[32];
  unsigned __int32 mTagNum : 16;
  unsigned __int32 mValidTagNum : 16;
  unsigned __int32 mGlobalFuncNum : 26;
  unsigned __int32 mPatchNum : 6;
  u32 *mVisibleFlags;
  u32 mCRC;
  bool mLimitDetect;
  u16 mGlobalFunc[64];
};

struct cDraw::TAG::$1882D6B81D00D8646E819983FFFB581F::$F866B70507A3A17D7870585FA15072C2
{
  unsigned __int32 pri : 27;
  unsigned __int32 pass : 5;
};

union cDraw::TAG::$1882D6B81D00D8646E819983FFFB581F
{
  cDraw::TAG::$1882D6B81D00D8646E819983FFFB581F::$F866B70507A3A17D7870585FA15072C2 _anon_0;
  u32 cmdpri;
};

struct cDraw::TAG
{
  cDraw::TAG::$1882D6B81D00D8646E819983FFFB581F _anon_0;
  cDraw::CMD *pcmd;
};

struct cDraw::CMD
{
  unsigned __int32 cache_no : 15;
  unsigned __int32 draw_cancel : 1;
  unsigned __int32 type : 4;
  unsigned __int32 statept : 12;
};

struct nDraw::PASS::$668D45DE577102FD526750D3044FE89F::$5EC3D19D04D8C49DA23D9269C64CBBE3
{
  unsigned __int32 blend : 10;
  unsigned __int32 rasterizer : 10;
  unsigned __int32 depthstencil : 12;
};

union nDraw::PASS::$668D45DE577102FD526750D3044FE89F
{
  nDraw::PASS::$668D45DE577102FD526750D3044FE89F::$5EC3D19D04D8C49DA23D9269C64CBBE3 _anon_0;
  u32 states;
};

struct nDraw::PASS
{
  SO_HANDLE vs_handle;
  SO_HANDLE ps_handle;
  SO_HANDLE gs_handle;
  SO_HANDLE hs_handle;
  SO_HANDLE ds_handle;
  SO_HANDLE cs_handle;
  nDraw::PASS::$668D45DE577102FD526750D3044FE89F _anon_0;
  unsigned __int32 technique : 16;
  unsigned __int32 annotation_num : 16;
  MT_CTSTR name;
  nDraw::VARIABLE *annotations;
};

struct __cppobj nDraw::TECHNIQUE : nDraw::OBJECT
{
  unsigned __int32 pass_num : 16;
  unsigned __int32 segmentation : 1;
  unsigned __int32 reserved2 : 15;
  u32 padding1;
  nDraw::PASS passes[1];
};

enum sce::Gnm::SurfaceFormat : __int32
{
  kSurfaceFormatInvalid = 0x0,
  kSurfaceFormat8 = 0x1,
  kSurfaceFormat16 = 0x2,
  kSurfaceFormat8_8 = 0x3,
  kSurfaceFormat32 = 0x4,
  kSurfaceFormat16_16 = 0x5,
  kSurfaceFormat10_11_11 = 0x6,
  kSurfaceFormat11_11_10 = 0x7,
  kSurfaceFormat10_10_10_2 = 0x8,
  kSurfaceFormat2_10_10_10 = 0x9,
  kSurfaceFormat8_8_8_8 = 0xA,
  kSurfaceFormat32_32 = 0xB,
  kSurfaceFormat16_16_16_16 = 0xC,
  kSurfaceFormat32_32_32 = 0xD,
  kSurfaceFormat32_32_32_32 = 0xE,
  kSurfaceFormat5_6_5 = 0x10,
  kSurfaceFormat1_5_5_5 = 0x11,
  kSurfaceFormat5_5_5_1 = 0x12,
  kSurfaceFormat4_4_4_4 = 0x13,
  kSurfaceFormat8_24 = 0x14,
  kSurfaceFormat24_8 = 0x15,
  kSurfaceFormatX24_8_32 = 0x16,
  kSurfaceFormatGB_GR = 0x20,
  kSurfaceFormatBG_RG = 0x21,
  kSurfaceFormat5_9_9_9 = 0x22,
  kSurfaceFormatBc1 = 0x23,
  kSurfaceFormatBc2 = 0x24,
  kSurfaceFormatBc3 = 0x25,
  kSurfaceFormatBc4 = 0x26,
  kSurfaceFormatBc5 = 0x27,
  kSurfaceFormatBc6 = 0x28,
  kSurfaceFormatBc7 = 0x29,
  kSurfaceFormatFmask8_S2_F1 = 0x2C,
  kSurfaceFormatFmask8_S4_F1 = 0x2D,
  kSurfaceFormatFmask8_S8_F1 = 0x2E,
  kSurfaceFormatFmask8_S2_F2 = 0x2F,
  kSurfaceFormatFmask8_S4_F2 = 0x30,
  kSurfaceFormatFmask8_S4_F4 = 0x31,
  kSurfaceFormatFmask16_S16_F1 = 0x32,
  kSurfaceFormatFmask16_S8_F2 = 0x33,
  kSurfaceFormatFmask32_S16_F2 = 0x34,
  kSurfaceFormatFmask32_S8_F4 = 0x35,
  kSurfaceFormatFmask32_S8_F8 = 0x36,
  kSurfaceFormatFmask64_S16_F4 = 0x37,
  kSurfaceFormatFmask64_S16_F8 = 0x38,
  kSurfaceFormat4_4 = 0x39,
  kSurfaceFormat6_5_5 = 0x3A,
};

enum sce::Gnm::TextureChannelType : __int32
{
  kTextureChannelTypeUNorm = 0x0,
  kTextureChannelTypeSNorm = 0x1,
  kTextureChannelTypeUScaled = 0x2,
  kTextureChannelTypeSScaled = 0x3,
  kTextureChannelTypeUInt = 0x4,
  kTextureChannelTypeSInt = 0x5,
  kTextureChannelTypeSNormNoZero = 0x6,
  kTextureChannelTypeFloat = 0x7,
  kTextureChannelTypeSrgb = 0x9,
  kTextureChannelTypeUBNorm = 0xA,
  kTextureChannelTypeUBNormNoZero = 0xB,
  kTextureChannelTypeUBInt = 0xC,
  kTextureChannelTypeUBScaled = 0xD,
};

enum sce::Gnm::TextureChannel : __int32
{
  kTextureChannelConstant0 = 0x0,
  kTextureChannelConstant1 = 0x1,
  kTextureChannelX = 0x4,
  kTextureChannelY = 0x5,
  kTextureChannelZ = 0x6,
  kTextureChannelW = 0x7,
};

enum sce::Gnm::RenderTargetFormat : __int32
{
  kRenderTargetFormatInvalid = 0x0,
  kRenderTargetFormat8 = 0x1,
  kRenderTargetFormat16 = 0x2,
  kRenderTargetFormat8_8 = 0x3,
  kRenderTargetFormat32 = 0x4,
  kRenderTargetFormat16_16 = 0x5,
  kRenderTargetFormat10_11_11 = 0x6,
  kRenderTargetFormat11_11_10 = 0x7,
  kRenderTargetFormat10_10_10_2 = 0x8,
  kRenderTargetFormat2_10_10_10 = 0x9,
  kRenderTargetFormat8_8_8_8 = 0xA,
  kRenderTargetFormat32_32 = 0xB,
  kRenderTargetFormat16_16_16_16 = 0xC,
  kRenderTargetFormat32_32_32_32 = 0xE,
  kRenderTargetFormat5_6_5 = 0x10,
  kRenderTargetFormat1_5_5_5 = 0x11,
  kRenderTargetFormat5_5_5_1 = 0x12,
  kRenderTargetFormat4_4_4_4 = 0x13,
  kRenderTargetFormat8_24 = 0x14,
  kRenderTargetFormat24_8 = 0x15,
  kRenderTargetFormatX24_8_32 = 0x16,
};

enum sce::Gnm::RenderTargetChannelType : __int32
{
  kRenderTargetChannelTypeUNorm = 0x0,
  kRenderTargetChannelTypeSNorm = 0x1,
  kRenderTargetChannelTypeUInt = 0x4,
  kRenderTargetChannelTypeSInt = 0x5,
  kRenderTargetChannelTypeSrgb = 0x6,
  kRenderTargetChannelTypeFloat = 0x7,
};

enum sce::Gnm::RenderTargetChannelOrder : __int32
{
  kRenderTargetChannelOrderStandard = 0x0,
  kRenderTargetChannelOrderAlt = 0x1,
  kRenderTargetChannelOrderReversed = 0x2,
  kRenderTargetChannelOrderAltReversed = 0x3,
};

enum sce::Gnm::BufferFormat : __int32
{
  kBufferFormatInvalid = 0x0,
  kBufferFormat8 = 0x1,
  kBufferFormat16 = 0x2,
  kBufferFormat8_8 = 0x3,
  kBufferFormat32 = 0x4,
  kBufferFormat16_16 = 0x5,
  kBufferFormat10_11_11 = 0x6,
  kBufferFormat11_11_10 = 0x7,
  kBufferFormat10_10_10_2 = 0x8,
  kBufferFormat2_10_10_10 = 0x9,
  kBufferFormat8_8_8_8 = 0xA,
  kBufferFormat32_32 = 0xB,
  kBufferFormat16_16_16_16 = 0xC,
  kBufferFormat32_32_32 = 0xD,
  kBufferFormat32_32_32_32 = 0xE,
};

enum sce::Gnm::BufferChannelType : __int32
{
  kBufferChannelTypeUNorm = 0x0,
  kBufferChannelTypeSNorm = 0x1,
  kBufferChannelTypeUScaled = 0x2,
  kBufferChannelTypeSScaled = 0x3,
  kBufferChannelTypeUInt = 0x4,
  kBufferChannelTypeSInt = 0x5,
  kBufferChannelTypeSNormNoZero = 0x6,
  kBufferChannelTypeFloat = 0x7,
};

enum sce::Gnm::ZFormat : __int32
{
  kZFormatInvalid = 0x0,
  kZFormat16 = 0x1,
  kZFormat32Float = 0x3,
};

enum sce::Gnm::StencilFormat : __int32
{
  kStencilInvalid = 0x0,
  kStencil8 = 0x1,
};

enum sce::Gnm::NumSamples : __int32
{
  kNumSamples1 = 0x0,
  kNumSamples2 = 0x1,
  kNumSamples4 = 0x2,
  kNumSamples8 = 0x3,
  kNumSamples16 = 0x4,
};

enum sce::Gnm::NumFragments : __int32
{
  kNumFragments1 = 0x0,
  kNumFragments2 = 0x1,
  kNumFragments4 = 0x2,
  kNumFragments8 = 0x3,
};

enum sce::Gnm::TileMode : __int32
{
  kTileModeDepth_2dThin_64 = 0x0,
  kTileModeDepth_2dThin_128 = 0x1,
  kTileModeDepth_2dThin_256 = 0x2,
  kTileModeDepth_2dThin_512 = 0x3,
  kTileModeDepth_2dThin_1K = 0x4,
  kTileModeDepth_1dThin = 0x5,
  kTileModeDepth_2dThinPrt_256 = 0x6,
  kTileModeDepth_2dThinPrt_1K = 0x7,
  kTileModeDisplay_LinearAligned = 0x8,
  kTileModeDisplay_1dThin = 0x9,
  kTileModeDisplay_2dThin = 0xA,
  kTileModeDisplay_ThinPrt = 0xB,
  kTileModeDisplay_2dThinPrt = 0xC,
  kTileModeThin_1dThin = 0xD,
  kTileModeThin_2dThin = 0xE,
  kTileModeThin_3dThin = 0xF,
  kTileModeThin_ThinPrt = 0x10,
  kTileModeThin_2dThinPrt = 0x11,
  kTileModeThin_3dThinPrt = 0x12,
  kTileModeThick_1dThick = 0x13,
  kTileModeThick_2dThick = 0x14,
  kTileModeThick_3dThick = 0x15,
  kTileModeThick_ThickPrt = 0x16,
  kTileModeThick_2dThickPrt = 0x17,
  kTileModeThick_3dThickPrt = 0x18,
  kTileModeThick_2dXThick = 0x19,
  kTileModeThick_3dXThick = 0x1A,
  kTileModeDisplay_LinearGeneral = 0x1F,
};

enum sce::Gnm::ZCompareBase : __int32
{
  kZCompareBaseZMin = 0x0,
  kZCompareBaseZMax = 0x1,
};

enum sce::Gnm::ResourceMemoryType : __int32
{
  kResourceMemoryTypePV = 0x60,
  kResourceMemoryTypeGC = 0x6D,
  kResourceMemoryTypeSC = 0x6E,
  kResourceMemoryTypeUC = 0x6F,
  kResourceMemoryTypeRO = 0x10,
};

enum sce::Gnm::L1CachePolicy : __int32
{
  kL1CachePolicyLru = 0x0,
  kL1CachePolicyBypass = 0x1,
};

enum sce::Gnm::TextureType : __int32
{
  kTextureType1d = 0x8,
  kTextureType2d = 0x9,
  kTextureType3d = 0xA,
  kTextureTypeCubemap = 0xB,
  kTextureType1dArray = 0xC,
  kTextureType2dArray = 0xD,
  kTextureType2dMsaa = 0xE,
  kTextureType2dArrayMsaa = 0xF,
};

enum sce::Gnm::SamplerModulationFactor : __int32
{
  kSamplerModulationFactor0_0000 = 0x0,
  kSamplerModulationFactor0_1250 = 0x1,
  kSamplerModulationFactor0_3125 = 0x2,
  kSamplerModulationFactor0_4375 = 0x3,
  kSamplerModulationFactor0_5625 = 0x4,
  kSamplerModulationFactor0_6875 = 0x5,
  kSamplerModulationFactor0_8750 = 0x6,
  kSamplerModulationFactor1_0000 = 0x7,
};

enum sce::Gnm::BlendMultiplier : __int32
{
  kBlendMultiplierZero = 0x0,
  kBlendMultiplierOne = 0x1,
  kBlendMultiplierSrcColor = 0x2,
  kBlendMultiplierOneMinusSrcColor = 0x3,
  kBlendMultiplierSrcAlpha = 0x4,
  kBlendMultiplierOneMinusSrcAlpha = 0x5,
  kBlendMultiplierDestAlpha = 0x6,
  kBlendMultiplierOneMinusDestAlpha = 0x7,
  kBlendMultiplierDestColor = 0x8,
  kBlendMultiplierOneMinusDestColor = 0x9,
  kBlendMultiplierSrcAlphaSaturate = 0xA,
  kBlendMultiplierConstantColor = 0xD,
  kBlendMultiplierOneMinusConstantColor = 0xE,
  kBlendMultiplierSrc1Color = 0xF,
  kBlendMultiplierInverseSrc1Color = 0x10,
  kBlendMultiplierSrc1Alpha = 0x11,
  kBlendMultiplierInverseSrc1Alpha = 0x12,
  kBlendMultiplierConstantAlpha = 0x13,
  kBlendMultiplierOneMinusConstantAlpha = 0x14,
};

enum sce::Gnm::BlendFunc : __int32
{
  kBlendFuncAdd = 0x0,
  kBlendFuncSubtract = 0x1,
  kBlendFuncMin = 0x2,
  kBlendFuncMax = 0x3,
  kBlendFuncReverseSubtract = 0x4,
};

enum sce::Gnm::AlphaToMaskMode : __int32
{
  kAlphaToMaskDisable = 0x0,
  kAlphaToMaskEnable = 0x1,
};

enum sce::Gnm::AlphaToMaskDitherThreshold : __int32
{
  kAlphaToMaskDitherThreshold0 = 0x0,
  kAlphaToMaskDitherThreshold1 = 0x1,
  kAlphaToMaskDitherDisabled = 0x2,
  kAlphaToMaskDitherThreshold3 = 0x3,
};

enum sce::Gnm::AlphaToMaskDitherMode : __int32
{
  kAlphaToMaskDitherModeDisabled = 0x0,
  kAlphaToMaskDitherModeEnabled = 0x1,
};

enum sce::Gnm::AlphaToMaskRoundMode : __int32
{
  kAlphaToMaskRoundNonDithered = 0x0,
  kAlphaToMaskRoundDithered = 0x1,
};

enum sce::Gnm::PrimitiveSetupCullFaceMode : __int32
{
  kPrimitiveSetupCullFaceNone = 0x0,
  kPrimitiveSetupCullFaceFront = 0x1,
  kPrimitiveSetupCullFaceBack = 0x2,
  kPrimitiveSetupCullFaceFrontAndBack = 0x3,
};

enum sce::Gnm::PrimitiveSetupFrontFace : __int32
{
  kPrimitiveSetupFrontFaceCw = 0x1,
  kPrimitiveSetupFrontFaceCcw = 0x0,
};

enum sce::Gnm::PrimitiveSetupPolygonMode : __int32
{
  kPrimitiveSetupPolygonModePoint = 0x0,
  kPrimitiveSetupPolygonModeLine = 0x1,
  kPrimitiveSetupPolygonModeFill = 0x2,
};

enum sce::Gnm::PrimitiveSetupPolygonOffsetMode : __int32
{
  kPrimitiveSetupPolygonOffsetEnable = 0x1,
  kPrimitiveSetupPolygonOffsetDisable = 0x0,
};

enum sce::Gnm::PrimitiveSetupProvokingVertexMode : __int32
{
  kPrimitiveSetupProvokingVertexFirst = 0x0,
  kPrimitiveSetupProvokingVertexLast = 0x1,
};

enum sce::Gnm::DepthControlZWrite : __int32
{
  kDepthControlZWriteDisable = 0x0,
  kDepthControlZWriteEnable = 0x1,
};

enum sce::Gnm::CompareFunc : __int32
{
  kCompareFuncNever = 0x0,
  kCompareFuncLess = 0x1,
  kCompareFuncEqual = 0x2,
  kCompareFuncLessEqual = 0x3,
  kCompareFuncGreater = 0x4,
  kCompareFuncNotEqual = 0x5,
  kCompareFuncGreaterEqual = 0x6,
  kCompareFuncAlways = 0x7,
};

enum sce::Gnm::StencilOp : __int32
{
  kStencilOpKeep = 0x0,
  kStencilOpZero = 0x1,
  kStencilOpOnes = 0x2,
  kStencilOpReplaceTest = 0x3,
  kStencilOpReplaceOp = 0x4,
  kStencilOpAddClamp = 0x5,
  kStencilOpSubClamp = 0x6,
  kStencilOpInvert = 0x7,
  kStencilOpAddWrap = 0x8,
  kStencilOpSubWrap = 0x9,
  kStencilOpAnd = 0xA,
  kStencilOpOr = 0xB,
  kStencilOpXor = 0xC,
  kStencilOpNand = 0xD,
  kStencilOpNor = 0xE,
  kStencilOpXnor = 0xF,
};

typedef sce::Gnm::ZFormat sce::Gnm::ZFormat_0;

typedef sce::Gnm::SurfaceFormat sce::Gnm::SurfaceFormat_0;

typedef sce::Gnm::TextureChannelType sce::Gnm::TextureChannelType_0;

typedef sce::Gnm::TextureChannel sce::Gnm::TextureChannel_0;

typedef sce::Gnm::RenderTargetFormat sce::Gnm::RenderTargetFormat_0;

typedef sce::Gnm::BufferFormat sce::Gnm::BufferFormat_0;

typedef sce::Gnm::BufferChannelType sce::Gnm::BufferChannelType_0;

typedef sce::Gnm::RenderTargetChannelOrder sce::Gnm::RenderTargetChannelOrder_0;

typedef sce::Gnm::RenderTargetChannelType sce::Gnm::RenderTargetChannelType_0;

typedef uint32_t sce::Gnm::AlignmentType;

struct sce::Gnm::SizeAlign
{
  uint32_t m_size;
  sce::Gnm::AlignmentType m_align;
};

typedef sce::Gnm::TileMode sce::Gnm::TileMode_0;

typedef sce::Gnm::NumFragments sce::Gnm::NumFragments_0;

typedef sce::Gnm::NumSamples sce::Gnm::NumSamples_0;

typedef sce::Gnm::TextureType sce::Gnm::TextureType_0;

typedef sce::Gnm::SamplerModulationFactor sce::Gnm::SamplerModulationFactor_0;

typedef sce::Gnm::StencilFormat sce::Gnm::StencilFormat_0;

typedef sce::Gnm::ZCompareBase sce::Gnm::ZCompareBase_0;

enum sce::Gnm::PsTargetOutputMode : __int32
{
  kPsTargetOutputModeNoExports = 0x0,
  kPsTargetOutputModeR32 = 0x1,
  kPsTargetOutputModeG32R32 = 0x2,
  kPsTargetOutputModeA32R32 = 0x3,
  kPsTargetOutputModeA16B16G16R16Float = 0x4,
  kPsTargetOutputModeA16B16G16R16Unorm = 0x5,
  kPsTargetOutputModeA16B16G16R16Snorm = 0x6,
  kPsTargetOutputModeA16B16G16R16Uint = 0x7,
  kPsTargetOutputModeA16B16G16R16Sint = 0x8,
  kPsTargetOutputModeA32B32G32R32 = 0x9,
};

enum sce::Gnm::PsConservativeZExport : __int32
{
  kPsConservativeZExportAnyZ = 0x0,
  kPsConservativeZExportLessThanSourceZ = 0x1,
  kPsConservativeZExportGreaterThanSourceZ = 0x2,
};

enum sce::Gnm::PsZBehavior : __int32
{
  kPsZBehaviorLateZ = 0x0,
  kPsZBehaviorEarlyZ = 0x1,
  kPsZBehaviorReZ = 0x2,
};

enum sce::Gnm::GsMaxOutputPrimitiveDwordSize : __int32
{
  kGsMaxOutputPrimitiveDwordSize1024 = 0x0,
  kGsMaxOutputPrimitiveDwordSize512 = 0x1,
  kGsMaxOutputPrimitiveDwordSize256 = 0x2,
  kGsMaxOutputPrimitiveDwordSize128 = 0x3,
};

enum sce::Gnm::GsMaxOutputVertexCount : __int32
{
  kGsMaxOutputVertexCount1024 = 0x0,
  kGsMaxOutputVertexCount512 = 0x1,
  kGsMaxOutputVertexCount256 = 0x2,
  kGsMaxOutputVertexCount128 = 0x3,
};

struct sce::Gnm::InputUsageSlot::$1DC1AEE239A16B0CADDD7DF2CECC32B0::$4F1FC8C58DBE13CDC40BE8EE5154CC2A
{
  unsigned __int8 m_registerCount : 1;
  unsigned __int8 m_resourceType : 1;
  unsigned __int8 m_reserved : 2;
  unsigned __int8 m_chunkMask : 4;
};

union sce::Gnm::InputUsageSlot::$1DC1AEE239A16B0CADDD7DF2CECC32B0
{
  sce::Gnm::InputUsageSlot::$1DC1AEE239A16B0CADDD7DF2CECC32B0::$4F1FC8C58DBE13CDC40BE8EE5154CC2A _anon_0;
  uint8_t m_srtSizeInDWordMinusOne;
};

struct sce::Gnm::InputUsageSlot
{
  uint8_t m_usageType;
  uint8_t m_apiSlot;
  uint8_t m_startRegister;
  sce::Gnm::InputUsageSlot::$1DC1AEE239A16B0CADDD7DF2CECC32B0 _anon_0;
};

struct sce::Gnm::VertexInputSemantic
{
  uint8_t m_semantic;
  uint8_t m_vgpr;
  uint8_t m_sizeInElements;
  uint8_t m_reserved;
};

struct sce::Gnm::VertexExportSemantic
{
  uint8_t m_semantic;
  uint8_t m_outIndex;
};

struct sce::Gnm::PixelInputSemantic
{
  unsigned __int16 m_semantic : 8;
  unsigned __int16 m_defaultValue : 2;
  unsigned __int16 m_isFlatShaded : 1;
  unsigned __int16 m_isLinear : 1;
  unsigned __int16 m_isCustom : 1;
  unsigned __int16 m_reserved : 3;
};

typedef sce::Gnm::GsMaxOutputPrimitiveDwordSize sce::Gnm::GsMaxOutputPrimitiveDwordSize_0;

typedef sce::Gnm::GsMaxOutputVertexCount sce::Gnm::GsMaxOutputVertexCount_0;

enum nGUI::LANGUAGE : __int32
{
  LANGUAGE_JAPANESE = 0x0,
  LANGUAGE_ENGLISH = 0x1,
  LANGUAGE_FRENCH = 0x2,
  LANGUAGE_SPANISH = 0x3,
  LANGUAGE_GERMAN = 0x4,
  LANGUAGE_ITALIAN = 0x5,
  LANGUAGE_KOREAN = 0x6,
  LANGUAGE_CHINESE_T = 0x7,
  LANGUAGE_CHINESE_S = 0x8,
  LANGUAGE_PORTUGUESE = 0x9,
  LANGUAGE_RUSSIAN = 0xA,
  LANGUAGE_POLISH = 0xB,
  LANGUAGE_DUTCH = 0xC,
  LANGUAGE_FINNISH = 0xD,
  LANGUAGE_SWEDISH = 0xE,
  LANGUAGE_DANISH = 0xF,
  LANGUAGE_NORWEGIAN = 0x10,
  LANGUAGE_CZECH = 0x11,
  LANGUAGE_HUNGARIAN = 0x12,
  LANGUAGE_SLOVAK = 0x13,
  LANGUAGE_OTHER = 0x14,
  LANGUAGE_PORTUGUESE_BR = 0x15,
  LANGUAGE_NUM = 0x16,
  LANGUAGE_INVALID = 0xFFFFFFFF,
};

enum nGUI::LANGUAGE_SETTING : __int32
{
  LANGUAGE_SETTING0 = 0x0,
  LANGUAGE_SETTING1 = 0x1,
  LANGUAGE_SETTING2 = 0x2,
  LANGUAGE_SETTING_NUM = 0x3,
};

struct __attribute__((aligned(8))) nGUI::ICON_INFO
{
  MT_CTSTR iconName;
  u32 code;
};

struct nGUI::MTAG
{
  unsigned __int32 type : 8;
  unsigned __int32 attr : 8;
  nGUI::MTAG *pNext;
  nGUI::MTAG::$A738E89CC3E255D9231517AFFC0BD6D2 _anon_0;
};

struct nGUI::MTAG::FONT
{
  rGUIFont *pFont;
};

struct nGUI::MTAG::SIZE
{
  bool resize;
  f32 fw;
  f32 fh;
};

struct nGUI::MTAG::COLOR
{
  u32 color;
};

struct nGUI::MTAG::SPEED
{
  f32 speed;
};

struct nGUI::MTAG::ANIM
{
  u32 attr;
  u32 id;
  f32 x;
};

struct nGUI::MTAG::WORDWRAP
{
  unsigned __int32 hyphen : 1;
  f32 fw;
  f32 fh;
  rGUIFont *pt;
};

struct nGUI::MTAG::TIME
{
  u32 frame;
};

struct nGUI::MTAG::CHAR
{
  void *pt;
  f32 x;
  f32 y;
  f32 width;
  f32 offset;
};

struct nGUI::MTAG::PAGE
{
  f32 width;
  f32 height;
};

struct nGUI::MTAG::DISP
{
  u32 frame;
};

struct nGUI::MTAG::RUBY
{
  f32 fontSize;
  f32 width;
  f32 height;
};

struct nGUI::MTAG::EVENT
{
  u32 type;
  u32 param0;
  u32 param1;
};

struct nGUI::MTAG::LINE
{
  f32 x;
  f32 y;
  f32 rubyHeight;
  f32 ascent;
  f32 descent;
};

struct nGUI::MTAG::EXTEND
{
  f32 x;
  f32 y;
  void *pData;
};

union nGUI::MTAG::$A738E89CC3E255D9231517AFFC0BD6D2::$83EF47D50B1C21A964C7CEF3CF5FACEE::$E52B8E50CAF990AD74E23053FFF85FAD
{
  nGUI::MTAG::FONT font;
  nGUI::MTAG::SIZE size;
  nGUI::MTAG::COLOR color;
  nGUI::MTAG::COLOR rgb;
  nGUI::MTAG::SPEED speed;
  nGUI::MTAG::ANIM anim;
  nGUI::MTAG::WORDWRAP wordwrap;
  nGUI::MTAG::TIME time;
  nGUI::MTAG::CHAR ch;
  nGUI::MTAG::PAGE page;
  nGUI::MTAG::DISP disp;
  nGUI::MTAG::RUBY ruby;
  nGUI::MTAG::EVENT event;
  nGUI::MTAG::LINE line;
  nGUI::MTAG::EXTEND extend;
};

struct nGUI::MTAG::$A738E89CC3E255D9231517AFFC0BD6D2::$83EF47D50B1C21A964C7CEF3CF5FACEE
{
  f32 width;
  f32 height;
  nGUI::MTAG::$A738E89CC3E255D9231517AFFC0BD6D2::$83EF47D50B1C21A964C7CEF3CF5FACEE::$E52B8E50CAF990AD74E23053FFF85FAD _anon_0;
};

struct nGUI::MTAG::DRAW
{
  unsigned __int32 totalCharNum : 16;
  unsigned __int32 charNum : 16;
  unsigned __int32 totalVertexNum : 16;
  unsigned __int32 vertexNum : 16;
  u32 vertexPos;
  unsigned __int32 totalIndexNum : 16;
  unsigned __int32 indexNum : 16;
  u32 indexPos;
  nDraw::Texture *pTexture;
  nGUI::MTAG *pExtend;
};

struct nGUI::MTAG::FFLINE
{
  nGUI::MTAG *pLine;
  f32 param[4];
};

union nGUI::MTAG::$A738E89CC3E255D9231517AFFC0BD6D2
{
  nGUI::MTAG::$A738E89CC3E255D9231517AFFC0BD6D2::$83EF47D50B1C21A964C7CEF3CF5FACEE _anon_0;
  nGUI::MTAG::DRAW draw;
  nGUI::MTAG::FFLINE ffLine;
};

struct __cppobj rGUIFont : cResource
{
  unsigned __int32 mDynamicCharTW : 12;
  unsigned __int32 mDynamicCharTH : 12;
  unsigned __int32 mDynamicTextureNum : 4;
  unsigned __int32 mDynamicTextureSize : 4;
  unsigned __int32 mDynamicLineNum : 12;
  unsigned __int32 mRequestStartIndex : 16;
  unsigned __int32 padding : 4;
  nDraw::FORMAT_TYPE mDynamicTextureFormat;
  u32 mDynamicTextureMisc;
  rGUIFont::SRC_CHAR *mpSourceChar;
  nDraw::Texture **mpDynamicTexture;
  rGUIFont::SRC_CHAR **mpRequestLayoutCharList;
  rGUIFont::SRC_CHAR **mpLayoutCharList;
  u32 mLayoutCharCount;
  u32 mLayoutStatus;
  u32 mLayoutingTextureIndex;
  rTexture *mpLayoutTexture;
  u32 mVersion;
  u32 mTextureNum;
  u32 mCharNum;
  u32 mDescentNum;
  f32 *mpDescent;
  rGUIFont::CHAR *mpChar;
  MT_CTSTR mpTexturePath;
  rTexture **mpTexture;
  rGUIFont *mpLayoutNext;
  unsigned __int32 mFontType : 8;
  unsigned __int32 mFontSize : 16;
  unsigned __int32 mSuffix : 8;
  u32 mAttr;
  f32 mMaxAscent;
  f32 mMaxDescent;
};

struct rGUIFont::SRC_CHAR
{
  unsigned __int32 textureIndex : 8;
  unsigned __int32 u : 12;
  unsigned __int32 v : 12;
  unsigned __int32 index : 16;
  unsigned __int32 padding : 16;
  unsigned __int32 layoutNext : 16;
  unsigned __int32 requestNext : 16;
};

struct rTexture::SHFACTOR
{
  f32 r[9];
  f32 g[9];
  f32 b[9];
};

struct __cppobj rTexture : cResource
{
  rTexture::SHFACTOR mSHFactor;
  nDraw::Texture *mpTexture;
  f32 mOrgInvWidth;
  f32 mOrgInvHeight;
  u32 mOrgWidth;
  u32 mOrgHeight;
  u32 mOrgDepth;
  u32 mDetailBias;
  bool mbStream;
  u32 mStreamLv;
};

struct rGUIFont::CHAR
{
  u32 code;
  unsigned __int32 textureIndex : 8;
  unsigned __int32 u : 12;
  unsigned __int32 v : 12;
  unsigned __int32 offset : 8;
  unsigned __int32 tw : 12;
  unsigned __int32 th : 12;
  unsigned __int32 w : 12;
  unsigned __int32 descentIndex : 4;
  unsigned __int32 isValid : 1;
  unsigned __int32 requestLayout : 1;
  unsigned __int32 invisible : 1;
  unsigned __int32 padding : 13;
};

struct nGUI::CLASS_INFO
{
  u32 dtiId;
  u32 setterNum;
  const nGUI::PROP_SETTER *pPropSetter;
};

struct __attribute__((aligned(16))) nGUI::PROP_SETTER
{
  unsigned __int32 type : 16;
  unsigned __int32 callNo : 16;
  MT_CTSTR name;
  MT_MFUNC func;
};

struct nGUI::BufferObject
{
  u32 pos;
  unsigned __int32 size : 24;
  unsigned __int32 valid : 1;
  unsigned __int32 update : 3;
  unsigned __int32 commandCache : 1;
  unsigned __int32 type : 2;
  unsigned __int32 blank : 1;
  nGUI::BufferObject *pBack;
  nGUI::BufferObject *pNext;
};

struct __cppobj __attribute__((aligned(4))) nGUI::WrapPoint : MtObject
{
  u32 mUnicode;
  bool mStartNewLineAfterContdWrapPts;
  bool mIsValid;
};

struct __cppobj nGUI::WrapPoint::MyDTI : MtDTI
{
};

struct div_t
{
  int quot;
  int rem;
};

struct ldiv_t
{
  __int64 quot;
  __int64 rem;
};

typedef __int64 _Longlong;

struct _Lldiv_t
{
  _Longlong quot;
  _Longlong rem;
};

struct __attribute__((aligned(8))) _Mbstatet
{
  unsigned __int64 _Wchar;
  unsigned __int16 _Byte;
  unsigned __int16 _State;
};

struct std::integral_constant<bool,false>
{
  __int8 gap0[1];
};

struct std::integral_constant<bool,true>
{
  __int8 gap0[1];
};

struct std::ios;

struct std::streambuf;

struct std::istream;

struct std::ostream;

struct std::iostream;

struct std::filebuf;

struct std::ifstream;

struct std::ofstream;

struct std::fstream;

typedef std::integral_constant<bool,false> std::false_type;

typedef std::integral_constant<bool,true> std::true_type;

typedef struct std::ios std::ios;

typedef struct std::streambuf std::streambuf;

typedef struct std::istream std::istream;

typedef struct std::ostream std::ostream;

typedef struct std::iostream std::iostream;

typedef struct std::filebuf std::filebuf;

typedef struct std::ifstream std::ifstream;

typedef struct std::ofstream std::ofstream;

typedef struct std::fstream std::fstream;

typedef struct std::filebuf std::stdiobuf;

typedef struct std::fstream std::stdiostream;

typedef unsigned __int16 wchar_t;

typedef wchar_t _Wchart;

typedef _Mbstatet _Mbstatet_0;

struct __attribute__((aligned(8))) __sbuf
{
  unsigned __int8 *_base;
  int _size;
};

struct fpos_t
{
  __int64 _Off;
  _Mbstatet_0 _Wstate;
};

typedef fpos_t fpos_t_0;

struct pthread;

union __mbstate_t
{
  char __mbstate8[128];
  __int64_t _mbstateL;
};

struct __sFILE
{
  unsigned __int16 _Mode;
  unsigned __int8 _Idx;
  int _Handle;
  unsigned __int8 *_Buf;
  unsigned __int8 *_Bend;
  unsigned __int8 *_Next;
  unsigned __int8 *_Rend;
  unsigned __int8 *_Wend;
  unsigned __int8 *_Rback;
  _Wchart *_WRback;
  _Wchart _WBack[2];
  unsigned __int8 *_Rsave;
  unsigned __int8 *_WRend;
  unsigned __int8 *_WWend;
  _Mbstatet_0 _Wstate;
  char *_Tmpnam;
  unsigned __int8 _Back[6];
  unsigned __int8 _Cbuf;
  void *_Mutex;
  unsigned __int8 *_p;
  int _r;
  int _w;
  __int16 _flags;
  __int16 _file;
  __sbuf _bf;
  int _lbfsize;
  void *_cookie;
  int (*_close)(void *);
  int (*_read)(void *, char *, int);
  fpos_t_0 (*_seek)(void *, fpos_t_0, int);
  int (*_write)(void *, const char *, int);
  __sbuf _ub;
  unsigned __int8 *_up;
  int _ur;
  unsigned __int8 _ubuf[3];
  unsigned __int8 _nbuf[1];
  __sbuf _lb;
  int _blksize;
  fpos_t_0 _offset;
  pthread_mutex *_fl_mutex;
  pthread *_fl_owner;
  int _fl_count;
  int _orientation;
  __mbstate_t _mbstate;
};

struct __cppobj MtArray : MtObject
{
  u32 mLength;
  u32 mBufsiz;
  bool mAutoDelete;
  MtObject **mpArray;
};

struct __cppobj __attribute__((aligned(8))) sGUI : cSystem
{
  nDraw::Texture *mpAlphaMap;
  u32 mAttr;
  nGUI::LANGUAGE mLanguageId[3];
  rGUIFont *mpFontArray[8];
  rGUIFont *mpLayoutingFont;
  rGUIFont *mpIconFont;
  nGUI::ICON_INFO *mpIconInfo;
  MT_CHAR *mpIconNameBuffer;
  rGUI *mpFontFilterResource;
  u32 mEnableRubySpace;
  s32 mRubyLineSpace;
  f32 mRubyRatio;
  rGUIFont *mpRubyFont;
  u32 mTempMTagOffset;
  u32 mTempMTagBufferCount;
  nGUI::MTAG *mpTempMTagBuffer;
  nGUI::MTAG **mpEmptyTempMTagBuffer;
  nGUI::CLASS_INFO *mpObjectClassInfo;
  nGUI::CLASS_INFO *mpInstanceClassInfo;
  u32 mBufferBit;
  u32 mBufferIndex;
  u32 mBufferIndexBit;
  u32 mVertexBufferSize;
  u32 mVertexBufferBlankSize;
  nDraw::VertexBuffer *mpVertexBuffer[3];
  void *mpVertexBufferTop;
  nGUI::BufferObject mVertexBufferObject;
  u32 mIndexBufferSize;
  u32 mIndexBufferBlankSize;
  nDraw::IndexBuffer *mpIndexBuffer[3];
  void *mpIndexBufferTop;
  nGUI::BufferObject mIndexBufferObject;
  MtArray mWrapPointList;
  bool mIsEnableGUIPlacementNew;
};

struct __cppobj __attribute__((aligned(8))) rGUI : cResource
{
  rGUI::HEADER *mpHeader;
  u32 mAttr;
  unsigned __int32 mIsSetData : 1;
  unsigned __int32 mBaseZ : 2;
  unsigned __int32 mFramerateMode : 1;
  unsigned __int32 mLanguageSettingNo : 2;
  unsigned __int32 padding : 26;
  MtSize mViewSize;
  MtString mPreviewUnitName;
  cGUIFontFilter **mpFontFilter;
  nDraw::VertexBuffer *mpVertexBuffer;
  rGUI::InstanceNeedObjectInfo *mpInstanceNeedObjectInfo;
  u32 mInstanceNullNeedNum;
  u32 mInstanceScissorMaskNeedNum;
  u32 mInstanceAnimationNeedNum;
  u32 mInstanceAnimVariableNeedNum;
  u32 mInstanceAnimControlNeedNum;
  u32 mGUIObjTextNeedNum;
  u32 mGUIObjMessageNeedNum;
  u32 mGUIObjChildAnimationRootNeedNum;
  u32 mGUIObjNullNeedNum;
  u32 mGUIObjTextureSetNeedNum;
  u32 mGUIObjTextureNeedNum;
  u32 mGUIObjPolygonNeedNum;
  u32 mGUIObjScissorMaskNeedNum;
  u32 mGUIObjColorAdjustNeedNum;
  u32 mGUIObjRootNeedNum;
  u32 mGUIVarIntNeedNum;
  u32 mGUIVarFloatNeedNum;
  u32 mCreateAnimationBufferSize;
  u32 mObjRootNeedSetObjectBufferSize;
};

union rGUI::HEADER::$AF2BA5CD17E809B14B54B16FEAAF33FC
{
  u32 startFlowIndex;
  nGUI::FLOW *startFlowAdrs;
};

union rGUI::HEADER::$5B2F9A5F4D815B192C0962926000DA6D
{
  u32 animationOffset;
  nGUI::ANIMATION *pAnimation;
};

union rGUI::HEADER::$E51F378F2FC7AC099820F7091018FB93
{
  u32 sequenceOffset;
  nGUI::SEQUENCE *pSequence;
};

union rGUI::HEADER::$F899EBFF77AF7E4D76FF069F1F3B5E70
{
  u32 objectOffset;
  nGUI::OBJECT *pObject;
};

union rGUI::HEADER::$011111EBA828DA9323289438C45B7BFE
{
  u32 objSequenceOffset;
  nGUI::OBJ_SEQUENCE *pObjSequence;
};

union rGUI::HEADER::$E4111777C249A1A73C8B4B7BE9FE9CFA
{
  u32 initParamOffset;
  nGUI::INIT_PARAM *pInitParam;
};

union rGUI::HEADER::$1678E242C16DD43C6726EF1D05F3E693
{
  u32 paramOffset;
  nGUI::PARAM *pParam;
};

union rGUI::HEADER::$5F115A8B4AF76311B3DB81E9ECDE5D9A
{
  u32 instanceOffset;
  nGUI::INSTANCE *pInstance;
};

union rGUI::HEADER::$9B6F151213880F607DF2C4FCDCB1EE85
{
  u32 flowOffset;
  nGUI::FLOW *pFlow;
};

union rGUI::HEADER::$0554DAC3BA5A1F899A4C9A6075506474
{
  u32 flowProcessOffset;
  nGUI::FLOW_PROCESS *pFlowProcess;
};

union rGUI::HEADER::$84DD991A5A0A0619173B6E2C6E36688E
{
  u32 flowInputOffset;
  nGUI::FLOW_INPUT *pFlowInput;
};

union rGUI::HEADER::$6B285BE4D2CA63CFA4F202E0B2B7EE51
{
  u32 flowSwitchOffset;
  nGUI::FLOW_SWITCH *pFlowSwitch;
};

union rGUI::HEADER::$73B65D6E4F35A18F118CC1507EA70D0A
{
  u32 flowFunctionOffset;
  nGUI::FLOW_FUNCTION *pFlowFunction;
};

union rGUI::HEADER::$E5F4185D103BE9DB0BB55CC41CEAEA82
{
  u32 actionOffset;
  nGUI::ACTION *pAction;
};

union rGUI::HEADER::$8C03A88026774195598EDEE937D3E7A9
{
  u32 inputConditionOffset;
  nGUI::INPUT_CONDITION *pInputCondition;
};

union rGUI::HEADER::$0D83C912FA0782AF6EB4BE4915936902
{
  u32 switchOperatorOffset;
  nGUI::SWITCH_OPERATOR *pSwitchOperator;
};

union rGUI::HEADER::$CFD217E33C72E1492C1F9024DF3F36C8
{
  u32 switchConditionOffset;
  nGUI::SWITCH_CONDITION *pSwitchCondition;
};

union rGUI::HEADER::$D275EFC1F0E98CC38B9C6A832370CFEE
{
  u32 variableOffset;
  nGUI::VARIABLE *pVariable;
};

union rGUI::HEADER::$B8E99B3F5B6E92C058B4C33D854AF2AE
{
  u32 textureOffset;
  nGUI::TEXTURE *pTexture;
};

union rGUI::HEADER::$ED0801065EC7639BEFD078FE96BDBF1E
{
  u32 fontOffset;
  nGUI::FONT *pFont;
};

union rGUI::HEADER::$F5D545D91DC2CA3E6743768F78EF8646
{
  u32 fontFilterOffset;
  void *pFontFilter;
};

union rGUI::HEADER::$41ACC9C3CD02CD8AB126F4320D06AD3F
{
  u32 messageOffset;
  nGUI::MESSAGE *pMessage;
};

union rGUI::HEADER::$D58C3A0485612577491D425094311625
{
  u32 guiResourceOffset;
  nGUI::GUIRESOURCE *pGUIResource;
};

union rGUI::HEADER::$5568E4AC7294A0162EB1BA3971587927
{
  u32 generalResourceOffset;
  nGUI::GENERALRESOURCE *pGeneralResource;
};

union rGUI::HEADER::$F893173A07A767F27C99500B7C555EB0
{
  u32 cameraSettingOffset;
  nGUI::CAMERA_SETTING *pCameraSetting;
};

union rGUI::HEADER::$F3D8F09A53FCB61545E7DDA47ACA8BB5
{
  u32 stringOffset;
  MT_STR pString;
};

union rGUI::HEADER::$DEEC0C0EF3F504262EA592C2B16D9620
{
  u32 keyOffset;
  nGUI::KEY *pKey;
};

union rGUI::HEADER::$149D91F39F16F3EFCB6D369DA13E9D12
{
  u32 keyValue8Offset;
  u8 *pKeyValue8;
};

union rGUI::HEADER::$12F80EBA77A2046561D61D14184AF87A
{
  u32 keyValue32Offset;
  u8 *pKeyValue32;
};

union rGUI::HEADER::$B5898FC08BE93A2899D5E747391C860F
{
  u32 keyValue128Offset;
  u8 *pKeyValue128;
};

union rGUI::HEADER::$5ED2E0344FEF66397EF18BE34DD4D7F0
{
  u32 extendDataOffset;
  u8 *pExtendData;
};

union rGUI::HEADER::$9E47CBF7A8F5890D1164EF6E7300AACA
{
  u32 instExeParamOffset;
  nGUI::PARAM *pInstExeParam;
};

union rGUI::HEADER::$19FCF91050B8A1C9201BC50A563E5392
{
  u32 vertexOffset;
  nGUI::VERTEX *pVertex;
};

struct rGUI::HEADER
{
  u32 magic;
  u32 version;
  u32 size;
  u32 attr;
  t64 updateTime;
  u32 instanceId;
  u32 flowId;
  u32 variableId;
  u32 startInstanceIndex;
  u32 animationNum;
  u32 sequenceNum;
  u32 objectNum;
  u32 objSequenceNum;
  u32 initParamNum;
  u32 paramNum;
  u32 keyNum;
  u32 instanceNum;
  u32 flowNum;
  u32 flowProcessNum;
  u32 flowInputNum;
  u32 flowSwitchNum;
  u32 flowFunctionNum;
  u32 actionNum;
  u32 inputConditionNum;
  u32 switchConditionNum;
  u32 switchOperatorNum;
  u32 variableNum;
  u32 textureNum;
  u32 fontNum;
  u32 fontFilterNum;
  u32 messageNum;
  u32 guiResourceNum;
  u32 generalResourceNum;
  u32 cameraSettingNum;
  u32 instExeParamNum;
  u32 vertexBufferSize;
  unsigned __int32 baseZ : 2;
  unsigned __int32 framerateMode : 1;
  unsigned __int32 languageSettingNo : 2;
  unsigned __int32 padding : 27;
  MtSize viewSize;
  rGUI::HEADER::$AF2BA5CD17E809B14B54B16FEAAF33FC _anon_0;
  rGUI::HEADER::$5B2F9A5F4D815B192C0962926000DA6D _anon_1;
  rGUI::HEADER::$E51F378F2FC7AC099820F7091018FB93 _anon_2;
  rGUI::HEADER::$F899EBFF77AF7E4D76FF069F1F3B5E70 _anon_3;
  rGUI::HEADER::$011111EBA828DA9323289438C45B7BFE _anon_4;
  rGUI::HEADER::$E4111777C249A1A73C8B4B7BE9FE9CFA _anon_5;
  rGUI::HEADER::$1678E242C16DD43C6726EF1D05F3E693 _anon_6;
  rGUI::HEADER::$5F115A8B4AF76311B3DB81E9ECDE5D9A _anon_7;
  rGUI::HEADER::$9B6F151213880F607DF2C4FCDCB1EE85 _anon_8;
  rGUI::HEADER::$0554DAC3BA5A1F899A4C9A6075506474 _anon_9;
  rGUI::HEADER::$84DD991A5A0A0619173B6E2C6E36688E _anon_10;
  rGUI::HEADER::$6B285BE4D2CA63CFA4F202E0B2B7EE51 _anon_11;
  rGUI::HEADER::$73B65D6E4F35A18F118CC1507EA70D0A _anon_12;
  rGUI::HEADER::$E5F4185D103BE9DB0BB55CC41CEAEA82 _anon_13;
  rGUI::HEADER::$8C03A88026774195598EDEE937D3E7A9 _anon_14;
  rGUI::HEADER::$0D83C912FA0782AF6EB4BE4915936902 _anon_15;
  rGUI::HEADER::$CFD217E33C72E1492C1F9024DF3F36C8 _anon_16;
  rGUI::HEADER::$D275EFC1F0E98CC38B9C6A832370CFEE _anon_17;
  rGUI::HEADER::$B8E99B3F5B6E92C058B4C33D854AF2AE _anon_18;
  rGUI::HEADER::$ED0801065EC7639BEFD078FE96BDBF1E _anon_19;
  rGUI::HEADER::$F5D545D91DC2CA3E6743768F78EF8646 _anon_20;
  rGUI::HEADER::$41ACC9C3CD02CD8AB126F4320D06AD3F _anon_21;
  rGUI::HEADER::$D58C3A0485612577491D425094311625 _anon_22;
  rGUI::HEADER::$5568E4AC7294A0162EB1BA3971587927 _anon_23;
  rGUI::HEADER::$F893173A07A767F27C99500B7C555EB0 _anon_24;
  rGUI::HEADER::$F3D8F09A53FCB61545E7DDA47ACA8BB5 _anon_25;
  rGUI::HEADER::$DEEC0C0EF3F504262EA592C2B16D9620 _anon_26;
  rGUI::HEADER::$149D91F39F16F3EFCB6D369DA13E9D12 _anon_27;
  rGUI::HEADER::$12F80EBA77A2046561D61D14184AF87A _anon_28;
  rGUI::HEADER::$B5898FC08BE93A2899D5E747391C860F _anon_29;
  rGUI::HEADER::$5ED2E0344FEF66397EF18BE34DD4D7F0 _anon_30;
  rGUI::HEADER::$9E47CBF7A8F5890D1164EF6E7300AACA _anon_31;
  rGUI::HEADER::$19FCF91050B8A1C9201BC50A563E5392 _anon_32;
};

struct __cppobj cGUIFontFilter : MtObject
{
  u32 mId;
  unsigned __int32 mType : 4;
};

struct rGUI::InstanceNeedObjectInfo
{
  u32 objTextNeedNum;
  u32 objMessageNeedNum;
  u32 objChildAnimationRootNeedNum;
  u32 objNullNeedNum;
  u32 objTextureSetNeedNum;
  u32 objTextureNeedNum;
  u32 objPolygonNeedNum;
  u32 objScissorMaskNeedNum;
  u32 objColorAdjustNeedNum;
  u32 objRootNeedNum;
  u32 createAnimationBufferSize;
  u32 objRootNeedSetObjectBufferSize;
};

union nGUI::FLOW::$522A07E32AAE90ECCF44084B33D258BB
{
  u32 nameOffset;
  MT_CTSTR pName;
};

union nGUI::FLOW::$5F899E656E4076A8FD78C8C48ECBAA3D
{
  u32 nextIndex;
  nGUI::FLOW *nextAdrs;
  u32 processIndex;
  u32 inputIndex;
  nGUI::FLOW_INPUT *inputAdrs;
  u32 switchIndex;
  nGUI::FLOW_SWITCH *switchAdrs;
  u32 functionIndex;
  nGUI::FLOW_FUNCTION *functionAdrs;
};

struct nGUI::FLOW
{
  u32 id;
  u32 type;
  u32 attr;
  nGUI::FLOW::$522A07E32AAE90ECCF44084B33D258BB _anon_0;
  nGUI::FLOW::$5F899E656E4076A8FD78C8C48ECBAA3D _anon_1;
};

union nGUI::ANIMATION::$522A07E32AAE90ECCF44084B33D258BB
{
  u32 nameOffset;
  MT_CTSTR pName;
};

union nGUI::ANIMATION::$683437FCD7D6C3D294E47DA4381C873F
{
  u32 sequenceIndex;
  nGUI::SEQUENCE *pSequence;
};

struct nGUI::ANIMATION
{
  u32 id;
  unsigned __int32 objectNum : 16;
  unsigned __int32 sequenceNum : 16;
  unsigned __int32 drawableObjectNum : 16;
  unsigned __int32 animateParamNum : 16;
  u32 objectIndex;
  nGUI::ANIMATION::$522A07E32AAE90ECCF44084B33D258BB _anon_0;
  nGUI::ANIMATION::$683437FCD7D6C3D294E47DA4381C873F _anon_1;
};

union nGUI::SEQUENCE::$522A07E32AAE90ECCF44084B33D258BB
{
  u32 nameOffset;
  MT_CTSTR pName;
};

struct nGUI::SEQUENCE
{
  u32 id;
  u32 frameCount;
  nGUI::SEQUENCE::$522A07E32AAE90ECCF44084B33D258BB _anon_0;
};

union nGUI::OBJECT::$522A07E32AAE90ECCF44084B33D258BB
{
  u32 nameOffset;
  MT_CTSTR pName;
};

union nGUI::OBJECT::$CA9F56F811365F875328071BF1B06D43
{
  u32 dtiId;
  const MtDTI *pDti;
};

union nGUI::OBJECT::$65119A45729BE05AAD4C2EAD54D4E1A5
{
  u32 initParamIndex;
  nGUI::INIT_PARAM *pInitParam;
};

union nGUI::OBJECT::$4CBA6585F7F0C19568B10645EEA6EA98
{
  u32 objSequenceIndex;
  nGUI::OBJ_SEQUENCE *pObjSequence;
};

union nGUI::OBJECT::$96DCA98CBD8AE39719E9C55360FE6429
{
  u32 extendDataOffset;
  void *pExtendData;
};

struct nGUI::OBJECT
{
  u32 id;
  unsigned __int32 initParamNum : 8;
  unsigned __int32 animateParamNum : 8;
  unsigned __int32 padding : 16;
  u32 nextIndex;
  u32 childIndex;
  nGUI::OBJECT::$522A07E32AAE90ECCF44084B33D258BB _anon_0;
  nGUI::OBJECT::$CA9F56F811365F875328071BF1B06D43 _anon_1;
  nGUI::OBJECT::$65119A45729BE05AAD4C2EAD54D4E1A5 _anon_2;
  nGUI::OBJECT::$4CBA6585F7F0C19568B10645EEA6EA98 _anon_3;
  nGUI::OBJECT::$96DCA98CBD8AE39719E9C55360FE6429 _anon_4;
};

union nGUI::OBJ_SEQUENCE::$65119A45729BE05AAD4C2EAD54D4E1A5
{
  u32 initParamIndex;
  nGUI::INIT_PARAM *pInitParam;
};

union nGUI::OBJ_SEQUENCE::$BBB4FED98A6137B6AE27FF2AAC8313FF
{
  u32 paramIndex;
  nGUI::PARAM *pParam;
};

struct nGUI::OBJ_SEQUENCE
{
  unsigned __int32 attr : 16;
  unsigned __int32 initParamNum : 8;
  unsigned __int32 paramNum : 8;
  unsigned __int32 loopStart : 16;
  unsigned __int32 frameCount : 16;
  nGUI::OBJ_SEQUENCE::$65119A45729BE05AAD4C2EAD54D4E1A5 _anon_0;
  nGUI::OBJ_SEQUENCE::$BBB4FED98A6137B6AE27FF2AAC8313FF _anon_1;
};

union nGUI::INIT_PARAM::$E89E51221B42DEBEC9E44945B3B0BB28
{
  u32 propNameOffset;
  MT_CTSTR propName;
};

union nGUI::INIT_PARAM::$336BD4B05709BE237F8CD5E0C9B69FAD
{
  u32 valueOffset;
  u8 *pValue;
  bool bValue;
  s32 iValue;
};

struct nGUI::INIT_PARAM
{
  unsigned __int32 paramType : 8;
  const nGUI::PROP_SETTER *pFunc;
  nGUI::INIT_PARAM::$E89E51221B42DEBEC9E44945B3B0BB28 _anon_0;
  nGUI::INIT_PARAM::$336BD4B05709BE237F8CD5E0C9B69FAD _anon_1;
};

union nGUI::PARAM::$E89E51221B42DEBEC9E44945B3B0BB28
{
  u32 propNameOffset;
  MT_CTSTR propName;
};

union nGUI::PARAM::$D6F41A7EB4C2EA56BAE0A1A146ADA1AC
{
  u32 frameOffset;
  nGUI::KEY *keyFrame;
};

union nGUI::PARAM::$CEE8AAA4883ACE20198ACAD7E9B18AAC
{
  u32 valueOffset;
  u8 *keyValue;
};

struct nGUI::PARAM
{
  unsigned __int32 paramType : 8;
  unsigned __int32 keyNum : 9;
  const nGUI::PROP_SETTER *pFunc;
  u32 parentId;
  nGUI::PARAM::$E89E51221B42DEBEC9E44945B3B0BB28 _anon_0;
  nGUI::PARAM::$D6F41A7EB4C2EA56BAE0A1A146ADA1AC _anon_1;
  nGUI::PARAM::$CEE8AAA4883ACE20198ACAD7E9B18AAC _anon_2;
};

union nGUI::INSTANCE::$522A07E32AAE90ECCF44084B33D258BB
{
  u32 nameOffset;
  MT_CTSTR pName;
};

union nGUI::INSTANCE::$CA9F56F811365F875328071BF1B06D43
{
  u32 dtiId;
  const MtDTI *pDti;
};

union nGUI::INSTANCE::$65119A45729BE05AAD4C2EAD54D4E1A5
{
  u32 initParamIndex;
  nGUI::INIT_PARAM *pInitParam;
};

union nGUI::INSTANCE::$96DCA98CBD8AE39719E9C55360FE6429
{
  u32 extendDataOffset;
  void *pExtendData;
};

struct nGUI::INSTANCE
{
  u32 id;
  u32 attr;
  u32 nextIndex;
  u32 childIndex;
  u32 initParamNum;
  nGUI::INSTANCE::$522A07E32AAE90ECCF44084B33D258BB _anon_0;
  nGUI::INSTANCE::$CA9F56F811365F875328071BF1B06D43 _anon_1;
  nGUI::INSTANCE::$65119A45729BE05AAD4C2EAD54D4E1A5 _anon_2;
  nGUI::INSTANCE::$96DCA98CBD8AE39719E9C55360FE6429 _anon_3;
};

union nGUI::FLOW_PROCESS::$E0BD1ABE44F871FABA8A403962355270
{
  u32 nextIndex;
  nGUI::FLOW *nextAdrs;
};

union nGUI::FLOW_PROCESS::$D55CEC643B5E9782A21490609A2F18D9
{
  u32 actionIndex;
  nGUI::ACTION *actionAdrs;
};

struct nGUI::FLOW_PROCESS
{
  unsigned __int32 isLoop : 8;
  unsigned __int32 loopStart : 24;
  u32 totalFrame;
  u32 paramNum;
  u32 paramIndex;
  u32 actionNum;
  u32 endConditionType;
  u32 endConditionParam;
  nGUI::FLOW_PROCESS::$E0BD1ABE44F871FABA8A403962355270 _anon_0;
  nGUI::FLOW_PROCESS::$D55CEC643B5E9782A21490609A2F18D9 _anon_1;
};

union nGUI::FLOW_INPUT::$8184DB09C61578872EAAB1676DC639CE
{
  u32 conditionIndex;
  nGUI::INPUT_CONDITION *conditionAdrs;
};

struct nGUI::FLOW_INPUT
{
  u32 conditionNum;
  nGUI::FLOW_INPUT::$8184DB09C61578872EAAB1676DC639CE _anon_0;
};

union nGUI::FLOW_SWITCH::$58D7E32C74F6EDA46B33BA4012B6C97F
{
  u32 conditionIndex;
  nGUI::SWITCH_CONDITION *conditionAdrs;
};

struct nGUI::FLOW_SWITCH
{
  u32 conditionNum;
  nGUI::FLOW_SWITCH::$58D7E32C74F6EDA46B33BA4012B6C97F _anon_0;
};

union nGUI::FLOW_FUNCTION::$CEC50ABDD73B92237128D68262390560
{
  u32 startIndex;
  nGUI::FLOW *startAdrs;
};

union nGUI::FLOW_FUNCTION::$E0BD1ABE44F871FABA8A403962355270
{
  u32 nextIndex;
  nGUI::FLOW *nextAdrs;
};

struct nGUI::FLOW_FUNCTION
{
  nGUI::FLOW_FUNCTION::$CEC50ABDD73B92237128D68262390560 _anon_0;
  nGUI::FLOW_FUNCTION::$E0BD1ABE44F871FABA8A403962355270 _anon_1;
};

union nGUI::ACTION::$D7908D7649523AB95044974F8F15D877
{
  u32 substitutionIndex;
  s32 value;
};

union nGUI::ACTION::$E89E51221B42DEBEC9E44945B3B0BB28
{
  u32 propNameOffset;
  MT_CTSTR propName;
};

struct nGUI::ACTION
{
  u32 type;
  u32 objectIndex;
  nGUI::ACTION::$D7908D7649523AB95044974F8F15D877 _anon_0;
  nGUI::ACTION::$E89E51221B42DEBEC9E44945B3B0BB28 _anon_1;
};

union nGUI::INPUT_CONDITION::$E0BD1ABE44F871FABA8A403962355270
{
  u32 nextIndex;
  nGUI::FLOW *nextAdrs;
};

struct nGUI::INPUT_CONDITION
{
  nGUI::INPUT_CONDITION::$E0BD1ABE44F871FABA8A403962355270 _anon_0;
};

struct nGUI::SWITCH_OPERATOR
{
  s32 value;
  u32 operatorType;
  u32 objectIndex;
};

union nGUI::SWITCH_CONDITION::$E0BD1ABE44F871FABA8A403962355270
{
  u32 nextIndex;
  nGUI::FLOW *nextAdrs;
};

union nGUI::SWITCH_CONDITION::$3D6485A4C4D956BA683D9A4943711711
{
  u32 operatorIndex;
  nGUI::SWITCH_OPERATOR *operatorAdrs;
};

struct nGUI::SWITCH_CONDITION
{
  u32 type;
  u32 operatorNum;
  nGUI::SWITCH_CONDITION::$E0BD1ABE44F871FABA8A403962355270 _anon_0;
  nGUI::SWITCH_CONDITION::$3D6485A4C4D956BA683D9A4943711711 _anon_1;
};

union nGUI::VARIABLE::$522A07E32AAE90ECCF44084B33D258BB
{
  u32 nameOffset;
  MT_CTSTR pName;
};

union nGUI::VARIABLE::$CA9F56F811365F875328071BF1B06D43
{
  u32 dtiId;
  const MtDTI *pDti;
};

union nGUI::VARIABLE::$D9C882F664C8CBC8A6968F3FF71BCF88
{
  s32 iInit;
  f32 fInit;
};

union nGUI::VARIABLE::$DD7E201182E80E4B1BFBF0F4AFAD6638
{
  s32 iMin;
  f32 fMin;
};

union nGUI::VARIABLE::$3FE5149C01F071D8BACFDC585401CEFA
{
  s32 iMax;
  f32 fMax;
};

struct __attribute__((aligned(8))) nGUI::VARIABLE
{
  u32 id;
  unsigned __int32 isLoopValue : 1;
  nGUI::VARIABLE::$522A07E32AAE90ECCF44084B33D258BB _anon_0;
  nGUI::VARIABLE::$CA9F56F811365F875328071BF1B06D43 _anon_1;
  nGUI::VARIABLE::$D9C882F664C8CBC8A6968F3FF71BCF88 _anon_2;
  nGUI::VARIABLE::$DD7E201182E80E4B1BFBF0F4AFAD6638 _anon_3;
  nGUI::VARIABLE::$3FE5149C01F071D8BACFDC585401CEFA _anon_4;
};

union nGUI::TEXTURE::$DEFBEFD1A517B77BF1C5CBA242A20E0E
{
  uintptr pathOffset;
  MT_CTSTR path;
};

union nGUI::TEXTURE::$BA5A38F3D364CBFA8F67A59F77FB397C
{
  uintptr nameOffset;
  MT_CTSTR pName;
};

struct nGUI::TEXTURE
{
  u32 id;
  unsigned __int32 rtype : 2;
  unsigned __int32 resize : 1;
  unsigned __int64 : 29;
  __int32 l : 16;
  __int32 t : 16;
  __int32 r : 16;
  __int32 b : 16;
  f32 clamp[4];
  f32 invSize[2];
  rTexture *pTexture;
  nGUI::TEXTURE::$DEFBEFD1A517B77BF1C5CBA242A20E0E _anon_0;
  nGUI::TEXTURE::$BA5A38F3D364CBFA8F67A59F77FB397C _anon_1;
};

union nGUI::FONT::$664A848F04479701A1D98F3807E82F44
{
  u32 pathOffset;
  MT_CTSTR path;
};

struct nGUI::FONT
{
  u32 id;
  rGUIFont *pFont;
  nGUI::FONT::$664A848F04479701A1D98F3807E82F44 _anon_0;
};

union nGUI::MESSAGE::$664A848F04479701A1D98F3807E82F44
{
  u32 pathOffset;
  MT_CTSTR path;
};

struct nGUI::MESSAGE
{
  u32 id;
  void *pMessage;
  nGUI::MESSAGE::$664A848F04479701A1D98F3807E82F44 _anon_0;
};

union nGUI::GUIRESOURCE::$664A848F04479701A1D98F3807E82F44
{
  u32 pathOffset;
  MT_CTSTR path;
};

struct nGUI::GUIRESOURCE
{
  u32 id;
  void *pResource;
  nGUI::GUIRESOURCE::$664A848F04479701A1D98F3807E82F44 _anon_0;
};

union nGUI::GENERALRESOURCE::$664A848F04479701A1D98F3807E82F44
{
  u32 pathOffset;
  MT_CTSTR path;
};

struct nGUI::GENERALRESOURCE
{
  u32 id;
  u32 dtiId;
  void *pResource;
  nGUI::GENERALRESOURCE::$664A848F04479701A1D98F3807E82F44 _anon_0;
};

typedef u32 nGUI::CAMERA_SETTING_ID;

union nGUI::CAMERA_SETTING::$522A07E32AAE90ECCF44084B33D258BB
{
  u32 nameOffset;
  MT_CTSTR pName;
};

struct nGUI::CAMERA_SETTING
{
  nGUI::CAMERA_SETTING_ID id;
  f32 nearPlane;
  f32 farPlane;
  MtFloat3 cameraPos;
  MtFloat3 targetPos;
  MtFloat3 cameraUp;
  nGUI::CAMERA_SETTING::$522A07E32AAE90ECCF44084B33D258BB _anon_0;
};

union nGUI::KEY::$95BF87242FF82DA991524CCC6E1E2ECB
{
  u32 curveOffset;
  MtHermiteCurve *pCurve;
};

struct nGUI::KEY
{
  unsigned __int32 frame : 24;
  unsigned __int32 mode : 8;
  nGUI::KEY::$95BF87242FF82DA991524CCC6E1E2ECB _anon_0;
};

struct nGUI::VERTEX
{
  f32 x;
  f32 y;
  f32 z;
  u32 color;
  f32 u;
  f32 v;
};

struct __cppobj sGUI::MyDTI : MtDTI
{
};

struct __attribute__((aligned(4))) sGUI::DESC
{
  u32 mMTAGCount;
  u32 mVertexBuffer;
  u32 mIndexBuffer;
  bool mInitDefaultWrapPoint;
};

struct __cppobj rGUIFont::MyDTI : MtDTI
{
};

struct __cppobj rTexture::MyDTI : MtDTI
{
};

struct __cppobj MtArray::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) cDraw::GEOM_STATE
{
  nDraw::VertexBuffer *pvbuf[4];
  u8 stride[4];
  u32 offset[4];
  bool instance[4];
  nDraw::IndexBuffer *pibuf;
  u32 modified;
};

struct cDraw::VIEWPORT
{
  MtRect r[4];
  u32 count;
};

struct __attribute__((aligned(8))) cDraw::TARGET_STATE
{
  nDraw::RenderTargetView *ptargets[4];
  nDraw::DepthStencilView *pdepthstencil;
  unsigned __int32 num : 3;
  unsigned __int32 modified : 1;
  unsigned __int32 rtflags : 12;
  unsigned __int32 reserved : 16;
  cDraw::VIEWPORT viewport;
  MtRect rviewport;
  MtRect scissor;
  MtRect rscissor;
  unsigned __int32 target_width : 16;
  unsigned __int32 target_height : 16;
};

struct cDraw::DRAW_STATE
{
  MtColor blendfactor;
  unsigned __int32 stencilref : 8;
  unsigned __int32 clockwise : 1;
  unsigned __int32 scull : 2;
  unsigned __int32 dbtest : 1;
  unsigned __int32 modified : 20;
  nDraw::BlendState *pbstate;
  nDraw::DepthStencilState *pdstate;
  nDraw::RasterizerState *prstate;
};

struct cDraw::SHADER_STATE
{
  unsigned __int32 modified : 1;
  unsigned __int32 modifiedcrc : 1;
  unsigned __int32 atc : 1;
  unsigned __int32 atest_func : 8;
  unsigned __int32 atest_ref : 8;
  unsigned __int32 atest_rop : 1;
  unsigned __int32 atest_enable : 1;
  unsigned __int32 topology : 8;
  unsigned __int32 padd : 3;
  unsigned __int32 tech_index : 16;
  unsigned __int32 tech_pass : 16;
  const nDraw::SHADER *pshader;
  void *resources[1];
};

struct cDraw::MISC_STATE
{
  MtFloat3 lod_base_pos;
  unsigned __int32 occ_no : 7;
  unsigned __int32 occ_autoupdate : 1;
  unsigned __int32 auto_zpass : 1;
  unsigned __int32 disable_gbuffer : 1;
  unsigned __int32 disable_stretch : 1;
  unsigned __int32 limit_detect : 1;
  unsigned __int32 shader_faild : 1;
  unsigned __int32 reserved : 20;
};

struct cDraw::CONTEXT
{
  cDraw::TARGET_STATE tstate;
  cDraw::DRAW_STATE dstate;
  cDraw::GEOM_STATE gstate;
  cDraw::SHADER_STATE sstate;
  unsigned __int32 pass : 5;
  unsigned __int32 priority : 27;
  unsigned __int32 view : 8;
  unsigned __int32 techpass : 8;
  unsigned __int32 drawmode : 16;
  unsigned __int32 drawmask_and : 16;
  unsigned __int32 drawmask_equal : 16;
  u32 encode_targets;
  u32 convert_type;
  unsigned __int32 override_pass : 5;
  unsigned __int32 pri_ofs : 27;
  f32 transparency;
  uintptr cacheId;
  bool limit_enable;
  u32 limit_begin;
  u32 limit_end;
  cDraw::MISC_STATE mstate;
  cDraw::DRAW_STATE *pdstate;
  cDraw::SHADER_STATE *psstate;
  cDraw::GEOM_STATE *pgstate;
  cDraw::TARGET_STATE *ptstate;
  cDraw::SHADER_STATE *pzsstate;
  cDraw::TARGET_STATE *pztstate;
  cDraw::DRAW_STATE *pzdstate;
  cDraw::SHADER_STATE *pbf_zsstate;
  cDraw::TARGET_STATE *pbf_ztstate;
  cDraw::DRAW_STATE *pbf_zdstate;
  SO_HANDLE layouts[4];
  SO_HANDLE technique;
  SO_HANDLE dmytechnique;
  nDraw::Scene *pscene;
  nDraw::RenderTargetView *pztarget;
  nDraw::DepthStencilView *pzdepthstencil;
  void *pglobalcb[6];
  nDraw::SHADER_STATE states[4096];
};

struct __attribute__((aligned(8))) cDraw::BRANCH_STATE
{
  MT_CTSTR name;
  u32 tag_pt;
};

struct cDraw::STATE_CUE
{
  unsigned __int32 index : 31;
  unsigned __int32 layout : 1;
  nDraw::SHADER_STATE state;
};

struct __cppobj __attribute__((aligned(8))) cDraw : MtObject
{
  u32 mObjectNum;
  const nDraw::OBJECT **mpObjects;
  const nDraw::OBJECT_INFO *mObjectInfos;
  const nDraw::SHADER_STATE *mDefaultStates;
  u8 *mpBuffer;
  u8 *mpBufferEnd;
  u8 *mpVBuffer;
  u8 *mpVBufferTop;
  u8 *mpVBufferEnd;
  u16 *mpIBuffer;
  u16 *mpIBufferTop;
  u16 *mpIBufferEnd;
  cDraw::TAG *mTags;
  u32 mTagNum;
  u32 mMaxTag;
  u32 mTagSize;
  cDraw::TAG *mTempTags;
  u32 mJobThreadIndex;
  u32 mES;
  u32 mDrawTagPt;
  u32 mMaterialTagPt;
  u32 mMaterialPass;
  u32 mStateCuePt;
  u32 mCacheTag;
  u32 mCachePt;
  nDraw::Material *mpMaterial;
  cDraw::GEOM_STATE mGStateUP;
  u32 mVertexStartUP;
  cDraw::GEOM_STATE *mpGStateUP;
  cDraw::CONTEXT mContext;
  cDraw::CONTEXT mContextStack[5];
  cDraw::BRANCH_STATE mBranchStack[5];
  u32 mStackPt;
  cDraw::CMD_BRANCH *mpBranches[1024];
  u32 mBranchNum;
  cDraw::STATE_CUE mStateCue[8192];
  u32 mTotalTagNum;
};

struct __cppobj __attribute__((aligned(8))) cDraw::CMD_BRANCH : cDraw::CMD
{
  MT_CTSTR name;
  cDraw::TAG *tags;
  u32 tag_num;
};

struct __cppobj cDraw::MyDTI : MtDTI
{
};

struct cDraw::SORT_WORK
{
  cDraw::TAG *tags;
  u32 tag_num;
  cDraw::TAG *dtags;
};

struct cDraw::MARGE_WORK
{
  cDraw::SORT_WORK *sorts;
  u32 sort_num;
  cDraw::TAG *dtags;
};

typedef u32 SV_HANDLE;

typedef u32 SS_HANDLE;

union cGUIMessageAnalyzer::$D408C799C118B6A4D9DBAEA2B631EEF5
{
  cGUIInstMessage *mpInstance;
  cGUIObjMessage *mpObject;
};

enum nGUI::GENDER : __int32
{
  GENDER_UNSPECIFIED = 0x0,
  GENDER_MALE = 0x1,
  GENDER_FEMALE = 0x2,
};

struct __cppobj __attribute__((aligned(8))) cGUIMessageAnalyzer : MtObject
{
  nGUI::MTAG *mpMTag;
  u32 mError;
  s32 mCurPageIndex;
  cGUIMessageAnalyzer::$D408C799C118B6A4D9DBAEA2B631EEF5 _anon_0;
  f32 mMsgWidth;
  f32 mMsgHeight;
  u32 mMode;
  u32 mAttr;
  s32 mPageIndex;
  u32 mLineCharCount;
  u32 mState;
  f32 mWidth;
  f32 mHeight;
  f32 mLetterSpace;
  f32 mRubyHeight;
  nGUI::MTAG *mpMTagTop;
  nGUI::MTAG *mpMTagLine;
  nGUI::MTAG *mpMTagTemp;
  nGUI::MTAG *mpMTagRuby;
  nGUI::MTAG *mpMTagRubyRB;
  nGUI::MTAG *mpMTagRubyRT;
  nGUI::MTAG *mpFontStack;
  nGUI::MTAG *mpSizeStack;
  nGUI::MTAG *mpColorStack;
  nGUI::MTAG *mpRGBStack;
  nGUI::MTAG *mpSpeedStack;
  nGUI::GENDER mSpeakerGender;
  nGUI::GENDER mListenerGender;
  bool mIsIgnoreMessage;
};

struct __cppobj cGUIInstance : MtObject
{
  u32 mId;
  u32 mPriority;
  MtMatrix mMat;
  bool mIsDeleteChild;
  u32 mDuplicateId;
  u32 mAttr;
  unsigned __int32 mDrawView : 16;
  unsigned __int32 mInitParamNum : 16;
  nGUI::INIT_PARAM *mpInitParam;
  cGUIInstance *mpChild;
  cGUIInstance *mpNext;
  cGUIInstance *mpParent;
  uGUI *mpUnit;
  rGUI *mpResource;
};

struct __cppobj cGUIInstNull : cGUIInstance
{
  unsigned __int32 mDrawPass : 4;
  unsigned __int32 mDepthState : 4;
  unsigned __int32 mAlignment : 4;
  unsigned __int32 mColorControl : 4;
  unsigned __int32 mResolutionAdjust : 4;
  unsigned __int32 mParentResolutionAdjust : 4;
  unsigned __int32 mReferencePosition : 1;
  unsigned __int32 mReferenceRotation : 1;
  unsigned __int32 mReferenceScaleX : 2;
  unsigned __int32 mReferenceScaleY : 2;
  unsigned __int32 mReferenceScaleZ : 2;
  MtColor mAmbientColor;
  __attribute__((aligned(16))) MtVector4 mColorScale;
  MtVector4 mPosition;
  MtVector4 mScale;
  MtVector4 mRotation;
};

struct __cppobj __attribute__((aligned(16))) cGUIInstMessage : cGUIInstNull
{
  nGUI::MTAG *mpMTag;
  nGUI::MTAG *mpDrawMTag;
  f32 mMsgWidth;
  f32 mMsgHeight;
  u32 mError;
  MtColor mColor;
  MtSize mFontSize;
  MtFloat2 mSize;
  nGUI::BufferObject mVertexObject;
  nGUI::BufferObject mIndexObject;
  u32 mMsgAttr;
  u32 mFontSlot;
  unsigned __int32 mLayout : 8;
  unsigned __int32 mLetterHAlign : 2;
  unsigned __int32 mLetterVAlign : 2;
  unsigned __int32 mSamplerState : 4;
  unsigned __int32 mIconColorType : 2;
  unsigned __int32 mAutoWrap : 2;
  unsigned __int32 mBillboard : 4;
  unsigned __int32 padding : 8;
  __int32 mLineSpace : 16;
  __int32 mLetterSpace : 16;
  u32 mMessageId;
  MT_CTSTR mpMessageIndexName;
  u32 mFontFilterId[2];
  nGUI::BufferObject mFFVertexObject[2];
  nGUI::BufferObject mFFIndexObject[2];
  nGUI::MTAG *mpFFDrawMTag[2];
};

struct __cppobj cGUIObject : MtObject
{
  __attribute__((aligned(16))) MtMatrix mMat;
  u32 mId;
  u32 mAttr;
  f32 mCurrentFrame;
  unsigned __int32 mFrameCount : 16;
  unsigned __int32 mLoopStartFrame : 16;
  unsigned __int32 mPriority : 16;
  unsigned __int32 mParentResolutionAdjust : 4;
  unsigned __int32 mAnimateParamNum : 8;
  unsigned __int32 mDeleteChild : 1;
  nGUI::PARAM_WORK *mpParamWork;
  cGUIObject *mpChild;
  cGUIObject *mpNext;
  cGUIObject *mpParent;
  uGUI *mpUnit;
  rGUI *mpResource;
  nGUI::OBJECT *mpObjectInfo;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(8))) cGUIObj2D:1600 : cGUIObject
{
  MtVector4 mPosition;
  MtVector4 mRotation;
  unsigned __int32 mControlPoint : 4;
  unsigned __int32 mReferencePosition : 1;
  unsigned __int32 mReferenceRotation : 1;
  unsigned __int32 mReferenceScaleX : 2;
  unsigned __int32 mReferenceScaleY : 2;
  unsigned __int32 mReferenceScaleZ : 2;
  unsigned __int32 padding : 20;
};

struct __cppobj __attribute__((aligned(16))) cGUIObjMessage : cGUIObj2D:1600
{
  nGUI::MTAG *mpMTag;
  nGUI::MTAG *mpDrawMTag;
  f32 mMsgWidth;
  f32 mMsgHeight;
  u32 mError;
  MtColor mColor;
  MtSize mFontSize;
  MtFloat2 mSize;
  nGUI::BufferObject mVertexObject;
  nGUI::BufferObject mIndexObject;
  u32 mMsgAttr;
  u32 mFontSlot;
  unsigned __int32 mLayout : 8;
  unsigned __int32 mLetterHAlign : 2;
  unsigned __int32 mLetterVAlign : 2;
  unsigned __int32 mSamplerState : 4;
  unsigned __int32 mIconColorType : 2;
  unsigned __int32 mAutoWrap : 2;
  unsigned __int32 mResolutionAdjust : 4;
  __int32 mLineSpace : 16;
  __int32 mLetterSpace : 16;
  u32 mMessageId;
  MT_CTSTR mpMessageIndexName;
  u32 mFontFilterId[2];
  nGUI::BufferObject mFFVertexObject[2];
  nGUI::BufferObject mFFIndexObject[2];
  nGUI::MTAG *mpFFDrawMTag[2];
  unsigned __int32 mOldSamplerState : 4;
  unsigned __int32 mSamplerChangeFlag : 1;
  unsigned __int32 mSamplerPadding : 27;
};

struct cUnit::$D072F259438E37C4D97517D59DB2E9A9::$E92EBFFBC43FAA0E7B715B8C6ED7721C
{
  unsigned __int32 mRno0 : 8;
  unsigned __int32 mRno1 : 8;
  unsigned __int32 mRno2 : 8;
  unsigned __int32 mRno3 : 8;
};

union cUnit::$D072F259438E37C4D97517D59DB2E9A9
{
  u32 mRno;
  cUnit::$D072F259438E37C4D97517D59DB2E9A9::$E92EBFFBC43FAA0E7B715B8C6ED7721C _anon_0;
};

struct __cppobj cUnit : MtObject
{
  cUnit::$D072F259438E37C4D97517D59DB2E9A9 _anon_0;
  u32 mUnitParam;
  unsigned __int32 mBeFlag : 3;
  unsigned __int32 mMoveLine : 7;
  unsigned __int32 mUnitAttr : 6;
  unsigned __int32 mDrawView : 10;
  u32 mDrawMode;
  cUnit *mpNextUnit;
  cUnit *mpPrevUnit;
  f32 mDeltaTime;
  u64 mUnitGroup;
  u32 padding[2];
};

struct __cppobj uCoord : cUnit
{
  uCoord *mpParent;
  s32 mParentNo;
  unsigned __int32 mOrder : 16;
  unsigned __int32 mParentFlags : 16;
  MtVector3 mPos;
  MtQuaternion mQuat;
  MtVector3 mScale;
  MtMatrix mLmat;
  MtMatrix mWmat;
};

struct __cppobj MtTypedArray<cGUIInstance> : MtArray
{
};

struct __cppobj MtTypedArray<cGUIObject> : MtArray
{
};

struct __cppobj MtTypedArray<cGUIVariable> : MtArray
{
};

struct std::_Container_base0
{
  std::_Container_proxy *_Myproxy;
};

typedef std::_Container_base0 std::_Container_base;

typedef uGUI::DuplicateBuffer std::_Simple_types<value_type>::value_type_0;

typedef std::_Simple_types<value_type>::value_type_0 *std::_Simple_types<value_type>::pointer_0;

typedef std::_Simple_types<value_type>::pointer_0 std::_Vector_val<_Val_types>::pointer;

struct __cppobj std::_Vector_val<_Val_types> : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer _Myfirst;
  std::_Vector_val<_Val_types>::pointer _Mylast;
  std::_Vector_val<_Val_types>::pointer _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > > : std::_Vector_val<_Val_types>
{
};

struct __cppobj std::vector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > : std::_Vector_alloc<false,std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > >
{
};

struct __cppobj MtStlVector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > : std::vector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >
{
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> > > : std::_Vector_val<_Val_types>
{
};

struct __cppobj std::vector<unsigned int,MtStlAllocator<unsigned int> > : std::_Vector_alloc<false,std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> > >
{
};

struct __cppobj MtStlVector<u32,MtStlAllocator<unsigned int> > : std::vector<unsigned int,MtStlAllocator<unsigned int> >
{
};

struct __cppobj __attribute__((aligned(16))) uGUI : uCoord
{
  rGUI *mpResource;
  cGUIInstRoot *mpInstanceRoot;
  cGUIInstance **mpInstanceList;
  u8 *mpBatchMemAlloc;
  cGUIInstNull *mpInstanceNullList;
  cGUIInstScissorMask *mpInstanceScissorMaskList;
  cGUIInstAnimation *mpInstanceAnimationList;
  cGUIInstAnimVariable *mpInstanceAnimVariableList;
  cGUIInstAnimControl *mpInstanceAnimControlList;
  MtTypedArray<cGUIInstance> mUnknownInstanceArray;
  u32 mInstanceNullUseCount;
  u32 mInstanceScissorMaskUseCount;
  u32 mInstanceAnimationUseCount;
  u32 mInstanceAnimVariableUseCount;
  u32 mInstanceAnimControlUseCount;
  cGUIObjText *mpObjTextList;
  cGUIObjMessage *mpObjMessageList;
  cGUIObjChildAnimationRoot *mpObjChildAnimationRootList;
  cGUIObjNull *mpObjNullList;
  cGUIObjTextureSet *mpObjTextureSetList;
  cGUIObjTexture *mpObjTextureList;
  cGUIObjPolygon *mpObjPolygonList;
  cGUIObjScissorMask *mpObjScissorMaskList;
  cGUIObjColorAdjust *mpObjColorAdjustList;
  cGUIObjRoot *mpObjRootList;
  u8 *mpDuplicateMemAllocBuffer;
  u32 mDuplicateMemAllocBufferUsePosition;
  MtTypedArray<cGUIObject> mUnknownObjectArray;
  u32 mGUIObjTextUseCount;
  u32 mGUIObjMessageUseCount;
  u32 mGUIObjChildAnimationRootUseCount;
  u32 mGUIObjNullUseCount;
  u32 mGUIObjTextureSetUseCount;
  u32 mGUIObjTextureUseCount;
  u32 mGUIObjPolygonUseCount;
  u32 mGUIObjScissorMaskUseCount;
  u32 mGUIObjColorAdjustUseCount;
  u32 mGUIObjRootUseCount;
  cGUIVarInt *mpVarIntList;
  cGUIVarFloat *mpVarFloatList;
  MtTypedArray<cGUIVariable> mUnknownVariableArray;
  u32 mVarIntUseCount;
  u32 mVarFloatUseCount;
  MtStlVector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > mDuplicateBufferArray;
  MtStlVector<u32,MtStlAllocator<unsigned int> > mDuplicateBufferNoUseIndexArray;
  u32 mDuplicatingBufferIndex;
  bool mIsPlacementNewMode;
  u32 mProcessWorkNum;
  nGUI::PROCESS_WORK *mpProcessWork;
  nGUI::PARAM_WORK *mpProcessParamWork;
  nGUI::PARAM_WORK *mpInstExeParam;
  f32 mFramerate;
  f32 mPlayTime;
  f32 mPlayTimeOld;
  f32 mFlowFrame;
  f32 mFlowFrameOld;
  nGUI::FLOW *mpPlayingFlow;
  u32 mStackCount;
  nGUI::FLOW *mpStack[8];
  u32 mAttr;
  u32 mPriority;
  u32 mScreenLayer;
  unsigned __int32 mStencilRef : 8;
  u32 mInstanceId;
  u32 mFlowId;
  u32 mVariableId;
  s32 mProcessVariable;
  MtRect mViewSize;
  MtVector2 mAlignmentPosition[10];
  MtVector2 mResolutionAdjustScale[11];
  MtArray mVariableArray;
};

struct nGUI::PARAM_WORK
{
  nGUI::PARAM *pParam;
  u32 currentKey;
  MtObject *pOwner;
};

struct __cppobj cGUIInstRoot : cGUIInstance
{
};

struct __cppobj cGUIInstScissorMask : cGUIInstNull
{
  unsigned __int32 mEnableScissor : 1;
  unsigned __int32 mUpdateSize : 1;
  unsigned __int32 mEnabledScissor : 1;
  MtSize mSize;
  MtRect mScissorRect;
  MtRect mParentScissorRect;
};

struct __cppobj __attribute__((aligned(16))) cGUIInstAnimation : cGUIInstNull
{
  f32 mCurrentFrame;
  f32 mStopFrame;
  unsigned __int32 mMaskType : 4;
  unsigned __int32 mBillboard : 4;
  unsigned __int32 mFoundation : 1;
  unsigned __int32 mDeleteGUIObject : 1;
  unsigned __int32 mDelete_pObjectBuffer : 1;
  unsigned __int32 padding : 21;
  f32 mSpeed;
  u32 mResourceId;
  u32 mAnimationId;
  cGUIObject **mpObject;
  cGUIObjRoot *mpObjRoot;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(8))) cGUIInstAnimation:2112 : cGUIInstNull
{
  f32 mCurrentFrame;
  f32 mStopFrame;
  unsigned __int32 mMaskType : 4;
  unsigned __int32 mBillboard : 4;
  unsigned __int32 mFoundation : 1;
  unsigned __int32 mDeleteGUIObject : 1;
  unsigned __int32 mDelete_pObjectBuffer : 1;
  unsigned __int32 padding : 21;
  f32 mSpeed;
  u32 mResourceId;
  u32 mAnimationId;
  cGUIObject **mpObject;
  cGUIObjRoot *mpObjRoot;
};

struct __cppobj __attribute__((aligned(16))) cGUIInstAnimVariable : cGUIInstAnimation:2112
{
  u32 mVariableId;
  cGUIVariable *mpVariable;
};

struct __cppobj cGUIInstAnimVariable:2240 : cGUIInstAnimation:2112
{
  u32 mVariableId;
  cGUIVariable *mpVariable;
};

struct __cppobj __attribute__((aligned(16))) cGUIInstAnimControl : cGUIInstAnimVariable:2240
{
  u32 mAnimSectionNum;
  s32 mNowValue;
  f32 mSectionCurrentFrame;
  bool mUseSequence;
  nGUI::ANIM_SECTION *mpAnimSection;
  nGUI::ANIM_SECTION *mpNowAnimSection;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) cGUIObjMessage:3616 : cGUIObj2D:1600
{
  _BYTE gapC4[4];
  nGUI::MTAG *mpMTag;
  nGUI::MTAG *mpDrawMTag;
  f32 mMsgWidth;
  f32 mMsgHeight;
  u32 mError;
  MtColor mColor;
  MtSize mFontSize;
  MtFloat2 mSize;
  nGUI::BufferObject mVertexObject;
  nGUI::BufferObject mIndexObject;
  u32 mMsgAttr;
  u32 mFontSlot;
  unsigned __int32 mLayout : 8;
  unsigned __int32 mLetterHAlign : 2;
  unsigned __int32 mLetterVAlign : 2;
  unsigned __int32 mSamplerState : 4;
  unsigned __int32 mIconColorType : 2;
  unsigned __int32 mAutoWrap : 2;
  unsigned __int32 mResolutionAdjust : 4;
  unsigned __int32 : 8;
  __int32 mLineSpace : 16;
  __int32 mLetterSpace : 16;
  u32 mMessageId;
  _BYTE gap13C[4];
  MT_CTSTR mpMessageIndexName;
  u32 mFontFilterId[2];
  nGUI::BufferObject mFFVertexObject[2];
  nGUI::BufferObject mFFIndexObject[2];
  nGUI::MTAG *mpFFDrawMTag[2];
  unsigned __int32 mOldSamplerState : 4;
  unsigned __int32 mSamplerChangeFlag : 1;
  unsigned __int32 mSamplerPadding : 27;
};

struct __cppobj cGUIObjText : cGUIObjMessage:3616
{
  u32 mTextAttr;
  f32 mTypingSpeed;
  u32 mCondition;
  f32 mTextCurrentFrame;
  f32 mNowTypingSpeed;
  u32 mDrawCharNum;
  nGUI::MTAG *mpStartMTag;
  nGUI::MTAG *mpNowMTag;
};

struct __cppobj __attribute__((aligned(16))) cGUIObj2D : cGUIObject
{
  MtVector4 mPosition;
  MtVector4 mRotation;
  unsigned __int32 mControlPoint : 4;
  unsigned __int32 mReferencePosition : 1;
  unsigned __int32 mReferenceRotation : 1;
  unsigned __int32 mReferenceScaleX : 2;
  unsigned __int32 mReferenceScaleY : 2;
  unsigned __int32 mReferenceScaleZ : 2;
  unsigned __int32 padding : 20;
};

struct __cppobj cGUIObjNull : cGUIObj2D
{
  __attribute__((aligned(16))) MtVector4 mScale;
};

struct __cppobj __attribute__((aligned(8))) cGUIObjChildAnimationRoot : cGUIObjNull
{
  unsigned __int32 mChildAnimPlay : 1;
  unsigned __int32 mDelete_pObjectBuffer : 1;
  unsigned __int32 padding : 30;
  u32 mSequenceId;
  cGUIObject **mpObject;
  cGUIObjRoot *mpChildRoot;
  f32 mChildAnimCurrentFrame;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) cGUIObj2D:1568 : cGUIObject
{
  MtVector4 mPosition;
  MtVector4 mRotation;
  unsigned __int32 mControlPoint : 4;
  unsigned __int32 mReferencePosition : 1;
  unsigned __int32 mReferenceRotation : 1;
  unsigned __int32 mReferenceScaleX : 2;
  unsigned __int32 mReferenceScaleY : 2;
  unsigned __int32 mReferenceScaleZ : 2;
  unsigned __int32 padding : 20;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) cGUIObjPolygon:2016 : cGUIObj2D:1568
{
  MtColor mColor[4];
  MtFloat2 mSize;
  _BYTE gapDC[4];
  nGUI::BufferObject mVertexObject;
  unsigned __int32 mMaskType : 4;
  unsigned __int32 mBlendState : 8;
  unsigned __int32 mPolygonAttr : 16;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) cGUIObjTexture:2528 : cGUIObjPolygon:2016
{
  u32 mTextureId;
  nGUI::TEXTURE *mpTexture;
  unsigned __int32 mSamplerState : 4;
  unsigned __int32 mTiling : 2;
  unsigned __int32 mPadding : 26;
  MtFloat4 mTextureRect;
  _BYTE gap11C[4];
  nGUI::BufferObject mIndexObject;
  unsigned __int32 mOldSamplerState : 4;
  unsigned __int32 mSamplerChangeFlag : 1;
  unsigned __int32 mSamplerPadding : 27;
};

struct __cppobj __attribute__((aligned(16))) cGUIObjTextureSet : cGUIObjTexture:2528
{
  u32 mDataNum;
  cGUIObjTextureSet::DATA *mpData;
  u32 mVertexBufferOffset;
  nDraw::VertexBuffer *mpVertexBuffer;
};

struct __cppobj __attribute__((aligned(8))) cGUIObjTexture : cGUIObjPolygon:2016
{
  u32 mTextureId;
  nGUI::TEXTURE *mpTexture;
  unsigned __int32 mSamplerState : 4;
  unsigned __int32 mTiling : 2;
  unsigned __int32 mPadding : 26;
  MtFloat4 mTextureRect;
  nGUI::BufferObject mIndexObject;
  unsigned __int32 mOldSamplerState : 4;
  unsigned __int32 mSamplerChangeFlag : 1;
  unsigned __int32 mSamplerPadding : 27;
};

struct __cppobj __attribute__((aligned(8))) cGUIObjPolygon : cGUIObj2D:1568
{
  MtColor mColor[4];
  MtFloat2 mSize;
  nGUI::BufferObject mVertexObject;
  unsigned __int32 mMaskType : 4;
  unsigned __int32 mBlendState : 8;
  unsigned __int32 mPolygonAttr : 16;
};

struct __cppobj cGUIObjScissorMask : cGUIObj2D:1568
{
  unsigned __int32 mEnableScissor : 1;
  unsigned __int32 mUpdateSize : 1;
  unsigned __int32 mEnabledScissor : 1;
  MtSize mSize;
  MtRect mScissorRect;
  MtRect mParentScissorRect;
};

struct __cppobj cGUIObjColorAdjust : cGUIObject
{
  unsigned __int32 mColorControl : 4;
  unsigned __int32 padding : 28;
  MtColor mAmbientColor;
  __attribute__((aligned(16))) MtVector4 mColorScale;
};

struct __cppobj __attribute__((aligned(16))) cGUIObjRoot : cGUIObject
{
  nGUI::DRAW_LIST *mpDrawList;
  u32 mInstanceId;
  u32 mAnimationId;
  u32 mRootAttr;
  u32 mSequenceNum;
  nGUI::SEQUENCE *mpPlayingSequence;
  nGUI::SEQUENCE *mpSequence;
  nGUI::ANIMATION *mpAnimation;
  cGUIObject **mpObject;
  nGUI::PARAM_WORK *mpParamWorkTop;
  bool mIsDeleteParamWorkTop;
};

struct __cppobj cGUIVariable : MtObject
{
  u32 mId;
  unsigned __int32 mAttr : 16;
  unsigned __int32 mUpdate : 1;
  unsigned __int32 padding : 15;
  MT_CTSTR mpName;
};

struct __cppobj __attribute__((aligned(8))) cGUIVarInt : cGUIVariable
{
  s32 mValue;
  s32 mOldValue;
  s32 mInitValue;
  s32 mMaxValue;
  s32 mMinValue;
};

struct __cppobj __attribute__((aligned(8))) cGUIVarFloat : cGUIVariable
{
  f32 mValue;
  f32 mOldValue;
  f32 mInitValue;
  f32 mMaxValue;
  f32 mMinValue;
};

struct std::_Container_proxy
{
  const std::_Container_base12 *_Mycont;
  std::_Iterator_base12 *_Myfirstiter;
};

struct uGUI::DuplicateBuffer
{
  cGUIInstance *pDuplicateInstance;
  u8 *pBatchMemAlloc;
  cGUIObjText *pObjTextList;
  cGUIObjMessage *pObjMessageList;
  cGUIObjChildAnimationRoot *pObjChildAnimationRootList;
  cGUIObjNull *pObjNullList;
  cGUIObjTextureSet *pObjTextureSetList;
  cGUIObjTexture *pObjTextureList;
  cGUIObjPolygon *pObjPolygonList;
  cGUIObjScissorMask *pObjScissorMaskList;
  cGUIObjColorAdjust *pObjColorAdjustList;
  cGUIObjRoot *pObjRootList;
  u8 *pDuplicateMemAllocBuffer;
  u16 guiObjTextUseCount;
  u16 guiObjMessageUseCount;
  u16 guiObjChildAnimationRootUseCount;
  u16 guiObjNullUseCount;
  u16 guiObjTextureSetUseCount;
  u16 guiObjTextureUseCount;
  u16 guiObjPolygonUseCount;
  u16 guiObjScissorMaskUseCount;
  u16 guiObjColorAdjustUseCount;
  u16 guiObjRootUseCount;
  u32 duplicateMemAllocBufferUsePosition;
  const void *pNeedNumInfo;
  MtTypedArray<cGUIObject> unknownObjectArray;
};

struct nGUI::PROCESS_WORK
{
  u32 paramWorkNum;
  nGUI::PARAM_WORK *pParamWork;
  nGUI::FLOW_PROCESS *pFlow;
};

union nGUI::ANIM_SECTION::$C0CA69AEE5BF27F9EDF0DB0B854B39A2
{
  f32 startFrame;
  u32 sequenceId;
};

struct nGUI::ANIM_SECTION
{
  u32 id;
  unsigned __int32 attr : 16;
  unsigned __int32 padding : 16;
  s32 value;
  nGUI::ANIM_SECTION::$C0CA69AEE5BF27F9EDF0DB0B854B39A2 _anon_0;
  f32 endFrame;
};

struct cGUIObjTextureSet::DATA
{
  MtFloat4 rect;
};

struct nGUI::DRAW_LIST
{
  u32 type;
  cGUIObject *pObject;
};

struct std::_Container_base12
{
  std::_Container_proxy *_Myproxy;
};

struct std::_Iterator_base12
{
  std::_Container_proxy *_Myproxy;
  std::_Iterator_base12 *_Mynextiter;
};

struct __cppobj rGUIIconInfo : cResource
{
  u32 mVersion;
  nGUI::ICON_INFO *mpIconInfo;
  MT_CHAR *mpNameBuffer;
};

typedef unsigned __int64 _ULonglong;

typedef _Lldiv_t lldiv_t;

typedef float float_t;

typedef double double_t;

typedef _Mbstatet_0 mbstate_t;

typedef int _Wintt;

typedef _Wintt wint_t;

typedef __int64 _Ptrdifft;

typedef _Ptrdifft ptrdiff_t;

typedef void *nullptr_t;

struct max_align_t
{
  float body[8];
};

typedef __sFILE _Filet;

typedef __sFILE FILE;

typedef char __int8_t;

typedef __int8_t int8_t;

typedef __int16 __int16_t;

typedef __int16_t int16_t;

typedef int __int32_t;

typedef __int32_t int32_t;

typedef char int_least8_t;

typedef __int16 int_least16_t;

typedef int _Int32t;

typedef _Int32t int_least32_t;

typedef __int64 _SceInt64t;

typedef _SceInt64t int_least64_t;

typedef unsigned __int8 uint_least8_t;

typedef unsigned __int16 uint_least16_t;

typedef unsigned int _Uint32t;

typedef _Uint32t uint_least32_t;

typedef unsigned __int64 _SceUint64t;

typedef _SceUint64t uint_least64_t;

typedef _Int32t int_fast8_t;

typedef _Int32t int_fast16_t;

typedef _Int32t int_fast32_t;

typedef _SceInt64t int_fast64_t;

typedef _Uint32t uint_fast8_t;

typedef _Uint32t uint_fast16_t;

typedef _Uint32t uint_fast32_t;

typedef _SceUint64t uint_fast64_t;

typedef _SceInt64t intmax_t;

typedef __int64_t __intptr_t;

typedef __intptr_t intptr_t;

typedef _SceUint64t uintmax_t;

typedef __uintptr_t uintptr_t;

struct __cppobj aInit : cArea
{
};

struct __cppobj aInit::MyDTI : MtDTI
{
};

enum aInit::$2490849E05A677C3E28474ACF1D0BB45 : __int32
{
  MOVE_R0_INIT_0 = 0x0,
  MOVE_R0_TO_LOGO = 0x1,
};

typedef struct pthread *pthread_t;

typedef pthread_t ScePthread;

struct _SceKernelEventFlag;

typedef struct _SceKernelEventFlag *SceKernelEventFlag;

enum sMain::JOB_MODE : __int32
{
  JOB_DYNAMIC = 0x0,
  JOB_DYNAMICID = 0x1,
  JOB_DYNAMIC32 = 0x2,
  JOB_DYNAMIC64 = 0x3,
  JOB_DYNAMICPTR = 0x4,
  JOB_DYNAMICIDPTR = 0x5,
};

struct _SceKernelSema;

typedef struct _SceKernelSema *SceKernelSema;

struct MtSemaphore
{
  SceKernelSema mHandle;
};

typedef MT_MFUNC64 MT_MFUNCPTR;

union __attribute__((aligned(16))) sMain::JOB_WORK::$7010B8A371FEBC6EB8FF70E4B88E768C
{
  MT_MFUNC pfunc;
  MT_MFUNCPTR pfuncptr;
};

struct __attribute__((packed)) __attribute__((aligned(8))) sMain::JOB_WORK
{
  MtObject *pobject;
  sMain::JOB_WORK::$7010B8A371FEBC6EB8FF70E4B88E768C _anon_0;
};

typedef void (*MT_MFUNC32X2)(MtObject *, u32, u32);

typedef void (*MT_MFUNC64X2)(MtObject *, u64, u64);

typedef MT_MFUNC64X2 MT_MFUNCPTRX2;

union __attribute__((aligned(16))) sMain::JOB_WORK_PARAM::$0F4FB056011E3DE95EC6B3EFB9197687
{
  MT_MFUNC32 pfunc32;
  MT_MFUNC32X2 pfunc32x2;
  MT_MFUNC64 pfunc64;
  MT_MFUNC64X2 pfunc64x2;
  MT_MFUNCPTRX2 pfuncptrx2;
};

union sMain::JOB_WORK_PARAM::$4048CA4E17D4894D29C762D07D4ED502
{
  u32 param32;
  u64 param64;
};

struct __attribute__((packed)) __attribute__((aligned(8))) sMain::JOB_WORK_PARAM
{
  MtObject *pobject;
  sMain::JOB_WORK_PARAM::$0F4FB056011E3DE95EC6B3EFB9197687 _anon_0;
  sMain::JOB_WORK_PARAM::$4048CA4E17D4894D29C762D07D4ED502 _anon_1;
  u32 functype;
};

struct __attribute__((aligned(4))) sMain::JOB_THREAD
{
  ScePthread thread_id;
  u32 job_wait;
  uintptr job_id;
  u32 job_index;
  bool active;
  bool exit;
};

struct MtProfiler
{
  __int8 gap0[1];
};

struct __attribute__((aligned(8))) MtPerformance::PerfTime
{
  f64 last_time;
  f64 app_time;
  f32 app_d_time;
};

struct __attribute__((aligned(8))) MtPerformanceCounter::PerfTime
{
  s64 last_ticks;
  s64 app_ticks;
  s32 app_d_ticks;
};

struct __cppobj MtPerformanceCounter : MtObject
{
  MtPerformanceCounter::PerfTime mPerfTime;
  s64 mStartTicks;
  s64 mEndTicks;
};

struct MtPerformance::PerfInfo
{
  f64 secs_per_tick;
  s64 ticks_per_sec;
};

struct __cppobj MtPerformance : MtObject
{
  MtPerformance::PerfTime mPerfTime;
  MtPerformanceCounter mPerfCtr;
  MtPerformance::PerfInfo mPerfInfo;
};

struct sMain::PROCESS
{
  f32 mftime;
  f32 mltime;
  f32 mffps;
  u32 mfrm_ctr;
  MtPerformance perf;
};

struct __cppobj __attribute__((aligned(4))) sMain : cSystem
{
  u64 mTimer;
  s64 mStartTime;
  u32 mFrameTimer;
  bool mExit;
  f32 mFps;
  f32 mMaxFps;
  bool mFrameWait;
  f32 mActualFps;
  s64 mRealCounter;
  s64 mIdealCounter;
  s64 mPrevCounter;
  u32 mSkip;
  bool mPause;
  bool mPauseBefore;
  bool mInitJobThread;
  bool mFinalize;
  f32 mDeltaTime;
  f32 mDeltaTimeBorder;
  f32 mDeltaTimeLimite;
  f32 mDelayFrame;
  ScePthread mMainThreadID;
  SceKernelEventFlag mJobThreadEventFlag;
  u32 mJobNum;
  s32 mJobPt;
  sMain::JOB_MODE mJobMode;
  u32 mJobThreadNum;
  u32 mNextJobThreadNum;
  u32 mDelayJobThreadNum;
  u64 mDelayJobWritePt;
  u64 mDelayJobReadPt;
  MtSemaphore mDelayJobSemaphore;
  sMain::JOB_WORK mJob[8096];
  sMain::JOB_WORK_PARAM mDelayJob[4096];
  sMain::JOB_THREAD mJobThread[6];
  sMain::JOB_THREAD mDelayJobThread[6];
  MtProfiler mProfiler;
  sMain::PROCESS mProcess;
  u32 mCPUCaps;
  u32 mCPUCoreNum;
  u32 mCPULogicalProcessorNum;
  bool mCPUHTEnable;
  MT_CHAR mCPUName[256];
};

struct __cppobj sMain::MyDTI : MtDTI
{
};

struct __cppobj MtPerformance::MyDTI : MtDTI
{
};

struct __cppobj MtPerformanceCounter::MyDTI : MtDTI
{
};

typedef u64 JOBHANDLE;

enum nDraw::FEATURE_LV : __int32
{
  FEATURE_LV_CURRENT = 0xFFFFFFFF,
  FEATURE_LV_9_1 = 0x0,
  FEATURE_LV_9_2 = 0x1,
  FEATURE_LV_9_3 = 0x2,
  FEATURE_LV_10_0 = 0x3,
  FEATURE_LV_10_1 = 0x4,
  FEATURE_LV_11 = 0x5,
  FEATURE_LV_360 = 0x6,
  FEATURE_LV_PS3 = 0x7,
  FEATURE_LV_LITE = 0x8,
  FEATURE_LV_VITA = 0x9,
  FEATURE_LV_CAFE = 0xA,
  FEATURE_LV_PS4 = 0xB,
  FEATURE_LV_XB1 = 0xC,
  __FEATURE_LV__S32 = 0x80000001,
};

enum nDraw::ANTIALIAS_ALT_TYPE : __int32
{
  ANTIALIAS_ALT_NONE = 0x0,
  ANTIALIAS_ALT_FXAA = 0x1,
  ANTIALIAS_ALT_FXAA3 = 0x2,
  ANTIALIAS_ALT_FXAA3HQ = 0x3,
  __ANTIALIAS_ALT_TYPE__U32 = 0xFFFFFFFF,
};

enum nDraw::DEFERRED_LIGHTING_NORMAL_TYPE : __int32
{
  DL_NORMAL_SPHEREMAP = 0x0,
  DL_NORMAL_SPHEREMAP_LUT = 0x1,
};

typedef void *nDraw::HDevice;

typedef sce::Gnmx::LightweightGfxContext nDraw::DeviceContext;

typedef nDraw::DeviceContext *nDraw::HDeviceContext;

typedef bool (*sce::Gnm::CommandCallbackFunc)(sce::Gnm::CommandBuffer *, uint32_t, void *);

struct sce::Gnm::CommandCallback
{
  sce::Gnm::CommandCallbackFunc m_func;
  void *m_userData;
};

struct sce::Gnm::CommandBufferFlags
{
  unsigned __int64 m_predicationEnabled : 1;
  unsigned __int64 m_shaderType : 1;
  unsigned __int64 m_reserved : 62;
};

struct sce::Gnm::CommandBuffer
{
  uint32_t *m_beginptr;
  uint32_t *m_endptr;
  uint32_t *m_cmdptr;
  sce::Gnm::CommandCallback m_callback;
  sce::Gnm::CommandBufferFlags m_flags;
  uint64_t m_reserved;
  uint32_t m_bufferSizeInDwords;
  uint32_t m_reserved2;
};

struct __cppobj sce::Gnm::DrawCommandBuffer : sce::Gnm::CommandBuffer
{
};

typedef sce::Gnm::DrawCommandBuffer sce::Gnmx::GnmxDrawCommandBuffer;

struct __cppobj sce::Gnm::DispatchCommandBuffer : sce::Gnm::CommandBuffer
{
};

typedef sce::Gnm::DispatchCommandBuffer sce::Gnmx::GnmxDispatchCommandBuffer;

struct __cppobj sce::Gnm::ConstantCommandBuffer : sce::Gnm::CommandBuffer
{
};

typedef sce::Gnm::ConstantCommandBuffer sce::Gnmx::GnmxConstantCommandBuffer;

struct sce::Gnm::Buffer
{
  uint32_t m_regs[4];
};

struct sce::Gnmx::DispatchDrawTriangleCullV1SharedData
{
  sce::Gnm::Buffer m_bufferIrb;
  uint16_t m_gdsOffsetOfIrbWptr;
  uint16_t m_cullSettings;
  float m_quantErrorScreenX;
  float m_quantErrorScreenY;
  float m_gbHorizClipAdjust;
  float m_gbVertClipAdjust;
};

typedef sce::Gnmx::DispatchDrawTriangleCullV1SharedData sce::Gnmx::BaseGfxContext::DispatchDrawSharedData;

struct sce::Gnmx::BaseGfxContext::SubmissionRange
{
  uint32_t m_dcbStartDwordOffset;
  uint32_t m_dcbSizeInDwords;
  uint32_t m_acbStartDwordOffset;
  uint32_t m_acbSizeInDwords;
  uint32_t m_ccbStartDwordOffset;
  uint32_t m_ccbSizeInDwords;
};

typedef bool (*sce::Gnmx::BaseGfxContext::BufferFullCallbackFunc)(sce::Gnmx::BaseGfxContext *, sce::Gnm::CommandBuffer *, uint32_t, void *);

struct sce::Gnmx::BaseGfxContext::BufferFullCallback
{
  sce::Gnmx::BaseGfxContext::BufferFullCallbackFunc m_func;
  void *m_userData;
};

struct sce::Gnmx::BaseGfxContext
{
  sce::Gnmx::GnmxDrawCommandBuffer m_dcb;
  sce::Gnmx::GnmxDispatchCommandBuffer m_acb;
  sce::Gnmx::GnmxConstantCommandBuffer m_ccb;
  sce::Gnmx::ComputeQueue *m_pQueue;
  sce::Gnmx::BaseGfxContext::DispatchDrawSharedData m_dispatchDrawSharedData;
  sce::Gnmx::BaseGfxContext::DispatchDrawSharedData *m_pDispatchDrawSharedData;
  uint32_t m_dispatchDrawIndexDeallocMask;
  uint16_t m_dispatchDrawNumInstancesMinus1;
  uint16_t m_dispatchDrawInstanceStepRate0Minus1;
  uint16_t m_dispatchDrawInstanceStepRate1Minus1;
  uint16_t m_dispatchDrawFlags;
  const uint32_t *m_currentDcbSubmissionStart;
  const uint32_t *m_currentAcbSubmissionStart;
  const uint32_t *m_currentCcbSubmissionStart;
  const uint32_t *m_actualDcbEnd;
  const uint32_t *m_actualAcbEnd;
  const uint32_t *m_actualCcbEnd;
  sce::Gnmx::BaseGfxContext::SubmissionRange m_submissionRanges[16];
  uint32_t m_submissionCount;
  sce::Gnmx::BaseGfxContext::BufferFullCallback m_cbFullCallback;
};

typedef uint32_t *(*sce::Gnmx::AllocResourceBufferCallback)(sce::Gnmx::BaseConstantUpdateEngine *, uint32_t, uint32_t *, void *);

struct sce::Gnmx::ResourceBufferCallback
{
  sce::Gnmx::AllocResourceBufferCallback m_func;
  void *m_userData;
};

struct sce::Gnmx::BaseConstantUpdateEngine
{
  int32_t m_bufferCount;
  int32_t m_bufferIndex;
  uint32_t *m_bufferCurrent;
  uint32_t *m_bufferCurrentBegin;
  uint32_t *m_bufferCurrentEnd;
  uint32_t *m_bufferBegin[4];
  uint32_t *m_bufferEnd[4];
  sce::Gnmx::ResourceBufferCallback m_resourceBufferCallback;
  bool m_prefetchShaderCode;
  sce::Gnm::Buffer *m_globalInternalResourceTableAddr;
};

enum sce::Gnm::ActiveShaderStages : __int32
{
  kActiveShaderStagesVsPs = 0x0,
  kActiveShaderStagesEsGsVsPs = 0xB0,
  kActiveShaderStagesLsHsVsPs = 0x45,
  kActiveShaderStagesLsHsEsGsVsPs = 0xAD,
  kActiveShaderStagesDispatchDrawVsPs = 0x200,
};

typedef sce::Gnm::ActiveShaderStages sce::Gnm::ActiveShaderStages_0;

enum sce::Gnm::GsMode : __int32
{
  kGsModeDisable = 0x0,
  kGsModeEnable = 0x180003,
  kGsModeEnableOnChip = 0x600003,
};

typedef sce::Gnm::GsMode sce::Gnm::GsMode_0;

enum sce::Gnm::DispatchOrderedAppendMode : __int32
{
  kDispatchOrderedAppendModeDisabled = 0x0,
  kDispatchOrderedAppendModeIndexPerWavefront = 0x1,
  kDispatchOrderedAppendModeIndexPerThreadgroup = 0x3,
};

typedef sce::Gnm::DispatchOrderedAppendMode sce::Gnm::DispatchOrderedAppendMode_0;

struct sce::Gnmx::LightweightConstantUpdateEngine::ShaderResourceBindingValidation
{
  bool resourceOffsetIsBound[16];
  bool rwResourceOffsetIsBound[16];
  bool samplerOffsetIsBound[16];
  bool vertexBufferOffsetIsBound[16];
  bool constBufferOffsetIsBound[20];
  bool appendConsumeCounterIsBound;
  bool gdsMemoryRangeIsBound;
};

struct __cppobj __attribute__((aligned(4))) sce::Gnmx::LightweightGraphicsConstantUpdateEngine : sce::Gnmx::BaseConstantUpdateEngine
{
  sce::Gnmx::GnmxDrawCommandBuffer *m_drawCommandBuffer;
  sce::Gnmx::GnmxDispatchCommandBuffer *m_asyncDispatchCommandBuffer;
  uint32_t m_scratchBuffer[12288];
  sce::Gnm::ActiveShaderStages_0 m_activeShaderStages;
  const void *m_boundShader[8];
  uint32_t m_boundShaderAppendConsumeCounterRange[8];
  uint32_t m_boundShaderGdsMemoryRange[8];
  const void *m_boundFetchShader[8];
  uint32_t m_boundShaderModifier[8];
  const sce::Gnmx::InputResourceOffsets *m_boundShaderResourceOffsets[8];
  bool m_dirtyShader[8];
  bool m_dirtyShaderResources[8];
  bool m_dirtyShaderUpdateOnly[8];
  uint16_t m_shaderBindingIsValid;
  const uint32_t *m_psInputsTable;
  sce::Gnmx::InputResourceOffsets m_fixedGsVsShaderResourceOffsets;
  sce::Gnmx::InputResourceOffsets m_fixedGsVsStreamOutShaderResourceOffsets;
  sce::Gnmx::InputResourceOffsets m_fixedOnChipGsVsShaderResourceOffsets;
  sce::Gnmx::InputResourceOffsets m_fixedOnChipGsVsStreamOutShaderResourceOffsets;
  sce::Gnm::GsMode_0 m_gsMode;
  sce::Gnm::GsMaxOutputPrimitiveDwordSize_0 m_gsMaxOutput;
  uint16_t m_onChipEsVertsPerSubGroup;
  uint16_t m_onChipEsExportVertexSizeInDword;
  uint32_t m_onChipLdsSizeIn512Bytes;
  uint32_t m_tessellationCurrentTgPatchCount;
  sce::Gnm::Buffer m_tessellationCurrentCb;
  bool m_tessellationAutoManageReservedCb;
  const void *m_pDispatchDrawData;
  uint8_t m_dispatchDrawIndexDeallocNumBits;
  sce::Gnm::DispatchOrderedAppendMode_0 m_dispatchDrawOrderedAppendMode;
  uint32_t m_sizeofDispatchDrawData;
  bool m_dispatchDrawActive;
  sce::Gnmx::LightweightConstantUpdateEngine::ShaderResourceBindingValidation m_boundShaderResourcesValidation[8];
};

struct __cppobj sce::Gnmx::LightweightGfxContext : sce::Gnmx::BaseGfxContext
{
  sce::Gnmx::LightweightGraphicsConstantUpdateEngine m_lwcue;
};

struct sce::Gnmx::ComputeQueue
{
  uint32_t m_pipeId;
  uint32_t m_queueId;
  uint32_t m_vqueueId;
  volatile uint32_t *m_readPtrAddr;
  sce::Gnmx::GnmxDispatchCommandBuffer m_dcbRoot;
};

typedef void *nDraw::HCore;

struct nDraw::SAMPLER_DESC
{
  unsigned __int32 filter : 8;
  unsigned __int32 address_u : 3;
  unsigned __int32 address_v : 3;
  unsigned __int32 address_w : 3;
  unsigned __int32 max_aniso : 5;
  unsigned __int32 cmp_func : 4;
  f32 lod_bias;
  u32 padding1;
  f32 lod_min;
  f32 lod_max;
  u64 padding2;
  u64 padding3;
  f32 border_color[4];
};

struct sce::Gnm::Sampler
{
  uint32_t m_regs[4];
};

struct __cppobj nDraw::SamplerState : nDraw::Resource
{
  nDraw::SAMPLER_DESC mDesc;
  sce::Gnm::Sampler mSamplerState;
};

struct __cppobj nDraw::SamplerState::MyDTI : MtDTI
{
};

typedef sce::Gnm::Sampler *nDraw::HSamplerState;

typedef void *nDraw::HConstantBuffer;

enum sce::Gnm::EmbeddedDataAlignment : __int32
{
  kEmbeddedDataAlignment4 = 0x2,
  kEmbeddedDataAlignment8 = 0x3,
  kEmbeddedDataAlignment16 = 0x4,
  kEmbeddedDataAlignment64 = 0x6,
  kEmbeddedDataAlignment128 = 0x7,
  kEmbeddedDataAlignment256 = 0x8,
};

enum sce::Gnm::ShaderType : __int32
{
  kShaderTypeGraphics = 0x0,
  kShaderTypeCompute = 0x1,
};

enum sce::Gnm::StreamoutBufferId : __int32
{
  kStreamoutBuffer0 = 0x0,
  kStreamoutBuffer1 = 0x1,
  kStreamoutBuffer2 = 0x2,
  kStreamoutBuffer3 = 0x3,
};

enum sce::Gnm::StreamoutBufferUpdateWrite : __int32
{
  kStreamoutBufferUpdateWriteImmediate = 0x0,
  kStreamoutBufferUpdateWriteBufferFilledSize = 0x1,
  kStreamoutBufferUpdateWriteIndirect = 0x2,
  kStreamoutBufferUpdateWriteNone = 0x3,
};

enum sce::Gnm::StreamoutBufferUpdateSaveFilledSize : __int32
{
  kStreamoutBufferUpdateDontSaveFilledSize = 0x0,
  kStreamoutBufferUpdateSaveFilledSize = 0x1,
};

enum sce::Gnm::ShaderStage : __int32
{
  kShaderStageCs = 0x0,
  kShaderStagePs = 0x1,
  kShaderStageVs = 0x2,
  kShaderStageGs = 0x3,
  kShaderStageEs = 0x4,
  kShaderStageHs = 0x5,
  kShaderStageLs = 0x6,
  kShaderStageCount = 0x7,
};

enum sce::Gnm::ShaderEngine : __int32
{
  kShaderEngine0 = 0x0,
  kShaderEngine1 = 0x1,
};

enum sce::Gnm::ClipControlUserClipPlaneMode : __int32
{
  kClipControlUserClipPlaneCenterNoBias = 0x0,
  kClipControlUserClipPlaneCenterRadiusBias = 0x1,
  kClipControlUserClipPlaneCenterRadisBiasAndExpand = 0x2,
  kClipControlUserClipPlaneCenterAlwaysExpand = 0x3,
};

enum sce::Gnm::ClipControlClipSpace : __int32
{
  kClipControlClipSpaceDX = 0x1,
  kClipControlClipSpaceOGL = 0x0,
};

enum sce::Gnm::ClipControlZClipMode : __int32
{
  kClipControlZClipDisable = 0x1,
  kClipControlZClipEnable = 0x0,
};

enum sce::Gnm::ClipControlVertexKillMode : __int32
{
  kClipControlVertexKillModeAny = 0x1,
  kClipControlVertexKillModeAll = 0x0,
};

enum sce::Gnm::VertexQuantizationMode : __int32
{
  kVertexQuantizationMode16_8 = 0x5,
  kVertexQuantizationMode14_10 = 0x6,
  kVertexQuantizationMode12_12 = 0x7,
};

enum sce::Gnm::VertexQuantizationRoundMode : __int32
{
  kVertexQuantizationRoundModeTruncate = 0x0,
  kVertexQuantizationRoundModeRound = 0x1,
  kVertexQuantizationRoundModeRoundToEven = 0x2,
  kVertexQuantizationRoundModeRoundToOdd = 0x3,
};

enum sce::Gnm::VertexQuantizationCenterMode : __int32
{
  kVertexQuantizationCenterAtZero = 0x0,
  kVertexQuantizationCenterAtHalf = 0x1,
};

enum sce::Gnm::WindowOffsetMode : __int32
{
  kWindowOffsetDisable = 0x0,
  kWindowOffsetEnable = 0x1,
};

enum sce::Gnm::PsShaderRate : __int32
{
  kPsShaderRatePerPixel = 0x0,
  kPsShaderRatePerSample = 0x1,
};

enum sce::Gnm::QuadPixel : __int32
{
  kQuadPixelUpperLeft = 0x0,
  kQuadPixelUpperRight = 0x1,
  kQuadPixelLowerLeft = 0x2,
  kQuadPixelLowerRight = 0x3,
};

enum sce::Gnm::EmbeddedPsShader : __int32
{
  kEmbeddedPsShaderDummy = 0x0,
  kNumEmbeddedPsShaders = 0x1,
};

enum sce::Gnm::EmbeddedVsShader : __int32
{
  kEmbeddedVsShaderFullScreen = 0x0,
  kNumEmbeddedVsShaders = 0x1,
};

enum sce::Gnm::EndOfShaderEventType : __int32
{
  kEosCsDone = 0x2F,
  kEosPsDone = 0x30,
};

enum sce::Gnm::KCachePolicy : __int32
{
  kKCachePolicyLru = 0x0,
  kKCachePolicyBypass = 0x1,
};

enum sce::Gnm::BufferChannel : __int32
{
  kBufferChannelConstant0 = 0x0,
  kBufferChannelConstant1 = 0x1,
  kBufferChannelX = 0x4,
  kBufferChannelY = 0x5,
  kBufferChannelZ = 0x6,
  kBufferChannelW = 0x7,
};

enum sce::Gnm::BufferSwizzleElementSize : __int32
{
  kBufferSwizzleElementSize2 = 0x0,
  kBufferSwizzleElementSize4 = 0x1,
  kBufferSwizzleElementSize8 = 0x2,
  kBufferSwizzleElementSize16 = 0x3,
};

enum sce::Gnm::BufferSwizzleStride : __int32
{
  kBufferSwizzleStride8 = 0x0,
  kBufferSwizzleStride16 = 0x1,
  kBufferSwizzleStride32 = 0x2,
  kBufferSwizzleStride64 = 0x3,
};

enum sce::Gnm::WrapMode : __int32
{
  kWrapModeWrap = 0x0,
  kWrapModeMirror = 0x1,
  kWrapModeClampLastTexel = 0x2,
  kWrapModeMirrorOnceLastTexel = 0x3,
  kWrapModeClampHalfBorder = 0x4,
  kWrapModeMirrorOnceHalfBorder = 0x5,
  kWrapModeClampBorder = 0x6,
  kWrapModeMirrorOnceBorder = 0x7,
};

enum sce::Gnm::FilterMode : __int32
{
  kFilterModePoint = 0x0,
  kFilterModeBilinear = 0x1,
  kFilterModeAnisoPoint = 0x2,
  kFilterModeAnisoBilinear = 0x3,
};

enum sce::Gnm::MipFilterMode : __int32
{
  kMipFilterModeNone = 0x0,
  kMipFilterModePoint = 0x1,
  kMipFilterModeLinear = 0x2,
};

enum sce::Gnm::ZFilterMode : __int32
{
  kZFilterModeNone = 0x0,
  kZFilterModePoint = 0x1,
  kZFilterModeLinear = 0x2,
};

enum sce::Gnm::AnisotropyRatio : __int32
{
  kAnisotropyRatio1 = 0x0,
  kAnisotropyRatio2 = 0x1,
  kAnisotropyRatio4 = 0x2,
  kAnisotropyRatio8 = 0x3,
  kAnisotropyRatio16 = 0x4,
};

enum sce::Gnm::BorderColor : __int32
{
  kBorderColorTransBlack = 0x0,
  kBorderColorOpaqueBlack = 0x1,
  kBorderColorOpaqueWhite = 0x2,
  kBorderColorFromTable = 0x3,
};

enum sce::Gnm::DepthCompare : __int32
{
  kDepthCompareNever = 0x0,
  kDepthCompareLess = 0x1,
  kDepthCompareEqual = 0x2,
  kDepthCompareLessEqual = 0x3,
  kDepthCompareGreater = 0x4,
  kDepthCompareNotEqual = 0x5,
  kDepthCompareGreaterEqual = 0x6,
  kDepthCompareAlways = 0x7,
};

enum sce::Gnm::CbMode : __int32
{
  kCbModeDisable = 0x0,
  kCbModeNormal = 0x1,
  kCbModeEliminateFastClear = 0x2,
  kCbModeResolve = 0x3,
  kCbModeFmaskDecompress = 0x5,
};

enum sce::Gnm::RasterOp : __int32
{
  kRasterOpBlackness = 0x0,
  kRasterOpNor = 0x5,
  kRasterOpAndInverted = 0xA,
  kRasterOpCopyInverted = 0xF,
  kRasterOpAndReverse = 0x44,
  kRasterOpInvert = 0x55,
  kRasterOpXor = 0x5A,
  kRasterOpNand = 0x5F,
  kRasterOpAnd = 0x88,
  kRasterOpEquiv = 0x99,
  kRasterOpNoop = 0xAA,
  kRasterOpOrInverted = 0xAF,
  kRasterOpCopy = 0xCC,
  kRasterOpOrReverse = 0xDD,
  kRasterOpOr = 0xEE,
  kRasterOpSet = 0xFF,
  kRasterOpSrcCopy = 0xCC,
};

enum sce::Gnm::DbTileWriteBackPolicy : __int32
{
  kDbTileWriteBackPolicyCompressionAllowed = 0x0,
  kDbTileWriteBackPolicyCompressionForbidden = 0x1,
};

enum sce::Gnm::DbCountControlPerfectZPassCounts : __int32
{
  kDbCountControlPerfectZPassCountsDisable = 0x0,
  kDbCountControlPerfectZPassCountsEnable = 0x1,
};

enum sce::Gnm::DbCountControlZPassIncrement : __int32
{
  kDbCountControlZPassIncrementEnable = 0x0,
  kDbCountControlZPassIncrementDisable = 0x1,
};

enum sce::Gnm::VgtPartialVsWaveMode : __int32
{
  kVgtPartialVsWaveDisable = 0x0,
  kVgtPartialVsWaveEnable = 0x1,
};

enum sce::Gnm::PrimitiveType : __int32
{
  kPrimitiveTypeNone = 0x0,
  kPrimitiveTypePointList = 0x1,
  kPrimitiveTypeLineList = 0x2,
  kPrimitiveTypeLineStrip = 0x3,
  kPrimitiveTypeTriList = 0x4,
  kPrimitiveTypeTriFan = 0x5,
  kPrimitiveTypeTriStrip = 0x6,
  kPrimitiveTypePatch = 0x9,
  kPrimitiveTypeLineListAdjacency = 0xA,
  kPrimitiveTypeLineStripAdjacency = 0xB,
  kPrimitiveTypeTriListAdjacency = 0xC,
  kPrimitiveTypeTriStripAdjacency = 0xD,
  kPrimitiveTypeRectList = 0x11,
  kPrimitiveTypeLineLoop = 0x12,
  kPrimitiveTypeQuadList = 0x13,
  kPrimitiveTypeQuadStrip = 0x14,
  kPrimitiveTypePolygon = 0x15,
};

enum sce::Gnm::IndexSize : __int32
{
  kIndexSize16 = 0x0,
  kIndexSize32 = 0x1,
  kIndexSize16ForDispatchDraw = 0x10,
  kIndexSize32ForDispatchDraw = 0x11,
};

enum sce::Gnm::CachePolicy : __int32
{
  kCachePolicyLru = 0x0,
  kCachePolicyStream = 0x1,
  kCachePolicyBypass = 0x2,
};

enum sce::Gnm::DispatchDrawMode : __int32
{
  kDispatchDrawModeIndexRingBufferOnly = 0x0,
  kDispatchDrawModeIndexAndVertexRingBuffer = 0x1,
};

enum sce::Gnm::OcclusionQueryOp : __int32
{
  kOcclusionQueryOpClearAndBegin = 0x0,
  kOcclusionQueryOpEnd = 0x1,
  kOcclusionQueryOpBeginWithoutClear = 0x2,
};

enum sce::Gnm::PredicationZPassHint : __int32
{
  kPredicationZPassHintWait = 0x0,
  kPredicationZPassHintDraw = 0x1,
};

enum sce::Gnm::PredicationZPassAction : __int32
{
  kPredicationZPassActionDrawIfNotVisible = 0x0,
  kPredicationZPassActionDrawIfVisible = 0x1,
};

enum sce::Gnm::WriteDataConfirmMode : __int32
{
  kWriteDataConfirmDisable = 0x0,
  kWriteDataConfirmEnable = 0x1,
};

enum sce::Gnm::EventType : __int32
{
  kEventTypeCacheFlush = 0x6,
  kEventTypeCsPartialFlush = 0x7,
  kEventTypeVsPartialFlush = 0xF,
  kEventTypePsPartialFlush = 0x10,
  kEventTypeFlushHsOutput = 0x11,
  kEventTypeFlushLsOutput = 0x12,
  kEventTypeCacheFlushAndInvEvent = 0x16,
  kEventTypePerfCounterStart = 0x17,
  kEventTypePerfCounterStop = 0x18,
  kEventTypePipelineStatsStart = 0x19,
  kEventTypePipelineStatsStop = 0x1A,
  kEventTypePerfCounterSample = 0x1B,
  kEventTypeFlushEsOutput = 0x1C,
  kEventTypeFlushGsOutput = 0x1D,
  kEventTypeSoVgtstreamoutFlush = 0x1F,
  kEventTypeResetVertexCount = 0x21,
  kEventTypeBlockContextDone = 0x22,
  kEventTypeVgtFlush = 0x24,
  kEventTypeSqNonEvent = 0x26,
  kEventTypeScSendDbViewportZ = 0x27,
  kEventTypeDbCacheFlushAndInvalidate = 0x2A,
  kEventTypeFlushAndInvalidateDbMeta = 0x2C,
  kEventTypeFlushAndInvalidateCbMeta = 0x2E,
  kEventTypeFlushAndInvalidateCbPixelData = 0x31,
};

enum sce::Gnm::EndOfPipeEventType : __int32
{
  kEopFlushCbDbCaches = 0x4,
  kEopFlushAndInvalidateCbDbCaches = 0x14,
  kEopCbDbReadsDone = 0x28,
  kEopCsDone = 0x28,
};

enum sce::Gnm::EventWriteDest : __int32
{
  kEventWriteDestMemory = 0x0,
  kEventWriteDestTcL2 = 0x1,
  kEventWriteDestTcL2Volatile = 0x11,
};

enum sce::Gnm::EventWriteSource : __int32
{
  kEventWriteSource32BitsImmediate = 0x1,
  kEventWriteSource64BitsImmediate = 0x2,
  kEventWriteSourceGlobalClockCounter = 0x3,
  kEventWriteSourceGpuCoreClockCounter = 0x4,
};

enum sce::Gnm::CacheAction : __int32
{
  kCacheActionNone = 0x0,
  kCacheActionWriteBackAndInvalidateL1andL2 = 0x38,
  kCacheActionWriteBackL2Volatile = 0x3B,
  kCacheActionWriteBackAndInvalidateL2Volatile = 0x3B,
  kCacheActionInvalidateL2Volatile = 0x33,
  kCacheActionInvalidateL1 = 0x10,
};

enum sce::Gnm::WaitCompareFunc : __int32
{
  kWaitCompareFuncAlways = 0x0,
  kWaitCompareFuncLess = 0x1,
  kWaitCompareFuncLessEqual = 0x2,
  kWaitCompareFuncEqual = 0x3,
  kWaitCompareFuncNotEqual = 0x4,
  kWaitCompareFuncGreaterEqual = 0x5,
  kWaitCompareFuncGreater = 0x6,
};

enum sce::Gnm::StallCommandBufferParserMode : __int32
{
  kStallCommandBufferParserEnable = 0x0,
  kStallCommandBufferParserDisable = 0x1,
};

enum sce::Gnm::SemaphoreSignalBehavior : __int32
{
  kSemaphoreSignalBehaviorIncrement = 0x0,
  kSemaphoreSignalBehaviorSet = 0x1,
};

enum sce::Gnm::SemaphoreUpdateConfirmMode : __int32
{
  kSemaphoreUpdateConfirmDisabled = 0x0,
  kSemaphoreUpdateConfirmEnabled = 0x1,
};

enum sce::Gnm::SemaphoreWaitBehavior : __int32
{
  kSemaphoreWaitBehaviorDecrement = 0x0,
  kSemaphoreWaitBehaviorNone = 0x1,
};

enum sce::Gnm::EventStats : __int32
{
  kEventStatsZPassDone = 0x0,
  kEventStatsSamplePipelinestat = 0x1,
  kEventStatsSampleStreamoutstats0 = 0x2,
  kEventStatsSampleStreamoutstats1 = 0x3,
  kEventStatsSampleStreamoutstats2 = 0x4,
  kEventStatsSampleStreamoutstats3 = 0x5,
};

enum sce::Gnm::DmaDataDst : __int32
{
  kDmaDataDstMemory = 0x0,
  kDmaDataDstGds = 0x1,
  kDmaDataDstRegister = 0x4,
  kDmaDataDstRegisterNoIncrement = 0xC,
};

enum sce::Gnm::DmaDataSrc : __int32
{
  kDmaDataSrcMemory = 0x0,
  kDmaDataSrcGds = 0x1,
  kDmaDataSrcData = 0x2,
  kDmaDataSrcMemoryUsingL2 = 0x3,
  kDmaDataSrcRegister = 0x4,
  kDmaDataSrcRegisterNoIncrement = 0xC,
};

enum sce::Gnm::DmaDataBlockingMode : __int32
{
  kDmaDataBlockingDisable = 0x0,
  kDmaDataBlockingEnable = 0x1,
};

enum sce::Gnm::PerfmonEnable : __int32
{
  kPerfmonDisable = 0x0,
  kPerfmonEnable = 0x1,
};

enum sce::Gnm::PerfmonState : __int32
{
  kPerfmonStateDisableAndReset = 0x0,
  kPerfmonStateStartCounting = 0x1,
  kPerfmonStateStopCounting = 0x2,
};

enum sce::Gnm::PerfmonEnableMode : __int32
{
  kPerfmonEnableModeAlwaysCount = 0x0,
  kPerfmonEnableModeCountContextTrue = 0x2,
  kPerfmonEnableModeCountContextFalse = 0x3,
};

enum sce::Gnm::PerfmonSample : __int32
{
  kPerfmonNoSample = 0x0,
  kPerfmonSample = 0x1,
};

enum sce::Gnm::CpPerfCounter : __int32
{
  kCpPerfCounterAlwaysCount = 0x0,
  kCpPerfCounterRbiuFifoFull = 0x1,
  kCpPerfCounterCpGrbmDwordsSent = 0x4,
  kCpPerfCounterMeParserBusy = 0x5,
  kCpPerfCounterCountType0Packets = 0x6,
  kCpPerfCounterCountType3Packets = 0x7,
  kCpPerfCounterCpGrbmOutOfCredits = 0x9,
  kCpPerfCounterCpPfpGrbmOutOfCredits = 0xA,
  kCpPerfCounterCpGdsGrbmOutOfCredits = 0xB,
  kCpPerfCounterRciuStalledOnMeRead = 0xC,
  kCpPerfCounterRciuStalledOnDmaRead = 0xD,
  kCpPerfCounterSsuStalledOnActiveCntx = 0xE,
  kCpPerfCounterSsuStalledOnCleanSignals = 0xF,
  kCpPerfCounterQuStalledOnEopDonePulse = 0x10,
  kCpPerfCounterQuStalledOnEopDoneWrConfirm = 0x11,
  kCpPerfCounterPfpStalledOnCsfReady = 0x12,
  kCpPerfCounterPfpStalledOnMeqReady = 0x13,
  kCpPerfCounterPfpStalledOnRciuReady = 0x14,
  kCpPerfCounterPfpStalledForDataFromRoq = 0x15,
  kCpPerfCounterMeStalledForDataFromPfp = 0x16,
  kCpPerfCounterMeStalledForDataFromStq = 0x17,
  kCpPerfCounterMeStalledOnNoAvailGfxCntx = 0x18,
  kCpPerfCounterMeStalledWritingToRciu = 0x19,
  kCpPerfCounterMeStalledWritingConstants = 0x1A,
  kCpPerfCounterMeStalledOnPartialFlush = 0x1B,
  kCpPerfCounterMeWaitOnCeCounter = 0x1C,
  kCpPerfCounterMeWaitOnAvailBuffer = 0x1D,
  kCpPerfCounterLoadStalledOnSetCoherency = 0x1F,
  kCpPerfCounterDynamicClkValid = 0x20,
  kCpPerfCounterRegisterClkValid = 0x21,
  kCpPerfCounterMiuWriteRequestSent = 0x22,
  kCpPerfCounterMiuReadRequestSent = 0x23,
  kCpPerfCounterCeStallRamDump = 0x24,
  kCpPerfCounterCeStallRamWrite = 0x25,
  kCpPerfCounterCeStallOnIncFifo = 0x26,
  kCpPerfCounterCeStallOnWrRamFifo = 0x27,
  kCpPerfCounterCeStallOnDataFromMiu = 0x28,
  kCpPerfCounterCeStallOnDataFromRoq = 0x29,
  kCpPerfCounterCeStallOnCeBufferFlag = 0x2A,
  kCpPerfCounterCeStallOnDeCounter = 0x2B,
  kCpPerfCounterTciuStallWaitOnFree = 0x2C,
  kCpPerfCounterTciuStallWaitOnTags = 0x2D,
  kNumCpPerfCounters = 0x2E,
  kCpPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::CpcPerfCounter : __int32
{
  kCpcPerfCounterAlwaysCount = 0x0,
  kCpcPerfCounterRciuStallWaitOnFree = 0x1,
  kCpcPerfCounterRciuStallPrivViolation = 0x2,
  kCpcPerfCounterMiuStallOnRdreqFree = 0x3,
  kCpcPerfCounterMiuStallOnWrreqFree = 0x4,
  kCpcPerfCounterTciuStallWaitOnFree = 0x5,
  kCpcPerfCounterMe1StallWaitOnRciuReady = 0x6,
  kCpcPerfCounterMe1StallWaitOnRciuReadyPerf = 0x7,
  kCpcPerfCounterMe1StallWaitOnRciuRead = 0x8,
  kCpcPerfCounterMe1StallWaitOnMiuRead = 0x9,
  kCpcPerfCounterMe1StallWaitOnMiuWrite = 0xA,
  kCpcPerfCounterMe1StallOnDataFromRoq = 0xB,
  kCpcPerfCounterMe1StallOnDataFromRoqPerf = 0xC,
  kCpcPerfCounterMe1BusyForPacketDecode = 0xD,
  kCpcPerfCounterMe2StallWaitOnRciuReady = 0xE,
  kCpcPerfCounterMe2StallWaitOnRciuReadyPerf = 0xF,
  kCpcPerfCounterMe2StallWaitOnRciuRead = 0x10,
  kCpcPerfCounterMe2StallWaitOnMiuRead = 0x11,
  kCpcPerfCounterMe2StallWaitOnMiuWrite = 0x12,
  kCpcPerfCounterMe2StallOnDataFromRoq = 0x13,
  kCpcPerfCounterMe2StallOnDataFromRoqPerf = 0x14,
  kCpcPerfCounterMe2BusyForPacketDecode = 0x15,
  kNumCpcPerfCounters = 0x16,
  kCpcPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::CpfPerfCounter : __int32
{
  kCpfPerfCounterAlwaysCount = 0x0,
  kCpfPerfCounterMiuStalledWaitingRdreqFree = 0x1,
  kCpfPerfCounterTciuStalledWaitingOnFree = 0x2,
  kCpfPerfCounterTciuStalledWaitingOnTags = 0x3,
  kCpfPerfCounterCsfBusyForFetchingRing = 0x4,
  kCpfPerfCounterCsfBusyForFetchingIb1 = 0x5,
  kCpfPerfCounterCsfBusyForFetchingIb2 = 0x6,
  kCpfPerfCounterCsfBusyForFetchingState = 0x7,
  kCpfPerfCounterMiuBusyForOutstandingTags = 0x8,
  kCpfPerfCounterCsfRtsMiuNotRtr = 0x9,
  kCpfPerfCounterCsfStateFifoNotRtr = 0xA,
  kCpfPerfCounterCsfFetchingCmdBuffers = 0xB,
  kCpfPerfCounterGrbmDwordsSent = 0xC,
  kCpfPerfCounterDynamicClockValid = 0xD,
  kCpfPerfCounterRegisterClockValid = 0xE,
  kCpfPerfCounterMiuWriteRequestSent = 0xF,
  kCpfPerfCounterMiuReadRequestSent = 0x10,
  kNumCpfPerfCounters = 0x11,
  kCpfPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::IaPerfCounter : __int32
{
  kIaPerfCounterGrpInputEventWindowActive = 0x0,
  kIaPerfCounterMcLatBin0 = 0x7,
  kIaPerfCounterMcLatBin1 = 0x8,
  kIaPerfCounterMcLatBin2 = 0x9,
  kIaPerfCounterMcLatBin3 = 0xA,
  kIaPerfCounterMcLatBin4 = 0xB,
  kIaPerfCounterMcLatBin5 = 0xC,
  kIaPerfCounterMcLatBin6 = 0xD,
  kIaPerfCounterMcLatBin7 = 0xE,
  kIaPerfCounterIaBusy = 0xF,
  kIaPerfCounterIaSclkRegVldEvent = 0x10,
  kIaPerfCounterIaSclkInputVldEvent = 0x11,
  kIaPerfCounterIaSclkCoreVldEvent = 0x12,
  kIaPerfCounterIaSclkInvalVldEvent = 0x13,
  kIaPerfCounterIaDmaReturn = 0x14,
  kIaPerfCounterIaStalled = 0x15,
  kNumIaPerfCounters = 0x16,
  kIaPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::PerfmonCounterMode : __int32
{
  kPerfmonCounterModeAccum = 0x0,
  kPerfmonCounterModeActiveCycles = 0x1,
  kPerfmonCounterModeMax = 0x2,
  kPerfmonCounterModeDirty = 0x3,
  kPerfmonCounterModeSample = 0x4,
  kPerfmonCounterModeCyclesSinceFirstEvent = 0x5,
  kPerfmonCounterModeCyclesSinceLastEvent = 0x6,
  kPerfmonCounterModeCyclesGeHi = 0x7,
  kPerfmonCounterModeCyclesEqHi = 0x8,
  kPerfmonCounterModeInactiveCycles = 0x9,
};

enum sce::Gnm::GdsPerfCounter : __int32
{
  kGdsPerfCounterDsAddrConfl = 0x0,
  kGdsPerfCounterDsBankConfl = 0x1,
  kGdsPerfCounterWbufFlush = 0x2,
  kGdsPerfCounterWrComp = 0x3,
  kGdsPerfCounterWbufWr = 0x4,
  kGdsPerfCounterRbufHit = 0x5,
  kGdsPerfCounterRbufMiss = 0x6,
  kGdsPerfCounterSe0Sh0Noret = 0x7,
  kGdsPerfCounterSe0Sh0Ret = 0x8,
  kGdsPerfCounterSe0Sh0OrdCnt = 0x9,
  kGdsPerfCounterSe0Sh02CompReq = 0xA,
  kGdsPerfCounterSe0Sh0OrdWaveValid = 0xB,
  kGdsPerfCounterSe0Sh0GdsDataValid = 0xC,
  kGdsPerfCounterSe0Sh0GdsStallByOrd = 0xD,
  kGdsPerfCounterSe0Sh0GdsWrOp = 0xE,
  kGdsPerfCounterSe0Sh0GdsRdOp = 0xF,
  kGdsPerfCounterSe0Sh0GdsAtomOp = 0x10,
  kGdsPerfCounterSe0Sh0GdsRelOp = 0x11,
  kGdsPerfCounterSe0Sh0GdsCmpxchOp = 0x12,
  kGdsPerfCounterSe0Sh0GdsByteOp = 0x13,
  kGdsPerfCounterSe0Sh0GdsShortOp = 0x14,
  kGdsPerfCounterSe0Sh1Noret = 0x15,
  kGdsPerfCounterSe0Sh1Ret = 0x16,
  kGdsPerfCounterSe0Sh1OrdCnt = 0x17,
  kGdsPerfCounterSe0Sh12CompReq = 0x18,
  kGdsPerfCounterSe0Sh1OrdWaveValid = 0x19,
  kGdsPerfCounterSe0Sh1GdsDataValid = 0x1A,
  kGdsPerfCounterSe0Sh1GdsStallByOrd = 0x1B,
  kGdsPerfCounterSe0Sh1GdsWrOp = 0x1C,
  kGdsPerfCounterSe0Sh1GdsRdOp = 0x1D,
  kGdsPerfCounterSe0Sh1GdsAtomOp = 0x1E,
  kGdsPerfCounterSe0Sh1GdsRelOp = 0x1F,
  kGdsPerfCounterSe0Sh1GdsCmpxchOp = 0x20,
  kGdsPerfCounterSe0Sh1GdsByteOp = 0x21,
  kGdsPerfCounterSe0Sh1GdsShortOp = 0x22,
  kGdsPerfCounterSe1Sh0Noret = 0x23,
  kGdsPerfCounterSe1Sh0Ret = 0x24,
  kGdsPerfCounterSe1Sh0OrdCnt = 0x25,
  kGdsPerfCounterSe1Sh02CompReq = 0x26,
  kGdsPerfCounterSe1Sh0OrdWaveValid = 0x27,
  kGdsPerfCounterSe1Sh0GdsDataValid = 0x28,
  kGdsPerfCounterSe1Sh0GdsStallByOrd = 0x29,
  kGdsPerfCounterSe1Sh0GdsWrOp = 0x2A,
  kGdsPerfCounterSe1Sh0GdsRdOp = 0x2B,
  kGdsPerfCounterSe1Sh0GdsAtomOp = 0x2C,
  kGdsPerfCounterSe1Sh0GdsRelOp = 0x2D,
  kGdsPerfCounterSe1Sh0GdsCmpxchOp = 0x2E,
  kGdsPerfCounterSe1Sh0GdsByteOp = 0x2F,
  kGdsPerfCounterSe1Sh0GdsShortOp = 0x30,
  kGdsPerfCounterSe1Sh1Noret = 0x31,
  kGdsPerfCounterSe1Sh1Ret = 0x32,
  kGdsPerfCounterSe1Sh1OrdCnt = 0x33,
  kGdsPerfCounterSe1Sh12CompReq = 0x34,
  kGdsPerfCounterSe1Sh1OrdWaveValid = 0x35,
  kGdsPerfCounterSe1Sh1GdsDataValid = 0x36,
  kGdsPerfCounterSe1Sh1GdsStallByOrd = 0x37,
  kGdsPerfCounterSe1Sh1GdsWrOp = 0x38,
  kGdsPerfCounterSe1Sh1GdsRdOp = 0x39,
  kGdsPerfCounterSe1Sh1GdsAtomOp = 0x3A,
  kGdsPerfCounterSe1Sh1GdsRelOp = 0x3B,
  kGdsPerfCounterSe1Sh1GdsCmpxchOp = 0x3C,
  kGdsPerfCounterSe1Sh1GdsByteOp = 0x3D,
  kGdsPerfCounterSe1Sh1GdsShortOp = 0x3E,
  kGdsPerfCounterSe2Sh0Noret = 0x3F,
  kGdsPerfCounterSe2Sh0Ret = 0x40,
  kGdsPerfCounterSe2Sh0OrdCnt = 0x41,
  kGdsPerfCounterSe2Sh02CompReq = 0x42,
  kGdsPerfCounterSe2Sh0OrdWaveValid = 0x43,
  kGdsPerfCounterSe2Sh0GdsDataValid = 0x44,
  kGdsPerfCounterSe2Sh0GdsStallByOrd = 0x45,
  kGdsPerfCounterSe2Sh0GdsWrOp = 0x46,
  kGdsPerfCounterSe2Sh0GdsRdOp = 0x47,
  kGdsPerfCounterSe2Sh0GdsAtomOp = 0x48,
  kGdsPerfCounterSe2Sh0GdsRelOp = 0x49,
  kGdsPerfCounterSe2Sh0GdsCmpxchOp = 0x4A,
  kGdsPerfCounterSe2Sh0GdsByteOp = 0x4B,
  kGdsPerfCounterSe2Sh0GdsShortOp = 0x4C,
  kGdsPerfCounterSe2Sh1Noret = 0x4D,
  kGdsPerfCounterSe2Sh1Ret = 0x4E,
  kGdsPerfCounterSe2Sh1OrdCnt = 0x4F,
  kGdsPerfCounterSe2Sh12CompReq = 0x50,
  kGdsPerfCounterSe2Sh1OrdWaveValid = 0x51,
  kGdsPerfCounterSe2Sh1GdsDataValid = 0x52,
  kGdsPerfCounterSe2Sh1GdsStallByOrd = 0x53,
  kGdsPerfCounterSe2Sh1GdsWrOp = 0x54,
  kGdsPerfCounterSe2Sh1GdsRdOp = 0x55,
  kGdsPerfCounterSe2Sh1GdsAtomOp = 0x56,
  kGdsPerfCounterSe2Sh1GdsRelOp = 0x57,
  kGdsPerfCounterSe2Sh1GdsCmpxchOp = 0x58,
  kGdsPerfCounterSe2Sh1GdsByteOp = 0x59,
  kGdsPerfCounterSe2Sh1GdsShortOp = 0x5A,
  kGdsPerfCounterSe3Sh0Noret = 0x5B,
  kGdsPerfCounterSe3Sh0Ret = 0x5C,
  kGdsPerfCounterSe3Sh0OrdCnt = 0x5D,
  kGdsPerfCounterSe3Sh02CompReq = 0x5E,
  kGdsPerfCounterSe3Sh0OrdWaveValid = 0x5F,
  kGdsPerfCounterSe3Sh0GdsDataValid = 0x60,
  kGdsPerfCounterSe3Sh0GdsStallByOrd = 0x61,
  kGdsPerfCounterSe3Sh0GdsWrOp = 0x62,
  kGdsPerfCounterSe3Sh0GdsRdOp = 0x63,
  kGdsPerfCounterSe3Sh0GdsAtomOp = 0x64,
  kGdsPerfCounterSe3Sh0GdsRelOp = 0x65,
  kGdsPerfCounterSe3Sh0GdsCmpxchOp = 0x66,
  kGdsPerfCounterSe3Sh0GdsByteOp = 0x67,
  kGdsPerfCounterSe3Sh0GdsShortOp = 0x68,
  kGdsPerfCounterSe3Sh1Noret = 0x69,
  kGdsPerfCounterSe3Sh1Ret = 0x6A,
  kGdsPerfCounterSe3Sh1OrdCnt = 0x6B,
  kGdsPerfCounterSe3Sh12CompReq = 0x6C,
  kGdsPerfCounterSe3Sh1OrdWaveValid = 0x6D,
  kGdsPerfCounterSe3Sh1GdsDataValid = 0x6E,
  kGdsPerfCounterSe3Sh1GdsStallByOrd = 0x6F,
  kGdsPerfCounterSe3Sh1GdsWrOp = 0x70,
  kGdsPerfCounterSe3Sh1GdsRdOp = 0x71,
  kGdsPerfCounterSe3Sh1GdsAtomOp = 0x72,
  kGdsPerfCounterSe3Sh1GdsRelOp = 0x73,
  kGdsPerfCounterSe3Sh1GdsCmpxchOp = 0x74,
  kGdsPerfCounterSe3Sh1GdsByteOp = 0x75,
  kGdsPerfCounterSe3Sh1GdsShortOp = 0x76,
  kGdsPerfCounterGwsReleased = 0x77,
  kGdsPerfCounterGwsBypass = 0x78,
  kNumGdsPerfCounters = 0x79,
  kGdsPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::TcaPerfCounter : __int32
{
  kTcaPerfCounterNone = 0x0,
  kTcaPerfCounterCycle = 0x1,
  kTcaPerfCounterBusy = 0x2,
  kTcaPerfCounterForcedHoleTcc0 = 0x3,
  kTcaPerfCounterForcedHoleTcc1 = 0x4,
  kTcaPerfCounterForcedHoleTcc2 = 0x5,
  kTcaPerfCounterForcedHoleTcc3 = 0x6,
  kTcaPerfCounterForcedHoleTcc4 = 0x7,
  kTcaPerfCounterForcedHoleTcc5 = 0x8,
  kTcaPerfCounterForcedHoleTcc6 = 0x9,
  kTcaPerfCounterForcedHoleTcc7 = 0xA,
  kTcaPerfCounterReqTcc0 = 0xB,
  kTcaPerfCounterReqTcc1 = 0xC,
  kTcaPerfCounterReqTcc2 = 0xD,
  kTcaPerfCounterReqTcc3 = 0xE,
  kTcaPerfCounterReqTcc4 = 0xF,
  kTcaPerfCounterReqTcc5 = 0x10,
  kTcaPerfCounterReqTcc6 = 0x11,
  kTcaPerfCounterReqTcc7 = 0x12,
  kTcaPerfCounterCrossbarDoubleArbTcc0 = 0x13,
  kTcaPerfCounterCrossbarDoubleArbTcc1 = 0x14,
  kTcaPerfCounterCrossbarDoubleArbTcc2 = 0x15,
  kTcaPerfCounterCrossbarDoubleArbTcc3 = 0x16,
  kTcaPerfCounterCrossbarDoubleArbTcc4 = 0x17,
  kTcaPerfCounterCrossbarDoubleArbTcc5 = 0x18,
  kTcaPerfCounterCrossbarDoubleArbTcc6 = 0x19,
  kTcaPerfCounterCrossbarDoubleArbTcc7 = 0x1A,
  kTcaPerfCounterCrossbarStallTcc0 = 0x1B,
  kTcaPerfCounterCrossbarStallTcc1 = 0x1C,
  kTcaPerfCounterCrossbarStallTcc2 = 0x1D,
  kTcaPerfCounterCrossbarStallTcc3 = 0x1E,
  kTcaPerfCounterCrossbarStallTcc4 = 0x1F,
  kTcaPerfCounterCrossbarStallTcc5 = 0x20,
  kTcaPerfCounterCrossbarStallTcc6 = 0x21,
  kTcaPerfCounterCrossbarStallTcc7 = 0x22,
  kTcaPerfCounterForcedHoleTcs = 0x23,
  kTcaPerfCounterReqTcs = 0x24,
  kTcaPerfCounterCrossbarDoubleArbTcs = 0x25,
  kTcaPerfCounterCrossbarStallTcs = 0x26,
  kNumTcaPerfCounters = 0x27,
  kTcaPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::Broadcast : __int32
{
  kBroadcastShaderEngine0 = 0x0,
  kBroadcastShaderEngine1 = 0x1,
  kBroadcastAll = 0x2,
};

enum sce::Gnm::TcsPerfCounter : __int32
{
  kTcsPerfCounterNone = 0x0,
  kTcsPerfCounterCycle = 0x1,
  kTcsPerfCounterBusy = 0x2,
  kTcsPerfCounterReq = 0x3,
  kTcsPerfCounterRead = 0x4,
  kTcsPerfCounterWrite = 0x5,
  kTcsPerfCounterAtomic = 0x6,
  kTcsPerfCounterHoleFifoFull = 0x7,
  kTcsPerfCounterReqFifoFull = 0x8,
  kTcsPerfCounterReqCreditStall = 0x9,
  kTcsPerfCounterReqNoSrcDataStall = 0xA,
  kTcsPerfCounterReqStall = 0xB,
  kTcsPerfCounterTcsChubReqSend = 0xC,
  kTcsPerfCounterChubTcsRetSend = 0xD,
  kTcsPerfCounterReturnAck = 0xE,
  kTcsPerfCounterReturnData = 0xF,
  kTcsPerfCounterIbTotalRequestsStall = 0x10,
  kTcsPerfCounterIbStall = 0x11,
  kTcsPerfCounterTcaLevel = 0x12,
  kTcsPerfCounterHoleLevel = 0x13,
  kTcsPerfCounterChubLevel = 0x14,
  kTcsPerfCounterClient0Req = 0x40,
  kTcsPerfCounterClient1Req = 0x41,
  kTcsPerfCounterClient2Req = 0x42,
  kTcsPerfCounterClient3Req = 0x43,
  kTcsPerfCounterClient4Req = 0x44,
  kTcsPerfCounterClient5Req = 0x45,
  kTcsPerfCounterClient6Req = 0x46,
  kTcsPerfCounterClient7Req = 0x47,
  kTcsPerfCounterClient8Req = 0x48,
  kTcsPerfCounterClient9Req = 0x49,
  kTcsPerfCounterClient10Req = 0x4A,
  kTcsPerfCounterClient11Req = 0x4B,
  kTcsPerfCounterClient12Req = 0x4C,
  kTcsPerfCounterClient13Req = 0x4D,
  kTcsPerfCounterClient14Req = 0x4E,
  kTcsPerfCounterClient15Req = 0x4F,
  kTcsPerfCounterClient16Req = 0x50,
  kTcsPerfCounterClient17Req = 0x51,
  kTcsPerfCounterClient18Req = 0x52,
  kTcsPerfCounterClient19Req = 0x53,
  kTcsPerfCounterClient20Req = 0x54,
  kTcsPerfCounterClient21Req = 0x55,
  kTcsPerfCounterClient22Req = 0x56,
  kTcsPerfCounterClient23Req = 0x57,
  kTcsPerfCounterClient24Req = 0x58,
  kTcsPerfCounterClient25Req = 0x59,
  kTcsPerfCounterClient26Req = 0x5A,
  kTcsPerfCounterClient27Req = 0x5B,
  kTcsPerfCounterClient28Req = 0x5C,
  kTcsPerfCounterClient29Req = 0x5D,
  kTcsPerfCounterClient30Req = 0x5E,
  kTcsPerfCounterClient31Req = 0x5F,
  kTcsPerfCounterClient32Req = 0x60,
  kTcsPerfCounterClient33Req = 0x61,
  kTcsPerfCounterClient34Req = 0x62,
  kTcsPerfCounterClient35Req = 0x63,
  kTcsPerfCounterClient36Req = 0x64,
  kTcsPerfCounterClient37Req = 0x65,
  kTcsPerfCounterClient38Req = 0x66,
  kTcsPerfCounterClient39Req = 0x67,
  kTcsPerfCounterClient40Req = 0x68,
  kTcsPerfCounterClient41Req = 0x69,
  kTcsPerfCounterClient42Req = 0x6A,
  kTcsPerfCounterClient43Req = 0x6B,
  kTcsPerfCounterClient44Req = 0x6C,
  kTcsPerfCounterClient45Req = 0x6D,
  kTcsPerfCounterClient46Req = 0x6E,
  kTcsPerfCounterClient47Req = 0x6F,
  kTcsPerfCounterClient48Req = 0x70,
  kTcsPerfCounterClient49Req = 0x71,
  kTcsPerfCounterClient50Req = 0x72,
  kTcsPerfCounterClient51Req = 0x73,
  kTcsPerfCounterClient52Req = 0x74,
  kTcsPerfCounterClient53Req = 0x75,
  kTcsPerfCounterClient54Req = 0x76,
  kTcsPerfCounterClient55Req = 0x77,
  kTcsPerfCounterClient56Req = 0x78,
  kTcsPerfCounterClient57Req = 0x79,
  kTcsPerfCounterClient58Req = 0x7A,
  kTcsPerfCounterClient59Req = 0x7B,
  kTcsPerfCounterClient60Req = 0x7C,
  kTcsPerfCounterClient61Req = 0x7D,
  kTcsPerfCounterClient62Req = 0x7E,
  kTcsPerfCounterClient63Req = 0x7F,
  kNumTcsPerfCounters = 0x80,
  kTcsPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::TccPerfCounter : __int32
{
  kTccPerfCounterNone = 0x0,
  kTccPerfCounterCycle = 0x1,
  kTccPerfCounterBusy = 0x2,
  kTccPerfCounterReq = 0x3,
  kTccPerfCounterStreamingReq = 0x4,
  kTccPerfCounterRead = 0x5,
  kTccPerfCounterWrite = 0x6,
  kTccPerfCounterAtomic = 0x7,
  kTccPerfCounterHit = 0xA,
  kTccPerfCounterMiss = 0xB,
  kTccPerfCounterDewriteAllocateHit = 0xC,
  kTccPerfCounterFullyWrittenHit = 0xD,
  kTccPerfCounterWriteback = 0xE,
  kTccPerfCounterLatencyFifoFull = 0xF,
  kTccPerfCounterSrcFifoFull = 0x10,
  kTccPerfCounterHoleFifoFull = 0x11,
  kTccPerfCounterMcWrreq = 0x12,
  kTccPerfCounterMcWrreqStall = 0x13,
  kTccPerfCounterMcWrreqCreditStall = 0x14,
  kTccPerfCounterMcWrreqMcHaltStall = 0x15,
  kTccPerfCounterTooManyMcWrreqsStall = 0x16,
  kTccPerfCounterMcWrreqLevel = 0x17,
  kTccPerfCounterMcRdreq = 0x18,
  kTccPerfCounterMcRdreqCreditStall = 0x19,
  kTccPerfCounterMcRdreqMcHaltStall = 0x1A,
  kTccPerfCounterMcRdreqLevel = 0x1B,
  kTccPerfCounterTagStall = 0x1C,
  kTccPerfCounterTagWritebackFifoFull = 0x1D,
  kTccPerfCounterTagMissNothingReplaceableStall = 0x1E,
  kTccPerfCounterReadReturnTimeout = 0x1F,
  kTccPerfCounterWritebackReadTimeout = 0x20,
  kTccPerfCounterReadReturnFullBubble = 0x21,
  kTccPerfCounterBubble = 0x22,
  kTccPerfCounterReturnAck = 0x23,
  kTccPerfCounterReturnData = 0x24,
  kTccPerfCounterReturnHole = 0x25,
  kTccPerfCounterReturnAckHole = 0x26,
  kTccPerfCounterIbStall = 0x27,
  kTccPerfCounterTcaLevel = 0x28,
  kTccPerfCounterHoleLevel = 0x29,
  kTccPerfCounterMcRdretNack = 0x2A,
  kTccPerfCounterMcWrretNack = 0x2B,
  kTccPerfCounterClient0Req = 0x40,
  kTccPerfCounterClient1Req = 0x41,
  kTccPerfCounterClient2Req = 0x42,
  kTccPerfCounterClient3Req = 0x43,
  kTccPerfCounterClient4Req = 0x44,
  kTccPerfCounterClient5Req = 0x45,
  kTccPerfCounterClient6Req = 0x46,
  kTccPerfCounterClient7Req = 0x47,
  kTccPerfCounterClient8Req = 0x48,
  kTccPerfCounterClient9Req = 0x49,
  kTccPerfCounterClient10Req = 0x4A,
  kTccPerfCounterClient11Req = 0x4B,
  kTccPerfCounterClient12Req = 0x4C,
  kTccPerfCounterClient13Req = 0x4D,
  kTccPerfCounterClient14Req = 0x4E,
  kTccPerfCounterClient15Req = 0x4F,
  kTccPerfCounterClient16Req = 0x50,
  kTccPerfCounterClient17Req = 0x51,
  kTccPerfCounterClient18Req = 0x52,
  kTccPerfCounterClient19Req = 0x53,
  kTccPerfCounterClient20Req = 0x54,
  kTccPerfCounterClient21Req = 0x55,
  kTccPerfCounterClient22Req = 0x56,
  kTccPerfCounterClient23Req = 0x57,
  kTccPerfCounterClient24Req = 0x58,
  kTccPerfCounterClient25Req = 0x59,
  kTccPerfCounterClient26Req = 0x5A,
  kTccPerfCounterClient27Req = 0x5B,
  kTccPerfCounterClient28Req = 0x5C,
  kTccPerfCounterClient29Req = 0x5D,
  kTccPerfCounterClient30Req = 0x5E,
  kTccPerfCounterClient31Req = 0x5F,
  kTccPerfCounterClient32Req = 0x60,
  kTccPerfCounterClient33Req = 0x61,
  kTccPerfCounterClient34Req = 0x62,
  kTccPerfCounterClient35Req = 0x63,
  kTccPerfCounterClient36Req = 0x64,
  kTccPerfCounterClient37Req = 0x65,
  kTccPerfCounterClient38Req = 0x66,
  kTccPerfCounterClient39Req = 0x67,
  kTccPerfCounterClient40Req = 0x68,
  kTccPerfCounterClient41Req = 0x69,
  kTccPerfCounterClient42Req = 0x6A,
  kTccPerfCounterClient43Req = 0x6B,
  kTccPerfCounterClient44Req = 0x6C,
  kTccPerfCounterClient45Req = 0x6D,
  kTccPerfCounterClient46Req = 0x6E,
  kTccPerfCounterClient47Req = 0x6F,
  kTccPerfCounterClient48Req = 0x70,
  kTccPerfCounterClient49Req = 0x71,
  kTccPerfCounterClient50Req = 0x72,
  kTccPerfCounterClient51Req = 0x73,
  kTccPerfCounterClient52Req = 0x74,
  kTccPerfCounterClient53Req = 0x75,
  kTccPerfCounterClient54Req = 0x76,
  kTccPerfCounterClient55Req = 0x77,
  kTccPerfCounterClient56Req = 0x78,
  kTccPerfCounterClient57Req = 0x79,
  kTccPerfCounterClient58Req = 0x7A,
  kTccPerfCounterClient59Req = 0x7B,
  kTccPerfCounterClient60Req = 0x7C,
  kTccPerfCounterClient61Req = 0x7D,
  kTccPerfCounterClient62Req = 0x7E,
  kTccPerfCounterClient63Req = 0x7F,
  kTccPerfCounterNormalWriteback = 0x80,
  kTccPerfCounterTcOpWbl2VolWriteback = 0x81,
  kTccPerfCounterTcOpWbinvl2Writeback = 0x82,
  kTccPerfCounterAllTcOpWbWriteback = 0x83,
  kTccPerfCounterNormalEvict = 0x84,
  kTccPerfCounterTcOpInvl2VolEvict = 0x85,
  kTccPerfCounterTcOpInvl1L2VolEvict = 0x86,
  kTccPerfCounterTcOpWbl2VolEvict = 0x87,
  kTccPerfCounterTcOpWbinvl2Evict = 0x88,
  kTccPerfCounterAllTcOpInvEvict = 0x89,
  kTccPerfCounterAllTcOpInvVolEvict = 0x8A,
  kTccPerfCounterTcOpWbl2VolCycle = 0x8B,
  kTccPerfCounterTcOpInvl2VolCycle = 0x8C,
  kTccPerfCounterTcOpInvl1L2VolCycle = 0x8D,
  kTccPerfCounterTcOpWbinvl2Cycle = 0x8E,
  kTccPerfCounterAllTcOpWbOrInvCycle = 0x8F,
  kTccPerfCounterAllTcOpWbOrInvVolCycle = 0x90,
  kTccPerfCounterTcOpWbl2VolStart = 0x91,
  kTccPerfCounterTcOpInvl2VolStart = 0x92,
  kTccPerfCounterTcOpInvl1L2VolStart = 0x93,
  kTccPerfCounterTcOpWbinvl2Start = 0x94,
  kTccPerfCounterAllTcOpWbOrInvStart = 0x95,
  kTccPerfCounterAllTcOpWbOrInvVolStart = 0x96,
  kTccPerfCounterTcOpWbl2VolFinish = 0x97,
  kTccPerfCounterTcOpInvl2VolFinish = 0x98,
  kTccPerfCounterTcOpInvl1L2VolFinish = 0x99,
  kTccPerfCounterTcOpWbinvl2Finish = 0x9A,
  kTccPerfCounterAllTcOpWbOrInvFinish = 0x9B,
  kTccPerfCounterAllTcOpWbOrInvVolFinish = 0x9C,
  kTccPerfCounterVolMcWrreq = 0x9D,
  kTccPerfCounterVolMcRdreq = 0x9E,
  kTccPerfCounterVolReq = 0x9F,
  kNumTccPerfCounters = 0xA0,
  kTccPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::VgtPerfCounter : __int32
{
  kVgtPerfCounterVgtSpiEsthreadEventWindowActive = 0x0,
  kVgtPerfCounterVgtSpiEsvertValid = 0x1,
  kVgtPerfCounterVgtSpiEsvertEov = 0x2,
  kVgtPerfCounterVgtSpiEsvertStalled = 0x3,
  kVgtPerfCounterVgtSpiEsvertStarvedBusy = 0x4,
  kVgtPerfCounterVgtSpiEsvertStarvedIdle = 0x5,
  kVgtPerfCounterVgtSpiEsvertStatic = 0x6,
  kVgtPerfCounterVgtSpiEsthreadIsEvent = 0x7,
  kVgtPerfCounterVgtSpiEsthreadSend = 0x8,
  kVgtPerfCounterVgtSpiGsprimValid = 0x9,
  kVgtPerfCounterVgtSpiGsprimEov = 0xA,
  kVgtPerfCounterVgtSpiGsprimCont = 0xB,
  kVgtPerfCounterVgtSpiGsprimStalled = 0xC,
  kVgtPerfCounterVgtSpiGsprimStarvedBusy = 0xD,
  kVgtPerfCounterVgtSpiGsprimStarvedIdle = 0xE,
  kVgtPerfCounterVgtSpiGsprimStatic = 0xF,
  kVgtPerfCounterVgtSpiGsthreadEventWindowActive = 0x10,
  kVgtPerfCounterVgtSpiGsthreadIsEvent = 0x11,
  kVgtPerfCounterVgtSpiGsthreadSend = 0x12,
  kVgtPerfCounterVgtSpiVsthreadEventWindowActive = 0x13,
  kVgtPerfCounterVgtSpiVsvertSend = 0x14,
  kVgtPerfCounterVgtSpiVsvertEov = 0x15,
  kVgtPerfCounterVgtSpiVsvertStalled = 0x16,
  kVgtPerfCounterVgtSpiVsvertStarvedBusy = 0x17,
  kVgtPerfCounterVgtSpiVsvertStarvedIdle = 0x18,
  kVgtPerfCounterVgtSpiVsvertStatic = 0x19,
  kVgtPerfCounterVgtSpiVsthreadIsEvent = 0x1A,
  kVgtPerfCounterVgtSpiVsthreadSend = 0x1B,
  kVgtPerfCounterVgtPaEventWindowActive = 0x1C,
  kVgtPerfCounterVgtPaClipvSend = 0x1D,
  kVgtPerfCounterVgtPaClipvFirstvert = 0x1E,
  kVgtPerfCounterVgtPaClipvStalled = 0x1F,
  kVgtPerfCounterVgtPaClipvStarvedBusy = 0x20,
  kVgtPerfCounterVgtPaClipvStarvedIdle = 0x21,
  kVgtPerfCounterVgtPaClipvStatic = 0x22,
  kVgtPerfCounterVgtPaClippSend = 0x23,
  kVgtPerfCounterVgtPaClippEop = 0x24,
  kVgtPerfCounterVgtPaClippIsEvent = 0x25,
  kVgtPerfCounterVgtPaClippNullPrim = 0x26,
  kVgtPerfCounterVgtPaClippNewVtxVect = 0x27,
  kVgtPerfCounterVgtPaClippStalled = 0x28,
  kVgtPerfCounterVgtPaClippStarvedBusy = 0x29,
  kVgtPerfCounterVgtPaClippStarvedIdle = 0x2A,
  kVgtPerfCounterVgtPaClippStatic = 0x2B,
  kVgtPerfCounterVgtPaClipsSend = 0x2C,
  kVgtPerfCounterVgtPaClipsStalled = 0x2D,
  kVgtPerfCounterVgtPaClipsStarvedBusy = 0x2E,
  kVgtPerfCounterVgtPaClipsStarvedIdle = 0x2F,
  kVgtPerfCounterVgtPaClipsStatic = 0x30,
  kVgtPerfCounterVsvertDsSend = 0x31,
  kVgtPerfCounterVsvertApiSend = 0x32,
  kVgtPerfCounterHsTifStall = 0x33,
  kVgtPerfCounterHsInputStall = 0x34,
  kVgtPerfCounterHsInterfaceStall = 0x35,
  kVgtPerfCounterHsTfmStall = 0x36,
  kVgtPerfCounterTe11Starved = 0x37,
  kVgtPerfCounterGsEventStall = 0x38,
  kVgtPerfCounterVgtBusy = 0x40,
  kVgtPerfCounterVgtGsBusy = 0x41,
  kVgtPerfCounterEsvertStalledEsTbl = 0x42,
  kVgtPerfCounterEsvertStalledGsTbl = 0x43,
  kVgtPerfCounterEsvertStalledGsEvent = 0x44,
  kVgtPerfCounterEsvertStalledGsprim = 0x45,
  kVgtPerfCounterGsprimStalledEsTbl = 0x46,
  kVgtPerfCounterGsprimStalledGsTbl = 0x47,
  kVgtPerfCounterGsprimStalledGsEvent = 0x48,
  kVgtPerfCounterGsprimStalledEsvert = 0x49,
  kVgtPerfCounterEsthreadStalledEsRbFull = 0x4A,
  kVgtPerfCounterEsthreadStalledSpiBp = 0x4B,
  kVgtPerfCounterCountersAvailStalled = 0x4C,
  kVgtPerfCounterGsRbSpaceAvailStalled = 0x4D,
  kVgtPerfCounterGsIssueRtrStalled = 0x4E,
  kVgtPerfCounterGsthreadStalled = 0x4F,
  kVgtPerfCounterStrmoutStalled = 0x50,
  kVgtPerfCounterWaitForEsDoneStalled = 0x51,
  kVgtPerfCounterCmStalledByGog = 0x52,
  kVgtPerfCounterCmReadingStalled = 0x53,
  kVgtPerfCounterCmStalledByGsfetchDone = 0x54,
  kVgtPerfCounterGogVsTblStalled = 0x55,
  kVgtPerfCounterGogOutIndxStalled = 0x56,
  kVgtPerfCounterGogOutPrimStalled = 0x57,
  kVgtPerfCounterWaveidStalled = 0x58,
  kVgtPerfCounterGogBusy = 0x59,
  kVgtPerfCounterReusedVsIndices = 0x5A,
  kVgtPerfCounterSclkRegVldEvent = 0x5B,
  kVgtPerfCounterSclkCoreVldEvent = 0x5D,
  kVgtPerfCounterSclkGsVldEvent = 0x5F,
  kVgtPerfCounterVgtSpiLsvertValid = 0x60,
  kVgtPerfCounterVgtSpiLsvertEov = 0x61,
  kVgtPerfCounterVgtSpiLsvertStalled = 0x62,
  kVgtPerfCounterVgtSpiLsvertStarvedBusy = 0x63,
  kVgtPerfCounterVgtSpiLsvertStarvedIdle = 0x64,
  kVgtPerfCounterVgtSpiLsvertStatic = 0x65,
  kVgtPerfCounterVgtSpiLswaveEventWindowActive = 0x66,
  kVgtPerfCounterVgtSpiLswaveIsEvent = 0x67,
  kVgtPerfCounterVgtSpiLswaveSend = 0x68,
  kVgtPerfCounterVgtSpiHsvertValid = 0x69,
  kVgtPerfCounterVgtSpiHsvertEov = 0x6A,
  kVgtPerfCounterVgtSpiHsvertStalled = 0x6B,
  kVgtPerfCounterVgtSpiHsvertStarvedBusy = 0x6C,
  kVgtPerfCounterVgtSpiHsvertStarvedIdle = 0x6D,
  kVgtPerfCounterVgtSpiHsvertStatic = 0x6E,
  kVgtPerfCounterVgtSpiHswaveEventWindowActive = 0x6F,
  kVgtPerfCounterVgtSpiHswaveIsEvent = 0x70,
  kVgtPerfCounterVgtSpiHswaveSend = 0x71,
  kVgtPerfCounterNullTessPatches = 0x73,
  kVgtPerfCounterLsThreadGroups = 0x74,
  kVgtPerfCounterHsThreadGroups = 0x75,
  kVgtPerfCounterEsThreadGroups = 0x76,
  kVgtPerfCounterVsThreadGroups = 0x77,
  kVgtPerfCounterLsDoneLatency = 0x78,
  kVgtPerfCounterHsDoneLatency = 0x79,
  kVgtPerfCounterEsDoneLatency = 0x7A,
  kVgtPerfCounterGsDoneLatency = 0x7B,
  kVgtPerfCounterVgtHsBusy = 0x7C,
  kVgtPerfCounterVgtTe11Busy = 0x7D,
  kVgtPerfCounterLsFlush = 0x7E,
  kVgtPerfCounterHsFlush = 0x7F,
  kVgtPerfCounterEsFlush = 0x80,
  kVgtPerfCounterGsFlush = 0x81,
  kVgtPerfCounterLsDone = 0x82,
  kVgtPerfCounterHsDone = 0x83,
  kVgtPerfCounterEsDone = 0x84,
  kVgtPerfCounterGsDone = 0x85,
  kVgtPerfCounterVsfetchDone = 0x86,
  kVgtPerfCounterEsRingHighWaterMark = 0x88,
  kVgtPerfCounterGsRingHighWaterMark = 0x89,
  kVgtPerfCounterVsTableHighWaterMark = 0x8A,
  kVgtPerfCounterHsTgsActiveHighWaterMark = 0x8B,
  kNumVgtPerfCounters = 0x8C,
  kVgtPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::PaSuPerfCounter : __int32
{
  kPaSuPerfCounterPasxReq = 0x0,
  kPaSuPerfCounterPasxDisablePipe = 0x1,
  kPaSuPerfCounterPasxFirstVector = 0x2,
  kPaSuPerfCounterPasxSecondVector = 0x3,
  kPaSuPerfCounterPasxFirstDead = 0x4,
  kPaSuPerfCounterPasxSecondDead = 0x5,
  kPaSuPerfCounterPasxVtxKillDiscard = 0x6,
  kPaSuPerfCounterPasxVtxNanDiscard = 0x7,
  kPaSuPerfCounterPaInputPrim = 0x8,
  kPaSuPerfCounterPaInputNullPrim = 0x9,
  kPaSuPerfCounterPaInputEventFlag = 0xA,
  kPaSuPerfCounterPaInputFirstPrimSlot = 0xB,
  kPaSuPerfCounterPaInputEndOfPacket = 0xC,
  kPaSuPerfCounterPaInputExtendedEvent = 0xD,
  kPaSuPerfCounterClprCullPrim = 0xE,
  kPaSuPerfCounterClprVvucpCullPrim = 0xF,
  kPaSuPerfCounterClprVvCullPrim = 0x10,
  kPaSuPerfCounterClprUcpCullPrim = 0x11,
  kPaSuPerfCounterClprVtxKillCullPrim = 0x12,
  kPaSuPerfCounterClprVtxNanCullPrim = 0x13,
  kPaSuPerfCounterClprCullToNullPrim = 0x14,
  kPaSuPerfCounterClprVvucpClipPrim = 0x15,
  kPaSuPerfCounterClprVvClipPrim = 0x16,
  kPaSuPerfCounterClprUcpClipPrim = 0x17,
  kPaSuPerfCounterClprPointClipCandidate = 0x18,
  kPaSuPerfCounterClprClipPlaneCnt1 = 0x19,
  kPaSuPerfCounterClprClipPlaneCnt2 = 0x1A,
  kPaSuPerfCounterClprClipPlaneCnt3 = 0x1B,
  kPaSuPerfCounterClprClipPlaneCnt4 = 0x1C,
  kPaSuPerfCounterClprClipPlaneCnt58 = 0x1D,
  kPaSuPerfCounterClprClipPlaneCnt912 = 0x1E,
  kPaSuPerfCounterClprClipPlaneNear = 0x1F,
  kPaSuPerfCounterClprClipPlaneFar = 0x20,
  kPaSuPerfCounterClprClipPlaneLeft = 0x21,
  kPaSuPerfCounterClprClipPlaneRight = 0x22,
  kPaSuPerfCounterClprClipPlaneTop = 0x23,
  kPaSuPerfCounterClprClipPlaneBottom = 0x24,
  kPaSuPerfCounterClprGscKillCullPrim = 0x25,
  kPaSuPerfCounterClprRasterKillCullPrim = 0x26,
  kPaSuPerfCounterClsmNullPrim = 0x27,
  kPaSuPerfCounterClsmTotallyVisiblePrim = 0x28,
  kPaSuPerfCounterClsmCullToNullPrim = 0x29,
  kPaSuPerfCounterClsmOutPrimCnt1 = 0x2A,
  kPaSuPerfCounterClsmOutPrimCnt2 = 0x2B,
  kPaSuPerfCounterClsmOutPrimCnt3 = 0x2C,
  kPaSuPerfCounterClsmOutPrimCnt4 = 0x2D,
  kPaSuPerfCounterClsmOutPrimCnt58 = 0x2E,
  kPaSuPerfCounterClsmOutPrimCnt913 = 0x2F,
  kPaSuPerfCounterClipgaVteKillPrim = 0x30,
  kPaSuPerfCounterSuInputPrim = 0x31,
  kPaSuPerfCounterSuInputClipPrim = 0x32,
  kPaSuPerfCounterSuInputNullPrim = 0x33,
  kPaSuPerfCounterSuInputPrimDual = 0x34,
  kPaSuPerfCounterSuInputClipPrimDual = 0x35,
  kPaSuPerfCounterSuZeroAreaCullPrim = 0x36,
  kPaSuPerfCounterSuBackFaceCullPrim = 0x37,
  kPaSuPerfCounterSuFrontFaceCullPrim = 0x38,
  kPaSuPerfCounterSuPolymodeFaceCull = 0x39,
  kPaSuPerfCounterSuPolymodeBackCull = 0x3A,
  kPaSuPerfCounterSuPolymodeFrontCull = 0x3B,
  kPaSuPerfCounterSuPolymodeInvalidFill = 0x3C,
  kPaSuPerfCounterSuOutputPrim = 0x3D,
  kPaSuPerfCounterSuOutputClipPrim = 0x3E,
  kPaSuPerfCounterSuOutputNullPrim = 0x3F,
  kPaSuPerfCounterSuOutputEventFlag = 0x40,
  kPaSuPerfCounterSuOutputFirstPrimSlot = 0x41,
  kPaSuPerfCounterSuOutputEndOfPacket = 0x42,
  kPaSuPerfCounterSuOutputPolymodeFace = 0x43,
  kPaSuPerfCounterSuOutputPolymodeBack = 0x44,
  kPaSuPerfCounterSuOutputPolymodeFront = 0x45,
  kPaSuPerfCounterSuOutClipPolymodeFace = 0x46,
  kPaSuPerfCounterSuOutClipPolymodeBack = 0x47,
  kPaSuPerfCounterSuOutClipPolymodeFront = 0x48,
  kPaSuPerfCounterSuOutputPrimDual = 0x49,
  kPaSuPerfCounterSuOutputClipPrimDual = 0x4A,
  kPaSuPerfCounterSuOutputPolymodeDual = 0x4B,
  kPaSuPerfCounterSuOutputClipPolymodeDual = 0x4C,
  kPaSuPerfCounterPasxReqIdle = 0x4D,
  kPaSuPerfCounterPasxReqBusy = 0x4E,
  kPaSuPerfCounterPasxReqStalled = 0x4F,
  kPaSuPerfCounterPasxRecIdle = 0x50,
  kPaSuPerfCounterPasxRecBusy = 0x51,
  kPaSuPerfCounterPasxRecStarvedSx = 0x52,
  kPaSuPerfCounterPasxRecStalled = 0x53,
  kPaSuPerfCounterPasxRecStalledPosMem = 0x54,
  kPaSuPerfCounterPasxRecStalledCcgsmIn = 0x55,
  kPaSuPerfCounterCcgsmIdle = 0x56,
  kPaSuPerfCounterCcgsmBusy = 0x57,
  kPaSuPerfCounterCcgsmStalled = 0x58,
  kPaSuPerfCounterClprimIdle = 0x59,
  kPaSuPerfCounterClprimBusy = 0x5A,
  kPaSuPerfCounterClprimStalled = 0x5B,
  kPaSuPerfCounterClprimStarvedCcgsm = 0x5C,
  kPaSuPerfCounterClipsmIdle = 0x5D,
  kPaSuPerfCounterClipsmBusy = 0x5E,
  kPaSuPerfCounterClipsmWaitClipVertEngh = 0x5F,
  kPaSuPerfCounterClipsmWaitHighPriSeq = 0x60,
  kPaSuPerfCounterClipsmWaitClipga = 0x61,
  kPaSuPerfCounterClipsmWaitAvailVteClip = 0x62,
  kPaSuPerfCounterClipsmWaitClipOutsm = 0x63,
  kPaSuPerfCounterClipgaIdle = 0x64,
  kPaSuPerfCounterClipgaBusy = 0x65,
  kPaSuPerfCounterClipgaStarvedVteClip = 0x66,
  kPaSuPerfCounterClipgaStalled = 0x67,
  kPaSuPerfCounterClipIdle = 0x68,
  kPaSuPerfCounterClipBusy = 0x69,
  kPaSuPerfCounterSuIdle = 0x6A,
  kPaSuPerfCounterSuBusy = 0x6B,
  kPaSuPerfCounterSuStarvedClip = 0x6C,
  kPaSuPerfCounterSuStalledSc = 0x6D,
  kPaSuPerfCounterClDynSclkVld = 0x6E,
  kPaSuPerfCounterSuDynSclkVld = 0x6F,
  kPaSuPerfCounterPaRegSclkVld = 0x70,
  kPaSuPerfCounterSuMultiGpuPrimFilterCull = 0x71,
  kPaSuPerfCounterPasxSe0Req = 0x72,
  kPaSuPerfCounterPasxSe1Req = 0x73,
  kPaSuPerfCounterPasxSe0FirstVector = 0x74,
  kPaSuPerfCounterPasxSe0SecondVector = 0x75,
  kPaSuPerfCounterPasxSe1FirstVector = 0x76,
  kPaSuPerfCounterPasxSe1SecondVector = 0x77,
  kPaSuPerfCounterSuSe0PrimFilterCull = 0x78,
  kPaSuPerfCounterSuSe1PrimFilterCull = 0x79,
  kPaSuPerfCounterSuSe01PrimFilterCull = 0x7A,
  kPaSuPerfCounterSuSe0OutputPrim = 0x7B,
  kPaSuPerfCounterSuSe1OutputPrim = 0x7C,
  kPaSuPerfCounterSuSe01OutputPrim = 0x7D,
  kPaSuPerfCounterSuSe0OutputNullPrim = 0x7E,
  kPaSuPerfCounterSuSe1OutputNullPrim = 0x7F,
  kPaSuPerfCounterSuSe01OutputNullPrim = 0x80,
  kPaSuPerfCounterSuSe0OutputFirstPrimSlot = 0x81,
  kPaSuPerfCounterSuSe1OutputFirstPrimSlot = 0x82,
  kPaSuPerfCounterSuSe0StalledSc = 0x83,
  kPaSuPerfCounterSuSe1StalledSc = 0x84,
  kPaSuPerfCounterSuSe01StalledSc = 0x85,
  kPaSuPerfCounterClsmClippingPrim = 0x86,
  kPaSuPerfCounterSuCulledPrim = 0x87,
  kPaSuPerfCounterSuOutputEopg = 0x88,
  kPaSuPerfCounterSuSe2PrimFilterCull = 0x89,
  kPaSuPerfCounterSuSe3PrimFilterCull = 0x8A,
  kPaSuPerfCounterSuSe2OutputPrim = 0x8B,
  kPaSuPerfCounterSuSe3OutputPrim = 0x8C,
  kPaSuPerfCounterSuSe2OutputNullPrim = 0x8D,
  kPaSuPerfCounterSuSe3OutputNullPrim = 0x8E,
  kPaSuPerfCounterSuSe0OutputEndOfPacket = 0x8F,
  kPaSuPerfCounterSuSe1OutputEndOfPacket = 0x90,
  kPaSuPerfCounterSuSe2OutputEndOfPacket = 0x91,
  kPaSuPerfCounterSuSe3OutputEndOfPacket = 0x92,
  kPaSuPerfCounterSuSe0OutputEopg = 0x93,
  kPaSuPerfCounterSuSe1OutputEopg = 0x94,
  kPaSuPerfCounterSuSe2OutputEopg = 0x95,
  kPaSuPerfCounterSuSe3OutputEopg = 0x96,
  kPaSuPerfCounterSuSe2StalledSc = 0x97,
  kPaSuPerfCounterSuSe3StalledSc = 0x98,
  kNumPaSuPerfCounters = 0x99,
  kPaSuPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::PaScPerfCounter : __int32
{
  kPaScPerfCounterSrpsWindowValid = 0x0,
  kPaScPerfCounterPsswWindowValid = 0x1,
  kPaScPerfCounterTpqzWindowValid = 0x2,
  kPaScPerfCounterQzqpWindowValid = 0x3,
  kPaScPerfCounterTrpkWindowValid = 0x4,
  kPaScPerfCounterSrpsWindowValidBusy = 0x5,
  kPaScPerfCounterPsswWindowValidBusy = 0x6,
  kPaScPerfCounterTpqzWindowValidBusy = 0x7,
  kPaScPerfCounterQzqpWindowValidBusy = 0x8,
  kPaScPerfCounterTrpkWindowValidBusy = 0x9,
  kPaScPerfCounterStarvedByPa = 0xA,
  kPaScPerfCounterStalledByPrimfifo = 0xB,
  kPaScPerfCounterStalledByDbTile = 0xC,
  kPaScPerfCounterStarvedByDbTile = 0xD,
  kPaScPerfCounterStalledByTileorderfifo = 0xE,
  kPaScPerfCounterStalledByTilefifo = 0xF,
  kPaScPerfCounterStalledByDbQuad = 0x10,
  kPaScPerfCounterStarvedByDbQuad = 0x11,
  kPaScPerfCounterStalledByQuadfifo = 0x12,
  kPaScPerfCounterStalledByBci = 0x13,
  kPaScPerfCounterStalledBySpi = 0x14,
  kPaScPerfCounterScissorDiscard = 0x15,
  kPaScPerfCounterBbDiscard = 0x16,
  kPaScPerfCounterSupertileCount = 0x17,
  kPaScPerfCounterSupertilePerPrimH0 = 0x18,
  kPaScPerfCounterSupertilePerPrimH1 = 0x19,
  kPaScPerfCounterSupertilePerPrimH2 = 0x1A,
  kPaScPerfCounterSupertilePerPrimH3 = 0x1B,
  kPaScPerfCounterSupertilePerPrimH4 = 0x1C,
  kPaScPerfCounterSupertilePerPrimH5 = 0x1D,
  kPaScPerfCounterSupertilePerPrimH6 = 0x1E,
  kPaScPerfCounterSupertilePerPrimH7 = 0x1F,
  kPaScPerfCounterSupertilePerPrimH8 = 0x20,
  kPaScPerfCounterSupertilePerPrimH9 = 0x21,
  kPaScPerfCounterSupertilePerPrimH10 = 0x22,
  kPaScPerfCounterSupertilePerPrimH11 = 0x23,
  kPaScPerfCounterSupertilePerPrimH12 = 0x24,
  kPaScPerfCounterSupertilePerPrimH13 = 0x25,
  kPaScPerfCounterSupertilePerPrimH14 = 0x26,
  kPaScPerfCounterSupertilePerPrimH15 = 0x27,
  kPaScPerfCounterSupertilePerPrimH16 = 0x28,
  kPaScPerfCounterTilePerPrimH0 = 0x29,
  kPaScPerfCounterTilePerPrimH1 = 0x2A,
  kPaScPerfCounterTilePerPrimH2 = 0x2B,
  kPaScPerfCounterTilePerPrimH3 = 0x2C,
  kPaScPerfCounterTilePerPrimH4 = 0x2D,
  kPaScPerfCounterTilePerPrimH5 = 0x2E,
  kPaScPerfCounterTilePerPrimH6 = 0x2F,
  kPaScPerfCounterTilePerPrimH7 = 0x30,
  kPaScPerfCounterTilePerPrimH8 = 0x31,
  kPaScPerfCounterTilePerPrimH9 = 0x32,
  kPaScPerfCounterTilePerPrimH10 = 0x33,
  kPaScPerfCounterTilePerPrimH11 = 0x34,
  kPaScPerfCounterTilePerPrimH12 = 0x35,
  kPaScPerfCounterTilePerPrimH13 = 0x36,
  kPaScPerfCounterTilePerPrimH14 = 0x37,
  kPaScPerfCounterTilePerPrimH15 = 0x38,
  kPaScPerfCounterTilePerPrimH16 = 0x39,
  kPaScPerfCounterTilePerSupertileH0 = 0x3A,
  kPaScPerfCounterTilePerSupertileH1 = 0x3B,
  kPaScPerfCounterTilePerSupertileH2 = 0x3C,
  kPaScPerfCounterTilePerSupertileH3 = 0x3D,
  kPaScPerfCounterTilePerSupertileH4 = 0x3E,
  kPaScPerfCounterTilePerSupertileH5 = 0x3F,
  kPaScPerfCounterTilePerSupertileH6 = 0x40,
  kPaScPerfCounterTilePerSupertileH7 = 0x41,
  kPaScPerfCounterTilePerSupertileH8 = 0x42,
  kPaScPerfCounterTilePerSupertileH9 = 0x43,
  kPaScPerfCounterTilePerSupertileH10 = 0x44,
  kPaScPerfCounterTilePerSupertileH11 = 0x45,
  kPaScPerfCounterTilePerSupertileH12 = 0x46,
  kPaScPerfCounterTilePerSupertileH13 = 0x47,
  kPaScPerfCounterTilePerSupertileH14 = 0x48,
  kPaScPerfCounterTilePerSupertileH15 = 0x49,
  kPaScPerfCounterTilePerSupertileH16 = 0x4A,
  kPaScPerfCounterTilePickedH1 = 0x4B,
  kPaScPerfCounterTilePickedH2 = 0x4C,
  kPaScPerfCounterTilePickedH3 = 0x4D,
  kPaScPerfCounterTilePickedH4 = 0x4E,
  kPaScPerfCounterQz0MultiGpuTileDiscard = 0x4F,
  kPaScPerfCounterQz1MultiGpuTileDiscard = 0x50,
  kPaScPerfCounterQz2MultiGpuTileDiscard = 0x51,
  kPaScPerfCounterQz3MultiGpuTileDiscard = 0x52,
  kPaScPerfCounterQz0TileCount = 0x53,
  kPaScPerfCounterQz1TileCount = 0x54,
  kPaScPerfCounterQz2TileCount = 0x55,
  kPaScPerfCounterQz3TileCount = 0x56,
  kPaScPerfCounterQz0TileCoveredCount = 0x57,
  kPaScPerfCounterQz1TileCoveredCount = 0x58,
  kPaScPerfCounterQz2TileCoveredCount = 0x59,
  kPaScPerfCounterQz3TileCoveredCount = 0x5A,
  kPaScPerfCounterQz0TileNotCoveredCount = 0x5B,
  kPaScPerfCounterQz1TileNotCoveredCount = 0x5C,
  kPaScPerfCounterQz2TileNotCoveredCount = 0x5D,
  kPaScPerfCounterQz3TileNotCoveredCount = 0x5E,
  kPaScPerfCounterQz0QuadPerTileH0 = 0x5F,
  kPaScPerfCounterQz0QuadPerTileH1 = 0x60,
  kPaScPerfCounterQz0QuadPerTileH2 = 0x61,
  kPaScPerfCounterQz0QuadPerTileH3 = 0x62,
  kPaScPerfCounterQz0QuadPerTileH4 = 0x63,
  kPaScPerfCounterQz0QuadPerTileH5 = 0x64,
  kPaScPerfCounterQz0QuadPerTileH6 = 0x65,
  kPaScPerfCounterQz0QuadPerTileH7 = 0x66,
  kPaScPerfCounterQz0QuadPerTileH8 = 0x67,
  kPaScPerfCounterQz0QuadPerTileH9 = 0x68,
  kPaScPerfCounterQz0QuadPerTileH10 = 0x69,
  kPaScPerfCounterQz0QuadPerTileH11 = 0x6A,
  kPaScPerfCounterQz0QuadPerTileH12 = 0x6B,
  kPaScPerfCounterQz0QuadPerTileH13 = 0x6C,
  kPaScPerfCounterQz0QuadPerTileH14 = 0x6D,
  kPaScPerfCounterQz0QuadPerTileH15 = 0x6E,
  kPaScPerfCounterQz0QuadPerTileH16 = 0x6F,
  kPaScPerfCounterQz1QuadPerTileH0 = 0x70,
  kPaScPerfCounterQz1QuadPerTileH1 = 0x71,
  kPaScPerfCounterQz1QuadPerTileH2 = 0x72,
  kPaScPerfCounterQz1QuadPerTileH3 = 0x73,
  kPaScPerfCounterQz1QuadPerTileH4 = 0x74,
  kPaScPerfCounterQz1QuadPerTileH5 = 0x75,
  kPaScPerfCounterQz1QuadPerTileH6 = 0x76,
  kPaScPerfCounterQz1QuadPerTileH7 = 0x77,
  kPaScPerfCounterQz1QuadPerTileH8 = 0x78,
  kPaScPerfCounterQz1QuadPerTileH9 = 0x79,
  kPaScPerfCounterQz1QuadPerTileH10 = 0x7A,
  kPaScPerfCounterQz1QuadPerTileH11 = 0x7B,
  kPaScPerfCounterQz1QuadPerTileH12 = 0x7C,
  kPaScPerfCounterQz1QuadPerTileH13 = 0x7D,
  kPaScPerfCounterQz1QuadPerTileH14 = 0x7E,
  kPaScPerfCounterQz1QuadPerTileH15 = 0x7F,
  kPaScPerfCounterQz1QuadPerTileH16 = 0x80,
  kPaScPerfCounterQz2QuadPerTileH0 = 0x81,
  kPaScPerfCounterQz2QuadPerTileH1 = 0x82,
  kPaScPerfCounterQz2QuadPerTileH2 = 0x83,
  kPaScPerfCounterQz2QuadPerTileH3 = 0x84,
  kPaScPerfCounterQz2QuadPerTileH4 = 0x85,
  kPaScPerfCounterQz2QuadPerTileH5 = 0x86,
  kPaScPerfCounterQz2QuadPerTileH6 = 0x87,
  kPaScPerfCounterQz2QuadPerTileH7 = 0x88,
  kPaScPerfCounterQz2QuadPerTileH8 = 0x89,
  kPaScPerfCounterQz2QuadPerTileH9 = 0x8A,
  kPaScPerfCounterQz2QuadPerTileH10 = 0x8B,
  kPaScPerfCounterQz2QuadPerTileH11 = 0x8C,
  kPaScPerfCounterQz2QuadPerTileH12 = 0x8D,
  kPaScPerfCounterQz2QuadPerTileH13 = 0x8E,
  kPaScPerfCounterQz2QuadPerTileH14 = 0x8F,
  kPaScPerfCounterQz2QuadPerTileH15 = 0x90,
  kPaScPerfCounterQz2QuadPerTileH16 = 0x91,
  kPaScPerfCounterQz3QuadPerTileH0 = 0x92,
  kPaScPerfCounterQz3QuadPerTileH1 = 0x93,
  kPaScPerfCounterQz3QuadPerTileH2 = 0x94,
  kPaScPerfCounterQz3QuadPerTileH3 = 0x95,
  kPaScPerfCounterQz3QuadPerTileH4 = 0x96,
  kPaScPerfCounterQz3QuadPerTileH5 = 0x97,
  kPaScPerfCounterQz3QuadPerTileH6 = 0x98,
  kPaScPerfCounterQz3QuadPerTileH7 = 0x99,
  kPaScPerfCounterQz3QuadPerTileH8 = 0x9A,
  kPaScPerfCounterQz3QuadPerTileH9 = 0x9B,
  kPaScPerfCounterQz3QuadPerTileH10 = 0x9C,
  kPaScPerfCounterQz3QuadPerTileH11 = 0x9D,
  kPaScPerfCounterQz3QuadPerTileH12 = 0x9E,
  kPaScPerfCounterQz3QuadPerTileH13 = 0x9F,
  kPaScPerfCounterQz3QuadPerTileH14 = 0xA0,
  kPaScPerfCounterQz3QuadPerTileH15 = 0xA1,
  kPaScPerfCounterQz3QuadPerTileH16 = 0xA2,
  kPaScPerfCounterQz0QuadCount = 0xA3,
  kPaScPerfCounterQz1QuadCount = 0xA4,
  kPaScPerfCounterQz2QuadCount = 0xA5,
  kPaScPerfCounterQz3QuadCount = 0xA6,
  kPaScPerfCounterP0HizTileCount = 0xA7,
  kPaScPerfCounterP1HizTileCount = 0xA8,
  kPaScPerfCounterP2HizTileCount = 0xA9,
  kPaScPerfCounterP3HizTileCount = 0xAA,
  kPaScPerfCounterP0HizQuadPerTileH0 = 0xAB,
  kPaScPerfCounterP0HizQuadPerTileH1 = 0xAC,
  kPaScPerfCounterP0HizQuadPerTileH2 = 0xAD,
  kPaScPerfCounterP0HizQuadPerTileH3 = 0xAE,
  kPaScPerfCounterP0HizQuadPerTileH4 = 0xAF,
  kPaScPerfCounterP0HizQuadPerTileH5 = 0xB0,
  kPaScPerfCounterP0HizQuadPerTileH6 = 0xB1,
  kPaScPerfCounterP0HizQuadPerTileH7 = 0xB2,
  kPaScPerfCounterP0HizQuadPerTileH8 = 0xB3,
  kPaScPerfCounterP0HizQuadPerTileH9 = 0xB4,
  kPaScPerfCounterP0HizQuadPerTileH10 = 0xB5,
  kPaScPerfCounterP0HizQuadPerTileH11 = 0xB6,
  kPaScPerfCounterP0HizQuadPerTileH12 = 0xB7,
  kPaScPerfCounterP0HizQuadPerTileH13 = 0xB8,
  kPaScPerfCounterP0HizQuadPerTileH14 = 0xB9,
  kPaScPerfCounterP0HizQuadPerTileH15 = 0xBA,
  kPaScPerfCounterP0HizQuadPerTileH16 = 0xBB,
  kPaScPerfCounterP1HizQuadPerTileH0 = 0xBC,
  kPaScPerfCounterP1HizQuadPerTileH1 = 0xBD,
  kPaScPerfCounterP1HizQuadPerTileH2 = 0xBE,
  kPaScPerfCounterP1HizQuadPerTileH3 = 0xBF,
  kPaScPerfCounterP1HizQuadPerTileH4 = 0xC0,
  kPaScPerfCounterP1HizQuadPerTileH5 = 0xC1,
  kPaScPerfCounterP1HizQuadPerTileH6 = 0xC2,
  kPaScPerfCounterP1HizQuadPerTileH7 = 0xC3,
  kPaScPerfCounterP1HizQuadPerTileH8 = 0xC4,
  kPaScPerfCounterP1HizQuadPerTileH9 = 0xC5,
  kPaScPerfCounterP1HizQuadPerTileH10 = 0xC6,
  kPaScPerfCounterP1HizQuadPerTileH11 = 0xC7,
  kPaScPerfCounterP1HizQuadPerTileH12 = 0xC8,
  kPaScPerfCounterP1HizQuadPerTileH13 = 0xC9,
  kPaScPerfCounterP1HizQuadPerTileH14 = 0xCA,
  kPaScPerfCounterP1HizQuadPerTileH15 = 0xCB,
  kPaScPerfCounterP1HizQuadPerTileH16 = 0xCC,
  kPaScPerfCounterP2HizQuadPerTileH0 = 0xCD,
  kPaScPerfCounterP2HizQuadPerTileH1 = 0xCE,
  kPaScPerfCounterP2HizQuadPerTileH2 = 0xCF,
  kPaScPerfCounterP2HizQuadPerTileH3 = 0xD0,
  kPaScPerfCounterP2HizQuadPerTileH4 = 0xD1,
  kPaScPerfCounterP2HizQuadPerTileH5 = 0xD2,
  kPaScPerfCounterP2HizQuadPerTileH6 = 0xD3,
  kPaScPerfCounterP2HizQuadPerTileH7 = 0xD4,
  kPaScPerfCounterP2HizQuadPerTileH8 = 0xD5,
  kPaScPerfCounterP2HizQuadPerTileH9 = 0xD6,
  kPaScPerfCounterP2HizQuadPerTileH10 = 0xD7,
  kPaScPerfCounterP2HizQuadPerTileH11 = 0xD8,
  kPaScPerfCounterP2HizQuadPerTileH12 = 0xD9,
  kPaScPerfCounterP2HizQuadPerTileH13 = 0xDA,
  kPaScPerfCounterP2HizQuadPerTileH14 = 0xDB,
  kPaScPerfCounterP2HizQuadPerTileH15 = 0xDC,
  kPaScPerfCounterP2HizQuadPerTileH16 = 0xDD,
  kPaScPerfCounterP3HizQuadPerTileH0 = 0xDE,
  kPaScPerfCounterP3HizQuadPerTileH1 = 0xDF,
  kPaScPerfCounterP3HizQuadPerTileH2 = 0xE0,
  kPaScPerfCounterP3HizQuadPerTileH3 = 0xE1,
  kPaScPerfCounterP3HizQuadPerTileH4 = 0xE2,
  kPaScPerfCounterP3HizQuadPerTileH5 = 0xE3,
  kPaScPerfCounterP3HizQuadPerTileH6 = 0xE4,
  kPaScPerfCounterP3HizQuadPerTileH7 = 0xE5,
  kPaScPerfCounterP3HizQuadPerTileH8 = 0xE6,
  kPaScPerfCounterP3HizQuadPerTileH9 = 0xE7,
  kPaScPerfCounterP3HizQuadPerTileH10 = 0xE8,
  kPaScPerfCounterP3HizQuadPerTileH11 = 0xE9,
  kPaScPerfCounterP3HizQuadPerTileH12 = 0xEA,
  kPaScPerfCounterP3HizQuadPerTileH13 = 0xEB,
  kPaScPerfCounterP3HizQuadPerTileH14 = 0xEC,
  kPaScPerfCounterP3HizQuadPerTileH15 = 0xED,
  kPaScPerfCounterP3HizQuadPerTileH16 = 0xEE,
  kPaScPerfCounterP0HizQuadCount = 0xEF,
  kPaScPerfCounterP1HizQuadCount = 0xF0,
  kPaScPerfCounterP2HizQuadCount = 0xF1,
  kPaScPerfCounterP3HizQuadCount = 0xF2,
  kPaScPerfCounterP0DetailQuadCount = 0xF3,
  kPaScPerfCounterP1DetailQuadCount = 0xF4,
  kPaScPerfCounterP2DetailQuadCount = 0xF5,
  kPaScPerfCounterP3DetailQuadCount = 0xF6,
  kPaScPerfCounterP0DetailQuadWith1Pix = 0xF7,
  kPaScPerfCounterP0DetailQuadWith2Pix = 0xF8,
  kPaScPerfCounterP0DetailQuadWith3Pix = 0xF9,
  kPaScPerfCounterP0DetailQuadWith4Pix = 0xFA,
  kPaScPerfCounterP1DetailQuadWith1Pix = 0xFB,
  kPaScPerfCounterP1DetailQuadWith2Pix = 0xFC,
  kPaScPerfCounterP1DetailQuadWith3Pix = 0xFD,
  kPaScPerfCounterP1DetailQuadWith4Pix = 0xFE,
  kPaScPerfCounterP2DetailQuadWith1Pix = 0xFF,
  kPaScPerfCounterP2DetailQuadWith2Pix = 0x100,
  kPaScPerfCounterP2DetailQuadWith3Pix = 0x101,
  kPaScPerfCounterP2DetailQuadWith4Pix = 0x102,
  kPaScPerfCounterP3DetailQuadWith1Pix = 0x103,
  kPaScPerfCounterP3DetailQuadWith2Pix = 0x104,
  kPaScPerfCounterP3DetailQuadWith3Pix = 0x105,
  kPaScPerfCounterP3DetailQuadWith4Pix = 0x106,
  kPaScPerfCounterEarlyzQuadCount = 0x107,
  kPaScPerfCounterEarlyzQuadWith1Pix = 0x108,
  kPaScPerfCounterEarlyzQuadWith2Pix = 0x109,
  kPaScPerfCounterEarlyzQuadWith3Pix = 0x10A,
  kPaScPerfCounterEarlyzQuadWith4Pix = 0x10B,
  kPaScPerfCounterPkrQuadPerRowH1 = 0x10C,
  kPaScPerfCounterPkrQuadPerRowH2 = 0x10D,
  kPaScPerfCounterPkrQuadPerRowH3 = 0x10E,
  kPaScPerfCounterPkrQuadPerRowH4 = 0x10F,
  kPaScPerfCounterPkrEndOfVector = 0x110,
  kPaScPerfCounterPkrControlXfer = 0x111,
  kPaScPerfCounterPkrDbhangForceEov = 0x112,
  kPaScPerfCounterRegSclkBusy = 0x113,
  kPaScPerfCounterGrp0DynSclkBusy = 0x114,
  kPaScPerfCounterGrp1DynSclkBusy = 0x115,
  kPaScPerfCounterGrp2DynSclkBusy = 0x116,
  kPaScPerfCounterGrp3DynSclkBusy = 0x117,
  kPaScPerfCounterGrp4DynSclkBusy = 0x118,
  kPaScPerfCounterPa0ScDataFifoRd = 0x119,
  kPaScPerfCounterPa0ScDataFifoWe = 0x11A,
  kPaScPerfCounterPa1ScDataFifoRd = 0x11B,
  kPaScPerfCounterPa1ScDataFifoWe = 0x11C,
  kPaScPerfCounterPsArbXfcAllEventOrPrimCycles = 0x11D,
  kPaScPerfCounterPsArbXfcOnlyPrimCycles = 0x11E,
  kPaScPerfCounterPsArbXfcOnlyOneIncPerPrim = 0x11F,
  kPaScPerfCounterPsArbStalledFromBelow = 0x120,
  kPaScPerfCounterPsArbStarvedFromAbove = 0x121,
  kPaScPerfCounterPsArbScBusy = 0x122,
  kPaScPerfCounterPsArbPaScBusy = 0x123,
  kPaScPerfCounterPa2ScDataFifoRd = 0x124,
  kPaScPerfCounterPa2ScDataFifoWe = 0x125,
  kPaScPerfCounterPa3ScDataFifoRd = 0x126,
  kPaScPerfCounterPa3ScDataFifoWe = 0x127,
  kPaScPerfCounterPaScDealloc00We = 0x128,
  kPaScPerfCounterPaScDealloc01We = 0x129,
  kPaScPerfCounterPaScDealloc10We = 0x12A,
  kPaScPerfCounterPaScDealloc11We = 0x12B,
  kPaScPerfCounterPaScDealloc20We = 0x12C,
  kPaScPerfCounterPaScDealloc21We = 0x12D,
  kPaScPerfCounterPaScDealloc30We = 0x12E,
  kPaScPerfCounterPaScDealloc31We = 0x12F,
  kPaScPerfCounterPa0ScEopWe = 0x130,
  kPaScPerfCounterPa0ScEopgWe = 0x131,
  kPaScPerfCounterPa0ScEventWe = 0x132,
  kPaScPerfCounterPa1ScEopWe = 0x133,
  kPaScPerfCounterPa1ScEopgWe = 0x134,
  kPaScPerfCounterPa1ScEventWe = 0x135,
  kPaScPerfCounterPa2ScEopWe = 0x136,
  kPaScPerfCounterPa2ScEopgWe = 0x137,
  kPaScPerfCounterPa2ScEventWe = 0x138,
  kPaScPerfCounterPa3ScEopWe = 0x139,
  kPaScPerfCounterPa3ScEopgWe = 0x13A,
  kPaScPerfCounterPa3ScEventWe = 0x13B,
  kPaScPerfCounterPsArbOooThresholdSwitchToDesiredFifo = 0x13C,
  kPaScPerfCounterPsArbOooFifoEmptySwitch = 0x13D,
  kPaScPerfCounterPsArbNullPrimBubblePop = 0x13E,
  kPaScPerfCounterPsArbEopPopSyncPop = 0x13F,
  kPaScPerfCounterPsArbEventSyncPop = 0x140,
  kPaScPerfCounterScPsEngMulticycleBubble = 0x141,
  kPaScPerfCounterPa0ScFpovWe = 0x142,
  kPaScPerfCounterPa1ScFpovWe = 0x143,
  kPaScPerfCounterPa2ScFpovWe = 0x144,
  kPaScPerfCounterPa3ScFpovWe = 0x145,
  kPaScPerfCounterPa0ScLpovWe = 0x146,
  kPaScPerfCounterPa1ScLpovWe = 0x147,
  kPaScPerfCounterPa2ScLpovWe = 0x148,
  kPaScPerfCounterPa3ScLpovWe = 0x149,
  kPaScPerfCounterPa0ScSpiDealloc0 = 0x14A,
  kPaScPerfCounterPa0ScSpiDealloc1 = 0x14B,
  kPaScPerfCounterPa0ScSpiDealloc2 = 0x14C,
  kPaScPerfCounterPa1ScSpiDealloc0 = 0x14D,
  kPaScPerfCounterPa1ScSpiDealloc1 = 0x14E,
  kPaScPerfCounterPa1ScSpiDealloc2 = 0x14F,
  kPaScPerfCounterPa2ScSpiDealloc0 = 0x150,
  kPaScPerfCounterPa2ScSpiDealloc1 = 0x151,
  kPaScPerfCounterPa2ScSpiDealloc2 = 0x152,
  kPaScPerfCounterPa3ScSpiDealloc0 = 0x153,
  kPaScPerfCounterPa3ScSpiDealloc1 = 0x154,
  kPaScPerfCounterPa3ScSpiDealloc2 = 0x155,
  kPaScPerfCounterPa0ScSpiFpov = 0x156,
  kPaScPerfCounterPa1ScSpiFpov = 0x157,
  kPaScPerfCounterPa2ScSpiFpov = 0x158,
  kPaScPerfCounterPa3ScSpiFpov = 0x159,
  kPaScPerfCounterScSpiEvent = 0x15A,
  kPaScPerfCounterPsTsEventFifoPush = 0x15B,
  kPaScPerfCounterPsTsEventFifoPop = 0x15C,
  kPaScPerfCounterPsCtxDoneFifoPush = 0x15D,
  kPaScPerfCounterPsCtxDoneFifoPop = 0x15E,
  kPaScPerfCounterMulticycleBubbleFreeze = 0x15F,
  kPaScPerfCounterEopSyncWindow = 0x160,
  kPaScPerfCounterPa0ScNullWe = 0x161,
  kPaScPerfCounterPa0ScNullDeallocWe = 0x162,
  kPaScPerfCounterPa0ScDataFifoEopgRd = 0x163,
  kPaScPerfCounterPa0ScDataFifoEopRd = 0x164,
  kPaScPerfCounterPa0ScDealloc0Rd = 0x165,
  kPaScPerfCounterPa0ScDealloc1Rd = 0x166,
  kPaScPerfCounterPa1ScDataFifoEopgRd = 0x167,
  kPaScPerfCounterPa1ScDataFifoEopRd = 0x168,
  kPaScPerfCounterPa1ScDealloc0Rd = 0x169,
  kPaScPerfCounterPa1ScDealloc1Rd = 0x16A,
  kPaScPerfCounterPa1ScNullWe = 0x16B,
  kPaScPerfCounterPa1ScNullDeallocWe = 0x16C,
  kPaScPerfCounterPa2ScDataFifoEopgRd = 0x16D,
  kPaScPerfCounterPa2ScDataFifoEopRd = 0x16E,
  kPaScPerfCounterPa2ScDealloc0Rd = 0x16F,
  kPaScPerfCounterPa2ScDealloc1Rd = 0x170,
  kPaScPerfCounterPa2ScNullWe = 0x171,
  kPaScPerfCounterPa2ScNullDeallocWe = 0x172,
  kPaScPerfCounterPa3ScDataFifoEopgRd = 0x173,
  kPaScPerfCounterPa3ScDataFifoEopRd = 0x174,
  kPaScPerfCounterPa3ScDealloc0Rd = 0x175,
  kPaScPerfCounterPa3ScDealloc1Rd = 0x176,
  kPaScPerfCounterPa3ScNullWe = 0x177,
  kPaScPerfCounterPa3ScNullDeallocWe = 0x178,
  kPaScPerfCounterPsPa0ScFifoEmpty = 0x179,
  kPaScPerfCounterPsPa0ScFifoFull = 0x17A,
  kPaScPerfCounterPa0PsDataSend = 0x17B,
  kPaScPerfCounterPsPa1ScFifoEmpty = 0x17C,
  kPaScPerfCounterPsPa1ScFifoFull = 0x17D,
  kPaScPerfCounterPa1PsDataSend = 0x17E,
  kPaScPerfCounterPsPa2ScFifoEmpty = 0x17F,
  kPaScPerfCounterPsPa2ScFifoFull = 0x180,
  kPaScPerfCounterPa2PsDataSend = 0x181,
  kPaScPerfCounterPsPa3ScFifoEmpty = 0x182,
  kPaScPerfCounterPsPa3ScFifoFull = 0x183,
  kPaScPerfCounterPa3PsDataSend = 0x184,
  kPaScPerfCounterBusyProcessingMulticyclePrim = 0x185,
  kPaScPerfCounterBusyCntNotZero = 0x186,
  kPaScPerfCounterBmBusy = 0x187,
  kPaScPerfCounterBackendBusy = 0x188,
  kPaScPerfCounterScfScbInterfaceBusy = 0x189,
  kPaScPerfCounterScbBusy = 0x18A,
  kNumPaScPerfCounters = 0x18B,
  kPaScPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::SxPerfCounter : __int32
{
  kSxPerfCounterPaIdleCycles = 0x0,
  kSxPerfCounterPaReq = 0x1,
  kSxPerfCounterPaPos = 0x2,
  kSxPerfCounterClock = 0x3,
  kSxPerfCounterGateEn1 = 0x4,
  kSxPerfCounterGateEn2 = 0x5,
  kSxPerfCounterGateEn3 = 0x6,
  kSxPerfCounterGateEn4 = 0x7,
  kSxPerfCounterShPosStarve = 0x8,
  kSxPerfCounterShColorStarve = 0x9,
  kSxPerfCounterShPosStall = 0xA,
  kSxPerfCounterShColorStall = 0xB,
  kSxPerfCounterDb0Pixels = 0xC,
  kSxPerfCounterDb0HalfQuads = 0xD,
  kSxPerfCounterDb0PixelStall = 0xE,
  kSxPerfCounterDb0PixelIdle = 0xF,
  kSxPerfCounterDb0PredPixels = 0x10,
  kSxPerfCounterDb1Pixels = 0x11,
  kSxPerfCounterDb1HalfQuads = 0x12,
  kSxPerfCounterDb1PixelStall = 0x13,
  kSxPerfCounterDb1PixelIdle = 0x14,
  kSxPerfCounterDb1PredPixels = 0x15,
  kSxPerfCounterDb2Pixels = 0x16,
  kSxPerfCounterDb2HalfQuads = 0x17,
  kSxPerfCounterDb2PixelStall = 0x18,
  kSxPerfCounterDb2PixelIdle = 0x19,
  kSxPerfCounterDb2PredPixels = 0x1A,
  kSxPerfCounterDb3Pixels = 0x1B,
  kSxPerfCounterDb3HalfQuads = 0x1C,
  kSxPerfCounterDb3PixelStall = 0x1D,
  kSxPerfCounterDb3PixelIdle = 0x1E,
  kSxPerfCounterDb3PredPixels = 0x1F,
  kNumSxPerfCounters = 0x20,
  kSxPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::SpiPerfCounter : __int32
{
  kSpiPerfCounterVsWindowValid = 0x0,
  kSpiPerfCounterVsBusy = 0x1,
  kSpiPerfCounterVsFirstWave = 0x2,
  kSpiPerfCounterVsLastWave = 0x3,
  kSpiPerfCounterVsLshsDealloc = 0x4,
  kSpiPerfCounterVsPcStall = 0x5,
  kSpiPerfCounterVsPos0Stall = 0x6,
  kSpiPerfCounterVsPos1Stall = 0x7,
  kSpiPerfCounterVsCrawlerStall = 0x8,
  kSpiPerfCounterVsEventWave = 0x9,
  kSpiPerfCounterVsWave = 0xA,
  kSpiPerfCounterVsPersUpdFull0 = 0xB,
  kSpiPerfCounterVsPersUpdFull1 = 0xC,
  kSpiPerfCounterVsLateAllocFull = 0xD,
  kSpiPerfCounterVsFirstSubgrp = 0xE,
  kSpiPerfCounterVsLastSubgrp = 0xF,
  kSpiPerfCounterGsWindowValid = 0x10,
  kSpiPerfCounterGsBusy = 0x11,
  kSpiPerfCounterGsCrawlerStall = 0x12,
  kSpiPerfCounterGsEventWave = 0x13,
  kSpiPerfCounterGsWave = 0x14,
  kSpiPerfCounterGsPersUpdFull0 = 0x15,
  kSpiPerfCounterGsPersUpdFull1 = 0x16,
  kSpiPerfCounterGsFirstSubgrp = 0x17,
  kSpiPerfCounterGsLastSubgrp = 0x18,
  kSpiPerfCounterEsWindowValid = 0x19,
  kSpiPerfCounterEsBusy = 0x1A,
  kSpiPerfCounterEsCrawlerStall = 0x1B,
  kSpiPerfCounterEsFirstWave = 0x1C,
  kSpiPerfCounterEsLastWave = 0x1D,
  kSpiPerfCounterEsLshsDealloc = 0x1E,
  kSpiPerfCounterEsEventWave = 0x1F,
  kSpiPerfCounterEsWave = 0x20,
  kSpiPerfCounterEsPersUpdFull0 = 0x21,
  kSpiPerfCounterEsPersUpdFull1 = 0x22,
  kSpiPerfCounterEsFirstSubgrp = 0x23,
  kSpiPerfCounterEsLastSubgrp = 0x24,
  kSpiPerfCounterHsWindowValid = 0x25,
  kSpiPerfCounterHsBusy = 0x26,
  kSpiPerfCounterHsCrawlerStall = 0x27,
  kSpiPerfCounterHsFirstWave = 0x28,
  kSpiPerfCounterHsLastWave = 0x29,
  kSpiPerfCounterHsLshsDealloc = 0x2A,
  kSpiPerfCounterHsEventWave = 0x2B,
  kSpiPerfCounterHsWave = 0x2C,
  kSpiPerfCounterHsPersUpdFull0 = 0x2D,
  kSpiPerfCounterHsPersUpdFull1 = 0x2E,
  kSpiPerfCounterLsWindowValid = 0x2F,
  kSpiPerfCounterLsBusy = 0x30,
  kSpiPerfCounterLsCrawlerStall = 0x31,
  kSpiPerfCounterLsFirstWave = 0x32,
  kSpiPerfCounterLsLastWave = 0x33,
  kSpiPerfCounterOffchipLdsStallLs = 0x34,
  kSpiPerfCounterLsEventWave = 0x35,
  kSpiPerfCounterLsWave = 0x36,
  kSpiPerfCounterLsPersUpdFull0 = 0x37,
  kSpiPerfCounterLsPersUpdFull1 = 0x38,
  kSpiPerfCounterCsgWindowValid = 0x39,
  kSpiPerfCounterCsgBusy = 0x3A,
  kSpiPerfCounterCsgNumThreadgroups = 0x3B,
  kSpiPerfCounterCsgCrawlerStall = 0x3C,
  kSpiPerfCounterCsgEventWave = 0x3D,
  kSpiPerfCounterCsgWave = 0x3E,
  kSpiPerfCounterCsnWindowValid = 0x3F,
  kSpiPerfCounterCsnBusy = 0x40,
  kSpiPerfCounterCsnNumThreadgroups = 0x41,
  kSpiPerfCounterCsnCrawlerStall = 0x42,
  kSpiPerfCounterCsnEventWave = 0x43,
  kSpiPerfCounterCsnWave = 0x44,
  kSpiPerfCounterPsCtlWindowValid = 0x45,
  kSpiPerfCounterPsCtlBusy = 0x46,
  kSpiPerfCounterPsCtlActive = 0x47,
  kSpiPerfCounterPsCtlDeallocBin0 = 0x48,
  kSpiPerfCounterPsCtlFposBin1Stall = 0x49,
  kSpiPerfCounterPsCtlEventWave = 0x4A,
  kSpiPerfCounterPsCtlWave = 0x4B,
  kSpiPerfCounterPsCtlOptWave = 0x4C,
  kSpiPerfCounterPsCtlPassBin0 = 0x4D,
  kSpiPerfCounterPsCtlPassBin1 = 0x4E,
  kSpiPerfCounterPsCtlFposBin2 = 0x4F,
  kSpiPerfCounterPsCtlPrimBin0 = 0x50,
  kSpiPerfCounterPsCtlPrimBin1 = 0x51,
  kSpiPerfCounterPsCtlCnfBin2 = 0x52,
  kSpiPerfCounterPsCtlCnfBin3 = 0x53,
  kSpiPerfCounterPsCtlCrawlerStall = 0x54,
  kSpiPerfCounterPsCtlLdsResFull = 0x55,
  kSpiPerfCounterPsPersUpdFull0 = 0x56,
  kSpiPerfCounterPsPersUpdFull1 = 0x57,
  kSpiPerfCounterPixAllocPendCnt = 0x58,
  kSpiPerfCounterPixAllocScbStall = 0x59,
  kSpiPerfCounterPixAllocDb0Stall = 0x5A,
  kSpiPerfCounterPixAllocDb1Stall = 0x5B,
  kSpiPerfCounterPixAllocDb2Stall = 0x5C,
  kSpiPerfCounterPixAllocDb3Stall = 0x5D,
  kSpiPerfCounterLds0PcValid = 0x5E,
  kSpiPerfCounterLds1PcValid = 0x5F,
  kSpiPerfCounterRaPipeReqBin2 = 0x60,
  kSpiPerfCounterRaTaskReqBin3 = 0x61,
  kSpiPerfCounterRaWrCtlFull = 0x62,
  kSpiPerfCounterRaReqNoAlloc = 0x63,
  kSpiPerfCounterRaReqNoAllocPs = 0x64,
  kSpiPerfCounterRaReqNoAllocVs = 0x65,
  kSpiPerfCounterRaReqNoAllocGs = 0x66,
  kSpiPerfCounterRaReqNoAllocEs = 0x67,
  kSpiPerfCounterRaReqNoAllocHs = 0x68,
  kSpiPerfCounterRaReqNoAllocLs = 0x69,
  kSpiPerfCounterRaReqNoAllocCsg = 0x6A,
  kSpiPerfCounterRaReqNoAllocCsn = 0x6B,
  kSpiPerfCounterRaResStallPs = 0x6C,
  kSpiPerfCounterRaResStallVs = 0x6D,
  kSpiPerfCounterRaResStallGs = 0x6E,
  kSpiPerfCounterRaResStallEs = 0x6F,
  kSpiPerfCounterRaResStallHs = 0x70,
  kSpiPerfCounterRaResStallLs = 0x71,
  kSpiPerfCounterRaResStallCsg = 0x72,
  kSpiPerfCounterRaResStallCsn = 0x73,
  kSpiPerfCounterRaTmpStallPs = 0x74,
  kSpiPerfCounterRaTmpStallVs = 0x75,
  kSpiPerfCounterRaTmpStallGs = 0x76,
  kSpiPerfCounterRaTmpStallEs = 0x77,
  kSpiPerfCounterRaTmpStallHs = 0x78,
  kSpiPerfCounterRaTmpStallLs = 0x79,
  kSpiPerfCounterRaTmpStallCsg = 0x7A,
  kSpiPerfCounterRaTmpStallCsn = 0x7B,
  kSpiPerfCounterRaWaveSimdFullPs = 0x7C,
  kSpiPerfCounterRaWaveSimdFullVs = 0x7D,
  kSpiPerfCounterRaWaveSimdFullGs = 0x7E,
  kSpiPerfCounterRaWaveSimdFullEs = 0x7F,
  kSpiPerfCounterRaWaveSimdFullHs = 0x80,
  kSpiPerfCounterRaWaveSimdFullLs = 0x81,
  kSpiPerfCounterRaWaveSimdFullCsg = 0x82,
  kSpiPerfCounterRaWaveSimdFullCsn = 0x83,
  kSpiPerfCounterRaVgprSimdFullPs = 0x84,
  kSpiPerfCounterRaVgprSimdFullVs = 0x85,
  kSpiPerfCounterRaVgprSimdFullGs = 0x86,
  kSpiPerfCounterRaVgprSimdFullEs = 0x87,
  kSpiPerfCounterRaVgprSimdFullHs = 0x88,
  kSpiPerfCounterRaVgprSimdFullLs = 0x89,
  kSpiPerfCounterRaVgprSimdFullCsg = 0x8A,
  kSpiPerfCounterRaVgprSimdFullCsn = 0x8B,
  kSpiPerfCounterRaSgprSimdFullPs = 0x8C,
  kSpiPerfCounterRaSgprSimdFullVs = 0x8D,
  kSpiPerfCounterRaSgprSimdFullGs = 0x8E,
  kSpiPerfCounterRaSgprSimdFullEs = 0x8F,
  kSpiPerfCounterRaSgprSimdFullHs = 0x90,
  kSpiPerfCounterRaSgprSimdFullLs = 0x91,
  kSpiPerfCounterRaSgprSimdFullCsg = 0x92,
  kSpiPerfCounterRaSgprSimdFullCsn = 0x93,
  kSpiPerfCounterRaLdsCuFullPs = 0x94,
  kSpiPerfCounterRaLdsCuFullLs = 0x95,
  kSpiPerfCounterRaLdsCuFullEs = 0x96,
  kSpiPerfCounterRaLdsCuFullCsg = 0x97,
  kSpiPerfCounterRaLdsCuFullCsn = 0x98,
  kSpiPerfCounterRaBarCuFullHs = 0x99,
  kSpiPerfCounterRaBarCuFullCsg = 0x9A,
  kSpiPerfCounterRaBarCuFullCsn = 0x9B,
  kSpiPerfCounterRaBulkyCuFullCsg = 0x9C,
  kSpiPerfCounterRaBulkyCuFullCsn = 0x9D,
  kSpiPerfCounterRaTglimCuFullCsg = 0x9E,
  kSpiPerfCounterRaTglimCuFullCsn = 0x9F,
  kSpiPerfCounterRaWvlimStallPs = 0xA0,
  kSpiPerfCounterRaWvlimStallVs = 0xA1,
  kSpiPerfCounterRaWvlimStallGs = 0xA2,
  kSpiPerfCounterRaWvlimStallEs = 0xA3,
  kSpiPerfCounterRaWvlimStallHs = 0xA4,
  kSpiPerfCounterRaWvlimStallLs = 0xA5,
  kSpiPerfCounterRaWvlimStallCsg = 0xA6,
  kSpiPerfCounterRaWvlimStallCsn = 0xA7,
  kSpiPerfCounterRaPsLock = 0xA8,
  kSpiPerfCounterRaVsLock = 0xA9,
  kSpiPerfCounterRaGsLock = 0xAA,
  kSpiPerfCounterRaEsLock = 0xAB,
  kSpiPerfCounterRaHsLock = 0xAC,
  kSpiPerfCounterRaLsLock = 0xAD,
  kSpiPerfCounterRaCsgLock = 0xAE,
  kSpiPerfCounterRaCsnLock = 0xAF,
  kSpiPerfCounterRaRsvUpd = 0xB0,
  kSpiPerfCounterExpArbColCnt = 0xB1,
  kSpiPerfCounterExpArbParCnt = 0xB2,
  kSpiPerfCounterExpArbPosCnt = 0xB3,
  kSpiPerfCounterExpArbGdsCnt = 0xB4,
  kSpiPerfCounterClkgateBusyStall = 0xB5,
  kSpiPerfCounterClkgateActiveStall = 0xB6,
  kSpiPerfCounterClkgateAllClocksOn = 0xB7,
  kSpiPerfCounterClkgateCgttDynOn = 0xB8,
  kSpiPerfCounterClkgateCgttRegOn = 0xB9,
  kNumSpiPerfCounters = 0xBA,
  kSpiPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::CbPerfCounterOpFilter : __int32
{
  kCbPerfCounterOpFilterWriteOnly = 0x0,
  kCbPerfCounterOpFilterNeedsDestination = 0x1,
  kCbPerfCounterOpFilterResolve = 0x2,
  kCbPerfCounterOpFilterDecompress = 0x3,
  kCbPerfCounterOpFilterFmaskDecompress = 0x4,
  kCbPerfCounterOpFilterEliminateFastClear = 0x5,
};

enum sce::Gnm::CbPerfCounterClearFilter : __int32
{
  kCbPerfCounterClearFilterNonClear = 0x0,
  kCbPerfCounterClearFilterClear = 0x1,
};

enum sce::Gnm::CbPerfCounter : __int32
{
  kCbPerfCounterNone = 0x0,
  kCbPerfCounterBusy = 0x1,
  kCbPerfCounterCoreSclkVld = 0x2,
  kCbPerfCounterRegSclk0Vld = 0x3,
  kCbPerfCounterRegSclk1Vld = 0x4,
  kCbPerfCounterDrawnQuad = 0x5,
  kCbPerfCounterDrawnPixel = 0x6,
  kCbPerfCounterDrawnQuadFragment = 0x7,
  kCbPerfCounterDrawnTile = 0x8,
  kCbPerfCounterDbCbTileValidReady = 0x9,
  kCbPerfCounterDbCbTileValidReadyb = 0xA,
  kCbPerfCounterDbCbTileValidbReady = 0xB,
  kCbPerfCounterDbCbTileValidbReadyb = 0xC,
  kCbPerfCounterCmFcTileValidReady = 0xD,
  kCbPerfCounterCmFcTileValidReadyb = 0xE,
  kCbPerfCounterCmFcTileValidbReady = 0xF,
  kCbPerfCounterCmFcTileValidbReadyb = 0x10,
  kCbPerfCounterMergeTileOnlyValidReady = 0x11,
  kCbPerfCounterMergeTileOnlyValidReadyb = 0x12,
  kCbPerfCounterDbCbLquadValidReady = 0x13,
  kCbPerfCounterDbCbLquadValidReadyb = 0x14,
  kCbPerfCounterDbCbLquadValidbReady = 0x15,
  kCbPerfCounterDbCbLquadValidbReadyb = 0x16,
  kCbPerfCounterLquadNoTile = 0x17,
  kCbPerfCounterLquadFormatIsExport32R = 0x18,
  kCbPerfCounterLquadFormatIsExport32Ar = 0x19,
  kCbPerfCounterLquadFormatIsExport32Gr = 0x1A,
  kCbPerfCounterLquadFormatIsExport32Abgr = 0x1B,
  kCbPerfCounterLquadFormatIsExportFp16Abgr = 0x1C,
  kCbPerfCounterLquadFormatIsExportSigned16Abgr = 0x1D,
  kCbPerfCounterLquadFormatIsExportUnsigned16Abgr = 0x1E,
  kCbPerfCounterQuadKilledByExtraPixelExport = 0x1F,
  kCbPerfCounterQuadKilledByColorInvalid = 0x20,
  kCbPerfCounterQuadKilledByNullTargetShaderMask = 0x21,
  kCbPerfCounterQuadKilledByNullSampleMask = 0x22,
  kCbPerfCounterQuadKilledByDiscardPixel = 0x23,
  kCbPerfCounterFcClearQuadValidReady = 0x24,
  kCbPerfCounterFcClearQuadValidReadyb = 0x25,
  kCbPerfCounterFcClearQuadValidbReady = 0x26,
  kCbPerfCounterFcClearQuadValidbReadyb = 0x27,
  kCbPerfCounterFopInValidReady = 0x28,
  kCbPerfCounterFopInValidReadyb = 0x29,
  kCbPerfCounterFopInValidbReady = 0x2A,
  kCbPerfCounterFopInValidbReadyb = 0x2B,
  kCbPerfCounterFcCcQuadfragValidReady = 0x2C,
  kCbPerfCounterFcCcQuadfragValidReadyb = 0x2D,
  kCbPerfCounterFcCcQuadfragValidbReady = 0x2E,
  kCbPerfCounterFcCcQuadfragValidbReadyb = 0x2F,
  kCbPerfCounterCcIbSrFragValidReady = 0x30,
  kCbPerfCounterCcIbSrFragValidReadyb = 0x31,
  kCbPerfCounterCcIbSrFragValidbReady = 0x32,
  kCbPerfCounterCcIbSrFragValidbReadyb = 0x33,
  kCbPerfCounterCcIbTbFragValidReady = 0x34,
  kCbPerfCounterCcIbTbFragValidReadyb = 0x35,
  kCbPerfCounterCcIbTbFragValidbReady = 0x36,
  kCbPerfCounterCcIbTbFragValidbReadyb = 0x37,
  kCbPerfCounterCcRbBcEvenfragValidReady = 0x38,
  kCbPerfCounterCcRbBcEvenfragValidReadyb = 0x39,
  kCbPerfCounterCcRbBcEvenfragValidbReady = 0x3A,
  kCbPerfCounterCcRbBcEvenfragValidbReadyb = 0x3B,
  kCbPerfCounterCcRbBcOddfragValidReady = 0x3C,
  kCbPerfCounterCcRbBcOddfragValidReadyb = 0x3D,
  kCbPerfCounterCcRbBcOddfragValidbReady = 0x3E,
  kCbPerfCounterCcRbBcOddfragValidbReadyb = 0x3F,
  kCbPerfCounterCcBcCsFragValid = 0x40,
  kCbPerfCounterCmCacheHit = 0x41,
  kCbPerfCounterCmCacheTagMiss = 0x42,
  kCbPerfCounterCmCacheSectorMiss = 0x43,
  kCbPerfCounterCmCacheReevictionStall = 0x44,
  kCbPerfCounterCmCacheEvictNonzeroInflightStall = 0x45,
  kCbPerfCounterCmCacheReplacePendingEvictStall = 0x46,
  kCbPerfCounterCmCacheInflightCounterMaximumStall = 0x47,
  kCbPerfCounterCmCacheReadOutputStall = 0x48,
  kCbPerfCounterCmCacheWriteOutputStall = 0x49,
  kCbPerfCounterCmCacheAckOutputStall = 0x4A,
  kCbPerfCounterCmCacheStall = 0x4B,
  kCbPerfCounterCmCacheFlush = 0x4C,
  kCbPerfCounterCmCacheTagsFlushed = 0x4D,
  kCbPerfCounterCmCacheSectorsFlushed = 0x4E,
  kCbPerfCounterCmCacheDirtySectorsFlushed = 0x4F,
  kCbPerfCounterFcCacheHit = 0x50,
  kCbPerfCounterFcCacheTagMiss = 0x51,
  kCbPerfCounterFcCacheSectorMiss = 0x52,
  kCbPerfCounterFcCacheReevictionStall = 0x53,
  kCbPerfCounterFcCacheEvictNonzeroInflightStall = 0x54,
  kCbPerfCounterFcCacheReplacePendingEvictStall = 0x55,
  kCbPerfCounterFcCacheInflightCounterMaximumStall = 0x56,
  kCbPerfCounterFcCacheReadOutputStall = 0x57,
  kCbPerfCounterFcCacheWriteOutputStall = 0x58,
  kCbPerfCounterFcCacheAckOutputStall = 0x59,
  kCbPerfCounterFcCacheStall = 0x5A,
  kCbPerfCounterFcCacheFlush = 0x5B,
  kCbPerfCounterFcCacheTagsFlushed = 0x5C,
  kCbPerfCounterFcCacheSectorsFlushed = 0x5D,
  kCbPerfCounterFcCacheDirtySectorsFlushed = 0x5E,
  kCbPerfCounterCcCacheHit = 0x5F,
  kCbPerfCounterCcCacheTagMiss = 0x60,
  kCbPerfCounterCcCacheSectorMiss = 0x61,
  kCbPerfCounterCcCacheReevictionStall = 0x62,
  kCbPerfCounterCcCacheEvictNonzeroInflightStall = 0x63,
  kCbPerfCounterCcCacheReplacePendingEvictStall = 0x64,
  kCbPerfCounterCcCacheInflightCounterMaximumStall = 0x65,
  kCbPerfCounterCcCacheReadOutputStall = 0x66,
  kCbPerfCounterCcCacheWriteOutputStall = 0x67,
  kCbPerfCounterCcCacheAckOutputStall = 0x68,
  kCbPerfCounterCcCacheStall = 0x69,
  kCbPerfCounterCcCacheFlush = 0x6A,
  kCbPerfCounterCcCacheTagsFlushed = 0x6B,
  kCbPerfCounterCcCacheSectorsFlushed = 0x6C,
  kCbPerfCounterCcCacheDirtySectorsFlushed = 0x6D,
  kCbPerfCounterCcCacheWaToRmwConversion = 0x6E,
  kCbPerfCounterCbTapWrreqValidReady = 0x6F,
  kCbPerfCounterCbTapWrreqValidReadyb = 0x70,
  kCbPerfCounterCbTapWrreqValidbReady = 0x71,
  kCbPerfCounterCbTapWrreqValidbReadyb = 0x72,
  kCbPerfCounterCmMcWriteRequest = 0x73,
  kCbPerfCounterFcMcWriteRequest = 0x74,
  kCbPerfCounterCcMcWriteRequest = 0x75,
  kCbPerfCounterCmMcWriteRequestsInFlight = 0x76,
  kCbPerfCounterFcMcWriteRequestsInFlight = 0x77,
  kCbPerfCounterCcMcWriteRequestsInFlight = 0x78,
  kCbPerfCounterCbTapRdreqValidReady = 0x79,
  kCbPerfCounterCbTapRdreqValidReadyb = 0x7A,
  kCbPerfCounterCbTapRdreqValidbReady = 0x7B,
  kCbPerfCounterCbTapRdreqValidbReadyb = 0x7C,
  kCbPerfCounterCmMcReadRequest = 0x7D,
  kCbPerfCounterFcMcReadRequest = 0x7E,
  kCbPerfCounterCcMcReadRequest = 0x7F,
  kCbPerfCounterCmMcReadRequestsInFlight = 0x80,
  kCbPerfCounterFcMcReadRequestsInFlight = 0x81,
  kCbPerfCounterCcMcReadRequestsInFlight = 0x82,
  kCbPerfCounterCmTqFull = 0x83,
  kCbPerfCounterCmTqFifoTileResidencyStall = 0x84,
  kCbPerfCounterFcQuadRdlatFifoFull = 0x85,
  kCbPerfCounterFcTileRdlatFifoFull = 0x86,
  kCbPerfCounterFcRdlatFifoQuadResidencyStall = 0x87,
  kCbPerfCounterFopFmaskRawStall = 0x88,
  kCbPerfCounterFopFmaskBypassStall = 0x89,
  kCbPerfCounterCcSfFull = 0x8A,
  kCbPerfCounterCcRbFull = 0x8B,
  kCbPerfCounterCcEvenfifoQuadResidencyStall = 0x8C,
  kCbPerfCounterCcOddfifoQuadResidencyStall = 0x8D,
  kCbPerfCounterBlenderRawHazardStall = 0x8E,
  kCbPerfCounterEvent = 0x8F,
  kCbPerfCounterEventCacheFlushTs = 0x90,
  kCbPerfCounterEventContextDone = 0x91,
  kCbPerfCounterEventCacheFlush = 0x92,
  kCbPerfCounterEventCacheFlushAndInvTsEvent = 0x93,
  kCbPerfCounterEventCacheFlushAndInvEvent = 0x94,
  kCbPerfCounterEventFlushAndInvCbDataTs = 0x95,
  kCbPerfCounterEventFlushAndInvCbMeta = 0x96,
  kCbPerfCounterCcSurfaceSync = 0x97,
  kCbPerfCounterCmaskReadData0Xc = 0x98,
  kCbPerfCounterCmaskReadData0Xd = 0x99,
  kCbPerfCounterCmaskReadData0Xe = 0x9A,
  kCbPerfCounterCmaskReadData0Xf = 0x9B,
  kCbPerfCounterCmaskWriteData0Xc = 0x9C,
  kCbPerfCounterCmaskWriteData0Xd = 0x9D,
  kCbPerfCounterCmaskWriteData0Xe = 0x9E,
  kCbPerfCounterCmaskWriteData0Xf = 0x9F,
  kCbPerfCounterTwoProbeQuadFragment = 0xA0,
  kCbPerfCounterExport32AbgrQuadFragment = 0xA1,
  kCbPerfCounterDualSourceColorQuadFragment = 0xA2,
  kCbPerfCounterQuadHas1FragmentBeforeUpdate = 0xA3,
  kCbPerfCounterQuadHas2FragmentsBeforeUpdate = 0xA4,
  kCbPerfCounterQuadHas3FragmentsBeforeUpdate = 0xA5,
  kCbPerfCounterQuadHas4FragmentsBeforeUpdate = 0xA6,
  kCbPerfCounterQuadHas5FragmentsBeforeUpdate = 0xA7,
  kCbPerfCounterQuadHas6FragmentsBeforeUpdate = 0xA8,
  kCbPerfCounterQuadHas7FragmentsBeforeUpdate = 0xA9,
  kCbPerfCounterQuadHas8FragmentsBeforeUpdate = 0xAA,
  kCbPerfCounterQuadHas1FragmentAfterUpdate = 0xAB,
  kCbPerfCounterQuadHas2FragmentsAfterUpdate = 0xAC,
  kCbPerfCounterQuadHas3FragmentsAfterUpdate = 0xAD,
  kCbPerfCounterQuadHas4FragmentsAfterUpdate = 0xAE,
  kCbPerfCounterQuadHas5FragmentsAfterUpdate = 0xAF,
  kCbPerfCounterQuadHas6FragmentsAfterUpdate = 0xB0,
  kCbPerfCounterQuadHas7FragmentsAfterUpdate = 0xB1,
  kCbPerfCounterQuadHas8FragmentsAfterUpdate = 0xB2,
  kCbPerfCounterQuadAdded1Fragment = 0xB3,
  kCbPerfCounterQuadAdded2Fragments = 0xB4,
  kCbPerfCounterQuadAdded3Fragments = 0xB5,
  kCbPerfCounterQuadAdded4Fragments = 0xB6,
  kCbPerfCounterQuadAdded5Fragments = 0xB7,
  kCbPerfCounterQuadAdded6Fragments = 0xB8,
  kCbPerfCounterQuadAdded7Fragments = 0xB9,
  kCbPerfCounterQuadRemoved1Fragment = 0xBA,
  kCbPerfCounterQuadRemoved2Fragments = 0xBB,
  kCbPerfCounterQuadRemoved3Fragments = 0xBC,
  kCbPerfCounterQuadRemoved4Fragments = 0xBD,
  kCbPerfCounterQuadRemoved5Fragments = 0xBE,
  kCbPerfCounterQuadRemoved6Fragments = 0xBF,
  kCbPerfCounterQuadRemoved7Fragments = 0xC0,
  kCbPerfCounterQuadReadsFragment0 = 0xC1,
  kCbPerfCounterQuadReadsFragment1 = 0xC2,
  kCbPerfCounterQuadReadsFragment2 = 0xC3,
  kCbPerfCounterQuadReadsFragment3 = 0xC4,
  kCbPerfCounterQuadReadsFragment4 = 0xC5,
  kCbPerfCounterQuadReadsFragment5 = 0xC6,
  kCbPerfCounterQuadReadsFragment6 = 0xC7,
  kCbPerfCounterQuadReadsFragment7 = 0xC8,
  kCbPerfCounterQuadWritesFragment0 = 0xC9,
  kCbPerfCounterQuadWritesFragment1 = 0xCA,
  kCbPerfCounterQuadWritesFragment2 = 0xCB,
  kCbPerfCounterQuadWritesFragment3 = 0xCC,
  kCbPerfCounterQuadWritesFragment4 = 0xCD,
  kCbPerfCounterQuadWritesFragment5 = 0xCE,
  kCbPerfCounterQuadWritesFragment6 = 0xCF,
  kCbPerfCounterQuadWritesFragment7 = 0xD0,
  kCbPerfCounterQuadBlendOptDontReadDst = 0xD1,
  kCbPerfCounterQuadBlendOptBlendBypass = 0xD2,
  kCbPerfCounterQuadBlendOptDiscardPixels = 0xD3,
  kCbPerfCounterQuadDstReadCouldHaveBeenOptimized = 0xD4,
  kCbPerfCounterQuadBlendingCouldHaveBeenBypassed = 0xD5,
  kCbPerfCounterQuadCouldHaveBeenDiscarded = 0xD6,
  kCbPerfCounterBlendOptPixelsResultEqDest = 0xD7,
  kCbPerfCounterDrawnBusy = 0xD8,
  kCbPerfCounterTileToCmrRegionBusy = 0xD9,
  kCbPerfCounterCmrToFcrRegionBusy = 0xDA,
  kCbPerfCounterFcrToCcrRegionBusy = 0xDB,
  kCbPerfCounterCcrToCcwRegionBusy = 0xDC,
  kCbPerfCounterFcPfSlowModeQuadEmptyHalfDropped = 0xDD,
  kCbPerfCounterFcSequencerClear = 0xDE,
  kCbPerfCounterFcSequencerEliminateFastClear = 0xDF,
  kCbPerfCounterFcSequencerFmaskDecompress = 0xE0,
  kCbPerfCounterFcSequencerFmaskCompressionDisable = 0xE1,
  kNumCbPerfCounters = 0xE2,
  kCbPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::DbPerfCounter : __int32
{
  kDbPerfCounterScDbTileSends = 0x0,
  kDbPerfCounterScDbTileBusy = 0x1,
  kDbPerfCounterScDbTileStalls = 0x2,
  kDbPerfCounterScDbTileEvents = 0x3,
  kDbPerfCounterScDbTileTiles = 0x4,
  kDbPerfCounterScDbTileCovered = 0x5,
  kDbPerfCounterHizTcReadStarved = 0x6,
  kDbPerfCounterHizTcWriteStall = 0x7,
  kDbPerfCounterHizQtilesCulled = 0x8,
  kDbPerfCounterHisQtilesCulled = 0x9,
  kDbPerfCounterDbScTileSends = 0xA,
  kDbPerfCounterDbScTileBusy = 0xB,
  kDbPerfCounterDbScTileStalls = 0xC,
  kDbPerfCounterDbScTileDfStalls = 0xD,
  kDbPerfCounterDbScTileTiles = 0xE,
  kDbPerfCounterDbScTileCulled = 0xF,
  kDbPerfCounterDbScTileHierKill = 0x10,
  kDbPerfCounterDbScTileFastOps = 0x11,
  kDbPerfCounterDbScTileNoOps = 0x12,
  kDbPerfCounterDbScTileTileRate = 0x13,
  kDbPerfCounterDbScTileSsaaKill = 0x14,
  kDbPerfCounterDbScTileFastZOps = 0x15,
  kDbPerfCounterDbScTileFastStencilOps = 0x16,
  kDbPerfCounterScDbQuadSends = 0x17,
  kDbPerfCounterScDbQuadBusy = 0x18,
  kDbPerfCounterScDbQuadSquads = 0x19,
  kDbPerfCounterScDbQuadTiles = 0x1A,
  kDbPerfCounterScDbQuadPixels = 0x1B,
  kDbPerfCounterScDbQuadKilledTiles = 0x1C,
  kDbPerfCounterDbScQuadSends = 0x1D,
  kDbPerfCounterDbScQuadBusy = 0x1E,
  kDbPerfCounterDbScQuadStalls = 0x1F,
  kDbPerfCounterDbScQuadTiles = 0x20,
  kDbPerfCounterDbScQuadLitQuad = 0x21,
  kDbPerfCounterDbCbTileSends = 0x22,
  kDbPerfCounterDbCbTileBusy = 0x23,
  kDbPerfCounterDbCbTileStalls = 0x24,
  kDbPerfCounterSxDbQuadSends = 0x25,
  kDbPerfCounterSxDbQuadBusy = 0x26,
  kDbPerfCounterSxDbQuadStalls = 0x27,
  kDbPerfCounterSxDbQuadQuads = 0x28,
  kDbPerfCounterSxDbQuadPixels = 0x29,
  kDbPerfCounterSxDbQuadExports = 0x2A,
  kDbPerfCounterShQuadsOutstandingSum = 0x2B,
  kDbPerfCounterDbCbLquadSends = 0x2C,
  kDbPerfCounterDbCbLquadBusy = 0x2D,
  kDbPerfCounterDbCbLquadStalls = 0x2E,
  kDbPerfCounterDbCbLquadQuads = 0x2F,
  kDbPerfCounterTileRdSends = 0x30,
  kDbPerfCounterMiTileRdOutstandingSum = 0x31,
  kDbPerfCounterQuadRdSends = 0x32,
  kDbPerfCounterQuadRdBusy = 0x33,
  kDbPerfCounterQuadRdMiStall = 0x34,
  kDbPerfCounterQuadRdRwCollision = 0x35,
  kDbPerfCounterQuadRdTagStall = 0x36,
  kDbPerfCounterQuadRd32ByteReqs = 0x37,
  kDbPerfCounterQuadRdPanic = 0x38,
  kDbPerfCounterMiQuadRdOutstandingSum = 0x39,
  kDbPerfCounterQuadRdretSends = 0x3A,
  kDbPerfCounterQuadRdretBusy = 0x3B,
  kDbPerfCounterTileWrSends = 0x3C,
  kDbPerfCounterTileWrAcks = 0x3D,
  kDbPerfCounterMiTileWrOutstandingSum = 0x3E,
  kDbPerfCounterQuadWrSends = 0x3F,
  kDbPerfCounterQuadWrBusy = 0x40,
  kDbPerfCounterQuadWrMiStall = 0x41,
  kDbPerfCounterQuadWrCoherencyStall = 0x42,
  kDbPerfCounterQuadWrAcks = 0x43,
  kDbPerfCounterMiQuadWrOutstandingSum = 0x44,
  kDbPerfCounterTileCacheMisses = 0x45,
  kDbPerfCounterTileCacheHits = 0x46,
  kDbPerfCounterTileCacheFlushes = 0x47,
  kDbPerfCounterTileCacheSurfaceStall = 0x48,
  kDbPerfCounterTileCacheStarves = 0x49,
  kDbPerfCounterTileCacheMemReturnStarve = 0x4A,
  kDbPerfCounterTcpDispatcherReads = 0x4B,
  kDbPerfCounterTcpPrefetcherReads = 0x4C,
  kDbPerfCounterTcpPreloaderReads = 0x4D,
  kDbPerfCounterTcpDispatcherFlushes = 0x4E,
  kDbPerfCounterTcpPrefetcherFlushes = 0x4F,
  kDbPerfCounterTcpPreloaderFlushes = 0x50,
  kDbPerfCounterDepthTileCacheSends = 0x51,
  kDbPerfCounterDepthTileCacheBusy = 0x52,
  kDbPerfCounterDepthTileCacheStarves = 0x53,
  kDbPerfCounterDepthTileCacheDtileLocked = 0x54,
  kDbPerfCounterDepthTileCacheAllocStall = 0x55,
  kDbPerfCounterDepthTileCacheMisses = 0x56,
  kDbPerfCounterDepthTileCacheHits = 0x57,
  kDbPerfCounterDepthTileCacheFlushes = 0x58,
  kDbPerfCounterDepthTileCacheNoopTile = 0x59,
  kDbPerfCounterDepthTileCacheDetailedNoop = 0x5A,
  kDbPerfCounterDepthTileCacheEvent = 0x5B,
  kDbPerfCounterDepthTileCacheTileFrees = 0x5C,
  kDbPerfCounterDepthTileCacheDataFrees = 0x5D,
  kDbPerfCounterDepthTileCacheMemReturnStarve = 0x5E,
  kDbPerfCounterStencilCacheMisses = 0x5F,
  kDbPerfCounterStencilCacheHits = 0x60,
  kDbPerfCounterStencilCacheFlushes = 0x61,
  kDbPerfCounterStencilCacheStarves = 0x62,
  kDbPerfCounterStencilCacheFrees = 0x63,
  kDbPerfCounterZCacheSeparateZMisses = 0x64,
  kDbPerfCounterZCacheSeparateZHits = 0x65,
  kDbPerfCounterZCacheSeparateZFlushes = 0x66,
  kDbPerfCounterZCacheSeparateZStarves = 0x67,
  kDbPerfCounterZCachePmaskMisses = 0x68,
  kDbPerfCounterZCachePmaskHits = 0x69,
  kDbPerfCounterZCachePmaskFlushes = 0x6A,
  kDbPerfCounterZCachePmaskStarves = 0x6B,
  kDbPerfCounterZCacheFrees = 0x6C,
  kDbPerfCounterPlaneCacheMisses = 0x6D,
  kDbPerfCounterPlaneCacheHits = 0x6E,
  kDbPerfCounterPlaneCacheFlushes = 0x6F,
  kDbPerfCounterPlaneCacheStarves = 0x70,
  kDbPerfCounterPlaneCacheFrees = 0x71,
  kDbPerfCounterFlushExpandedStencil = 0x72,
  kDbPerfCounterFlushCompressedStencil = 0x73,
  kDbPerfCounterFlushSingleStencil = 0x74,
  kDbPerfCounterPlanesFlushed = 0x75,
  kDbPerfCounterFlush1Plane = 0x76,
  kDbPerfCounterFlush2Plane = 0x77,
  kDbPerfCounterFlush3Plane = 0x78,
  kDbPerfCounterFlush4Plane = 0x79,
  kDbPerfCounterFlush5Plane = 0x7A,
  kDbPerfCounterFlush6Plane = 0x7B,
  kDbPerfCounterFlush7Plane = 0x7C,
  kDbPerfCounterFlush8Plane = 0x7D,
  kDbPerfCounterFlush9Plane = 0x7E,
  kDbPerfCounterFlush10Plane = 0x7F,
  kDbPerfCounterFlush11Plane = 0x80,
  kDbPerfCounterFlush12Plane = 0x81,
  kDbPerfCounterFlush13Plane = 0x82,
  kDbPerfCounterFlush14Plane = 0x83,
  kDbPerfCounterFlush15Plane = 0x84,
  kDbPerfCounterFlush16Plane = 0x85,
  kDbPerfCounterFlushExpandedZ = 0x86,
  kDbPerfCounterEarlyzWaitingForPostzDone = 0x87,
  kDbPerfCounterRezWaitingForPostzDone = 0x88,
  kDbPerfCounterDkTileSends = 0x89,
  kDbPerfCounterDkTileBusy = 0x8A,
  kDbPerfCounterDkTileQuadStarves = 0x8B,
  kDbPerfCounterDkTileStalls = 0x8C,
  kDbPerfCounterDkSquadSends = 0x8D,
  kDbPerfCounterDkSquadBusy = 0x8E,
  kDbPerfCounterDkSquadStalls = 0x8F,
  kDbPerfCounterOpPipeBusy = 0x90,
  kDbPerfCounterOpPipeMcReadStall = 0x91,
  kDbPerfCounterQcBusy = 0x92,
  kDbPerfCounterQcXfc = 0x93,
  kDbPerfCounterQcConflicts = 0x94,
  kDbPerfCounterQcFullStall = 0x95,
  kDbPerfCounterQcInPrezTileStallsPostz = 0x96,
  kDbPerfCounterQcInPostzTileStallsPrez = 0x97,
  kDbPerfCounterTscInsertSummarizeStall = 0x98,
  kDbPerfCounterTlBusy = 0x99,
  kDbPerfCounterTlDtcReadStarved = 0x9A,
  kDbPerfCounterTlZFetchStall = 0x9B,
  kDbPerfCounterTlStencilStall = 0x9C,
  kDbPerfCounterTlZDecompressStall = 0x9D,
  kDbPerfCounterTlStencilLockedStall = 0x9E,
  kDbPerfCounterTlEvents = 0x9F,
  kDbPerfCounterTlSummarizeSquads = 0xA0,
  kDbPerfCounterTlFlushExpandSquads = 0xA1,
  kDbPerfCounterTlExpandSquads = 0xA2,
  kDbPerfCounterTlPrezSquads = 0xA3,
  kDbPerfCounterTlPostzSquads = 0xA4,
  kDbPerfCounterTlPrezNoopSquads = 0xA5,
  kDbPerfCounterTlPostzNoopSquads = 0xA6,
  kDbPerfCounterTlTileOps = 0xA7,
  kDbPerfCounterTlInXfc = 0xA8,
  kDbPerfCounterTlInSingleStencilExpandStall = 0xA9,
  kDbPerfCounterTlInFastZStall = 0xAA,
  kDbPerfCounterTlOutXfc = 0xAB,
  kDbPerfCounterTlOutSquads = 0xAC,
  kDbPerfCounterZfPlaneMulticycle = 0xAD,
  kDbPerfCounterPostzSamplesPassingZ = 0xAE,
  kDbPerfCounterPostzSamplesFailingZ = 0xAF,
  kDbPerfCounterPostzSamplesFailingS = 0xB0,
  kDbPerfCounterPrezSamplesPassingZ = 0xB1,
  kDbPerfCounterPrezSamplesFailingZ = 0xB2,
  kDbPerfCounterPrezSamplesFailingS = 0xB3,
  kDbPerfCounterTsTcUpdateStall = 0xB4,
  kDbPerfCounterScKickStart = 0xB5,
  kDbPerfCounterScKickEnd = 0xB6,
  kDbPerfCounterClockRegActive = 0xB7,
  kDbPerfCounterClockMainActive = 0xB8,
  kDbPerfCounterClockMemExportActive = 0xB9,
  kDbPerfCounterEsrPsOutBusy = 0xBA,
  kDbPerfCounterEsrPsLqfBusy = 0xBB,
  kDbPerfCounterEsrPsLqfStall = 0xBC,
  kDbPerfCounterEtrOutSend = 0xBD,
  kDbPerfCounterEtrOutBusy = 0xBE,
  kDbPerfCounterEtrOutLtileProbeFifoFullStall = 0xBF,
  kDbPerfCounterEtrOutCbTileStall = 0xC0,
  kDbPerfCounterEtrOutEsrStall = 0xC1,
  kDbPerfCounterEsrPsSqqBusy = 0xC2,
  kDbPerfCounterEsrPsSqqStall = 0xC3,
  kDbPerfCounterEsrEotFwdBusy = 0xC4,
  kDbPerfCounterEsrEotFwdHoldingSquad = 0xC5,
  kDbPerfCounterEsrEotFwdForward = 0xC6,
  kDbPerfCounterEsrSqqZiBusy = 0xC7,
  kDbPerfCounterEsrSqqZiStall = 0xC8,
  kDbPerfCounterPostzlSqPtBusy = 0xC9,
  kDbPerfCounterPostzlSqPtStall = 0xCA,
  kDbPerfCounterPostzlSeBusy = 0xCB,
  kDbPerfCounterPostzlSeStall = 0xCC,
  kDbPerfCounterPostzlPartialLaunch = 0xCD,
  kDbPerfCounterPostzlFullLaunch = 0xCE,
  kDbPerfCounterPostzlPartialWaiting = 0xCF,
  kDbPerfCounterPostzlTileMemStall = 0xD0,
  kDbPerfCounterPostzlTileInitStall = 0xD1,
  kDbPerfCounterPrezlTileMemStall = 0xD2,
  kDbPerfCounterPrezlTileInitStall = 0xD3,
  kDbPerfCounterDttSmClashStall = 0xD4,
  kDbPerfCounterDttSmSlotStall = 0xD5,
  kDbPerfCounterDttSmMissStall = 0xD6,
  kDbPerfCounterMiRdreqBusy = 0xD7,
  kDbPerfCounterMiRdreqStall = 0xD8,
  kDbPerfCounterMiWrreqBusy = 0xD9,
  kDbPerfCounterMiWrreqStall = 0xDA,
  kDbPerfCounterRecompTileTo1ZplaneNoFastop = 0xDB,
  kDbPerfCounterDkgTileRateTile = 0xDC,
  kDbPerfCounterPrezlSrcInSends = 0xDD,
  kDbPerfCounterPrezlSrcInStall = 0xDE,
  kDbPerfCounterPrezlSrcInSquads = 0xDF,
  kDbPerfCounterPrezlSrcInSquadsUnrolled = 0xE0,
  kDbPerfCounterPrezlSrcInTileRate = 0xE1,
  kDbPerfCounterPrezlSrcInTileRateUnrolled = 0xE2,
  kDbPerfCounterPrezlSrcOutStall = 0xE3,
  kDbPerfCounterPostzlSrcInSends = 0xE4,
  kDbPerfCounterPostzlSrcInStall = 0xE5,
  kDbPerfCounterPostzlSrcInSquads = 0xE6,
  kDbPerfCounterPostzlSrcInSquadsUnrolled = 0xE7,
  kDbPerfCounterPostzlSrcInTileRate = 0xE8,
  kDbPerfCounterPostzlSrcInTileRateUnrolled = 0xE9,
  kDbPerfCounterPostzlSrcOutStall = 0xEA,
  kDbPerfCounterEsrPsSrcInSends = 0xEB,
  kDbPerfCounterEsrPsSrcInStall = 0xEC,
  kDbPerfCounterEsrPsSrcInSquads = 0xED,
  kDbPerfCounterEsrPsSrcInSquadsUnrolled = 0xEE,
  kDbPerfCounterEsrPsSrcInTileRate = 0xEF,
  kDbPerfCounterEsrPsSrcInTileRateUnrolled = 0xF0,
  kDbPerfCounterEsrPsSrcInTileRateUnrolledToPixelRate = 0xF1,
  kDbPerfCounterEsrPsSrcOutStall = 0xF2,
  kDbPerfCounterDepthBoundsQtilesCulled = 0xF3,
  kDbPerfCounterPrezSamplesFailingDb = 0xF4,
  kDbPerfCounterPostzSamplesFailingDb = 0xF5,
  kDbPerfCounterFlushCompressed = 0xF6,
  kDbPerfCounterFlushPlaneLe4 = 0xF7,
  kDbPerfCounterTilesZFullySummarized = 0xF8,
  kDbPerfCounterTilesStencilFullySummarized = 0xF9,
  kDbPerfCounterTilesZClearOnExpclear = 0xFA,
  kDbPerfCounterTilesSClearOnExpclear = 0xFB,
  kDbPerfCounterTilesDecompOnExpclear = 0xFC,
  kDbPerfCounterTilesCompressedToDecompressed = 0xFD,
  kDbPerfCounterOpPipePrezBusy = 0xFE,
  kDbPerfCounterOpPipePostzBusy = 0xFF,
  kDbPerfCounterDiDtStall = 0x100,
  kNumDbPerfCounters = 0x101,
  kDbPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::SqPerfCounter : __int32
{
  kSqPerfCounterNone = 0x0,
  kSqPerfCounterAccumPrev = 0x1,
  kSqPerfCounterCycles = 0x2,
  kSqPerfCounterBusyCycles = 0x3,
  kSqPerfCounterWaves = 0x4,
  kSqPerfCounterLevelWaves = 0x5,
  kSqPerfCounterWavesEq64 = 0x6,
  kSqPerfCounterWavesLt64 = 0x7,
  kSqPerfCounterWavesLt48 = 0x8,
  kSqPerfCounterWavesLt32 = 0x9,
  kSqPerfCounterWavesLt16 = 0xA,
  kSqPerfCounterWavesCu = 0xB,
  kSqPerfCounterLevelWavesCu = 0xC,
  kSqPerfCounterBusyCuCycles = 0xD,
  kSqPerfCounterItems = 0xE,
  kSqPerfCounterQuads = 0xF,
  kSqPerfCounterEvents = 0x10,
  kSqPerfCounterSurfSyncs = 0x11,
  kSqPerfCounterTtraceReqs = 0x12,
  kSqPerfCounterTtraceInflightReqs = 0x13,
  kSqPerfCounterTtraceStall = 0x14,
  kSqPerfCounterMsgCntr = 0x15,
  kSqPerfCounterMsgPerf = 0x16,
  kSqPerfCounterMsgGscnt = 0x17,
  kSqPerfCounterMsgInterrupt = 0x18,
  kSqPerfCounterInsts = 0x19,
  kSqPerfCounterInstsValu = 0x1A,
  kSqPerfCounterInstsVmemWr = 0x1B,
  kSqPerfCounterInstsVmemRd = 0x1C,
  kSqPerfCounterInstsVmem = 0x1D,
  kSqPerfCounterInstsSalu = 0x1E,
  kSqPerfCounterInstsSmem = 0x1F,
  kSqPerfCounterInstsFlat = 0x20,
  kSqPerfCounterInstsFlatLdsOnly = 0x21,
  kSqPerfCounterInstsLds = 0x22,
  kSqPerfCounterInstsGds = 0x23,
  kSqPerfCounterInstsExp = 0x24,
  kSqPerfCounterInstsExpGds = 0x25,
  kSqPerfCounterInstsBranch = 0x26,
  kSqPerfCounterInstsSendmsg = 0x27,
  kSqPerfCounterInstsVskipped = 0x28,
  kSqPerfCounterInstLevelVmem = 0x29,
  kSqPerfCounterInstLevelSmem = 0x2A,
  kSqPerfCounterInstLevelLds = 0x2B,
  kSqPerfCounterInstLevelGds = 0x2C,
  kSqPerfCounterInstLevelExp = 0x2D,
  kSqPerfCounterWaveCycles = 0x2E,
  kSqPerfCounterWaveReady = 0x2F,
  kSqPerfCounterWaitCntVm = 0x30,
  kSqPerfCounterWaitCntLgkm = 0x31,
  kSqPerfCounterWaitCntExp = 0x32,
  kSqPerfCounterWaitCntAny = 0x33,
  kSqPerfCounterWaitBarrier = 0x34,
  kSqPerfCounterWaitExpAlloc = 0x35,
  kSqPerfCounterWaitSleep = 0x36,
  kSqPerfCounterWaitOther = 0x37,
  kSqPerfCounterWaitAny = 0x38,
  kSqPerfCounterWaitTtrace = 0x39,
  kSqPerfCounterWaitIfetch = 0x3A,
  kSqPerfCounterWaitInstVmem = 0x3B,
  kSqPerfCounterWaitInstSca = 0x3C,
  kSqPerfCounterWaitInstLds = 0x3D,
  kSqPerfCounterWaitInstValu = 0x3E,
  kSqPerfCounterWaitInstExpGds = 0x3F,
  kSqPerfCounterWaitInstMisc = 0x40,
  kSqPerfCounterWaitInstFlat = 0x41,
  kSqPerfCounterActiveInstAny = 0x42,
  kSqPerfCounterActiveInstVmem = 0x43,
  kSqPerfCounterActiveInstLds = 0x44,
  kSqPerfCounterActiveInstValu = 0x45,
  kSqPerfCounterActiveInstSca = 0x46,
  kSqPerfCounterActiveInstExpGds = 0x47,
  kSqPerfCounterActiveInstMisc = 0x48,
  kSqPerfCounterActiveInstFlat = 0x49,
  kSqPerfCounterInstCyclesVmemWr = 0x4A,
  kSqPerfCounterInstCyclesVmemRd = 0x4B,
  kSqPerfCounterInstCyclesVmemAddr = 0x4C,
  kSqPerfCounterInstCyclesVmemData = 0x4D,
  kSqPerfCounterInstCyclesVmemCmd = 0x4E,
  kSqPerfCounterInstCyclesVmem = 0x4F,
  kSqPerfCounterInstCyclesLds = 0x50,
  kSqPerfCounterInstCyclesValu = 0x51,
  kSqPerfCounterInstCyclesExp = 0x52,
  kSqPerfCounterInstCyclesGds = 0x53,
  kSqPerfCounterInstCyclesSca = 0x54,
  kSqPerfCounterInstCyclesSmem = 0x55,
  kSqPerfCounterInstCyclesSalu = 0x56,
  kSqPerfCounterInstCyclesExpGds = 0x57,
  kSqPerfCounterInstCyclesMisc = 0x58,
  kSqPerfCounterThreadCyclesValu = 0x59,
  kSqPerfCounterThreadCyclesValuMax = 0x5A,
  kSqPerfCounterIfetch = 0x5B,
  kSqPerfCounterIfetchLevel = 0x5C,
  kSqPerfCounterCbranchFork = 0x5D,
  kSqPerfCounterCbranchForkSplit = 0x5E,
  kSqPerfCounterValuLdsDirectRd = 0x5F,
  kSqPerfCounterValuLdsInterpOp = 0x60,
  kSqPerfCounterLdsBankConflict = 0x61,
  kSqPerfCounterLdsAddrConflict = 0x62,
  kSqPerfCounterLdsUnalignedStall = 0x63,
  kSqPerfCounterLdsMemViolations = 0x64,
  kSqPerfCounterLdsAtomicReturn = 0x65,
  kSqPerfCounterLdsIdxActive = 0x66,
  kSqPerfCounterValuDepStall = 0x67,
  kSqPerfCounterValuStarve = 0x68,
  kSqPerfCounterExpReqFifoFull = 0x69,
  kSqPerfCounterLdsBack2BackStall = 0x6A,
  kSqPerfCounterLdsDataFifoFull = 0x6B,
  kSqPerfCounterLdsCmdFifoFull = 0x6C,
  kSqPerfCounterVmemBack2BackStall = 0x6D,
  kSqPerfCounterVmemTaAddrFifoFull = 0x6E,
  kSqPerfCounterVmemTaCmdFifoFull = 0x6F,
  kSqPerfCounterVmemExDataRegBusy = 0x70,
  kSqPerfCounterVmemWrBack2BackStall = 0x71,
  kSqPerfCounterVmemWrTaDataFifoFull = 0x72,
  kSqPerfCounterValuSrcCConflict = 0x73,
  kSqPerfCounterVmemRdSrcCdConflict = 0x74,
  kSqPerfCounterVmemWrSrcCdConflict = 0x75,
  kSqPerfCounterFlatSrcCdConflict = 0x76,
  kSqPerfCounterLdsSrcCdConflict = 0x77,
  kSqPerfCounterSrcCdBusy = 0x78,
  kSqPerfCounterPtPowerStall = 0x79,
  kSqPerfCounterUser0 = 0x7A,
  kSqPerfCounterUser1 = 0x7B,
  kSqPerfCounterUser2 = 0x7C,
  kSqPerfCounterUser3 = 0x7D,
  kSqPerfCounterUser4 = 0x7E,
  kSqPerfCounterUser5 = 0x7F,
  kSqPerfCounterUser6 = 0x80,
  kSqPerfCounterUser7 = 0x81,
  kSqPerfCounterUser8 = 0x82,
  kSqPerfCounterUser9 = 0x83,
  kSqPerfCounterUser10 = 0x84,
  kSqPerfCounterUser11 = 0x85,
  kSqPerfCounterUser12 = 0x86,
  kSqPerfCounterUser13 = 0x87,
  kSqPerfCounterUser14 = 0x88,
  kSqPerfCounterUser15 = 0x89,
  kSqPerfCounterUserLevel0 = 0x8A,
  kSqPerfCounterUserLevel1 = 0x8B,
  kSqPerfCounterUserLevel2 = 0x8C,
  kSqPerfCounterUserLevel3 = 0x8D,
  kSqPerfCounterUserLevel4 = 0x8E,
  kSqPerfCounterUserLevel5 = 0x8F,
  kSqPerfCounterUserLevel6 = 0x90,
  kSqPerfCounterUserLevel7 = 0x91,
  kSqPerfCounterUserLevel8 = 0x92,
  kSqPerfCounterUserLevel9 = 0x93,
  kSqPerfCounterUserLevel10 = 0x94,
  kSqPerfCounterUserLevel11 = 0x95,
  kSqPerfCounterUserLevel12 = 0x96,
  kSqPerfCounterUserLevel13 = 0x97,
  kSqPerfCounterUserLevel14 = 0x98,
  kSqPerfCounterUserLevel15 = 0x99,
  kSqPerfCounterPowerValu = 0x9A,
  kSqPerfCounterPowerValu0 = 0x9B,
  kSqPerfCounterPowerValu1 = 0x9C,
  kSqPerfCounterPowerValu2 = 0x9D,
  kSqPerfCounterPowerGprRd = 0x9E,
  kSqPerfCounterPowerGprWr = 0x9F,
  kSqPerfCounterPowerLdsBusy = 0xA0,
  kSqPerfCounterPowerAluBusy = 0xA1,
  kSqPerfCounterPowerTexBusy = 0xA2,
  kSqPerfCounterSqcIcacheInputValidReady = 0xA8,
  kSqPerfCounterSqcIcacheInputValidReadyb = 0xA9,
  kSqPerfCounterSqcIcacheInputValidb = 0xAA,
  kSqPerfCounterSqcDcacheInputValidReady = 0xAB,
  kSqPerfCounterSqcDcacheInputValidReadyb = 0xAC,
  kSqPerfCounterSqcDcacheInputValidb = 0xAD,
  kSqPerfCounterSqcTcReq = 0xAE,
  kSqPerfCounterSqcTcInstReq = 0xAF,
  kSqPerfCounterSqcTcDataReq = 0xB0,
  kSqPerfCounterSqcTcStall = 0xB1,
  kSqPerfCounterSqcTcStarve = 0xB2,
  kSqPerfCounterSqcIcacheBusyCycles = 0xB3,
  kSqPerfCounterSqcIcacheReq = 0xB4,
  kSqPerfCounterSqcIcacheHits = 0xB5,
  kSqPerfCounterSqcIcacheMisses = 0xB6,
  kSqPerfCounterSqcIcacheMissesDuplicate = 0xB7,
  kSqPerfCounterSqcIcacheUncached = 0xB8,
  kSqPerfCounterSqcIcacheVolatile = 0xB9,
  kSqPerfCounterSqcIcacheInvalInst = 0xBA,
  kSqPerfCounterSqcIcacheInvalAsync = 0xBB,
  kSqPerfCounterSqcIcacheInvalVolatileInst = 0xBC,
  kSqPerfCounterSqcIcacheInvalVolatileAsync = 0xBD,
  kSqPerfCounterSqcIcacheInputStallArbNoGrant = 0xBE,
  kSqPerfCounterSqcIcacheInputStallBankReadyb = 0xBF,
  kSqPerfCounterSqcIcacheCacheStalled = 0xC0,
  kSqPerfCounterSqcIcacheCacheStallInflightNonzero = 0xC1,
  kSqPerfCounterSqcIcacheCacheStallInflightMax = 0xC2,
  kSqPerfCounterSqcIcacheCacheStallVolatileMismatch = 0xC3,
  kSqPerfCounterSqcIcacheCacheStallUncachedHit = 0xC4,
  kSqPerfCounterSqcIcacheCacheStallOutput = 0xC5,
  kSqPerfCounterSqcIcacheCacheStallOutputMissFifo = 0xC6,
  kSqPerfCounterSqcIcacheCacheStallOutputHitFifo = 0xC7,
  kSqPerfCounterSqcIcacheCacheStallOutputTcIf = 0xC8,
  kSqPerfCounterSqcIcacheStallOutxbarArbNoGrant = 0xC9,
  kSqPerfCounterSqcDcacheBusyCycles = 0xCA,
  kSqPerfCounterSqcDcacheReq = 0xCB,
  kSqPerfCounterSqcDcacheHits = 0xCC,
  kSqPerfCounterSqcDcacheMisses = 0xCD,
  kSqPerfCounterSqcDcacheMissesDuplicate = 0xCE,
  kSqPerfCounterSqcDcacheUncached = 0xCF,
  kSqPerfCounterSqcDcacheVolatile = 0xD0,
  kSqPerfCounterSqcDcacheInvalInst = 0xD1,
  kSqPerfCounterSqcDcacheInvalAsync = 0xD2,
  kSqPerfCounterSqcDcacheInvalVolatileInst = 0xD3,
  kSqPerfCounterSqcDcacheInvalVolatileAsync = 0xD4,
  kSqPerfCounterSqcDcacheInputStallArbNoGrant = 0xD5,
  kSqPerfCounterSqcDcacheInputStallBankReadyb = 0xD6,
  kSqPerfCounterSqcDcacheCacheStalled = 0xD7,
  kSqPerfCounterSqcDcacheCacheStallInflightNonzero = 0xD8,
  kSqPerfCounterSqcDcacheCacheStallInflightMax = 0xD9,
  kSqPerfCounterSqcDcacheCacheStallVolatileMismatch = 0xDA,
  kSqPerfCounterSqcDcacheCacheStallUncachedHit = 0xDB,
  kSqPerfCounterSqcDcacheCacheStallOutput = 0xDC,
  kSqPerfCounterSqcDcacheCacheStallOutputMissFifo = 0xDD,
  kSqPerfCounterSqcDcacheCacheStallOutputHitFifo = 0xDE,
  kSqPerfCounterSqcDcacheCacheStallOutputTcIf = 0xDF,
  kSqPerfCounterSqcDcacheStallOutxbarArbNoGrant = 0xE0,
  kSqPerfCounterSqcDcacheReq1 = 0xE1,
  kSqPerfCounterSqcDcacheReq2 = 0xE2,
  kSqPerfCounterSqcDcacheReq4 = 0xE3,
  kSqPerfCounterSqcDcacheReq8 = 0xE4,
  kSqPerfCounterSqcDcacheReq16 = 0xE5,
  kSqPerfCounterSqcDcacheReqTime = 0xE6,
  kSqPerfCounterSqcSqDcacheReqs = 0xE7,
  kSqPerfCounterSqcDcacheFlatReq = 0xE8,
  kSqPerfCounterSqcDcacheNonflatReq = 0xE9,
  kSqPerfCounterSqcIcacheInflightLevel = 0xEA,
  kSqPerfCounterSqcIcachePreCcLevel = 0xEB,
  kSqPerfCounterSqcIcachePostCcLevel = 0xEC,
  kSqPerfCounterSqcIcachePostCcHitLevel = 0xED,
  kSqPerfCounterSqcIcachePostCcMissLevel = 0xEE,
  kSqPerfCounterSqcDcacheInflightLevel = 0xEF,
  kSqPerfCounterSqcDcachePreCcLevel = 0xF0,
  kSqPerfCounterSqcDcachePostCcLevel = 0xF1,
  kSqPerfCounterSqcDcachePostCcHitLevel = 0xF2,
  kSqPerfCounterSqcDcachePostCcMissLevel = 0xF3,
  kSqPerfCounterSqcTcInflightLevel = 0xF4,
  kSqPerfCounterSqcIcacheTcInflightLevel = 0xF5,
  kSqPerfCounterSqcDcacheTcInflightLevel = 0xF6,
  kSqPerfCounterSqcErrDcacheReq2GprAddrUnaligned = 0xF7,
  kSqPerfCounterSqcErrDcacheReq4GprAddrUnaligned = 0xF8,
  kSqPerfCounterSqcErrDcacheReq8GprAddrUnaligned = 0xF9,
  kSqPerfCounterSqcErrDcacheReq16GprAddrUnaligned = 0xFA,
  kNumSqPerfCounters = 0xFB,
  kSqPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::TaPerfCounter : __int32
{
  kTaPerfCounterTaBusy = 0x0,
  kTaPerfCounterShFifoBusy = 0x1,
  kTaPerfCounterShFifoCmdBusy = 0x2,
  kTaPerfCounterShFifoAddrBusy = 0x3,
  kTaPerfCounterShFifoDataBusy = 0x4,
  kTaPerfCounterShFifoDataSfifoBusy = 0x5,
  kTaPerfCounterShFifoDataTfifoBusy = 0x6,
  kTaPerfCounterGradientBusy = 0x7,
  kTaPerfCounterGradientFifoBusy = 0x8,
  kTaPerfCounterLodBusy = 0x9,
  kTaPerfCounterLodFifoBusy = 0xA,
  kTaPerfCounterAddresserBusy = 0xB,
  kTaPerfCounterAddresserFifoBusy = 0xC,
  kTaPerfCounterAlignerBusy = 0xD,
  kTaPerfCounterWritePathBusy = 0xE,
  kTaPerfCounterSqTaCmdCycles = 0x10,
  kTaPerfCounterSpTaAddrCycles = 0x11,
  kTaPerfCounterSpTaDataCycles = 0x12,
  kTaPerfCounterTaFaDataStateCycles = 0x13,
  kTaPerfCounterShFifoAddrWaitingOnCmdCycles = 0x14,
  kTaPerfCounterShFifoCmdWaitingOnAddrCycles = 0x15,
  kTaPerfCounterShFifoAddrStarvedWhileBusyCycles = 0x16,
  kTaPerfCounterShFifoCmdStarvedWhileBusyCycles = 0x17,
  kTaPerfCounterShFifoDataWaitingOnDataStateCycles = 0x18,
  kTaPerfCounterShFifoDataStateWaitingOnDataCycles = 0x19,
  kTaPerfCounterShFifoDataStarvedWhileBusyCycles = 0x1A,
  kTaPerfCounterShFifoDataStateStarvedWhileBusyCycles = 0x1B,
  kTaPerfCounterShFifoAddrCycles = 0x1E,
  kTaPerfCounterShFifoDataCycles = 0x1F,
  kTaPerfCounterTotalWavefronts = 0x20,
  kTaPerfCounterGradientCycles = 0x21,
  kTaPerfCounterWalkerCycles = 0x22,
  kTaPerfCounterAlignerCycles = 0x23,
  kTaPerfCounterImageWavefronts = 0x24,
  kTaPerfCounterImageReadWavefronts = 0x25,
  kTaPerfCounterImageWriteWavefronts = 0x26,
  kTaPerfCounterImageAtomicWavefronts = 0x27,
  kTaPerfCounterImageTotalCycles = 0x28,
  kTaPerfCounterBufferWavefronts = 0x2C,
  kTaPerfCounterBufferReadWavefronts = 0x2D,
  kTaPerfCounterBufferWriteWavefronts = 0x2E,
  kTaPerfCounterBufferAtomicWavefronts = 0x2F,
  kTaPerfCounterBufferCoalescableWavefronts = 0x30,
  kTaPerfCounterBufferTotalCycles = 0x31,
  kTaPerfCounterBufferCoalescableAddrMulticycledCycles = 0x32,
  kTaPerfCounterBufferCoalescableClamp16KdwordMulticycledCycles = 0x33,
  kTaPerfCounterBufferCoalescedReadCycles = 0x34,
  kTaPerfCounterBufferCoalescedWriteCycles = 0x35,
  kTaPerfCounterAddrStalledByTcCycles = 0x36,
  kTaPerfCounterAddrStalledByTdCycles = 0x37,
  kTaPerfCounterDataStalledByTcCycles = 0x38,
  kTaPerfCounterAddresserStalledByAlignerOnlyCycles = 0x39,
  kTaPerfCounterAddresserStalledCycles = 0x3A,
  kTaPerfCounterAnisoStalledByAddresserOnlyCycles = 0x3B,
  kTaPerfCounterAnisoStalledCycles = 0x3C,
  kTaPerfCounterDerivStalledByAnisoOnlyCycles = 0x3D,
  kTaPerfCounterDerivStalledCycles = 0x3E,
  kTaPerfCounterAnisoGt1CycleQuads = 0x3F,
  kTaPerfCounterColor1CyclePixels = 0x40,
  kTaPerfCounterColor2CyclePixels = 0x41,
  kTaPerfCounterColor3CyclePixels = 0x42,
  kTaPerfCounterColor4CyclePixels = 0x43,
  kTaPerfCounterMip1CyclePixels = 0x44,
  kTaPerfCounterMip2CyclePixels = 0x45,
  kTaPerfCounterVol1CyclePixels = 0x46,
  kTaPerfCounterVol2CyclePixels = 0x47,
  kTaPerfCounterBilinPoint1CyclePixels = 0x48,
  kTaPerfCounterMipmapLod0Samples = 0x49,
  kTaPerfCounterMipmapLod1Samples = 0x4A,
  kTaPerfCounterMipmapLod2Samples = 0x4B,
  kTaPerfCounterMipmapLod3Samples = 0x4C,
  kTaPerfCounterMipmapLod4Samples = 0x4D,
  kTaPerfCounterMipmapLod5Samples = 0x4E,
  kTaPerfCounterMipmapLod6Samples = 0x4F,
  kTaPerfCounterMipmapLod7Samples = 0x50,
  kTaPerfCounterMipmapLod8Samples = 0x51,
  kTaPerfCounterMipmapLod9Samples = 0x52,
  kTaPerfCounterMipmapLod10Samples = 0x53,
  kTaPerfCounterMipmapLod11Samples = 0x54,
  kTaPerfCounterMipmapLod12Samples = 0x55,
  kTaPerfCounterMipmapLod13Samples = 0x56,
  kTaPerfCounterMipmapLod14Samples = 0x57,
  kTaPerfCounterMipmapInvalidSamples = 0x58,
  kTaPerfCounterAniso1CycleQuads = 0x59,
  kTaPerfCounterAniso2CycleQuads = 0x5A,
  kTaPerfCounterAniso4CycleQuads = 0x5B,
  kTaPerfCounterAniso6CycleQuads = 0x5C,
  kTaPerfCounterAniso8CycleQuads = 0x5D,
  kTaPerfCounterAniso10CycleQuads = 0x5E,
  kTaPerfCounterAniso12CycleQuads = 0x5F,
  kTaPerfCounterAniso14CycleQuads = 0x60,
  kTaPerfCounterAniso16CycleQuads = 0x61,
  kTaPerfCounterWritePathInputCycles = 0x62,
  kTaPerfCounterWritePathOutputCycles = 0x63,
  kTaPerfCounterFlatWavefronts = 0x64,
  kTaPerfCounterFlatReadWavefronts = 0x65,
  kTaPerfCounterFlatWriteWavefronts = 0x66,
  kTaPerfCounterFlatAtomicWavefronts = 0x67,
  kTaPerfCounterFlatCoalesceableWavefronts = 0x68,
  kTaPerfCounterRegSclkVld = 0x69,
  kTaPerfCounterLocalCgDynSclkGrp0En = 0x6A,
  kTaPerfCounterLocalCgDynSclkGrp1En = 0x6B,
  kTaPerfCounterLocalCgDynSclkGrp1MemsEn = 0x6C,
  kTaPerfCounterLocalCgDynSclkGrp4En = 0x6D,
  kTaPerfCounterLocalCgDynSclkGrp5En = 0x6E,
  kNumTaPerfCounters = 0x6F,
  kTaPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::TdPerfCounter : __int32
{
  kTdPerfCounterTdBusy = 0x0,
  kTdPerfCounterInputBusy = 0x1,
  kTdPerfCounterOutputBusy = 0x2,
  kTdPerfCounterLerpBusy = 0x3,
  kTdPerfCounterRegSclkVld = 0x5,
  kTdPerfCounterLocalCgDynSclkGrp0En = 0x6,
  kTdPerfCounterLocalCgDynSclkGrp1En = 0x7,
  kTdPerfCounterLocalCgDynSclkGrp4En = 0x8,
  kTdPerfCounterLocalCgDynSclkGrp5En = 0x9,
  kTdPerfCounterTcTdFifoFull = 0xA,
  kTdPerfCounterConstantStateFull = 0xB,
  kTdPerfCounterSampleStateFull = 0xC,
  kTdPerfCounterOutputFifoFull = 0xD,
  kTdPerfCounterTcStall = 0xF,
  kTdPerfCounterPcStall = 0x10,
  kTdPerfCounterGdsStall = 0x11,
  kTdPerfCounterGather4Wavefront = 0x14,
  kTdPerfCounterSampleCWavefront = 0x15,
  kTdPerfCounterLoadWavefront = 0x16,
  kTdPerfCounterAtomicWavefront = 0x17,
  kTdPerfCounterStoreWavefront = 0x18,
  kTdPerfCounterLdfptrWavefront = 0x19,
  kTdPerfCounterBypassFilterWavefront = 0x1E,
  kTdPerfCounterMinMaxFilterWavefront = 0x1F,
  kTdPerfCounterCoalescableWavefront = 0x20,
  kTdPerfCounterCoalescedPhase = 0x21,
  kTdPerfCounterFourPhaseWavefront = 0x22,
  kTdPerfCounterEightPhaseWavefront = 0x23,
  kTdPerfCounterSixteenPhaseWavefront = 0x24,
  kTdPerfCounterFourPhaseForwardWavefront = 0x25,
  kTdPerfCounterWriteAckWavefront = 0x26,
  kTdPerfCounterUserDefinedBorder = 0x28,
  kTdPerfCounterWhiteBorder = 0x29,
  kTdPerfCounterOpaqueBlackBorder = 0x2A,
  kTdPerfCounterNack = 0x2D,
  kTdPerfCounterConsumeGdsTraffic = 0x2E,
  kTdPerfCounterAddresscmdPoison = 0x2F,
  kTdPerfCounterDataPoison = 0x30,
  kNumTdPerfCounters = 0x31,
  kTdPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::TcpPerfCounter : __int32
{
  kTcpPerfCounterTaTcpAddrStarveCycles = 0x0,
  kTcpPerfCounterTaTcpDataStarveCycles = 0x1,
  kTcpPerfCounterTcpTaAddrStallCycles = 0x2,
  kTcpPerfCounterTcpTaDataStallCycles = 0x3,
  kTcpPerfCounterTdTcpStallCycles = 0x4,
  kTcpPerfCounterTcrTcpStallCycles = 0x5,
  kTcpPerfCounterLodStallCycles = 0x6,
  kTcpPerfCounterReadTagconflictStallCycles = 0x7,
  kTcpPerfCounterWriteTagconflictStallCycles = 0x8,
  kTcpPerfCounterAtomicTagconflictStallCycles = 0x9,
  kTcpPerfCounterAllocStallCycles = 0xA,
  kTcpPerfCounterLfifoStallCycles = 0xB,
  kTcpPerfCounterRfifoStallCycles = 0xC,
  kTcpPerfCounterTcrRdretStall = 0xD,
  kTcpPerfCounterWriteConflictStall = 0xE,
  kTcpPerfCounterHoleReadStall = 0xF,
  kTcpPerfCounterReadconflictStallCycles = 0x10,
  kTcpPerfCounterPendingStallCycles = 0x11,
  kTcpPerfCounterReadfifoStallCycles = 0x12,
  kTcpPerfCounterTcpLatency = 0x13,
  kTcpPerfCounterTccReadReqLatency = 0x14,
  kTcpPerfCounterTccWriteReqLatency = 0x15,
  kTcpPerfCounterTccWriteReqHoleLatency = 0x16,
  kTcpPerfCounterTccReadReq = 0x17,
  kTcpPerfCounterTccWriteReq = 0x18,
  kTcpPerfCounterTccAtomicWithRetReq = 0x19,
  kTcpPerfCounterTccAtomicWithoutRetReq = 0x1A,
  kTcpPerfCounterTotalAtomicWithRet = 0x1F,
  kTcpPerfCounterTotalAtomicWithoutRet = 0x20,
  kTcpPerfCounterTotalWbinvl1 = 0x21,
  kTcpPerfCounterImgReadFmt1 = 0x22,
  kTcpPerfCounterImgReadFmt8 = 0x23,
  kTcpPerfCounterImgReadFmt16 = 0x24,
  kTcpPerfCounterImgReadFmt32 = 0x25,
  kTcpPerfCounterImgReadFmt32As8 = 0x26,
  kTcpPerfCounterImgReadFmt32As16 = 0x27,
  kTcpPerfCounterImgReadFmt32As128 = 0x28,
  kTcpPerfCounterImgReadFmt642Cycle = 0x29,
  kTcpPerfCounterImgReadFmt641Cycle = 0x2A,
  kTcpPerfCounterImgReadFmt96 = 0x2B,
  kTcpPerfCounterImgReadFmt1284Cycle = 0x2C,
  kTcpPerfCounterImgReadFmt1281Cycle = 0x2D,
  kTcpPerfCounterImgReadFmtBc1 = 0x2E,
  kTcpPerfCounterImgReadFmtBc2 = 0x2F,
  kTcpPerfCounterImgReadFmtBc3 = 0x30,
  kTcpPerfCounterImgReadFmtBc4 = 0x31,
  kTcpPerfCounterImgReadFmtBc5 = 0x32,
  kTcpPerfCounterImgReadFmtBc6 = 0x33,
  kTcpPerfCounterImgReadFmtBc7 = 0x34,
  kTcpPerfCounterImgReadFmtI8 = 0x35,
  kTcpPerfCounterImgReadFmtI16 = 0x36,
  kTcpPerfCounterImgReadFmtI32 = 0x37,
  kTcpPerfCounterImgReadFmtI32As8 = 0x38,
  kTcpPerfCounterImgReadFmtI32As16 = 0x39,
  kTcpPerfCounterImgWriteFmt8 = 0x3D,
  kTcpPerfCounterImgWriteFmt16 = 0x3E,
  kTcpPerfCounterImgWriteFmt32 = 0x3F,
  kTcpPerfCounterImgWriteFmt64 = 0x40,
  kTcpPerfCounterImgWriteFmt128 = 0x41,
  kTcpPerfCounterImgAtomicWithRetFmt32 = 0x45,
  kTcpPerfCounterImgAtomicWithoutRetFmt32 = 0x46,
  kTcpPerfCounterImgAtomicWithRetFmt64 = 0x47,
  kTcpPerfCounterImgAtomicWithoutRetFmt64 = 0x48,
  kTcpPerfCounterBufReadFmt8 = 0x49,
  kTcpPerfCounterBufReadFmt16 = 0x4A,
  kTcpPerfCounterBufReadFmt32 = 0x4B,
  kTcpPerfCounterBufWriteFmt8 = 0x4C,
  kTcpPerfCounterBufWriteFmt16 = 0x4D,
  kTcpPerfCounterBufWriteFmt32 = 0x4E,
  kTcpPerfCounterBufAtomicWithRetFmt32 = 0x4F,
  kTcpPerfCounterBufAtomicWithoutRetFmt32 = 0x50,
  kTcpPerfCounterBufAtomicWithRetFmt64 = 0x51,
  kTcpPerfCounterBufAtomicWithoutRetFmt64 = 0x52,
  kTcpPerfCounterArrLinearGeneral = 0x53,
  kTcpPerfCounterArrLinearAligned = 0x54,
  kTcpPerfCounterArr1DThin1 = 0x55,
  kTcpPerfCounterArr1DThick = 0x56,
  kTcpPerfCounterArr2DThin1 = 0x57,
  kTcpPerfCounterArr2DThick = 0x58,
  kTcpPerfCounterArr2DXthick = 0x59,
  kTcpPerfCounterArr3DThin1 = 0x5A,
  kTcpPerfCounterArr3DThick = 0x5B,
  kTcpPerfCounterArr3DXthick = 0x5C,
  kTcpPerfCounterDim1D = 0x5D,
  kTcpPerfCounterDim2D = 0x5E,
  kTcpPerfCounterDim3D = 0x5F,
  kTcpPerfCounterDim1DArray = 0x60,
  kTcpPerfCounterDim2DArray = 0x61,
  kTcpPerfCounterDim2DMsaa = 0x62,
  kTcpPerfCounterDim2DArrayMsaa = 0x63,
  kTcpPerfCounterDimCubeArray = 0x64,
  kTcpPerfCounterCpTcpInvalidate = 0x65,
  kTcpPerfCounterTaTcpStateRead = 0x66,
  kTcpPerfCounterTagram0Req = 0x67,
  kTcpPerfCounterTagram1Req = 0x68,
  kTcpPerfCounterTagram2Req = 0x69,
  kTcpPerfCounterTagram3Req = 0x6A,
  kTcpPerfCounterGateEn1 = 0x6B,
  kTcpPerfCounterGateEn2 = 0x6C,
  kTcpPerfCounterCoreRegSclkVld = 0x6D,
  kTcpPerfCounterTccReq = 0x6E,
  kTcpPerfCounterTccNonReadReq = 0x6F,
  kTcpPerfCounterTccBypassReadReq = 0x70,
  kTcpPerfCounterTccMissEvictReadReq = 0x71,
  kTcpPerfCounterTccVolatileReadReq = 0x72,
  kTcpPerfCounterTccVolatileBypassReadReq = 0x73,
  kTcpPerfCounterTccVolatileMissEvictReadReq = 0x74,
  kTcpPerfCounterTccBypassWriteReq = 0x75,
  kTcpPerfCounterTccMissEvictWriteReq = 0x76,
  kTcpPerfCounterTccVolatileBypassWriteReq = 0x77,
  kTcpPerfCounterTccVolatileWriteReq = 0x78,
  kTcpPerfCounterTccVolatileMissEvictWriteReq = 0x79,
  kTcpPerfCounterTccBypassAtomicReq = 0x7A,
  kTcpPerfCounterTccAtomicReq = 0x7B,
  kTcpPerfCounterTccVolatileAtomicReq = 0x7C,
  kTcpPerfCounterTccDataBusBusy = 0x7D,
  kTcpPerfCounterTotalAccesses = 0x7E,
  kTcpPerfCounterTotalRead = 0x7F,
  kTcpPerfCounterTotalHitLruRead = 0x80,
  kTcpPerfCounterTotalHitEvictRead = 0x81,
  kTcpPerfCounterTotalMissLruRead = 0x82,
  kTcpPerfCounterTotalMissEvictRead = 0x83,
  kTcpPerfCounterTotalNonRead = 0x84,
  kTcpPerfCounterTotalWrite = 0x85,
  kTcpPerfCounterTotalMissLruWrite = 0x86,
  kTcpPerfCounterTotalMissEvictWrite = 0x87,
  kTcpPerfCounterTotalWbinvl1Vol = 0x88,
  kTcpPerfCounterTotalWritebackInvalidates = 0x89,
  kTcpPerfCounterDisplayMicrotiling = 0x8A,
  kTcpPerfCounterThinMicrotiling = 0x8B,
  kTcpPerfCounterDepthMicrotiling = 0x8C,
  kTcpPerfCounterArrPrtThin1 = 0x8D,
  kTcpPerfCounterArrPrt2DThin1 = 0x8E,
  kTcpPerfCounterArrPrt3DThin1 = 0x8F,
  kTcpPerfCounterArrPrtThick = 0x90,
  kTcpPerfCounterArrPrt2DThick = 0x91,
  kTcpPerfCounterArrPrt3DThick = 0x92,
  kTcpPerfCounterCpTcpInvalidateVol = 0x93,
  kTcpPerfCounterSqTcpInvalidateVol = 0x94,
  kTcpPerfCounterUnaligned = 0x95,
  kTcpPerfCounterRotatedMicrotiling = 0x96,
  kTcpPerfCounterThickMicrotiling = 0x97,
  kTcpPerfCounterAtc = 0x98,
  kTcpPerfCounterPowerStall = 0x99,
  kNumTcpPerfCounters = 0x9A,
  kTcpPerfCounterForce32Bit = 0x7FFFFFFF,
};

enum sce::Gnm::ReleaseMemEventType : __int32
{
  kReleaseMemEventCsDone = 0x2F,
  kReleaseMemEventFlushCbDbCaches = 0x4,
  kReleaseMemEventFlushAndInvalidateCbDbCaches = 0x14,
  kReleaseMemEventCbDbReadsDone = 0x28,
  kReleaseMemEventFlushAndInvalidateDbCache = 0x2B,
  kReleaseMemEventFlushAndInvalidateCbCache = 0x2D,
};

enum sce::Gnm::QuantumScale : __int32
{
  kQuantumScale5us = 0x0,
  kQuantumScale1ms = 0x1,
};

typedef sce::Gnm::EmbeddedDataAlignment sce::Gnm::EmbeddedDataAlignment_0;

typedef sce::Gnm::ShaderEngine sce::Gnm::ShaderEngine_0;

struct sce::Gnm::CsStageRegisters
{
  uint32_t m_computePgmLo;
  uint32_t m_computePgmHi;
  uint32_t m_computePgmRsrc1;
  uint32_t m_computePgmRsrc2;
  uint32_t m_computeNumThreadX;
  uint32_t m_computeNumThreadY;
  uint32_t m_computeNumThreadZ;
};

typedef sce::Gnm::EndOfShaderEventType sce::Gnm::EndOfShaderEventType_0;

typedef sce::Gnm::BufferChannel sce::Gnm::BufferChannel_0;

typedef sce::Gnm::BufferSwizzleElementSize sce::Gnm::BufferSwizzleElementSize_0;

typedef sce::Gnm::BufferSwizzleStride sce::Gnm::BufferSwizzleStride_0;

typedef sce::Gnm::WrapMode sce::Gnm::WrapMode_0;

typedef sce::Gnm::FilterMode sce::Gnm::FilterMode_0;

typedef sce::Gnm::MipFilterMode sce::Gnm::MipFilterMode_0;

typedef sce::Gnm::ZFilterMode sce::Gnm::ZFilterMode_0;

typedef sce::Gnm::AnisotropyRatio sce::Gnm::AnisotropyRatio_0;

typedef sce::Gnm::BorderColor sce::Gnm::BorderColor_0;

typedef sce::Gnm::DepthCompare sce::Gnm::DepthCompare_0;

struct sce::Gnm::DispatchIndirectArgs
{
  uint32_t m_dimX;
  uint32_t m_dimY;
  uint32_t m_dimZ;
};

typedef sce::Gnm::WriteDataConfirmMode sce::Gnm::WriteDataConfirmMode_0;

typedef sce::Gnm::CachePolicy sce::Gnm::CachePolicy_0;

typedef sce::Gnm::EventType sce::Gnm::EventType_0;

typedef sce::Gnm::ReleaseMemEventType sce::Gnm::ReleaseMemEventType_0;

typedef sce::Gnm::CacheAction sce::Gnm::CacheAction_0;

typedef sce::Gnm::EventWriteDest sce::Gnm::EventWriteDest_0;

typedef sce::Gnm::EventWriteSource sce::Gnm::EventWriteSource_0;

typedef sce::Gnm::WaitCompareFunc sce::Gnm::WaitCompareFunc_0;

typedef sce::Gnm::SemaphoreSignalBehavior sce::Gnm::SemaphoreSignalBehavior_0;

typedef sce::Gnm::SemaphoreUpdateConfirmMode sce::Gnm::SemaphoreUpdateConfirmMode_0;

typedef sce::Gnm::SemaphoreWaitBehavior sce::Gnm::SemaphoreWaitBehavior_0;

typedef sce::Gnm::QuantumScale sce::Gnm::QuantumScale_0;

enum sce::Gnm::ShaderGlobalResourceType : __int32
{
  kShaderGlobalResourceScratchRingForGraphic = 0x0,
  kShaderGlobalResourceScratchRingForCompute = 0x1,
  kShaderGlobalResourceEsGsWriteDescriptor = 0x2,
  kShaderGlobalResourceEsGsReadDescriptor = 0x3,
  kShaderGlobalResourceGsVsWriteDescriptor0 = 0x4,
  kShaderGlobalResourceGsVsWriteDescriptor1 = 0x5,
  kShaderGlobalResourceGsVsWriteDescriptor2 = 0x6,
  kShaderGlobalResourceGsVsWriteDescriptor3 = 0x7,
  kShaderGlobalResourceGsVsReadDescriptor = 0x8,
  kShaderGlobalResourceTessFactorBuffer = 0x9,
  kShaderGlobalResourceOffChipLds0 = 0xA,
  kShaderGlobalResourceOffChipLds1 = 0xB,
  kShaderGlobalResourceCount = 0xC,
};

typedef sce::Gnm::ShaderType sce::Gnm::ShaderType_0;

typedef sce::Gnm::StreamoutBufferId sce::Gnm::StreamoutBufferId_0;

struct sce::Gnm::StreamoutBufferMapping
{
  uint32_t m_vgtStrmoutBufferConfig;
};

typedef sce::Gnm::StreamoutBufferUpdateWrite sce::Gnm::StreamoutBufferUpdateWrite_0;

typedef sce::Gnm::StreamoutBufferUpdateSaveFilledSize sce::Gnm::StreamoutBufferUpdateSaveFilledSize_0;

struct sce::Gnm::GraphicsShaderControl
{
  uint32_t m_regPgmRsrc3[6];
  uint32_t m_regVsLateAlloc;
};

typedef sce::Gnm::ShaderStage sce::Gnm::ShaderStage_0;

struct sce::Gnm::ViewportTransformControl
{
  uint32_t m_reg;
};

struct sce::Gnm::ClipControl
{
  uint32_t m_reg;
};

typedef sce::Gnm::VertexQuantizationMode sce::Gnm::VertexQuantizationMode_0;

typedef sce::Gnm::VertexQuantizationRoundMode sce::Gnm::VertexQuantizationRoundMode_0;

typedef sce::Gnm::VertexQuantizationCenterMode sce::Gnm::VertexQuantizationCenterMode_0;

typedef sce::Gnm::WindowOffsetMode sce::Gnm::WindowOffsetMode_0;

typedef sce::Gnm::PsShaderRate sce::Gnm::PsShaderRate_0;

struct sce::Gnm::RenderOverrideControl
{
  uint32_t m_reg;
};

struct sce::Gnm::RenderOverride2Control
{
  uint32_t m_reg;
};

struct sce::Gnm::AaSampleLocationControl
{
  uint32_t m_locations[16];
  uint64_t m_centroidPriority;
};

typedef sce::Gnm::EmbeddedPsShader sce::Gnm::EmbeddedPsShader_0;

typedef sce::Gnm::EmbeddedVsShader sce::Gnm::EmbeddedVsShader_0;

struct sce::Gnm::HsStageRegisters
{
  uint32_t m_spiShaderPgmLoHs;
  uint32_t m_spiShaderPgmHiHs;
  uint32_t m_spiShaderPgmRsrc1Hs;
  uint32_t m_spiShaderPgmRsrc2Hs;
  uint32_t m_vgtTfParam;
  uint32_t m_vgtHosMaxTessLevel;
  uint32_t m_vgtHosMinTessLevel;
};

struct sce::Gnm::TessellationRegisters
{
  uint32_t m_vgtLsHsConfig;
};

struct sce::Gnm::HtileStencilControl
{
  uint32_t m_reg;
};

typedef sce::Gnm::CbMode sce::Gnm::CbMode_0;

typedef sce::Gnm::RasterOp sce::Gnm::RasterOp_0;

struct sce::Gnm::DbRenderControl
{
  uint32_t m_reg;
};

typedef sce::Gnm::DbCountControlPerfectZPassCounts sce::Gnm::DbCountControlPerfectZPassCounts_0;

typedef sce::Gnm::DbCountControlZPassIncrement sce::Gnm::DbCountControlZPassIncrement_0;

struct sce::Gnm::DepthEqaaControl
{
  uint32_t m_reg;
};

typedef sce::Gnm::VgtPartialVsWaveMode sce::Gnm::VgtPartialVsWaveMode_0;

typedef sce::Gnm::PrimitiveType sce::Gnm::PrimitiveType_0;

typedef sce::Gnm::IndexSize sce::Gnm::IndexSize_0;

typedef sce::Gnm::OcclusionQueryOp sce::Gnm::OcclusionQueryOp_0;

struct sce::Gnm::OcclusionQueryResults::$61F98FD4F56E8F23BCA4C628A0D323E2
{
  uint64_t m_zPassCountBegin;
  uint64_t m_zPassCountEnd;
};

struct sce::Gnm::OcclusionQueryResults
{
  volatile sce::Gnm::OcclusionQueryResults::$61F98FD4F56E8F23BCA4C628A0D323E2 m_results[8];
};

typedef sce::Gnm::PredicationZPassHint sce::Gnm::PredicationZPassHint_0;

typedef sce::Gnm::PredicationZPassAction sce::Gnm::PredicationZPassAction_0;

typedef sce::Gnm::EndOfPipeEventType sce::Gnm::EndOfPipeEventType_0;

typedef sce::Gnm::StallCommandBufferParserMode sce::Gnm::StallCommandBufferParserMode_0;

typedef sce::Gnm::EventStats sce::Gnm::EventStats_0;

enum sce::Gnm::VgtSwitchOnEopMode : __int32
{
  kVgtSwitchOnEopDisable = 0x0,
  kVgtSwitchOnEopEnable = 0x1,
};

typedef sce::Gnm::VgtSwitchOnEopMode sce::Gnm::VgtSwitchOnEopMode_0;

typedef sce::Gnm::DmaDataBlockingMode sce::Gnm::DmaDataBlockingMode_0;

typedef sce::Gnm::ShaderGlobalResourceType sce::Gnm::ShaderGlobalResourceType_0;

struct sce::Gnm::LsStageRegisters
{
  uint32_t m_spiShaderPgmLoLs;
  uint32_t m_spiShaderPgmHiLs;
  uint32_t m_spiShaderPgmRsrc1Ls;
  uint32_t m_spiShaderPgmRsrc2Ls;
};

struct sce::Gnm::HullStateConstants
{
  uint32_t m_numInputCP;
  uint32_t m_numOutputCP;
  uint32_t m_numPatchConst;
  uint32_t m_cpStride;
  uint32_t m_numThreads;
  uint32_t m_tessFactorStride;
  uint32_t m_firstEdgeTessFactorIndex;
};

struct sce::Gnm::PerfCounterControl
{
  uint32_t m_reg;
};

struct sce::Gnm::IaPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::WdPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::TcaPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::TcsPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::TccPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::VgtPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::SpiPerfCounterBins
{
  uint32_t m_reg;
};

struct sce::Gnm::CbPerfCounterFilter
{
  uint32_t m_reg;
};

struct sce::Gnm::CbPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::DbPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::SqPerfCounterControl
{
  uint32_t m_reg;
};

struct sce::Gnm::SqPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::TaPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::TdPerfCounterSelect
{
  uint32_t m_reg;
};

struct sce::Gnm::TcpPerfCounterSelect
{
  uint32_t m_reg;
};

enum sce::Gnmx::ComputeQueue::SubmissionStatus : __int32
{
  kSubmitOK = 0x0,
  kSubmitFailQueueIsFull = 0x80000001,
};

typedef sce::Gnmx::ComputeQueue::SubmissionStatus sce::Gnmx::ComputeQueue::SubmissionStatus_0;

enum sce::Gnmx::ResourceBarrier::Usage : __int32
{
  kUsageRenderTarget = 0x0,
  kUsageDepthSurface = 0x1,
  kUsageStencilSurface = 0x2,
  kUsageRoTexture = 0x3,
  kUsageRoBuffer = 0x4,
  kUsageRwTexture = 0x5,
  kUsageRwBuffer = 0x6,
  kNumUsages = 0x7,
};

typedef sce::Gnmx::ResourceBarrier::Usage sce::Gnmx::ResourceBarrier::Usage_0;

struct sce::Gnmx::ResourceBarrier
{
  sce::Gnmx::ResourceBarrier::Usage_0 m_oldUsage;
  sce::Gnmx::ResourceBarrier::Usage_0 m_newUsage;
  uint32_t m_resourceBaseAddr256;
  uint32_t m_resourceSize256;
  sce::Gnm::CacheAction_0 m_cacheAction;
  int32_t m_extendedCacheAction;
  uint32_t m_flags;
};

struct sce::Gnmx::LsShader
{
  sce::Gnmx::ShaderCommonData m_common;
  sce::Gnm::LsStageRegisters m_lsStageRegisters;
  uint8_t m_numInputSemantics;
  uint8_t m_fetchControl;
  uint8_t m_reserved[2];
  uint32_t m_lsStride;
};

struct sce::Gnmx::HsShader
{
  sce::Gnmx::ShaderCommonData m_common;
  sce::Gnm::HsStageRegisters m_hsStageRegisters;
  sce::Gnm::HullStateConstants m_hullStateConstants;
};

struct sce::Gnmx::CsShader
{
  sce::Gnmx::ShaderCommonData m_common;
  sce::Gnm::CsStageRegisters m_csStageRegisters;
  unsigned __int8 m_orderedAppendMode : 2;
  unsigned __int8 m_numInputSemantics : 6;
  unsigned __int8 m_dispatchDrawIndexDeallocNumBits : 5;
  unsigned __int8 m_reserved_b13_15 : 3;
  uint8_t m_version;
  uint8_t m_reserved_b24_31;
};

struct sce::Gnmx::CsVsShader
{
  sce::Gnmx::VsShader m_vsShader;
};

struct __cppobj sce::Gnmx::ComputeConstantUpdateEngine : sce::Gnmx::BaseConstantUpdateEngine
{
  sce::Gnmx::GnmxDispatchCommandBuffer *m_dispatchCommandBuffer;
  uint32_t m_scratchBuffer[1536];
  const void *m_boundShader;
  uint32_t m_boundShaderAppendConsumeCounterRange;
  uint32_t m_boundShaderGdsMemoryRange;
  const sce::Gnmx::InputResourceOffsets *m_boundShaderResourceOffsets;
  bool m_dirtyShader;
  bool m_dirtyShaderResources;
  sce::Gnmx::LightweightConstantUpdateEngine::ShaderResourceBindingValidation m_boundShaderResourcesValidation;
};

struct sce::Gnmx::ComputeContext::SubmissionRange
{
  uint32_t m_dcbStartDwordOffset;
  uint32_t m_dcbSizeInDwords;
};

typedef bool (*sce::Gnmx::ComputeContext::BufferFullCallbackFunc)(sce::Gnmx::ComputeContext *, sce::Gnm::CommandBuffer *, uint32_t, void *);

struct sce::Gnmx::ComputeContext::BufferFullCallback
{
  sce::Gnmx::ComputeContext::BufferFullCallbackFunc m_func;
  void *m_userData;
};

struct sce::Gnmx::ComputeContext
{
  sce::Gnmx::GnmxDispatchCommandBuffer m_dcb;
  sce::Gnmx::ComputeConstantUpdateEngine m_lwcue;
  sce::Gnmx::InputResourceOffsets m_boundInputResourceOffsets;
  bool m_UsingLightweightConstantUpdateEngine;
  const uint32_t *m_currentDcbSubmissionStart;
  const uint32_t *m_actualDcbEnd;
  sce::Gnmx::ComputeContext::SubmissionRange m_submissionRanges[16];
  uint32_t m_submissionCount;
  sce::Gnmx::ComputeContext::BufferFullCallback m_cbFullCallback;
};

struct sce::Gnmx::DispatchDrawTriangleCullIndexData
{
  uint16_t m_magic;
  uint8_t m_versionMajor;
  uint8_t m_versionMinor;
  uint32_t m_numIndexDataBlocks;
  uint8_t m_numIndexBits;
  uint8_t m_numIndexSpaceBits;
  uint8_t m_numInstancesPerTgMinus1;
  uint8_t m_reserved;
  uint32_t m_reserved2;
  sce::Gnm::Buffer m_bufferInputIndexData;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(1))) cSystem:136 : MtObject
{
  MtCriticalSection mCS;
  bool mThreadSafe;
};

enum sRender::FRAME_CACHE_STATE : __int32
{
  FRAME_CACHE_NONE = 0x0,
  FRAME_CACHE_SETUP = 0x1,
  FRAME_CACHE_KEEP = 0x2,
};

struct sRender::SCRATCH_INFO
{
  MT_CTSTR pool;
  MT_CTSTR name;
  nDraw::Texture *ptex;
};

struct __attribute__((aligned(8))) sRender::CAPS
{
  MT_CHAR name[256];
  MT_CTSTR devicename;
  u32 video_memory;
  u16 vs_version;
  u16 ps_version;
  bool puredevice;
  bool gamma;
  bool hdr_blend;
  bool hdr_filtering;
  bool pow2;
  u16 hdr_msaa;
  u16 ldr_msaa;
  u16 mdr_msaa;
  u16 hdr_csaa;
  u16 ldr_csaa;
  u32 mdr_csaa;
  u32 vtf;
  u32 rtf;
};

struct sRender::DISPLAYMODE_INFO
{
  MT_CHAR name[64];
  MT_CHAR hz[16];
  u32 w;
  u32 h;
  f32 refreshrate;
};

enum sRender::TILED_PRIORITY : __int32
{
  TILED_PRI_TOP = 0x0,
  TILED_PRI_NORMAL = 0x1,
  TILED_PRI_NO_BIND = 0x2,
  TILED_PRI_FORCE_DWORD = 0xFFFFFFFF,
};

struct sRender::RenderContext
{
  nDraw::DeviceContext context;
  void *dcbBuffer;
  void *resourceBuffer;
  void *globalResourceTable;
};

struct sRender::ParallelExecuteContext
{
  ScePthread mThreadHandle;
  sRender::RenderContext *mpRenderContext;
  cDraw::TAG *mpTag;
  u32 mTagNum;
  u32 mNo;
};

struct sRender::EXPORT_THREAD_PARAM
{
  u32 type;
  MT_CTSTR dir;
  MT_CTSTR file;
  void *memory;
  u32 success;
  u32 size;
};

enum sRender::SS_STATE : __int32
{
  SS_NONE = 0x0,
  SS_WAITING = 0x1,
  SS_EXECUTE = 0x2,
  SS_RESOLVE = 0x3,
  SS_EXPORT = 0x4,
  SS_EXPORT_SUCCESS = 0x5,
  SS_SUCCESS = 0x6,
  SS_FAILED = 0x7,
  SS_MAX_NUM = 0x8,
};

enum sRender::SCREENSHOT_RESULT : __int32
{
  SCREENSHOT_OK = 0x0,
  SCREENSHOT_FAILED = 0x1,
  SCREENSHOT_PROCESSING = 0x2,
};

struct __cppobj sRender : cSystem:136
{
  bool mIsDrawFilterArray[20];
  bool mIsDrawFogArray[2];
  bool mRendering;
  bool mFrameSkip;
  bool mFullScreenMode;
  bool mDisableRendering;
  bool mParallelTrans;
  bool mParallelRendering;
  bool mParallelRenderingActive[2];
  f32 mPersRate;
  u32 mRenderModeFlags;
  bool mConnectDrawCall;
  bool mSRGBEnable;
  nDraw::FEATURE_LV mFeatureLevel;
  MtPerformance mPerf;
  nDraw::HDevice mpDevice;
  nDraw::HDeviceContext mpDeviceContext;
  nDraw::HCore mpCore;
  MtRect mPresentRect;
  MtSize mScreenSize;
  MtSize mDisplaySize;
  ScePthread mThreadHandle;
  uintptr mThreadID;
  SceKernelSema mRenderEvent;
  SceKernelSema mSyncEvent;
  f32 mDACGamma;
  bool mUpdateGamma;
  bool mDynamicTrans;
  bool mExit;
  u32 mScaleMode;
  u32 mAspectType;
  nDraw::ANTIALIAS_TYPE mAntiAliasType;
  nDraw::ANTIALIAS_ALT_TYPE mAntiAliasAltType;
  nDraw::HDR_TYPE mHDRType;
  u32 mSceneAttribute;
  u32 mSkinningBorder;
  u32 mSkinningBorderEx;
  f32 mMipLODBias;
  nDraw::DEFERRED_LIGHTING_LIGHT_TYPE mDeferredLightingLightType;
  nDraw::DEFERRED_LIGHTING_HDR_TYPE mDeferredLightingHDRType;
  bool mDeferredLightingHybridLighting;
  bool mDeferredLightingForcedForwardRendering;
  nDraw::DEFERRED_LIGHTING_NORMAL_TYPE mDeferredLightingNormalType;
  nDraw::DEFERRED_LIGHTING_TRANSPARENT_TYPE mDeferredLightingTransparentType;
  f32 mDeferredLightingDiffuseLuminanceThreshold;
  bool mDeferredLightingFadeOutLighting;
  f32 mDeferredLightingFadeOutLightingDistance;
  f32 mDeferredLightingLodThreshold;
  f32 mDeferredLightingLogRangeCoeffEncode;
  bool mTangentRendering;
  f32 mHalfLambertBlendCoeff;
  u32 mTrilinearThreshold;
  f32 mAnisotropyBias;
  cDraw mDraw;
  u32 mWbFlag;
  u32 mFrameCount;
  u8 *mpDrawBuffer[3];
  s32 mDrawBufferPt;
  u32 mDrawBufferSize;
  cDraw::TAG mDrawTagBuffer[2][262144];
  cDraw::TAG mDrawTagBufferSerial[2][262144];
  cDraw::TAG *mpDrawTags[2];
  u32 mDrawTagNum[2];
  u32 mDrawTotalTagNum;
  nDraw::VertexBuffer *mpTempVertexBuf[3];
  nDraw::IndexBuffer *mpTempIndexBuf[3];
  u8 *mpTempVertexBufTop;
  u16 *mpTempIndexBufTop;
  u32 mTempVertexBufSize;
  u32 mTempIndexBufSize;
  s32 mTempVertexBufPt;
  s32 mTempIndexBufPt;
  nDraw::Texture *mpScratchTexture;
  MtSize mBackBufferSize;
  nDraw::Scene *mpPrimaryScene;
  nDraw::Texture *mpBackBuffer;
  nDraw::Texture *mpFrameCacheBuffer;
  u32 mPresentInterval;
  u32 mPresentThreshold;
  sRender::FRAME_CACHE_STATE mFrameCacheState;
  s64 mRenderCounter;
  s64 mRenderTime;
  bool mSLI;
  bool mStereo;
  u32 mDeviceReset;
  f32 mRefreshRate;
  u32 mRingBufSize;
  u32 mVSGPRCount;
  u32 mIsDeviceReset;
  bool mIsSaveInstanceDrawCount;
  MtPerformance mPerformance;
  u32 mFence[2];
  nDraw::Resource *mpProtectResources[8192];
  sRender::SCRATCH_INFO mpScratchTextures[512];
  u32 mProtectResourceNum;
  u32 mScratchTextureNum;
  sRender::CAPS mCaps;
  sRender::DISPLAYMODE_INFO mDisplayModeInfo[256];
  u32 mDisplayModeNum;
  MT_ENUM mResolutionList[257];
  MT_ENUM mRefreshRateList[33];
  sRender::TILED_PRIORITY mTiledPriority;
  sRender::RenderContext mRenderContext[2][5];
  nDraw::Texture *mpDisplayBuffers[3];
  sce::Gnm::ClipControl mClipControl;
  s32 mVideoOutHandle;
  u32 *mpDrawSyncLabel;
  u32 mSyncFrame;
  void *mpTimestampStart;
  void *mpTimestampEnd;
  bool mIsSubmit;
  bool mIsDisableSubmit;
  void *mpEsGsRingBuffer;
  void *mpGsVsRingBuffer;
  sRender::ParallelExecuteContext mParallelExecuteContext[5];
  SceKernelEventFlag mParallelExecuteEventFlag;
  u32 mParallelExecuteNum;
  u32 mParallelExecuteNumActive[2];
  sRender::EXPORT_THREAD_PARAM mExportParam;
  volatile bool mPhotoExportInitialized;
  volatile bool mPollingCallback;
  volatile bool mPhotoExportCallbackSuccess;
  MT_CHAR mPhotoExportPhotoTitle[1024];
  MT_CHAR mPhotoExportGameTitle[1024];
  MT_CHAR mPhotoExportComment[1024];
  sRender::PhotoExportThread *mpExportThread;
  nDraw::Texture *mpScreenShotTexture;
  sRender::SS_STATE mSSState;
  sRender::SCREENSHOT_RESULT mSSResult;
  void *mJpgBuffer;
  u32 mJpgBufferSize;
  MtObject *mpFlipBeforeInstance;
  MT_MFUNC mpFlipBeforeCallBack;
  __attribute__((aligned(16))) bool mRenderDetailControlEnable;
  u32 mRenderDetail;
  u32 mBeforeRenderDetail;
  u32 mRenderDetailInterval;
  bool mbRenderDetailChanged;
  f32 mRenderDetailUpper;
  f32 mRenderDetailDowner;
};

enum MtThread::STATUS : __int32
{
  SUSPENDED = 0x0,
  EXECUTING = 0x1,
  TERMINATED = 0x2,
};

struct __cppobj MtThread : MtObject
{
  MtCriticalSection mCS;
  void *mpContext;
  bool mTerminate;
  MT_CHAR mName[64];
  MtThread::STATUS mStatus;
  ScePthread mThreadID;
  MtCriticalSection mSuspendSection;
};

struct __cppobj sRender::PhotoExportThread : MtThread
{
};

struct __cppobj sRender::MyDTI : MtDTI
{
};

enum sRender::DRAW_FILTER : __int32
{
  DRAW_FILTER_AMBIENTOCCLUSION = 0x0,
  DRAW_FILTER_BLOOM = 0x1,
  DRAW_FILTER_BLUR = 0x2,
  DRAW_FILTER_BOKEH = 0x3,
  DRAW_FILTER_CHROMATICABERRATION = 0x4,
  DRAW_FILTER_COLORCORRECT = 0x5,
  DRAW_FILTER_CROSSFADE = 0x6,
  DRAW_FILTER_DOF = 0x7,
  DRAW_FILTER_EDGEANTIALIASING = 0x8,
  DRAW_FILTER_FISHEYE = 0x9,
  DRAW_FILTER_GODRAYS = 0xA,
  DRAW_FILTER_HAZE = 0xB,
  DRAW_FILTER_IMAGEPLANE = 0xC,
  DRAW_FILTER_MOTIONBLUR = 0xD,
  DRAW_FILTER_OUTLINE = 0xE,
  DRAW_FILTER_RADIALBLUR = 0xF,
  DRAW_FILTER_TANGENTBLUR = 0x10,
  DRAW_FILTER_TVNOISE = 0x11,
  DRAW_FILTER_TONEMAPCONTROL = 0x12,
  DRAW_FILTER_VOLUMENOISE = 0x13,
  DRAW_FILTER_NUM = 0x14,
};

enum sRender::DRAW_FOG : __int32
{
  DRAW_FOG_COLORFOG = 0x0,
  DRAW_FOG_LIGHTSCATTERINGFOG = 0x1,
  DRAW_FOG_NUM = 0x2,
};

typedef cDraw::TARGET_STATE sRender::TargetState;

typedef cDraw::DRAW_STATE sRender::DrawState;

typedef cDraw::SHADER_STATE sRender::ShaderState;

typedef cDraw::GEOM_STATE sRender::GeomState;

typedef cDraw::TAG sRender::DrawTag;

struct sRender::COMMAND_STATE
{
  MT_CTSTR name;
  sRender::DrawTag *ptag;
  sRender::DrawTag *ptag_end;
};

struct __attribute__((aligned(8))) sRender::RENDER_STATE
{
  unsigned __int32 inversez : 1;
  unsigned __int32 atest_ref : 8;
  unsigned __int32 atest_func : 16;
  unsigned __int32 atest_enable : 1;
  unsigned __int32 zpass_exec : 1;
  unsigned __int32 onepass_exec : 1;
  unsigned __int32 scull : 2;
  unsigned __int32 zprepass_enable : 1;
  unsigned __int32 onepass_zpass_enable : 1;
  nDraw::HDeviceContext pdevice;
  sRender::TargetState *ptstate;
  sRender::DrawState *pdstate;
  sRender::ShaderState *psstate;
  sRender::GeomState *pgstate;
  nDraw::BlendState *pblend;
  nDraw::RasterizerState *prasterizer;
  nDraw::DepthStencilState *pdepthstencil;
  nDraw::HVertexShader pvs;
  nDraw::HPixelShader pps;
  nDraw::HInputLayout playout;
  nDraw::HIndexBuffer pibuf;
  nDraw::HVertexBuffer pvbuf[4];
  u32 vstride[4];
  u32 voffset[4];
  MtRect viewport[4];
  MtRect scissor;
  nDraw::RenderTargetView *ptarget[4];
  nDraw::DepthStencilView *pdepth;
  nDraw::SamplerState *pvssamplers[16];
  nDraw::SamplerState *ppssamplers[16];
  nDraw::Texture *pvstextures[16];
  nDraw::Texture *ppstextures[16];
  nDraw::HConstantBuffer pvscbuffers[16];
  nDraw::HConstantBuffer ppscbuffers[16];
  nDraw::SamplerState *pgssamplers[16];
  nDraw::Texture *pgstextures[16];
  nDraw::HConstantBuffer pgscbuffers[16];
  nDraw::SamplerState *phssamplers[16];
  nDraw::SamplerState *pdssamplers[16];
  nDraw::SamplerState *pcssamplers[16];
  nDraw::Texture *phstextures[16];
  nDraw::Texture *pdstextures[16];
  nDraw::Texture *pcstextures[16];
  nDraw::HConstantBuffer phscbuffers[16];
  nDraw::HConstantBuffer pdscbuffers[16];
  nDraw::HConstantBuffer pcscbuffers[16];
  sRender::COMMAND_STATE cs[1024];
  s32 cs_pt;
  u32 max_vertex;
  MtColor blendfactor;
  u32 wait_addr[4];
  u32 wait_addr_pt;
  u32 index_offset;
};

enum sRender::EXPORT_RESULT : __int32
{
  EXPORT_OK = 0x0,
  EXPORT_FAILED = 0x1,
  EXPORT_PROCESSED = 0x2,
};

struct sRender::DETAIL_CONTROL_MODE
{
  __int8 gap0[1];
};

enum sRender::DETAIL_CONTROL_MODE::DECL : __int32
{
  STANDARD = 0x0,
  AGGRESSIVE = 0x1,
  MAX = 0x2,
};

struct __cppobj __attribute__((aligned(8))) cDraw::CMD_MARKER : cDraw::CMD
{
  u32 mark_type;
  MT_CTSTR marker;
  MtColor color;
};

struct __cppobj MtThread::MyDTI : MtDTI
{
};

typedef uint64_t SceKernelCpumask;

struct __cppobj __attribute__((aligned(8))) sUnit::MoveLine : MtObject
{
  MT_CTSTR mName;
  unsigned __int32 mParallel : 1;
  unsigned __int32 mPause : 1;
  unsigned __int32 mDraw : 1;
  unsigned __int32 mLineType : 7;
  unsigned __int32 mPhase : 4;
  unsigned __int32 mIsInParallel : 1;
  unsigned __int32 mCastDraw : 1;
  unsigned __int32 mRecvDraw : 1;
  cUnit *mpTop;
  cUnit *mpBottom;
  f32 mDeltaTime;
};

struct __cppobj sUnit::UnitGroup : MtObject
{
  MT_CTSTR mName;
  MtArray mUnits;
};

typedef void (*MT_MFUNCPTRU32)(MtObject *, void *, u32);

struct __cppobj __attribute__((aligned(16))) sUnit : cSystem
{
  sUnit::MoveLine mMoveLine[64];
  u32 mLineNum;
  u32 mCRC;
  sUnit::UnitGroup mUnitGroup[64];
  u32 mGroupCount;
  u64 mGroupMoveFlag;
  u64 mGroupDrawFlag;
  cDraw mSubDraw[6];
  bool mbDrawCommandCacheEnable;
  bool mbDrawCommandCacheEnableUpdate;
  bool mbLimitCastReceiver;
  MtObject *mpDrawHookInstance;
  MT_MFUNCPTRU32 mpDrawHookCallBack;
  _BYTE gap372D70[8];
  MtObject *mpFlipFlowInstance;
  MT_MFUNC mpFlipFlowCallBack;
};

struct __cppobj sUnit::MyDTI : MtDTI
{
};

struct __cppobj sUnit::MoveLine::MyDTI : MtDTI
{
};

enum sUnit::MoveLine::ePhase : __int32
{
  PHASE_NOP = 0x0,
  PHASE_MOVE = 0x1,
  PHASE_SYNC = 0x2,
  PHASE_MOVEAFTER = 0x3,
  PHASE_DRAW = 0x4,
};

struct __cppobj sUnit::UnitGroup::MyDTI : MtDTI
{
};

enum MOVE_LINE : __int32
{
  NOT_CHAINED = 0x7F,
  LINE_0 = 0x0,
  LINE_1 = 0x1,
  LINE_2 = 0x2,
  LINE_3 = 0x3,
  LINE_4 = 0x4,
  LINE_5 = 0x5,
  LINE_6 = 0x6,
  LINE_7 = 0x7,
  LINE_8 = 0x8,
  LINE_9 = 0x9,
  LINE_10 = 0xA,
  LINE_11 = 0xB,
  LINE_12 = 0xC,
  LINE_13 = 0xD,
  LINE_14 = 0xE,
  LINE_15 = 0xF,
  LINE_16 = 0x10,
  LINE_17 = 0x11,
  LINE_18 = 0x12,
  LINE_19 = 0x13,
  LINE_20 = 0x14,
  LINE_21 = 0x15,
  LINE_22 = 0x16,
  LINE_23 = 0x17,
  LINE_24 = 0x18,
  LINE_25 = 0x19,
  LINE_26 = 0x1A,
  LINE_27 = 0x1B,
  LINE_28 = 0x1C,
  LINE_29 = 0x1D,
  LINE_30 = 0x1E,
  LINE_31 = 0x1F,
  LINE_32 = 0x20,
  LINE_33 = 0x21,
  LINE_34 = 0x22,
  LINE_35 = 0x23,
  LINE_36 = 0x24,
  LINE_37 = 0x25,
  LINE_38 = 0x26,
  LINE_39 = 0x27,
  LINE_40 = 0x28,
  LINE_41 = 0x29,
  LINE_42 = 0x2A,
  LINE_43 = 0x2B,
  LINE_44 = 0x2C,
  LINE_45 = 0x2D,
  LINE_46 = 0x2E,
  LINE_47 = 0x2F,
  LINE_48 = 0x30,
  LINE_49 = 0x31,
  LINE_50 = 0x32,
  LINE_51 = 0x33,
  LINE_52 = 0x34,
  LINE_53 = 0x35,
  LINE_54 = 0x36,
  LINE_55 = 0x37,
  LINE_56 = 0x38,
  LINE_57 = 0x39,
  LINE_58 = 0x3A,
  LINE_59 = 0x3B,
  LINE_60 = 0x3C,
  LINE_61 = 0x3D,
  LINE_62 = 0x3E,
  LINE_63 = 0x3F,
  MAX_MOVELINE = 0x40,
};

typedef void (*sUnit::VALIDATE_RESULT_FUNC)(MtObject *, MOVE_LINE, cUnit *, u64);

struct __cppobj cUnit::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) cSystem:160 : MtObject
{
  MtCriticalSection mCS;
  bool mThreadSafe;
};

struct __cppobj sCamera::Viewport : MtObject
{
  uCamera *mpCamera;
  uCamera *mpTestCamera;
  rSceneTexture *mpSceneTexture;
  bool mVisible;
  u8 mNo;
  u8 mPriority;
  u8 mMode;
  u8 mDisplay;
  MtRect mRegion;
  __attribute__((aligned(16))) MtVector4 mFrustum[6];
  MtMatrix mViewMat;
  MtMatrix mProjMat;
  MtMatrix mPrevViewMat;
  MtMatrix mPrevProjMat;
};

struct __cppobj __attribute__((aligned(16))) sCamera : cSystem:160
{
  f32 mSubPixelOfsX;
  f32 mSubPixelOfsY;
  f32 mViewSubFrame;
  f32 mWorldSubFrame;
  sCamera::Viewport mViewport[8];
  MtRect mScreenRect;
  MtRect mVirtualRect;
  MtColor mBlankColor;
  MtColor mBGColor;
  bool mPause;
  f32 mInstancingDissolveStartDistance;
  f32 mInstancingDissolveEndDistance;
  f32 mInstancingDissolveAlpha;
};

struct __cppobj uCamera : cUnit
{
  f32 mFarPlane;
  f32 mNearPlane;
  f32 mAspect;
  f32 mFov;
  MtVector3 mCameraPos;
  MtVector3 mCameraUp;
  MtVector3 mTargetPos;
  MtVector3 mWorldCameraPos;
  MtVector3 mWorldTargetPos;
};

struct __cppobj rSceneTexture : rTexture
{
  nDraw::HDR_TYPE mHDR;
  nDraw::ANTIALIAS_TYPE mAntiAlias;
  u32 mAttributes;
  u32 mWidth;
  u32 mHeight;
  f32 mWidthRate;
  f32 mHeightRate;
  bool mAutoResize;
  bool mAspectAdjust;
  MtColor mClearColor;
  nDraw::Scene *mpScene;
};

struct __cppobj sCamera::MyDTI : MtDTI
{
};

struct __cppobj sCamera::Viewport::MyDTI : MtDTI
{
};

enum sCamera::VIEWPORT_NO : __int32
{
  VIEWPORT_0 = 0x0,
  VIEWPORT_1 = 0x1,
  VIEWPORT_2 = 0x2,
  VIEWPORT_3 = 0x3,
  VIEWPORT_4 = 0x4,
  VIEWPORT_5 = 0x5,
  VIEWPORT_6 = 0x6,
  VIEWPORT_7 = 0x7,
  MAX_VIEWPORT = 0x8,
};

enum sCamera::REGION_MODE : __int32
{
  REGION_FULLSCREEN = 0x0,
  REGION_FREE = 0x1,
  REGION_TOP = 0x2,
  REGION_BOTTOM = 0x3,
  REGION_LEFT = 0x4,
  REGION_RIGHT = 0x5,
  REGION_TOPLEFT = 0x6,
  REGION_BOTTOMLEFT = 0x7,
  REGION_TOPRIGHT = 0x8,
  REGION_BOTTOMRIGHT = 0x9,
  REGION_VIRTUAL = 0xA,
};

struct __cppobj uCamera::MyDTI : MtDTI
{
};

struct sPad::PAD_INFO
{
  u8 Be_flag;
  u8 Rno;
  s8 Pad_no;
  u8 Kind;
  u32 Ability;
  u32 Input_attr;
  u32 Socket_no;
  s32 connectionType;
};

struct sPad::PAD_FREE
{
  s8 Press_free;
  u8 Trigger_free;
  s16 Analog_free;
  s16 Analog_cross_free;
};

struct sPad::PAD_REPEAT
{
  u16 Start;
  u16 Next2;
  u16 Timer[24];
};

struct sPad::PAD_VIB_LIST
{
  u8 Be_flag;
  u8 reserved;
  u16 Timer;
  s32 MilliSec;
  s32 Value;
  s32 Add;
};

struct sPad::PAD_VIB
{
  s32 Vib_data[2];
  u8 Vib_result;
  u8 Vib_zero_count;
  u8 Vib_retry_flag;
  u8 Vib_set_timer;
  sPad::PAD_VIB_LIST List_high[8];
  sPad::PAD_VIB_LIST List_low[8];
};

struct sPad::PAD_DATA
{
  u32 On;
  u32 Old;
  u32 Trg;
  u32 Rel;
  u32 Chg;
  u32 Rep;
  s32 Rx;
  s32 Ry;
  s32 Lx;
  s32 Ly;
  u8 Rz;
  u8 Lz;
  __attribute__((aligned(8))) MtVector2 analogButton;
  __attribute__((aligned(16))) MtVector4 orientation;
  MtVector3 acceleration;
  MtVector3 angularVelocity;
  MtPoint touch[2];
  u32 touchNum;
};

struct __cppobj __attribute__((aligned(8))) sPad::Pad : MtObject
{
  sPad::PAD_INFO Info;
  sPad::PAD_FREE Free;
  sPad::PAD_REPEAT Repeat;
  sPad::PAD_VIB Vib;
  sPad::PAD_DATA Data;
  bool mTriggerVibLow;
  bool mTriggerVibHigh;
  u16 mVibStartValue;
  u16 mVibEndValue;
  u16 mVibTime;
  u8 mRequestVib;
};

struct __cppobj __attribute__((aligned(16))) sPad : cSystem:136
{
  bool mActive;
  u64 mPrevTimer;
  u32 mDeltaTime;
  u32 mSysRepeadStDefault;
  u32 mSysRepeadNxDefault;
  sPad::Pad mPad[4];
  sPad::Pad mPadSpec[4];
  sPad::Pad mPadSysRemoteControl;
  u32 mDecideButton;
  u32 mCancelButton;
};

struct __cppobj sPad::MyDTI : MtDTI
{
};

struct __cppobj sPad::Pad::MyDTI : MtDTI
{
};

enum sPad::PAD_PORT_TYPE : __int32
{
  PAD_USER_STD = 0x0,
  PAD_USER_SPE = 0x2,
  PAD_SYS_REMOTE = 0x10,
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(8))) sPad:38464 : cSystem:136
{
  bool mActive;
  __attribute__((aligned(8))) u64 mPrevTimer;
  u32 mDeltaTime;
  u32 mSysRepeadStDefault;
  u32 mSysRepeadNxDefault;
  __attribute__((aligned(8))) sPad::Pad mPad[4];
  sPad::Pad mPadSpec[4];
  sPad::Pad mPadSysRemoteControl;
  u32 mDecideButton;
  u32 mCancelButton;
};

struct sPadExt::cPadInfo::stBtnInfo
{
  u32 on;
  u32 trg;
  u32 rel;
  u32 rep;
  u32 acl;
  u32 old;
};

struct sPadExt::cPadInfo::stUDRLBtnInfo
{
  u32 on;
  u32 trg;
  u32 rel;
  u32 rep;
  u32 acl;
};

struct sPadExt::cPadInfo::stAnlgInfo
{
  f32 x;
  f32 y;
};

struct sPadExt::cPadInfo::stPressInfo
{
  f32 Lup;
  f32 Lright;
  f32 Ldown;
  f32 Lleft;
  f32 Rup;
  f32 Rright;
  f32 Rdown;
  f32 Rleft;
  f32 L1;
  f32 L2;
  f32 R1;
  f32 R2;
  f32 Select;
  f32 L3;
  f32 R3;
};

struct sPadExt::cPadInfo::stSensorInfo
{
  f32 x;
  f32 y;
  f32 z;
  f32 g;
};

struct sPadExt::cPadInfo::stVibInfo
{
  bool mIsMove;
  bool mIsPause;
  s32 mType;
  s32 mTimeLeft;
  s32 mVib;
  s32 mEndVib;
  s32 mAdd;
};

struct __cppobj __attribute__((aligned(8))) sPadExt::cPadInfo : MtObject
{
  u32 mPadId;
  u32 mPadEnableId;
  bool mIsEnable;
  bool mIsVibEnable;
  bool mIsFake;
  sPadExt::cPadInfo::stBtnInfo mBtn;
  sPadExt::cPadInfo::stUDRLBtnInfo mBtnUDRL;
  sPadExt::cPadInfo::stAnlgInfo mAnlg[2];
  sPadExt::cPadInfo::stPressInfo mPress;
  sPadExt::cPadInfo::stSensorInfo mSensor;
  sPadExt::cPadInfo::stVibInfo mVibInfo[16];
  u32 mPadSetting[52];
  f32 mRepTimer;
  f32 mAclTimer;
};

struct __cppobj __attribute__((aligned(16))) sPadExt : sPad:38464
{
  sPadExt::cPadInfo mPadInfo[1];
  s32 mGamePadId;
  u64 mPrevTimer;
  u32 mDeltaTime;
  bool mIsIgnore;
  s32 mIgnoreTimer;
  bool mOldActive;
  bool mDisableInputGame;
  bool mDisableInputGameByPauseMenu;
  bool mIsEnableActiveWindow;
  bool mIsEnableWindowPadNo;
  bool mIsEnableReplaceDC;
};

struct __cppobj sPadExt::MyDTI : MtDTI
{
};

struct __cppobj sPadExt::cPadInfo::MyDTI : MtDTI
{
};

enum sPadExt::PAD_BTN_TYPE : __int32
{
  UI_DECIDE = 0x0,
  UI_CANCEL = 0x1,
  UI_START = 0x2,
  UI_SELECT = 0x3,
  UI_CHKOUT = 0x4,
  UI_RT = 0x5,
  UI_LT = 0x6,
  UI_RB = 0x7,
  UI_LB = 0x8,
  UI_X = 0x9,
  UI_Y = 0xA,
  UI_AL_UP = 0xB,
  UI_AL_DOWN = 0xC,
  UI_AL_LEFT = 0xD,
  UI_AL_RIGHT = 0xE,
  UI_AR_UP = 0xF,
  UI_AR_DOWN = 0x10,
  UI_AR_LEFT = 0x11,
  UI_AR_RIGHT = 0x12,
  UI_TAB_R = 0x13,
  UI_TAB_L = 0x14,
  UI_LS_CRAM = 0x15,
  UI_RS_CRAM = 0x16,
  UI_RU = 0x17,
  UI_RD = 0x18,
  UI_RL = 0x19,
  UI_RR = 0x1A,
  STG_JUMP = 0x1B,
  STG_ATTACK_0 = 0x1C,
  STG_ATTACK_1 = 0x1D,
  STG_ATTACK_2 = 0x1E,
  STG_ATTACK_3 = 0x1F,
  STG_TOUCH = 0x20,
  STG_MAIN_WEP = 0x21,
  STG_SUB_WEP = 0x22,
  STG_LOCK_ON = 0x23,
  STG_LIFT = 0x24,
  STG_THROWING = 0x25,
  STG_THROWING_AWAY = 0x26,
  STG_DASH = 0x27,
  STG_CAM_RESET = 0x28,
  STG_STAT_CHANGE = 0x29,
  STG_SHOT = 0x2A,
  STG_MGC_CH_MODE = 0x2B,
  STG_ORDER_CMC_UP = 0x2C,
  STG_ORDER_CMC_DOWN = 0x2D,
  STG_ORDER_CMC_LEFT = 0x2E,
  STG_ORDER_CMC_RIGHT = 0x2F,
  STG_KEY_UP = 0x30,
  STG_KEY_DOWN = 0x31,
  STG_KEY_LEFT = 0x32,
  STG_KEY_RIGHT = 0x33,
  PAD_BTN_TYPE_MAX = 0x34,
  UI_UP = 0x35,
  UI_DOWN = 0x36,
  UI_LEFT = 0x37,
  UI_RIGHT = 0x38,
  PAD_BTN_TYPE_INVALID = 0x39,
};

enum sPadExt::PAD_TIMING : __int32
{
  PAD_TRG = 0x0,
  PAD_ON = 0x1,
  PAD_REP = 0x2,
  PAD_ACL = 0x3,
  PAD_REL = 0x4,
  PAD_TIMING_MAX = 0x5,
};

struct sPadExt::$D7246FD619D5619A77340974FB8FD52F
{
  sPadExt::PAD_BTN_TYPE mPadBtnType;
  u32 mPadCode;
};

struct __cppobj sArea::AreaInfo : MtObject
{
  MT_CTSTR mName;
  const MtDTI *mpDTI;
  sArea::AreaInfo *mpParent;
  sArea::AreaInfo *mpChild;
  sArea::AreaInfo *mpNext;
  sArea::AreaInfo *mpPrev;
};

struct __cppobj sArea : cSystem
{
  sArea::AreaInfo mAreaInfo[512];
  u32 mAreaNum;
  u32 mAreaPt;
  const MtDTI *mpJumpArea;
  cArea *mpArea[8];
};

enum sAreaExt::eJumpType : __int32
{
  JUMP_TYPE_RELOAD_CODE = 0x0,
  JUMP_TYPE_RELOAD_MENU = 0x1,
  JUMP_TYPE_CODE = 0x2,
  JUMP_TYPE_MENU = 0x3,
  JUMP_TYPE_NUM = 0x4,
};

typedef bool (*sAreaExt::JUMP_LISTENER)(MtObject *, sAreaExt::eJumpType, const MtDTI *, const MtDTI *);

struct __attribute__((aligned(8))) sAreaExt::stJumpListener
{
  MtObject *pOwner;
  sAreaExt::JUMP_LISTENER pListener;
  _BYTE gap10[8];
};

struct sAreaExt::stLoadingInfo::$03E20929C6565C51B22A156DF8AF5B59::$3770799D4B6B73091DC26241FEE17888
{
  unsigned __int32 isAreaLoading : 1;
  unsigned __int32 isAreaLoadTrigger : 1;
  unsigned __int32 isAreaLoadRelease : 1;
  unsigned __int32 wasAreaLoading : 1;
  unsigned __int32 nRemainArea : 4;
};

union sAreaExt::stLoadingInfo::$03E20929C6565C51B22A156DF8AF5B59
{
  sAreaExt::stLoadingInfo::$03E20929C6565C51B22A156DF8AF5B59::$3770799D4B6B73091DC26241FEE17888 _anon_0;
  u32 data;
};

struct sAreaExt::stLoadingInfo
{
  sAreaExt::stLoadingInfo::$03E20929C6565C51B22A156DF8AF5B59 _anon_0;
};

struct rStageList;

struct __cppobj sAreaExt : sArea
{
  sAreaExt::stJumpListener mJumpListenerTable[256];
  sAreaExt::stLoadingInfo mLoadingInfo;
  u32 mPostponeFrames;
  bool *mpAppendShaderPackageTable[3];
  rStageList *mpStageList;
};

struct __cppobj sAreaExt::MyDTI : MtDTI
{
};

struct __cppobj sArea::MyDTI : MtDTI
{
};

struct __cppobj sArea::AreaInfo::MyDTI : MtDTI
{
};

enum sCommonDialog::STATE : __int32
{
  STATE_NONE = 0x0,
  STATE_MESSAGE_DIALOG = 0x1,
  STATE_IME_DIALOG = 0x2,
  STATE_LIBIME = 0x3,
};

enum sCommonDialog::LANGUAGE : __int32
{
  LANGUAGE_ALL = 0x0,
  LANGUAGE_DANISH_0 = 0x1,
  LANGUAGE_GERMAN_0 = 0x2,
  LANGUAGE_ENGLISH_0 = 0x4,
  LANGUAGE_SPANISH_0 = 0x8,
  LANGUAGE_FRENCH_0 = 0x10,
  LANGUAGE_ITALIAN_0 = 0x20,
  LANGUAGE_DUTCH_0 = 0x40,
  LANGUAGE_NORWEGIAN_0 = 0x80,
  LANGUAGE_POLISH_0 = 0x100,
  LANGUAGE_PORTUGUESE_0 = 0x200,
  LANGUAGE_RUSSIAN_0 = 0x400,
  LANGUAGE_FINNISH_0 = 0x800,
  LANGUAGE_SWEDISH_0 = 0x1000,
  LANGUAGE_JAPANESE_0 = 0x2000,
  LANGUAGE_KOREAN_0 = 0x4000,
  LANGUAGE_CHINESE_S_0 = 0x8000,
  LANGUAGE_CHINESE_T_0 = 0x10000,
  LANGUAGE_APP = 0x10000000,
  LANGUAGE_UNDEFINED = 0x20000000,
};

typedef void (*sCommonDialog::MSG_DIALOG_CALLBACK)(MtObject *, s32);

typedef void (*sCommonDialog::IME_CALLBACK)(MtObject *, s32, MT_CTSTR);

struct __cppobj __attribute__((aligned(8))) sCommonDialog : cSystem:160
{
  s32 mDialogType;
  sCommonDialog::STATE mState;
  sCommonDialog::LANGUAGE mLanguage;
  s32 mMsgResult;
  s32 mListCount;
  sCommonDialog::CommonDialogData *mpMsgDialogList;
  MT_CHAR mImeStr[4096];
  void *mpIMEWork;
  MtObject *mpMsgOwner;
  sCommonDialog::MSG_DIALOG_CALLBACK mMsgCallback;
  _BYTE gap1048[8];
  MtObject *mpImeOwner;
  sCommonDialog::IME_CALLBACK mImeCallback;
  _BYTE gap1060[8];
};

struct sCommonDialog::CommonDialogData
{
  s32 mode;
  u32 prio;
  MtObject *owner;
  sCommonDialog::MSG_DIALOG_CALLBACK callback;
  _BYTE gap18[8];
  sCommonDialog::CommonDialogData *next;
};

struct __cppobj sCommonDialog::MyDTI : MtDTI
{
};

enum sCommonDialog::BUTTON_TYPE : __int32
{
  BUTTON_TYPE_OK = 0x0,
  BUTTON_TYPE_YESNO = 0x1,
  BUTTON_TYPE_NONE = 0x2,
  BUTTON_TYPE_WAIT = 0x3,
  BUTTON_TYPE_WAIT_CANCEL = 0x4,
};

enum sCommonDialog::SYSMSG_TYPE : __int32
{
  SYSMSG_TYPE_EMPTY_STORE = 0x0,
  SYSMSG_TYPE_PSN_CHAT_RESTRICTION = 0x1,
  SYSMSG_TYPE_PSN_UGC_RESTRICTION = 0x2,
  SYSMSG_TYPE_WARING_SWITCH_TO_SIMULVIEW = 0x3,
};

enum sCommonDialog::TEXTBOX_MODE : __int32
{
  TEXTBOX_MODE_DEFAULT = 0x0,
  TEXTBOX_MODE_PASSWORD = 0x1,
};

enum sCommonDialog::IME_TYPE : __int32
{
  IME_TYPE_DEFAULT = 0x0,
  IME_TYPE_BASIC_LATIN = 0x1,
  IME_TYPE_NUMBER = 0x2,
};

struct __attribute__((aligned(4))) sCommonDialog::ImeDialogParamData
{
  u64 language;
  MT_CHAR title[128];
  sCommonDialog::IME_TYPE type;
  sCommonDialog::TEXTBOX_MODE mode;
  u32 max_length;
  MT_CHAR text[512];
  bool language_forced;
};

enum SceImeEventId : __int32
{
  SCE_IME_EVENT_OPEN = 0x0,
  SCE_IME_EVENT_UPDATE_TEXT = 0x1,
  SCE_IME_EVENT_UPDATE_CARET = 0x2,
  SCE_IME_EVENT_CHANGE_SIZE = 0x3,
  SCE_IME_EVENT_PRESS_CLOSE = 0x4,
  SCE_IME_EVENT_PRESS_ENTER = 0x5,
  SCE_IME_EVENT_ABORT = 0x6,
  SCE_IME_EVENT_CANDIDATE_LIST_START = 0x7,
  SCE_IME_EVENT_CANDIDATE_LIST_END = 0x8,
  SCE_IME_EVENT_CANDIDATE_WORD = 0x9,
  SCE_IME_EVENT_CANDIDATE_INDEX = 0xA,
  SCE_IME_EVENT_CANDIDATE_DONE = 0xB,
  SCE_IME_EVENT_CANDIDATE_CANCEL = 0xC,
  SCE_IME_EVENT_CHANGE_DEVICE = 0xE,
  SCE_IME_EVENT_JUMP_TO_NEXT_OBJECT = 0xF,
  SCE_IME_EVENT_JUMP_TO_BEFORE_OBJECT = 0x10,
  SCE_IME_EVENT_CHANGE_WINDOW_TYPE = 0x11,
  SCE_IME_EVENT_CHANGE_INPUT_METHOD_STATE = 0x12,
  SCE_IME_KEYBOARD_EVENT_OPEN = 0x100,
  SCE_IME_KEYBOARD_EVENT_KEYCODE_DOWN = 0x101,
  SCE_IME_KEYBOARD_EVENT_KEYCODE_UP = 0x102,
  SCE_IME_KEYBOARD_EVENT_KEYCODE_REPEAT = 0x103,
  SCE_IME_KEYBOARD_EVENT_CONNECTION = 0x104,
  SCE_IME_KEYBOARD_EVENT_DISCONNECTION = 0x105,
  SCE_IME_KEYBOARD_EVENT_ABORT = 0x106,
};

enum SceImeTextAreaMode : __int32
{
  SCE_IME_TEXT_AREA_MODE_DISABLE = 0x0,
  SCE_IME_TEXT_AREA_MODE_EDIT = 0x1,
  SCE_IME_TEXT_AREA_MODE_PREEDIT = 0x2,
  SCE_IME_TEXT_AREA_MODE_SELECT = 0x3,
};

enum SceImeCaretMovementDirection : __int32
{
  SCE_IME_CARET_MOVE_STILL = 0x0,
  SCE_IME_CARET_MOVE_LEFT = 0x1,
  SCE_IME_CARET_MOVE_RIGHT = 0x2,
  SCE_IME_CARET_MOVE_UP = 0x3,
  SCE_IME_CARET_MOVE_DOWN = 0x4,
  SCE_IME_CARET_MOVE_HOME = 0x5,
  SCE_IME_CARET_MOVE_END = 0x6,
  SCE_IME_CARET_MOVE_PAGE_UP = 0x7,
  SCE_IME_CARET_MOVE_PAGE_DOWN = 0x8,
  SCE_IME_CARET_MOVE_TOP = 0x9,
  SCE_IME_CARET_MOVE_BOTTOM = 0xA,
};

enum SceImeKeyboardType : __int32
{
  SCE_IME_KEYBOARD_TYPE_NONE = 0x0,
  SCE_IME_KEYBOARD_TYPE_DANISH = 0x1,
  SCE_IME_KEYBOARD_TYPE_GERMAN = 0x2,
  SCE_IME_KEYBOARD_TYPE_GERMAN_SW = 0x3,
  SCE_IME_KEYBOARD_TYPE_ENGLISH_US = 0x4,
  SCE_IME_KEYBOARD_TYPE_ENGLISH_GB = 0x5,
  SCE_IME_KEYBOARD_TYPE_SPANISH = 0x6,
  SCE_IME_KEYBOARD_TYPE_SPANISH_LA = 0x7,
  SCE_IME_KEYBOARD_TYPE_FINNISH = 0x8,
  SCE_IME_KEYBOARD_TYPE_FRENCH = 0x9,
  SCE_IME_KEYBOARD_TYPE_FRENCH_BR = 0xA,
  SCE_IME_KEYBOARD_TYPE_FRENCH_CA = 0xB,
  SCE_IME_KEYBOARD_TYPE_FRENCH_SW = 0xC,
  SCE_IME_KEYBOARD_TYPE_ITALIAN = 0xD,
  SCE_IME_KEYBOARD_TYPE_DUTCH = 0xE,
  SCE_IME_KEYBOARD_TYPE_NORWEGIAN = 0xF,
  SCE_IME_KEYBOARD_TYPE_POLISH = 0x10,
  SCE_IME_KEYBOARD_TYPE_PORTUGUESE_BR = 0x11,
  SCE_IME_KEYBOARD_TYPE_PORTUGUESE_PT = 0x12,
  SCE_IME_KEYBOARD_TYPE_RUSSIAN = 0x13,
  SCE_IME_KEYBOARD_TYPE_SWEDISH = 0x14,
  SCE_IME_KEYBOARD_TYPE_TURKISH = 0x15,
  SCE_IME_KEYBOARD_TYPE_JAPANESE_ROMAN = 0x16,
  SCE_IME_KEYBOARD_TYPE_JAPANESE_KANA = 0x17,
  SCE_IME_KEYBOARD_TYPE_KOREAN = 0x18,
  SCE_IME_KEYBOARD_TYPE_SM_CHINESE = 0x19,
  SCE_IME_KEYBOARD_TYPE_TR_CHINESE_ZY = 0x1A,
  SCE_IME_KEYBOARD_TYPE_TR_CHINESE_PY_HK = 0x1B,
  SCE_IME_KEYBOARD_TYPE_TR_CHINESE_PY_TW = 0x1C,
  SCE_IME_KEYBOARD_TYPE_TR_CHINESE_CG = 0x1D,
  SCE_IME_KEYBOARD_TYPE_ARABIC_AR = 0x1E,
};

enum SceImeDeviceType : __int32
{
  SCE_IME_DEVICE_TYPE_NONE = 0x0,
  SCE_IME_DEVICE_TYPE_CONTROLLER = 0x1,
  SCE_IME_DEVICE_TYPE_EXT_KEYBOARD = 0x2,
  SCE_IME_DEVICE_TYPE_REMOTE_OSK = 0x3,
};

enum SceImePanelType : __int32
{
  SCE_IME_PANEL_TYPE_HIDE = 0x0,
  SCE_IME_PANEL_TYPE_OSK = 0x1,
  SCE_IME_PANEL_TYPE_DIALOG = 0x2,
  SCE_IME_PANEL_TYPE_CANDIDATE = 0x3,
  SCE_IME_PANEL_TYPE_EDIT = 0x4,
  SCE_IME_PANEL_TYPE_EDIT_AND_CANDIDATE = 0x5,
  SCE_IME_PANEL_TYPE_ACCESSIBILITY = 0x6,
};

enum nDialog::MSG_NO : __int32
{
  MSG_NO_NET_ERR_CONTEXT_LOST = 0x0,
  MSG_NO_NET_ERR_LINK_STATE_INACTIVE = 0x1,
  MSG_NO_NET_ERR_CONTEXT_START_ABORT = 0x2,
  MSG_NO_NET_ERR_DEFAULT_REQUEST = 0x3,
  MSG_NO_NET_ERR_DEFAULT_SERVICE = 0x4,
  MSG_NO_PARENTAL_LOCK_AGE = 0x5,
  MSG_NO_PARENTAL_LOCK_CHAT = 0x6,
  MSG_NO_PARENTAL_LOCK_CHAT_UGC = 0x7,
  MSG_NO_CHECK_HDD_SPACE = 0x8,
  MSG_NO_ERR_NOT_ENOUGHNET_HDD_SPACE = 0x9,
  MSG_NO_READY_TROPHY = 0xA,
  MSG_NO_CREATE_NEW_SAVEDATA = 0xB,
  MSG_NO_DESTROY_SAVEDATA_AND_NEW_CREATE = 0xC,
  MSG_NO_ERR_LOAD_AND_NEW_CREATE = 0xD,
  MSG_NO_ERR_USE_OTHER_SAVEDATA = 0xE,
  MSG_NO_ERR_READY_SAVEDATA_AND_JUMP_LAUNCHER = 0xF,
  MSG_NO_ERR_SAVE_SAVEDATA = 0x10,
  MSG_NO_CHECK_SAVEDATA = 0x11,
  MSG_NO_ERR_CHECK_HDD_SPACE = 0x12,
  MSG_NO_ERR_READY_TROPHY = 0x13,
  MSG_NO_ERR_START_NETWORK = 0x14,
  MSG_NO_NOW_START_NETWORK = 0x15,
  MSG_NO_UPDATE_REBOOT = 0x16,
  MSG_NO_SERVER_TIMEOUT = 0x17,
  MSG_NO_SERVER_COMMUNICATION = 0x18,
  MSG_NO_MAX = 0x19,
  MSG_NO_FREE = 0xFFFFFFFF,
};

typedef u32 sSavedata::OPMODE;

typedef u32 sSavedata::STATE;

typedef s32 sSavedata::RESULT;

struct sSavedata::HEADER
{
  u32 systemVersion;
  u32 appVersion;
  u32 labelSize;
  u32 reserved;
};

struct sSavedata::KEYTABLE
{
  void *buf;
  size_t size;
  s32 type;
  u32 hash;
};

struct __cppobj sSavedata::cStorageThread : MtThread
{
  u32 mTask;
  SceKernelSema mEvent;
};

typedef int32_t SceUserServiceUserId;

typedef SceSaveDataTitleId SceSaveDataTitleId_0;

struct SceSaveDataIcon
{
  void *buf;
  size_t bufSize;
  size_t dataSize;
  uint8_t reserved[32];
};

typedef SceSaveDataIcon SceSaveDataIcon_0;

typedef SceSaveDataFingerprint SceSaveDataFingerprint_0;

typedef uint32_t SceSaveDataSortKey;

typedef uint32_t SceSaveDataSortOrder;

struct __cppobj __attribute__((aligned(8))) sSavedata : cSystem:160
{
  sSavedata::OPMODE mOpMode;
  sSavedata::STATE mState;
  sSavedata::RESULT mResult;
  void *mpData;
  size_t mDataSize;
  sSavedata::HEADER mHdr;
  u32 mSavedataVersion;
  sSavedata::KEYTABLE mKeyTable[200];
  s32 mKeyTableNum;
  bool mThroughRunning;
  bool mOverWrite;
  bool mIsEncrypt;
  u8 mCipherKey[64];
  sSavedata::cStorageThread mStorageThread;
  SceUserServiceUserId mUserId;
  SceSaveDataTitleId_0 *mTitleId;
  MtString mNewItemIconPath;
  MtString mIconPath;
  MtString mSaveDataDirName;
  MtString mSaveDataFileName;
  MtString mParamTitle;
  MtString mParamSubTitle;
  MtString mParamDetail;
  MtString mNewItemTitle;
  SceSaveDataIcon_0 mIcon;
  SceSaveDataIcon_0 mNewItemIcon;
  u32 mRequireBlocks;
  SceSaveDataFingerprint_0 *mFingerprint;
  bool mUseSearchCond;
  MtString mSaveDataDirSearchCond;
  SceSaveDataSortKey mSortKey;
  SceSaveDataSortOrder mSortOrder;
  u32 mListSaveCanCreateNum;
};

struct SceSaveDataTitleId
{
  char data[10];
  char padding[6];
};

struct SceSaveDataFingerprint
{
  char data[65];
  char padding[15];
};

struct __cppobj sSavedata::MyDTI : MtDTI
{
};

enum sSavedata::cStorageThread::PROCESS_TASK : __int32
{
  T_WAIT = 0x0,
  T_LOAD = 0x1,
  T_SAVE = 0x2,
  T_DELETE = 0x3,
  T_LLOAD = 0x4,
  T_LSAVE = 0x5,
  T_LDELETE = 0x6,
  T_EXIST = 0x7,
  T_TERMINATE = 0x8,
};

enum SAVEDATA_TYPE : __int32
{
  SAVEDATA_TYPE_MAIN = 0x0,
  SAVEDATA_TYPE_EDIT = 0x1,
  SAVEDATA_TYPE_NUM = 0x2,
};

struct sPhysics;

struct sSetManager;

struct sContextManager;

struct sDemo;

struct sSystemFont;

struct sLayout;

struct pthread_attr;

typedef struct pthread_attr *pthread_attr_t;

typedef pthread_attr_t ScePthreadAttr;

struct __cppobj sDDOMain : sMain
{
  f32 mSystemTimer;
  sRender *mpRender;
  sToolExt *mpTool;
  sUnitExt *mpUnit;
  sResourceExt *mpResource;
  sCamera *mpCamera;
  sPadExt *mpPad;
  sEffect *mpEffect;
  sCollision *mpCollision;
  sShader2 *mpShader2;
  sSound *mpSound;
  sCapture *mpCapture;
  sAreaExt *mpArea;
  sGpuParticle *mpGpuParticle;
  sMouseExt *mpMouse;
  sKeyboardExt *mpKeyboard;
  sVibration *mpVibration;
  sPhysics *mpPhysics2;
  sAI *mpAI;
  sZone *mpZone;
  sRemoteProcedure *mpRPC;
  sNetworkExt *mpNetwork;
  sGuideExt *mpGuide;
  sHttpClient *mpHttpClient;
  sDialogBase *mpDialog;
  sArchiveManager *mpArchiveManager;
  sSetManager *mpSetManager;
  sContextManager *mpContextManager;
  sGUIExt *mpGUI;
  sGrass *mpGrass;
  sScene *mpScene;
  sOccluder *mpOccluder;
  sShadow *mpShadow;
  sDemo *mpDemo;
  sPlatformUtil *mpPlatformUtil;
  sHttpPatch *mpHttpPatch;
  sSavedataExt *mpSavedata;
  sFile *mpFile;
  sSystemFont *mpSystemFont;
  sCommonDialog *mpCommonDialog;
  sUserManager *mpUserManager;
  sExceptionHandler *mpExceptionHandler;
  sPrimitive *mpPrimitive;
  sSyncPoint *mpSyncPoint;
  sHID *mpHID;
  sCoprocessor *mpCoprocessor;
  sLayout *mpLayout;
  sKeyboardInterface *mpKbInterface;
  sWorkRate *mpWorkRate;
  sBrowser *mpBrowser;
  sMovie *mpMovie;
  MtSemaphore *mpBrowserSemaphore;
  ScePthread mBrowserThread;
  ScePthreadAttr mBrowserThreadAttr;
  MtObject *mpBrowserObject;
  MT_MFUNC mBrowserFunction;
  __attribute__((aligned(16))) void *mpBrowserStack;
  volatile bool mbWait;
  volatile bool mBrowserThreadAlive;
  bool mIsAutoUpdate;
};

struct __cppobj __attribute__((aligned(8))) sToolBase : cSystem
{
};

struct __cppobj __attribute__((aligned(8))) sTool : sToolBase
{
};

struct __cppobj __attribute__((aligned(8))) sToolExt : sTool
{
};

struct __cppobj __attribute__((aligned(16))) sUnitExt : sUnit
{
};

struct __cppobj sResource::TypeInfo : MtObject
{
  u32 mAttr;
  MT_CTSTR mExt;
  const MtDTI *mpDTI;
};

struct __cppobj sResource::Property : MtProperty::Custom
{
};

typedef void (*RESOURCE_PATH_FILTER)(MT_STR, void *);

struct __attribute__((aligned(4))) sResource::LOADING_INFO
{
  MT_CHAR path[64];
  u32 attr;
  volatile bool active;
};

struct nWin32Detour::eventFlag
{
  SceKernelEventFlag mEventFlag;
};

struct __attribute__((aligned(8))) sResource::RESOURCEWORK
{
  cResource *presource;
  u32 offset;
  u32 orgsize;
  u32 datasize;
  u32 readsize;
  unsigned __int32 complete : 1;
  unsigned __int32 loaded : 1;
  unsigned __int32 threadid : 30;
};

struct sResource::DECODEWORK
{
  MtStream *pin;
  MtCriticalSection cs;
  cResource *parc;
  u8 *pbuf;
  u32 bufsize;
  u32 readpt;
  u32 writept;
  u32 rnum;
  u32 rrequest;
  u32 rcomplete;
  u32 cancel;
  u32 datasize;
  u32 orgsize;
  s64 start_time;
  s64 end_time;
  sResource::RESOURCEWORK rwork[4096];
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(1))) sResource:2428520 : cSystem
{
  _BYTE gap11[7];
  sResource::TypeInfo mTypeInfo[1024];
  u32 mTypeInfoNum;
  _BYTE gap801C[4];
  MtString mRootDirectory;
  MtString mResourcePath;
  MtString mNativePath;
  MtString mResourceFolder;
  MtString mNativeFolder;
  cResource *mpTable[16384];
  sResource::Property mResourceProperty;
  bool mOptimizeEnable;
  bool mBuildComplete;
  bool mForceHDDCache;
  bool mForceBackGround;
  bool mLoadEnd;
  bool mAutoUpdate;
  bool mCacheEnable;
  _BYTE gap28057;
  RESOURCE_PATH_FILTER mpPathFilter;
  void *mpPathFilterAdr;
  ScePthread mLoaderThreadHandle;
  MtSemaphore *mpLoadSemaphore;
  cResource *mpLoadList[1024];
  u32 mLoadNum;
  sResource::LOADING_INFO mLoadingInfo;
  u32 mDecodeThreadMask;
  u32 mDecodeThreadNum;
  _BYTE gap2A0CC[4];
  ScePthread mDecodeThread[4];
  nWin32Detour::eventFlag mDecodeEvent[4];
  nWin32Detour::eventFlag mDecodeSync[4];
  ScePthread mDecodeThreadID[4];
  sResource::DECODEWORK mDecodeWork;
  s32 mTagCount;
  bool mRemoteConvert;
  bool mDecoderActivation[4];
  volatile bool mLoaderThreadSuspend;
  _BYTE gap4A1B2[2];
  s32 mResourceNum;
  u32 mRModelDataReaderBufferSizeKB;
  u32 mRTextureDataReaderBufferSizeKB;
  u32 mRCollisionDataReaderBufferSizeKB;
  u32 mRGrassDataReaderBufferSizeKB;
  u32 mRNavigationMeshDataReaderBufferSizeKB;
  bool mForceVramMemory;
};

struct __cppobj __attribute__((aligned(4))) sResourceExt : sResource:2428520
{
  bool mIsStartCacheRegisterThread;
};

struct MtRandom
{
  u32 mRandomX;
  u32 mRandomY;
  u32 mRandomZ;
  u32 mRandomW;
};

typedef u32 (*sCollision::CONTACT_CALLBACK)(MtObject *, const sCollision::SbcInfo *, uintptr);

typedef u32 (*sCollision::CONTACT_CALLBACK_EX)(MtObject *, const sCollision::ScrCollisionInfo *, const sCollision::SbcInfo *, uintptr);

typedef bool (*sCollision::SCRCOLLISION_FILTERING_CALLBACK)(MtObject *, const sCollision::SbcInfo *, void *);

struct __cppobj sCollision::Param : MtObject
{
  u32 type;
  u32 checkGroupBit;
  u32 filter;
  MtObject *mpOwnerModel;
  u32 hitTarget;
  MtObject *pObject;
  sCollision::CONTACT_CALLBACK pFunc;
  __attribute__((aligned(16))) sCollision::CONTACT_CALLBACK_EX pCallbackFunctionEx;
  __attribute__((aligned(16))) uintptr param;
  MtObject *mpScrFilteringCallbackOwnerObject;
  sCollision::SCRCOLLISION_FILTERING_CALLBACK mpScrFilteringCallbackFunction;
  __attribute__((aligned(16))) void *mpScrFilteringCallbackFunctionParam;
  u32 mSkipTarget;
  MtObject *mpSkipTargetPhase0;
  MtObject *mpSkipTargetPhase1;
  bool FlgEnableFlatEdgeCheck;
  u32 contact_mode;
  u32 correctionNum;
  u32 adjPosRepairSinkInAvailNum;
  f32 adjPosEpsilon;
  f32 adjConvexLimitP0;
  f32 adjConvexLimitP1;
  f32 adjConvexLimitR;
  f32 adjPosWallHitDownLen;
  f32 adjPosVibrationStopDotArea;
  f32 adjPosVibrationStopCheckMoveLenSq;
  f32 adjPosCharaVibrationStopDotArea;
  u32 AdjPosRegistAxisCollisionCheckMode;
  __attribute__((aligned(16))) MtLineSegment AdjPosAxisCheckLS;
  MtSphere AdjPosAxisCheckSphere;
  MtVector3 AdjPosAxisCheckConvexMoveVec;
  bool FlgAdjPosWallEdgeStop;
  bool FlgAdjPosLsNoHitFallFlickEnable;
  bool FlgAdjPosForceWallFlick;
  bool FlgAdjPosAntiStopEnable;
  bool FlgAdjPosWallStop;
  bool FlgAdjPosWallStopForceAttrOnly;
  bool FlgAdjPosBasicScrThroughCheckPowerd;
  bool FlgPathBackSinkIn;
  bool FlgObjHitEnable;
  bool FlgSkinMeshEnable;
  bool adjPosMvMode;
  bool FlgInsideAdjustPositionOK;
};

struct MtLogisticMap
{
  f32 mAmpValue;
  f32 mAmpRate;
};

struct __cppobj MtLogisticMapCycle : MtLogisticMap
{
  f32 mCycle;
  f32 mCycleAdd;
};

struct __cppobj cWind : MtObject
{
  __attribute__((aligned(16))) MtVector3 mWindVec;
  MtVector3 mBaseDir;
  MtLogisticMapCycle mDirPitch;
  MtLogisticMapCycle mDirYaw;
  MtLogisticMapCycle mSpeed;
  f32 mDirPitchParamBase;
  f32 mDirPitchParamAmp;
  f32 mDirYawParamBase;
  f32 mDirYawParamAmp;
  f32 mSpeedParamBase;
  f32 mSpeedParamAmp;
  u32 mWind3268;
  u32 mWind326c;
};

struct sEffect::MultiFilterControl
{
  uMultiFilter *mpFilter[8];
  unsigned __int32 mFilterType : 8;
  unsigned __int32 mFilterPass : 8;
  unsigned __int32 mFilterNum : 8;
  unsigned __int32 mDrawMax : 8;
  u32 mDrawPriority;
};

struct __cppobj __attribute__((aligned(16))) sEffect : cSystem:160
{
  u32 mEventRandomSeed;
  MtRandom mEventRandom;
  f32 mEffectFps;
  bool mEffectFpsEnable;
  MtSize mDefaultScreenSize;
  u32 mDefaultSizeAdjustType;
  __attribute__((aligned(8))) MtVector3 mForceVec;
  MtVector3 mForceDir;
  f32 mForcePower;
  u32 mTimer;
  sCollision::Param mCollisionParam;
  u8 *mpTempBuff;
  u32 mTempBuffSize;
  bool mOcclusionParticleDraw;
  u32 mParticleVolume;
  bool mWindMove;
  bool mWindDeltaTimeActive;
  f32 mWindDeltaTime;
  cWind mWind;
  unsigned __int32 mKillNoMin : 16;
  unsigned __int32 mKillNoMax : 16;
  f32 mLODDist[6][2];
  u32 mDefaultLODType;
  u32 mExclusionTrait;
  u32 mUnitNo;
  bool mLifeRateCurveFlag;
  bool mVibrationEnable;
  u32 mChildUnitLevel;
  f32 mCullingDist[8][2];
  sEffect::MultiFilterControl mMultiBlurFilterControl;
  sEffect::MultiFilterControl mMultiColorCorrectFilterControl;
  sEffect::MultiFilterControl mMultiGodRaysFilterControl;
  sEffect::MultiFilterControl mMultiBloomFilterControl;
  f32 mLensFlareScale[8];
  u32 mAdhesionLimitMax;
  u32 mAdhesionLimitCount;
  unsigned __int32 mAdhesionDivideMax : 8;
};

struct __cppobj MtCollisionUtil::MtDtiObject : MtObject
{
  const MtDTI *mpRegistDTI;
};

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtArrayEx : MtArray
{
  MtCollisionUtil::MtDtiObject mAutoCreateDTI;
  bool mAutoCreate;
};

struct __cppobj __attribute__((aligned(8))) sCollision::cColArray : MtCollisionUtil::MtArrayEx
{
};

struct __cppobj nCollision::cAllocaterIntermediate : MtObject
{
};

struct __cppobj __attribute__((aligned(8))) cDynamicBVHCollision : nCollision::cAllocaterIntermediate
{
  cDynamicBVHCollision::Node *mpRoot;
  s32 mUpdateBackNum;
  u32 mLeafNum;
  cDynamicBVHCollision::Node *mpReservedNodeArray;
  cDynamicBVHCollision::Node **mppReservedNodeNoUseArray;
  u32 mReservedNodeNoUseNum;
  u32 mReservedNodeNoUseMax;
  MtCollisionUtil::MtArrayEx mNoUseNodeArray;
  bool mIsEnableSplitAndStock;
};

struct __cppobj sCollision::cSbcArrayBP : sCollision::cColArray
{
  cDynamicBVHCollision mDBVTStopSbc[32];
  cDynamicBVHCollision mDBVTMoveAllSbc[32];
  cDynamicBVHCollision mDBVTStopAllSbc[32];
  cDynamicBVHCollision mDBVTStopSbcParts[32];
  cDynamicBVHCollision mDBVTMoveSbcParts[32];
};

struct __cppobj MtTypedArray<sCollision::SbcObject::cRegisterInfo> : MtArray
{
};

struct __cppobj sCollision::SbcObject : MtObject
{
  bool mFlgActive;
  MtCriticalSection mCS;
  bool mFlgAutoRemoveDBVTNoUseBuffer;
  MtTypedArray<sCollision::SbcObject::cRegisterInfo> mRegisterArray;
  s32 mReserveRegisterNum;
  s32 mReserveUnregisterNum;
  MtTypedArray<sCollision::SbcObject::cRegisterInfo> mReserveRegisterArray[19];
  MtTypedArray<sCollision::SbcObject::cRegisterInfo> mReserveUnregisterArray[19];
  cDynamicBVHCollision mDBVTStopBasicSCR[32];
  cDynamicBVHCollision mDBVTMoveBasicSCR[32];
};

struct __cppobj MtTypedArray<sCollision::cSbcSkinMesh::cRegisterInfo> : MtArray
{
};

struct __cppobj sCollision::cSbcSkinMesh : MtObject
{
  bool mFlgActive;
  bool mFlgAutoRemoveDBVTNoUseBuffer;
  MtTypedArray<sCollision::cSbcSkinMesh::cRegisterInfo> mDynamicSbcArray;
  s32 mReserveRegisterNum;
  s32 mReserveUnregisterNum;
  MtTypedArray<sCollision::cSbcSkinMesh::cRegisterInfo> mReserveRegisterArray[19];
  MtTypedArray<sCollision::cSbcSkinMesh::cRegisterInfo> mReserveUnregisterArray[19];
  cDynamicBVHCollision mDBVTDynamicSbc;
};

struct __cppobj sCollision::cSbcHeightField : MtObject
{
  MtArray mHeightFieldArray;
};

struct __cppobj sCollision::Collider : MtObject
{
  MtArray mNodeListArray;
  s32 mRunCountInOneFrame;
  s32 mRunCountInOneFrameMax;
  u32 mRunningTypeID;
  u32 mReserveBufferNumPassiveNode;
  u32 mReserveBufferNumActiveNode;
  bool mFlgMultiThread[3];
  bool mFlgUnregistResourceAllMode;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) MtGeometry:96 : MtObject
{
  u32 mType;
};

struct __cppobj MtGeomConvex : MtGeometry:96
{
  f32 mMargin;
};

struct __cppobj MtGeomOBB : MtGeomConvex
{
  MtOBB mOBB;
};

struct __cppobj MtGeomSphere : MtGeomConvex
{
  MtSphere mSphere;
};

struct __cppobj MtGeomCapsule : MtGeomConvex
{
  MtCapsule mCapsule;
};

struct __cppobj MtGeomTriangle : MtGeomConvex
{
  MtTriangle mTriangle;
};

struct __cppobj MtGeomLineSegment : MtGeomConvex
{
  MtLineSegment mLineSegment;
};

struct __cppobj MtGeomAABB : MtGeomConvex
{
  MtAABB mAABB;
};

struct MtCollisionUtil::MtArrayBasicBase
{
  int (**_vptr$MtArrayBasicBase)(void);
  u32 mLength;
  u32 mBufsiz;
  void *mpParam;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<sCollision::cSbcMoveReserveInfo,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

typedef MtCollisionUtil::MtArrayTemplate<sCollision::cSbcMoveReserveInfo,true,1> sCollision::cSbcMoveReserveArray;

struct __cppobj MtCollisionUtil::MtArrayTemplate<sCollision::cSbcMoveResetReserveInfo,false,1> : MtCollisionUtil::MtArrayBasicBase
{
};

typedef MtCollisionUtil::MtArrayTemplate<sCollision::cSbcMoveResetReserveInfo,false,1> sCollision::cSbcMoveResetReserveArray;

struct __cppobj MtCollisionUtil::MtArrayTemplate<sCollision::cSbcRegistReserveInfo,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

typedef MtCollisionUtil::MtArrayTemplate<sCollision::cSbcRegistReserveInfo,true,1> sCollision::cSbcRegistReserveArray;

struct __cppobj MtCollisionUtil::MtArrayTemplate<u32,false,1> : MtCollisionUtil::MtArrayBasicBase
{
};

typedef MtCollisionUtil::MtArrayTemplate<u32,false,1> sCollision::cUnregistSbcHandleArray;

struct __cppobj MtCollisionUtil::MtArrayTemplate<sCollision::cSbcMoveReserveInfoAll,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

typedef MtCollisionUtil::MtArrayTemplate<sCollision::cSbcMoveReserveInfoAll,true,1> sCollision::cSbcMoveReserveAllArray;

struct __cppobj MtCollisionUtil::MtArrayTemplate<sCollision::cSbcMoveResetReserveInfoAll,false,1> : MtCollisionUtil::MtArrayBasicBase
{
};

typedef MtCollisionUtil::MtArrayTemplate<sCollision::cSbcMoveResetReserveInfoAll,false,1> sCollision::cSbcMoveResetReserveAllArray;

struct __attribute__((aligned(8))) MtCollisionUtil::MtLocalBlockAllocator
{
  MtCriticalSection mCS;
  u8 *mpBuffer;
  u32 mBufferSize;
  MtCollisionUtil::MtLocalBlockAllocator::BlockInfo *mpBlockInfo;
  MtAllocator *mpAllocator;
  u32 mBlockSize;
  u32 mBlockNum;
  u32 mAllocIndex;
};

struct __cppobj sCollision : cSystem
{
  rCollision::MaterialList *mpMaterialList;
  u32 mDefaultMaterial;
  bool mbSetup;
  bool mbMove;
  bool mFlg1stAABBUpdate;
  bool mFlgMoveLock;
  f32 mSlopeDegree;
  f32 mWallDegree;
  f32 mCeilingDegree;
  f32 mSlopeSin;
  f32 mWallSin;
  f32 mCeilingSin;
  u32 mTriangleAttributeForceGround;
  u32 mTriangleAttributeForceSlope;
  u32 mTriangleAttributeForceWall;
  f32 mAdjPosStopEpsilonForStopSCR;
  f32 mAdjPosStopEpsilonForMoveSCR;
  f32 mAdjPosMvSkipEpsilon;
  u32 mAdjPosCorrectedNum[19];
  u32 mMatMoveMulStartID[19];
  u32 mMatMoveMulEndID[19];
  f32 mAdjPosThresholdLen;
  f32 mAdjPosThresholdEpsilonSq;
  f32 mAdjPosStopEpsilonLT;
  f32 mAdjPosStopEpsilonGE;
  u32 mAdjPosSinkIn2AdjConvexNum;
  u32 mSbcArrayLimitNum;
  sCollision::cSbcArrayBP mSbcArray;
  sCollision::SbcObject mSbcObject;
  sCollision::cSbcSkinMesh mSbcSkinMesh;
  sCollision::cSbcHeightField mSbcHeightField;
  sCollision::Collider mCollider;
  bool mFlgRunColliderInSystem;
  __attribute__((aligned(8))) MtGeomOBB mCloneGeomOBB[6][19];
  MtGeomSphere mCloneGeomSphere[6][19];
  MtGeomCapsule mCloneGeomCapsule[6][19];
  MtGeomTriangle mCloneGeomTriangle[6][19];
  MtGeomLineSegment mCloneGeomLineSegment[6][19];
  MtGeomAABB mCloneGeomAABB[6][19];
  sCollision::cSbcMoveReserveArray mSbcMoveReserveArray[19];
  s32 mSbcMoveReserveArrayNowFrameRegistCount;
  sCollision::cSbcMoveResetReserveArray mSbcMoveResetReserveArray[19];
  s32 mSbcMoveResetReserveArrayNowFrameRegistCount;
  sCollision::cSbcRegistReserveArray mSbcRegistReserveArray[19];
  s32 mSbcRegistReserveArrayNowFrameRegistCount;
  sCollision::cUnregistSbcHandleArray mSbcUnregistArray[19];
  s32 mSbcUnregistArrayNowFrameRegistCount;
  sCollision::cSbcMoveReserveAllArray mSbcMoveAllReserveArray[19];
  s32 mSbcMoveAllReserveArrayNowFrameRegistCount;
  sCollision::cSbcMoveResetReserveAllArray mSbcMoveResetAllReserveArray[19];
  s32 mSbcMoveResetAllReserveArrayNowFrameRegistCount;
  f32 mTraverseThresholdRayLengthSq;
  bool mIsDeleteSbc_OnUnregistResource;
  MtCollisionUtil::MtLocalBlockAllocator mPreTraverseAllocator;
  MtVector3 mTotalApplyWorldOffset;
};

union sShader2::SHADER_CACHE::SHADER
{
  nDraw::HVertexShader vs;
  nDraw::HPixelShader ps;
  nDraw::HGeometryShader gs;
  nDraw::HHullShader hs;
  nDraw::HDomainShader ds;
  nDraw::HComputeShader cs;
  nDraw::HInputLayout ia;
  nDraw::SHADER *ss;
};

struct sShader2::SHADER_CACHE
{
  sShader2::SHADER_CACHE::SHADER pshader;
  unsigned __int32 type : 16;
  unsigned __int32 shared : 15;
  unsigned __int32 segment : 1;
  u32 crc;
};

struct sShader2::SHADER_POOL
{
  nDraw::SHADER *pshader;
  unsigned __int32 type : 16;
  unsigned __int32 shared : 15;
  unsigned __int32 segment : 1;
  u64 id;
};

struct __attribute__((aligned(8))) sShader2::SHADER_QUERY
{
  rShaderCache *pcache;
  nDraw::SHADER_KEY *pshaderkey;
  unsigned __int32 segmentation : 1;
  unsigned __int32 newshader : 1;
};

struct sShader2::SHADER_REFERENCE
{
  u32 target_index;
  nDraw::SHADER_STATE reference_state;
};

struct __cppobj sShader2 : cSystem
{
  rShader2 *mpShader;
  const nDraw::OBJECT **mpObjects;
  nDraw::OBJECT_INFO *mObjectInfos;
  u32 *mpRemapObjectHandleSearchAccessTable;
  u16 *mObjectIndices;
  u32 mObjectNum;
  bool mUpdateObjectTable;
  bool mDynamicShaderLoading;
  nDraw::SHADER_STATE mShaderStates[4096];
  sShader2::SHADER_CACHE mCaches[8192];
  sShader2::SHADER_POOL mShaders[24576];
  u32 mCacheNum;
  u32 mShaderNum;
  u32 mShaderVersion;
  sShader2::SHADER_QUERY mShaderQuery[1024];
  u32 mShaderQueryReadPt;
  u32 mShaderQueryWritePt;
  nDraw::Material *mpNullMaterial;
  SO_HANDLE mEncodeFunctionTable[16];
  u32 mReferenceFunctionNum;
  sShader2::SHADER_REFERENCE mReferenceFunction[8];
  bool mTraceHLSLCode;
  bool mTracePreHLSLCode;
  bool mTracePreAssemblyCode;
  bool mSRGBEnable;
  bool mUseReferenceShader;
  rShaderPackage *mpRootShaderPackage;
  rShaderPackage *mpSegmentShaderPackage;
  rShaderPackage *mpExtendShaderPackage[4];
  MT_CHAR mCurrentSegment[1024];
  u32 mConflictSID[1024];
  u32 mConflictSIDNum;
  u32 mDuplicatedShader;
  u32 FORCE_DEFAULTPARAMETER_NONE;
  MT_CTSTR mRootShaderName;
};

struct MtPerformanceTimer::PerfTime
{
  u32 last_ticks;
  u32 app_ticks;
  s32 app_d_ticks;
};

struct __cppobj __attribute__((aligned(8))) MtPerformanceTimer : MtObject
{
  MtPerformanceTimer::PerfTime mPerfTime;
  u32 mStartTicks;
  u32 mEndTicks;
};

enum sSound::VOICE_STATUS : __int32
{
  VOICE_STATUS_STOP = 0x0,
  VOICE_STATUS_PLAY = 0x1,
  VOICE_STATUS_PAUSE = 0x2,
  VOICE_STATUS_PREPARE = 0x3,
  VOICE_STATUS_STOPPING = 0x4,
  VOICE_STATUS_NUM = 0x5,
};

enum sSound::VOICE_COMMAND : __int32
{
  VOICE_COMMAND_INIT = 0x0,
  VOICE_COMMAND_REQUEST = 0x1,
  VOICE_COMMAND_STOP = 0x2,
  VOICE_COMMAND_PAUSE = 0x3,
  VOICE_COMMAND_RESUME = 0x4,
  VOICE_COMMAND_PREPARE = 0x5,
};

enum sSound::REQUEST_TYPE : __int32
{
  REQUEST_TYPE_NO_POSITION = 0x0,
  REQUEST_TYPE_POSITION = 0x1,
  REQUEST_TYPE_PURSUE = 0x2,
};

typedef void (*sSound::CALLBACK_FUNC)(sSound::VoiceAccessor *, void *);

typedef __intptr_t intptr;

enum sSound::Voice::VOICE_TYPE : __int32
{
  VOICE_TYPE_SE = 0x0,
  VOICE_TYPE_STREAM = 0x1,
  VOICE_TYPE_EXTERNAL = 0x2,
};

struct sSound::Voice:21056
{
  int (**_vptr$Voice)(void);
  sSound::VOICE_STATUS mStatus;
  sSound::VOICE_COMMAND mVoiceCommand;
  uintptr mRequestId;
  u32 mReqNo;
  uintptr mThisId;
  u32 mGlobal;
  s32 mID_1;
  s32 mID_2;
  s32 mID_3;
  u32 mPriority;
  u32 mPrioMode;
  u32 mLimit;
  u32 mRequestCount;
  u32 mCategory;
  __attribute__((aligned(8))) MtVector3 mPosition;
  MtVector3 mPositionOffset;
  MtQuaternion mQuaternion;
  uCoord *mpCoord;
  s32 mJointNo;
  f32 mVolume;
  s32 mPan;
  s32 mPitch;
  f32 mRatioVolume;
  f32 mRatioEffectVolume;
  f32 mReverbSendLevel;
  u32 mChannelNum;
  s32 mVolumeCurveId;
  s32 mEffectCurveId;
  s32 mDirectionalCurveId;
  u32 mBookingTimer;
  s32 mLink;
  u32 mPauseStatus;
  sSound::REQUEST_TYPE mRequestType;
  f32 mFinalPitch;
  sSound::CALLBACK_FUNC mpCallbackFunc;
  void *mpCallbackArg;
  intptr mWorkArea[2];
  f32 mExternalVolume;
  f32 mExternalEffectVolume;
  sSound::Voice::VOICE_TYPE mVoiceType;
  u32 mVoiceIndex;
  u32 mStartTime;
  u32 mPauseStartTime;
  u32 mDelayTime;
  unsigned __int32 mPlay : 1;
  unsigned __int32 mForceUpdate : 1;
  unsigned __int32 mDynamicVolume : 1;
  unsigned __int32 mDynamicPitch : 1;
  unsigned __int32 mFilterEnable : 1;
  unsigned __int32 mFilterType : 3;
  f32 mFilterFreq;
  f32 mFilterGain;
  f32 mFilterQ;
  f32 mFinalFilterFreq;
  bool mIsUpdateVolume;
  bool mUpdateVolumeTrigger;
  f32 mEffectSendLevel[8];
  f32 mLFEVolume;
  f32 mRatioLFEVolume;
  u32 mCenterVolume;
  s32 mLFECurveId;
  s32 mEqNo;
  s32 mEqEffectNo;
  s32 mListeningIndexBit;
  f32 mDistance[4][8];
  f32 mSurroundVolume[8][8];
  f32 mPannerGains[8][4][8];
  f32 mInterleavedDataVolume[8];
  f32 mIntersectVolume[4][8];
  f32 mExternalLFEVolume;
  f32 mDopplerScaler;
  s32 mDopplerEffect;
  f32 mInteriorDistance;
  void *mpSpeakerSet;
  MtVector3 mSpeakerPosition[4][8];
  f32 mSpeakerDirectionalIntensity[4][8];
  f32 mExtraVolume;
  f32 mExtraPitch;
  s8 mExtraPan;
  f32 mExtraFilterFreq;
  unsigned __int32 mEffectNo : 3;
  void *mpNativeParam;
  rSoundSource *mpSource;
  sSound::NativeVoice *mpNativeVoice;
  unsigned __int32 mVoiceNum : 3;
  unsigned __int32 mMidi : 1;
  unsigned __int32 mVSurroundBypass : 1;
  u32 padding;
};

struct __cppobj sSound::SeVoice : sSound::Voice:21056
{
  rSoundBank *mpBank;
  unsigned __int32 mProgramNumber : 16;
  unsigned __int32 mElementIndex : 16;
  unsigned __int32 mOscillator : 4;
  unsigned __int32 mKey : 8;
  unsigned __int32 mFlangingTime : 12;
  f32 mAmpEnvelope;
  f32 mPitchEnvelope;
  u32 mAmpAttackTime;
  u32 mAmpDecayTime;
  u32 mAmpReleaseTime;
  f32 mInvAmpAttackTime;
  f32 mInvAmpDecayTime;
  f32 mInvAmpReleaseTime;
  f32 mAmpSustainLevel;
  f32 mAmpSustainRate;
  u32 mPitchAttackTime;
  u32 mPitchDecayTime;
  u32 mPitchReleaseTime;
  f32 mInvPitchAttackTime;
  f32 mInvPitchDecayTime;
  f32 mInvPitchReleaseTime;
  f32 mPitchInitialLevel;
  f32 mPitchAttackLevel;
  f32 mPitchSustainLevel;
  f32 mPitchReleaseLevel;
  f32 mPitchSustainRate;
  unsigned __int32 mKeyOff : 1;
  unsigned __int32 mRelease : 1;
  f32 mNoteOffAmpLevel;
  f32 mNoteOffPitchLevel;
  u32 mNoteOffStartTime;
  f32 mElementVolume;
  f32 mElementPitch;
  f32 mExternalFilterFreq;
  rSoundRequest *mpRequest;
};

enum sSound::StreamVoice::FADE_STATUS : __int32
{
  FADE_STATUS_IDLE = 0x0,
  FADE_STATUS_FADEIN = 0x1,
  FADE_STATUS_VOLUME_MOVE = 0x2,
  FADE_STATUS_FADEOUT = 0x3,
};

enum rSoundStreamRequest::SOUND_STREAM_READ_TYPE : __int32
{
  SOUND_STREAM_READ_MEMORY = 0x0,
  SOUND_STREAM_READ_DISK = 0x1,
};

enum sSound::StreamVoice::SHUTDOWN_STATUS : __int32
{
  SHUTDOWN_STATUS_IDLE = 0x0,
  SHUTDOWN_STATUS_CLOSE = 0x1,
  SHUTDOWN_STATUS_FREE = 0x2,
};

struct __cppobj __attribute__((aligned(8))) sSound::StreamVoice : sSound::Voice:21056
{
  sSound::StreamVoice::FADE_STATUS mFadeStatus;
  f32 mFadeTargetVolume;
  f32 mFadeTargetEffectVolume;
  f32 mFadeVolume;
  f32 mFadeEffectVolume;
  f32 mFadeVolumeRatio;
  f32 mFadeEffectVolumeRatio;
  f32 mFadeTargetLFEVolume;
  f32 mFadeLFEVolume;
  f32 mFadeLFEVolumeRatio;
  s32 mPicolaPitchShiftCent;
  u32 mFadeTime;
  u32 mStartPosition;
  u32 mFrameTime;
  u32 mAbsoluteTime;
  rSoundStreamRequest::SOUND_STREAM_READ_TYPE mReadType;
  u32 mSourceID;
  bool mIsRelease;
  bool mIsEnd;
  bool mIsStreamActive;
  bool mIsSourceOpen;
  bool mIsPreparePause;
  bool mIsStopped;
  u32 mMarkerValue;
  u16 mMarkerType;
  u16 mMarkerIndex;
  rSoundStreamRequest::SoundSource *mpStreamSource;
  u32 mCurrentPlayPosition;
  bool mEnableSilentDetection;
  rSoundStreamRequest *mpStreamRequest;
  u32 mIdentifier;
  unsigned __int32 mAbort : 1;
  MtCriticalSection mStreamLoadSection;
  sSound::StreamVoice::SHUTDOWN_STATUS mShutdownStatus;
};

struct __cppobj sSound::ExternalVoice : sSound::Voice:21056
{
  u32 mWritePosition;
  u32 mReadPosition;
  u32 mBitsPerSample;
  u32 mSampleRate;
  MtCriticalSection mExtVoiceCS;
};

struct sSound::SE_ENTRY_PARAMETER
{
  rSoundRequest *mpResource;
  u32 mReqNo;
  uintptr mThisId;
};

struct sSound::STREAM_ENTRY_PARAMETER
{
  rSoundStreamRequest *mpResource;
  u32 mReqNo;
  uintptr mThisId;
};

struct cSoundEffect
{
  int (**_vptr$cSoundEffect)(void);
};

struct __cppobj __attribute__((aligned(16))) cSoundCompressor : cSoundEffect
{
  bool mIsInitialize;
  bool mEnable;
  f32 mThreshold;
  f32 mRatio;
  f32 mAttackTime;
  f32 mReleaseTime;
  f32 mPostGain;
  f32 mThresholdRatio;
  f32 mAttackDelta;
  f32 mReleaseDelta;
  f32 mEnvelope;
  f32 mPostGainRatio;
  f32 mPeak;
  f32 *mpLookaheadBuffer;
  u32 mLookaheadBufferPos;
  u32 mCalcGainSkipCount;
  f32 mGain;
  __attribute__((aligned(8))) f32 mGainArray[32];
  MtCriticalSection mParamSection;
};

struct __cppobj cSoundLimitter : cSoundEffect
{
  bool mEnable;
  f32 mThreshold;
  f32 mOutCeiling;
  f32 mThresholdRatio;
  f32 mOutCeilingRatio;
  MtCriticalSection mParamSection;
};

struct sSound::Listening
{
  MtVector3 OldPosition;
  MtMatrix ListeningMatrix;
  MtMatrix ListeningMatrixInverse;
};

struct cSoundPanner
{
  int (**_vptr$cSoundPanner)(void);
  __attribute__((aligned(16))) MtMatrix mListenerMatrix[4];
  MtMatrix mListenerMatrixInverse[4];
  MtVector3 mSpeakerLocalPosition[7];
  MtCriticalSection mCriticalSection;
  f32 mSpeakerRadius;
  f32 mSpeakerAngle[7];
};

struct sSound::SpeakerAngle
{
  f32 frontAngle;
  f32 surroundAngle;
  f32 enhanceAngle;
};

struct __cppobj sSound::UpdateThread : MtThread
{
};

struct __cppobj sSound::LoadThread : MtThread
{
};

struct sSound::SeRequestItem
{
  rSoundBank *mpBank;
  u32 mProgramNumber;
  u32 mElementIndex;
  f32 mVolume;
  u32 mPriority;
  u32 mID;
  void *mpUser;
  u32 mVelocity;
  u32 mKey;
};

struct __attribute__((aligned(8))) sSound::RandomHistory
{
  const rSoundBank *mpBank;
  unsigned __int32 mProgramNumber : 16;
  unsigned __int32 mElementIndex : 16;
};

struct __attribute__((aligned(8))) sSound::SoundFrameCallback
{
  MtObject *mpObject;
  MT_MFUNC mpFunction;
  _BYTE gap10[8];
};

struct sSound::ReverbResource
{
  rSoundReverb *mpReverb;
  sSound::ReverbResource::ReverbResourceWork *mpReverbResourceWork[4];
};

struct sSound::EQResource
{
  rSoundEQ *mpEQ;
  sSound::EQResource::EQResourceWork *mpEQResourceWork[9];
};

struct __cppobj sSound : cSystem
{
  sSound::NativeVoicePool *mpNativeVoicePool;
  sSound::NativeSystem *mpNativeSystem;
  bool mFinalizeDone;
  MtPerformanceTimer mPerfCount;
  sSound::SeVoice mSeVoice[96];
  sSound::StreamVoice mStreamVoice[8];
  sSound::ExternalVoice mExtVoice;
  sSound::SeEntry *mpSeEntry;
  sSound::StreamEntry *mpStreamEntry;
  MtCriticalSection mSeEntrySection;
  MtCriticalSection mStreamEntrySection;
  MtCriticalSection mSeEntryEndMarkerSection;
  MtCriticalSection mStreamEntryEndMarkerSection;
  u32 mSeVoiceNum;
  u32 mStreamVoiceNum;
  u32 mSeLinkMax;
  u32 mStreamLinkMax;
  u32 mSeEntryNum;
  u32 mStreamEntryNum;
  sSound::SE_ENTRY_PARAMETER mSeEntryParameter;
  sSound::STREAM_ENTRY_PARAMETER mStreamEntryParameter;
  sSound::SeEntry *mpSeEntryReadPtr;
  sSound::SeEntry *mpSeEntryWritePtr;
  sSound::SeEntry *mpSeEntryEndMarker;
  sSound::StreamEntry *mpStreamEntryReadPtr;
  sSound::StreamEntry *mpStreamEntryWritePtr;
  sSound::StreamEntry *mpStreamEntryEndMarker;
  sSound::EffectBase *mpEffect[4];
  u32 mReverbChannelNum;
  cSoundCompressor mCompressor;
  cSoundLimitter mLimitter;
  f32 mTotalMasterVolume;
  f32 mSeMasterVolume;
  f32 mBgmMasterVolume;
  f32 mEnvMasterVolume;
  f32 mVoiceMasterVolume;
  f32 mSystemMasterVolume;
  f32 mEventMasterVolume;
  f32 mLFEMasterVolume;
  __attribute__((aligned(16))) sSound::Listening mListening[4];
  size_t mActiveListeningIndexBit;
  f32 mUpDownMixGains[6];
  f32 mSonicSpeed;
  f32 mDopplerMasterScaler;
  cSoundPanner mPanner;
  sSound::SpeakerAngle mSpeakerAngle51;
  sSound::SpeakerAngle mSpeakerAngle71;
  u32 mChannelsProcess;
  bool mIs51SourceDiffuse;
  f32 mFrameMsec;
  u32 mFrameCount;
  u32 mUpdateFrame;
  u32 mUpdateTime;
  u32 mRequestCount;
  bool mIsAllPause;
  bool mIsSystemPause;
  bool mIsStereoLFE;
  bool mIsPanDepthMinus3dB;
  void *mpPresetBuffer;
  f32 mPresetFrequencyRatio;
  f32 mSampleHoldFrequencyRatio;
  sSound::CALLBACK_FUNC mpExtractPlayCallback;
  void *mpExtrackPlayCallbackArg;
  uintptr mExtrackPlayCallbackID;
  bool mIsStreamSourcePackage;
  sSound::UpdateThread mUpdateThread;
  MtCriticalSection mUpdateSection;
  MtCriticalSection mFrameCallbackSection;
  sSound::LoadThread mLoadThread;
  MtCriticalSection mStreamLoadSection;
  sSound::SeRequestItem mSeRequestQueue[32];
  s32 mCurrentSeRequest;
  sSound::RandomHistory mRandomHistory[16];
  sSound::RandomHistory *mpCurrentRandomHistory;
  sSound::SoundFrameCallback mpSoundFrameCallback[8];
  rSoundCurveSet *mpCurveSet;
  rSoundDirectionalSet *mpDirectionalSet;
  sSound::ReverbResource mReverbResource;
  sSound::EQResource mEQResource;
  u16 mCurrentPlatform;
};

struct __cppobj __attribute__((aligned(8))) sCapture : cSystem
{
  MtString mFilePath;
  MtString mFileName;
  u32 mAlpha;
  u32 mFormat;
  f32 mFps;
  u32 mScaling;
  u32 mAntiAliasing;
  u32 mMotionBlur;
  f32 mViewBlurPower;
  f32 mWorldBlurPower;
  MtColor mBGColor;
  MtColor mMemBGColor;
  s32 mCaptureFrame;
  s32 mCurrentFrame;
  s32 mSubFrameNum;
  bool mUseTempFile;
  bool mCapture;
  bool mFrameWait;
  bool mFramePause;
  f32 mMipLODBias;
  bool mFileOverWrite;
  u32 mDesktopNo;
  u32 mTarget;
  MtColor mClearColor[8];
  u32 mIndex;
  u32 mSubIndex;
  MtSize mSrcSize;
  MtSize mDstSize;
  u16 *mpTempBuf;
  u16 *mpAccBuf;
  MtFile *mpFile;
  MtStream *mpAccStream;
  u32 *mpScanLine;
  bool mKeepStartSetting;
};

struct __cppobj cBlendState : MtObject
{
  SO_HANDLE mBSHandle[34];
};

struct __cppobj __attribute__((aligned(8))) sGpuParticle : cSystem:160
{
  f32 mNearStart;
  f32 mNearEnd;
  f32 mFarStart;
  f32 mFarEnd;
  f32 mAlphaClip;
  u32 mReductionDist;
  bool mAutoReduction;
  sGpuParticle::Context *mpContextList;
  sGpuParticle::Context *mpContextTail;
  cBlendState mBlendState;
  sGpuParticle::PacketBuffer *mpPacketBuffer;
  u32 mNewVBSize;
  u32 mNewIBSize;
  u32 mNewTempVBSize;
  u32 mNewTempIBSize;
  u32 mVBSize;
  u32 mIBSize;
  u32 mTotalVBSize;
  u32 mTotalIBSize;
  u32 mUsedVBSize;
  u32 mUsedIBSize;
  u32 mTempVBSize;
  u32 mTempIBSize;
  u32 mUsedTempVBSize;
  u32 mUsedTempIBSize;
  u32 mContextCount;
  u32 mContextDrawNum;
  bool mDrawParticle;
};

struct sMouse::STATE
{
  MtPoint pos;
  bool visible;
  bool clip;
  s32 ax;
  s32 ay;
  s32 az;
  u32 on;
  u32 old;
  u32 trg;
  u32 release;
  u32 change;
  u32 rep;
  u64 rep_timer[8];
};

struct SceMouseData
{
  uint64_t timestamp;
  bool connected;
  uint32_t buttons;
  int32_t xAxis;
  int32_t yAxis;
  int32_t wheel;
  int32_t tilt;
  uint8_t reserve[8];
};

typedef SceMouseData SceMouseData_0;

struct __cppobj __attribute__((aligned(8))) sMouse : cSystem
{
  sMouse::STATE mState[1];
  bool mCurrentVisible;
  bool mCurrentClip;
  bool mActive;
  u32 mRepeatStartTime;
  u32 mRepeatTime;
  f32 mMouseBaseSpeed;
  s32 mMouseHandle;
  bool mIsConnected[1];
  SceMouseData_0 m_mouseData[64];
  bool mIsSystemIntercepted;
};

struct sMouseExt::STATE_EXT
{
  u32 on;
  u32 old;
  u32 trg;
  u32 release;
  u32 rep;
  u32 change;
  u64 rep_timer[2];
};

struct __cppobj sMouseExt : sMouse
{
  sMouseExt::STATE_EXT mStateExt;
};

struct sKeyboard::STATE
{
  u32 on[8];
  u32 old[8];
  u32 trg[8];
  u32 release[8];
  u32 change[8];
  u32 rep[8];
  u64 rep_timer[256];
};

typedef SceImeEvent SceImeEvent_0;

typedef void (*SceImeEventHandler)(void *, const SceImeEvent_0 *);

struct SceImeKeyboardParam
{
  uint32_t option;
  int8_t reserved1[4];
  void *arg;
  SceImeEventHandler handler;
  int8_t reserved2[8];
};

typedef SceImeKeyboardParam SceImeKeyboardParam_0;

enum SceImeKeyboardDeviceType : __int32
{
  SCE_IME_KEYBOARD_DEVICE_TYPE_KEYBOARD = 0x0,
  SCE_IME_KEYBOARD_DEVICE_TYPE_OSK = 0x1,
};

typedef SceImeKeyboardType SceImeKeyboardType_0;

enum SceImeKeyboardStatus : __int32
{
  SCE_IME_KEYBOARD_STATE_DISCONNECTED = 0x0,
  SCE_IME_KEYBOARD_STATE_CONNECTED = 0x1,
};

typedef SceImeKeyboardStatus SceImeKeyboardStatus_0;

struct SceImeKeyboardInfo
{
  SceUserServiceUserId userId;
  SceImeKeyboardDeviceType device;
  SceImeKeyboardType_0 type;
  uint32_t repeatDelay;
  uint32_t repeatRate;
  SceImeKeyboardStatus_0 status;
  int8_t reserved[12];
};

typedef SceImeKeyboardInfo SceImeKeyboardInfo_0;

struct __cppobj __attribute__((aligned(4))) sKeyboard : cSystem:136
{
  u8 mVKTable[256];
  sKeyboard::STATE mState[1];
  u32 mRepeatStartTime;
  u32 mRepeatTime;
  MtString mKeyOn;
  MtString mKeyOld;
  MtString mKeyRelease;
  MtString mKeyRep;
  MtString mKeyTrg;
  MtString mKeyChange;
  bool mActive;
  bool mIsDisconnected;
  bool mTryConnection;
  bool mIsConnected;
  u32 mKeyState[8];
  SceImeKeyboardParam_0 mKeyboardParam;
  SceImeKeyboardInfo_0 mKeyboardInfo;
  bool mIsSystemIntercepted;
};

struct __cppobj __attribute__((aligned(4))) sKeyboardExt : sKeyboard
{
};

struct sVibration::VibControl
{
  int (**_vptr$VibControl)(void);
  rVibration *mpVibration;
  u32 mListNo;
  u32 mPriority;
  u32 mVibrationId;
  unsigned __int32 mPadVibFlag : 8;
  unsigned __int32 mCamVibFlag : 8;
  unsigned __int32 mEnableFlag : 8;
  unsigned __int32 mViewFadeType : 4;
  unsigned __int32 mVibFadeType : 4;
  u32 mVibTimer;
  unsigned __int32 mFinishTime : 16;
  unsigned __int32 mFinishTimer : 16;
  unsigned __int32 mPadHighVibRno : 4;
  unsigned __int32 mPadLowVibRno : 4;
  unsigned __int32 mCamVibRno : 4;
  unsigned __int32 mFinishRno : 4;
  unsigned __int32 mVibControl161e : 16;
  f32 mPadVibFadeRate[4];
  f32 mCamVibFadeRate[8];
  f32 mPadHighVibRate;
  f32 mPadLowVibRate;
  f32 mCamVibTargetScale;
  u32 mVibControl325c;
  __attribute__((aligned(8))) MtVector3 mCamVibVec;
  MtVector3 mViewPos;
  MtVector3 mVibPos;
  uCoord *mpViewUnit;
  s32 mViewUnitParentNo;
  uCoord *mpVibUnit;
  s32 mVibUnitParentNo;
};

struct __attribute__((aligned(8))) sVibration::PadVibration
{
  int (**_vptr$PadVibration)(void);
  bool mEnableFlag;
  f32 mHighVibRate;
  f32 mLowVibRate;
};

struct sVibration::CameraVibration
{
  int (**_vptr$CameraVibration)(void);
  __attribute__((aligned(16))) MtVector3 mVibVec;
  MtVector3 mVibTargetVec;
  bool mEnableFlag;
};

struct __cppobj sVibration : cSystem:160
{
  u32 mPadViewportNo[4];
  u32 mVibReqType;
  u32 mVibPad;
  u32 mVibCamera;
  u32 mVibListNo;
  u32 mVibPriority;
  __attribute__((aligned(16))) MtVector3 mVibPos;
  uCoord *mpVibUnit;
  s32 mVibUnitParentNo;
  f32 mVibFinishTime;
  bool mPadVibrationEnable;
  bool mCameraVibrationEnable;
  rVibration *mpVibration;
  u32 mVibrationId;
  __attribute__((aligned(16))) sVibration::VibControl mVibControl[8];
  u64 mPrevTimer;
  u32 mDeltaTime;
  f32 mDeltaTimeScale;
  sVibration::PadVibration mPadVibration[4];
  sVibration::CameraVibration mCameraVibration[8];
};

struct __cppobj sAI : cSystem
{
  u64 mPerformanceFrequency;
  u32 mFrameId;
  cAIService *mpServiceTop;
  cAIService *mpServiceBottom;
  cAITask *mpBackgroundTaskTop;
  cAITask *mpBackgroundTaskBottom;
  f32 mTaskPerformanceIndicator;
  u32 mTaskPerformanceInfoNum;
  nAI::TaskPerformanceInfo *mTaskPerformanceInfoList;
  MtString mSettingFileName;
};

struct __cppobj MtTypedArray<cZoneLayout> : MtArray
{
};

struct __cppobj MtTypedArray<nZone::cLayoutElement> : MtArray
{
};

struct __cppobj sZone : cSystem
{
  MtTypedArray<cZoneLayout> mZoneLayoutArray;
  u32 mZoneLayoutNum;
  MtTypedArray<nZone::cLayoutElement> mHitMovementArray[19];
  bool mFlgRuntimeLock[4];
  u32 mRunCounter[19];
};

typedef u32 RPC_ID;

typedef std::_Tree_node<value_type,_Voidptr> std::_Tree_simple_types<value_type>::_Node;

typedef std::_Tree_simple_types<value_type>::_Node *std::_Tree_simple_types<value_type>::_Nodeptr;

typedef std::_Tree_simple_types<value_type>::_Nodeptr std::_Tree_val<_Val_types>::_Nodeptr;

typedef size_t std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::size_type;

typedef std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::size_type std::_Tree_val<_Val_types>::size_type_0;

struct __cppobj std::_Tree_val<_Val_types>_0 : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr _Myhead;
  std::_Tree_val<_Val_types>::size_type_0 _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > > : std::_Tree_val<_Val_types>_0
{
};

struct __cppobj std::_Tree_buy<value_type,allocator_type>_0 : std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > >
{
};

struct __cppobj std::_Tree_comp<false,std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> > : std::_Tree_buy<value_type,allocator_type>_0
{
};

struct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> > : std::_Tree_comp<false,std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >
{
};

struct __cppobj std::map<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > : std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >
{
};

struct __cppobj MtStlMap<RPC_ID,cRemoteProcedure *,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > : std::map<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >
{
};

typedef MtStlMap<RPC_ID,cRemoteProcedure *,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > sRemoteProcedure::DObjIDList;

typedef size_t std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::size_type;

typedef std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::size_type std::_Tree_val<_Val_types>::size_type_1;

struct __cppobj std::_Tree_val<_Val_types>_1 : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr _Myhead;
  std::_Tree_val<_Val_types>::size_type_1 _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > > : std::_Tree_val<_Val_types>_1
{
};

struct __cppobj std::_Tree_buy<value_type,allocator_type>_1 : std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > >
{
};

struct __cppobj std::_Tree_comp<false,std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> > : std::_Tree_buy<value_type,allocator_type>_1
{
};

struct __cppobj std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> > : std::_Tree_comp<false,std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >
{
};

struct __cppobj std::map<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > : std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >
{
};

struct __cppobj MtStlMap<MtString,DParallelList,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > : std::map<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >
{
};

typedef MtStlMap<MtString,DParallelList,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > sRemoteProcedure::DGroupMap;

struct __cppobj __attribute__((aligned(8))) MtMap : MtObject
{
  MtMap::Cell *mpHashTable[256];
  u32 mList[4096];
  u32 mListNum;
  u32 mRefCount;
  bool mAutoSort;
};

struct __cppobj __attribute__((aligned(8))) sRemoteProcedure : cSystem:160
{
  RPC_ID mAutoAllocator;
  u16 mSystemAllocator;
  u16 mSynchronizerAllocator;
  u16 mHealthCheckerAllocator;
  sRemoteProcedure::DObjIDList mIdMap;
  sRemoteProcedure::DGroupMap mGroupMap;
  MtMap mDataTemporary;
  bool mUseTemporary;
};

struct MtNetError
{
  s32 mNo;
  s32 mCause;
  s32 mNative;
};

struct MtNetContext::Listener
{
  int (**_vptr$Listener)(void);
};

union MtNetSessionInfo::SearchKey::$6D6621247A94D41474FB3397834BF600
{
  u32 mInt32;
};

struct MtNetSessionInfo::SearchKey
{
  s32 mType;
  MtNetSessionInfo::SearchKey::$6D6621247A94D41474FB3397834BF600 _anon_0;
};

struct MtNetSessionInfo::SearchKeyList
{
  u32 mAttribute;
  u32 mGameType;
  u32 mGameMode;
  s32 mNum;
  MtNetSessionInfo::SearchKey mSearchKey[8];
};

struct MtNetSessionInfo::Binary
{
  u8 mBuffer[256];
  s32 mDataLength;
};

struct MtNetSessionInfo::SlotNum
{
  s32 mTotalUse;
  s32 mTotalMax;
  s32 mPrivateUse;
  s32 mPrivateMax;
  s32 mPublicUse;
  s32 mPublicMax;
};

struct MtNetIpAddress
{
  u8 mData[4];
};

struct MtNetPort
{
  u16 mData;
};

struct MtNetAddress
{
  MtNetIpAddress mIpAddress;
  MtNetPort mPort;
};

struct __attribute__((aligned(4))) MtNetSessionInfo::General
{
  u32 mNonce;
  MtNetAddress mAddress;
};

typedef uint16_t SceNpMatching2ServerId;

typedef uint32_t SceNpMatching2WorldId;

typedef uint64_t SceNpMatching2LobbyId;

typedef uint64_t SceNpMatching2RoomId;

struct SceNpSessionId
{
  char data[45];
  char term;
  char padding[2];
};

typedef SceNpSessionId SceNpSessionId_0;

struct SceNpInvitationId
{
  char data[60];
  char term;
  char padding[3];
};

typedef SceNpInvitationId SceNpInvitationId_0;

struct __attribute__((aligned(8))) MtNetSessionInfo
{
  MtNetSessionInfo::SearchKeyList mSearchKeyList;
  MtNetSessionInfo::Binary mBinary;
  MtNetSessionInfo::SlotNum mSlotNum;
  MtNetSessionInfo::General mGeneral;
  SceNpMatching2ServerId mNpServerId;
  SceNpMatching2WorldId mNpWorldId;
  SceNpMatching2LobbyId mNpLobbyId;
  SceNpMatching2RoomId mNpRoomId;
  SceNpSessionId_0 mNpSessionId;
  SceNpInvitationId_0 mNpInvitationId;
  u16 mP2pPort;
  bool mIsByWeb;
  bool mIsPrivate;
};

struct __cppobj nNetwork::Context : MtObject, MtNetContext::Listener
{
  s32 mState;
  MtNetContext *mpContext;
  MtNetFriendList *mpFriendList;
  MtNetError mServiceError;
  s32 mService;
  s32 mOption;
  u32 mUserIndex;
  s32 mReqLevel;
  u32 mReqStart;
  u32 mReqFinal;
  bool mStart;
  bool mFinal;
  bool mIsFriendListChange;
  bool mIsSignInChange;
  s32 mInviteState;
  MtNetSessionInfo mInviteSessionInfo;
  MtNetError mInviteError;
  MtNetError mSignInError;
};

struct __cppobj nNetwork::BlockPool : MtObject
{
  void *mpPool;
  void *mpBlock;
  u32 mPoolSize;
  u32 mPoolCount;
  u32 mHead;
  u32 mTail;
  bool mAutoFree;
  MtAllocator *mpPoolAllocator;
  MtCriticalSection mCSAlloc;
  MtCriticalSection mCSFree;
};

struct __attribute__((aligned(8))) nNetwork::ReceiverBase
{
  int (**_vptr$ReceiverBase)(void);
  MtObject *mpObject;
  s32 mRefCount;
};

typedef void (*nNetwork::Receiver<MtObject>::RECEIVE_CALLBACK)(MtObject *, s32, const void *, u32);

struct __cppobj __attribute__((aligned(8))) nNetwork::Receiver<MtObject> : nNetwork::ReceiverBase
{
  nNetwork::Receiver<MtObject>::RECEIVE_CALLBACK mpCallback;
  _BYTE gap20[8];
};

typedef u64 MtNetTime::Total;

struct __cppobj __attribute__((aligned(8))) sNetwork : cSystem:160
{
  MtNetError mFatal;
  MtNetCore *mpCore;
  nNetwork::Context mContext[4];
  nNetwork::Session *mpSession[4];
  nNetwork::nRanking::Object *mpRanking;
  nNetwork::VoiceChat *mpVoiceChat;
  nNetwork::nSharedMemory2::Object *mpSharedMemory[2];
  nNetwork::nAchievement::Object *mpAchievement;
  nNetwork::Storage *mpStorage;
  nNetwork::BlockPool mTransportPool;
  nNetwork::Receiver<MtObject> mCallbackEntry[16];
  u32 mUnresponsiveLimit;
  MtNetTime::Total mLogTimer;
  bool mMuteListChange;
  bool mSuspend;
};

struct __cppobj __attribute__((aligned(8))) MtNetObject : MtObject
{
  MtCriticalSection mCS;
  bool mIsThreadSafe;
  s32 mLockCount;
  MtNetError mFatal;
};

struct __cppobj MtNetBuffer : MtNetObject
{
  u8 *mpBuffer;
  u32 mBufferSize;
  u32 mDataLength;
};

struct __cppobj MtNetUniqueId : MtNetBuffer
{
  u8 mData[64];
};

enum nNet::cProgress::CMD : __int32
{
  CMD_CREATE_GAME = 0x10000,
  CMD_CREATE_LOBBY = 0x10001,
  CMD_SEARCH_GAME = 0x20000,
  CMD_SEARCH_LOBBY = 0x20100,
  CMD_JOIN_GAME = 0x30000,
  CMD_JOIN_LOBBY = 0x30100,
  CMD_ENTRY_GAME = 0x40000,
  CMD_LOCK_GAME = 0x50000,
  CMD_MATCH_GAME = 0x60000,
  CMD_START_GAME = 0x70000,
  CMD_END_GAME = 0x80000,
  CMD_FINAL_GAME = 0x90000,
  CMD_FINAL_LOBBY = 0x90100,
  CMD_ERROR = 0xFFFFFFFF,
};

enum nNet::STATE : __int32
{
  STATE_INIT = 0x0,
  STATE_RETRY = 0x1,
  STATE_WAIT = 0x2,
  STATE_SUCCESS = 0x3,
  STATE_ERROR = 0x4,
  STATE_ABORT = 0x5,
  STATE_END = 0x6,
  STATE_DEAD = 0x7,
};

enum nNet::cProgress::CTRL_IDX : __int32
{
  CTRL_IDX_CREATE_SESSION = 0x0,
  CTRL_IDX_SEARCH_SESSION = 0x1,
  CTRL_IDX_JOIN_SESSION = 0x2,
  CTRL_IDX_ENTRY_SESSION = 0x3,
  CTRL_IDX_LOCK_SESSION = 0x4,
  CTRL_IDX_MATCH_SESSION = 0x5,
  CTRL_IDX_START_SESSION = 0x6,
  CTRL_IDX_END_SESSION = 0x7,
  CTRL_IDX_FINAL_SESSION_GAME = 0x8,
  CTRL_IDX_FINAL_SESSION_AWAIT = 0x9,
  CTRL_IDX_FINAL_SESSION_INDUCE = 0xA,
  CTRL_IDX_FINAL_SESSION_LOBBY = 0xB,
  CTRL_IDX_CREATE_LOBBY_SESSION = 0xC,
  CTRL_IDX_SEARCH_LOBBY = 0xD,
  CTRL_IDX_JOIN_LOBBY = 0xE,
  CTRL_IDX_FINAL_LOBBY = 0xF,
  CTRL_IDX_NONE = 0x1000,
  CTRL_IDX_ABORT = 0x1001,
  CTRL_IDX_CANCEL = 0x1002,
  CTRL_IDX_TIMEOUT = 0x1003,
  CTRL_IDX_END_DEBUG = 0x1004,
};

struct nNet::cResult
{
  int (**_vptr$cResult)(void);
  nNet::STATE mState;
  MtNetError mError;
};

struct nNet::stNET_MATCH_INFO
{
  u8 privateNum;
};

struct __attribute__((aligned(4))) nNet::cProgress
{
  int (**_vptr$cProgress)(void);
  nNet::cProgress::CMD mCommand;
  nNet::STATE mState;
  nNet::cProgress::CTRL_IDX mCtrlIdx;
  nNet::cResult mResult;
  nNet::cProgress *mpNext;
  f32 mTimer;
  nNet::stNET_MATCH_INFO mInfo;
  bool mFlag;
  u32 mValue;
  bool mWaitFlag;
};

enum sNetworkExt::LOGIN_RNO : __int32
{
  RNO_NET_LOGIN = 0x0,
  RNO_NET_LOGIN_ERROR = 0x1,
  RNO_NET_ERROR = 0x2,
  RNO_NET_LOGIN_NUM = 0x3,
};

struct nNetwork::nAchievement::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj sNetworkExt::cAchievementListener : nNetwork::nAchievement::Listener
{
  sNetworkExt *mpParent;
};

struct __attribute__((aligned(4))) sNetworkExt::REQ_SOCKET_SEND_DATA
{
  s32 type;
  bool isAck;
  bool isValid;
};

struct MtStringEx<256>
{
  u32 mLength;
  char mStr[256];
};

struct __cppobj __attribute__((aligned(8))) sNetworkExt : sNetwork
{
  MtNetUniqueId mUniqueIdMyself;
  s32 mUserIndex;
  nNet::cProgress mLoginProgress;
  f32 mLoginTimer;
  u32 mLoginDialogHandle;
  bool mLoginErrorDialog;
  sNetworkExt::LOGIN_RNO mLoginRno;
  bool mReqShutdownContext;
  sNetworkExt::cAchievementListener mAchievementListener;
  bool mAchievementBootup;
  bool mAchievementReady;
  nNet::STATE mAchievementIsAward;
  nNet::STATE mAchievementStatus;
  u64 mAchievementFlag;
  u64 mTrophySize;
  f32 mTrophyProgress;
  bool mStateErrorDialog;
  nNetwork::Receiver<MtObject> mCallbackEntryEx[16];
  MT_CHAR mMacAdrStr[16];
  u32 mSendDataMsgNo;
  u32 mRecvDataMsgNo;
  u8 mSendDataMsgBuff[512];
  MtNetSocket *mpServerSocket;
  MtNetSocket *mpAcceptSocket;
  MtNetSocket *mpClientSocket;
  MtNetUniqueId mConnectUniqueId;
  sNetworkExt::REQ_SOCKET_SEND_DATA mReqSocketSendData;
  u32 mServerSocketRno;
  u32 mClientSocketRno;
  bool mIsConnectServer;
  bool mIsConnectClient;
  s32 mOldSignInLevel;
  bool mIsSignOut;
  bool mIsEnableSignOutCheck;
  bool mIsUnlink;
  bool mIsEnableUnlinkCheck;
  MtTime mWorldServerTime;
  t64 mWorldServerMsec;
  s32 mTotalDeltaTime;
  MtNetTime::Total mUpdateTime;
  MtNetTime::Total mWorldInfoUpdateTime;
  s32 mSlotNo;
  MT_CHAR mLoginAnnounce[1024];
  s32 mMyPawnMaxNum;
  s32 mRentedPawnMaxNum;
  MtStringEx<256> mNpAuthCodeStr;
  s32 mNpAuthIssuer;
};

struct cGuideListener
{
  int (**_vptr$cGuideListener)(void);
};

struct cUserManagerListener
{
  int (**_vptr$cUserManagerListener)(void);
};

struct __cppobj __attribute__((aligned(8))) sGuideBase : cSystem, cGuideListener, cUserManagerListener
{
  bool mIsInit;
};

struct __cppobj sGuideExt : sGuideBase
{
  MtNetCom::INative *mpNav;
  MtNetCom::IRichPresence *mpRichPresence;
};

struct __cppobj MtTypedArray<sHttpClient::cServerEnvironmentInfo> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) sHttpClient::cStartAddrInfo : MtObject
{
  MtString mStartURN;
  MtString mStartURL;
  MtString mCheckURL;
  bool mIsKaigai;
  bool mIsSorry;
};

struct __cppobj sHttpClient::cPrepareInfo : MtObject
{
  MtString mAddr;
  MtString mOneTime;
};

struct __attribute__((aligned(8))) sHttpClient::cLoginInfo::stLoginServer
{
  MtString mHost;
  u32 mPort;
};

struct sHttpClient::cLoginInfo::stCOGLink
{
  MtString mName;
  MtString mAddr;
  MtString mExplain;
  MtString mRedirect;
};

struct __cppobj sHttpClient::cLoginInfo : MtObject
{
  u32 mState;
  u32 mMode;
  MtString mOneTime;
  sHttpClient::cLoginInfo::stLoginServer mLoginServer;
  sHttpClient::cLoginInfo::stCOGLink mCOGLink;
  MtString mMaintenance;
};

struct cHttpClient::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj sHttpClient::MyListener : cHttpClient::Listener
{
};

struct __cppobj MtMemoryStream : MtStream
{
  u8 *mBuffer;
  u32 mSeekPt;
  u32 mLength;
  u32 mMode;
  unsigned __int32 mBufferOverflow : 1;
  MtAllocator *mpAllocator;
};

struct __cppobj sHttpClient::cSendDLErrorInfoInfo : MtObject
{
  MtString mString;
};

struct __cppobj __attribute__((aligned(8))) sHttpClient : cSystem
{
  MtString mTestUrl;
  MtString mCapChargeAddr;
  MtTypedArray<sHttpClient::cServerEnvironmentInfo> mServerEnvironmentInfoList;
  u32 mServerEnvironmentIndex;
  sHttpClient::cStartAddrInfo mStartAddrInfo;
  sHttpClient::cPrepareInfo mPrepareInfo;
  sHttpClient::cLoginInfo mLoginInfo;
  cHttpClient *mpHttp;
  sHttpClient::MyListener mListener;
  MT_CHAR *mpAddHeader;
  u32 mUserIndex;
  bool mIsUseToken;
  bool mIsSaveToken;
  u32 mStatusCode;
  s32 mContentLength;
  s32 mErrorCode;
  s32 mVerb;
  MtNetTime::Total mReqStartTime;
  f32 mReqElapsedTime;
  MtString mUserAgent;
  MtString mUrn;
  MtString mUrl;
  MtString mServerUrn;
  MtString mStsAppliesToUri;
  u16 mPort;
  MtString mRequestData;
  MtString mRequestResult;
  MtMemoryStream mStream;
  MT_CTSTR mpCurrent;
  MtString mAddHeader;
  s32 mRno;
  s32 (*pAnalyzeFunc)(sHttpClient *);
  _BYTE gap1A8[8];
  sHttpClient::cSendDLErrorInfoInfo mSendDLErrorInfoInfo;
  bool mIsSendDLError;
};

struct __cppobj sDialogBase : cSystem:160
{
  s32 mPhase;
  u32 mCategory;
  MtString m2ndMessage;
  u32 m2ndType;
  u32 m2ndMsgNo;
  bool mIsReturnToTop;
  bool mIsDialogBusy;
  u32 mDialogResult;
  bool mIsKillRequest;
  f32 mDialogKillDelay;
  MT_CHAR mConvStr[512];
  sCommonDialog::MSG_DIALOG_CALLBACK mpCallbackFunc;
  _BYTE gap248[8];
  rGUIMessage *mprGMD;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(1))) sGUI:3144 : cSystem
{
  _BYTE gap11[7];
  nDraw::Texture *mpAlphaMap;
  u32 mAttr;
  nGUI::LANGUAGE mLanguageId[3];
  rGUIFont *mpFontArray[8];
  rGUIFont *mpLayoutingFont;
  rGUIFont *mpIconFont;
  nGUI::ICON_INFO *mpIconInfo;
  MT_CHAR *mpIconNameBuffer;
  rGUI *mpFontFilterResource;
  u32 mEnableRubySpace;
  s32 mRubyLineSpace;
  f32 mRubyRatio;
  _BYTE gapA4[4];
  rGUIFont *mpRubyFont;
  u32 mTempMTagOffset;
  u32 mTempMTagBufferCount;
  nGUI::MTAG *mpTempMTagBuffer;
  nGUI::MTAG **mpEmptyTempMTagBuffer;
  nGUI::CLASS_INFO *mpObjectClassInfo;
  nGUI::CLASS_INFO *mpInstanceClassInfo;
  u32 mBufferBit;
  u32 mBufferIndex;
  u32 mBufferIndexBit;
  u32 mVertexBufferSize;
  u32 mVertexBufferBlankSize;
  _BYTE gapEC[4];
  nDraw::VertexBuffer *mpVertexBuffer[3];
  void *mpVertexBufferTop;
  nGUI::BufferObject mVertexBufferObject;
  u32 mIndexBufferSize;
  u32 mIndexBufferBlankSize;
  nDraw::IndexBuffer *mpIndexBuffer[3];
  void *mpIndexBufferTop;
  nGUI::BufferObject mIndexBufferObject;
  MtArray mWrapPointList;
  bool mIsEnableGUIPlacementNew;
};

struct sGUIExt::stDebugRegistShortcut
{
  bool onRTexecute;
};

struct sGUIExt::stScreenAdjustPos
{
  bool enableX;
  bool enableY;
  bool enableScale;
  f32 overLen;
};

struct sGUIExt::stDbgIndicatorWork
{
  bool mVisible;
  bool mVisibleOld;
  bool mShowFps;
  bool mShowAxis;
  bool mShowProcessBar;
  bool mShowCameraTarget;
  bool mShowWorldPos;
  bool mShowPad1;
  bool mShowPad2;
  bool mShowMemory;
  bool mShowLoadingInfo;
  bool mShowBuildVersion;
  bool mShowScrCollisionProfile;
  bool mShowPerfGraph;
  bool mGUIDbgPrintVisible;
  bool mGUIDbgRectVisible;
};

struct uGUIChat;

struct uGUIDamage;

struct uGUIActionPalette;

struct uGUIIndicator;

struct uGUIGameMenu;

struct __cppobj sGUIExt::cOptionValue : MtObject
{
  u32 mValues[10];
};

struct uEnemy;

struct uGUIQuestTarget;

struct __cppobj sGUIExt::cQuestTargetInfo : MtObject
{
  uEnemy *mpEnemy;
  uGUIQuestTarget *mpGUI;
  u32 mJointNo;
  __attribute__((aligned(8))) MtVector3 mOffset;
};

struct nDDOUtility::cArray<sGUIExt::cQuestTargetInfo,8>
{
  sGUIExt::cQuestTargetInfo elems[8];
};

struct __cppobj sGUIExt::cQuestTargetInfoList : MtObject
{
  __attribute__((aligned(16))) nDDOUtility::cArray<sGUIExt::cQuestTargetInfo,8> mInfos;
};

typedef void (*sGUIExt::cPriorityManager::VISIBLE_FUNC)(MtObject *, bool);

struct __cppobj __attribute__((aligned(16))) sGUIExt::cPriorityManager::cData : MtObject
{
  uGUIBase *mpGUI;
  const MtVector3 *mpPos;
  f32 mLen;
  sGUIExt::cPriorityManager::VISIBLE_FUNC mpVisibleFunc;
};

struct nDDOUtility::cArray<sGUIExt::cPriorityManager::cData,64>
{
  sGUIExt::cPriorityManager::cData elems[64];
};

typedef nDDOUtility::cArray<sGUIExt::cPriorityManager::cData,64> sGUIExt::cPriorityManager::cDataArray;

struct nDDOUtility::cArray<sGUIExt::cPriorityManager::cData *,64>
{
  sGUIExt::cPriorityManager::cData *elems[64];
};

typedef nDDOUtility::cArray<sGUIExt::cPriorityManager::cData *,64> sGUIExt::cPriorityManager::cDataPtrArray;

struct __cppobj __attribute__((packed)) __attribute__((aligned(8))) sGUIExt::cPriorityManager : MtObject
{
  sGUIExt::cPriorityManager::cDataArray mArray;
  sGUIExt::cPriorityManager::cDataPtrArray mSortArray;
  u32 mRegistNum;
  u32 mVisibleNum;
  u32 mStartOffset;
  u32 mDrawNum;
};

struct nDDOUtility::cArray<sGUIExt::cPriorityManager,2>
{
  sGUIExt::cPriorityManager elems[2];
};

typedef nDDOUtility::cArray<sGUIExt::cPriorityManager,2> sGUIExt::cPriorityManagerList::cList;

struct __cppobj sGUIExt::cPriorityManagerList : MtObject
{
  sGUIExt::cPriorityManagerList::cList mList;
  u32 mStartOffset;
  u32 mVisibleNum;
};

struct nDDOUtility::cArray<sGUIExt::cPriorityManagerList,3>
{
  sGUIExt::cPriorityManagerList elems[3];
};

struct uGUIQuestAnnounce;

struct sGUIExt::stQuestAnnounceQueue
{
  bool mEnable;
  u32 mType;
  MT_CTSTR mQuestName;
  MT_CTSTR mQuestInfo;
};

struct uGUINpcWindowBase;

struct nDDOUtility::cArray<uGUINpcWindowBase *,1>
{
  uGUINpcWindowBase *elems[1];
};

struct uGUIJobLvUp;

struct uGUIGauge;

struct uGUIGaugeEnemyBoss;

struct uGUIGaugeSorcery;

struct uGUITargetMagic;

struct uGUIServerMsg;

struct sGUIExt::stServerMsgQueue
{
  bool mEnable;
  MT_CHAR mMsg[1024];
  u32 mType;
};

struct uGUIGainInfo;

struct sGUIExt::stGainInfoQueue
{
  bool mEnable;
  u32 mType;
  s32 mData0;
  s32 mData1;
};

struct uGUITouchActionGuide;

struct __cppobj MtTypedArray<uDDOModel> : MtArray
{
};

struct uGUISystemMsg;

struct __cppobj __attribute__((aligned(16))) sGUIExt : sGUI:3144
{
  sGUIExt::stDebugRegistShortcut mDebugRegistShortcut;
  u32 mGUIBaseF;
  u32 mGUIEndType;
  MtArray mArrayGUIBase;
  MtArray mArrayGUI;
  MtArray mArrayTFS;
  s32 mGUINum;
  u32 mRno;
  u32 mCreateGUIUnitDTIType;
  u32 mRnoCheckCreateGUIUnitAll;
  bool mOutputGUIResourceList;
  u32 mPrioLenType;
  u32 mTfsF;
  s32 mTfsHeaderCnt;
  u32 mPrioHandle[9];
  sGUIExt::stScreenAdjustPos mScreenAdjustPos;
  sGUIExt::stDbgIndicatorWork mDIW;
  uBlurFilterExt *mpUIBlurFilter;
  uGUIDbgPrint *mpGUIDbgPrint;
  bool mGUIDbgPrintVisible;
  bool mGUIDbgPrintVisibleOld;
  uGUIDbgRect *mpGUIDbgRect;
  bool mGUIDbgRectVisible;
  bool mGUIDbgRectVisibleOld;
  s32 mChkFontMode;
  bool mIsDbgGameMenu;
  rTexture *mpTexItemIcon;
  rGUIMessage *mpMsgActPlt;
  rSoundRequest *mpSndReqMenu;
  rSoundRequest *mpSndReqCmn;
  rTexture *mpTexMap;
  uGUIBase *mpSingletonMenu;
  bool mIsEnableMenuUI;
  u32 mMenuUIF;
  u32 mItemCBF;
  sGUIExt::cChat *mpChat;
  uGUIChat *mpGUIChat;
  uGUIDamage *mpGUIDamage;
  u32 mBabbleQueueCnt;
  u8 mBabbleQueueStep;
  uGUIActionPalette *mpGUIActionPalette;
  bool mGUIActionPaletteDefaultVisible;
  uGUIIndicator *mpGUIIndicator;
  uGUIGameMenu *mpGUIGameMenu;
  sGUIExt::cOptionValue mOptionValue;
  sGUIExt::cQuestTargetInfoList mInfoList;
  nDDOUtility::cArray<sGUIExt::cPriorityManagerList,3> mPrioManagers;
  uGUIQuestAnnounce *mpGUIQuestAnnounce;
  sGUIExt::stQuestAnnounceQueue mQuestAnnounceQueue[8];
  uGUINpcWindowBase *mpGUINpcWindowBase;
  nDDOUtility::cArray<uGUINpcWindowBase *,1> mpGUINpcWindowBaseList;
  uGUIJobLvUp *mpGUIJobLvUp;
  uGUIGauge *mpGUIGauge;
  uGUIGaugeEnemyBoss *mpGUIGaugeEnemyBoss;
  uGUIGaugeSorcery *mpGUIChargeMagic;
  uGUITargetMagic *mpGUITarget;
  uGUIServerMsg *mpGUIServerMsg;
  sGUIExt::stServerMsgQueue mServerMsgQueue[128];
  uGUIGainInfo *mpGUIGainInfo[3];
  sGUIExt::stGainInfoQueue mGainInfoQueue[3][128];
  uGUITouchActionGuide *mpTouchActionGuide[8];
  MtTypedArray<uDDOModel> mTouchArray;
  uGUISystemMsg *mpGUISystemMsg;
  uGUISystemMsg *mpGUISystemMsgItemGet;
  sGUIExt::cMap *mpMap;
};

struct __cppobj sGrass : cSystem
{
  MtArray mGrass;
  u32 mWindMask;
  MtArray mMark;
  f32 mUnitMeter;
  bool mForcedFade;
  f32 mFadeBeginDistance;
  f32 mFadeEndDistance;
  bool mForcedFadeCurve;
  MtHermiteCurve mFadeCurve;
  bool mForcedVisiblePercent;
  f32 mVisiblePercent;
  bool mMoreSmoothFade;
  bool mResourceOverrideVisiblePercent;
  bool mResourceOverrideClusterSize;
  f32 mResourceVisiblePercent;
  f32 mResourceClusterSize;
  nDraw::IndexBuffer *mpIndexBuffer;
  nDraw::IndexBuffer *mpPointIndexBuffer;
  nDraw::IndexBuffer *mp62IndexBuffer;
  nDraw::IndexBuffer *mp64IndexBuffer;
  nDraw::IndexBuffer *mp6IndexBuffer;
  nDraw::IndexBuffer *mp6PointIndexBuffer;
  nDraw::VertexBuffer *mp4VertexBuffer;
  u32 mLOD;
  f32 mLODBeginDistance;
  f32 mLODEndDistance;
  bool mUseAlphaToCoverage;
  nDraw::Texture *mpTarget;
  nDraw::Texture *mpDepth;
  f32 mLightMaskMargine;
  f32 mPointMapBias;
  u32 mPointMapSize;
  __attribute__((aligned(8))) MtVector4 mPointMapHalfSize;
  MtVector4 mPointMapHalfPixel;
  f32 mLightMaskBlendFactor;
  __attribute__((aligned(16))) MtMatrix mPointViewProj[8];
  bool mFlush;
  MtString mOutputPath;
  MtVector3 mSBCOffset;
  bool mNoCulling;
  bool mIsActiveGrassMulValue;
  f32 mGrassVisiblePercentMulValue;
  u32 mGrassModeMinValue;
  f32 mGrassFadeBeginDistanceMulValue;
  f32 mGrassFadeEndDistanceMulValue;
  f32 mGrassNearClipDistanceMulValue;
};

struct sScene::UNIT_MAP
{
  u32 offset;
  u32 count;
};

struct __cppobj __attribute__((aligned(8))) sScene::TextureInfo : MtObject
{
  bool mEnable;
  MT_CTSTR mName;
  u32 mIndex;
};

struct __cppobj sScene : cSystem
{
  cUnit **mpUnitPool;
  u32 mUnitNum;
  u32 mUnitPoolMax;
  sScene::UNIT_MAP mUnitMap[10];
  bool mShowLightTree;
  bool mShowWindTree;
  u32 mTextureDetail;
  u32 mTextureMipLimite;
  nDraw::Texture *mpEnvelopeTex[3];
  s32 mEnvelopeFlag[64];
  s32 mDebugView;
  bool mWireFrame;
  u32 mEnvelope[64];
  u8 *mpEnvelopeBase;
  u8 *mpEnvelopeBasePrev;
  u32 mEnvelopePitch;
  nDraw::Texture *mpSysTexture[13];
  nDraw::Texture *mpDeviceTexture[1];
  rTexture *mpFontTexture;
  rTexture *mpEnvCubeTexture;
  rTexture *mpCompareTexture;
  rTexture *mpHDFontTexture;
  nDraw::VertexBuffer *mpSysGeometry[6];
  s32 mUberWindThreshold;
  bool mUseApproximateLighting;
  bool mUseBruteForceLighting;
  __attribute__((aligned(16))) MtVector4 mTestParam;
  MtVector3 mTestPosition;
  MtVector3 mTestDirection;
  MtVector4 mTestColor;
  MtVector4 mDummyColor;
  f32 mTestType;
  rTexture *mpTestTexture;
  sScene::TextureInfo mTextureInfos[128];
  u32 mTextureInfoNum;
  bool mUseBVH;
  cDynamicBVHCollision *mpTree[2];
  f32 mCorrectBloomPassageFrame;
  f32 mCorrectBloomUseFrame;
  f32 mCorrectBloomNearestDistance;
  f32 mCorrectBloomMaxThreshold;
  bool mLightRestrictPS3;
  bool mLightRestrictPS4;
  bool mLightRestrictPC;
  bool mIsUberFog;
  bool mIsUberFog2;
};

struct sOccluder::OcclusionInfo
{
  unsigned __int32 begin : 16;
  unsigned __int32 end : 16;
};

struct __cppobj sOccluder : cSystem:136
{
  bool mUseOccluder;
  bool mInflateOccluder;
  bool mDebug;
  f32 mDiv;
  u32 mDrawMode;
  u32 mUnitCount;
  cUnit *mpUnits[32];
  u32 mInfoCount;
  __attribute__((aligned(16))) MtPlane mPlane[2048];
  sOccluder::OcclusionInfo mInfo[120];
  MtMatrix mWorld;
  MtMatrix mOffset;
  rOccluder *mpOccluder;
};

struct sShadow::SharedTexture
{
  nDraw::Texture *mRenderTarget;
  nDraw::Texture *mDepthStencil;
};

struct __cppobj sShadow::ResourceGroup : MtObject
{
  sShadow *mSystem;
  u32 mResourceType;
  u32 mResourceNum;
  u32 mShadowMapSizeOriginal;
  u32 mShadowMapSize;
  u32 mShadowMapType;
  bool mShadowMapCacheEnable;
  bool mInitialized;
  sShadow::Resource *mResources[16];
  sShadow::ViewConsistentResource *mResViewConsistent[32];
  u32 mCachedViewNum;
  u32 mVcrIndex;
  u32 mAllocTable[32];
  sShadow::SharedTexture mSharedTexture;
};

struct __attribute__((aligned(8))) sShadow::Bundle
{
  f32 mPriority;
  sShadow::Node *mpNode;
  u32 mResourceIndex;
};

struct __attribute__((aligned(16))) MtFrustum
{
  MtPlane planes[6];
  bool infinite;
};

struct sShadow::Context
{
  bool mValid;
  u32 mViewNum;
  MtRect mRegion;
  __attribute__((aligned(16))) MtMatrix mView;
  MtMatrix mProj;
  MtMatrix mViewProj;
  f32 mNearClip;
  __attribute__((aligned(16))) MtVector3 mCameraPos;
  MtFrustum mFrustum;
  MtOBB mProjectionScreenObb;
};

struct __cppobj __attribute__((aligned(2))) sShadow : cSystem
{
  uintptr *mpShadowCacheIDList;
  uintptr mShadowCacheIDRandParam;
  const u32 mShadowCacheIDListMax;
  MtArray mNodes;
  sShadow::ResourceGroup mResourceGroup[2];
  u32 mResourceNum;
  u32 mCacheEnabledViewNumber;
  sShadow::Bundle mBundleLists[2][8][16];
  sShadow::Context mContext;
  u32 mCurrentFrameCount;
  bool mManagementEnable;
  bool mQueryEnable;
  bool mQueryDispEnable;
  u32 mQueryFrameLatencyTolerance;
  u32 mQueryVisibleThresholdPixelNumber;
  f32 mFadeDistance;
  f32 mVisibleDistance;
  f32 mAttenuationDelta;
  f32 mBlendWeightPriority;
  f32 mThresholdPriorityDelta;
  bool mShadowMapCacheEnable;
  bool mContinuousShadowMapCacheValidation;
  u32 mToleranceFrameLengthUpdateShadowMapCache;
  u32 mShadowMapCacheSceneHash[8][2];
  bool mIsActiveShadowMulValue;
  f32 mShadowSizeMulValue;
  f32 mShadowDistanceMulValue;
  f32 mCommonPointShadowDistanceBias;
  bool mCommonPointShadowDistanceBiasEnable;
  bool mRestoreShadowMapUseResolve;
  bool mRestoreShadowMapCacheEnable;
};

struct cSystemService;

struct cRemotePlay;

struct cGameLiveStream;

struct cScreenshot;

struct cVideoRecorder;

struct cSharePlay;

struct __cppobj __attribute__((aligned(8))) sPlatformUtil : cSystem
{
  cSystemService *mpSystemService;
  cRemotePlay *mpRemotePlay;
  cGameLiveStream *mpGameLiveStream;
  cScreenshot *mpScreenshot;
  cVideoRecorder *mpVideoRecorder;
  cSharePlay *mpSharePlay;
  s32 mHideSplashScreenFrame;
};

struct HTTPDL_RETRY_PARAMS
{
  s32 lsrValid;
  s32 lsrTimeLimit;
  f32 lsrAveMbps;
  u32 maxRtCount;
};

enum sHttpPatch::Phase : __int32
{
  ServerSelect = 0x0,
  ExeVerCheck = 0x1,
  ExeVerCheck_Running = 0x2,
  ExeVerCheck_Finish = 0x3,
  ExeVerCheck_NextWait = 0x4,
  NormalVerCheck = 0x5,
  NormalVerCheck_Running = 0x6,
  NormalVerCheck_Finish = 0x7,
  NormalVerCheck_NextWait = 0x8,
  UpdateFileReq = 0x9,
  UpdateFileReq_Running = 0xA,
  UpdateFileReq_Finish = 0xB,
  UpdateFileReq_NextWait = 0xC,
  FullListCheck = 0xD,
  FullListCheck_Running = 0xE,
  FullListCheck_Finish = 0xF,
  FullListCheck_NextWait = 0x10,
  PurgeListCheck = 0x11,
  PurgeListCheck_Running = 0x12,
  PurgeListCheck_Finish = 0x13,
  PurgeListCheck_NextWait = 0x14,
  BootListCheck = 0x15,
  BootListCheck_Running = 0x16,
  BootListCheck_Finish = 0x17,
  BootListCheck_NextWait = 0x18,
  DetailedVerCheck = 0x19,
  DetailedVerCheck_Second = 0x1A,
  DetailedVerCheck_Running = 0x1B,
  DetailedVerCheck_Finish = 0x1C,
  DetailedVerCheck_NextWait = 0x1D,
  FormatReq = 0x1E,
  FormatReq_Running = 0x1F,
  FormatReq_Finish = 0x20,
  FormatReq_NextWait = 0x21,
  ForceMatchedVerCheck = 0x22,
  ForceMatchedVerReq = 0x23,
  ForceMatchedVerReq_Running = 0x24,
  ForceMatchedVerReq_Finish = 0x25,
  ForceMatchedVerReq_NextWait = 0x26,
  Finish = 0x27,
  Error = 0x28,
  Abort = 0x29,
  Phase_MAX_0 = 0x2A,
};

enum sHttpPatch::ServerType : __int32
{
  DownloadDataClean = 0x0,
  Local_VersionUp_010001 = 0x1,
  Local_VersionUp_010002 = 0x2,
  Local_VersionUp_010003 = 0x3,
  Local_VersionUp_010004 = 0x4,
  Local_VersionUp_010005 = 0x5,
  Local_VersionUp_010006 = 0x6,
  MaxCursor = 0x7,
  Local_Begin = 0x1,
  Local_End = 0x6,
};

struct __cppobj __attribute__((aligned(2))) sHttpPatch : cSystem:160
{
  u32 mExeVerCheckRno;
  u32 mNormalVerCheckRno;
  u32 mUpdateExeFileRno;
  u32 mUpdateFileRno;
  bool mIsStartUpdate;
  u32 mFullListCheckRno;
  u32 mPurgeListCheckRno;
  u32 mBootListCheckRno;
  u32 mFormatRno;
  u32 mForceMatchedVerCheckRno;
  HTTPDL_RETRY_PARAMS mDLParam;
  HTTPDL_RETRY_PARAMS mDLParamInterface;
  via::module::http_patch::HttpPatchManager *mpHPManager;
  via::HttpPatchModule *mpHPModule;
  bool mSetuped;
  sHttpPatch::Phase phase;
  sHttpPatch::Phase phaseNext;
  bool abort;
  bool abortLock;
  bool detailedMode;
  bool forceMatchedMode;
  s32 selectServer;
  s32 threadNum;
  s32 forceMatchedVersionNo;
  sHttpPatch::ServerType _SelectServer;
  via::module::http_patch::RequestParam *_Param;
  via::module::http_patch::ResultBase *_ResultCtrl;
  via::module::http_patch::ExeVersionResult *_ExeVersionResultCtrl;
  via::module::http_patch::VersionResult *_VersionResultCtrl;
  via::module::http_patch::UpdateResult *_UpdateResultCtrl;
  via::module::http_patch::ExeUpdateResult *_ExeUpdateResultCtrl;
  via::module::http_patch::DetailedUpdateResult *_DUpdateResultCtrl;
  via::module::http_patch::FullListResult *_FullListResultCtrl;
  via::module::http_patch::PurgeListResult *_PurgeListResultCtrl;
  via::module::http_patch::BootListResult *_BootListResultCtrl;
  via::module::http_patch::SimpleResult *_SimpleResultCtr;
  MtString mStrAppVersion;
  MtString mStrServerVersion;
  bool mModuleLoaded;
  u32 mRnoCSE;
  s32 mErrorCode;
  bool mIsError;
  bool mIsAbort;
  bool mIsHashError;
  MT_CHAR mIpAdrsStr[32];
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) sSavedata:42464 : cSystem:160
{
  __attribute__((aligned(4))) sSavedata::OPMODE mOpMode;
  sSavedata::STATE mState;
  sSavedata::RESULT mResult;
  void *mpData;
  size_t mDataSize;
  sSavedata::HEADER mHdr;
  u32 mSavedataVersion;
  _BYTE gap44[4];
  sSavedata::KEYTABLE mKeyTable[200];
  s32 mKeyTableNum;
  bool mThroughRunning;
  bool mOverWrite;
  bool mIsEncrypt;
  u8 mCipherKey[64];
  __attribute__((aligned(2))) sSavedata::cStorageThread mStorageThread;
  SceUserServiceUserId mUserId;
  _BYTE gap13D4[4];
  SceSaveDataTitleId_0 *mTitleId;
  MtString mNewItemIconPath;
  MtString mIconPath;
  MtString mSaveDataDirName;
  MtString mSaveDataFileName;
  MtString mParamTitle;
  MtString mParamSubTitle;
  MtString mParamDetail;
  MtString mNewItemTitle;
  SceSaveDataIcon_0 mIcon;
  SceSaveDataIcon_0 mNewItemIcon;
  u32 mRequireBlocks;
  _BYTE gap1494[4];
  SceSaveDataFingerprint_0 *mFingerprint;
  bool mUseSearchCond;
  _BYTE gap14A1[7];
  MtString mSaveDataDirSearchCond;
  SceSaveDataSortKey mSortKey;
  SceSaveDataSortOrder mSortOrder;
  u32 mListSaveCanCreateNum;
};

struct __cppobj cStorageDataBase : MtObject
{
};

struct __cppobj cStorageLauncherData : cStorageDataBase
{
};

struct __cppobj sSavedataExt : sSavedata:42464
{
  u32 mSaveVersion;
  u32 mLoadVersion;
  u32 mCurrentVersion;
  void *mpSaveBuff;
  u32 mLauncherSaveVersion;
  u32 mLauncherLoadVersion;
  u32 mLauncherCurrentVersion;
  cStorageLauncherData mStorageLauncherData;
  void *mpLauncherSaveBuff;
  bool mIsCheckTrophySize;
  u32 mNeedHddSizeKB;
};

struct __cppobj __attribute__((aligned(4))) sFile : cSystem
{
  MtString mTitleCode;
  bool mFlgStopPrefetchRegisterFunction;
  bool mFlgEndPrefetchRegisterFunction;
  rHDDPrefetchList *mpPrefetchResource;
  sFile::PREFETCH_LIST *mpPrefetchList;
  sFile::PREFETCH_LIST *mpPrefetchWritePt;
  bool mTempMount;
  bool mDownloadMount;
  MtString mTempMountPath;
  MtString mDownloadMountPath;
  bool mIsSwitchDownloadDrive;
  MT_CTSTR *mpDownloadDriveFolder;
  u32 mDownloadDriveFolderNum;
  MT_CTSTR *mpDownloadDriveExtractFolder;
  u32 mDownloadDriveExtractFolderNum;
  bool mIsDownloadAreaFilePriority;
};

typedef size_t std::_Simple_types<cUserManagerListener *>::size_type;

typedef std::_Simple_types<cUserManagerListener *>::size_type std::_Tree_val<_Val_types>::size_type;

struct __cppobj std::_Tree_val<_Val_types> : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr _Myhead;
  std::_Tree_val<_Val_types>::size_type _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > > : std::_Tree_val<_Val_types>
{
};

struct __cppobj std::_Tree_buy<value_type,allocator_type> : std::_Tree_alloc<false,std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > >
{
};

struct __cppobj std::_Tree_comp<false,std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> > : std::_Tree_buy<value_type,allocator_type>
{
};

struct __cppobj std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> > : std::_Tree_comp<false,std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >
{
};

struct __cppobj std::set<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *> > : std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >
{
};

struct __cppobj MtStlSet<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > : std::set<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *> >
{
};

typedef MtStlSet<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > sUserManager::EventListenerSet;

struct SceUserServiceLoginUserIdList
{
  SceUserServiceUserId userId[4];
};

typedef SceUserServiceLoginUserIdList SceUserServiceLoginUserIdList_0;

struct sUserManager::GamepadInfo
{
  bool mIsConnected;
  s32 mHandler;
  s32 mPortType;
  s32 mUserId;
};

enum SceUserServiceUserColor : __int32
{
  SCE_USER_SERVICE_USER_COLOR_BLUE = 0x0,
  SCE_USER_SERVICE_USER_COLOR_RED = 0x1,
  SCE_USER_SERVICE_USER_COLOR_GREEN = 0x2,
  SCE_USER_SERVICE_USER_COLOR_PINK = 0x3,
};

typedef SceUserServiceUserColor SceUserServiceUserColor_0;

struct sUserManager::UserInfo
{
  s32 mId;
  bool mIsLogin;
  bool mIsGuest;
  MT_CHAR mUserName[17];
  SceUserServiceUserColor_0 mColor;
  sUserManager::GamepadInfo mPad;
  sUserManager::GamepadInfo mPadSpec;
};

struct __cppobj __attribute__((aligned(8))) sUserManager : cSystem:160
{
  s32 mUserNum;
  sUserManager::EventListenerSet mListener;
  SceUserServiceUserId mInitialUserId;
  SceUserServiceLoginUserIdList_0 mUserIdList;
  sUserManager::GamepadInfo mPadTVRemote;
  sUserManager::UserInfo mUser[4];
};

typedef void (*nExceptionHandler::USER_TRACE_PROC)(MT_CTSTR, void *);

struct __attribute__((aligned(8))) nAutomation::Envelope::attachment
{
  MT_CHAR *pBuffer;
  u32 sizeBuffer;
  MT_CHAR name[64];
};

enum nAutomation::Envelope::eReceiverType : __int32
{
  RECEIVER_TO = 0x0,
  RECEIVER_CC = 0x1,
  RECEIVER_BCC = 0x2,
};

struct nAutomation::Envelope::receiver
{
  nAutomation::Envelope::eReceiverType type;
  MT_CHAR address[256];
};

enum nAutomation::Envelope::eCharset : __int32
{
  CHARSET_UNKNOWN = 0x0,
  CHARSET_JIS = 0x1,
  CHARSET_SJIS = 0x2,
};

struct __attribute__((packed)) __attribute__((aligned(4))) nAutomation::Envelope:48352
{
  int (**_vptr$Envelope)(void);
  u32 mRefCount;
  u32 mAttachmentNum;
  nAutomation::Envelope::attachment mAttachment[16];
  u32 mReceiverNum;
  nAutomation::Envelope::receiver mReceiver[16];
  MT_CHAR mFrom[256];
  MT_CHAR mReplyTo[256];
  _BYTE gap1754[4];
  MT_CHAR *mpSubject;
  MT_CHAR *mpBody;
  MtObject *mpPrefixOwner;
  MT_MFUNC mpPrefixCb;
  _BYTE gap1778[8];
  MtObject *mpPostfixOwner;
  MT_MFUNC mpPostfixCb;
  _BYTE gap1790[8];
  nAutomation::Envelope::eCharset mCharset;
};

struct __cppobj __attribute__((aligned(4))) nExceptionHandler::UrgentMailDesc : nAutomation::Envelope:48352
{
  bool mIsAttachLog;
};

struct nAutomation::Envelope
{
  int (**_vptr$Envelope)(void);
  u32 mRefCount;
  u32 mAttachmentNum;
  nAutomation::Envelope::attachment mAttachment[16];
  u32 mReceiverNum;
  nAutomation::Envelope::receiver mReceiver[16];
  MT_CHAR mFrom[256];
  MT_CHAR mReplyTo[256];
  MT_CHAR *mpSubject;
  MT_CHAR *mpBody;
  MtObject *mpPrefixOwner;
  MT_MFUNC mpPrefixCb;
  __attribute__((aligned(16))) MtObject *mpPostfixOwner;
  MT_MFUNC mpPostfixCb;
  _BYTE gap1790[8];
  nAutomation::Envelope::eCharset mCharset;
};

struct nAutomation::CustomField
{
  int (**_vptr$CustomField)(void);
  nAutomation::CustomField *mpPrev;
  nAutomation::CustomField *mpNext;
  nAutomation::Ticket *mpOwner;
};

struct __cppobj nAutomation::DefaultFieldBase : nAutomation::CustomField
{
  MT_CTSTR mpValue;
};

struct __cppobj nAutomation::FieldProject : nAutomation::DefaultFieldBase
{
};

struct __cppobj nAutomation::FieldTracker : nAutomation::DefaultFieldBase
{
};

struct __cppobj nAutomation::FieldPriority : nAutomation::DefaultFieldBase
{
};

struct __cppobj nAutomation::FieldHash : nAutomation::DefaultFieldBase
{
};

typedef s64 nAutomation::socket_t;

struct __cppobj __attribute__((packed)) __attribute__((aligned(8))) nAutomation::Ticket : nAutomation::Envelope
{
  MT_CHAR *mpProject;
  MT_CHAR *mpTracker;
  MT_CHAR *mpPriority;
  MT_CHAR *mpHash;
  MT_CHAR *mpHostName;
  MT_CHAR *mpHostPort;
  MT_CHAR *mpRemotePath;
  MT_CHAR *mpAPIKey;
  nAutomation::FieldProject mProjectField;
  nAutomation::FieldTracker mTrackerField;
  nAutomation::FieldPriority mPriorityField;
  nAutomation::FieldHash mHashField;
  nAutomation::CustomField *mpField;
  MtCriticalSection mFieldCs;
  nAutomation::socket_t mSocket;
};

struct __cppobj __attribute__((aligned(8))) nExceptionHandler::UrgentTicketDesc : nAutomation::Ticket
{
  bool mIsActive;
};

typedef bool (*nExceptionHandler::USER_EXCEPTION_PROC)(void (*)(const char *, ...), void *);

typedef int FILE_HANDLE;

struct __cppobj __attribute__((aligned(8))) sExceptionHandler : cSystem
{
  nExceptionHandler::USER_TRACE_PROC mpExceptionTraceHandler;
  void *mpExceptionTraceHandlerParam;
  bool mIsInitialized;
  u32 mHandleType;
  u32 mDumpType;
  u32 mControlType;
  nExceptionHandler::UrgentMailDesc mMailDesc;
  nExceptionHandler::UrgentTicketDesc mTicketDesc;
  unsigned __int32 mMailSentCount : 4;
  unsigned __int32 mTicketSentCount : 4;
  bool (*mWatchDogCallback)(void);
  bool mIsExitWatchDog;
  bool mIsExceptionOccurred;
  u32 mWatchDogCounter;
  u64 mWatchDogTimeout;
  nExceptionHandler::USER_EXCEPTION_PROC mpUserExceptionHandler;
  void *mpUserExceptionHandlerParam;
  FILE_HANDLE mLogFileHandle;
  MT_CHAR mLogFileName[1024];
  MT_CHAR mReportFileServerPath[1024];
};

struct sPrimitive::DivTag
{
  cPrimTagList::IndexTag *p_tag;
  cPrimTagList::IndexTag *p_work;
  u32 first;
  u32 last;
};

enum sPrimitive::ePrimStencilFunc : __int32
{
  STENCIL_FUNC_EQ = 0x0,
  STENCIL_FUNC_NEQ = 0x1,
  MAX_PRIM_STENCIL_FUNC = 0x2,
};

struct __cppobj __attribute__((aligned(8))) sPrimitive : cSystem:160
{
  u32 mState;
  u32 mScreenLayout;
  u32 mVirtualScrW;
  u32 mVirtualScrH;
  cPrim *mpPrim[6];
  sPrimitive::DivTag mDivTag[6];
  u32 mNumOfPrim;
  cPrimTexHandleManager *mpTexHandleMgr;
  cPrimBufferManager *mpBufferMgr;
  cPrimTagManager *mpTagManager;
  nDraw::Texture *mpDistortionTex;
  cBlendState mBlendState;
  u32 mReductionDist;
  f32 mNearStart;
  f32 mNearEnd;
  f32 mFarStart;
  f32 mFarEnd;
  f32 mVolumeScale;
  f32 mIntensityScale;
  f32 mParallaxScale;
  f32 mParallaxFadeStart;
  f32 mParallaxFadeEnd;
  u32 mParallaxMinLoop;
  u32 mParallaxMaxLoop;
  u32 mPrimModelLtNum;
  f32 mPrimAlphaClip;
  f32 mDepthCmpLimit;
  MtSize mScreenSize;
  sPrimitive::ePrimStencilFunc mPrimStencilFunc;
  u8 mPrimStencilRef;
  bool mUseMTDraw;
  bool mParallaxEnable;
  bool mVolumeEnable;
  bool mAutoReduction;
  bool mOcclusionVTF;
  bool mDrawPrimitive;
  u32 mDepthDiv;
  f32 mRefractZBlur;
  f32 mRefractZThreshold;
  u32 mScreenPassLayer;
  float mSceneClampRange;
  u32 mSceneClampType;
};

enum nSyncPoint::eSyncPoint : __int32
{
  SP_INVALID = 0xFFFFFFFF,
  SP_FRAME_ENTRY = 0x0,
  SP_BEFORE_MOVE = 0x1,
  SP_BEFORE_SYNC = 0x2,
  SP_BEFORE_MOVEAFTER = 0x3,
  SP_BEFORE_DRAW = 0x4,
  SP_BEFORE_RENDERING = 0x5,
  SP_NUM = 0x6,
};

struct __cppobj sSyncPoint::syncPointElement : MtObject
{
  sSyncPoint::callbackInfo *mpCallbackPool;
  u32 mCallbackWPtr;
  u32 mCallbackRPtr;
};

struct __cppobj sSyncPoint : cSystem:160
{
  nSyncPoint::eSyncPoint mStatus;
  sSyncPoint::syncPointElement mCallbackInfo[6];
};

struct __cppobj sHID : cSystem
{
  cHID *mpAdditionalHID[1];
};

typedef void *HANDLE;

struct __attribute__((aligned(8))) sCoprocessor::COPROCESSOR_THREAD
{
  HANDLE handle;
  u32 thread_id;
  HANDLE event;
  HANDLE sync;
  u32 job_id;
  u32 job_index;
  u32 active;
  u32 queue_id;
  bool exit;
};

typedef void (*CO_FUNC)(void *, u32);

struct __attribute__((aligned(8))) sCoprocessor::QUEUE_WORK32
{
  CO_FUNC pfunc;
  u32 exit_code;
  void *ptr;
  u32 size;
};

struct __cppobj __attribute__((aligned(8))) sCoprocessor : cSystem
{
  sCoprocessor::COPROCESSOR_THREAD mCoprocessorThread[5];
  sCoprocessor::QUEUE_WORK32 mCoprocessorDrawQueue[256];
  sCoprocessor::QUEUE_WORK32 mCoprocessorFrameQueue[256];
  u32 mCoprocessorQueueThreadNum;
  u32 mCoprocessorDrawQueueWritePt;
  u32 mCoprocessorDrawQueueReadPt;
  u32 mCoprocessorFrameQueueWritePt;
  u32 mCoprocessorFrameQueueReadPt;
  u32 mWaitSleepTime;
  volatile s32 mDrawSyncQueue;
  volatile s32 mFrameSyncQueue;
  u32 mRuntime;
};

enum sKeyboardInterface::MODE : __int32
{
  MODE_IDLE = 0x0,
  MODE_OPEN = 0x1,
  MODE_RUNNING = 0x2,
  MODE_CLOSE = 0x3,
  MODE_ENTERED = 0x4,
  MODE_ENTERED_WAIT = 0x5,
  MODE_CANCELED = 0x6,
};

enum sKeyboardInterface::REQUEST : __int32
{
  REQ_NONE = 0x0,
  REQ_OPEN_TO_KEYBOARD = 0x1,
  REQ_OPEN_TO_PAD = 0x2,
  REQ_FORCE_CLOSE = 0x3,
};

enum sKeyboardInterface::RESULT : __int32
{
  RESULT_OK = 0x0,
  REULST_CANCELED = 0x1,
  RESULT_ABORT = 0x2,
  RESULT_NO_TEXT = 0x1,
  RESULT_NONE = 0xFF,
};

enum SceImeType : __int32
{
  SCE_IME_TYPE_DEFAULT = 0x0,
  SCE_IME_TYPE_BASIC_LATIN = 0x1,
  SCE_IME_TYPE_URL = 0x2,
  SCE_IME_TYPE_MAIL = 0x3,
  SCE_IME_TYPE_NUMBER = 0x4,
};

typedef SceImeType SceImeType_0;

enum SceImeEnterLabel : __int32
{
  SCE_IME_ENTER_LABEL_DEFAULT = 0x0,
  SCE_IME_ENTER_LABEL_SEND = 0x1,
  SCE_IME_ENTER_LABEL_SEARCH = 0x2,
  SCE_IME_ENTER_LABEL_GO = 0x3,
};

typedef SceImeEnterLabel SceImeEnterLabel_0;

enum SceImeInputMethod : __int32
{
  SCE_IME_INPUT_METHOD_DEFAULT = 0x0,
};

typedef SceImeInputMethod SceImeInputMethod_0;

typedef int32_t (*SceImeTextFilter)(wchar_t *, uint32_t *, const wchar_t *, uint32_t);

enum SceImeHorizontalAlignment : __int32
{
  SCE_IME_HALIGN_LEFT = 0x0,
  SCE_IME_HALIGN_CENTER = 0x1,
  SCE_IME_HALIGN_RIGHT = 0x2,
};

typedef SceImeHorizontalAlignment SceImeHorizontalAlignment_0;

enum SceImeVerticalAlignment : __int32
{
  SCE_IME_VALIGN_TOP = 0x0,
  SCE_IME_VALIGN_CENTER = 0x1,
  SCE_IME_VALIGN_BOTTOM = 0x2,
};

typedef SceImeVerticalAlignment SceImeVerticalAlignment_0;

struct SceImeDialogParam
{
  SceUserServiceUserId userId;
  SceImeType_0 type;
  uint64_t supportedLanguages;
  SceImeEnterLabel_0 enterLabel;
  SceImeInputMethod_0 inputMethod;
  SceImeTextFilter filter;
  uint32_t option;
  uint32_t maxTextLength;
  wchar_t *inputTextBuffer;
  float posx;
  float posy;
  SceImeHorizontalAlignment_0 horizontalAlignment;
  SceImeVerticalAlignment_0 verticalAlignment;
  const wchar_t *placeholder;
  const wchar_t *title;
  int8_t reserved[16];
};

typedef SceImeDialogParam SceImeDialogParam_0;

struct __cppobj __attribute__((aligned(8))) sKeyboardInterface : cSystem:160
{
  sKeyboardInterface::MODE mOskDialogMode;
  sKeyboardInterface::REQUEST mRequest;
  sKeyboardInterface::RESULT mResult;
  bool mIsOpenToPad;
  bool mIsInputIntercept;
  bool mCloseInputEnterd;
  u32 mUseKeyboardPanel;
  u32 mUseKeyboardLayout;
  u32 mInitialKeyboardPanel;
  u16 mDefaultText[512];
  u16 mTitleText[512];
  u16 mDescriptionText[512];
  u16 mResultText[512];
  u32 mResultTextLength;
  u8 mOutputText_utf8[1536];
  u32 mOutputTextLength;
  SceImeDialogParam_0 mDialogParam;
  u32 mDialogWidth;
  u32 mDialogHeight;
  u32 mDialogOption;
};

struct __cppobj __attribute__((aligned(8))) sWorkRate : cSystem:160
{
  f32 mRate[6];
  f32 mMoveTimer[6];
  s32 mPrio[6];
};

enum MtFile::MODE : __int32
{
  MODE_UNDEFINED = 0x10,
  MODE_READ = 0x11,
  MODE_READ_ASYNC = 0x12,
  MODE_WRITE = 0x13,
  MODE_WRITE_APPEND = 0x14,
  MODE_READ_WRITE = 0x15,
  MODE_READ_WRITE_APPEND = 0x16,
};

typedef s32 MtFile::FileError;

typedef u32 MtFile::DLC_HANDLE;

struct __cppobj MtFile : MtObject
{
  FILE_HANDLE mHandle;
  MtFile::MODE mMode;
  u32 mSize;
  u32 mSeekPt;
  MT_CHAR mPath[1024];
  s32 mAsyncContextHandle;
  void *mAsyncDist;
  u32 mAsyncRequestedSize;
  u32 mAsyncTransferredSize;
  u32 mAsyncSeekPt;
  bool mAsyncExec;
  u32 mAsyncThreadInfoIndex;
  u32 mOwnerThread;
  MtFile::FileError mLastErrorCode;
  MtFile::DLC_HANDLE mDLCHandle;
};

typedef void (*sBrowser::JSCallback_jumpSetSizeByType)(MtObject *, s32 *, s32 *, MT_CTSTR, MT_CTSTR);

typedef void (*sBrowser::JSCallback_jumpSetPos)(MtObject *, s32 *, s32 *, MT_CTSTR);

typedef void (*sBrowser::JSCallback_jumpSetSize)(MtObject *, s32 *, s32 *, MT_CTSTR);

typedef void (*sBrowser::JSCallback_jumpSetPosSize)(MtObject *, s32 *, s32 *, s32 *, s32 *, MT_CTSTR);

struct __cppobj MtTypedArray<cBrowserRequest> : MtArray
{
};

enum sBrowser::FONT_WORK_STATE::DECL : __int32
{
  READY_0 = 0x0,
  IMPACT = 0x1,
  FEEDBACK = 0x2,
};

struct __cppobj __attribute__((aligned(8))) sBrowser : cSystem:136
{
  bool mRequestSave;
  u32 mSaveRno;
  cBrowser *mpBrowser;
  u32 mBufferSize;
  void *mpBuffer;
  u32 mRno;
  MtString mURL;
  MtString mErrorURL;
  MtPoint mPos;
  MtSize mSize;
  MtSize mSize2;
  bool mIsSNJFontDisp;
  u32 mDrawPrioBase;
  u32 mDrawPrioFont;
  s32 mDrawDepth;
  MtRect mDrawRect;
  nDraw::RasterizerState *mpRSS;
  u32 mDisplayMode;
  u32 mFontVertexNum;
  nDraw::VertexBuffer *mpFontVertex;
  MtRect mpFontClipRect[8192];
  TICKET mArcTichet;
  MtString mSaveCOGID;
  s32 mErrorType;
  s32 mErrorKind;
  s32 mErrorCategory;
  s32 mErrorFlowType;
  u8 mOutputText_utf8[1536];
  u32 mOutputText_utf8Length;
  u8 mOutputText_sjis[1536];
  u32 mOutputText_sjisLength;
  MtString mOutputText;
  void *mpBrowserFontBinary[2];
  MtFile mFileBrowserFont;
  void *mpBrowserFont[2];
  u32 mBrowserFontDataSize[2];
  rGUIFont *mprGUIFont;
  rTexture *mprBrowserFont[2];
  MtString mCOGAuthKey;
  MtString mOnetimeToken;
  MtString mLoginServerHost;
  MtString mNextFlowTop;
  MtString mNextFlowVerCheck;
  MtString mNextFlowVerUp;
  MtString mDLServerAddr;
  MtString mDLServerURL;
  u32 mLoginServerPort;
  u32 mBrowserRequest;
  u32 mBrowserStatus;
  bool mIsDraw;
  bool mIsCursorDraw;
  bool mIsInputEnable;
  bool mIsToVerCheck;
  bool mIsToTop;
  bool mIsUpdateReady;
  MtString mJSFunction;
  sBrowser::JSCallback_jumpSetSizeByType mJSCallback_jumpSetSizeByType;
  _BYTE gap211B8[8];
  MtObject *mpJSCallback_jumpSetSizeByType_this;
  sBrowser::JSCallback_jumpSetPos mJSCallback_jumpSetPos;
  _BYTE gap211D0[8];
  MtObject *mpJSCallback_jumpSetPos_this;
  sBrowser::JSCallback_jumpSetSize mJSCallback_jumpSetSize;
  _BYTE gap211E8[8];
  MtObject *mpJSCallback_jumpSetSize_this;
  sBrowser::JSCallback_jumpSetPosSize mJSCallback_jumpSetPosSize;
  _BYTE gap21200[8];
  MtObject *mpJSCallback_jumpSetPosSize_this;
  MtTypedArray<cBrowserRequest> mRequest;
  nDraw::Texture *mpDrawTexture;
  nDraw::Texture *mpFontRenerWorkTexture;
  sBrowser::FONT_WORK_STATE::DECL mpFontState;
  rTextureMemory *mpTextureMemory;
  bool mIsTextureAccessEnable;
  MtPoint mCursorPosSv;
  bool mIsNextFeedBack;
  bool mFontFeedBack;
  bool mBrowserEnd;
};

struct __cppobj __attribute__((aligned(8))) sMovie : cSystem
{
};

typedef u32 nCollision::SBC_HANDLE;

typedef nCollision::SBC_HANDLE sCollision::SBC_HANDLE;

typedef nCollision::SBC_HANDLE sCollision::SBC_HANDLE_HF;

struct __cppobj __attribute__((aligned(8))) sCollision::SbcInfoBase : MtObject
{
  sCollision::SBC_HANDLE SbcHandle;
  u32 SbcNo;
  u32 PartsNo;
  u32 HitLeafIndex;
  u32 RTriNo;
  uScrollCollisionGeometry *pHitScrGeometry;
  sCollision::SBC_HANDLE_HF HitHeightFieldHandle;
  s32 HitHeightFieldU;
  s32 HitHeightFieldV;
  u32 HitHeightFieldTriID;
  uDynamicSbc *pHitDSbc;
  u16 DSbcBvhID;
  bool FlgHitDynamicSbc;
};

struct __cppobj sCollision::SbcInfo : sCollision::SbcInfoBase
{
  rCollision::PartsInfo *pPartsInfo;
  rCollision::Triangle *pTriangle;
  rCollision::Vertex *pVertex;
  rCollision::MaterialInfo *pMaterialInfo;
  u32 HitNodeGeomID;
  bool FlgMove;
  bool FlgResetSet;
  const MtMatrix *pMoveMatrix;
  const MtMatrix *pMoveMatrixInverse;
  const MtMatrix *pMoveMatrixO;
  const MtMatrix *pMoveMatrixOInverse;
};

struct __cppobj sCollision::ScrCollisionInfoBase:2496 : MtObject
{
  _BYTE gap8[8];
  MtVector3 cpos;
  MtVector3 cposTrans;
  MtVector3 cposHited;
  MtVector3 *pcposUse;
  _BYTE gap48[8];
  MtVector3 cspeed;
  MtVector3 cspeedTrans;
  MtVector3 cspeedHited;
  MtVector3 *pcspeedUse;
  sCollision::SbcInfo info;
  bool FlgFind;
  const sCollision::Param *pCollisionParam;
  bool FlgObjHited;
  sCollision::TraverseInfo *pTraverseInfo;
};

struct __cppobj sCollision::ScrCollisionInfo : sCollision::ScrCollisionInfoBase:2496
{
  MtGeometry *pGeomOrg;
  MtGeometry *pGeomTrans;
  MtGeometry *pGeomUse;
  MtVector3 workVec[6];
  MtVector3 *pworkVecUse[6];
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uFilter:608 : cUnit
{
  u16 mPass;
  __attribute__((aligned(4))) u32 mPriority;
  u32 mScreenLayer;
};

struct __cppobj __attribute__((aligned(8))) uMultiFilter : uFilter:608
{
  u32 mDrawNum;
  u32 mDrawMax;
  u32 mEntry;
  nEffect::FilterParam *mpFilterParam;
  bool mClearFlag;
};

struct rCollision::MaterialList
{
  char name[8];
  __attribute__((aligned(16))) MtColorF color;
  u32 attribute;
};

struct __cppobj cDynamicBVHCollision::Node : MtObject
{
  cDynamicBVHCollision::Node *mpParent;
  cDynamicBVHCollision::Node::$B9B188958E8216E0E3FEDE19D4F5FBC8 _anon_0;
  MtAABB mAABB;
};

struct MtCollisionUtil::MtLocalBlockAllocator::BlockInfo
{
  u32 BlockNum;
  u16 Used;
  u16 AvailSize;
};

struct __cppobj rShader2 : cResource
{
  rShader2::HEADER *mpHeader;
  nDraw::OBJECT **mpObjects;
  u32 mObjectNum;
  u32 mCRC32;
};

struct __cppobj rShaderCache : cResource
{
  rShaderCache::HEADER *mpHeader;
};

union nDraw::SHADER_OBJECT_KEY::$C6622A6E0ADCBAC15D4BCF7A821C1CBF
{
  SO_HANDLE hdata;
  void *pdata;
};

struct nDraw::SHADER_OBJECT_KEY
{
  SO_HANDLE handle;
  u32 padding1;
  nDraw::SHADER_OBJECT_KEY::$C6622A6E0ADCBAC15D4BCF7A821C1CBF _anon_0;
};

struct nDraw::SHADER_KEY
{
  u64 id;
  u32 version;
  u32 size;
  SO_HANDLE technique;
  SO_HANDLE layouts[4];
  u32 encode_targets;
  u32 reserved;
  u16 tech_pass;
  u16 key_num;
  nDraw::SHADER_OBJECT_KEY keys[1];
};

struct rShaderPackage::HEADER
{
  u32 magic;
  u32 shader_version;
  u16 version;
  u16 shader_num;
  u16 vs_num;
  u16 ps_num;
  u16 gs_num;
  u16 ia_num;
  u32 table_num;
  u32 resource_num;
  u32 body_size;
  uintptr body_offset;
};

struct __cppobj rShaderPackage : cResource
{
  rShaderPackage::HEADER mHeader;
  rShaderPackage::CORE *mpCore;
  u8 *mpBody;
};

struct sSound::NativeVoicePool
{
  int (**_vptr$NativeVoicePool)(void);
  sSound::NativeVoice *mppNativeVoiceSe[96];
  sSound::NativeVoice *mppNativeVoiceStream[8];
  sSound::NativeVoice *mppNativeVoiceExternal[1];
};

struct sSound::NativeSystem
{
  int (**_vptr$NativeSystem)(void);
  u32 mUpdateThreadInterval;
  cSoundPicolaPitchShift *mpPICOLAPitchShift[4];
  bool mPICOLAPitchShiftEnable;
  s32 mPICOLAPitchShiftFreeAreaNo;
};

struct sSound::VoiceAccessor
{
  sSound::Voice *mpVoice;
};

struct rSoundSource::Descriptor
{
  u32 mChannels;
  u32 mBits;
  u32 mBitRate;
  u32 mSampleRate;
  f32 mDuration;
  u32 mFormat;
  u32 mStreamSize;
  u32 mSamples;
  u32 mLoopStart;
  u32 mLoopEnd;
  u32 mWaveSize;
  u32 mMarkerNum;
  u32 mPeriodNum;
  rSoundSource::FUNDAMENTAL_PERIOD *mpPeriod;
};

struct rSoundSource::TIMESTAMP
{
  u16 Year;
  u8 Month;
  u8 Day;
  u8 Hour;
  u8 Minute;
  u8 Second;
  u8 padding;
};

struct __cppobj __attribute__((aligned(8))) rSoundSource : cResource
{
  rSoundSource::Descriptor mDescriptor;
  u32 mFilePosition;
  void *mpBuffer;
  u32 mBufferLength;
  u32 mGlobalID;
  MtCriticalSection mCS;
  rSoundSource::SoundFile *mpFile;
  s32 mOpenCtr;
  bool mSelfAllocation;
  rSoundSource::TIMESTAMP mTimeStamp;
  u32 mVersion;
  MtDTI mDTIChild;
  rSoundSource::MARKER *mpMarker;
  u16 *mpMarkerIDToIndexTbl;
  u16 mMarkerIDToIndexTblNum;
};

struct sSound::NativeVoice
{
  int (**_vptr$NativeVoice)(void);
};

struct __cppobj rSoundBank : cResource
{
  u32 mProgramNum;
  rSoundBank::Program *mpProgramArray;
  u32 mElementNum;
  rSoundBank::Element *mpElementArray;
  u32 mBusNum;
  rSoundBank::Bus *mpBusArray;
};

struct __cppobj MtTypedArray<rSoundBank> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) rSoundRequest : cResource
{
  u8 *mpRawData;
  u32 mElementNum;
  rSoundRequest::Element *mpElement;
  void *mpSpeakerSets;
  void *mpSpeakers;
  void *mpDirectionalCurves;
  void *mpDirectionalCurveElements;
  u32 mSpeakerSetNum;
  u32 mSpeakerNum;
  u32 mDirectionalCurveNum;
  u32 mDirectionalCurveElementNum;
  MtTypedArray<rSoundBank> mBankList;
  u16 *mpReqNoToIndexTbl;
  u16 mReqNoToIndexTblNum;
};

struct rSoundStreamRequest::SoundSource
{
  MT_CTSTR mpResourcePath;
  u32 mSampleNum;
  u32 mChannelNum;
  u32 mSampleRate;
  u32 mStreamLength;
  s32 mLoopStart;
  s32 mLoopEnd;
  u32 mReadType;
  u32 mReadMode;
  u32 mDTIID;
  u32 mFormat;
  u32 mSourceIndex;
  rSoundSource *mpSource;
  rSoundStreamSourcePackage *mpStreamSourcePackage;
};

struct __cppobj MtTypedArray<rSoundSource> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) rSoundStreamRequest : cResource
{
  u8 *mpRawData;
  u32 mElementNum;
  rSoundStreamRequest::Element *mpElement;
  MtTypedArray<rSoundSource> mSourceResourceList;
  u8 *mpWave;
  rSoundStreamRequest::SoundSource *mpSoundSource;
  u32 mSourceNum;
  u32 mLoadedSize;
  void *mpSpeakerSets;
  void *mpSpeakers;
  void *mpDirectionalCurves;
  void *mpDirectionalCurveElements;
  u32 mSpeakerSetNum;
  u32 mSpeakerNum;
  u32 mDirectionalCurveNum;
  u32 mDirectionalCurveElementNum;
  rSoundStreamSourcePackage *mpStreamSourcePackage;
  u16 *mpReqNoToIndexTbl;
  u16 mReqNoToIndexTblNum;
};

enum sSound::ENTRY_COMMAND : __int32
{
  ENTRY_COMMAND_INIT = 0x0,
  ENTRY_COMMAND_REQUEST = 0x1,
  ENTRY_COMMAND_PLAY = 0x2,
  ENTRY_COMMAND_STOP = 0x3,
  ENTRY_COMMAND_PAUSE = 0x4,
  ENTRY_COMMAND_RESUME = 0x5,
  ENTRY_COMMAND_CONTROL = 0x6,
  ENTRY_COMMAND_FADE = 0x7,
};

struct sSound::_SOUND_EXTRACT_PARAM
{
  s16 ID_1;
  s16 ID_2;
  s16 ID_3;
  u16 BookingTimer;
  u8 GlobalID;
  u8 Limit;
  u8 Priority;
  u8 PriorityMode;
  u32 padding[2];
};

typedef sSound::_SOUND_EXTRACT_PARAM sSound::SOUND_EXTRACT_PARAM;

union sSound::ControlParam
{
  uintptr uParam[5];
  intptr sParam[5];
  f32 fParam[5];
  void *pParam[5];
  f32 Position[5];
  sSound::SOUND_EXTRACT_PARAM exParam;
};

struct sSound::Entry
{
  uintptr mRequestId;
  u32 mReqNo;
  uintptr mThisId;
  sSound::ENTRY_COMMAND mEntryCommand;
  u32 mEntryType;
  sSound::ControlParam mParam;
  sSound::CALLBACK_FUNC mpCallbackFunc;
  void *mpCallbackArg;
  bool mIsLink;
  void *mpNativeParam;
};

struct __cppobj __attribute__((aligned(8))) sSound::SeEntry : sSound::Entry
{
  rSoundRequest *mpRequest;
  rSoundBank *mpBank;
  u32 mProgramNo;
};

struct __cppobj __attribute__((aligned(8))) sSound::StreamEntry : sSound::Entry
{
  rSoundStreamRequest *mpStreamRequest;
  bool mEnableSilentDetection;
};

struct __cppobj sSound::EffectBase : MtObject
{
  s32 mType;
  f32 mOutputLevel;
  u32 mOutputChannelNum;
  bool mModify;
  bool mEnable;
  u32 mParameterSize;
  void *mpParameter;
  sSound::EffectUnitBase *mpEffectUnit;
};

struct __cppobj __attribute__((aligned(8))) rSoundCurveSet : cResource
{
  u32 mListNum;
  u32 mCurveNum;
  rSoundCurveSet::List *mpLists;
  rSoundCurveSet::Curve *mpCurves;
  rSoundCurveSet::Curve **mpCurveRefs;
  void *mpRawData;
  u32 mCurveDataSize;
};

struct __cppobj __attribute__((aligned(8))) rSoundDirectionalSet : cResource
{
  u32 mListNum;
  u32 mCurveNum;
  rSoundDirectionalSet::List *mpLists;
  rSoundDirectionalSet::DirectionalCurve *mpCurves;
  void *mpRawData;
  u16 *mpIdToIndexTbl;
  u16 mIdToIndexTblNum;
};

struct __attribute__((aligned(4))) rSoundReverb::HEADER
{
  u32 Magic;
  u8 Version;
  u16 ArrayNum;
  u16 OneSize;
};

struct __cppobj MtTypedArray<rSoundReverb::cSoundReverbData> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) rSoundReverb : cResource
{
  rSoundReverb::HEADER mHeader;
  MtTypedArray<rSoundReverb::cSoundReverbData> mReverb;
  u16 *mpIdToIndexTbl;
  u16 mIdToIndexTblNum;
};

enum sSound::EffectResourceWork::FADE_STATUS : __int32
{
  FADE_STATUS_IDLE_0 = 0x0,
  FADE_STATUS_START = 0x1,
  FADE_STATUS_MOVE = 0x2,
};

struct __attribute__((packed)) __attribute__((aligned(4))) sSound::EffectResourceWork:224
{
  int (**_vptr$EffectResourceWork)(void);
  u32 mId;
  sSound::EffectResourceWork::FADE_STATUS mFadeStatus;
  f32 mFadeTime;
  f32 mFadeElapsedTime;
  u32 mResourceIndex;
};

struct sSound::ReverbParameter
{
  s32 mRoom;
  s32 mRoomHF;
  f32 mDecayTime;
  f32 mDecayHFRatio;
  s32 mReflections;
  f32 mReflectionsDelay;
  s32 mReverb;
  f32 mReverbDelay;
  f32 mDiffusion;
  f32 mDensity;
  f32 mHFReference;
  f32 mEarlyReflectionScaler;
  f32 mLFreference;
  f32 mRoomLF;
};

struct sSound::REVERB_PARAMETER
{
  u32 mEffectType;
  u32 mIndex;
  bool mEnable;
  f32 mOutputLevel;
  sSound::ReverbParameter mReverbParameter;
};

struct sSound::ReverbParameterWork
{
  f32 mRoom;
  f32 mRoomHF;
  f32 mDecayTime;
  f32 mDecayHFRatio;
  f32 mReflections;
  f32 mReflectionsDelay;
  f32 mReverb;
  f32 mReverbDelay;
  f32 mDiffusion;
  f32 mDensity;
  f32 mHFReference;
  f32 mEarlyReflectionScaler;
  f32 mLFreference;
  f32 mRoomLF;
};

struct __cppobj sSound::ReverbResource::ReverbResourceWork : sSound::EffectResourceWork:224
{
  u32 mEffectIndex;
  sSound::REVERB_PARAMETER mFadeReverbParam;
  sSound::ReverbParameter mReverbParameterOrg;
  sSound::ReverbParameterWork mReverbParameterWork;
  f32 mOutputLevelOrg;
  f32 mOutputLevelWork;
};

struct __attribute__((aligned(4))) rSoundEQ::HEADER
{
  u32 Magic;
  u8 Version;
  u16 ArrayNum;
  u16 OneSize;
};

struct __cppobj MtTypedArray<rSoundEQ::cEQData> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) rSoundEQ : cResource
{
  rSoundEQ::HEADER mHeader;
  MtTypedArray<rSoundEQ::cEQData> mSoundEQ;
  u16 *mpIdToIndexTbl;
  u16 mIdToIndexTblNum;
};

struct sSound::EQParameter
{
  u32 mEnable;
  u32 mLowType;
  u32 mHighType;
  f32 mLowFreq;
  f32 mLowGain;
  f32 mLowQ;
  f32 mMidLowFreq;
  f32 mMidLowGain;
  f32 mMidLowQ;
  f32 mMidHighFreq;
  f32 mMidHighGain;
  f32 mMidHighQ;
  f32 mHighFreq;
  f32 mHighGain;
  f32 mHighQ;
};

struct sSound::EQ_PARAMETER
{
  u32 mEffectType;
  u32 mCategory;
  sSound::EQParameter mEQParameter;
};

struct sSound::EQParameterWork
{
  u32 mEnable;
  u32 mLowType;
  u32 mHighType;
  f32 mLowFreq;
  f32 mLowGain;
  f32 mLowQ;
  f32 mMidLowFreq;
  f32 mMidLowGain;
  f32 mMidLowQ;
  f32 mMidHighFreq;
  f32 mMidHighGain;
  f32 mMidHighQ;
  f32 mHighFreq;
  f32 mHighGain;
  f32 mHighQ;
};

struct __cppobj sSound::EQResource::EQResourceWork : sSound::EffectResourceWork:224
{
  sSound::EQ_PARAMETER mFadeEQParam;
  sSound::EQParameter mEQParameterOrg;
  sSound::EQParameterWork mEQParameterWork;
};

enum sGpuParticle::Context::MODE : __int32
{
  MODE_NULL = 0x0,
  MODE_BATCH = 0x1,
  MODE_BURST = 0x2,
};

enum sGpuParticle::Context::eState : __int32
{
  UNALLOCATED = 0x0,
  READY_1 = 0x1,
  NO_MEMORY = 0x2,
};

struct sGpuParticle::Context::LvCorrection
{
  f32 lv_min;
  f32 lv_max;
  s32 atten;
  MtFloat3 color_const;
};

struct __attribute__((aligned(8))) sGpuParticle::Context::DrawCtx
{
  u32 used;
  u32 drawn;
  sGpuParticle::Context::eState buffer_state;
  rTexture *p_texture;
  MtPoint tex_basepos;
  u32 tex_size;
  u32 tex_row;
  u32 tex_total;
  void *p_vtx_buffer;
  void *p_current_ptr;
  u32 vtx_buffer_ofs;
  u16 *p_idx_buffer;
  u16 *p_current_idx;
  u32 idx_buffer_ofs;
  void *p_temp_vb;
  u32 temp_vb_size;
  u16 *p_temp_ib;
  u32 temp_ib_size;
  sGpuParticle::Context::LvCorrection lv_correction;
};

struct sGpuParticle::Context
{
  int (**_vptr$Context)(void);
  sGpuParticle::Context *mpNext;
  sGpuParticle::Context *mpPrev;
  sGpuParticle::Context::MODE mMode;
  u32 mMaxCapacity;
  u32 mNewMaxCapacity;
  sGpuParticle::Context::DrawCtx mDrawCtx[6];
};

struct sGpuParticle::PacketBuffer
{
  u32 mCurrentIdx;
  u32 mCurrentIIdx;
  u32 mVBSize;
  u32 mUsedVBSize;
  u32 mVBOffset;
  nDraw::VertexBuffer *mpVB[3];
  bool mVBMapStatus[3];
  void *mpCurrentVB;
  u32 mIBSize;
  u32 mUsedIBSize;
  u32 mIBOffset;
  nDraw::IndexBuffer *mpIB[3];
  bool mIBMapStatus[3];
  u16 *mpCurrentIB;
  void *mpTempVB;
  void *mpCurrTempVB;
  u32 mTempVBSize;
  u32 mUsedTempVBSize;
  void *mpTempIB;
  u16 *mpCurrTempIB;
  u32 mTempIBSize;
  u32 mUsedTempIBSize;
};

typedef SceImeEventId SceImeEventId_0;

struct SceImeRect
{
  float x;
  float y;
  uint32_t width;
  uint32_t height;
};

typedef SceImeRect SceImeRect_0;

typedef SceImeTextAreaMode SceImeTextAreaMode_0;

struct SceImeTextAreaProperty
{
  SceImeTextAreaMode_0 mode;
  uint32_t index;
  int32_t length;
};

typedef SceImeTextAreaProperty SceImeTextAreaProperty_0;

struct SceImeEditText
{
  wchar_t *str;
  uint32_t caretIndex;
  uint32_t areaNum;
  SceImeTextAreaProperty_0 textArea[4];
};

typedef SceImeEditText SceImeEditText_0;

typedef SceImeCaretMovementDirection SceImeCaretMovementDirection_0;

struct SceRtcTick
{
  uint64_t tick;
};

typedef SceRtcTick SceRtcTick_0;

struct SceImeKeycode
{
  uint16_t keycode;
  wchar_t character;
  uint32_t status;
  SceImeKeyboardType_0 type;
  SceUserServiceUserId userId;
  uint32_t resourceId;
  SceRtcTick_0 timestamp;
};

typedef SceImeKeycode SceImeKeycode_0;

struct SceImeKeyboardResourceIdArray
{
  SceUserServiceUserId userId;
  uint32_t resourceId[5];
};

typedef SceImeKeyboardResourceIdArray SceImeKeyboardResourceIdArray_0;

typedef SceImeDeviceType SceImeDeviceType_0;

union SceImeEventParam
{
  SceImeRect_0 rect;
  SceImeEditText_0 text;
  SceImeCaretMovementDirection_0 caretMove;
  SceImeKeycode_0 keycode;
  SceImeKeyboardResourceIdArray_0 resourceIdArray;
  wchar_t *candidateWord;
  int32_t candidateIndex;
  SceImeDeviceType_0 deviceType;
  SceImePanelType panelType;
  uint32_t inputMethodState;
  int8_t reserved[64];
};

typedef SceImeEventParam SceImeEventParam_0;

struct SceImeEvent
{
  SceImeEventId_0 id;
  SceImeEventParam_0 param;
};

struct __cppobj __attribute__((aligned(8))) rVibration : cResource
{
  u8 *mpParamBuff;
  u32 mParamBuffSize;
  f32 mBaseFps;
  u32 mListNum;
};

struct __cppobj cAIObject : MtObject
{
};

struct __cppobj cAIService : cAIObject
{
  MtString mName;
  u32 mID;
  u32 mAttribute;
  MtCriticalSection mCS;
  cAIService *mpPrevService;
  cAIService *mpNextService;
};

struct __cppobj cAITaskJobPrimList : cAIObject
{
  cAITaskJobPrim *mpList;
  cAITaskJobPrim *mpListBottom;
};

struct __cppobj cAITask : cAIObject
{
  u32 mTaskResult;
  cAITaskJobPrimList mJobList;
  cAITaskJobPrim *mpCurrentJobPrimitive;
  u32 mTaskStatus;
  bool mQuitTaskLoop;
  bool mEnablePerformanceManage;
  u32 mOverloadManageType;
  f32 mPerformanceIndicator;
  f32 mTaskAllowTime;
  cAITask *mpBackgroundPrevTask;
  cAITask *mpBackgroundNextTask;
  bool mIsBackgroundTask;
  u32 mBackgroundJobType;
  MtObject *mpDoneCallbackOwner;
  MT_MFUNC mpDoneCallback;
  _BYTE gap70[8];
  s32 mLODLevel;
  nAI::TaskPerformanceInfo *mpPerformanceInfo;
};

struct __cppobj nAI::TaskPerformanceInfo : MtObject
{
  const MtDTI *mpDTI;
  u32 mOverloadManageType;
  f32 mPerformanceIndicator;
  f32 mAllowTime;
  u32 mLODNum;
  nAI::TaskPerformanceInfo::LOD *mLODList;
};

typedef std::_Tree_node<value_type,_Voidptr> *std::_Tree_node<value_type,_Voidptr>::_Nodeptr;

struct std::_Pair_base<const unsigned int,unsigned int>
{
  const unsigned int first;
  unsigned int second;
};

struct __cppobj std::pair<const unsigned int,unsigned int> : std::_Pair_base<const unsigned int,unsigned int>
{
};

struct __attribute__((aligned(8))) std::_Tree_node<value_type,_Voidptr>
{
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr _Left;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr _Parent;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr _Right;
  char _Color;
  char _Isnil;
  std::pair<const unsigned int,unsigned int> _Myval;
};

struct MtMap::Cell
{
  u32 mCrc;
  MtObject *mpObj;
  MtMap::Cell *mpNext;
};

struct MtNetPhysicalAddress
{
  u8 mData[8];
};

struct __cppobj __attribute__((aligned(8))) MtNetCore : MtNetObject
{
  MtNetObject *mpDependObject[4];
  int mNetCtlCallbackId;
  MtNetIpAddress mIpAddress;
  MtNetPhysicalAddress mPhysicalAddress;
  MtNetTime::Total mPhysicalCheckLastTime;
  bool mIsPhysicalLink;
  int mHttpNetMemId;
  bool mIsIpObtained;
};

struct MtNetRequestController::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj __attribute__((aligned(8))) MtNetRequestController : MtNetObject
{
  MtNetRequestController::Listener *mpListener;
  MtNetRequest *mpReqQueue[8];
  bool mIsNeedFinalize;
};

struct __cppobj __attribute__((aligned(4))) MtNetContext : MtNetObject, MtNetRequestController::Listener
{
  MtNetRequestController mRequestController;
  bool mIsDestructor;
  MtNetObject *mpDependObject[4];
  MtNetContext::Listener *mpListener;
  s32 mUserIndex;
  bool mIsNeedFinalize;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) MtNetObject:288 : MtObject
{
  MtCriticalSection mCS;
  bool mIsThreadSafe;
  __attribute__((aligned(4))) s32 mLockCount;
  MtNetError mFatal;
};

struct __cppobj MtNetFriendList : MtNetObject:288
{
  s32 mUserIndex;
  s32 mValidNum;
  MtNetUniqueId mUniqueId[2000];
};

struct MtNetSession::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj nNetwork::SearchKeyPtr : MtObject
{
  MtNetSessionInfo::SearchKey *mpKey;
};

struct __cppobj nNetwork::SearchKeyListPtr : MtObject
{
  MtNetSessionInfo::SearchKeyList *mpSearchKeyList;
  nNetwork::SearchKeyPtr mList[8];
};

struct __cppobj nNetwork::SessionBinaryPtr : MtObject
{
  MtNetSessionInfo::Binary *mpBinary;
};

struct MtNetSession::SearchKeyFilter
{
  s32 mTarget;
  s32 mOperator;
  MtNetSessionInfo::SearchKey mSearchKey;
};

struct MtNetSession::SearchKeyFilterList
{
  u32 mProcedureIndex;
  u32 mAttribute;
  u32 mGameType;
  u32 mGameMode;
  s32 mNumUsers;
  s32 mNum;
  MtNetSession::SearchKeyFilter mFilter[8];
};

struct __cppobj nNetwork::SearchFilterPtr : MtObject
{
  MtNetSession::SearchKeyFilter *mpFilter;
  nNetwork::SearchKeyPtr mKey;
};

struct __cppobj nNetwork::SearchFilterListPtr : MtObject
{
  MtNetSession::SearchKeyFilterList *mpList;
  nNetwork::SearchFilterPtr mList[8];
};

struct __cppobj nNetwork::SessionInfoPtr : MtObject
{
  MtNetSessionInfo *mpSessionInfo;
  nNetwork::SearchKeyListPtr mList;
  nNetwork::SessionBinaryPtr mBinary;
};

typedef void (*nNetwork::Receiver<nNetwork::SessionDriver>::RECEIVE_CALLBACK)(nNetwork::SessionDriver *, s32, const void *, u32);

struct __cppobj __attribute__((aligned(8))) nNetwork::Receiver<nNetwork::SessionDriver> : nNetwork::ReceiverBase
{
  nNetwork::Receiver<nNetwork::SessionDriver>::RECEIVE_CALLBACK mpCallback;
  _BYTE gap20[8];
};

struct __cppobj nNetwork::SessionDriver : MtObject, MtNetSession::Listener
{
  s32 mState;
  bool mDrop;
  bool mFinal;
  bool mCanHost;
  bool mCanHostOld;
  nNetwork::Session *mpParent;
  MtNetSession *mpDriver;
  u32 mCoreSeq;
  u32 mSelfSeq;
  MtNetSessionInfo::SearchKeyList mKeyList;
  nNetwork::SearchKeyListPtr mKeyListPtr;
  MtNetSessionInfo::Binary mBinary;
  nNetwork::SessionBinaryPtr mBinaryPtr;
  s32 mJoinNumMax;
  s32 mPrivateNumMax;
  s32 mSearchNumMax;
  s32 mSearchOption;
  MtNetSession::SearchKeyFilterList mKeyFilterList;
  nNetwork::SearchFilterListPtr mKeyFilterListPtr;
  MtNetSessionInfo mJoinInfo;
  nNetwork::SessionInfoPtr mJoinInfoPtr;
  MtNetTime::Total mFinalTime;
  s32 mFinalCount;
  nNetwork::Receiver<nNetwork::SessionDriver> mReceiver;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::Callback::Entry : MtObject
{
  nNetwork::ReceiverBase *mpReceiver;
  bool mBuffering;
  bool mRoute;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) nNetwork::BlockBuffer:352 : MtObject
{
  nNetwork::BlockPool *mpPool;
  void **mBlockList;
  u32 mBlockMax;
  u32 mBlockHead;
  u32 mBlockTail;
  u32 mHead;
  u32 mTail;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::BlockQueue : nNetwork::BlockBuffer:352
{
  s32 mCount;
  s32 mIndex;
  u32 mSeek;
  s32 mSeekLength;
};

struct __cppobj nNetwork::TransportQueue<nNetwork::Callback::Header,32> : nNetwork::BlockQueue
{
  void *mBlockList[32];
};

struct __cppobj __attribute__((aligned(8))) nNetwork::Callback::Queue : nNetwork::TransportQueue<nNetwork::Callback::Header,32>
{
  u32 mTotal;
  f32 mRate;
  f32 mCall;
};

struct __cppobj nNetwork::TransportQueue<nNetwork::Callback::SelfHeader,32> : nNetwork::BlockQueue
{
  void *mBlockList[32];
};

struct __cppobj nNetwork::Callback::SelfQueue : nNetwork::TransportQueue<nNetwork::Callback::SelfHeader,32>
{
  MtCriticalSection mCS;
};

struct __cppobj nNetwork::Callback : MtObject
{
  bool mBuffering;
  bool mSmoothing;
  bool mSelfBuffering;
  u32 mSelfDelay;
  u32 mSelfBufferSize;
  nNetwork::Session *mpSession;
  nNetwork::Callback::Entry mEntry[16];
  nNetwork::Callback::Queue mQueue[16];
  nNetwork::Callback::SelfQueue mSelfQueue;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::TagChecker : MtObject
{
  bool mInit;
  s32 mDst;
  u32 mTail;
  nNetwork::Session *mpSession;
  nNetwork::TagChecker::Record *mpRecordList;
  u32 mRecordSize;
  u32 mRequestList[16];
};

typedef void (*nNetwork::Receiver<nNetwork::Session>::RECEIVE_CALLBACK)(nNetwork::Session *, s32, const void *, u32);

struct __cppobj __attribute__((aligned(8))) nNetwork::Receiver<nNetwork::Session> : nNetwork::ReceiverBase
{
  nNetwork::Receiver<nNetwork::Session>::RECEIVE_CALLBACK mpCallback;
  _BYTE gap20[8];
};

struct __cppobj __attribute__((aligned(8))) nNetwork::Session : MtObject
{
  nNetwork::BlockPool *mpPool;
  nNetwork::SessionDatabase *mpDatabase;
  nNetwork::Transport *mpTransport;
  nNetwork::Connect *mpConnect;
  nNetwork::Match *mpMatch;
  nNetwork::SessionListener *mpListener[16];
  u32 mAttr;
  u32 mUserIndex;
  u32 mService;
  MtNetUniqueId mUniqueId;
  nNetwork::SessionDriver mDriver;
  nNetwork::Callback mCallback;
  nNetwork::TagChecker mTagChecker;
  MtRandom mRandom;
  nNetwork::Receiver<nNetwork::Session> mReceiver;
  MtNetError mLastError;
};

struct IStateMachineRpcReceiver
{
  int (**_vptr$IStateMachineRpcReceiver)(void);
};

struct __cppobj __attribute__((aligned(8))) cStateMachineBase : IStateMachineRpcReceiver
{
  MtMap mStateFactoryMap;
  MtArray mNextStateList;
  void *mpContext;
  f32 mStateTime;
  MtArray mStateStackArray;
  s32 mStateStackNum;
  MtArray mStateTrash;
  bool mIsStateInterrupt;
};

struct __cppobj __attribute__((aligned(8))) TStateMachine<nNetwork::nRanking::Object> : cStateMachineBase
{
};

struct MtNetRanking::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj nNetwork::nRanking::Object::DriverListener : MtNetRanking::Listener
{
  nNetwork::nRanking::Object *mpParent;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nRanking::Object : MtNetObject, TStateMachine<nNetwork::nRanking::Object>
{
  MtNetRanking *mpDriver;
  nNetwork::nRanking::Object::DriverListener mDriveListener;
  u32 mUserIndex;
  s32 mState;
  s32 mListenerNum;
  nNetwork::nRanking::Listener *mpListener[16];
  bool mListenerUse[16];
  bool mbFinal;
};

struct __cppobj nNetwork::VoiceChat::Talker : MtObject
{
  bool mInit;
  bool mLoopback;
  s32 mDst;
  u32 mTask;
  MtNetTime::Total mUpdateTime;
};

typedef void (*nNetwork::Receiver<nNetwork::VoiceChat>::RECEIVE_CALLBACK)(nNetwork::VoiceChat *, s32, const void *, u32);

struct __cppobj __attribute__((aligned(8))) nNetwork::Receiver<nNetwork::VoiceChat> : nNetwork::ReceiverBase
{
  nNetwork::Receiver<nNetwork::VoiceChat>::RECEIVE_CALLBACK mpCallback;
  _BYTE gap20[8];
};

typedef int SceVoiceQoSLocalId;

typedef int SceVoiceQoSRemoteId;

typedef int SceVoiceQoSConnectionId;

struct __cppobj nNetwork::VoiceChat : MtObject
{
  MtCriticalSection mCS;
  bool mInit;
  bool mRoute;
  bool mAutoAdd;
  bool mRestrict;
  u32 mProtocol;
  u32 mPriority;
  u32 mSessionIndex;
  nNetwork::VoiceChat::Talker mTalker[1];
  u32 mMemberId[16];
  nNetwork::Receiver<nNetwork::VoiceChat> mReceiver;
  SceUserServiceUserId mNativeUserId;
  bool mMicAttached;
  bool mMicMute;
  s32 mBitrate;
  f32 mSpeakerVolume;
  SceVoiceQoSLocalId mLocalId;
  SceVoiceQoSRemoteId mRemoteId[16];
  SceVoiceQoSConnectionId mConnectionId[16];
  MtNetTime::Total mRegLastTime;
  __attribute__((aligned(32))) u8 mVoiceMemBlock[262144];
};

typedef unsigned int DWORD;

struct nNetwork::nSharedMemory2::THREAD_INFO
{
  u32 Index;
  MT_MFUNC32 Function;
  _BYTE gap10[8];
  DWORD ID;
  HANDLE Handle;
};

struct __cppobj __attribute__((aligned(4))) nNetwork::nSharedMemory2::CConsistentHash : MtObject
{
  MtMap mCircle;
  u32 mNumberOfReplicas;
  bool mInit;
};

struct __cppobj nNetwork::SessionListener : MtObject
{
};

struct __cppobj nNetwork::nSharedMemory2::CSessionListener : nNetwork::SessionListener
{
  nNetwork::nSharedMemory2::Object *mpParent;
};

typedef std::_List_node<value_type,_Voidptr> std::_List_simple_types<value_type>::_Node;

typedef std::_List_simple_types<value_type>::_Node *std::_List_simple_types<value_type>::_Nodeptr;

typedef std::_List_simple_types<value_type>::_Nodeptr std::_List_val<_Val_types>::_Nodeptr;

typedef size_t std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::size_type;

typedef std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::size_type std::_List_val<_Val_types>::size_type;

struct __cppobj std::_List_val<_Val_types> : std::_Container_base
{
  std::_List_val<_Val_types>::_Nodeptr _Myhead;
  std::_List_val<_Val_types>::size_type _Mysize;
};

struct __cppobj std::_List_alloc<false,std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > > : std::_List_val<_Val_types>
{
};

struct __cppobj std::_List_buy<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > : std::_List_alloc<false,std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > >
{
};

struct __cppobj std::list<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > : std::_List_buy<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >
{
};

struct __cppobj MtStlList<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > : std::list<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >
{
};

struct __cppobj nNetwork::nSharedMemory2::Object : MtObject
{
  nNetwork::nSharedMemory2::THREAD_INFO mThreadInfo;
  nNetwork::nSharedMemory2::CConsistentHash mCHash;
  nNetwork::nSharedMemory2::CSessionListener mSessionListener;
  nNetwork::nSharedMemory2::CProtocol *mpProtocol;
  nNetwork::nSharedMemory2::CListener *mpListener;
  MtMap mRecordMap;
  s32 mType;
  u32 mRequestSeq;
  bool mInit;
  MtStlList<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > mLockReqList;
};

struct MtNetAchievement::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj nNetwork::nAchievement::Object::DriverListener : MtNetAchievement::Listener
{
  nNetwork::nAchievement::Object *mpParent;
};

struct __cppobj nNetwork::nAchievement::Object : MtObject, nNetwork::nAchievement::Listener
{
  nNetwork::nAchievement::Object::DriverListener mDriverListener;
  nNetwork::nAchievement::Listener *mpListener[16];
  bool mListenerUse[16];
  s32 mListenerNum;
  s32 mState;
};

struct MtNetStorage2::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj nNetwork::Storage::Closer : MtNetStorage2::Listener
{
  bool mFinal;
  bool mDrop;
  MtNetStorage2 *mpStorage;
  MtNetContext *mpContext;
};

struct __cppobj nNetwork::Storage : MtObject, MtNetStorage2::Listener
{
  bool mUnlinkComplete;
  bool mListComplete;
  bool mReadComplete;
  bool mWriteComplete;
  bool mCloseComplete;
  bool mDrop;
  bool mFinal;
  bool mClose;
  u32 mUserIndex;
  s32 mService;
  s32 mOption;
  MtNetContext *mpContext;
  s32 mState;
  u32 mDataLength;
  u32 mReqOpen;
  u32 mReqSeq;
  MtNetStorage2 *mpStorage;
  MtNetStorageList *mpList;
  MtNetError mLastError;
  nNetwork::Storage::Closer mCloser[8];
};

struct __cppobj MtNetSocket : MtNetObject
{
};

struct MtNetCom::INative
{
  int (**_vptr$INative)(void);
};

struct __cppobj MtNetCom::IRichPresence : MtNetCom::INative
{
};

typedef void *SceHttpEpollHandle;

struct __cppobj cHttpClient : MtObject
{
  MT_CHAR mRecvBuff[32768];
  u32 mScheme;
  cHttpClient::Listener *mpListener;
  s32 mRequestMethod;
  MT_STR mpRequestUrl;
  MT_CTSTR mpRequestData;
  u32 mRequestDataSize;
  u32 mRequestDataSent;
  MT_STR mpProxyServerName;
  MT_CTSTR mpUserAgentString;
  MT_CTSTR mpHeader;
  s32 mResponseHeaderSize;
  s32 mState;
  s32 mPhase;
  bool mIsReceivedHeader;
  u32 mSecurityFlags;
  u32 mRedirectPolicy;
  s32 mSocketLib;
  void *mpCertificateData;
  u32 mCertificateDataSize;
  MtString mCertificateName;
  MtNetTime::Total mTimeout;
  MtString mUrlStr;
  int mTemplateId;
  int mConnectionId;
  int mRequestId;
  SceHttpEpollHandle mEpollHandle;
  MT_CTSTR mpData;
  u32 mcData;
  s32 mLastRequestRet;
  MtNetTime::Total mReadStartTime;
};

union rGUIMessage::HASH_TABLE_NODE
{
  size_t offset;
  rGUIMessage::INDEX *pIndex;
};

struct __cppobj rGUIMessage : cResource
{
  u32 mVersion;
  u32 mLanguageId;
  t64 mUpdateTime;
  u32 mIndexNum;
  rGUIMessage::INDEX *mpIndex;
  u32 mIndexNameBufferSize;
  MT_CTSTR mIndexNameBuffer;
  u32 mMessageNum;
  MT_CTSTR mPackageName;
  u32 mBufferSize;
  MT_STR mBufferTop;
  MT_STR *mpMessage;
  rGUIMessage::HASH_TABLE_NODE mpHashTable[256];
};

struct __cppobj __attribute__((aligned(16))) uBlurFilter : uFilter:608
{
  u32 mType;
  MtVector4 mColor;
  u32 mBlurCount;
  f32 mBlurParam;
  nDraw::Texture *mpTempTexture[2];
  u32 mBlendStateType;
  nDraw::Texture *mpMaskTexture;
  f32 mNearDistance;
  f32 mAttenuation;
  MtSphere mSpheres[4];
  s32 mStencilID;
  bool mUseAlphaMask;
};

struct __cppobj __attribute__((aligned(16))) uBlurFilterExt : uBlurFilter
{
};

struct __cppobj uGUI:8512 : uCoord
{
  rGUI *mpResource;
  cGUIInstRoot *mpInstanceRoot;
  cGUIInstance **mpInstanceList;
  u8 *mpBatchMemAlloc;
  cGUIInstNull *mpInstanceNullList;
  cGUIInstScissorMask *mpInstanceScissorMaskList;
  cGUIInstAnimation *mpInstanceAnimationList;
  cGUIInstAnimVariable *mpInstanceAnimVariableList;
  cGUIInstAnimControl *mpInstanceAnimControlList;
  MtTypedArray<cGUIInstance> mUnknownInstanceArray;
  u32 mInstanceNullUseCount;
  u32 mInstanceScissorMaskUseCount;
  u32 mInstanceAnimationUseCount;
  u32 mInstanceAnimVariableUseCount;
  u32 mInstanceAnimControlUseCount;
  cGUIObjText *mpObjTextList;
  cGUIObjMessage *mpObjMessageList;
  cGUIObjChildAnimationRoot *mpObjChildAnimationRootList;
  cGUIObjNull *mpObjNullList;
  cGUIObjTextureSet *mpObjTextureSetList;
  cGUIObjTexture *mpObjTextureList;
  cGUIObjPolygon *mpObjPolygonList;
  cGUIObjScissorMask *mpObjScissorMaskList;
  cGUIObjColorAdjust *mpObjColorAdjustList;
  cGUIObjRoot *mpObjRootList;
  u8 *mpDuplicateMemAllocBuffer;
  u32 mDuplicateMemAllocBufferUsePosition;
  MtTypedArray<cGUIObject> mUnknownObjectArray;
  u32 mGUIObjTextUseCount;
  u32 mGUIObjMessageUseCount;
  u32 mGUIObjChildAnimationRootUseCount;
  u32 mGUIObjNullUseCount;
  u32 mGUIObjTextureSetUseCount;
  u32 mGUIObjTextureUseCount;
  u32 mGUIObjPolygonUseCount;
  u32 mGUIObjScissorMaskUseCount;
  u32 mGUIObjColorAdjustUseCount;
  u32 mGUIObjRootUseCount;
  cGUIVarInt *mpVarIntList;
  cGUIVarFloat *mpVarFloatList;
  MtTypedArray<cGUIVariable> mUnknownVariableArray;
  u32 mVarIntUseCount;
  u32 mVarFloatUseCount;
  MtStlVector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > mDuplicateBufferArray;
  MtStlVector<u32,MtStlAllocator<unsigned int> > mDuplicateBufferNoUseIndexArray;
  u32 mDuplicatingBufferIndex;
  bool mIsPlacementNewMode;
  u32 mProcessWorkNum;
  nGUI::PROCESS_WORK *mpProcessWork;
  nGUI::PARAM_WORK *mpProcessParamWork;
  nGUI::PARAM_WORK *mpInstExeParam;
  f32 mFramerate;
  f32 mPlayTime;
  f32 mPlayTimeOld;
  f32 mFlowFrame;
  f32 mFlowFrameOld;
  nGUI::FLOW *mpPlayingFlow;
  u32 mStackCount;
  nGUI::FLOW *mpStack[8];
  u32 mAttr;
  u32 mPriority;
  u32 mScreenLayer;
  unsigned __int32 mStencilRef : 8;
  u32 mInstanceId;
  u32 mFlowId;
  u32 mVariableId;
  s32 mProcessVariable;
  MtRect mViewSize;
  MtVector2 mAlignmentPosition[10];
  MtVector2 mResolutionAdjustScale[11];
  MtArray mVariableArray;
};

enum uGUIBase::GUI_RESULT : __int32
{
  RESULT_NONE_0 = 0x0,
  RESULT_EXIT = 0x1,
  RESULT_BASEEND = 0x2,
};

struct __attribute__((aligned(8))) uGUIBase::stMaskScroll
{
  cGUIObjMessage *mpObjMsg;
  f32 mStartFrame;
  f32 mEndWaitFrame;
  f32 mMaskWidth;
  f32 mMoveX;
  f32 mScrX;
  f32 mScrXTarget;
  u8 mRno;
};

struct __cppobj MtTypedArray<uGUIBase::cDuplicateData> : MtArray
{
};

struct __cppobj MtTypedArray<uGUIBase::cControl> : MtArray
{
};

struct __cppobj MtTypedArray<uGUIBase::cMenuDepthInfo> : MtArray
{
};

struct __cppobj uGUIBase : uGUI:8512
{
  uGUIBase::GUI_RESULT mResult;
  u32 mTfsF;
  u32 mRoutine;
  cGUIInstAnimControl *mpWaitAnimInstSlot[16];
  u32 mWaitAnimInstNum;
  void (*mpAnimEndCallBack)(uGUIBase *);
  __attribute__((aligned(16))) bool mIsFlowEnd;
  bool mIsFlowWaitMode;
  bool mIsEndLoadResource;
  bool mIsAttachedResource;
  u32 mArcTag;
  u32 mEndType;
  u32 mBaseF;
  uGUIBase::stMaskScroll mMaskScrollWork;
  TICKET mArcTicket;
  bool mSuspendFlag;
  bool mIsStopAllControl;
  uGUI *mpGUIUnit;
  MtTypedArray<uGUIBase::cDuplicateData> mDuplicates;
  rSoundRequest *mpPauseSe;
  f32 mDeltaTimeRate;
  MtTypedArray<uGUIBase::cControl> mControls;
  MtTypedArray<uGUIBase::cMenuDepthInfo> mArrayMenuDetphInfo;
  u32 mActPltStackNum;
  void (*mpCurrentFunc)(uGUIBase *);
  _BYTE gap5A0[8];
  MtCriticalSection mCS;
};

struct __cppobj __attribute__((aligned(8))) uGUIDbgPrint::stPrintInfo : MtObject
{
  bool mEnable;
  bool modify;
  cGUIInstance *mpInst;
  cGUIObject *mpObjMsg;
  cGUIObject *mpObjBack;
  MtString mText;
  MtVector3 mPos;
  MtColor mColor;
  MtColor mBColor;
  f32 mScale;
};

struct __cppobj __attribute__((aligned(16))) uGUIDbgPrint : uGUIBase
{
  rGUI *mpGUIRes;
  cGUIInstance *mpINST_Null;
  uGUIDbgPrint::stPrintInfo mPrintInfo[1024];
  bool mUpdate;
};

struct __cppobj __attribute__((aligned(8))) uGUIDbgRect::stRectInfo : MtObject
{
  bool mEnable;
  cGUIInstance *mpInst;
  cGUIObject *mpObj;
  cGUIObjPolygon *mpObjFrame[9];
  MtRect mRect;
  MtColor mColor;
  bool mFrame;
  MtColor mFColor;
};

struct __cppobj __attribute__((aligned(16))) uGUIDbgRect : uGUIBase
{
  rGUI *mpGUIRes;
  cGUIInstance *mpINST_Null;
  uGUIDbgRect::stRectInfo mRectInfo[1024];
  bool mUpdate;
};

struct __cppobj sGUIExt::cChat : MtObject
{
};

struct __cppobj MtTypedArray<sGUIExt::cMap::cMapGrid> : MtArray
{
};

struct uGUIMap;

struct cGUIFloorManager;

struct sGUIExt::cMap::$272FE048D234DFA7772892BA5C335D45::$BD25BADA7B9A5865D7655B36F1FBCD9D
{
  u8 mRno0;
  u8 mRno1;
  u8 mRno2;
  u8 mRno3;
};

union sGUIExt::cMap::$272FE048D234DFA7772892BA5C335D45
{
  sGUIExt::cMap::$272FE048D234DFA7772892BA5C335D45::$BD25BADA7B9A5865D7655B36F1FBCD9D _anon_0;
  u32 mRno;
};

struct __cppobj __attribute__((aligned(16))) sGUIExt::cMap : MtObject
{
  MtTypedArray<sGUIExt::cMap::cMapGrid> mMapGrid;
  uGUIMap *mpGUIMap;
  MtVector3 mPosCenter;
  MtVector2 mPos2Center;
  MtVector2 mPos2CenterOfs;
  MtVector2 mPos2LoadCenter;
  double mMapReducedRate;
  double mFieldReducedRate;
  double mPartsReducedRate;
  double mReducedScale;
  u32 mMapType;
  u32 mMapTypeOld;
  u32 mGridType;
  u32 mRType;
  u32 mModeMini;
  bool mVisibleMask;
  u32 mAlpha;
  TICKET mArcTicketFloor[32];
  cGUIFloorManager *mpFloorManager;
  sGUIExt::cMap::$272FE048D234DFA7772892BA5C335D45 _anon_0;
  bool mIsUsageStage;
  bool mIsFollowPlPos;
};

struct __cppobj rOccluder : cResource
{
  u32 mOccluderCount;
  rOccluder::cQuad *mpOccluder;
};

struct __cppobj sShadow::Resource : MtObject
{
  u32 mShadowMapSize;
  u32 mShadowMapType;
  nDraw::Texture *mDepthMap;
  nDraw::Texture *mTempMap;
  nDraw::Texture *mDepthStencilMap;
};

struct __cppobj __attribute__((aligned(8))) sShadow::ViewConsistentResource : MtObject
{
  u32 mShadowMapSize;
  u32 mShadowMapType;
  nDraw::Texture *mDepthMapCache;
  nDraw::Texture *mDepthStencilMapCache;
  u32 mResourceType;
  bool mUsed;
  u32 mIndex;
};

struct __cppobj __attribute__((aligned(8))) sShadow::Node : MtObject
{
  uShadow *mpShadow;
  cShadowPriorityState *mpState[8];
  sShadow::ViewConsistentResource *mpVCResource;
  bool mMark;
};

struct MtStringEx<1024>
{
  u32 mLength;
  char mStr[1024];
};

struct MtStringEx<128>
{
  u32 mLength;
  char mStr[128];
};

enum via::module::http_patch::RedirectPolicy : __int32
{
  RedirectPolicy_Never = 0x0,
  RedirectPolicy_Always = 0x1,
  RedirectPolicy_DisallowHttpsToHttp = 0x2,
  RedirectPolicy_NoSchemeChanges = 0x3,
};

struct __attribute__((aligned(4))) via::module::http_patch::ClientManager
{
  MtStringEx<1024> mAuthorityURL;
  MtStringEx<1024> mURLDirectory;
  MtStringEx<128> mUserAgent;
  MtStringEx<128> mProxyServer;
  MtStringEx<128> mVersionListName;
  MtStringEx<128> mFileListName;
  MtStringEx<128> mExeVersionFileName;
  MtStringEx<128> mSaveDirectoryName;
  via::module::http_patch::RedirectPolicy mRedirectPolicy;
  u32 mExecThreadNum;
  u32 mSecurityFlags;
  bool mAllowInsecure;
};

typedef void (*via::Request::RequestCallback)(MtObject *, void *);

typedef void (*via::Request::RequestEvent)(MtObject *, void *);

struct __cppobj via::Request : MtObject
{
  MtThread *mThreadHandle;
  MtSemaphore mSemaphore;
  via::Request::RequestCallback mCallback;
  _BYTE gap20[8];
  via::Request::RequestEvent mInitializeEvent;
  _BYTE gap30[8];
  via::Request::RequestEvent mFinalizeEvent;
  _BYTE gap40[8];
  bool mExit;
  bool mResume;
  s32 mCount;
  MtCriticalSection mMutex;
  MtObject *mObject;
  MtCriticalSection mRequest;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::http_patch::HttpPatchManager::RequestProcParam,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::HttpPatchManager::RequestProcParam,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::http_patch::HttpPatchManager::RequestProcParam,true,1> mThis;
};

typedef void (*via::RequestList<via::module::http_patch::HttpPatchManager::RequestProcParam>::RequestListUpdateEvent)(MtObject *, via::module::http_patch::HttpPatchManager::RequestProcParam *);

typedef void (*via::RequestList<via::module::http_patch::HttpPatchManager::RequestProcParam>::RequestListCallback)(MtObject *, void *, via::module::http_patch::HttpPatchManager::RequestProcParam *);

struct __cppobj __attribute__((aligned(8))) via::RequestList<via::module::http_patch::HttpPatchManager::RequestProcParam> : via::Request
{
  MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::HttpPatchManager::RequestProcParam,true,1> mList;
  via::RequestList<via::module::http_patch::HttpPatchManager::RequestProcParam>::RequestListUpdateEvent mPushCallback;
  _BYTE gap90[8];
  via::RequestList<via::module::http_patch::HttpPatchManager::RequestProcParam>::RequestListUpdateEvent mPopCallback;
  _BYTE gapA0[8];
  via::RequestList<via::module::http_patch::HttpPatchManager::RequestProcParam>::RequestListCallback mCallbackTemplate;
  _BYTE gapB0[8];
};

typedef via::RequestList<via::module::http_patch::HttpPatchManager::RequestProcParam> via::module::http_patch::HttpPatchManager::requestparamhandle_t;

struct via::module::http_patch::VersionInfo
{
  s32 normal_version;
};

enum via::module::http_patch::RequestType : __int32
{
  RequestType_None = 0x0,
  RequestType_ExeVersion = 0x1,
  RequestType_ResVersion = 0x2,
  RequestType_NormalCheck = 0x2,
  RequestType_ExeUpdate = 0x3,
  RequestType_ResUpdate = 0x4,
  RequestType_UpdateData = 0x4,
  RequestType_FullList = 0x5,
  RequestType_PurgeList = 0x6,
  RequestType_BootList = 0x7,
  RequestType_DetailedCheck = 0x8,
  RequestType_Format = 0x9,
  RequestType_MAX = 0xA,
};

struct via::module::http_patch::HttpPatchManager::$4F516AE7EE45A08E5472F154F6BB0748
{
  via::module::http_patch::VersionInfo info;
  via::module::http_patch::RequestType type;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::http_patch::ParallelsFileData,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::ParallelsFileData,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::http_patch::ParallelsFileData,true,1> mThis;
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::ParallelsFileData,true,1> via::module::http_patch::parallelfiledata_array_t;

struct __cppobj __attribute__((aligned(4))) via::module::http_patch::HttpPatchManager : MtNetObject
{
  MtCriticalSection mMutex_Period_HttpClientInit;
  s32 mHttpClientInit_Count;
  MtCriticalSection mMutex_Download_Size;
  MtString mTempDirectory;
  MtString mDownloadDirectory;
  via::module::http_patch::ClientManager mClient;
  via::module::http_patch::ResultBase *mResultPtr;
  via::module::http_patch::VersionResult *mVersionResultPtr;
  via::module::http_patch::ExeVersionResult *mExeVersionResultPtr;
  via::module::http_patch::HttpPatchManager::requestparamhandle_t mhDownloadRequest;
  via::module::http_patch::FileControlManager *mFileControlMngPtr;
  via::module::http_patch::HttpPatchManager::$4F516AE7EE45A08E5472F154F6BB0748 mAppVersion;
  MtCriticalSection mFaildListMutex;
  via::module::http_patch::parallelfiledata_array_t mFaildList;
  via::module::http_patch::parallelfiledata_array_t mFullList;
  via::module::http_patch::parallelfiledata_array_t mPurgeList;
  u32 mRetryCount;
  bool mAbortFlag;
};

struct via::HttpPatchModule
{
  __int8 gap0[1];
};

struct __attribute__((aligned(8))) via::module::http_patch::RequestParamCore
{
  MtString mAuthorityURL;
  MtString mURLDirectory;
  MtString mUserAgent;
  MtString mProxyServer;
  MtString mVersionListName;
  MtString mFileListName;
  MtString mExeVersionFileName;
  MtString mSaveDirectoryName;
  u32 mFileIORequestQueueSize;
  u32 mFileIOBlockSize;
  u32 mRedirectPolicy;
  u32 mExecThreadNum;
  u32 mSecurityFlags;
  u32 mRetryCount;
  bool mAllowInsecure;
};

struct via::module::http_patch::RequestParam
{
  int (**_vptr$RequestParam)(void);
  via::module::http_patch::RequestParamCore mParam;
};

enum via::module::http_patch::Phase : __int32
{
  Phase_None = 0x0,
  Phase_PushRequest = 0x1,
  Phase_PopRequest = 0x2,
  Phase_Request_DL_VersionList = 0x3,
  Phase_Request_DL_FullList = 0x4,
  Phase_Request_DL_PurgeList = 0x5,
  Phase_Request_FileList = 0x6,
  Phase_Wait_DL_VersionList = 0x7,
  Phase_Wait_DL_FullList = 0x8,
  Phase_Wait_DL_PurgeList = 0x9,
  Phase_Wait_FileList = 0xA,
  Phase_Request_CalcVersion = 0xB,
  Phase_Wait_CalcVersion = 0xC,
  Phase_Cheack_Version = 0xD,
  Phase_DownLoadedFileInfoLoad = 0xE,
  Phase_Request_File = 0xF,
  Phase_Wait_File = 0x10,
  Phase_Wait_FileCommand = 0x11,
  Phase_Wait_SaveVersion = 0x12,
  Phase_DetailedCheck_FileSearch = 0x13,
  Phase_DetailedCheck_CalcVersion = 0x14,
  Phase_DetailedCheck_CalcVersionEnd = 0x15,
  Phase_DetailedCheck_MakeVersionFileList = 0x16,
  Phase_DetailedCheck_MakeDownloadFileList = 0x17,
  Phase_DetailedCheck_MakeDownloadFileListEnd = 0x18,
  Phase_DetailedCheck_RemoveFile = 0x19,
  Phase_DetailedCheck_RequestDownloadFile = 0x1A,
  Phase_DetailedCheck_RequestDownloadFileEnd = 0x1B,
  Phase_BootList_FileSearch = 0x1C,
  Phase_BootList_CalcHash = 0x1D,
  Phase_BootList_CheckHash = 0x1E,
  Phase_Finish = 0x1F,
  Phase_Failed = 0x20,
  Phase_MAX = 0x21,
};

enum via::module::http_patch::Result : __int32
{
  Result_None = 0x0,
  Result_Abort = 0x1,
  Result_SuccessFinish = 0x2,
  Result_SuccessUpdateFinish = 0x3,
  Result_RebootRequire = 0x4,
  Result_ErrorRequest = 0x5,
  Result_ErrorVersionCheck = 0x6,
  Result_ErrorHDDVersion = 0x7,
  Result_ErrorVersionListDL = 0x8,
  Result_ErrorVersionListSize = 0x9,
  Result_ErrorFileListDL = 0xA,
  Result_ErrorFileListSize = 0xB,
  Result_ErrorFileDL = 0xC,
  Result_ErrorFreeSpaceFull = 0xD,
  Result_ErrorRetryCountOver = 0xE,
  Result_ErrorForceMatchedVer = 0xF,
  Result_ErrorBootList = 0x10,
  Result_ErrorPurgeList = 0x11,
  Result_ErrorFormat = 0x12,
  Result_MAX = 0x13,
};

enum HPDErrCategory : __int32
{
  HPDE_None = 0x0,
  HPDE_Http = 0x1,
  HPDE_HttpDlNotAll = 0x2,
  HPDE_Cert = 0x3,
  HPDE_Hash = 0x4,
  HPDE_Disk = 0x5,
  HPDE_Empty = 0x6,
  HPDE_MkDir = 0x7,
  HPDE_RmDir = 0x8,
  HPDE_FOpen = 0x9,
  HPDE_FRead = 0xA,
  HPDE_FWrite = 0xB,
  HPDE_FCopy = 0xC,
  HPDE_FDelete = 0xD,
  HPDE_FSignature = 0xE,
  HPDE_FVersion = 0xF,
  HPDE_FContent = 0x10,
  HPDE_NoMem = 0x11,
  HPDE_FHash = 0x12,
  HPDE_Max = 0x13,
};

struct HTTPDL_RETRY_STATUS
{
  s64 nsTimeAll;
  s64 nsTime_1;
  u32 cntLowSP;
  u32 cntDLSP;
  u32 cntTOUT;
  u32 cntNALL;
  u32 cntELSE;
  u32 cntNonSupport;
  u32 nowSleeping;
  f32 rate;
  u32 ipAdrs[8];
};

struct HTTPDL_RETRY_INFO
{
  HTTPDL_RETRY_PARAMS param;
  HTTPDL_RETRY_STATUS state;
};

struct via::module::http_patch::CnvEnumToStr
{
  __int8 gap0[1];
};

struct via::module::http_patch::ResultBase::RBPathData
{
  s32 toName;
  MT_CHAR fnPath[124];
};

struct __attribute__((aligned(8))) via::module::http_patch::ResultBase
{
  int (**_vptr$ResultBase)(void);
  via::module::http_patch::Phase mPhase;
  via::module::http_patch::Result mResult;
  HPDErrCategory mEcType;
  s32 mErCode;
  f32 mPerDLTotal;
  f32 mPerDL1File;
  f32 mPerFarExtract;
  f32 mDLSpeedUR;
  HTTPDL_RETRY_INFO mRetryInfo;
  via::module::http_patch::RequestType mRequestType;
  s64 mFailedCount;
  bool mDownloadPCRunning;
  s32 mDownloadPCstack;
  MtPerformanceTimer mDownloadPC;
  MtPerformanceTimer mReadyPC;
  MtPerformanceTimer mTotalPC;
  via::module::http_patch::CnvEnumToStr toMoji;
  via::module::http_patch::ResultBase::RBPathData mErrFPath;
  via::module::http_patch::ResultBase::RBPathData mErrF_URL;
  via::module::http_patch::ResultBase::RBPathData mDwnFPath;
  via::module::http_patch::ResultBase::RBPathData mInsFPath;
};

struct __attribute__((packed)) __attribute__((aligned(4))) via::module::http_patch::ResultBase:6176
{
  int (**_vptr$ResultBase)(void);
  via::module::http_patch::Phase mPhase;
  via::module::http_patch::Result mResult;
  HPDErrCategory mEcType;
  s32 mErCode;
  f32 mPerDLTotal;
  f32 mPerDL1File;
  f32 mPerFarExtract;
  f32 mDLSpeedUR;
  HTTPDL_RETRY_INFO mRetryInfo;
  via::module::http_patch::RequestType mRequestType;
  _BYTE gap8C[4];
  s64 mFailedCount;
  bool mDownloadPCRunning;
  __attribute__((aligned(4))) s32 mDownloadPCstack;
  MtPerformanceTimer mDownloadPC;
  MtPerformanceTimer mReadyPC;
  MtPerformanceTimer mTotalPC;
  via::module::http_patch::CnvEnumToStr toMoji;
  __attribute__((aligned(4))) via::module::http_patch::ResultBase::RBPathData mErrFPath;
  via::module::http_patch::ResultBase::RBPathData mErrF_URL;
  via::module::http_patch::ResultBase::RBPathData mDwnFPath;
  via::module::http_patch::ResultBase::RBPathData mInsFPath;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::http_patch::ExeFileInfo,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::ExeFileInfo,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::http_patch::ExeFileInfo,true,1> mThis;
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::ExeFileInfo,true,1> via::module::http_patch::exefileinfo_array_t;

struct __cppobj via::module::http_patch::ExeVersionResult : via::module::http_patch::ResultBase:6176
{
  u32 mServerVersionLauncher;
  u32 mServerVersionGameApp;
  u32 mDefineVersionLauncher;
  u32 mDefineVersionGameApp;
  via::module::http_patch::exefileinfo_array_t mExeFileInfo;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::http_patch::VersionInfo,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::VersionInfo,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::http_patch::VersionInfo,true,1> mThis;
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::VersionInfo,true,1> via::module::http_patch::versioninfo_array_t;

struct __cppobj via::module::http_patch::VersionResult : via::module::http_patch::ResultBase:6176
{
  via::module::http_patch::VersionInfo mAppVersion;
  u64 mCheckLength;
  u64 mCheckCount;
  via::module::http_patch::versioninfo_array_t mVersionList;
};

struct __cppobj via::module::http_patch::UpdateResult : via::module::http_patch::ResultBase
{
  s64 mDownloadTotalSize;
  s64 mDownloadTotalFileNum;
  s64 mDownloadSize;
  s64 mDownloadFileNum;
  s64 mDownloadedSize;
  f64 mDownloadSpeedMbps;
  s64 mDownloadLimitSize;
  MtCriticalSection mDownloadInfo;
};

struct __cppobj via::module::http_patch::ExeUpdateResult : via::module::http_patch::UpdateResult
{
};

struct __cppobj via::module::http_patch::DetailedUpdateResult : via::module::http_patch::UpdateResult
{
  size_t mCheckFileNum;
  size_t mCheckTotalFileNum;
};

struct __cppobj via::module::http_patch::FullListResult : via::module::http_patch::ResultBase
{
};

struct __cppobj via::module::http_patch::PurgeListResult : via::module::http_patch::ResultBase
{
};

struct __cppobj via::module::http_patch::BootListResult : via::module::http_patch::ResultBase
{
  size_t mCheckFileNum;
  size_t mCheckTotalFileNum;
};

struct __cppobj via::module::http_patch::SimpleResult : via::module::http_patch::ResultBase
{
};

struct __cppobj __attribute__((aligned(8))) rHDDPrefetchList : cResource
{
  rHDDPrefetchList::cPrefetchData *mpPrefetchDataArray;
  u32 mPrefetchDataNum;
};

struct __attribute__((aligned(8))) sFile::PREFETCH_LIST
{
  MT_CHAR path[80];
  sFile::PREFETCH_LIST *next;
  u32 flag;
};

struct __cppobj cPrimObj : MtObject
{
};

struct cPrim::ObjState
{
  bool use_vscr;
  rModel *p_model;
  cDraw *p_draw;
};

union nPrim::Texture::$D2D5B950EC889AFDC59EE1ACB0F604F0
{
  rTexture *p_base;
  nDraw::Texture *p_texbase;
  void *ptr;
};

struct nPrim::Texture
{
  u32 flags;
  nPrim::Texture::$D2D5B950EC889AFDC59EE1ACB0F604F0 _anon_0;
  rTexture *p_normal;
  rTexture *p_mask;
  rTexture *p_alpha;
};

struct nPrim::MetaDataHeader
{
  void *p_data[8];
};

enum cPrim::SpriteStatus : __int32
{
  NONE_1 = 0x0,
  BEGIN_SPRITE = 0x1,
  DRAW_SPRITE = 0x2,
  END_SPRITE = 0x3,
  SPRITE_ERR = 0x7FFFFFFF,
};

struct nPrim::DepthOrder::$FD3EBC34AD3D8EAD90BBD3D0F888EF26::$1FB5D138757467A5F6EC7E7395C28787
{
  unsigned __int32 subpri : 12;
  unsigned __int32 depth : 15;
  unsigned __int32 disp_lv : 5;
};

struct nPrim::DepthOrder::$FD3EBC34AD3D8EAD90BBD3D0F888EF26::$F866B70507A3A17D7870585FA15072C2
{
  unsigned __int32 pri : 27;
  unsigned __int32 pass : 5;
};

union nPrim::DepthOrder::$FD3EBC34AD3D8EAD90BBD3D0F888EF26
{
  nPrim::DepthOrder::$FD3EBC34AD3D8EAD90BBD3D0F888EF26::$1FB5D138757467A5F6EC7E7395C28787 _anon_0;
  nPrim::DepthOrder::$FD3EBC34AD3D8EAD90BBD3D0F888EF26::$F866B70507A3A17D7870585FA15072C2 _anon_1;
  u32 order;
};

struct nPrim::DepthOrder
{
  nPrim::DepthOrder::$FD3EBC34AD3D8EAD90BBD3D0F888EF26 _anon_0;
};

struct nPrim::Material::$5ACF371D77A0E56C4AFED4DB10B8093D::$CD69051BF490894011CD98B2731E48FB
{
  unsigned __int32 type : 5;
  unsigned __int32 bs_idx : 11;
  unsigned __int32 tex_handle : 10;
  unsigned __int32 transform : 4;
  unsigned __int32 pad : 2;
  u32 attribute;
};

union nPrim::Material::$5ACF371D77A0E56C4AFED4DB10B8093D
{
  nPrim::Material::$5ACF371D77A0E56C4AFED4DB10B8093D::$CD69051BF490894011CD98B2731E48FB _anon_0;
  u64 data;
};

struct nPrim::Material
{
  nPrim::Material::$5ACF371D77A0E56C4AFED4DB10B8093D _anon_0;
};

struct __attribute__((aligned(8))) cPrim::Sprite
{
  cPrim::SpriteStatus stat;
  nPrim::DepthOrder z_order;
  bool tex_changed;
  nDraw::Texture *last_tex;
  u32 last_attr;
  nPrim::Material last_mat;
  bool use_vscr;
};

struct __cppobj __attribute__((aligned(8))) cPrimTexHandle : cPrimObj
{
  nPrim::Texture *mpTexture;
  u32 mTextureNum;
  u32 mTextureSize;
  u32 mCurrentIdx;
};

struct cPrim::SmoothEdge
{
  u32 type;
  f32 min_v;
  f32 max_v;
};

struct __cppobj cPrim : cPrimObj
{
  cPrimTagList *mpPrimTagList;
  cPrimBuffer *mpPrimBuffer;
  cPrim::ObjState mStack[6];
  u32 mCurrentStack;
  __attribute__((aligned(8))) MtVector4 mViewVec;
  rModel *mpModel;
  nPrim::Texture mTexture;
  u32 mDispLevel;
  u32 mSubPriority;
  u32 mModelMaterial;
  u32 mCurrentTexHandle;
  u32 m2DModelDepth;
  s32 mModelPriorityBias;
  nPrim::MetaDataHeader mMetaData;
  void *mpMetaData;
  bool mMetaDataChanged;
  __attribute__((aligned(16))) MtMatrix mViewMatrix;
  MtMatrix mSave2DView;
  MtMatrix mSave2DProj;
  MtRect mSave2DViewport;
  MtMatrix mCurrent2DView;
  MtMatrix mCurrent2DProj;
  cPrim::Sprite mSprite;
  cPrimTexHandle mTexHandle;
  cPrim::SmoothEdge mSmoothEdge;
};

struct __attribute__((aligned(8))) cPrimTagList::IndexTag
{
  cPrimTagList::PrimTag *prim_addr;
  nPrim::DepthOrder depth;
};

struct __cppobj cPrimTexHandleManager : cPrimObj
{
  nPrim::Texture *mpTexture;
  u32 mTextureMax;
  u32 mUsedTex;
};

struct __cppobj cPrimBufferManager : cPrimObj
{
  void *mpBuffer;
  void *mpCurrentPtr;
  u32 mTotalSize;
  u32 mCurrentSize;
};

struct __cppobj cPrimTagManager : cPrimObj
{
  cPrimTagList::PrimTag *mpPrimTags;
  cPrimTagList::IndexTag *mpIndexTags;
  u32 mSize;
  u32 mNumOfTags;
};

typedef void (*nSyncPoint::SYNC_CB_PROC)(void *);

typedef void (*nSyncPoint::SYNC_CB_PROC_MT)(MtObject *, void *);

union __attribute__((aligned(16))) sSyncPoint::callbackInfo::$D881C4F76BB058E0FC339C5EB9D48710
{
  void *pProc;
  nSyncPoint::SYNC_CB_PROC pProcC;
  nSyncPoint::SYNC_CB_PROC_MT pProcMT;
};

struct __attribute__((packed)) __attribute__((aligned(8))) sSyncPoint::callbackInfo
{
  MtObject *pOwner;
  sSyncPoint::callbackInfo::$D881C4F76BB058E0FC339C5EB9D48710 _anon_0;
  void *pParam;
  u8 padding0;
  u8 padding1;
  u8 padding2;
  u8 padding3;
};

struct __cppobj __attribute__((aligned(4))) cHID : MtObject
{
  u32 mState;
  bool mEnabled;
};

struct SNJ_BROWSER_RECT
{
  int x;
  int y;
  int w;
  int h;
};

struct __attribute__((aligned(8))) SNJ_BROWSER_SYSINFO
{
  SNJ_BROWSER_RECT viw;
  unsigned int hepsiz;
  void *hepptr;
  void *d3ddev;
  void *d3dfnt[2];
  int d3dfntfmt;
  void *d3dscr;
  unsigned __int16 sysflg;
  unsigned __int16 client_type;
  void (*ntfprc)(int);
  int (*imeprcini)(const void *);
  void (*imeprcmov)(void);
  void (*imeprcdrw)(void);
  int (*errprcini)(int, int);
  void (*errprcmov)(void);
  void (*errprcdrw)(void);
  int (*jsdprcini)(const void *);
  void (*jsdprcmov)(void);
  void (*jsdprcdrw)(void);
  unsigned int (*kbdmodprc)(void);
  const int *sclsizlst;
  int sclnum;
  int sclidxdef;
  const char *usragt;
  char rootDirectory[128];
  unsigned int inpchrset;
};

typedef sce::Gnm::DataFormat SNJ_BROWSER_D3DFORMAT;

typedef sce::Gnm::Texture SNJ_BROWSER_TEXTURE;

struct SNJ_BROWSER_PS4_RENDERDEVICE
{
  bool (*CreateTexture)(int, int, SNJ_BROWSER_D3DFORMAT, SNJ_BROWSER_TEXTURE **);
  void (*ReleaseTexture)(SNJ_BROWSER_TEXTURE *);
  bool (*CreateVertexShader)(void *);
  bool (*CreateFragmentShader)(void *);
  void (*ReleaseVertexShader)(void);
  void (*ReleaseFragmentShader)(void);
  void (*SetVertexShader)(void);
  void (*SetFragmentShader)(void);
};

struct __attribute__((aligned(8))) SNJ_BROWSER_DIRECTX
{
  int tw;
  int th;
  void *dev;
  void *tex;
  void *vtxshd;
  void *pixshd;
  void *vtxdcl;
  uint32_t port_handle;
};

struct __cppobj cBrowserKeepString : MtObject
{
  MtCriticalSection mCS;
  u32 mIndex;
  u32 mKeepMaxNum;
  cBrowserKeepString::stString *mpStringBuff;
};

struct __cppobj cBrowser : MtObject
{
  SNJ_BROWSER_SYSINFO m_sysinf;
  cBrowserApplicationTask *m_brwtsk;
  SNJ_BROWSER_PS4_RENDERDEVICE m_dev;
  cBrowserRenderDevicePS4 *m_pRenderDevice;
  SNJ_BROWSER_DIRECTX m_dx;
  void *m_memptr;
  size_t m_memsiz;
  int m_ini;
  unsigned int m_flg;
  int m_dspx;
  int m_dspy;
  int m_dspw;
  int m_dsph;
  int m_texw;
  int m_texh;
  float m_vel;
  int m_accfrm;
  float mVeclocityCtr;
  float mVeclocityRate;
  u32 mValidDevice;
  cBrowserKeepString mKeepJSString;
};

struct __cppobj rTextureMemory : rTexture
{
};

struct __cppobj uScrollCollision : cUnit
{
};

struct __cppobj MtTypedArray<uScrollCollisionGeometry::cGeometryInfo> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) nCollision::cScrCommonFilter : MtObject
{
  u32 mScrType;
  u32 mScrGroup;
  u8 mScrGroupIndex;
};

struct __cppobj __attribute__((aligned(8))) nCollision::cScrCollisionMoveMatrix : MtObject
{
  bool maFlgAllocateMatrix[3];
  bool mFlgMoveEnable;
  bool mFlgMatResetSet;
  MtMatrix *mpaMatrix[3];
  MtMatrix *mpaMatrixInverse[3];
  bool mFlgFirstSet;
  bool mFlgScaleSupport;
};

struct __cppobj uScrollCollisionGeometry : uScrollCollision
{
  MtObject *mpOwner;
  MtObject *mpPlusData;
  MtTypedArray<uScrollCollisionGeometry::cGeometryInfo> mColliderGeometryArray;
  sCollision::SbcObject::cRegisterInfo *mpScrollRegisterInfo;
  __attribute__((aligned(16))) MtAABB mBoundingAABB;
  nCollision::cScrCommonFilter mScrFilter;
  nCollision::cScrCollisionMoveMatrix mScrMatrix;
  cResource *mpImportResource;
  u32 mGeometry3UseGroupIndex;
  __attribute__((aligned(8))) MtMatrix mReserveMatrix;
  bool mFlgReserveResetSet;
  bool mFlgReserveMatrixSet;
  bool mFlgAutoSync;
  bool mFlgAutoSyncEnableMove;
  MtVector3 *mpAutoSyncBeforeParentPos;
  MtQuaternion *mpAutoSyncBeforeParentQt;
  bool mFlgAlwayUpdate;
  bool mFlgUpdateOnce;
  bool mFlgStopSet;
  bool mFlgEnableOwner;
  bool mFlgOwnerUCoord;
  bool mFlgOwnerUnit;
  bool mFlgStopSetControl;
};

struct uDynamicSbc::CpuSkiningJobInfo
{
  u32 StartVertexIdx;
  u32 EndVertexIdx;
};

struct __cppobj uDynamicSbc : cUnit
{
  uModel *mpOwner;
  rDynamicSbc *mpStaticData;
  MtVector4 *mpSkinningBuffer;
  __attribute__((aligned(16))) MtAABB mBoundingAABB;
  MtVector3 *mpSkinX;
  uDynamicSbc::CpuSkiningJobInfo mCpuSkinningInfo[3];
  uDynamicSbc::cPartsInfo *mpPartsInfo;
  u32 mPartsNum;
  nCollision::cScrCommonFilter mScrFilter;
  sCollision::cSbcSkinMesh::cRegisterInfo *mpRegisterInfo;
  bool mFlgPartsActive[256];
  bool mFlgSetup;
  bool mFlgMultiThread;
};

struct __attribute__((aligned(16))) rCollision::PartsInfo
{
  MtAABB bv;
  cBVHCollision *pBvh;
  cGridCollision *pGrid;
  cGridCollisionRegistInfo *pGridRegistInfo;
  u32 LeafIndex;
  u16 LeafNum;
  u32 TriangleIndex;
  u16 TriangleNum;
  u32 VertexIndex;
  u16 VertexNum;
  u32 Id;
};

struct rCollision::Triangle
{
  MtFloat3 normal;
  u16 vert_index[3];
  u16 material_index;
  u32 attribute[1];
  u8 adjustParam[3];
  u8 reserved;
  u32 PhysicsReserved;
};

struct rCollision::Vertex
{
  f32 x;
  f32 y;
  f32 z;
  u32 attribute;
};

struct nCollision::ScrMaterialInfo
{
  u32 attribute;
  u32 attr[4];
  u32 pading[3];
};

struct __cppobj rCollision::MaterialInfo : nCollision::ScrMaterialInfo
{
};

typedef u32 (*sCollision::CONTACT_CALLBACK_HIT_PAIR_POLYGON)(MtObject *, sCollision::SbcInfo *, sCollision::ScrCollisionInfoBase *);

typedef u32 (*sCollision::CONTACT_CALLBACK_HIT)(MtObject *, const sCollision::SbcInfo *, sCollision::ScrCollisionInfoBase *);

typedef u32 (*sCollision::CONTACT_CALLBACK_MV)(MtObject *, MtGeometry *, const sCollision::SbcInfo *, sCollision::ScrCollisionInfoBase *);

typedef u32 (*sCollision::CONTACT_CALLBACK_RESET)(MtObject *, MtGeometry *, const sCollision::SbcInfo *, sCollision::ScrCollisionInfoBase *);

typedef bool (*sCollision::CONTACT_CALLBACK_BASIC_SCR)(MtObject *, const MtGeometry *, sCollision::TraverseInfo *, uScrollCollisionGeometry *, sCollision::ScrCollisionInfoBase *);

typedef u32 (*sCollision::CONTACT_CALLBACK_HEIGHTFIELD_SCR)(MtObject *, sCollision::TraverseInfo *, sCollision::ScrCollisionInfoBase *);

struct sCollision::CallbackInfoQueue
{
  sCollision::CONTACT_CALLBACK_HIT_PAIR_POLYGON mpFuncPairPolygonN;
  __attribute__((aligned(16))) sCollision::CONTACT_CALLBACK_HIT mpFuncN;
  __attribute__((aligned(16))) sCollision::CONTACT_CALLBACK_MV mpMoveFuncN;
  __attribute__((aligned(16))) sCollision::CONTACT_CALLBACK_RESET mpResetFuncN;
  __attribute__((aligned(16))) sCollision::CONTACT_CALLBACK_BASIC_SCR mpNodeFunc;
  __attribute__((aligned(16))) sCollision::CONTACT_CALLBACK_HEIGHTFIELD_SCR mpHeightFieldFunc;
};

struct __attribute__((aligned(8))) sCollision::TraverseInfo
{
  MtObject *mpOwnerObj;
  __attribute__((packed)) __attribute__((aligned(1))) sCollision::CallbackInfoQueue mCallbackStack[3];
  u32 mRegistCallbackNum;
  u32 mCallbackUseIndex;
  MtGeomAABB mTraverseConvexAABB;
  MtGeometry *mpTraverseConvex;
  sCollision::ScrCollisionInfoBase *mpCollisionInfo;
  const sCollision::Param *mpCollisionParam;
  bool mFlgBaseNormal;
  sCollision::Sbc *mpSbc;
  uDynamicSbc *mpDSbc;
  sCollision::SbcInfo *mpSbcInfo;
  u32 mDSbcPartsIndex;
  u32 mDSbcBvhID;
  bool mFlgExtendTraverseGeometry;
  MtGeometry *mpExtendTraverseGeometryOriginal;
  MtGeometry *mpExtendTraverseGeometryTransform;
  MtGeometry *mpExtendTraverseGeometryLocalSearch;
  sCollision::PreTraverseInfo *mpPreTraverseInfo;
  sCollision::TriangleInfo *mpPreHitTriangleInfo;
  bool mFlgOneHitEnd;
  u32 mWorkU32[3];
  MtObject *mWorkPtr[3];
  u32 mThreadID;
};

struct __cppobj __attribute__((aligned(8))) MtGeometry : MtObject
{
  u32 mType;
};

struct cEffectTransparency
{
  f32 mTransparency[8];
};

struct nEffect::FilterParam
{
  u32 mDrawView;
  u32 mPriority;
  u32 mRemainderFrame;
  u32 mSubPriority[3];
  u32 mForceUpdate;
  u32 mFilterParam321c;
  cEffectTransparency mTransparencyParam;
};

struct cDynamicBVHCollision::Node::$B9B188958E8216E0E3FEDE19D4F5FBC8::$82AFC1C18A7E707434F84BB7B358042E
{
  cDynamicBVHCollision::Node *mpChild[2];
};

union cDynamicBVHCollision::Node::$B9B188958E8216E0E3FEDE19D4F5FBC8
{
  cDynamicBVHCollision::Node::$B9B188958E8216E0E3FEDE19D4F5FBC8::$82AFC1C18A7E707434F84BB7B358042E _anon_0;
  MtObject *mpLeaf;
};

struct rShader2::HEADER
{
  u32 magic;
  u16 major_version;
  u16 minor_version;
  u32 shader_version;
  u32 object_num;
  MT_CHAR *string_pool;
  nDraw::OBJECT *pobjects[1];
};

struct nDraw::SHADER_INPUT
{
  SO_HANDLE layouts[4];
  u32 crc;
  u32 padding1;
  void *playout;
};

struct nDraw::SHADER_CODE
{
  unsigned __int32 reserved : 1;
  unsigned __int32 compiled : 1;
  unsigned __int32 regcount : 8;
  unsigned __int32 codesize : 22;
  u32 crc;
  void *pcode;
};

struct rShaderCache::HEADER
{
  u32 magic;
  u16 major_version;
  u16 minor_version;
  u64 id;
  u32 shader_version;
  u32 padding1;
  nDraw::SHADER_INPUT ia;
  nDraw::SHADER_CODE vs;
  nDraw::SHADER_CODE ps;
  nDraw::SHADER_CODE gs;
  nDraw::SHADER_CODE hs;
  nDraw::SHADER_CODE ds;
  nDraw::SHADER_CODE cs;
  u32 hash[5];
  u32 padding2;
  nDraw::SHADER_KEY shader_key;
};

struct rShaderPackage::CORE
{
  nDraw::SHADER_PARAM *params;
  SO_HANDLE *resources;
  nDraw::SHADER_INPUT *ia_list;
  nDraw::SHADER_CODE *vs_list;
  nDraw::SHADER_CODE *ps_list;
  nDraw::SHADER_CODE *gs_list;
  rShaderPackage::SHADER_TABLE *tables;
  rShaderPackage::SHADER_TABLE *ptable[4096];
  nDraw::SHADER shaders[1];
};

struct cSoundPicolaPitchShift
{
  u32 mAmdfWindow;
  f32 mInputBuffer[4608];
  f32 mShiftedBuffer[1536];
  u32 mMinFreq;
  u32 mMaxFreq;
  u32 mMinPeriod;
  u32 mMaxPeriod;
  u32 mChannels;
  u32 mSamplesPerFrame;
  u32 mSamplesPerFrameForResample;
  u32 mSamplesPerFrameForResampleShift;
  u32 mDegree;
  u32 mBessel;
  u32 mAlpha;
  u32 mFundamentalPeriod;
  f32 mFundamentalFrequency;
  f32 mRatio;
  s32 mCent;
  u32 mL;
  u32 mTp;
  u32 mL_Shift;
  u32 mTp_Shift;
  s32 mGap;
  s32 mCount;
  u32 mCrossCount;
  f32 mResidueSamples;
  f32 mStackingResidueSamples;
  u32 mOffsetInput;
  u32 mOffsetShift;
  u32 mOffsetCalc;
  u32 mLoopCounter;
  s32 mSamples;
  u32 mPeriodNum;
  rSoundSource::FUNDAMENTAL_PERIOD *mpPeriod;
  bool mLoop;
  u32 mLoopStart;
  u32 mLoopEnd;
  cSoundPicolaPitchShift::Resample *mpResample;
  cSoundPicolaPitchShift::Resample *mpResampleArray[25];
  u32 mIndex;
  u32 mLatencyFlames;
  bool mIsProcess;
  MtCriticalSection mProcessSection;
};

struct __attribute__((aligned(16))) sSound::Voice
{
  int (**_vptr$Voice)(void);
  sSound::VOICE_STATUS mStatus;
  sSound::VOICE_COMMAND mVoiceCommand;
  uintptr mRequestId;
  u32 mReqNo;
  uintptr mThisId;
  u32 mGlobal;
  s32 mID_1;
  s32 mID_2;
  s32 mID_3;
  u32 mPriority;
  u32 mPrioMode;
  u32 mLimit;
  u32 mRequestCount;
  u32 mCategory;
  __attribute__((aligned(8))) MtVector3 mPosition;
  MtVector3 mPositionOffset;
  MtQuaternion mQuaternion;
  uCoord *mpCoord;
  s32 mJointNo;
  f32 mVolume;
  s32 mPan;
  s32 mPitch;
  f32 mRatioVolume;
  f32 mRatioEffectVolume;
  f32 mReverbSendLevel;
  u32 mChannelNum;
  s32 mVolumeCurveId;
  s32 mEffectCurveId;
  s32 mDirectionalCurveId;
  u32 mBookingTimer;
  s32 mLink;
  u32 mPauseStatus;
  sSound::REQUEST_TYPE mRequestType;
  f32 mFinalPitch;
  sSound::CALLBACK_FUNC mpCallbackFunc;
  void *mpCallbackArg;
  intptr mWorkArea[2];
  f32 mExternalVolume;
  f32 mExternalEffectVolume;
  sSound::Voice::VOICE_TYPE mVoiceType;
  u32 mVoiceIndex;
  u32 mStartTime;
  u32 mPauseStartTime;
  u32 mDelayTime;
  unsigned __int32 mPlay : 1;
  unsigned __int32 mForceUpdate : 1;
  unsigned __int32 mDynamicVolume : 1;
  unsigned __int32 mDynamicPitch : 1;
  unsigned __int32 mFilterEnable : 1;
  unsigned __int32 mFilterType : 3;
  f32 mFilterFreq;
  f32 mFilterGain;
  f32 mFilterQ;
  f32 mFinalFilterFreq;
  bool mIsUpdateVolume;
  bool mUpdateVolumeTrigger;
  f32 mEffectSendLevel[8];
  f32 mLFEVolume;
  f32 mRatioLFEVolume;
  u32 mCenterVolume;
  s32 mLFECurveId;
  s32 mEqNo;
  s32 mEqEffectNo;
  s32 mListeningIndexBit;
  f32 mDistance[4][8];
  f32 mSurroundVolume[8][8];
  f32 mPannerGains[8][4][8];
  f32 mInterleavedDataVolume[8];
  f32 mIntersectVolume[4][8];
  f32 mExternalLFEVolume;
  f32 mDopplerScaler;
  s32 mDopplerEffect;
  f32 mInteriorDistance;
  void *mpSpeakerSet;
  MtVector3 mSpeakerPosition[4][8];
  f32 mSpeakerDirectionalIntensity[4][8];
  f32 mExtraVolume;
  f32 mExtraPitch;
  s8 mExtraPan;
  f32 mExtraFilterFreq;
  unsigned __int32 mEffectNo : 3;
  void *mpNativeParam;
  rSoundSource *mpSource;
  sSound::NativeVoice *mpNativeVoice;
  unsigned __int32 mVoiceNum : 3;
  unsigned __int32 mMidi : 1;
  unsigned __int32 mVSurroundBypass : 1;
  u32 padding;
};

struct rSoundSource::FUNDAMENTAL_PERIOD
{
  u32 samples;
  u32 period;
};

struct __cppobj MtFileStream : MtStream
{
  MtFile *mpFile;
};

struct __cppobj rSoundSource::SoundFile : MtFileStream
{
  MtFile mFile;
};

struct rSoundSource::MARKER
{
  u8 ID;
  u8 padding[3];
  u32 sample;
};

struct __attribute__((aligned(8))) rSoundBank::Program
{
  unsigned __int32 mProgramNumber : 16;
  unsigned __int32 mMonophonic : 1;
  unsigned __int32 mElementNum : 10;
  unsigned __int32 mHistoricalRandom : 1;
  unsigned __int32 mPadding : 4;
  rSoundBank::Element *mpElements;
  unsigned __int32 mRandomAmount : 24;
  unsigned __int32 mOutputBus : 8;
};

struct rSoundBank::Element
{
  rSoundSource *mpSource;
  u32 mDTIID;
  u8 mOscillator;
  u8 mAttribute;
  u8 mAttribute2;
  u8 mAlternateGroup;
  u8 mRandomTrigger;
  u8 mLevel;
  u8 mRandomLevelLow;
  u8 mRandomLevelHigh;
  s8 mPan;
  s8 mRandomPanLeft;
  s8 mRandomPanRight;
  u8 mLinkGroup;
  s16 mPitch;
  s16 mRandomPitchLow;
  s16 mRandomPitchHigh;
  u16 mDelayTime;
  u8 mVelocityLowRange;
  u8 mVelocityHighRange;
  u8 mVelocityLowLevel;
  u8 mVelocityHighLevel;
  MtEaseCurve mVelocityCurve;
  u16 mAEGAttackTime;
  u16 mAEGDecayTime;
  s16 mAEGSustainRate;
  u16 mAEGReleaseTime;
  u16 mPEGAttackTime;
  u16 mPEGDecayTime;
  s16 mPEGSustainRate;
  u16 mPEGReleaseTime;
  u8 mAEGSustainLevel;
  s8 mAEGRateScaling;
  s8 mAEGRateVelocitySens;
  s8 mPEGInitialLevel;
  s8 mPEGAttackLevel;
  s8 mPEGSustainLevel;
  s8 mPEGReleaseLevel;
  s8 mPEGRateScaling;
  s8 mPEGRateVelocitySens;
  s8 mPEGRange;
  u16 mRandomValueLow;
  u16 mRandomValueHigh;
  u8 mFilterType;
  u8 mFilterQ;
  s16 mFilterGain;
  u16 mFilterFreq;
  u16 mRandomFilterFreqRange;
  s8 mFilterFreqVelocitySens;
  u8 mOriginalKey;
  u8 mLowKey;
  u8 mHighKey;
  u16 mFlangingTime;
};

struct rSoundBank::Bus
{
  f32 mLevel;
  u8 mBusNo;
  u8 mPadding;
  s16 mPitch;
};

struct rSoundRequest::Element
{
  u16 mReqNo;
  u8 mKey;
  u8 mVelocity;
  u32 mCategory;
  u32 mCommand;
  u8 mGlobal;
  u8 pad_01;
  s16 mID_1;
  s16 mID_2;
  s16 mID_3;
  u8 mPriority;
  u8 mPrioMode;
  s16 pad_02;
  u32 mLimit;
  s16 mLink;
  s16 mProgramNo;
  s16 mPan;
  s16 pad_04;
  f32 mVol;
  f32 mEffectSend;
  s32 mPitchShift;
  u32 mDelayTimer;
  u32 mBookingTimer;
  s32 mVolumeCurveID;
  s32 mEffectCurveID;
  s32 mDirectionalCurveID;
  u32 mFreeArea00_07;
  u8 mFreeArea08;
  u8 mFreeArea09;
  u8 mFreeArea10;
  u8 mFreeArea11;
  s16 mFreeArea12;
  s16 mFreeArea13;
  s16 mFreeArea14;
  s16 mFreeArea15;
  s32 mBankFileNameTableIndex;
  rSoundBank *mpBank;
  cResource *mpPackage;
  f32 mLFESend;
  s32 mLFECurveID;
  u32 mCenterVolume;
  s16 mEqNo;
  s16 mEqEffectNo;
  s16 mEffectNo;
  s16 pad_03;
  f32 mInteriorDistance;
  f32 mDopplerScaler;
  s32 mSpeakerSetIndex;
  void *mpSpeakerSet;
};

struct __cppobj __attribute__((aligned(8))) rSoundStreamSourcePackage : rSoundSource
{
};

struct rSoundStreamRequest::Element
{
  u16 mReqNo;
  s16 pad_0;
  u32 mCategory;
  u32 mCommand;
  u32 mReadType;
  u8 mGlobal;
  u8 pad_01;
  s16 mID_1;
  s16 mID_2;
  s16 mID_3;
  u8 mPriority;
  u8 mPrioMode;
  s16 pad_02;
  u32 mLimit;
  s16 mLink;
  s16 mPan;
  f32 mVol;
  f32 mEffectSend;
  s32 mPitchShift;
  u32 mDelayTimer;
  u32 mBookingTimer;
  s32 mVolumeCurveID;
  s32 mEffectCurveID;
  s32 mDirectionalCurveID;
  u32 mTime;
  u32 mKillTime;
  u32 mFreeArea00_07;
  u8 mFreeArea08;
  u8 mFreeArea09;
  u8 mFreeArea10;
  u8 mFreeArea11;
  s16 mFreeArea12;
  s16 mFreeArea13;
  s16 mFreeArea14;
  s16 mFreeArea15;
  s32 mSrcFileNameTableIndex;
  u32 mDiskLocation;
  f32 mLFESend;
  u32 mCenterVolume;
  s32 mLFECurveID;
  s16 mEqNo;
  s16 mEqEffectNo;
  s16 mEffectNo;
  s16 pad_03;
  f32 mInteriorDistance;
  f32 mDopplerScaler;
  s32 mSpeakerSetIndex;
  void *mpSpeakerSet;
  rSoundStreamRequest::SoundSource *mpSource;
};

struct sSound::EffectUnitBase
{
  int (**_vptr$EffectUnitBase)(void);
};

struct rSoundCurveSet::List
{
  s16 mID;
  s16 mVolumeCurve;
  s16 mEffectSendCurve;
  s16 mLFECurve;
};

struct rSoundCurveSet::Curve
{
  u32 mElementNum;
  f32 mMaxDistance;
  f32 mZeroDistValue;
  f32 mMaxDistValue;
};

struct rSoundDirectionalSet::List
{
  u32 mID;
  u32 mPadding;
  rSoundDirectionalSet::DirectionalCurve *mpCurve;
};

struct rSoundDirectionalSet::DirectionalCurve
{
  u32 mElementNum;
  f32 mZeroRadianValue;
  f32 mPiRadianValue;
  u32 mPadding;
  rSoundDirectionalSet::Element *mpElementData;
};

typedef void (*cAITaskJobPrim::JOB_FUNC)(MtObject *);

struct __cppobj cAITaskJobPrim : cAIObject
{
  u32 mType;
  u32 mJobId;
  cAITask *mpOwner;
  cAITaskJobPrim::JOB_FUNC mJobFunc;
  _BYTE gap20[8];
  cAITaskJobPrim *mpNext;
};

struct __cppobj __attribute__((aligned(8))) nAI::TaskPerformanceInfo::LOD : MtObject
{
  bool mEnablePerformanceManage;
  f32 mPerformanceIndicator;
  u32 mOverloadManageType;
};

struct __cppobj __attribute__((aligned(4))) MtNetRequest : MtNetObject:288
{
  s32 mId;
  u32 mSequence;
  s32 mStatus;
  s32 mArgumentNum;
  uintptr mpArgument[8];
  s32 mPointerNum;
  void *mpPointer[8];
  s32 mPhase;
  MtNetTime::Total mStartTime;
  MtNetTime::Total mLimitTime;
  bool mIsAbort;
  bool mIsNeedAnswer;
  bool mIsFinalize;
  bool mIsReentrant;
  bool mIsMove;
};

struct MtNetSession::SearchResult
{
  MtNetSessionInfo mSessionInfo;
  MT_CHAR mName[32];
  MtNetUniqueId mUniqueId;
};

struct MtNetSession::SearchResultList
{
  s32 mNum;
  MtNetSession::SearchResult mResult[32];
};

struct MtNetSession::Ping
{
  MtNetTime::Total mRtt;
};

struct __cppobj nNetwork::SearchResultPtr : MtObject
{
  MtNetSession::SearchResult *mpSearchResult;
  nNetwork::SessionInfoPtr mInfo;
  MT_CTSTR mName;
  MtNetSession::Ping mPing;
};

struct __cppobj nNetwork::SearchResultListPtr : MtObject
{
  MtNetSession::SearchResultList *mpSearchResultList;
  nNetwork::SearchResultPtr mResult[32];
};

struct nNetwork::Member::$FAB0B30ECAF7706C1B093D84F71AEAD4::$6653328F540F63CFB439FB8D373ABDEB
{
  unsigned __int32 mAttribute : 16;
  unsigned __int32 mGroup : 16;
};

union nNetwork::Member::$FAB0B30ECAF7706C1B093D84F71AEAD4
{
  u32 mConfiguration;
  nNetwork::Member::$FAB0B30ECAF7706C1B093D84F71AEAD4::$6653328F540F63CFB439FB8D373ABDEB _anon_0;
};

struct __attribute__((aligned(8))) MtNetSession::Member
{
  bool mIsValid;
  MtNetUniqueId mUniqueId;
  MT_CHAR mName[32];
  bool mIsOmittedName;
  bool mIsHost;
  bool mIsPrivate;
};

struct __cppobj nNetwork::Member : MtObject
{
  u32 mId;
  u32 mTag;
  s32 mRouteIndex;
  nNetwork::Member::$FAB0B30ECAF7706C1B093D84F71AEAD4 _anon_0;
  MtNetTime::Total mTalkTime;
  MtNetTime::Total mJoinTime;
  u8 mConfig[64];
  MtNetSession::Member mInfo;
};

typedef uint16_t SceNpMatching2ContextId;

typedef uint16_t SceNpMatching2RoomMemberId;

struct MtNetP2pConnectInfo
{
  MtNetAddress mAddress;
  MtNetPort mPortP2p;
  SceNpMatching2ContextId mNpMatchingCtxId;
  SceNpMatching2RoomId mNpMatchingRoomId;
  SceNpMatching2RoomMemberId mNpMatchingRoomMemberId;
  u32 mMtNetSessionNonce;
};

struct nNetwork::Route::Rate::Record
{
  u32 mTotal;
  u32 mCount;
};

struct nNetwork::Route::Rate
{
  nNetwork::Route::Rate::Record mRecord[8];
  u32 mTotalLength;
  u32 mTotalCount;
  s32 mWait;
  u32 mHead;
  u32 mRate;
  u32 mIval;
};

struct nNetwork::Route::RTT
{
  u8 mRttHistory[64];
  u8 mRttHistogram[64];
  u32 mRttQ1;
  u32 mRttQ2;
  u32 mRttQ3;
  u32 mRtt;
  u32 mIqr;
  u32 mCount;
};

struct nNetwork::Route::RecvLoss::Record
{
  u32 mStart;
  u32 mCount;
};

struct nNetwork::Route::RecvLoss
{
  nNetwork::Route::RecvLoss::Record mRecord[8];
  u32 mTotalCount;
  u32 mStart;
  u32 mLast;
  u32 mBase;
  u32 mHead;
  f32 mLoss;
};

struct nNetwork::Route::SendLoss
{
  f32 mRecord[8];
  f32 mLoss;
  f32 mBase;
  u32 mHead;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::Route : MtObject
{
  MtNetError mFatal;
  u32 mFatalElapse;
  MtCriticalSection mCS;
  MtNetUniqueId mUniqueId;
  MtNetP2pConnectInfo mConnectInfo;
  u32 mReqSession;
  u32 mReqPeer;
  s32 mPeerId;
  s32 mMemberIndex;
  u32 mRouteKey;
  u32 mPeerSendElapse;
  u32 mPeerRecvElapse;
  u32 mPeerAckElapse;
  s32 mLinkStateWait;
  s32 mHealthCheckWait;
  MtNetTime::Total mSearchTime;
  MtNetTime::Total mConnectTime;
  bool mPeerEnable;
  bool mActive;
  bool mReady;
  bool mAbort;
  u8 mInitConfig[64];
  s32 mDirectIndex;
  u32 mRecvHop;
  nNetwork::Route::Rate mSendRate;
  nNetwork::Route::Rate mRecvRate;
  u32 mSendElapse;
  u32 mRecvElapse;
  u32 mSendSequence;
  u32 mRecvSequence;
  u32 mBroadcastSequence;
  u32 mTag;
  u32 mSendCount;
  u32 mSendLastSeq;
  u32 mRecvCount;
  u32 mRecvLastSeq;
  nNetwork::Route::RTT mRtt;
  nNetwork::Route::RecvLoss mRecvLoss;
  nNetwork::Route::SendLoss mSendLoss;
  u32 mQueueDelay;
  u32 mQueueDelayNext;
  u32 mBandwidth;
  f32 mUtilization;
  u32 mPriority;
  u32 mRecoveryTime;
  u32 mMtu;
  s32 mIncWait;
  s32 mDecWait;
  u32 mDecLevel;
  s32 mSendWait;
  s32 mUpdateWait;
  u32 mSendTotal;
};

struct nNetwork::SessionDatabase::KeyHistory
{
  u32 mKey[128];
  u32 mHead;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::SessionDatabase : MtObject
{
  MtNetSession::SearchResultList mSearchResultList;
  nNetwork::SearchResultListPtr mSearchResultListPtr;
  MtNetSessionInfo mSessionInfo;
  nNetwork::SessionInfoPtr mSessionInfoPtr;
  nNetwork::Member mMemberList[16];
  nNetwork::Route mRouteList[16];
  s32 mHostIndex;
  s32 mSelfIndex;
  u32 mAttribute;
  u32 mSelfKey;
  u8 mConfig[64];
  nNetwork::SessionDatabase::KeyHistory mKeyHistory;
  nNetwork::Route::Rate mSendBroadcast;
  nNetwork::Route::Rate mRecvBroadcast;
};

struct __cppobj nNetwork::Transport::ForwardQueue : nNetwork::BlockQueue
{
  void *mBlockList[4];
  s32 mRouteIndex;
  u32 mRouteKey;
  u32 mPriority;
  u32 mInterval;
  MtNetTime::Total mLastSend;
};

struct __cppobj nNetwork::Transport : MtObject
{
  nNetwork::Session *mpSession;
  nNetwork::Protocol *mpProtocol[4];
  nNetwork::Transport::ForwardQueue mForwardQueue[8];
  bool mFastTransfer;
  u32 mBandwidthMin;
  u32 mBandwidthMax;
  u32 mBandwidthStart;
  u32 mBandwidthTarget;
  u32 mIntervalMin;
  u32 mIntervalMax;
  u32 mBroadcastSendSequence;
  MtNetTime::Total mLastTime;
};

struct MtNetP2p::Listener
{
  int (**_vptr$Listener)(void);
};

typedef void (*nNetwork::Receiver<nNetwork::Connect>::RECEIVE_CALLBACK)(nNetwork::Connect *, s32, const void *, u32);

struct __cppobj __attribute__((aligned(8))) nNetwork::Receiver<nNetwork::Connect> : nNetwork::ReceiverBase
{
  nNetwork::Receiver<nNetwork::Connect>::RECEIVE_CALLBACK mpCallback;
  _BYTE gap20[8];
};

struct __cppobj nNetwork::Connect : MtObject, MtNetP2p::Listener
{
  nNetwork::Session *mpSession;
  MtNetP2p *mpP2p;
  s32 mReqNum;
  bool mNeedP2pCheck;
  bool mNeedDetour;
  nNetwork::Receiver<nNetwork::Connect> mReceiver;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::Match : MtObject
{
  nNetwork::Session *mpSession;
  bool mEntry;
  bool mMatch;
  bool mTerminate;
};

struct __cppobj __attribute__((aligned(4))) MtNetSession : MtNetObject, MtNetRequestController::Listener
{
  MtNetContext *mpContext;
  MtNetRequestController mRequestController;
  bool mIsDestructor;
  MtNetSession::Listener *mpListener;
  s32 mPhaseAutoFinalize;
  bool mIsNeedFinalize;
};

struct nNetwork::TagChecker::Record
{
  s32 mMemberIndex;
  u32 mMemberId;
  u32 mLocal;
  u32 mOther;
  u32 mCheckList;
  u32 mOtherList;
};

union MtNetRanking::ScoreOption::$B33897847108AB00AEFDEBFA6A52B891
{
  s8 mInt8;
  s16 mInt16;
  s32 mInt32;
  s64 mInt64;
  f32 mFloat32;
  f64 mFloat64;
  u64 mTime;
};

struct MtNetRanking::ScoreOption
{
  u8 mKind;
  MtNetRanking::ScoreOption::$B33897847108AB00AEFDEBFA6A52B891 _anon_0;
};

struct __cppobj MtNetRanking::Score : MtNetObject
{
  MtNetUniqueId mUniqueId;
  MT_CHAR mName[32];
  bool mIsOmittedName;
  s32 mRank;
  s64 mValue;
  s32 mOptionNum;
  MtNetRanking::ScoreOption mOption[8];
};

struct __cppobj MtNetRanking::ScoreList : MtNetObject:288
{
  s32 mBoardId;
  s32 mOffset;
  s32 mNum;
  s32 mRegistNum;
  MtNetRanking::Score mScore[101];
};

struct SceNpScoreComment
{
  char utf8Comment[64];
};

typedef SceNpScoreComment SceNpScoreComment_0;

struct SceNpScoreGameInfo
{
  size_t infoSize;
  uint8_t data[189];
  uint8_t pad2[3];
};

typedef SceNpScoreGameInfo SceNpScoreGameInfo_0;

typedef uint32_t SceNpScoreRankNumber;

struct __attribute__((aligned(8))) MtNetRanking::RegisterRequest
{
  int scoreId;
  int attachId;
  s32 result;
  SceNpScoreComment_0 comment;
  SceNpScoreGameInfo_0 gameInfo;
  SceNpScoreRankNumber tempRank;
};

struct MtNetRanking::Attach
{
  s32 mSize;
  void *mpData;
};

struct SceNpOnlineId
{
  char data[16];
  char term;
  char dummy[3];
};

typedef SceNpOnlineId SceNpOnlineId_0;

struct SceNpId
{
  SceNpOnlineId_0 handle;
  uint8_t opt[8];
  uint8_t reserved[8];
};

typedef SceNpId SceNpId_0;

typedef int32_t SceNpScorePcId;

typedef int64_t SceNpScoreValue;

struct SceNpScoreRankData
{
  SceNpId_0 npId;
  uint8_t reserved[49];
  uint8_t pad0[3];
  SceNpScorePcId pcId;
  SceNpScoreRankNumber serialRank;
  SceNpScoreRankNumber rank;
  SceNpScoreRankNumber highestRank;
  int32_t hasGameData;
  uint8_t pad1[4];
  SceNpScoreValue scoreValue;
  SceRtcTick_0 recordDate;
};

typedef SceNpScoreRankData SceNpScoreRankData_0;

struct SceNpScorePlayerRankData
{
  int32_t hasData;
  uint8_t pad0[4];
  SceNpScoreRankData_0 rankData;
};

typedef SceNpScorePlayerRankData SceNpScorePlayerRankData_0;

struct __cppobj MtNetRanking : MtNetObject, MtNetRequestController::Listener
{
  MtNetContext *mpContext;
  MtNetRequestController mRequestController;
  MtNetRanking::Listener *mpListener;
  s32 mPhaseAutoFinalize;
  bool mIsDestructor;
  MtNetRanking::ScoreList mScoreList;
  int mScoreContextId;
  MtNetRanking::RegisterRequest mRegisterRequestTbl[6];
  MtNetRanking::Attach mAttach;
  s32 mRequestId;
  __attribute__((aligned(8))) SceNpId_0 mRequestNpIdTbl[101];
  s32 mGetRequestNum;
  s32 mGetResultNum;
  SceNpScoreRankData_0 mGetRankData[101];
  SceNpScorePlayerRankData_0 mGetPlayerRankData[101];
  SceNpScoreComment_0 mGetComment[101];
  SceNpScoreGameInfo_0 mGetGameInfo[101];
  SceNpScoreRankNumber mGetTotalRec;
  SceRtcTick_0 mGetLastDate;
  size_t mGetAttachSize;
};

struct nNetwork::nRanking::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj __attribute__((aligned(4))) nNetwork::nSharedMemory2::CProtocol : MtObject
{
  nNetwork::nSharedMemory2::Object *mpParent;
  u32 mCallbackIndex;
  bool mInit;
};

struct __cppobj nNetwork::nSharedMemory2::CListener : MtObject
{
};

typedef std::_List_node<value_type,_Voidptr> *std::_List_node<value_type,_Voidptr>::_Nodeptr;

struct nNetwork::nSharedMemory2::Object::ReqLock
{
  MtString mKey;
  s32 mSrc;
  u32 mReqSeq;
};

struct std::_List_node<value_type,_Voidptr>
{
  std::_List_node<value_type,_Voidptr>::_Nodeptr _Next;
  std::_List_node<value_type,_Voidptr>::_Nodeptr _Prev;
  nNetwork::nSharedMemory2::Object::ReqLock _Myval;
};

struct __cppobj __attribute__((aligned(4))) MtNetStorage2 : MtNetObject, MtNetRequestController::Listener
{
  MtNetContext *mpContext;
  MtNetRequestController mRequestController;
  bool mIsDestructor;
  MtNetStorage2::Listener *mpListener;
  s32 mPhaseAutoFinalize;
  bool mIsNeedFinalize;
};

typedef int SceNpTusSlotId;

struct __attribute__((aligned(8))) MtNetStorageInfo
{
  int (**_vptr$MtNetStorageInfo)(void);
  MT_CHAR mFileName[256];
  MtNetUniqueId mUniqueId;
  MtTime mLastModified;
  SceNpTusSlotId mSlotNo;
};

struct MtNetStorageList
{
  int (**_vptr$MtNetStorageList)(void);
  s32 mNum;
  MtNetStorageInfo mInfo[64];
};

union rGUIMessage::INDEX::$49FFD05AB7213A49F1B9190D59B6B6DB
{
  size_t offset;
  MT_CTSTR pName;
};

union rGUIMessage::INDEX::$940E0FBFC4B8E761F9F4DDBA8A849F35
{
  size_t linkOffst;
  rGUIMessage::INDEX *pLink;
};

struct rGUIMessage::INDEX
{
  unsigned __int32 index : 31;
  unsigned __int32 isSameHashDiffName : 1;
  u32 hashA;
  u32 hashB;
  u32 padding;
  rGUIMessage::INDEX::$49FFD05AB7213A49F1B9190D59B6B6DB _anon_0;
  rGUIMessage::INDEX::$940E0FBFC4B8E761F9F4DDBA8A849F35 _anon_1;
};

struct __cppobj rOccluder::cQuad : MtObject
{
  __attribute__((aligned(16))) MtVector3 mQuad[4];
  bool mActive;
  bool mEnable;
};

struct uShadow::DynamicState
{
  u32 mShadowGroup;
  f32 mShadowDepthBias;
  f32 mShadowSlopeScaledDepthBias;
  f32 mShadowViewDistance;
  f32 mNearClipDistance;
  f32 mAlphaThreshold;
  f32 mBorderGradation;
};

struct __cppobj uShadow : cUnit
{
  nDraw::Texture *mpDepthMap;
  nDraw::Texture *mpTempMap;
  nDraw::Texture *mpDepthTempMap;
  nDraw::Texture *mpDepthStencil;
  nDraw::Texture *mpDepthMapCache;
  nDraw::Texture *mpDepthStencilCache;
  f32 mShadowViewDistance;
  __attribute__((aligned(16))) MtVector4 mShadowViewSize;
  f32 mBackforwardViewDistance;
  u32 mShadowType;
  u32 mShadowMapType;
  uLight *mpTargetLight;
  bool mTargetLightEnable;
  u32 mMapSize;
  bool mStandBy;
  bool mInitialized;
  bool mComparisonEnable;
  bool mDrawEnable;
  f32 mShadowAttn;
  f32 mGaussianFilterWeights[11];
  f32 mDispersion;
  u32 mShadowGroup;
  f32 mShadowDepthBias;
  f32 mShadowSlopeScaledDepthBias;
  f32 mShadowDistanceScaledDepthBias;
  f32 mNearClipDistance;
  f32 mAlphaThreshold;
  f32 mBorderGradation;
  u32 mPCFType;
  u32 mVSMBlurType;
  f32 mPmaxPower;
  f32 mVarianceEpsilon;
  nDraw::RasterizerState *mpRasterizerState[3];
  nDraw::RASTERIZER_DESC mRasterizerDesc[3];
  u32 mManagedType;
  f32 mPriorityBias;
  uintptr mCacheID;
  uintptr mCacheIDOffset;
  bool mLimitRangeEnable;
  bool mMappedToLight;
  bool mDeferredShadow;
  bool mValidShadowMapCache;
  bool mShadowMapCacheEnable;
  bool mDrawCache;
  u32 mCacheCounter;
  u32 mShadowMapCacheSceneHash;
  uShadow::DynamicState mStateCache;
  u32 mMapSizeOriginal;
  f32 mShadowViewDistanceOriginal;
  bool mIsPS3Disable;
  bool mIsPS4Disable;
  bool mIsPCDisable;
};

struct __cppobj cShadowPriorityState : MtObject
{
  f32 mPriority;
  f32 mAttenuationDistance;
  f32 mAttenuationFade;
  u32 mState;
  u32 mVisibleHistory;
  u32 mOcclusionVisibleHistory;
  u32 mIntersectNearPlaneHistory;
  u32 mFrameLastOcclusion;
  bool mNotificationAlloc;
  bool mRequestFadeout;
  nDraw::OcclusionQuery *mpOcclusionQuery;
};

struct via::module::http_patch::HttpPatchManager::RequestProcParam
{
  via::module::http_patch::RequestType type;
  via::module::http_patch::ResultBase *result_ptr;
  via::module::http_patch::RequestParamCore param;
};

struct via::module::http_patch::FileControlManager
{
  const s32 MaxAccessThreadCount;
  const u32 MaxFileController;
  const u32 FileIORequestQueueSize;
  const u32 FileIOBlockSize;
  via::module::http_patch::FileController **mFileControlPtr;
};

struct __cppobj __attribute__((aligned(8))) rHDDPrefetchList::cPrefetchData : MtObject
{
  MT_CHAR mPrefetchPath[64];
  u32 mPrefetchDriveID;
  u32 mResourceType;
  u32 mPrefetchFlag;
};

struct __attribute__((aligned(4))) cPrimTagList::ObjState
{
  cPrimTagList::PrimTag *tag_ptr;
  cPrimTagList::IndexTag *index_ptr;
  u32 tag_num;
  bool sorted;
};

struct __cppobj cPrimTagList : cPrimObj
{
  cPrimTagList::ObjState mStack[6];
  u32 mCurrentStack;
  cPrimTagList::PrimTag *mpTags;
  cPrimTagList::IndexTag *mpSorted;
  void *mpWork;
  cPrimTagList::PrimTag *mpCurrentTagPtr;
  cPrimTagList::IndexTag *mpCurrentIdxPtr;
  u32 mTagSize;
  u32 mCurrentTagSize;
};

struct __cppobj cPrimBuffer : cPrimObj
{
  u32 mWriteSize;
  u32 mVBSize;
  u32 mUsedVBSize;
  void *mpAllocVB;
  void *mpCurrentVB;
};

struct rModel::MODEL_INFO
{
  s32 middist;
  s32 lowdist;
  u32 light_group;
  u16 memory;
  u16 reserved;
};

struct rModel::RECALCNORMAL_INFO
{
  u16 width;
  u16 height;
  u32 *map_vertex_base;
  u32 triangle_num;
  nDraw::VertexBuffer *triangle;
  nDraw::VertexBuffer *vertex_to_index;
};

struct __cppobj rModel : cResource
{
  rModel::JOINT_INFO *mJointInfo;
  u32 mJointNum;
  MtMatrix *mLmat;
  MtMatrix *mImat;
  rModel::PRIMITIVE_INFO *mPrimitiveInfo;
  u32 mPrimitiveNum;
  rModel::BOUNDARY_INFO *mBoundaryInfo;
  u32 mEnvelopeNum;
  u32 mMaterialNum;
  u32 mPolygonNum;
  u32 mVertexNum;
  u32 mIndexNum;
  u32 mPartsNum;
  rModel::PARTS_INFO *mPartsInfo;
  u32 mVertexBufsize;
  nDraw::IndexBuffer *mpIndexBuffer;
  nDraw::VertexBuffer *mpVertexBuffer;
  f32 mQuantPosScale;
  __attribute__((aligned(16))) MtSphere mBoundingSphere;
  MtAABB mBoundingBox;
  rModel::MODEL_INFO mModelInfo;
  nDraw::Material *mpMaterialsStack[4];
  MtVector3 mQuantPosOffset;
  u8 mJointTable[256];
  rMaterial *mpMaterial;
  nDraw::Material **mpMaterials;
  rModel::MATERIAL_NAME *mMaterialName;
  rModel::RECALCNORMAL_INFO mRCNInfo;
};

struct cPrimTagList::PrimTag
{
  nPrim::Material material;
  nPrim::DepthOrder depth;
  cPrimBuffer *p_primbuffer;
  void *p_metadata;
  void *v_addr;
  void *i_addr;
  u32 vtx_cnt;
  u32 idx_cnt;
};

struct __cppobj cBrowserApplicationTask : MtObject
{
  cBrowser *m_brw;
  int m_ini;
  int m_rno0;
  int m_tskidx;
  const void *m_prm;
};

struct cBrowserMemoryManager;

struct __cppobj cBrowserRenderDevicePS4 : MtObject
{
  cBrowserMemoryManager *mpRSXMemoryManager;
  cBrowserMemoryManager *mpRSXHostMemoryManager;
  uint32_t mTextureNum;
  sce::Gnm::Texture *mTexture[100];
  nDraw::Texture *mTextureManage[100];
};

struct cBrowserKeepString::stString
{
  MT_CHAR mString[127];
};

enum sCollision::SbcObject::DBVT_TYPE : __int32
{
  DBVT_TYPE_STOP = 0x0,
  DBVT_TYPE_MOVE = 0x1,
  DBVT_TYPE_NUM = 0x2,
  DBVT_TYPE_NONE = 0xFFFFFFFF,
};

struct __cppobj sCollision::SbcObject::cRegisterInfo : MtObject
{
  bool mFlgEnable;
  uScrollCollisionGeometry *mpRegistGeometry;
  cDynamicBVHCollision::Node *mpDBVTNode;
  sCollision::SbcObject::DBVT_TYPE mDBVTType;
  u32 mUnregisterGroupIndex;
};

struct uBaseModel::CACHE_ID::$D2F09E01A57D0330473B8DA8D8C1C9CF::$1FF4BAEB1EB444F6688BDCA8DCC482F3
{
  unsigned __int32 cb_material : 2;
  unsigned __int32 type : 3;
  unsigned __int32 view : 4;
  unsigned __int32 lod : 3;
  unsigned __int32 detail : 5;
};

union uBaseModel::CACHE_ID::$D2F09E01A57D0330473B8DA8D8C1C9CF
{
  u32 cache_key;
  uBaseModel::CACHE_ID::$D2F09E01A57D0330473B8DA8D8C1C9CF::$1FF4BAEB1EB444F6688BDCA8DCC482F3 _anon_0;
};

struct __attribute__((aligned(8))) uBaseModel::CACHE_ID
{
  uintptr cache_id;
  uBaseModel::CACHE_ID::$D2F09E01A57D0330473B8DA8D8C1C9CF _anon_0;
};

struct __attribute__((aligned(8))) uBaseModel::CACHE
{
  nDraw::CommandCache *p_command;
  uBaseModel::CACHE_ID id;
  u32 limit_detect;
  u32 lock_key;
  u32 update_key;
};

struct __cppobj uBaseModel : uCoord
{
  bool mbFilpShadowCast;
  s32 mIgnoreFilpShadowPartNo;
  rModel *mpModel;
  rMaterial *mpMaterialData;
  nDraw::Material **mpMaterials;
  u32 mMaterialNum;
  u32 mLightGroup;
  unsigned __int32 mLightAttr : 4;
  unsigned __int32 mMultiShadowReceive : 1;
  unsigned __int32 mMaxNumGroup0MultiShadowReceive : 2;
  unsigned __int32 mMaxNumGroup1MultiShadowReceive : 2;
  unsigned __int32 mVtxDisplacementWaveEnable : 1;
  unsigned __int32 mVtxDisplacementExpEnable : 1;
  unsigned __int32 mReserved : 20;
  unsigned __int32 mFlatTransparency : 1;
  __int32 mVFCullLevel : 6;
  unsigned __int32 mVFCullScale : 1;
  unsigned __int32 mVFCullRotate : 1;
  unsigned __int32 mVFCullTranslate : 1;
  __int32 mLODType : 4;
  __int32 mDebugFlags : 8;
  __int32 mShaderQuality : 4;
  unsigned __int32 mMaxLightNum : 4;
  unsigned __int32 mShaderAttributes : 1;
  unsigned __int32 mDissolveEnable : 1;
  unsigned __int32 mFixPosition : 1;
  u32 mDrawPriority;
  u32 mPartsDisp[16];
  s32 mZPrepassDist;
  s32 mPriorityBias;
  f32 mTransparency;
  f32 mLODLowDist;
  f32 mLODMidDist;
  u32 mMaterialAnimationFlag;
  unsigned __int32 mViewDraw : 16;
  unsigned __int32 mViewDrawNew : 16;
  unsigned __int32 mViewDrawUpdate : 1;
  unsigned __int32 mMatrixPalletEnable : 1;
  unsigned __int32 mViewDrawReserved : 30;
  nDraw::Material *mpMaterialStack[4];
  __attribute__((aligned(16))) MtSphere mBoundingSphere;
  MtOBB mBoundingBox;
  MtSphere mLightReciver;
  MtVector4 mAmbientMask;
  u32 mCacheMode;
  u32 mPrevPartsDisp[16];
  u32 mPartsDispMax;
  uBaseModel::CACHE mCache[96];
  s32 mTailCacheNum;
  u32 mMaterialCBuffer;
  bool mCommandCacheOffOld;
  bool mCommandCacheOffNow;
  bool mIsRCNEnable;
  bool mIsFromTextureCalcTangent;
  bool mMaterialIndexDirect;
};

struct __attribute__((aligned(8))) nMotion::MPARAM_WORK
{
  const nMotion::MOTION_PARAM *pparam;
  f32 cur_frame;
  void *pcur_param;
  f32 weight;
};

struct __cppobj uModel::Motion : MtObject
{
  u16 mMotionNo;
  u16 mState;
  u16 mPrevState;
  u16 mDmy;
  u32 mAttr;
  f32 mStartFrame;
  f32 mCarryFrame;
  f32 mPrevDeltaFrame;
  MtQuaternion mCarryQuat;
  MtVector3 mCarryTrans;
  f32 mInterFrame;
  f32 mInterCount;
  f32 mBlend;
  f32 mFrame;
  f32 mPrevFrame;
  f32 mFrameMax;
  f32 mLoopFrame;
  f32 mSpeed;
  f32 mInterRate;
  f32 mNowFrame;
  f32 mNextFrame;
  MtEaseCurve mInterCurve;
  __attribute__((aligned(16))) MtQuaternion mPrevQuat;
  MtQuaternion mBaseQuat;
  MtQuaternion mNullQuat;
  MtVector3 mPrevTrans;
  MtVector3 mBaseTrans;
  MtVector3 mNullTrans;
  nMotion::MPARAM_WORK mTransParam;
  nMotion::MPARAM_WORK mQuatParam;
  nMotion::SEQUENCE_INFO *mpSeqInfo[4];
  u32 mSequence[4];
  u32 mPrevSequence[4];
  uModel::MJOINT_WORK *mJoint;
  u32 mKeyFrameNum;
  nMotion::KEYFRAME_INFO *mpKeyFrameInfo;
  uModel::Motion::KeyFrameData *mpKeyFrameData;
};

struct __cppobj uModel : uBaseModel
{
  __attribute__((aligned(16))) MtSphere mPrevBoundingSphere[2];
  u32 mJointNum;
  uModel::Joint *mJoint;
  const u8 *mJointTable;
  u8 *mJointDepthTable;
  u32 mModelStatus;
  u32 mBlendNum;
  u32 mMotionCalcFlag;
  u32 mMotionInterpolateAttr;
  uModel::Motion mMotion[8];
  s32 mMotionBlurSetup;
  f32 mMotionBlurDist;
  f32 mMotionBlurLimite;
  u32 mEnvelopeHandle;
  u32 mEnvelopeNum;
  uModel *mpSkinMeshCollisionPtr;
  MtVector3 mNullTransScale;
  MtVector3 mDeltaPos;
  MtQuaternion mDeltaQuat;
  uModel::InterpolationJoint *mpInterpolationJoint;
  rMotionList *mpMotionList[16];
  u32 mKeyFrameNum;
  bool mShowJointNo;
  bool mUpdateJointDependencyReq;
  bool mUpdateNormal;
  f32 mMorphWeight[4];
  nDraw::Texture *mpShaderAttributes[2];
  MtVector4 mBasePlane;
  f32 mWaistOffset;
  f32 mWaistAdjustFactor;
  f32 mWaistAdjust;
  MtEaseCurve mWaistAdjustCurve;
  f32 mWaistAdjustSpeed;
  f32 mHeelHeight;
  f32 mRotInverseWeight;
  u32 mFootAdjustType;
  u32 mFootAdjustFilter;
  u32 mFootAdjustGroupBit;
  bool mAnkleAdjust;
  bool mFootAdjust;
  bool mCalcBuiltInIKReq;
  nDraw::Texture *mpPositionMap;
  nDraw::Texture *mpNormalMap;
  nDraw::Texture *mpTangentMap;
  nDraw::Texture *mpNormalSubMap;
};

struct __cppobj __attribute__((aligned(8))) rDynamicSbc : cResource
{
  rDynamicSbc::Triangle *mpTriList;
  rDynamicSbc::VertexJointInfo *mpVertexJointInfo;
  MtVector4 *mpVertexPos;
  MtVector4 *mpVertexWeight;
  u32 mVertexNum;
  u32 mTriangleNum;
  rDynamicSbc::JointInfo *mpJointInfo;
  u32 mJointNum;
  nCollision::ScrMaterialInfo *mpMaterialInfo;
  u32 mMaterialNum;
  rDynamicSbc::PartsInfo *mpPartsList;
  u32 mPartsNum;
  u8 mJointTable[256];
};

struct __attribute__((aligned(8))) uDynamicSbc::cBvhJobInfo
{
  cBVHCollision *mpBvh;
  MtAABB *mpTriangleAABB;
  u32 mPartsNo;
  u32 mRootTriangleIndex;
  u32 mTriangleNum;
};

struct __attribute__((aligned(8))) uDynamicSbc::cPartsInfo
{
  u32 mPartsID;
  uDynamicSbc::cBvhJobInfo mBvhInfo[2];
  u32 mBvhInfoNum;
};

struct __cppobj sCollision::cSbcSkinMesh::cRegisterInfo : MtObject
{
  bool mFlgEnable;
  uDynamicSbc *mpRegisterUnit;
  cDynamicBVHCollision::Node *mpDBVTNode;
};

struct cBVHCollision::Header
{
  u32 magic;
  u32 version;
  u32 type;
  __attribute__((aligned(8))) MtAABB aabb;
  u32 NodeNum;
  u32 LeafNum;
  bool FlgBasicAllocedMultiple;
  bool FlgNodeOutsideAllocateMemory;
};

struct __cppobj cBVHCollision : MtObject
{
  __attribute__((aligned(16))) cBVHCollision::Header mHeader;
  cBVHCollision::NodeBinaryBasic *mpRootNodeBinary;
  cBVHCollision::NodeBinaryOptimize *mpRootNodeBinaryOptimize;
  cBVHCollision::NodeQuad *mpRootNodeQuad;
  u16 *mpLeafIndexArray;
  cBVHCollision::cWorkBuildOnlineFast *mpBuildOnlineWork;
};

struct __cppobj cGridCollision : MtObject
{
  u32 mMagic;
  u32 mVersion;
  bool mFlgOutsideMemoryAllocate;
  __attribute__((aligned(16))) MtAABB mBoundingAABB;
  MtVector3 mGridSize;
  MtVector3 mGridSizeInv;
  MtVector3 mOffset;
  cGridCollision::cCellRegisterArrayBase *mpGridInfo;
  u16 mGridNumX;
  u16 mGridNumPadding;
  u16 mGridNumZ;
  u32 mTraverseRefCount[19][2];
  u8 mTraverseNest[19];
  u32 mTotalRegistNum;
  u8 mCellMode;
  bool mFlgStaticMode;
  cGridCollision::StaticGridInfo *mpStaticGridInfo;
  u32 mStaticGridRegistParamNum;
  void *mpStaticGridRegistParam;
};

struct __attribute__((aligned(16))) cGridCollisionRegistInfo
{
  MtFloat3 mRegistAABBMinPos;
  u32 mRegistParam;
  MtFloat3 mRegistAABBMaxPos;
  u32 mTraverseRefCount[19][2];
};

struct __cppobj sCollision::ScrCollisionInfoBase : MtObject
{
  __attribute__((aligned(16))) MtVector3 cpos;
  MtVector3 cposTrans;
  MtVector3 cposHited;
  MtVector3 *pcposUse;
  __attribute__((aligned(16))) MtVector3 cspeed;
  MtVector3 cspeedTrans;
  MtVector3 cspeedHited;
  MtVector3 *pcspeedUse;
  sCollision::SbcInfo info;
  bool FlgFind;
  const sCollision::Param *pCollisionParam;
  bool FlgObjHited;
  sCollision::TraverseInfo *pTraverseInfo;
};

struct __cppobj __attribute__((aligned(8))) sCollision::cSbcMoveMatrix : nCollision::cScrCollisionMoveMatrix
{
};

struct __cppobj __attribute__((aligned(8))) sCollision::Sbc : MtObject
{
  bool mDisp;
  bool mActive;
  u32 mSbcArrayIndex;
  nCollision::cScrCommonFilter mScrFilter;
  MtObject *mpOwner;
  u32 mRefCount;
  u32 mDBVTType;
  cDynamicBVHCollision::Node *mpDBVTNode;
  sCollision::cSbcMoveMatrix mMatrixInfo;
  rCollision *mpRSbc;
  sCollision::Sbc::Parts *mpPartsArray;
  u32 mPartsArrayNum;
  bool mFlgCreateAllMove;
  u32 mMovePartsNum;
  MtObject *mpUserPtr;
  bool mFlgUserPtrAutoDelete;
};

struct __attribute__((aligned(4))) sCollision::PreTraverseInfo
{
  sCollision::PreTraverseInfo::PreTraverseData *pData;
  u32 DataNum;
  bool FlgFailed;
};

struct __cppobj __attribute__((aligned(16))) sCollision::TriangleInfo : sCollision::SbcInfo
{
  MtPlane hit_plane;
  MtVector3 hit_pos;
  MtVector3 hit_normal;
  f32 t;
  f32 depth;
};

struct rShaderPackage::SHADER_TABLE
{
  u64 id;
  u32 next;
  unsigned __int32 index : 31;
  unsigned __int32 conflict : 1;
};

struct __attribute__((aligned(8))) cSoundPicolaPitchShift::Resample
{
  int (**_vptr$Resample)(void);
  u32 mDegree;
  u32 mFs;
  f32 mCoefAmp;
  f32 mAlpha;
  u32 mR;
  f32 mFIR[2048];
  f32 mKaiser[2048];
  u32 mFIRSize;
  u32 mCh;
  f32 *mpInput;
  f32 mOutput[2048];
  u32 mInputSamples;
  u32 mOutputSamples;
  f32 mUnit;
};

struct rSoundDirectionalSet::Element
{
  f32 mAngle;
  f32 mValue;
};

struct __cppobj nNetwork::Protocol : MtObject
{
  bool mSystem;
  bool mBroadcast;
  nNetwork::Session *mpSession;
};

struct __cppobj __attribute__((aligned(8))) MtNetP2p : MtNetObject, MtNetRequestController::Listener
{
  MtNetContext *mpContext;
  MtNetRequestController mRequestController;
  bool mIsDestructor;
  MtNetP2p::Listener *mpListener;
  s32 mPhaseAutoFinalize;
};

struct uLight::DYNAMIC_LIGHT_PARAM
{
  MtFloat3 LightPos;
  f32 LightMask0;
  MtFloat3 LightDir;
  f32 LightMask1;
  MtFloat3 LightColor;
  f32 LightBalance;
  MtFloat4 LightAttn;
  MtFloat4 LightAttn2;
  MtFloat3x4 RangeMat;
  MtFloat4x4 ProjMat;
};

struct uLight::KEY::$92013A50B97C3B825A96FC0AA96D91A6::$341FDB2C80FCA80575B51DBDFCC0A0E4
{
  unsigned __int32 texture_type : 8;
  unsigned __int32 decode_type : 8;
  unsigned __int32 shader_index : 16;
};

union uLight::KEY::$92013A50B97C3B825A96FC0AA96D91A6
{
  uLight::KEY::$92013A50B97C3B825A96FC0AA96D91A6::$341FDB2C80FCA80575B51DBDFCC0A0E4 _anon_0;
  u32 key;
};

struct uLight::KEY
{
  uLight::KEY::$92013A50B97C3B825A96FC0AA96D91A6 _anon_0;
};

struct sScene::Node
{
  u32 attr;
  void *handle;
};

struct __cppobj uLight : cUnit
{
  unsigned __int32 mAttr : 8;
  unsigned __int32 mType : 6;
  unsigned __int32 mBound : 1;
  unsigned __int32 mWbFlag : 1;
  unsigned __int32 mApproximateDisable : 1;
  unsigned __int32 mPriority : 15;
  u32 mGroup;
  f32 mBalance;
  MtFloat2 mShadowAtten;
  u32 mMode;
  __attribute__((aligned(16))) MtVector3 mColor;
  uLight::DYNAMIC_LIGHT_PARAM mLightParam[2];
  uLight::DYNAMIC_LIGHT_PARAM mApproxLightParam[2];
  SO_HANDLE mLightFunction;
  SO_HANDLE mApproxLightFunction;
  __attribute__((aligned(16))) MtAABB mBoundingBox;
  MtSphere mBoundingSphere;
  rTexture *mpProjectionTexture;
  cLightVolume *mplightVolume;
  uLight::KEY mDefault;
  uLight::KEY mApproximate;
  sScene::Node mNode;
  bool mIsPS3Disable;
  bool mIsPS4Disable;
  bool mIsPCDisable;
};

struct __cppobj __attribute__((aligned(8))) nDraw::OcclusionQuery : nDraw::Query
{
};

typedef via::module::http_patch::FileController::LinkList<via::module::http_patch::FileController::Controller> via::module::http_patch::FileController::controller_t;

typedef int SceUID;

typedef SceUID MtThread::ID;

struct __cppobj MtCollisionUtil::MtArrayTemplate<void *,false,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<void *,false,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<void *,false,1> mThis;
};

typedef MtCollisionUtil::MtArrayTemplateEx<void *,false,1> httpdl_array_pvoid;

typedef httpdl_array_pvoid via::module::http_patch::FileController::blockbuffer_t;

struct __cppobj MtCollisionUtil::MtArrayTemplate<char *,false,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<MT_STR,false,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<char *,false,1> mThis;
};

typedef MtCollisionUtil::MtArrayTemplateEx<MT_STR,false,1> httpdl_array_pc8;

typedef httpdl_array_pc8 via::module::http_patch::FileController::pathbuffer_t;

struct __cppobj via::module::http_patch::FileController : MtObject
{
  const u32 MaxAccessThreadCount;
  const u32 FileIORequestQueueSize;
  const u32 FileIOBlockSize;
  u8 *mBufferPtr;
  MT_STR mPathBufferPtr;
  s32 mRequestCount;
  s32 mExecuteCount;
  via::module::http_patch::FileController::controller_t *mReqestLinkListTop;
  via::module::http_patch::FileController::controller_t *mReqestLinkListBottom;
  via::module::http_patch::FileController::controller_t *mExecuteLinkListTop;
  via::module::http_patch::FileController::controller_t *mExecuteLinkListBottom;
  via::module::http_patch::FileController::controller_t *mQueuePtr;
  MtFile *mhFilePtr;
  MtFileStream *mhFileStreamPtr;
  MtThread::ID *mThreadIDS;
  s32 mAccessThreadCount;
  via::Request mRequestCtrl;
  MtCriticalSection mGetRequestMutex;
  MtCriticalSection mRequestMutex;
  MtCriticalSection mExecuteMutex;
  MtCriticalSection mTempBlockBufferMutex;
  MtCriticalSection mPathBlockBufferMutex;
  bool mBlockFileIOQueue;
  via::module::http_patch::FileController::blockbuffer_t mTempBlockBufferList;
  via::module::http_patch::FileController::pathbuffer_t mPathBlockBufferList;
};

struct rModel::JOINT_INFO
{
  unsigned __int32 no : 8;
  unsigned __int32 parent : 8;
  unsigned __int32 symmetry : 8;
  unsigned __int32 reserved : 8;
  f32 radius;
  f32 length;
  MtFloat3 offset;
};

struct rModel::PRIMITIVE_INFO
{
  unsigned __int32 draw_mode : 16;
  unsigned __int32 vertex_num : 16;
  unsigned __int32 parts_no : 12;
  unsigned __int32 material_no : 12;
  unsigned __int32 lod : 8;
  unsigned __int32 disp : 1;
  unsigned __int32 shape : 1;
  unsigned __int32 sort : 1;
  unsigned __int32 weight_num : 5;
  unsigned __int32 alphapri : 8;
  unsigned __int32 vertex_stride : 8;
  unsigned __int32 topology : 6;
  unsigned __int32 binormal_flip : 1;
  unsigned __int32 bridge : 1;
  u32 vertex_ofs;
  u32 vertex_base;
  SO_HANDLE inputlayout;
  u32 index_ofs;
  u32 index_num;
  u32 index_base;
  unsigned __int32 envelope : 8;
  unsigned __int32 boundary_num : 8;
  unsigned __int32 connect_id : 16;
  unsigned __int32 min_index : 16;
  unsigned __int32 max_index : 16;
  rModel::BOUNDARY_INFO *boundary;
};

struct rModel::BOUNDARY_INFO
{
  u32 joint;
  u32 reserved[3];
  MtSphere sphere;
  MtAABB aabb;
  MtOBB obb;
};

struct rModel::PARTS_INFO
{
  u32 no;
  u32 reserved[3];
  MtSphere boundary;
};

struct __cppobj rMaterial : cResource
{
  rMaterial::HEADER *mpHeader;
  nDraw::Material **mpMaterials;
};

struct rModel::MATERIAL_NAME
{
  MT_CHAR name[128];
};

struct __cppobj uModel::Joint : MtObject
{
  uModel::Constraint *mpConstraint;
  f32 mLength;
  u32 mDepth;
  __attribute__((aligned(16))) MtMatrix mWmat;
  MtVector3 mOffset;
  MtQuaternion mQuat;
  MtVector3 mScale;
  MtVector3 mTrans;
  unsigned __int32 mAttr : 8;
  unsigned __int32 mParentIndex : 8;
  unsigned __int32 mType : 8;
  unsigned __int32 mNo : 8;
  unsigned __int32 mSymmetryIndex : 8;
  unsigned __int32 mChildNum : 8;
  unsigned __int32 mPreUpdate : 1;
  unsigned __int32 mCalcFlag : 1;
  unsigned __int32 mReserved : 14;
  uModel *mpModel;
  MtColor mShaderAttributes;
};

struct nMotion::MOTION_PARAM::$C6C1BCD3A9C2ED4FA69D0C4B169041CD::$2F8849A0E5B71D0BF3F1B2599575E836
{
  unsigned __int32 type : 8;
  unsigned __int32 usage : 8;
  unsigned __int32 jnt_type : 8;
  unsigned __int32 jnt_no : 8;
};

union nMotion::MOTION_PARAM::$C6C1BCD3A9C2ED4FA69D0C4B169041CD
{
  nMotion::MOTION_PARAM::$C6C1BCD3A9C2ED4FA69D0C4B169041CD::$2F8849A0E5B71D0BF3F1B2599575E836 _anon_0;
  u32 header;
};

struct nMotion::MOTION_PARAM
{
  nMotion::MOTION_PARAM::$C6C1BCD3A9C2ED4FA69D0C4B169041CD _anon_0;
  f32 weight;
  u32 param_size;
  u32 padding;
  void *pparam;
  MtFloat4 value;
  void *pparamex;
};

struct nMotion::SEQUENCE_INFO
{
  u16 work[32];
  u32 seq_num;
  u32 padding;
  u32 *seq;
};

struct __attribute__((aligned(8))) uModel::MJOINT_WORK
{
  nMotion::MPARAM_WORK mQuatParam;
  nMotion::MPARAM_WORK mTransParam;
  nMotion::MPARAM_WORK mScaleParam;
  u32 mState;
};

struct nMotion::KEYFRAME_INFO::$9B312F7DCABE16F6B6F8FDD3F730785D::$7CB603BAF9A56C972324C6A9B9C6E85A
{
  unsigned __int32 type : 8;
  unsigned __int32 work : 16;
  unsigned __int32 attr : 8;
};

union nMotion::KEYFRAME_INFO::$9B312F7DCABE16F6B6F8FDD3F730785D
{
  u32 info;
  nMotion::KEYFRAME_INFO::$9B312F7DCABE16F6B6F8FDD3F730785D::$7CB603BAF9A56C972324C6A9B9C6E85A _anon_0;
};

struct nMotion::KEYFRAME_INFO
{
  nMotion::KEYFRAME_INFO::$9B312F7DCABE16F6B6F8FDD3F730785D _anon_0;
  u32 key_num;
  nMotion::KEYINFO_U32 *key;
};

union uModel::Motion::KeyFrameData::$9FE95BE31E285B8CBFCB170F347C20FA
{
  u32 value;
  s32 value_s32;
  f32 value_f32;
};

union uModel::Motion::KeyFrameData::$40A28AD90B4F1E6167A7AAD1C97AF6D4
{
  u32 prev_value;
  s32 prev_value_s32;
  f32 prev_value_f32;
};

struct uModel::Motion::KeyFrameData
{
  u32 index;
  uModel::Motion::KeyFrameData::$9FE95BE31E285B8CBFCB170F347C20FA _anon_0;
  uModel::Motion::KeyFrameData::$40A28AD90B4F1E6167A7AAD1C97AF6D4 _anon_1;
};

struct uModel::InterpolationJoint
{
  u32 mMotType;
  u32 mState;
  __attribute__((aligned(16))) MtQuaternion mQuat;
  MtVector3 mTrans;
  MtVector3 mScale;
};

struct __cppobj rMotionList : cResource
{
  rMotionList::MOTION_LIST_HDR *mpHdr;
};

struct rDynamicSbc::Triangle
{
  unsigned __int64 v0 : 16;
  unsigned __int64 v1 : 16;
  unsigned __int64 v2 : 16;
  unsigned __int64 MaterialIndex : 16;
};

struct rDynamicSbc::VertexJointInfo
{
  unsigned __int32 j0 : 8;
  unsigned __int32 j1 : 8;
  unsigned __int32 j2 : 8;
  unsigned __int32 j3 : 8;
};

struct __attribute__((aligned(16))) rDynamicSbc::JointInfo
{
  MtMatrix BasePoseInverseMatrix;
  u32 JointNo;
};

struct __attribute__((aligned(8))) rDynamicSbc::PartsInfo
{
  u32 PartsID;
  u32 *pTriangleIndex;
  u32 TriangleNum;
};

struct __attribute__((aligned(2))) cBVHCollision::NodeBinaryCommon
{
  u16 ChildIndex[2];
  u8 Status;
};

struct __attribute__((aligned(16))) cBVHCollision::NodeBinaryBasic
{
  MtAABB ThisAABB;
  cBVHCollision::NodeBinaryCommon NodeCommon;
  bool aFlgDelete[2];
  cBVHCollision::NodeBinaryBasic *pChild[2];
};

struct __attribute__((aligned(16))) cBVHCollision::NodeBinaryOptimize
{
  MtAABB ChildAABB[2];
  cBVHCollision::NodeBinaryCommon NodeCommon;
};

struct cBVHCollision::NodeQuadBase::$2B25E987799111927C9A99AD1CDFFBE2::$D546FC6FDF1705549E109BA729750AB4
{
  u8 Status;
  u8 Status0;
  u8 Status1;
  u8 Status2;
};

union cBVHCollision::NodeQuadBase::$2B25E987799111927C9A99AD1CDFFBE2
{
  cBVHCollision::NodeQuadBase::$2B25E987799111927C9A99AD1CDFFBE2::$D546FC6FDF1705549E109BA729750AB4 _anon_0;
  u32 StatusU32;
};

struct cBVHCollision::NodeQuadBase
{
  cBVHCollision::NodeQuadBase::$2B25E987799111927C9A99AD1CDFFBE2 _anon_0;
  u16 ChildIndex[4];
  u32 _padding;
};

struct __cppobj cBVHCollision::NodeQuad : cBVHCollision::NodeQuadBase
{
  MtAABB4 NodeAABB;
};

struct __cppobj cBVHCollision::cWorkBuildOnlineFast : MtObject
{
  bool mFlgMyLocalAABB;
  MtAABB *mpLocalAABB;
  s32 mNowNodeUseID;
  s32 mNowNodeMax;
  bool mFlgUsedBuildOnlineFast;
  cBVHCollision::JobParamOfLine *mpStackOnlineBuildAll;
  cBVHCollision::JobParamOfLine *mpStackOnlineBuild[19];
  u32 mNestIndex[25];
  u32 mNestNum;
};

struct __attribute__((aligned(8))) cGridCollision::cCellRegisterArrayBase
{
  void *mpArrayData;
  u16 mArrayRegisterNum;
  u16 mArrayBufferNum;
};

struct cGridCollision::StaticGridInfo
{
  u16 mLeafNum;
  u32 mLeafStart;
};

struct rCollision::Header
{
  u8 Id[4];
  u32 Version;
  u32 SpaceDivisionTypeParts;
  u32 SpaceDivisionTypeTriangle;
  u16 PartsInfoNum;
  u16 MaterialInfoNum;
  u32 TotalLeafNum;
  u32 TotalTriangleNum;
  u32 TotalVertexNum;
  u32 TotalModifyNum;
  u32 _padding[3];
  MtAABB TotalAABB;
};

struct __cppobj __attribute__((aligned(16))) rCollision : cResource
{
  rCollision::Header mHeader;
  cBVHCollision *mpBvh;
  cGridCollision *mpGrid;
  cGridCollisionRegistInfo *mpGridRegistInfo;
  rCollision::PartsInfo *mpPartsInfo;
  rCollision::MaterialInfo *mpMaterialInfo;
  rCollision::Leaf *mpLeaf;
  rCollision::Triangle *mpTriangle;
  rCollision::Vertex *mpVertex;
  u32 *mpSbcModifyClassIDArray;
};

struct __cppobj sCollision::Sbc::Parts : MtObject
{
  u32 mPartsIndex;
  sCollision::Sbc *mpOwnerSbc;
  bool mFlgActive;
  cDynamicBVHCollision::Node *mpDBVTNode;
  u32 mDBVTType;
  sCollision::cSbcMoveMatrix mMatrixInfo;
};

struct sCollision::PreTraverseInfo::PreTraverseData
{
  sCollision::SbcInfoBase info;
};

struct cLightVolume
{
  int (**_vptr$cLightVolume)(void);
};

struct via::module::http_patch::FileController::LinkList<via::module::http_patch::FileController::Controller>
{
  via::module::http_patch::FileController::LinkList<via::module::http_patch::FileController::Controller> *next_ptr;
  via::module::http_patch::FileController::Controller value;
};

struct rMaterial::HEADER
{
  u32 magic;
  u32 version;
  u32 material_num;
  u32 texture_num;
  u32 shader_version;
  u32 padding1;
  rMaterial::TEXTURE_INFO *textures;
  rMaterial::MATERIAL_INFO *materials;
};

struct __cppobj uModel::Constraint : MtObject
{
};

struct nMotion::KEYINFO_U32::$ECF03A026DEF7BB2415757631F970E08::$604AD4D25873E6C07D1AF4A1B5E45EBE
{
  unsigned __int32 curve : 8;
  unsigned __int32 frame : 16;
  unsigned __int32 reserved : 8;
};

union nMotion::KEYINFO_U32::$ECF03A026DEF7BB2415757631F970E08
{
  u32 opt;
  nMotion::KEYINFO_U32::$ECF03A026DEF7BB2415757631F970E08::$604AD4D25873E6C07D1AF4A1B5E45EBE _anon_0;
};

union nMotion::KEYINFO_U32::$89993749ACD3C362015BDDF05F1489AF
{
  u32 value;
  s32 valS32;
  f32 valF32;
};

union nMotion::KEYINFO_U32::$24DE27FD416AC55D3AE905747CB72AAB
{
  u32 paramU[2];
  s32 paramS[2];
  f32 paramF[2];
};

struct nMotion::KEYINFO_U32
{
  nMotion::KEYINFO_U32::$ECF03A026DEF7BB2415757631F970E08 _anon_0;
  nMotion::KEYINFO_U32::$89993749ACD3C362015BDDF05F1489AF _anon_1;
  nMotion::KEYINFO_U32::$24DE27FD416AC55D3AE905747CB72AAB _anon_2;
};

struct rMotionList::MOTION_LIST_HDR
{
  u32 magic;
  u16 version;
  u16 motion_num;
  nMotion::MOTION_INFO *pmotion[1];
};

struct __attribute__((aligned(8))) cBVHCollision::JobParamOfLine
{
  JOBHANDLE handle;
  cBVHCollision::NodeBinaryBasic *pRootNode;
  u32 LeafOffset;
  u32 LeafNum;
  u32 Nest;
};

struct rCollision::Leaf
{
  u16 TriangleIndex[2];
  u8 CommonUseVertexIndex[2];
  u8 NoCommonVertexIndex[2];
  u16 MaterialIndex;
};

enum via::module::http_patch::FileController::Command : __int32
{
  Command_None = 0x0,
  Command_Open = 0x1,
  Command_Close = 0x2,
  Command_Write = 0x3,
  Command_Copy = 0x4,
  Command_Rename = 0x5,
  Command_Remove = 0x6,
  Command_UserCmdPtr = 0x7,
  Command_UserCmdStr = 0x8,
  Command_UserCmdValue = 0x9,
  Command_User = 0xA,
  Command_Hash = 0xB,
  Command_Extract = 0xC,
};

typedef void (*via::module::http_patch::FileController::UserCommandValueCallback)(void *, const s64);

struct via::module::http_patch::FileController::Failed
{
  via::module::http_patch::FileController::UserCommandValueCallback function;
  s64 size;
  void *this_ptr;
  const via::module::http_patch::ParallelsFileData *data_ptr;
};

struct __attribute__((aligned(8))) via::module::http_patch::FileController::CmdOpen
{
  MtFile *hfile_ptr;
  MtFileStream *hfilestream_ptr;
  MT_STR path;
  size_t file_size;
  u32 fileoptionalattr;
};

struct via::module::http_patch::FileController::CmdWrite
{
  MtFile *hfile_ptr;
  MtFileStream *hfilestream_ptr;
  const void *buffer_ptr;
  size_t write_size;
};

struct via::module::http_patch::FileController::CmdClose
{
  MtFile *hfile_ptr;
  MtFileStream *hfilestream_ptr;
};

struct __attribute__((aligned(8))) via::module::http_patch::FileController::CmdCopy
{
  MT_STR src_path;
  MT_STR dest_path;
  size_t copy_size;
  bool append;
  bool gdata;
};

struct via::module::http_patch::FileController::CmdRename
{
  MT_STR src_path;
  MT_STR dest_path;
};

struct via::module::http_patch::FileController::CmdRemove
{
  MT_STR src_path;
};

typedef void (*via::module::http_patch::FileController::UserCommandStrCallback)(void *, MT_CTSTR);

struct via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49::$AE838D507ABBE5021D276C1705F0DDC0
{
  via::module::http_patch::FileController::UserCommandStrCallback function;
  MT_STR path;
};

typedef void (*via::module::http_patch::FileController::UserCommandPtrCallback)(void *, const void *);

struct via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49::$A6A71BE6D4269586217D8E677615FACF
{
  via::module::http_patch::FileController::UserCommandPtrCallback function;
  const void *data_ptr;
};

struct via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49::$FE963F7EC802BCD722C7F1733639035B
{
  via::module::http_patch::FileController::UserCommandValueCallback function;
  size_t value;
};

typedef void (*via::module::http_patch::FileController::UserCommandCallback)(void *);

struct via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49::$6EC89FBF5FDBECFE19883B408665224C
{
  via::module::http_patch::FileController::UserCommandCallback function;
};

union via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49
{
  via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49::$AE838D507ABBE5021D276C1705F0DDC0 str;
  via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49::$A6A71BE6D4269586217D8E677615FACF ptr;
  via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49::$FE963F7EC802BCD722C7F1733639035B value;
  via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49::$6EC89FBF5FDBECFE19883B408665224C none;
};

struct via::module::http_patch::FileController::CmdUser
{
  void *this_ptr;
  via::module::http_patch::FileController::CmdUser::$2744C3DD96CFB54C89322D41F3CB6A49 _anon_0;
};

typedef u8 via::hash_algorithm_selector<0>::value_type[32];

typedef via::hash_algorithm_selector<0>::value_type via::hash<0>::value_type;

typedef via::hash<0>::value_type via::sha256hash_t;

struct __attribute__((aligned(8))) via::module::http_patch::FileController::CmdHash
{
  MT_STR src_path;
  size_t file_size;
  via::sha256hash_t serverhash;
  bool direct;
  via::sha256hash_t directhash;
};

struct via::module::http_patch::FileController::CmdExtract
{
  MT_STR src_path;
};

union via::module::http_patch::FileController::Controller::$28457F51EBD829645E8E643AE702DD4C
{
  via::module::http_patch::FileController::CmdOpen open;
  via::module::http_patch::FileController::CmdWrite write;
  via::module::http_patch::FileController::CmdClose close;
  via::module::http_patch::FileController::CmdCopy copy;
  via::module::http_patch::FileController::CmdRename rename;
  via::module::http_patch::FileController::CmdRemove remove;
  via::module::http_patch::FileController::CmdUser user;
  via::module::http_patch::FileController::CmdHash hash;
  via::module::http_patch::FileController::CmdExtract extract;
};

struct via::module::http_patch::FileController::Controller
{
  via::module::http_patch::FileController::Command cmd;
  via::module::http_patch::FileController::Failed failed;
  via::module::http_patch::FileController::Controller::$28457F51EBD829645E8E643AE702DD4C _anon_0;
  const via::module::http_patch::FileController::LinkList<via::module::http_patch::FileController::Controller> *link_ptr;
};

struct rMaterial::LUT_INFO
{
  u32 type;
  u32 format;
  u32 width;
  u32 height;
  f32 min_value;
  f32 max_value;
  f32 param1;
  f32 param2;
  u16 hermite_x[8];
  u16 hermite_y[8];
};

union rMaterial::TEXTURE_INFO::$DCD107AF25574406034527221BA49095
{
  MT_CHAR rpath[64];
  rMaterial::LUT_INFO lutinfo;
};

struct rMaterial::TEXTURE_INFO
{
  u32 dti;
  u32 padding;
  rTexture *ptex;
  nDraw::Texture *plut;
  rMaterial::TEXTURE_INFO::$DCD107AF25574406034527221BA49095 _anon_0;
};

struct rMaterial::MATERIAL_INFO
{
  u32 dti;
  u32 padding;
  u32 name;
  u32 state_bufsize;
  SO_HANDLE bsstate;
  SO_HANDLE dsstate;
  SO_HANDLE rsstate;
  unsigned __int32 state_num : 12;
  unsigned __int32 reserved1 : 1;
  unsigned __int32 id : 16;
  unsigned __int32 fog : 1;
  unsigned __int32 tangent : 1;
  unsigned __int32 half_lambert : 1;
  unsigned __int32 stencil_ref : 8;
  unsigned __int32 alphatest_ref : 8;
  unsigned __int32 polygon_offset : 4;
  unsigned __int32 alphatest : 1;
  unsigned __int32 alphatest_func : 3;
  unsigned __int32 draw_pass : 5;
  unsigned __int32 layer_id : 2;
  unsigned __int32 deferred_lighting : 1;
  MtFloat4 blend_factor;
  u32 animation_bufsize;
  nDraw::Material::STATE *states;
  nDraw::Animation::ANIMATION_LIST *animation_list;
};

struct nMotion::MOTION_INFO::$636C445A7662D9B7D62D33D157750F16::$5B4587ADED13BF312124DFA3A366FF5E
{
  unsigned __int32 attr : 16;
  unsigned __int32 kf_num : 5;
  unsigned __int32 seq_num : 3;
  unsigned __int32 duplicate : 3;
  unsigned __int32 reserved : 5;
};

union nMotion::MOTION_INFO::$636C445A7662D9B7D62D33D157750F16
{
  nMotion::MOTION_INFO::$636C445A7662D9B7D62D33D157750F16::$5B4587ADED13BF312124DFA3A366FF5E _anon_0;
  u32 info;
};

struct nMotion::MOTION_INFO
{
  nMotion::MOTION_PARAM *param;
  u32 param_num;
  u32 frame_num;
  s32 loop_frame;
  __attribute__((aligned(16))) MtVector3 base_trans;
  MtQuaternion base_quat;
  nMotion::MOTION_INFO::$636C445A7662D9B7D62D33D157750F16 _anon_0;
  u32 padding;
  nMotion::SEQUENCE_INFO *seq_info;
  nMotion::KEYFRAME_INFO *kf_info;
};

struct MtStringEx<32>
{
  u32 mLength;
  char mStr[32];
};

struct __cppobj __attribute__((aligned(8))) via::module::http_patch::ParallelsFileData : MtObject
{
  u32 no;
  u32 file_version;
  u64 hash;
  size_t file_size;
  via::sha256hash_t binary_hash;
  u32 attribute;
  MtStringEx<128> name;
  MtStringEx<128> path;
  MtStringEx<32> split_file;
  bool redownload;
  bool boot;
};

struct __cppobj sDDOMain::MyDTI : MtDTI
{
};

struct __cppobj sUnitExt::MyDTI : MtDTI
{
};

struct __cppobj sDialogBase::MyDTI : MtDTI
{
};

struct __cppobj rGUIMessage::MyDTI : MtDTI
{
};

struct __cppobj sSavedataExt::MyDTI : MtDTI
{
};

struct sSavedataExt::stSaveDataInfo
{
  MT_CTSTR mDirectoryPostfixName;
  MT_CTSTR mDataPath;
};

struct __cppobj cStorageLauncherData::MyDTI : MtDTI
{
};

struct __cppobj cStorageDataBase::MyDTI : MtDTI
{
};

struct MtDataWriter::Frame
{
  u32 base;
  u32 pt;
  u32 offset;
};

struct __attribute__((aligned(8))) MtDataWriter
{
  int (**_vptr$MtDataWriter)(void);
  MtStream *mStream;
  u8 *mBuffer;
  u32 mSeekPt;
  u32 mBufsiz;
  u32 mBufsizMax;
  MtDataWriter::Frame mFrameStack[64];
  MtDataWriter::Frame *mFrame;
  s32 mFramePt;
  MtDataWriter::Label *mLabel;
  u32 mLabelMax;
};

struct __attribute__((aligned(8))) MtDataWriter::Label
{
  const void *address;
  unsigned __int32 offset : 31;
  unsigned __int32 backtrack : 1;
};

struct __attribute__((aligned(8))) MtDataReader
{
  int (**_vptr$MtDataReader)(void);
  MtStream *mStream;
  u8 *mBuffer;
  u32 mSeekPt;
  u32 mBufsiz;
  u32 mBufsizMax;
  u8 mLocalBuffer[4096];
};

struct __cppobj sWorkRate::MyDTI : MtDTI
{
};

struct ScePadAnalogStick
{
  uint8_t x;
  uint8_t y;
};

typedef ScePadAnalogStick ScePadAnalogStick_0;

struct ScePadAnalogButtons
{
  uint8_t l2;
  uint8_t r2;
  uint8_t padding[2];
};

typedef ScePadAnalogButtons ScePadAnalogButtons_0;

struct SceFQuaternion
{
  float x;
  float y;
  float z;
  float w;
};

typedef SceFQuaternion SceFQuaternion_0;

struct SceFVector3
{
  float x;
  float y;
  float z;
};

typedef SceFVector3 SceFVector3_0;

struct ScePadTouch
{
  uint16_t x;
  uint16_t y;
  uint8_t id;
  uint8_t reserve[3];
};

typedef ScePadTouch ScePadTouch_0;

struct ScePadTouchData
{
  uint8_t touchNum;
  uint8_t reserve[7];
  ScePadTouch_0 touch[2];
};

typedef ScePadTouchData ScePadTouchData_0;

struct ScePadExtensionUnitData
{
  uint32_t extensionUnitId;
  uint8_t reserve[1];
  uint8_t dataLength;
  uint8_t data[10];
};

typedef ScePadExtensionUnitData ScePadExtensionUnitData_0;

struct ScePadData
{
  uint32_t buttons;
  ScePadAnalogStick_0 leftStick;
  ScePadAnalogStick_0 rightStick;
  ScePadAnalogButtons_0 analogButtons;
  SceFQuaternion_0 orientation;
  SceFVector3_0 acceleration;
  SceFVector3_0 angularVelocity;
  ScePadTouchData_0 touchData;
  bool connected;
  uint64_t timestamp;
  ScePadExtensionUnitData_0 extensionUnitData;
  uint8_t connectedCount;
  uint8_t reserve[2];
  uint8_t deviceUniqueDataLen;
  uint8_t deviceUniqueData[12];
};

struct rStageJoint;

typedef SceSaveDataDirName SceSaveDataDirName_0;

typedef SceSaveDataParam SceSaveDataParam_0;

typedef SceSaveDataSearchInfo SceSaveDataSearchInfo_0;

struct __attribute__((aligned(8))) SceSaveDataDirNameSearchResult
{
  uint32_t hitNum;
  SceSaveDataDirName_0 *dirNames;
  uint32_t dirNamesNum;
  uint32_t setNum;
  SceSaveDataParam_0 *params;
  SceSaveDataSearchInfo_0 *infos;
  uint8_t reserved[12];
};

struct SceSaveDataDirName
{
  char data[32];
};

struct SceSaveDataParam
{
  char title[128];
  char subTitle[128];
  char detail[1024];
  uint32_t userParam;
  time_t mtime;
  uint8_t reserved[32];
};

typedef uint64_t SceSaveDataBlocks;

struct SceSaveDataSearchInfo
{
  SceSaveDataBlocks blocks;
  SceSaveDataBlocks freeBlocks;
  uint8_t reserved[32];
};

struct __cppobj MtMemoryStream::MyDTI : MtDTI
{
};

typedef int32_t SceSaveDataDialogMode;

typedef int32_t SceSaveDataDialogButtonId;

struct SceSaveDataDialogResult
{
  SceSaveDataDialogMode mode;
  int32_t result;
  SceSaveDataDialogButtonId buttonId;
  SceSaveDataDirName_0 *dirName;
  SceSaveDataParam_0 *param;
  void *userData;
  uint8_t reserved[32];
};

struct uGUILogin00;

enum cSystemCheck::RESULT : __int32
{
  RESULT_WAIT = 0x0,
  RESULT_SUCCESS = 0x1,
  RESULT_ERROR = 0x2,
};

struct __cppobj cSystemCheck : MtObject
{
  rGUIMessage *mpSystemRes;
  rGUIMessage *mpCommonRes;
  uGUISystemMsg *mpGUISystemMsg;
  u32 mFlag;
  s32 mVal;
  u8 mRno0;
  u8 mRno1;
  u8 mRno2;
  u8 mRno3;
  u8 mSelectType;
  u8 mChoiceNo;
  cSystemCheck::RESULT mResult;
  f32 mTrophyProgress;
};

struct __cppobj aLauncher : cArea
{
  TICKET mArcTicket;
  MtString mLoginHost;
  u32 mLoginPort;
  u32 mRetryCount;
  MtNetError mTicketError;
  u32 mDialogHandle;
  f32 mFTimer;
  f32 dialogWaitTimer;
  f32 dialogDispTimer;
  s32 mInputCursor;
  MT_CHAR mUserID[64];
  MT_CHAR mPassword[64];
  rSoundStreamRequest *mprTitleBGM;
  uGUILogin00 *mpGUILogin;
  bool mDebugDraw;
  cSystemCheck mSystemCheck;
};

struct __cppobj aLauncher::MyDTI : MtDTI
{
};

enum aLauncher::$D69B92E76BC6CDCCD8E1A5E28AB461A4 : __int32
{
  RNO_0_LOAD_INIT = 0x0,
  RNO_0_LOAD_MOVE = 0x1,
};

enum aLauncher::$3B1AEFD408FAC2BA5406DBEB9608D6BC : __int32
{
  MOVE_R0_INIT_1 = 0x0,
  MOVE_R0_SYSTEM_CHECK = 0x1,
  MOVE_R0_GET_SERVER_ENV_LIST = 0x2,
  MOVE_R0_SELECT_SERVER_ENV = 0x3,
  MOVE_R0_LOGIN_PSN = 0x4,
  MOVE_R0_GET_START_ADDR = 0x5,
  MOVE_R0_GET_START_ADDR_PSN_CHECK = 0x6,
  MOVE_R0_PSN_CHECK = 0x7,
  MOVE_R0_PREPARE = 0x8,
  MOVE_R0_TOP = 0x9,
  MOVE_R0_VER_CHECK = 0xA,
  MOVE_R0_VER_UP = 0xB,
  MOVE_R0_BOOT_CHECK = 0xC,
  MOVE_R0_TO_GAME = 0xD,
  MOVE_R0_TO_EXIT = 0xE,
  MOVE_R0_EXIT = 0xF,
};

enum aLauncher::$B990B4B2459AB580629D292FF9940541 : __int32
{
  GET_SERVER_ENV_LIST_R1_INIT = 0x0,
  GET_SERVER_ENV_LIST_R1_REQ = 0x1,
  GET_SERVER_ENV_LIST_R1_WAIT = 0x2,
  GET_SERVER_ENV_LIST_R1_EXIT_SUCCESS = 0x3,
  GET_SERVER_ENV_LIST_R1_EXIT_FAILED = 0x4,
};

enum aLauncher::$00A9FC85681DAA2215C03830B39F5C64 : __int32
{
  SELECT_SERVER_ENV_R1_INIT = 0x0,
  SELECT_SERVER_ENV_R1_MOVE = 0x1,
  SELECT_SERVER_ENV_R1_EXIT_SUCCESS = 0x2,
  SELECT_SERVER_ENV_R1_EXIT_FAILED = 0x3,
};

enum aLauncher::$6B8B148606BA08751EAC4BC2FD034D18 : __int32
{
  GET_START_ADDR_R1_INIT = 0x0,
  GET_START_ADDR_R1_REQ = 0x1,
  GET_START_ADDR_R1_DIALOG_WAIT = 0x2,
  GET_START_ADDR_R1_WAIT = 0x3,
  GET_START_ADDR_R1_ERROR = 0x4,
  GET_START_ADDR_R1_EXIT_SUCCESS = 0x5,
  GET_START_ADDR_R1_EXIT_FAILED = 0x6,
};

enum aLauncher::$738EAF95D7A786E5BAA801F5DC9D4B98 : __int32
{
  LOGIN_R1_INIT = 0x0,
  LOGIN_R1_LOGIN_REQ = 0x1,
  LOGIN_R1_LOGIN_WAIT = 0x2,
  LOGIN_R1_DIALOG_REQ = 0x3,
  LOGIN_R1_DIALOG_AGE_REQ = 0x4,
  LOGIN_R1_DIALOG_CHAT_REQ = 0x5,
  LOGIN_R1_DIALOG_UGC_REQ = 0x6,
  LOGIN_R1_DIALOG_WAIT = 0x7,
  LOGIN_R1_DIALOG_AGE_WAIT = 0x8,
  LOGIN_R1_DIALOG_CHAT_WAIT = 0x9,
  LOGIN_R1_DIALOG_UGC_WAIT = 0xA,
  LOGIN_R1_TICKET_REQ = 0xB,
  LOGIN_R1_TICKET_DIALOG_WAIT = 0xC,
  LOGIN_R1_TICKET_WAIT = 0xD,
  LOGIN_R1_TICKET_ERROR = 0xE,
  LOGIN_R1_EXIT_SUCCESS = 0xF,
  LOGIN_R1_EXIT_FAILED = 0x10,
  LOGIN_R1_EXIT_NOTSIGNIN = 0x11,
};

enum aLauncher::$8614E910DF144008D55BCD5EE4AC0D80 : __int32
{
  PSN_CHECK_R1_INIT = 0x0,
  PSN_CHECK_R1_START = 0x1,
  PSN_CHECK_R1_MOVE = 0x2,
  PSN_CHECK_R1_EXIT_SUCCESS = 0x3,
  PSN_CHECK_R1_EXIT_FAILED = 0x4,
};

enum aLauncher::$F2E209071FD45BDEBF78C8918FC2F62D : __int32
{
  PREPARE_R1_INIT = 0x0,
  PREPARE_R1_REQ = 0x1,
  PREPARE_R1_DIALOG_WAIT = 0x2,
  PREPARE_R1_WAIT = 0x3,
  PREPARE_R1_PS3_CONSUME_ENTITLEMENT_INIT = 0x4,
  PREPARE_R1_PS3_CONSUME_ENTITLEMENT_REQ = 0x5,
  PREPARE_R1_PS3_CONSUME_ENTITLEMENT_WAIT = 0x6,
  PREPARE_R1_ERROR = 0x7,
  PREPARE_R1_EXIT_SUCCESS = 0x8,
  PREPARE_R1_EXIT_FAILED = 0x9,
};

enum aLauncher::$BF75C3DF74F2C99CF0C66FD09C7034BF : __int32
{
  TOP_R1_INIT = 0x0,
  TOP_R1_START = 0x1,
  TOP_R1_MOVE = 0x2,
  TOP_R1_EXIT_SUCCESS = 0x3,
  TOP_R1_EXIT_FAILED = 0x4,
};

enum aLauncher::$345E95B27119DCD6D8B9DD79B3D6DA50 : __int32
{
  VER_CHECK_R1_INIT = 0x0,
  VER_CHECK_R1_EXE_REQ = 0x1,
  VER_CHECK_R1_EXE_WAIT = 0x2,
  VER_CHECK_R1_EXE_UPDATE_REQ = 0x3,
  VER_CHECK_R1_EXE_UPDATE_WAIT = 0x4,
  VER_CHECK_R1_DATA_REQ = 0x5,
  VER_CHECK_R1_DATA_WAIT = 0x6,
  VER_CHECK_R1_EXIT_SUCCESS = 0x7,
  VER_CHECK_R1_EXIT_FAILED = 0x8,
};

enum aLauncher::$7EB39FCF1E15789FD687F634390986E6 : __int32
{
  VER_UP_R1_INIT = 0x0,
  VER_UP_R1_FULL_LIST_CHECK_REQ = 0x1,
  VER_UP_R1_FULL_LIST_CHECK_WAIT = 0x2,
  VER_UP_R1_PURGE_LIST_CHECK_REQ = 0x3,
  VER_UP_R1_PURGE_LIST_CHECK_WAIT = 0x4,
  VER_UP_R1_UPDATE_REQ = 0x5,
  VER_UP_R1_UPDATE_START_WAIT = 0x6,
  VER_UP_R1_UPDATE_WAIT = 0x7,
  VER_UP_R1_BOOT_LIST_CHECK_REQ = 0x8,
  VER_UP_R1_BOOT_LIST_CHECK_WAIT = 0x9,
  VER_UP_R1_EXIT_SUCCESS = 0xA,
  VER_UP_R1_EXIT_FAILED = 0xB,
};

enum aLauncher::$BC4FBD6AA7E1AC77BFAB4BEF8541251D : __int32
{
  BOOT_CHECK_R1_INIT = 0x0,
  BOOT_CHECK_R1_FULL_LIST_CHECK_REQ = 0x1,
  BOOT_CHECK_R1_FULL_LIST_CHECK_WAIT = 0x2,
  BOOT_CHECK_R1_BOOT_LIST_CHECK_REQ = 0x3,
  BOOT_CHECK_R1_BOOT_LIST_CHECK_WAIT = 0x4,
  BOOT_CHECK_R1_EXIT_SUCCESS = 0x5,
  BOOT_CHECK_R1_EXIT_FAILED = 0x6,
};

enum aLauncher::$CF10CA3847896F9DD4C27D6B80E5F133 : __int32
{
  TO_EXIT_R1_INIT = 0x0,
  TO_EXIT_R1_DIALOG_REQ = 0x1,
  TO_EXIT_R1_DIALOG_WAIT = 0x2,
  TO_EXIT_R1_EXIT_SUCCESS = 0x3,
  TO_EXIT_R1_EXIT_FAILED = 0x4,
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<MtStringEx<256>,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<MtStringExURL,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<MtStringEx<256>,true,1> mThis;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<int,false,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<s32,false,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<int,false,1> mThis;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::http_patch::SucceedFileInfo,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::SucceedFileInfo,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::http_patch::SucceedFileInfo,true,1> mThis;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<MtString,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<MtString,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<MtString,true,1> mThis;
};

struct __cppobj rSoundStreamRequest::MyDTI : MtDTI
{
};

struct rSoundStreamRequest::StreamInfo
{
  uintptr mPathOffset;
  u32 mStreamLength;
  u32 mSampleNum;
  u32 mChannelNum;
  u32 mSampleRate;
  s32 mLoopStart;
  s32 mLoopEnd;
  u32 mDTIID;
  u32 mFormat;
};

struct __cppobj rSoundSource::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) rSoundSource::STREAM_CONTEXT
{
  void *mpBuffer;
  u32 mBufferSize;
  u32 *mpIdentifier;
  void *mpData;
  u32 mCurrentSample;
  u32 mProcessSampleNum;
  u32 mChannelSize;
  void *mpPreloadBuffer;
  u32 mPreloadBufferSize;
};

struct __cppobj MtFileStream::MyDTI : MtDTI
{
};

struct __cppobj MtFile::MyDTI : MtDTI
{
};

enum MtFile::DRIVETYPE : __int32
{
  DRIVETYPE_APP = 0x0,
  DRIVETYPE_SAVEDATA = 0x1,
  DRIVETYPE_ADDCONT = 0x2,
  DRIVETYPE_APPHOME = 0x3,
  DRIVETYPE_SD = 0x4,
  DRIVETYPE_UX = 0x5,
  DRIVETYPE_USB = 0x6,
  DRIVETYPE_DEVELOP = 0x7,
  DRIVETYPE_LAUNCH = 0x8,
  DRIVETYPE_TEMP = 0x9,
  DRIVETYPE_DOWNLOAD = 0xA,
  DRIVETYPE_ABS = 0xB,
  DRIVETYPE_AVCONTENTS = 0xC,
  DRIVETYPE_HOME = 0xD,
};

typedef void (*MtFile::PATH_DRIVETYPE_FUNC)(MT_CTSTR, MtFile::DRIVETYPE *, u32 *, MT_STR);

typedef bool (*MtFile::DLC_ISEXIST_FUNC)(MT_CTSTR);

typedef MtFile::DLC_HANDLE (*MtFile::DLC_OPEN_FUNC)(MT_CTSTR);

typedef u32 (*MtFile::DLC_GET_SIZE_FUNC)(MtFile::DLC_HANDLE);

typedef u32 (*MtFile::DLC_READ_FUNC)(MtFile::DLC_HANDLE, void *, u32);

enum MtFile::SEEKBASE : __int32
{
  SEEKBASE_SET = 0x1,
  SEEKBASE_CUR = 0x2,
  SEEKBASE_END = 0x3,
};

typedef u32 (*MtFile::DLC_SEEK_FUNC)(MtFile::DLC_HANDLE, u32, MtFile::SEEKBASE);

typedef void (*MtFile::DLC_CLOSE_FUNC)(MtFile::DLC_HANDLE);

typedef u32 (*MtFile::DLC_READASYNC_FUNC)(MtFile::DLC_HANDLE, void *, u32);

typedef u32 (*MtFile::DLC_READWAIT_FUNC)(MtFile::DLC_HANDLE);

struct __attribute__((aligned(8))) MtFile::AsyncThreadPool::Context
{
  ScePthread mThreadHandle;
  SceKernelSema mWaitHandle;
  SceKernelSema mDoneHandle;
  MtFile *mpFile;
  bool mbUsed;
  bool mbExit;
};

struct MtFile::AsyncThreadPool
{
  MtFile::AsyncThreadPool::Context mContext[3];
  MtCriticalSection mCS;
};

enum MtFile::TIME : __int32
{
  TIME_CREATION = 0x0,
  TIME_LAST_ACESS = 0x1,
  TIME_LAST_WRITE = 0x2,
};

typedef int DIRECTORY_HANDLE;

typedef s32 MtFile::FileInfo::FileError;

struct __cppobj __attribute__((aligned(8))) MtFile::FileInfo : MtObject
{
  u64 mSize;
  MtString mName;
  MtString mType;
  u32 mAttr;
  MtTime mCreation;
  MtTime mLastAccess;
  MtTime mLastWrite;
  DIRECTORY_HANDLE mFindHandle;
  MtFile::FileInfo::FileError mLastErrorCode;
  char *mpFindBuffer;
  u32 mStatBlockSize;
  u32 mFindReadSize;
  u32 mFindReadPos;
  MT_CHAR mFindPath[1024];
  MT_CHAR mFindName[1024];
};

struct __cppobj MtFile::FileInfo::MyDTI : MtDTI
{
};

struct __cppobj cSystemCheck::MyDTI : MtDTI
{
};

struct __cppobj sNetworkExt::MyDTI : MtDTI
{
};

enum sNetworkExt::NET_STAT : __int32
{
  NET_STAT_NONE = 0x0,
  NET_STAT_REQ = 0x1,
  NET_STAT_SUCCESS = 0x2,
  NET_STAT_CANCEL = 0x3,
  NET_STAT_ERROR = 0x4,
  NET_STAT_NOTSIGNIN = 0x5,
  NET_NUM = 0x6,
};

enum sNetworkExt::LOGIN_RET_STAT : __int32
{
  LOGIN_STAT_CONTINUE = 0x0,
  LOGIN_STAT_OK = 0x1,
  LOGIN_STAT_CANCEL = 0x2,
};

struct __cppobj sNetwork::MyDTI : MtDTI
{
};

struct SceNpTitleId
{
  char id[13];
  uint8_t padding[3];
};

typedef SceNpTitleId SceNpTitleId_0;

struct SceNpTitleSecret
{
  uint8_t data[128];
};

typedef SceNpTitleSecret SceNpTitleSecret_0;

typedef uint32_t SceNpServiceLabel;

struct SceNpClientId
{
  char id[129];
  uint8_t padding[7];
};

typedef SceNpClientId SceNpClientId_0;

typedef SceNpAgeRestriction SceNpAgeRestriction_0;

struct SceNpContentRestriction
{
  size_t size;
  int8_t defaultAgeRestriction;
  char padding[3];
  int32_t ageRestrictionCount;
  const SceNpAgeRestriction_0 *ageRestriction;
};

typedef SceNpContentRestriction SceNpContentRestriction_0;

struct __attribute__((aligned(8))) MtNetCore::InitParam
{
  SceNpTitleId_0 mNpTitleId;
  SceNpTitleSecret_0 mNpTitleSecret;
  SceNpServiceLabel mNpServiceLabel;
  SceNpClientId_0 mNpClientId;
  SceNpContentRestriction_0 mNpContentRestriction;
  bool mIsShowErrorDisuse;
  bool mIsPrgContextDisuse;
  bool mIsErrorContextDisuse;
  bool mIsAvailContextDisuse;
  bool mIsAutoTicketDisuse;
  bool mIsTrophyDisuse;
  bool mIsChatDisuse;
  bool mIsUgcDisuse;
  bool mIsHttpClientDisuse;
  bool mIsPsPlusDisuse;
  bool mIsPsnTicketDisuse;
  bool mIsPsnFriendDisuse;
  bool mIsPsnProfileDisuse;
  bool mIsPsnPresenceDisuse;
  bool mIsPsnMatchingDisuse;
  bool mIsPsnRankingDisuse;
  bool mIsPsnTitleStorageDisuse;
  bool mIsPsnUserStorageDisuse;
  bool mIsPsnPartyDisuse;
  bool mIsPsnEntitlementDisuse;
};

struct SceNpCountryCode
{
  char data[2];
  char term;
  char padding[1];
};

typedef SceNpCountryCode SceNpCountryCode_0;

struct SceNpAgeRestriction
{
  SceNpCountryCode_0 countryCode;
  int8_t age;
  uint8_t padding[3];
};

struct __cppobj MtNetObject::MyDTI : MtDTI
{
};

enum MtNetContext::$42A09C1E6F7BA55726448154D3D9190B : __int32
{
  SIGN_IN_LEVEL_NONE = 0x0,
  SIGN_IN_LEVEL_USER = 0x1,
  SIGN_IN_LEVEL_AUTH = 0x2,
};

struct MtNetTime
{
  int (**_vptr$MtNetTime)(void);
  MtCriticalSection mCS;
  MtNetTime::Total mTotalTime;
  t64 mBaseMsecs;
};

struct __cppobj MtNetUniqueId::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Context::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Session::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::BlockPool::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::SessionDatabase::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::SearchKeyListPtr::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::SearchKeyPtr::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Member::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Route::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Match::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::SessionListener::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::SessionDriver::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::SearchFilterListPtr::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::SearchFilterPtr::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Callback::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Callback::Entry::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Callback::Queue::MyDTI : MtDTI
{
};

struct nNetwork::Callback::Header
{
  u8 mCallback;
  s32 mSrcIndex;
};

struct nNetwork::Callback::SelfHeader
{
  u8 mCallback;
  u32 mSrcIndex;
  MtNetTime::Total mPushTime;
};

struct __cppobj nNetwork::BlockQueue::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::BlockBuffer : MtObject
{
  nNetwork::BlockPool *mpPool;
  void **mBlockList;
  u32 mBlockMax;
  u32 mBlockHead;
  u32 mBlockTail;
  u32 mHead;
  u32 mTail;
};

struct __cppobj nNetwork::BlockBuffer::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::TagChecker::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) cRemoteCall:96 : MtObject
{
  u32 mAttribute;
};

struct __cppobj nNetwork::TagChecker::RpcSyncReq : cRemoteCall:96
{
  s32 mMemberIndex;
  u32 mMemberId;
  u32 mTag;
};

struct __cppobj __attribute__((aligned(8))) cRemoteCall : MtObject
{
  u32 mAttribute;
};

struct __cppobj nNetwork::TagChecker::RpcSyncReq::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::TagChecker::RpcSyncAns : nNetwork::TagChecker::RpcSyncReq
{
};

struct __cppobj nNetwork::TagChecker::RpcSyncAns::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::nSharedMemory2::Object::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nSharedMemory2::CNode : MtObject
{
  s32 mMemberId;
};

struct __cppobj nNetwork::nSharedMemory2::CNode::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::nSharedMemory2::CConsistentHash::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::nSharedMemory2::CProtocol::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(4))) nNetwork::nSharedMemory2::CRecord : MtObject
{
  nNetwork::nSharedMemory2::CNode *mpNode;
  MtString mName;
  s32 mLock;
  bool mReliable;
};

struct __cppobj nNetwork::nSharedMemory2::CRecord::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::nAchievement::Object::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(4))) nNetwork::RpcNetSystem_Entry : cRemoteCall:96
{
  bool mEntry;
};

struct __cppobj nNetwork::RpcNetSystem_Entry::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::RpcNetSystem_Match : cRemoteCall:96
{
  bool mMatch;
  u64 mList;
};

struct __cppobj nNetwork::RpcNetSystem_Match::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::RpcNetSystem_Terminate : cRemoteCall:96
{
  bool mTerminate;
  u64 mList;
};

struct __cppobj nNetwork::RpcNetSystem_Terminate::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::RpcNetSystem_Leave : cRemoteCall
{
};

struct __cppobj nNetwork::RpcNetSystem_Leave::MyDTI : MtDTI
{
};

struct MtNetSession::MemberList
{
  s32 mValidNum;
  MtNetSession::Member mMember[16];
};

struct __cppobj MtMap::MyDTI : MtDTI
{
};

struct std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>
{
  __int8 gap0[1];
};

struct __cppobj std::_List_simple_types<value_type> : std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>
{
};

struct std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >
{
  __int8 gap0[1];
};

struct std::_Allocator_base<nNetwork::nSharedMemory2::Object::ReqLock>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<nNetwork::nSharedMemory2::Object::ReqLock> : std::_Allocator_base<nNetwork::nSharedMemory2::Object::ReqLock>
{
};

struct std::_Allocator_base<std::_List_node<value_type,_Voidptr> >
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<std::_List_node<value_type,_Voidptr> > : std::_Allocator_base<std::_List_node<value_type,_Voidptr> >
{
};

struct __cppobj MtStlAllocator<std::_List_node<value_type,_Voidptr> > : std::allocator<std::_List_node<value_type,_Voidptr> >
{
};

struct __cppobj std::_Wrap_alloc<MtStlAllocator<std::_List_node<value_type,_Voidptr> > > : MtStlAllocator<std::_List_node<value_type,_Voidptr> >
{
};

struct std::_Get_pointer_type<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::allocator_traits<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::_Get_size_type<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::_Get_const_void_pointer_type<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::_If<false,int,value_type>
{
  __int8 gap0[1];
};

struct std::_Get_const_pointer_type<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::_If<false,const int,const value_type>
{
  __int8 gap0[1];
};

struct std::_Iterator_base0
{
  std::_Container_proxy *_Myproxy;
  std::_Iterator_base12 *_Mynextiter;
};

struct __cppobj std::_Iterator012<std::bidirectional_iterator_tag,value_type,difference_type,const_pointer,const_reference,std::_Iterator_base0> : std::_Iterator_base0
{
};

typedef std::_List_val<_Val_types>::_Nodeptr std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0>::_Nodeptr;

struct __cppobj std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0> : std::_Iterator012<std::bidirectional_iterator_tag,value_type,difference_type,const_pointer,const_reference,std::_Iterator_base0>
{
  std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0>::_Nodeptr _Ptr;
};

struct __cppobj std::_List_const_iterator<_Myt> : std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0>
{
};

struct __cppobj std::_List_iterator<_Myt> : std::_List_const_iterator<_Myt>
{
};

struct std::initializer_list<nNetwork::nSharedMemory2::Object::ReqLock>;

struct __cppobj std::_List_unchecked_iterator<_Myt> : std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0>
{
};

struct std::reverse_iterator<iterator>;

struct std::reverse_iterator<const_iterator>;

struct __cppobj MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> : std::allocator<nNetwork::nSharedMemory2::Object::ReqLock>
{
};

enum MtNetAchievement::TrophyState : __int32
{
  TrophyState_None = 0x0,
  TrophyState_CreateContext = 0x1,
  TrophyState_RegisterContextReq = 0x2,
  TrophyState_RegisterContextWait = 0x3,
  TrophyState_Available = 0x4,
  TrophyState_DestroyContext = 0x5,
  TrophyState_NotAvailable = 0x6,
};

typedef int32_t SceNpTrophyContext;

typedef uint32_t SceNpTrophyFlagMask;

struct SceNpTrophyFlagArray
{
  SceNpTrophyFlagMask flagBits[4];
};

typedef SceNpTrophyFlagArray SceNpTrophyFlagArray_0;

struct __attribute__((aligned(8))) MtNetAchievement::TrophyUserInfo
{
  bool isValid;
  bool isRemove;
  bool isRequest;
  SceUserServiceUserId sceUserId;
  MtNetAchievement::TrophyState state;
  SceNpTrophyContext npContext;
  uint32_t unlockNum;
  SceNpTrophyFlagArray_0 unlockCache;
  s32 trophyRequestNum;
  u8 trophyRequestTbl[128];
  s32 trophyResultTbl[128];
  MtThread *threadPtr;
  s32 threadResult;
};

struct __cppobj MtNetAchievement : MtNetObject, MtNetRequestController::Listener
{
  MtNetRequestController mRequestController;
  MtNetAchievement::Listener *mpListener;
  MtNetAchievement::TrophyUserInfo mUserInfoTbl[4];
};

struct MtNetAchievement::IdList
{
  s32 mNum;
  s32 mId[128];
};

enum nNet::ERRCODE : __int32
{
  ERRCODE_UNKNOWN = 0x40000000,
  ERRCODE_PSN_TICKET_GET = 0x40000001,
  ERRCODE_PSN_TICKET_CHECK = 0x40000002,
  ERRCODE_PSN_PARENTAL_LOCK_CHAT = 0x40000003,
  ERRCODE_PSN_PARENTAL_LOCK_UGC = 0x40000004,
  ERRCODE_NUM = 0x40000005,
};

enum nPlatformUtil::FLAG : __int32
{
  FLAG_SCREENSHOT = 0x1,
  FLAG_RECORDING = 0x2,
  FLAG_LIVESTREAMING = 0x4,
  FLAG_REMOTEPLAY = 0x8,
  FLAG_SHAREPLAY = 0x10,
};

struct nPlatformUtil::nSystemService::EVENT_TYPE
{
  __int8 gap0[1];
};

enum nPlatformUtil::nSystemService::EVENT_TYPE::DummyName : __int32
{
  ON_RESUME = 0x0,
  GAME_LIVE_STREAMING_STATUS_UPDATE = 0x1,
  SESSION_INVITATION = 0x2,
  ENTITLEMENT_UPDATE = 0x3,
  GAME_CUSTOM_DATA = 0x4,
  LAUNCH_APP = 0x5,
  APP_LAUNCH_LINK = 0x6,
  INBACKGROUNDEXECUTION = 0x7,
  MAX_0 = 0x8,
};

struct nPlatformUtil::nSystemService::CALL_TYPE
{
  __int8 gap0[1];
};

enum nPlatformUtil::nSystemService::CALL_TYPE::DummyName : __int32
{
  ONCE = 0x0,
  BEGIN = 0x1,
  END = 0x2,
};

struct nPlatformUtil::nGameLiveStram::POSTYPE
{
  __int8 gap0[1];
};

enum nPlatformUtil::nGameLiveStram::POSTYPE::DummyName : __int32
{
  TOPLEFT = 0x0,
  TOPRIGHT = 0x1,
  BOTTOMLEFT = 0x2,
  BOTTOMRIGHT = 0x3,
};

struct nPlatformUtil::nSocialFeedback::FEEDBACK_OPTION
{
  __int8 gap0[1];
};

enum nPlatformUtil::nSocialFeedback::FEEDBACK_OPTION::DummyName : __int32
{
  NONE = 0x0,
  SPOILER_TAG = 0x1,
};

typedef nPlatformUtil::nSocialFeedback::FEEDBACK_OPTION::DummyName nPlatformUtil::nSocialFeedback::FEEDBACK_OPTION::TYPE;

typedef MT_CHAR nPlatformUtil::nSocialFeedback::FROM[553];

struct __attribute__((packed)) __attribute__((aligned(1))) nPlatformUtil::nSocialFeedback::FEEDBACK_COMMON:4488
{
  MtTime time_stamp;
  nPlatformUtil::nSocialFeedback::FROM from;
};

typedef MT_CHAR nPlatformUtil::nSocialFeedback::BODY[841];

struct __cppobj nPlatformUtil::nSocialFeedback::FEEDBACK_MESSAGE : nPlatformUtil::nSocialFeedback::FEEDBACK_COMMON:4488
{
  nPlatformUtil::nSocialFeedback::BODY body;
  nPlatformUtil::nSocialFeedback::FEEDBACK_OPTION::TYPE option;
};

struct __attribute__((aligned(8))) nPlatformUtil::nSocialFeedback::FEEDBACK_COMMON
{
  MtTime time_stamp;
  nPlatformUtil::nSocialFeedback::FROM from;
};

struct __attribute__((packed)) __attribute__((aligned(4))) nPlatformUtil::nSocialFeedback::FEEDBACK_COMMON:4512
{
  MtTime time_stamp;
  nPlatformUtil::nSocialFeedback::FROM from;
};

struct __cppobj nPlatformUtil::nSocialFeedback::FEEDBACK_COMMAND : nPlatformUtil::nSocialFeedback::FEEDBACK_COMMON:4512
{
  u32 command_id;
};

struct nPlatformUtil::nSharePlay::APPROVE_MODE
{
  __int8 gap0[1];
};

enum nPlatformUtil::nSharePlay::APPROVE_MODE::DummyName : __int32
{
  ALL_ON = 0x0,
  SCREEN_ONLY = 0x1,
  ALL_OFF = 0x2,
};

struct nPlatformUtil::nSharePlay::STATUS
{
  __int8 gap0[1];
};

enum nPlatformUtil::nSharePlay::STATUS::DummyName : __int32
{
  DORMANT = 0x0,
  READY = 0x1,
  CONNECTED = 0x2,
};

struct nPlatformUtil::nSharePlay::CONTROLLER_MODE
{
  __int8 gap0[1];
};

enum nPlatformUtil::nSharePlay::CONTROLLER_MODE::DummyName : __int32
{
  NONE_0 = 0x0,
  WATCHING_HOST = 0x1,
  PLAYING_AS_HOST = 0x2,
  PLAYING_WITH_HOST = 0x3,
};

enum SceNpState : __int32
{
  SCE_NP_STATE_UNKNOWN = 0x0,
  SCE_NP_STATE_SIGNED_OUT = 0x1,
  SCE_NP_STATE_SIGNED_IN = 0x2,
};

enum SceNpGamePresenceStatus : __int32
{
  SCE_NP_GAME_PRESENCE_STATUS_OFFLINE = 0x0,
  SCE_NP_GAME_PRESENCE_STATUS_ONLINE = 0x1,
};

enum sDialogBase::$BD80CA61962FF26098FF51CC98A04AFF : __int32
{
  CATEGORY_NONE = 0x0,
  CATEGORY_ERROR = 0x1,
  CATEGORY_SIGNOUT = 0x2,
  CATEGORY_UNLINK = 0x3,
  CATEGORY_CONNECTING = 0x4,
  CATEGORY_SYS_CHECK = 0x5,
};

struct __cppobj sBrowser::MyDTI : MtDTI
{
};

struct sBrowser::FONT_WORK_STATE
{
  __int8 gap0[1];
};

enum sBrowser::$C88A91A20DC094A1BC23DDCC08C9EF85 : __int32
{
  BROWSER_STATUS_NONE = 0x0,
  BROWSER_STATUS_EXEC = 0x1,
  BROWSER_STATUS_REQ_EXEC = 0x2,
  BROWSER_STATUS_CLOSE = 0x3,
  BROWSER_STATUS_REQ_CLOSE = 0x4,
  BROWSER_STATUS_RESTART = 0x5,
  BROWSER_STATUS_REQ_RESTART = 0x6,
  BROWSER_STATUS_REQ_CALL_JS_FUNC = 0x7,
};

struct stBrowserSizeParam
{
  char *mpName;
  int mWidth;
  int mHeight;
};

struct __cppobj cBrowser::MyDTI : MtDTI
{
};

struct __cppobj cBrowserApplicationTask::MyDTI : MtDTI
{
};

struct __cppobj cBrowserRenderDevicePS4::MyDTI : MtDTI
{
};

struct __cppobj cBrowserKeepString::MyDTI : MtDTI
{
};

struct __cppobj cBrowserRequest : MtObject
{
  u32 mRequest;
  u32 mStatus;
  MtString mString;
};

struct __cppobj rTextureMemory::MyDTI : MtDTI
{
};

struct __cppobj sKeyboardInterface::MyDTI : MtDTI
{
};

enum sKeyboardInterface::KEYBOARD_PANEL_TYPE : __int32
{
  KEYBOARD_PANEL_DEFAULT = 0x0,
  KEYBOARD_PANEL_JAPANESE = 0x0,
  KEYBOARD_PANEL_JAPANESE_HIRAGANA = 0x0,
  KEYBOARD_PANEL_JAPANESE_KATAKANA = 0x0,
  KEYBOARD_PANEL_ALPHABET_FULL_WIDTH = 0x1,
  KEYBOARD_PANEL_NUMERAL_FULL_WIDTH = 0x4,
  KEYBOARD_PANEL_ENGLISH = 0x1,
  KEYBOARD_PANEL_ALPHABET = 0x1,
  KEYBOARD_PANEL_NUMERAL = 0x4,
  KEYBOARD_PANEL_PASSWORD = 0x0,
};

enum LoadArcList : __int32
{
  BGM_SYSTEM = 0x0,
  BROWSER = 0x1,
  LOAD_ARC_LIST_NUM = 0x2,
};

struct __cppobj via::module::http_patch::FileController::MyDTI : MtDTI
{
};

struct via::module::http_patch::FileController::FILE_ARCHIVE
{
  MT_CHAR path[128];
  u32 type;
  u32 datasize;
  unsigned __int32 orgsize : 29;
  unsigned __int32 quality : 3;
  u32 offset;
};

enum via::module::http_patch::HttpPatchManager::DownloadFolderType : __int32
{
  DownloadFolder_NULL = 0x0,
  DownloadFolder_RECOVER = 0x1,
  DownloadFolder_REPLACE = 0x2,
  DownloadFolder_PATCH = 0x3,
};

struct MtStringEx<64>
{
  u32 mLength;
  char mStr[64];
};

struct __attribute__((aligned(8))) via::module::http_patch::ExeFileInfo
{
  u32 ver;
  MtStringEx<64> name;
  size_t size;
  u8 binary_hash[32];
  u32 attr;
};

struct __cppobj via::module::http_patch::ParallelsFileData::MyDTI : MtDTI
{
};

struct via::module::network::utility::HttpDownloadManager::Listener
{
  int (**_vptr$Listener)(void);
};

enum via::module::http_patch::FileListener::Phase : __int32
{
  Phase_None_0 = 0x0,
  Phase_Request = 0x1,
  Phase_Running = 0x2,
  Phase_Finished = 0x3,
  Phase_Failed_0 = 0x4,
  Phase_Abort = 0x5,
};

struct __cppobj __attribute__((aligned(8))) via::module::http_patch::ParallelsListenerManager : via::module::network::utility::HttpDownloadManager::Listener
{
  via::module::http_patch::FileListener **mListenerPtr;
  via::module::http_patch::FileListener::Phase mPhase;
  HPDErrCategory mEcType;
  s32 mErCode;
  MtCriticalSection mCreateListenerEventMutex;
  s32 mDownloadFileNum;
  s64 mDownloadSize;
  s32 mFailedCount;
  const bool AuthorizationOutside;
  const u32 MaxTaskCount;
};

enum via::module::http_patch::PacketSaveType : __int32
{
  PacketSaveType_None = 0x0,
  PacketSaveType_Temp = 0x1,
  PacketSaveType_DownloadFromTemp = 0x2,
  PacketSaveType_Download = 0x3,
  PacketSaveType_Memory = 0x4,
  PacketSaveType_MAX = 0x5,
};

struct SceSha256Context
{
  uint32_t h[8];
  uint8_t initialized;
  uint8_t pad[3];
  uint16_t usRemains;
  uint16_t usComputed;
  uint64_t ullTotalLen;
  uint8_t buf[64];
  uint8_t result[32];
};

typedef SceSha256Context SceSha256Context_0;

struct via::hash_algorithm_selector<0>
{
  SceSha256Context_0 mContext;
};

typedef via::hash_algorithm_selector<0> via::hash<0>::hash_type;

struct via::hash<0>
{
  via::hash<0>::hash_type mHash;
};

typedef via::hash<0> via::sha256;

struct via::module::http_patch::FileListener
{
  int (**_vptr$FileListener)(void);
  via::module::http_patch::FileListener::Phase mPhase;
  via::module::http_patch::PacketSaveType mSaveType;
  bool mDirectHash;
  HPDErrCategory mEcType;
  s32 mErCode;
  via::module::http_patch::FileController *mFileControllerPtr;
  MtStringEx<256> mTempPath;
  MtString mCopyFileName;
  MtFile mhTempFile;
  MtFileStream mhTempFileStream;
  u8 *mStoreBufferPtr;
  size_t mStoreMaxSize;
  size_t mStoreOffset;
  bool mDownloadSplit;
  size_t mDownloadSize;
  size_t mDownloadFileSize;
  void *mTempBufferBlockPtr;
  size_t mDownloadSplitSize;
  via::sha256 mHash;
  via::sha256hash_t mHashDigest;
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::SucceedFileInfo,true,1> via::module::http_patch::httpdl_array_SucceedFileInfo;

struct __cppobj via::module::http_patch::ParallelsFileListenerManager : via::module::http_patch::ParallelsListenerManager
{
  const via::module::http_patch::parallelfiledata_array_t *mFileDatas;
  via::module::http_patch::httpdl_array_SucceedFileInfo mSucceedFileInfoArray;
  MtFile mDownloadedFileHandle;
  MtFileStream mDownloadedFileStream;
  MtCriticalSection mDownloadedFileMutex;
  MtCriticalSection mMutex_Period_CreateFileListener;
  MtString downloaded_path;
};

enum via::module::ModuleError_Type : __int32
{
  ModuleError_None = 0x0,
  ModuleError_Critical = 0x1,
  ModuleError_NoMemory = 0x2,
  ModuleError_CreateFailed = 0x3,
};

enum via::HashType : __int32
{
  HashType_SHA256 = 0x0,
};

struct __cppobj MtPerformanceTimer::MyDTI : MtDTI
{
};

struct __cppobj sHttpPatch::MyDTI : MtDTI
{
};

enum sHttpPatch::$A38464481F6C5C1AACEF712F0255B3D2 : __int32
{
  FLOW_UPDATE_FILE_INIT = 0x0,
  FLOW_UPDATE_FILE_REQ = 0x1,
  FLOW_UPDATE_FILE_START_WAIT = 0x2,
  FLOW_UPDATE_FILE_WEB_WAIT = 0x3,
  FLOW_UPDATE_FILE_WAIT = 0x4,
  FLOW_UPDATE_FILE_ERROR = 0x5,
  FLOW_UPDATE_FILE_EXIT = 0x6,
  FLOW_UPDATE_FILE_SUSPEND = 0x63,
};

enum sHttpPatch::$58DB7D0A164B0FD008E45976BDEB639A : __int32
{
  FLOW_BOOT_LIST_CHECK_INIT = 0x0,
  FLOW_BOOT_LIST_CHECK_REQ = 0x1,
  FLOW_BOOT_LIST_CHECK_WAIT = 0x2,
  FLOW_BOOT_LIST_CHECK_ERROR = 0x3,
  FLOW_BOOT_LIST_CHECK_EXIT = 0x4,
  FLOW_BOOT_LIST_CHECK_SUSPEND = 0x63,
};

enum sHttpPatch::$057B7494A3B06FECFFAA3DE4DE95B874 : __int32
{
  FLOW_PURGE_LIST_CHECK_INIT = 0x0,
  FLOW_PURGE_LIST_CHECK_REQ = 0x1,
  FLOW_PURGE_LIST_CHECK_WAIT = 0x2,
  FLOW_PURGE_LIST_CHECK_ERROR = 0x3,
  FLOW_PURGE_LIST_CHECK_EXIT = 0x4,
  FLOW_PURGE_LIST_CHECK_SUSPEND = 0x63,
};

enum sHttpPatch::$4F8C6FC4B953DD1F880AF14243048809 : __int32
{
  FLOW_FULL_LIST_CHECK_INIT = 0x0,
  FLOW_FULL_LIST_CHECK_REQ = 0x1,
  FLOW_FULL_LIST_CHECK_WAIT = 0x2,
  FLOW_FULL_LIST_CHECK_ERROR = 0x3,
  FLOW_FULL_LIST_CHECK_EXIT = 0x4,
  FLOW_FULL_LIST_CHECK_SUSPEND = 0x63,
};

enum sHttpPatch::$040A5F66483B8A429E1C77DE1AEF93FA : __int32
{
  FLOW_NORMAL_VER_CHECK_INIT = 0x0,
  FLOW_NORMAL_VER_CHECK_REQ = 0x1,
  FLOW_NORMAL_VER_CHECK_WAIT = 0x2,
  FLOW_NORMAL_VER_CHECK_ERROR = 0x3,
  FLOW_NORMAL_VER_CHECK_EXIT = 0x4,
  FLOW_NORMAL_VER_CHECK_SUSPEND = 0x63,
};

enum sHttpPatch::$9031E10E626D97CFFCE9CA3E3EE1C64A : __int32
{
  FLOW_UPDATE_EXE_FILE_INIT = 0x0,
  FLOW_UPDATE_EXE_FILE_REQ = 0x1,
  FLOW_UPDATE_EXE_FILE_WAIT = 0x2,
  FLOW_UPDATE_EXE_FILE_ERROR = 0x3,
  FLOW_UPDATE_EXE_FILE_EXIT = 0x4,
  FLOW_UPDATE_EXE_FILE_SUSPEND = 0x63,
};

enum sHttpPatch::$6F9DCD05A7D584FD176DC9490B722E2B : __int32
{
  FLOW_EXE_VER_CHECK_INIT = 0x0,
  FLOW_EXE_VER_CHECK_REQ = 0x1,
  FLOW_EXE_VER_CHECK_WAIT = 0x2,
  FLOW_EXE_VER_CHECK_ERROR = 0x3,
  FLOW_EXE_VER_CHECK_EXIT = 0x4,
  FLOW_EXE_VER_CHECK_SUSPEND = 0x63,
};

struct sHttpPatch::$97062149C0B1DC5A8109AF67B7273424
{
  MtString name_FileList;
  MtString name_VersionList;
};

struct __cppobj sHttpClient::MyDTI : MtDTI
{
};

struct __cppobj sHttpClient::cServerEnvironmentInfo : MtObject
{
  MtString mInfo;
  MtString mLauncherURN;
  MtString mLauncherURL;
  MtString mUraguchiURN;
  MtString mUraguchiURL;
  MtString mCapCharge;
};

struct __cppobj sHttpClient::cServerEnvironmentInfo::MyDTI : MtDTI
{
};

struct __cppobj sHttpClient::cStartAddrInfo::MyDTI : MtDTI
{
};

struct __cppobj sHttpClient::cPrepareInfo::MyDTI : MtDTI
{
};

struct __cppobj sHttpClient::cLoginInfo::MyDTI : MtDTI
{
};

struct __cppobj sHttpClient::cSendDLErrorInfoInfo::MyDTI : MtDTI
{
};

enum sHttpClient::$A89108EDFFFCBE2A3B72B942823A42B1 : __int32
{
  FLOW_INIT = 0x0,
  FLOW_REQ = 0x1,
  FLOW_WAIT = 0x2,
  FLOW_ANALYZE = 0x3,
  FLOW_ERROR = 0x4,
  FLOW_ABORT = 0x5,
  FLOW_EXIT = 0x6,
  FLOW_SUSPEND = 0x7,
};

struct __cppobj cHttpClient::MyDTI : MtDTI
{
};

struct cHttpClient::ResponseHeader
{
  s32 mStatusCode;
  s32 mContentLength;
  MtString mLocation;
};

struct __cppobj MtNetRanking::MyDTI : MtDTI
{
};

struct __cppobj MtNetRanking::Score::MyDTI : MtDTI
{
};

struct MtNetRanking::Updater
{
  s32 mBoardId;
  MtNetUniqueId mUniqueId;
  s64 mValue;
  s32 mOptionNum;
  MtNetRanking::ScoreOption mOption[8];
  MtNetRanking::Attach mAttach;
};

struct __cppobj __attribute__((aligned(8))) MtNetStorage : MtNetObject
{
  MtNetContext *mpContext;
  bool mIsDestructor;
  bool mIsAbort;
};

struct MtNetStorage::File
{
  MT_CHAR mName[256];
  MtTime mLastModified;
};

struct MtNetStorage::FileList
{
  s32 mNum;
  MtNetStorage::File mFile[64];
};

struct MtNetStorage::Result
{
  s32 mPoll;
  s32 mProgress;
  s32 mValue;
};

typedef uint16_t SceNpPartyRoomMemberId;

typedef uint8_t SceNpPartyMemberVoiceState;

struct SceNpPartyMemberVoiceInfo
{
  SceNpPartyRoomMemberId memberId;
  SceNpPartyMemberVoiceState memberVoiceState;
  uint8_t reserved;
  SceNpPartyRoomMemberId destinationMemberId;
};

struct __cppobj cRemoteCall::MyDTI : MtDTI
{
};

struct cRemoteCall::MyType
{
  __int8 gap0[1];
};

struct __attribute__((aligned(8))) $E6749449558D826A085DF1EF0DAEC0F0
{
  int w;
  int h;
  int byt;
  int ptc;
  int fmt;
  int siz;
  int typ;
  void *dathnd;
  int dattyp;
  unsigned __int8 *datptr;
  int datlck;
  int datcre;
  unsigned __int8 *msk;
  int mskptc;
};

struct $44ECE8F6013EB84AC352CCD99F824782
{
  int filsiz;
  int imgw;
  int imgh;
  int fntw;
  int fnth;
  int fntmgn;
  int fntdatidx[2];
};

struct MtInt2
{
  s32 x;
  s32 y;
};

struct MtInt3
{
  s32 x;
  s32 y;
  s32 z;
};

struct __cppobj sPlatformUtil::MyDTI : MtDTI
{
};

struct MtInterlock
{
  __int8 gap0[1];
};

struct __cppobj aLauncherAuto : cArea
{
  TICKET mArcTicket;
  MtString mLoginHost;
  u32 mLoginPort;
  u32 mRetryCount;
  s32 mSelectServerEnvCursor;
  u32 mDialogHandle;
  f32 mFTimer;
  f32 dialogWaitTimer;
  f32 dialogDispTimer;
  s32 mInputCursor;
  MT_CHAR mUserID[64];
  MT_CHAR mPassword[64];
  rSoundStreamRequest *mprTitleBGM;
  uGUILogin00 *mpGUILogin;
  bool mDebugDraw;
  cSystemCheck mSystemCheck;
};

struct __cppobj aLauncherAuto::MyDTI : MtDTI
{
};

enum aLauncherAuto::$A9D5539EFC9EFE344A23D598C01F1455 : __int32
{
  RNO_0_LOAD_INIT_0 = 0x0,
  RNO_0_LOAD_MOVE_0 = 0x1,
};

enum aLauncherAuto::$B5AF2600EFE3F4896E01D4D882755DC3 : __int32
{
  MOVE_R0_INIT_2 = 0x0,
  MOVE_R0_SYSTEM_CHECK_0 = 0x1,
  MOVE_R0_GET_SERVER_ENV_LIST_0 = 0x2,
  MOVE_R0_SELECT_SERVER_ENV_0 = 0x3,
  MOVE_R0_GET_OPENING_ADDR = 0x4,
  MOVE_R0_GET_DL_ADDR = 0x5,
  MOVE_R0_TOP_0 = 0x6,
  MOVE_R0_VER_CHECK_0 = 0x7,
  MOVE_R0_VER_UP_0 = 0x8,
  MOVE_R0_BOOT_CHECK_0 = 0x9,
  MOVE_R0_TO_GAME_0 = 0xA,
  MOVE_R0_TO_EXIT_0 = 0xB,
  MOVE_R0_ERROR = 0xC,
  MOVE_R0_EXIT_0 = 0xD,
};

enum aLauncherAuto::$1C89F77F1C2B49F77621F40801719D5A : __int32
{
  GET_SERVER_ENV_LIST_R1_INIT_0 = 0x0,
  GET_SERVER_ENV_LIST_R1_REQ_0 = 0x1,
  GET_SERVER_ENV_LIST_R1_WAIT_0 = 0x2,
  GET_SERVER_ENV_LIST_R1_EXIT_SUCCESS_0 = 0x3,
  GET_SERVER_ENV_LIST_R1_EXIT_FAILED_0 = 0x4,
};

enum aLauncherAuto::$56799ED71D2C9242AACC95C13F3C1395 : __int32
{
  SELECT_SERVER_ENV_R1_INIT_0 = 0x0,
  SELECT_SERVER_ENV_R1_MOVE_0 = 0x1,
  SELECT_SERVER_ENV_R1_EXIT_SUCCESS_0 = 0x2,
  SELECT_SERVER_ENV_R1_EXIT_FAILED_0 = 0x3,
};

enum aLauncherAuto::$7F5429B92AE963C0621A44FBC9FC48C5 : __int32
{
  GET_OPENING_ADDR_R1_INIT = 0x0,
  GET_OPENING_ADDR_R1_REQ = 0x1,
  GET_OPENING_ADDR_R1_DIALOG_WAIT = 0x2,
  GET_OPENING_ADDR_R1_WAIT = 0x3,
  GET_OPENING_ADDR_R1_BROWSER_WAIT = 0x4,
  GET_OPENING_ADDR_R1_ERROR = 0x5,
  GET_OPENING_ADDR_R1_EXIT_SUCCESS = 0x6,
  GET_OPENING_ADDR_R1_EXIT_FAILED = 0x7,
};

enum aLauncherAuto::$7B4B66FBC9ED546495A17751DFCA36ED : __int32
{
  GET_DL_ADDR_R1_INIT = 0x0,
  GET_DL_ADDR_R1_REQ = 0x1,
  GET_DL_ADDR_R1_DIALOG_WAIT = 0x2,
  GET_DL_ADDR_R1_WAIT = 0x3,
  GET_DL_ADDR_R1_BROWSER_WAIT = 0x4,
  GET_DL_ADDR_R1_ERROR = 0x5,
  GET_DL_ADDR_R1_EXIT_SUCCESS = 0x6,
  GET_DL_ADDR_R1_EXIT_FAILED = 0x7,
};

enum aLauncherAuto::$B9B299BFA6B3C4B3F84871388C41B259 : __int32
{
  TOP_R1_INIT_0 = 0x0,
  TOP_R1_START_0 = 0x1,
  TOP_R1_MOVE_0 = 0x2,
  TOP_R1_EXIT_SUCCESS_0 = 0x3,
  TOP_R1_EXIT_FAILED_0 = 0x4,
};

enum aLauncherAuto::$8292E11121474DA6C7E200C8A9165869 : __int32
{
  VER_CHECK_R1_INIT_0 = 0x0,
  VER_CHECK_R1_EXE_REQ_0 = 0x1,
  VER_CHECK_R1_EXE_WAIT_0 = 0x2,
  VER_CHECK_R1_EXE_UPDATE_REQ_0 = 0x3,
  VER_CHECK_R1_EXE_UPDATE_WAIT_0 = 0x4,
  VER_CHECK_R1_DATA_REQ_0 = 0x5,
  VER_CHECK_R1_DATA_WAIT_0 = 0x6,
  VER_CHECK_R1_EXIT_SUCCESS_0 = 0x7,
  VER_CHECK_R1_EXIT_FAILED_0 = 0x8,
};

enum aLauncherAuto::$A70D6F31A9C91C7525D3F880190686FF : __int32
{
  VER_UP_R1_INIT_0 = 0x0,
  VER_UP_R1_FULL_LIST_CHECK_REQ_0 = 0x1,
  VER_UP_R1_FULL_LIST_CHECK_WAIT_0 = 0x2,
  VER_UP_R1_PURGE_LIST_CHECK_REQ_0 = 0x3,
  VER_UP_R1_PURGE_LIST_CHECK_WAIT_0 = 0x4,
  VER_UP_R1_UPDATE_REQ_0 = 0x5,
  VER_UP_R1_UPDATE_START_WAIT_0 = 0x6,
  VER_UP_R1_UPDATE_WAIT_0 = 0x7,
  VER_UP_R1_BOOT_LIST_CHECK_REQ_0 = 0x8,
  VER_UP_R1_BOOT_LIST_CHECK_WAIT_0 = 0x9,
  VER_UP_R1_EXIT_SUCCESS_0 = 0xA,
  VER_UP_R1_EXIT_FAILED_0 = 0xB,
};

enum aLauncherAuto::$1805938FAEE5923E40F2A3592675B55B : __int32
{
  BOOT_CHECK_R1_INIT_0 = 0x0,
  BOOT_CHECK_R1_FULL_LIST_CHECK_REQ_0 = 0x1,
  BOOT_CHECK_R1_FULL_LIST_CHECK_WAIT_0 = 0x2,
  BOOT_CHECK_R1_BOOT_LIST_CHECK_REQ_0 = 0x3,
  BOOT_CHECK_R1_BOOT_LIST_CHECK_WAIT_0 = 0x4,
  BOOT_CHECK_R1_EXIT_SUCCESS_0 = 0x5,
  BOOT_CHECK_R1_EXIT_FAILED_0 = 0x6,
};

enum aLauncherAuto::$8AE8FDCEFE68EF0AA855C432D0531366 : __int32
{
  TO_EXIT_R1_INIT_0 = 0x0,
  TO_EXIT_R1_DIALOG_REQ_0 = 0x1,
  TO_EXIT_R1_DIALOG_WAIT_0 = 0x2,
  TO_EXIT_R1_EXIT_SUCCESS_0 = 0x3,
  TO_EXIT_R1_EXIT_FAILED_0 = 0x4,
};

enum aLauncherAuto::$AED4D057DAD94AF383D60CD139C36AE0 : __int32
{
  SELECT_SERVER_ENV_R2_INIT = 0x0,
  SELECT_SERVER_ENV_R2_SELECT = 0x1,
};

enum sPadExt::$219690E28510008AF5C99ABE4F0EB18F : __int32
{
  GAME_PAD = 0x0,
  PAD_INFO_NUM = 0x1,
  INVALID_PAD_ID = 0xFFFF,
};

struct __cppobj cCursor : MtObject
{
  bool mIsStop;
  bool mIsLoop;
  bool mIsTrg;
  bool mIsArrowOnly;
  bool mIsClamp;
  s32 mMaxX;
  s32 mMinX;
  s32 mMaxY;
  s32 mMinY;
};

struct __cppobj cCursor::MyDTI : MtDTI
{
};

enum cBrowser::ValidDevice : __int32
{
  VALID_DEVICE_MOUSE = 0x0,
  VALID_DEVICE_PAD = 0x1,
  VALID_DEVIDE_INVALID = 0x2,
};

typedef void (*SNJ_BROWSER_JSFUNC)(void *, void **, void **, void *);

struct __cppobj sMouse::MyDTI : MtDTI
{
};

enum sMouse::TYPE : __int32
{
  TYPE_DEFAULT = 0x0,
  MAX_TYPE = 0x1,
};

enum $EDA17803767883D49B8CA29AC37FC213 : __int32
{
  SNJ_BROWSER_PIXMAP_T = 0x80,
  SNJ_BROWSER_PIXMAP_RGB16 = 0x81,
  SNJ_BROWSER_PIXMAP_RGB16MASK = 0x82,
  SNJ_BROWSER_PIXMAP_ARGB16 = 0x83,
  SNJ_BROWSER_PIXMAP_RGAB16 = 0x84,
  SNJ_BROWSER_PIXMAP_RGB32 = 0x85,
  SNJ_BROWSER_PIXMAP_ARGB32 = 0x86,
};

enum $90BB44B5C5479EA9345FE8721FB8976D : __int32
{
  SNJ_BROWSER_CLIENT_TYPE_GAME = 0x0,
  SNJ_BROWSER_CLIENT_TYPE_LAUNCHER = 0x1,
};

enum sBrowser::$FE257AF0D64B723E6AC1E051BDC3AAD7 : __int32
{
  BROWSER_DISPLAY_MODE_HD = 0x0,
  BROWSER_DISPLAY_MODE_SD = 0x1,
};

struct __cppobj sKeyboard::MyDTI : MtDTI
{
};

enum sKeyboard::TYPE : __int32
{
  TYPE_DEFAULT_0 = 0x0,
  MAX_TYPE_0 = 0x1,
};

enum sKeyboard::KB_TYPE : __int32
{
  KB_LBUTTON = 0x1,
  KB_RBUTTON = 0x2,
  KB_CANCEL = 0x3,
  KB_MBUTTON = 0x4,
  KB_XBUTTON1 = 0x5,
  KB_XBUTTON2 = 0x6,
  KB_BACK = 0x8,
  KB_TAB = 0x9,
  KB_CLEAR = 0xC,
  KB_RETURN = 0xD,
  KB_SHIFT = 0x10,
  KB_CONTROL = 0x11,
  KB_MENU = 0x12,
  KB_PAUSE = 0x13,
  KB_CAPITAL = 0x14,
  KB_KANA = 0x15,
  KB_JUNJA = 0x17,
  KB_FINAL = 0x18,
  KB_HANJA = 0x19,
  KB_ESCAPE = 0x1B,
  KB_CONVERT = 0x1C,
  KB_NONCONVERT = 0x1D,
  KB_ACCEPT = 0x1E,
  KB_MODECHANGE = 0x1F,
  KB_SPACE = 0x20,
  KB_PRIOR = 0x21,
  KB_NEXT = 0x22,
  KB_END = 0x23,
  KB_HOME = 0x24,
  KB_LEFT = 0x25,
  KB_UP = 0x26,
  KB_RIGHT = 0x27,
  KB_DOWN = 0x28,
  KB_SELECT = 0x29,
  KB_PRINT = 0x2A,
  KB_EXECUTE = 0x2B,
  KB_SNAPSHOT = 0x2C,
  KB_INSERT = 0x2D,
  KB_DELETE = 0x2E,
  KB_HELP = 0x2F,
  KB_0 = 0x30,
  KB_1 = 0x31,
  KB_2 = 0x32,
  KB_3 = 0x33,
  KB_4 = 0x34,
  KB_5 = 0x35,
  KB_6 = 0x36,
  KB_7 = 0x37,
  KB_8 = 0x38,
  KB_9 = 0x39,
  KB_A = 0x41,
  KB_B = 0x42,
  KB_C = 0x43,
  KB_D = 0x44,
  KB_E = 0x45,
  KB_F = 0x46,
  KB_G = 0x47,
  KB_H = 0x48,
  KB_I = 0x49,
  KB_J = 0x4A,
  KB_K = 0x4B,
  KB_L = 0x4C,
  KB_M = 0x4D,
  KB_N = 0x4E,
  KB_O = 0x4F,
  KB_P = 0x50,
  KB_Q = 0x51,
  KB_R = 0x52,
  KB_S = 0x53,
  KB_T = 0x54,
  KB_U = 0x55,
  KB_V = 0x56,
  KB_W = 0x57,
  KB_X = 0x58,
  KB_Y = 0x59,
  KB_Z = 0x5A,
  KB_LWIN = 0x5B,
  KB_RWIN = 0x5C,
  KB_APPS = 0x5D,
  KB_SLEEP = 0x5F,
  KB_NUMPAD0 = 0x60,
  KB_NUMPAD1 = 0x61,
  KB_NUMPAD2 = 0x62,
  KB_NUMPAD3 = 0x63,
  KB_NUMPAD4 = 0x64,
  KB_NUMPAD5 = 0x65,
  KB_NUMPAD6 = 0x66,
  KB_NUMPAD7 = 0x67,
  KB_NUMPAD8 = 0x68,
  KB_NUMPAD9 = 0x69,
  KB_MULTIPLY = 0x6A,
  KB_ADD = 0x6B,
  KB_SEPARATOR = 0x6C,
  KB_SUBTRACT = 0x6D,
  KB_DECIMAL = 0x6E,
  KB_DIVIDE = 0x6F,
  KB_F1 = 0x70,
  KB_F2 = 0x71,
  KB_F3 = 0x72,
  KB_F4 = 0x73,
  KB_F5 = 0x74,
  KB_F6 = 0x75,
  KB_F7 = 0x76,
  KB_F8 = 0x77,
  KB_F9 = 0x78,
  KB_F10 = 0x79,
  KB_F11 = 0x7A,
  KB_F12 = 0x7B,
  KB_F13 = 0x7C,
  KB_F14 = 0x7D,
  KB_F15 = 0x7E,
  KB_F16 = 0x7F,
  KB_F17 = 0x80,
  KB_F18 = 0x81,
  KB_F19 = 0x82,
  KB_F20 = 0x83,
  KB_F21 = 0x84,
  KB_F22 = 0x85,
  KB_F23 = 0x86,
  KB_F24 = 0x87,
  KB_NUMLOCK = 0x90,
  KB_SCROLL = 0x91,
  KB_LSHIFT = 0xA0,
  KB_RSHIFT = 0xA1,
  KB_LCONTROL = 0xA2,
  KB_RCONTROL = 0xA3,
  KB_LMENU = 0xA4,
  KB_RMENU = 0xA5,
  KB_OEM_1 = 0xBA,
  KB_OEM_PLUS = 0xBB,
  KB_OEM_COMMA = 0xBC,
  KB_OEM_MINUS = 0xBD,
  KB_OEM_PERIOD = 0xBE,
  KB_OEM_2 = 0xBF,
  KB_OEM_3 = 0xC0,
  KB_OEM_4 = 0xDB,
  KB_OEM_5 = 0xDC,
  KB_OEM_6 = 0xDD,
  KB_OEM_7 = 0xDE,
  KB_OEM_8 = 0xDF,
  KB_OEM_102 = 0xE2,
};

enum ScePthreadMutextype : __int32
{
  SCE_PTHREAD_MUTEX_ERRORCHECK = 0x1,
  SCE_PTHREAD_MUTEX_RECURSIVE = 0x2,
  SCE_PTHREAD_MUTEX_NORMAL = 0x3,
  SCE_PTHREAD_MUTEX_ADAPTIVE = 0x4,
  SCE_PTHREAD_MUTEX_TYPE_MAX = 0x5,
};

struct SNJ_BROWSER_CONTROL
{
  unsigned int on;
  unsigned int old;
  unsigned int ntr;
  unsigned int trg;
  unsigned int rep;
  float mp;
  float mdx;
  float mdy;
  float sp;
  float sdx;
  float sdy;
  unsigned int mouseOn;
  unsigned int mouseOld;
  unsigned int mouseNtr;
  unsigned int mouseTrg;
  unsigned int mouseRep;
  float mouseMp;
  float mouseMdx;
  float mouseMdy;
  float mouseSp;
  float mouseSdx;
  float mouseSdy;
  int mouseX;
  int mouseY;
  unsigned int deflbt;
  unsigned int defbck;
  unsigned int deffwd;
  unsigned int defrld;
  unsigned int defcls;
  unsigned int defexp;
  unsigned int defred;
  unsigned int defret;
  unsigned int deffcl;
  unsigned int deffcr;
  unsigned int deffcu;
  unsigned int deffcd;
  unsigned int deffctab;
  unsigned int deffctabl;
  unsigned int deffctabr;
  unsigned int defenter;
  unsigned int defescape;
  unsigned int defmlbt;
  unsigned int posSetType;
};

struct QC_PARAM
{
  volatile s32 *interlock;
  u32 width;
  u32 height;
  u32 pitch;
  u32 bpp;
  u8 *pdst;
  u8 *psrc;
};

struct pthread_mutex_attr;

struct __cppobj sMouseExt::MyDTI : MtDTI
{
};

typedef struct pthread_mutex_attr *pthread_mutexattr_t;

typedef pthread_mutexattr_t ScePthreadMutexattr;

enum cBrowserRenderDevicePS4::$CA5B70A3A62B4F612FC698584AFFB739 : __int32
{
  TEXTURE_MAX = 0x64,
};

enum sce::Gnm::Alignment : __int32
{
  kAlignmentOfShaderInBytes = 0x100,
  kAlignmentOfTessFactorBufferInBytes = 0x100,
  kAlignmentOfMipStatsBufferInBytes = 0x40,
  kAlignmentOfOcclusionQueryInBytes = 0x10,
  kAlignmentOfIndirectArgsInBytes = 0x8,
  kAlignmentOfBufferInBytes = 0x4,
  kAlignmentOfFetchShaderInBytes = 0x4,
};

union sce::Gnmx::ShaderInfo::$17EE884610C6F1475DD5CF92784AF1F1
{
  const void *m_shaderStruct;
  sce::Gnmx::VsShader *m_vsShader;
  sce::Gnmx::PsShader *m_psShader;
  sce::Gnmx::CsShader *m_csShader;
  sce::Gnmx::LsShader *m_lsShader;
  sce::Gnmx::HsShader *m_hsShader;
  sce::Gnmx::EsShader *m_esShader;
  sce::Gnmx::GsShader *m_gsShader;
  sce::Gnmx::CsVsShader *m_csvsShader;
};

struct __attribute__((aligned(8))) sce::Gnmx::ShaderInfo
{
  sce::Gnmx::ShaderInfo::$17EE884610C6F1475DD5CF92784AF1F1 _anon_0;
  const uint32_t *m_gpuShaderCode;
  uint32_t m_gpuShaderCodeSize;
};

enum MtMemoryAllocator::AllocatorType : __int32
{
  DEFAULT = 0x0,
  GLOBAL = 0x1,
  STRING = 0x2,
  ARRAY = 0x3,
  COLLISION = 0x4,
  ONION = 0x5,
  GARLIC = 0x6,
  TEMPORARY = 0x7,
  DEVELOP = 0x8,
  UI = 0x9,
  COLLADA = 0xA,
  UNDEFINED = 0xB,
  USER_ALLOCATOR = 0xC,
  MAX_ALLOCATOR = 0x40,
  UNKNOWN_ALLOCATOR = 0x7FFFFFFF,
};

struct __cppobj __attribute__((aligned(8))) MtDefaultAllocator : MtAllocator
{
};

struct MtMemory
{
  MtDefaultAllocator mDefaultAllocator;
};

struct __cppobj MtDefaultAllocator::MyDTI : MtDTI
{
};

enum cArcLoaderBase::$101F0C3ADF0AF1415FBB5CCC199D761B : __int32
{
  PICK_FLAG_NONE = 0x0,
  PICK_FLAG_NOPICK = 0x1,
  PICK_FLAG_FILL = 0xFF,
};

enum cArcLoaderBase::$B529EDD78B27053BAEA7D32E01AFA240 : __int32
{
  STATE_WAIT_0 = 0x0,
  STATE_STACK = 0x1,
  STATE_ACTIVE = 0x2,
  STATE_LOADED = 0x3,
  STATE_NUM = 0x4,
};

enum cArcLoaderBase::$2F7FD74C869A23063B0FE37CDE6E13C6 : __int32
{
  FLAG_ON_CANCEL = 0x1,
  FLAG_ON_FAILED = 0x2,
  FLAG_NONE = 0x0,
};

enum $E1EEC22C5C1C49DEB1C73F7016E7B234 : __int32
{
  ARC_PRIO_DEF = 0x0,
  ARC_PRIO_CHARA_DEF = 0x1,
  ARC_PRIO_CHARA_HIGH = 0x2,
  ARC_PRIO_OM_SYS = 0x3,
  ARC_PRIO_UI = 0x4,
  ARC_PRIO_NUM = 0x5,
};

enum $8DE90396AAB59B95083CC2CB930EBCDA : __int32
{
  ARC_LOAD_WAIT = 0x0,
  ARC_LOAD_HANDLE_INVALID = 0xFFFFFFFF,
};

enum RET_LOAD_REC_ARC_TAG : __int32
{
  RET_LOAD_REC_ARC_TAG_SUCCESS = 0x0,
  RET_LOAD_REC_ARC_TAG_LOADING = 0x1,
  RET_LOAD_REC_ARC_TAG_FAIL = 0x2,
  RET_LOAD_REC_ARC_TAG_RETRY = 0x3,
  RET_LOAD_REC_ARC_TAG_CANCEL = 0x4,
  RET_LOAD_REC_ARC_TAG_NONE = 0x5,
  RET_LOAD_REC_ARC_TAG_NO_LOAD = 0x6,
  RET_LOAD_REC_ARC_TAG_NUM = 0x7,
};

typedef __uint64_t __size_t;

typedef __size_t size_t_0;

typedef char int8_t_0;

typedef __int16 int16_t_0;

typedef _Int32t int32_t_0;

typedef _SceInt64t int64_t_0;

typedef unsigned __int8 uint8_t_0;

typedef unsigned __int16 uint16_t_0;

typedef _Uint32t uint32_t_0;

typedef _SceUint64t uint64_t_0;

typedef __int64 intptr_t_0;

typedef unsigned __int64 uintptr_t_0;

enum cSystemCheck::$2DAD41A06C25322B34383B031BE81054 : __int32
{
  MSG_FINISH_TYPE_NORMAL = 0x0,
  MSG_FINISH_TYPE_SELECT = 0x1,
  MSG_FINISH_TYPE_AUTO = 0x2,
  MSG_FINISH_TYPE_LOOP = 0x3,
  MSG_FINISH_TYPE_MANUAL = 0x4,
};

enum cSystemCheck::$5B42BF0E9F5AE37DF4BF1696AC4599A3 : __int32
{
  EXEC_RNO1_HDD_SPACE_CHECK = 0x0,
  EXEC_RNO1_HDD_SPACE_CHECK_ERROR = 0x1,
  EXEC_RNO1_HDD_SPACE_NO_FREE = 0x2,
  EXEC_RNO1_TROPHY_INSTALL = 0x3,
  EXEC_RNO1_CHECK_SAVEDATA = 0x4,
  EXEC_RNO1_CHECK_SAVEDATA_ERROR = 0x5,
  EXEC_RNO1_LOAD_SAVEDATA = 0x6,
  EXEC_RNO1_LOAD_SAVEDATA_BROKEN = 0x7,
  EXEC_RNO1_LOAD_SAVEDATA_CHECK_BROKEN = 0x8,
  EXEC_RNO1_LOAD_SAVEDATA_ANYONE = 0x9,
  EXEC_RNO1_LOAD_SAVEDATA_ERROR = 0xA,
  EXEC_RNO1_LOAD_SAVEDATA_FAIL = 0xB,
  EXEC_RNO1_CREATE_SAVEDATA = 0xC,
  EXEC_RNO1_CREATE_SAVEDATA_FAIL = 0xD,
  EXEC_RNO1_EXIT = 0xE,
  EXEC_RNO1_APP_EXIT = 0xF,
};

enum cSystemCheck::$A6965E784DC1F7E6936C14A1DF11A928 : __int32
{
  FLAG_SAVEDATA_NOTHING = 0x0,
  FLAG_EXIST_SAVEDATA_ERROR = 0x1,
  FLAG_HDD_SPACE_ERROR = 0x2,
  FLAG_HDD_NO_SPRACE = 0x3,
};

struct __cppobj MtCollisionUtil::MtArrayEx::MyDTI : MtDTI
{
};

struct __cppobj MtCollisionUtil::MtDtiObject::MyDTI : MtDTI
{
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<cDynamicBVHCollision::Node *,false,2> : MtCollisionUtil::MtArrayBasicBase
{
};

enum sDialogBase::$1AC47FA4E632667BA3B4355B85F606E9 : __int32
{
  TYPE_LOOP = 0x0,
  TYPE_OK = 0x1,
  TYPE_YESNO = 0x2,
  TYPE_WAIT = 0x3,
  TYPE_WAIT_CANCEL = 0x4,
};

enum sDialogBase::$64DD6A542E429DAD0845939BA5357028 : __int32
{
  DIALOG_RESULT_YES = 0x0,
  DIALOG_RESULT_NO = 0x1,
};

enum sSavedata::$F40F56980A02FE8B95BB56C4A79822D0 : __int32
{
  RESULT_OK_0 = 0x0,
  RESULT_CANCEL = 0x1,
  RESULT_NOSPACE = 0x2,
  RESULT_NODATA = 0x3,
  RESULT_BROKEN = 0x4,
  RESULT_ANYONE = 0x5,
  RESULT_MISSMATCH_SYSVER = 0x6,
  RESULT_MISSMATCH_APPVER = 0x7,
  RESULT_INVALID = 0x8,
  RESULT_ERR = 0x9,
  RESULT_BASE = 0xA,
};

struct __cppobj MtGeometry::MyDTI : MtDTI
{
};

enum MtGeometry::Type : __int32
{
  TYPE_NULL = 0x0,
  TYPE_LINE_0 = 0x1,
  TYPE_LINESEGMENT_0 = 0x2,
  TYPE_LINE_SEGMENT = 0x2,
  TYPE_RAY_0 = 0x3,
  TYPE_PLANE_0 = 0x4,
  TYPE_SPHERE_0 = 0x5,
  TYPE_CAPSULE_0 = 0x6,
  TYPE_AABB_0 = 0x7,
  TYPE_OBB_0 = 0x8,
  TYPE_CYLINDER_0 = 0x9,
  TYPE_CONVEX_HULL = 0xA,
  TYPE_TRIANGLE_0 = 0xB,
  TYPE_CONE_0 = 0xC,
  TYPE_TORUS_0 = 0xD,
  TYPE_ELLIPSOID_0 = 0xE,
  TYPE_MINCOWSKI_SUM = 0xF,
  TYPE_MINCOWSKI_DIFF = 0x10,
  TYPE_LINE_SEGMENT4 = 0x11,
  TYPE_AABB4_0 = 0x12,
  TYPE_LINESWEPTSPHERE = 0x13,
  TYPE_PLANE_XZ_0 = 0x14,
  TYPE_RAY_Y_0 = 0x15,
  TYPE_NUM = 0x16,
};

struct __attribute__((aligned(8))) MtContact
{
  MtVector3 pos;
  MtVector3 normal;
  f32 distance;
  f32 toi;
  bool bFind;
};

struct __cppobj MtGeomAABB::MyDTI : MtDTI
{
};

enum MtGeomAABB::AABB_VORONOI_ID : __int32
{
  X_MIN_BIT = 0x1,
  X_MAX_BIT = 0x2,
  Y_MIN_BIT = 0x4,
  Y_MAX_BIT = 0x8,
  Z_MIN_BIT = 0x10,
  Z_MAX_BIT = 0x20,
  AABB_VORONOI_INTERNAL = 0x0,
  AABB_VORONOI_P_YZX0 = 0x1,
  AABB_VORONOI_P_YZX1 = 0x2,
  AABB_VORONOI_P_ZXY0 = 0x4,
  AABB_VORONOI_P_ZXY1 = 0x8,
  AABB_VORONOI_P_XYZ0 = 0x10,
  AABB_VORONOI_P_XYZ1 = 0x20,
  AABB_VORONOI_E_XY0Z0 = 0x14,
  AABB_VORONOI_E_XY1Z0 = 0x18,
  AABB_VORONOI_E_XY0Z1 = 0x24,
  AABB_VORONOI_E_XY1Z1 = 0x28,
  AABB_VORONOI_E_YZ0X0 = 0x11,
  AABB_VORONOI_E_YZ1X0 = 0x21,
  AABB_VORONOI_E_YZ0X1 = 0x12,
  AABB_VORONOI_E_YZ1X1 = 0x22,
  AABB_VORONOI_E_ZX0Y0 = 0x5,
  AABB_VORONOI_E_ZX1Y0 = 0x6,
  AABB_VORONOI_E_ZX0Y1 = 0x9,
  AABB_VORONOI_E_ZX1Y1 = 0xA,
  AABB_VORONOI_V_X0Y0Z0 = 0x15,
  AABB_VORONOI_V_X1Y0Z0 = 0x16,
  AABB_VORONOI_V_X0Y1Z0 = 0x19,
  AABB_VORONOI_V_X1Y1Z0 = 0x1A,
  AABB_VORONOI_V_X0Y0Z1 = 0x25,
  AABB_VORONOI_V_X1Y0Z1 = 0x26,
  AABB_VORONOI_V_X0Y1Z1 = 0x29,
  AABB_VORONOI_V_X1Y1Z1 = 0x2A,
};

struct __cppobj MtGeomConvex::MyDTI : MtDTI
{
};

struct __cppobj cDynamicBVHCollision::MyDTI : MtDTI
{
};

struct __cppobj cDynamicBVHCollision::Node::MyDTI : MtDTI
{
};

typedef MtCollisionUtil::MtArrayTemplate<cDynamicBVHCollision::Node *,false,2> cDynamicBVHCollision::cNodeStackArray;

enum cDynamicBVHCollision::UPDATE_LEVEL : __int32
{
  UPDATE_LV0 = 0x0,
  UPDATE_LV1 = 0x1,
  UPDATE_LV2 = 0x2,
};

struct __cppobj nCollision::cAllocaterIntermediate::MyDTI : MtDTI
{
};

typedef u16 nCollision::SBC_HANDLE_HALF;

struct __cppobj nCollision::cScrCommonFilter::MyDTI : MtDTI
{
};

enum nCollision::cScrCommonFilter::GROUP_REGIST : __int32
{
  GROUP_REGIST_00 = 0x0,
  GROUP_REGIST_01 = 0x1,
  GROUP_REGIST_02 = 0x2,
  GROUP_REGIST_03 = 0x3,
  GROUP_REGIST_04 = 0x4,
  GROUP_REGIST_05 = 0x5,
  GROUP_REGIST_06 = 0x6,
  GROUP_REGIST_07 = 0x7,
  GROUP_REGIST_08 = 0x8,
  GROUP_REGIST_09 = 0x9,
  GROUP_REGIST_10 = 0xA,
  GROUP_REGIST_11 = 0xB,
  GROUP_REGIST_12 = 0xC,
  GROUP_REGIST_13 = 0xD,
  GROUP_REGIST_14 = 0xE,
  GROUP_REGIST_15 = 0xF,
  GROUP_REGIST_16 = 0x10,
  GROUP_REGIST_17 = 0x11,
  GROUP_REGIST_18 = 0x12,
  GROUP_REGIST_19 = 0x13,
  GROUP_REGIST_20 = 0x14,
  GROUP_REGIST_21 = 0x15,
  GROUP_REGIST_22 = 0x16,
  GROUP_REGIST_23 = 0x17,
  GROUP_REGIST_24 = 0x18,
  GROUP_REGIST_25 = 0x19,
  GROUP_REGIST_26 = 0x1A,
  GROUP_REGIST_27 = 0x1B,
  GROUP_REGIST_28 = 0x1C,
  GROUP_REGIST_29 = 0x1D,
  GROUP_REGIST_30 = 0x1E,
  GROUP_REGIST_31 = 0x1F,
};

enum nCollision::cScrCommonFilter::TYPE : __int32
{
  TYPE_00 = 0x1,
  TYPE_01 = 0x2,
  TYPE_02 = 0x4,
  TYPE_03 = 0x8,
  TYPE_04 = 0x10,
  TYPE_05 = 0x20,
  TYPE_06 = 0x40,
  TYPE_07 = 0x80,
  TYPE_08 = 0x100,
  TYPE_09 = 0x200,
  TYPE_10 = 0x400,
  TYPE_11 = 0x800,
  TYPE_12 = 0x1000,
  TYPE_13 = 0x2000,
  TYPE_14 = 0x4000,
  TYPE_15 = 0x8000,
  TYPE_16 = 0x10000,
  TYPE_17 = 0x20000,
  TYPE_18 = 0x40000,
  TYPE_19 = 0x80000,
  TYPE_20 = 0x100000,
  TYPE_21 = 0x200000,
  TYPE_22 = 0x400000,
  TYPE_23 = 0x800000,
  TYPE_24 = 0x1000000,
  TYPE_25 = 0x2000000,
  TYPE_26 = 0x4000000,
  TYPE_27 = 0x8000000,
  TYPE_28 = 0x10000000,
  TYPE_29 = 0x20000000,
  TYPE_30 = 0x40000000,
  TYPE_31 = 0x80000000,
  TYPE_ALL = 0x7FFFFFFF,
};

struct __cppobj nCollision::cScrCollisionMoveMatrix::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nCollision::cObjectBase : MtObject
{
  bool mFlgActive;
};

struct __cppobj __attribute__((aligned(4))) nCollision::cCollisionNode:960 : nCollision::cObjectBase
{
  const MtDTI *mpEditDTI;
  MtCollisionUtil::MtArrayEx mGeometryArray;
  MtAABB mBoundingAABB;
  MtColor mDispColor;
  bool mFlgSetup;
};

struct __cppobj nCollision::cCollisionNodeObject : nCollision::cCollisionNode:960
{
  MtObject *mpOwner;
  MT_MFUNC mpCallbackFuncSetup;
  __attribute__((aligned(16))) u32 mGroup;
  u32 mAttribute;
  __attribute__((aligned(16))) MtVector3 mMoveVector;
  u32 mUserDataU32;
  MtObject *mpUserDataPtr;
  bool mFlgAutoDeleteUserDataPtr;
};

struct __cppobj __attribute__((aligned(16))) nCollision::cCollisionNode : nCollision::cObjectBase
{
  const MtDTI *mpEditDTI;
  MtCollisionUtil::MtArrayEx mGeometryArray;
  MtAABB mBoundingAABB;
  MtColor mDispColor;
  bool mFlgSetup;
};

struct __cppobj nCollision::cCollisionNodeObject::MyDTI : MtDTI
{
};

struct nCollision::cCollisionNodeObject::HitCheckResult
{
  bool FlgGroupOK;
  bool FlgAttributeOK;
  bool FlgTotalAABBOK;
  u16 DetailHitCheckNum;
  u16 DetailHitCheckHitNum;
};

struct __cppobj nCollision::cCollisionNode::MyDTI : MtDTI
{
};

struct __cppobj nCollision::cObjectBase::MyDTI : MtDTI
{
};

typedef bool (*nCollision::OBJ_FILTER_FUNC_NODE_PASSIVE)(MtObject *, nCollision::cCollisionNode *, void *);

typedef bool (*nCollision::OBJ_FILTER_FUNC_GEOMETRY_PASSIVE)(MtObject *, nCollision::cCollisionNode *, u32, void *);

enum nCollision::COLLISION_TYPE : __int32
{
  COLLISION_TYPE_INTERSECT = 0x0,
  COLLISION_TYPE_CLOSEST = 0x1,
  COLLISION_TYPE_CLOSEST_XZ = 0x2,
  COLLISION_TYPE_FIND = 0x3,
  COLLISION_TYPE_CONTACT = 0x4,
  COLLISION_TYPE_MAX = 0x5,
};

struct __cppobj nCollision::cGeometry : nCollision::cObjectBase
{
  MtGeomConvex *mpGeometry;
  bool mFlgAllocateGeometry;
  __attribute__((aligned(8))) MtAABB mGeometryBoundingAABB;
};

struct __cppobj nCollision::cGeometry::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) nCollision::cGeometryExpansion : nCollision::cGeometry
{
  u32 mAttribute;
  u32 mUserID;
  MtObject *mpUserPtr;
  bool mFlgAutoDeleteUserPtr;
};

struct __cppobj nCollision::cGeometryExpansion::MyDTI : MtDTI
{
};

struct __cppobj nCollision::cCollisionNodeGroup : MtObject
{
  __attribute__((aligned(16))) MtAABB mAreaAABB;
  MtArray mGroupNodeArray;
  cDynamicBVHCollision::Node *mpDynamicBVHNode;
};

struct __cppobj nCollision::cCollisionNodeGroup::MyDTI : MtDTI
{
};

struct __cppobj sCollision::MyDTI : MtDTI
{
};

typedef nCollision::SBC_HANDLE_HALF sCollision::SBC_HANDLE_HALF;

struct __cppobj sCollision::cSbcArrayBP::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cColArray::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcMoveReserveInfo : MtObject
{
  sCollision::Sbc *mpTargetSbc;
  sCollision::Sbc::Parts *mpTargetParts;
  bool mFlgResetSet;
  __attribute__((aligned(8))) MtMatrix mRegistMatrix;
};

struct __cppobj sCollision::cSbcMoveReserveInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::Sbc::MyDTI : MtDTI
{
};

struct __cppobj sCollision::Sbc::Parts::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcMoveMatrix::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcMoveResetReserveInfo : MtObject
{
  sCollision::Sbc *mpTargetSbc;
  sCollision::Sbc::Parts *mpTargetParts;
};

struct __cppobj sCollision::cSbcMoveResetReserveInfo::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(4))) sCollision::cSbcRegistReserveInfo : MtObject
{
  rCollision *mpRSbc;
  sCollision::SBC_HANDLE *mpOutputHandle;
  u32 mRegistType;
  u8 mRegistGroup;
};

struct __cppobj sCollision::cSbcRegistReserveInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcMoveReserveInfoAll : MtObject
{
  sCollision::Sbc *mpTargetSbc;
  bool mFlgResetSet;
  __attribute__((aligned(16))) MtMatrix mRegistMatrix;
};

struct __cppobj sCollision::cSbcMoveReserveInfoAll::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcMoveResetReserveInfoAll : MtObject
{
  sCollision::Sbc *mpTargetSbc;
};

struct __cppobj sCollision::cSbcMoveResetReserveInfoAll::MyDTI : MtDTI
{
};

struct __cppobj sCollision::SbcObject::MyDTI : MtDTI
{
};

struct __cppobj sCollision::SbcObject::cRegisterInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcSkinMesh::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcSkinMesh::cRegisterInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcHeightField::MyDTI : MtDTI
{
};

struct __cppobj sCollision::cSbcHeightField::cHeightField : MtObject
{
  bool mFlgActive;
  nCollision::cScrCommonFilter mScrFilter;
  rCollisionHeightField *mpHeightField;
};

struct __cppobj rCollisionHeightField : cResource
{
  u32 mMagic;
  u32 mVersion;
  cGridCollision *mpGridCollision;
  rCollisionHeightField::cCellGroup *mpCellGroupArray;
  u32 mCellGroupNum;
  nCollision::ScrMaterialInfo *mpMaterialArray;
  u32 mMaterialNum;
  f32 *mpVertexHeightArray;
  u32 mVertexNum;
  u8 *mpGridSpletType;
};

struct __attribute__((aligned(8))) rCollisionHeightField::cCellGroup
{
  MtFloat3 mPolygonNormal0;
  u16 mMaterialIndex[2];
  MtFloat3 mPolygonNormal1;
  bool mFlgActive[2];
  bool mFlgFlat;
  bool mFlgFlatAndPlaneXZ;
  cGridCollisionRegistInfo mGridRegistInfo;
  s16 mVertexIndex[4];
  bool mFlgSplitDefault;
};

struct __cppobj sCollision::cSbcHeightField::cHeightField::MyDTI : MtDTI
{
};

struct __cppobj sCollision::Collider::MyDTI : MtDTI
{
};

struct __cppobj sCollision::Collider::cNodeListArray : MtArray
{
};

struct __cppobj sCollision::Collider::cNodeListArray::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nCollision::cCollisionNodeObject:1600 : nCollision::cCollisionNode:960
{
  MtObject *mpOwner;
  MT_MFUNC mpCallbackFuncSetup;
  _BYTE gap88[8];
  u32 mGroup;
  u32 mAttribute;
  _BYTE gap98[8];
  MtVector3 mMoveVector;
  u32 mUserDataU32;
  MtObject *mpUserDataPtr;
  bool mFlgAutoDeleteUserDataPtr;
};

enum sCollision::CALLBACK_MODE : __int32
{
  PHASE_ENUM = 0x0,
  PHASE_ENUM_INVERSE = 0x1,
  PHASE_END = 0x2,
  PHASE_MOVE_0 = 0x3,
  PHASE_ENUM_END = 0x4,
};

typedef void (*sCollision::OBJ_FUNC)(MtObject *, sCollision::CALLBACK_MODE, sCollision::Node *, sCollision::Node *, MtContact *, uintptr, sCollision::TriangleInfo *, u32, u32, bool);

struct __cppobj __attribute__((aligned(32))) sCollision::Node : nCollision::cCollisionNodeObject:1600
{
  sCollision::OBJ_FUNC mpCallbackFromRequest;
};

struct __cppobj sCollision::Node::MyDTI : MtDTI
{
};

struct __cppobj sCollision::TriangleInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::SbcInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::SbcInfoBase::MyDTI : MtDTI
{
};

typedef bool (*sCollision::OBJ_FILTER_FUNC_NODE)(MtObject *, sCollision::Node *, sCollision::Node *, uintptr);

typedef bool (*sCollision::OBJ_FILTER_FUNC_GEOMETRY)(MtObject *, sCollision::Node *, sCollision::Node *, u32, u32, uintptr);

struct __cppobj sCollision::ColliderPassiveNodeInfo : MtObject
{
  u32 mNodeListPhaseIndex;
  u32 mNodeListIndex;
  sCollision::Node *mpNode;
  bool mFlgFrameUpdate;
  cDynamicBVHCollision::Node *mpDBVTNode;
};

struct __cppobj sCollision::ColliderPassiveNodeInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::ActiveNodeInfo : MtObject
{
  sCollision::Node *mpActiveNode;
  MtObject *mpCallbackOwner;
  sCollision::OBJ_FUNC mpCallbackFunc;
  _BYTE gap20[8];
  sCollision::OBJ_FILTER_FUNC_NODE mpNodeFilteringCallback;
  _BYTE gap30[8];
  sCollision::OBJ_FILTER_FUNC_GEOMETRY mpGeometryFilteringCallback;
  _BYTE gap40[8];
  u32 mCallbackParam;
  u32 mContactFunctionType;
};

struct __cppobj __attribute__((aligned(8))) sCollision::ColliderActiveNodeInfo : sCollision::ActiveNodeInfo
{
  u32 mNodeListPhaseIndex;
  u32 mNodeListIndex;
  bool mFlgFrameUpdate;
};

struct __cppobj sCollision::ColliderActiveNodeInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::ActiveNodeInfo::MyDTI : MtDTI
{
};

typedef void (*sCollision::OBJ_FUNC_OUTSIDE)(MtObject *, const MtGeomConvex *, const MtGeomConvex *, const MtContact *, sCollision::Node *, u32, void *);

struct __cppobj MtTypedArray<sCollision::ColliderActiveNodeInfo> : MtArray
{
};

struct __cppobj MtTypedArray<sCollision::ColliderPassiveNodeInfo> : MtArray
{
};

struct __cppobj sCollision::NodeList : MtObject
{
  bool mFlgActive;
  u32 mNodeListIndex;
  bool mFlgEnablePassiveNodeBVH;
  bool mFlgForceUpdatePassiveNodeBVH;
  MtArray mNodePtrArray[19];
  MtArray mActiveNodeArray[19];
  MtArray mActiveNodeNoUseArray[19];
  MtArray mNodeGroupArray;
  MtArray mNodeGroupNoUseArray;
  u32 mTotalNodeNum;
  u32 mTotalRequestNum;
  cDynamicBVHCollision mPassiveNodeBVH;
  MtTypedArray<sCollision::ColliderActiveNodeInfo> mReserveRegistArrayActive[19];
  MtTypedArray<sCollision::ColliderPassiveNodeInfo> mReserveRegistArrayPassive[19];
  MtTypedArray<sCollision::ColliderActiveNodeInfo> mReserveUnRegistArrayActive[19];
  MtTypedArray<sCollision::ColliderPassiveNodeInfo> mReserveUnRegistArrayPassive[19];
  MtArray mContinuousActiveNodeArray;
  MtArray mContinuousPassiveNodeArray;
  cDynamicBVHCollision mContinuousPassiveNodeBVH;
};

struct __cppobj sCollision::NodeList::MyDTI : MtDTI
{
};

struct __cppobj sCollision::Param::MyDTI : MtDTI
{
};

struct __cppobj sCollision::ScrCollisionInfo::MyDTI : MtDTI
{
};

struct __cppobj sCollision::ScrCollisionInfoBase::MyDTI : MtDTI
{
};

enum sCollision::PROFILE_ID : __int32
{
  PROFILE_ID_INTERSECT_LS = 0x0,
  PROFILE_ID_INTERSECT_SPHERE = 0x1,
  PROFILE_ID_INTERSECT_CAPSULE = 0x2,
  PROFILE_ID_INTERSECT_AABB = 0x3,
  PROFILE_ID_INTERSECT_OBB = 0x4,
  PROFILE_ID_FIND_LS = 0x5,
  PROFILE_ID_FIND_LS4 = 0x6,
  PROFILE_ID_FIND_RAY_Y = 0x7,
  PROFILE_ID_CAST_SPHERE = 0x8,
  PROFILE_ID_CAST_CAPSULE = 0x9,
  PROFILE_ID_CAST_AABB = 0xA,
  PROFILE_ID_ADJPOS_SPHERE = 0xB,
  PROFILE_ID_ADJPOS_CAPSULE = 0xC,
  PROFILE_ID_ADJPOS_SPHERE_CACHED = 0xD,
  PROFILE_ID_ADJPOS_CAPSULE_CACHED = 0xE,
  PROFILE_ID_ADJPOS_SPHERE_CAM2 = 0xF,
  PROFILE_ID_ADJPOS_CAPSULE_CAM2 = 0x10,
  PROFILE_ID_ADJPOS_SPHERE_CHARA = 0x11,
  PROFILE_ID_ADJPOS_CAPSULE_CHARA = 0x12,
  PROFILE_ID_ADJPOS_AABB = 0x13,
  PROFILE_ID_INTERSECT_LS_MV = 0x14,
  PROFILE_ID_INTERSECT_SPHERE_MV = 0x15,
  PROFILE_ID_INTERSECT_CAPSULE_MV = 0x16,
  PROFILE_ID_INTERSECT_AABB_MV = 0x17,
  PROFILE_ID_INTERSECT_OBB_MV = 0x18,
  PROFILE_ID_FIND_LS_MV = 0x19,
  PROFILE_ID_CAST_SPHERE_MV = 0x1A,
  PROFILE_ID_CAST_CAPSULE_MV = 0x1B,
  PROFILE_ID_ADJPOS_SPHERE_MV = 0x1C,
  PROFILE_ID_ADJPOS_CAPSULE_MV = 0x1D,
  PROFILE_ID_ADJPOS_SPHERE_CAM_MV = 0x1E,
  PROFILE_ID_ADJPOS_SPHERE_CAM2_MV = 0x1F,
  PROFILE_ID_ADJPOS_CAPSULE_CAM2_MV = 0x20,
  PROFILE_ID_ADJPOS_SPHERE_CHARA_MV = 0x21,
  PROFILE_ID_ADJPOS_CAPSULE_CHARA_MV = 0x22,
  PROFILE_ID_ADJUST_CONVEX_SHERE = 0x23,
  PROFILE_ID_ADJUST_CONVEX_CAPSULE = 0x24,
  PROFILE_ID_GETAREAPOLY_LS = 0x25,
  PROFILE_ID_GETAREAPOLY_SPHERE = 0x26,
  PROFILE_ID_GETAREAPOLY_CAPSULE = 0x27,
  PROFILE_ID_GETAREAPOLY_AABB = 0x28,
  PROFILE_ID_GETAREAPOLY_OBB = 0x29,
  PROFILE_ID_CORRECT_TRAVERSE_LS = 0x2A,
  PROFILE_ID_CORRECT_TRAVERSE_SPHERE = 0x2B,
  PROFILE_ID_CORRECT_TRAVERSE_CAPSULE = 0x2C,
  PROFILE_ID_CORRECT_TRAVERSE_AABB = 0x2D,
  PROFILE_ID_CORRECT_TRAVERSE_OBB = 0x2E,
  PROFILE_ID_FIND_LS_CACHED = 0x2F,
  PROFILE_ID_CAST_SPHERE_CACHED = 0x30,
  PROFILE_ID_CAST_CAPSULE_CACHED = 0x31,
  PROFILE_ID_CAST_AABB_CACHED = 0x32,
  PROFILE_ID_FIND_LS_CACHED_MV = 0x33,
  PROFILE_ID_CAST_SPHERE_CACHED_MV = 0x34,
  PROFILE_ID_CAST_CAPSULE_CACHED_MV = 0x35,
  PROFILE_ID_FIND_LS_ONE_CACHED = 0x36,
  PROFILE_ID_ORIGINAL = 0x37,
  PROFILE_ID_ORIGINAL_CACHED = 0x38,
  PROFILE_ID_ORIGINAL_FIND = 0x39,
  PROFILE_ID_ORIGINAL_FIND_CACHED = 0x3A,
  PROFILE_GET_SBC_LOCK_INFO_LS = 0x3B,
  PROFILE_GET_SBC_LOCK_INFO_LS_ROTATE = 0x3C,
  PROFILE_GET_SBC_LOCK_INFO_SPHERE = 0x3D,
  PROFILE_GET_SBC_LOCK_INFO_SPHERE_ROTATE = 0x3E,
  PROFILE_REPAIR_SBC_MOVE = 0x3F,
  PROFILE_REPAIR_SBC_MOVE_ROTATE = 0x40,
  PROFILE_ID_NUM = 0x41,
};

enum sCollision::COLLIDER_CONTACT_TYPE : __int32
{
  COLLIDER_INTERSECT = 0x0,
  COLLIDER_CLOSEST = 0x1,
  COLLIDER_CLOSEST_XZ = 0x2,
  COLLIDER_FIND = 0x3,
  COLLIDER_CONTACT = 0x4,
  COLLIDER_TYPE_MAX = 0x5,
};

struct __cppobj sCollision::cSystemInitializeParam : MtObject
{
  u32 mSbcMaxNum;
  u32 mDBVTReserveBufferNum_SbcNoMoveAll[32];
  u32 mDBVTReserveBufferNum_SbcStopAll[32];
  u32 mDBVTReserveBufferNum_SbcMoveAll[32];
  u32 mDBVTReserveBufferNum_SbcStopParts[32];
  u32 mDBVTReserveBufferNum_SbcMoveParts[32];
  u32 mSbcMoveReserveArrayReserveNum;
  u32 mSbcMoveResetReserveArrayReserveNum;
  u32 mSbcRegistReserveArrayReserveNum;
  u32 mSbcUnregistArrayReserveNum;
  u32 mSbcMoveAllReserveArrayReserveNum;
  u32 mSbcMoveResetAllReserveArrayReserveNum;
  u32 mColliderNodeListMaxNum;
};

struct __cppobj sCollision::cSystemInitializeParam::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) sCollision::SbcLockInfo : sCollision::SbcInfo
{
  f32 mHitOffsetAxisPos;
  u32 mHitVid;
  u32 mHitBoxPlaneTriID;
  __attribute__((aligned(8))) MtVector3 mHitPos;
  MtVector3 mHitGravityPos;
  MtVector3 mHitOffsetNormal;
  MtQuaternion mHitQt;
  MtQuaternion mHitBasicScrQt;
  MtFloat3 mHitDyanmicSbcNormal;
  uDynamicSbc *mpHitDynamicSbc;
};

struct __cppobj sCollision::SbcLockInfo::MyDTI : MtDTI
{
};

struct sCollision::GetTriangleInfo
{
  u32 id;
  __attribute__((aligned(16))) MtTriangle tri;
  sCollision::SbcInfo sbc_info;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) sCollision::Param:2272 : MtObject
{
  u32 type;
  u32 checkGroupBit;
  u32 filter;
  _BYTE gap14[4];
  MtObject *mpOwnerModel;
  u32 hitTarget;
  _BYTE gap24[4];
  MtObject *pObject;
  sCollision::CONTACT_CALLBACK pFunc;
  _BYTE gap38[8];
  sCollision::CONTACT_CALLBACK_EX pCallbackFunctionEx;
  _BYTE gap48[8];
  uintptr param;
  MtObject *mpScrFilteringCallbackOwnerObject;
  sCollision::SCRCOLLISION_FILTERING_CALLBACK mpScrFilteringCallbackFunction;
  _BYTE gap68[8];
  void *mpScrFilteringCallbackFunctionParam;
  u32 mSkipTarget;
  _BYTE gap7C[4];
  MtObject *mpSkipTargetPhase0;
  MtObject *mpSkipTargetPhase1;
  bool FlgEnableFlatEdgeCheck;
  __attribute__((aligned(4))) u32 contact_mode;
  u32 correctionNum;
  u32 adjPosRepairSinkInAvailNum;
  f32 adjPosEpsilon;
  f32 adjConvexLimitP0;
  f32 adjConvexLimitP1;
  f32 adjConvexLimitR;
  f32 adjPosWallHitDownLen;
  f32 adjPosVibrationStopDotArea;
  f32 adjPosVibrationStopCheckMoveLenSq;
  f32 adjPosCharaVibrationStopDotArea;
  u32 AdjPosRegistAxisCollisionCheckMode;
  _BYTE gapC4[12];
  MtLineSegment AdjPosAxisCheckLS;
  MtSphere AdjPosAxisCheckSphere;
  MtVector3 AdjPosAxisCheckConvexMoveVec;
  bool FlgAdjPosWallEdgeStop;
  bool FlgAdjPosLsNoHitFallFlickEnable;
  bool FlgAdjPosForceWallFlick;
  bool FlgAdjPosAntiStopEnable;
  bool FlgAdjPosWallStop;
  bool FlgAdjPosWallStopForceAttrOnly;
  bool FlgAdjPosBasicScrThroughCheckPowerd;
  bool FlgPathBackSinkIn;
  bool FlgObjHitEnable;
  bool FlgSkinMeshEnable;
  bool adjPosMvMode;
  bool FlgInsideAdjustPositionOK;
};

struct __cppobj __attribute__((aligned(16))) sCollision::ParamGetPolygons : sCollision::Param:2272
{
  bool FlgCullingEnable;
  MtVector3 CullingNormal;
  f32 CullingArea;
};

struct __attribute__((aligned(8))) sCollision::PartsContactParam
{
  MtGeometry *pGeom;
  sCollision::TraverseInfo *pCallback;
  u32 ThreadIndex;
};

struct __cppobj __attribute__((aligned(8))) sCollision::ScrCollisionInfoFind : sCollision::ScrCollisionInfo
{
  MtVector3 hitPos;
  MtVector3 hitNormal;
  MtVector4 hitPlane;
  bool FlgBothSide;
  f32 NearestToi;
  f32 deepestDistance;
  sCollision::TriangleInfo *pTriangleInfo;
  f32 work;
};

struct __cppobj __attribute__((aligned(16))) sCollision::ScrCollisionInfoCastConvex : sCollision::ScrCollisionInfoFind
{
  MtContact contact;
  f32 HitEpsilon;
  bool FlgEdgeHit;
  bool FlgScrHit;
  bool FlgBackHit;
  bool FlgWorldMode;
};

struct __cppobj sCollision::ScrCollisionInfoCastConvex::MyDTI : MtDTI
{
};

struct __cppobj sCollision::ScrCollisionInfoFind::MyDTI : MtDTI
{
};

struct __cppobj sCollision::ScrCollisionInfoCastConvex:4928 : sCollision::ScrCollisionInfoFind
{
  MtContact contact;
  f32 HitEpsilon;
  bool FlgEdgeHit;
  bool FlgScrHit;
  bool FlgBackHit;
  bool FlgWorldMode;
};

struct __cppobj sCollision::ScrCollisionInfoAdjustPosition : sCollision::ScrCollisionInfoCastConvex:4928
{
  f32 HitRetValue;
  bool FlgAntiStopEnable;
  MtLineSegment AxisCheckLSMv;
  const MtLineSegment *pAxisCheckLSUse;
  __attribute__((aligned(16))) MtSphere AxisCheckSphereMv;
  MtVector3 AxisCheckSphereMoveVectorMv;
  const MtSphere *pAxisCheckSphereUse;
  const MtVector3 *pAxisCheckSphereMoveVectorUse;
  u32 HitAxisConvexResult;
  __attribute__((aligned(16))) MtPlane HitAxisContactPlane;
  f32 HitAxisNearestToi;
  bool FlgUpdateAxisConvexResult;
  u32 HitAxisConvexResultLS;
  __attribute__((aligned(8))) MtPlane HitAxisContactPlaneLS;
  f32 HitAxisNearestToiLS;
  bool FlgUpdateAxisConvexResultSystem;
  bool FlgJumpModeBeforeHitWall;
  __attribute__((aligned(16))) MtPlane HitPlaneJumpModeBeforeHitWall;
  bool FlgNextGroundEnd;
  bool FlgNextGroundDirFix;
  __attribute__((aligned(16))) MtVector3 NextGroundMoveVectorDir;
  sCollision::SbcInfo infoAxis;
  sCollision::SbcInfo infoAxisSystem;
};

struct __cppobj sCollision::ScrCollisionInfoAdjustPosition::MyDTI : MtDTI
{
};

typedef u32 (*sCollision::CONTACT_CALLBACK_ORGFUNC)(MtObject *, const sCollision::SbcInfo *, uintptr, u32);

typedef u32 (*sCollision::CONTACT_CALLBACK_ORGFUNC_FIND)(MtObject *, const sCollision::SbcInfo *, const MtContact *, uintptr, u32);

union __attribute__((aligned(16))) sCollision::ScrCollisionInfoOriginal::$4AAA143692D969A87716E10DB9C8DCA4
{
  sCollision::CONTACT_CALLBACK_ORGFUNC pScrHitCallback;
  sCollision::CONTACT_CALLBACK_ORGFUNC_FIND pScrHitCallbackFind;
};

typedef void (*sCollision::CONTACT_CALLBACK_ORGFUNC_PARTS)(MtObject *, const sCollision::SbcInfo *, uintptr);

struct __cppobj sCollision::ScrCollisionInfoOriginal : sCollision::ScrCollisionInfo
{
  MtObject *pCallbackOwnerObj;
  __attribute__((packed)) __attribute__((aligned(1))) sCollision::ScrCollisionInfoOriginal::$4AAA143692D969A87716E10DB9C8DCA4 _anon_0;
  sCollision::CONTACT_CALLBACK_ORGFUNC_PARTS pScrPartsHitCallback;
  _BYTE gap200[8];
  uintptr CallbackParam;
};

struct __cppobj sCollision::ScrCollisionInfoOriginal::MyDTI : MtDTI
{
};

struct __cppobj rCollision::MyDTI : MtDTI
{
};

struct __cppobj cBVHCollision::MyDTI : MtDTI
{
};

struct cBVHCollision::TraverseStack::$3DE02284BBFA431685935AF21D2C2D74::$EED963EA0873529B627956F4D7FD72B2
{
  u8 aFlgNode[4];
};

union cBVHCollision::TraverseStack::$3DE02284BBFA431685935AF21D2C2D74
{
  cBVHCollision::TraverseStack::$3DE02284BBFA431685935AF21D2C2D74::$EED963EA0873529B627956F4D7FD72B2 _anon_0;
  u32 aFlgNodeAll;
};

struct cBVHCollision::TraverseStack::$A5A2FF84EB0B47E478CBE107BEA91B26::$DB33C0405F8ADE0B7912B33E95A50C12
{
  u8 aFlgLeaf[4];
};

union cBVHCollision::TraverseStack::$A5A2FF84EB0B47E478CBE107BEA91B26
{
  cBVHCollision::TraverseStack::$A5A2FF84EB0B47E478CBE107BEA91B26::$DB33C0405F8ADE0B7912B33E95A50C12 _anon_0;
  u32 aFlgLeafAll;
};

struct __attribute__((aligned(16))) cBVHCollision::TraverseStack
{
  MtCollisionUtil::MtVectorU4 aFlgHitAll;
  cBVHCollision::TraverseStack::$3DE02284BBFA431685935AF21D2C2D74 _anon_0;
  cBVHCollision::TraverseStack::$A5A2FF84EB0B47E478CBE107BEA91B26 _anon_1;
  void *pRegistNodePtr[1];
  u8 aFlgHit[4];
};

struct __cppobj cBVHCollision::cWorkBuildOnlineFast::MyDTI : MtDTI
{
};

struct __cppobj cGridCollision::MyDTI : MtDTI
{
};

typedef cGridCollision::cCellRegisterArray<u16,2> cGridCollision::cU16Array;

struct __cppobj cGridCollision::cCellRegisterArray<u16,2> : cGridCollision::cCellRegisterArrayBase
{
};

typedef cGridCollision::cCellRegisterArray<u32,2> cGridCollision::cU32Array;

struct __cppobj cGridCollision::cCellRegisterArray<u32,2> : cGridCollision::cCellRegisterArrayBase
{
};

typedef u32 (*cGridCollision::INSIDE_TRAVERSE_CALLBACK)(MtObject *, s32, s32, uintptr);

struct cGridCollision::TraverseSystemParam
{
  u32 mNowTraverseCount;
  u32 mNowThreadIndex;
  u32 mNowNest;
};

struct __cppobj rCollisionHeightField::MyDTI : MtDTI
{
};

struct __cppobj MtGeomOBB::MyDTI : MtDTI
{
};

struct __cppobj MtGeomSphere::MyDTI : MtDTI
{
};

struct __cppobj MtGeomCapsule::MyDTI : MtDTI
{
};

struct __cppobj MtGeomTriangle::MyDTI : MtDTI
{
};

struct MtGeomTriangle::CoGIdResult4
{
  u32 u4[4];
};

struct __cppobj MtGeomLineSegment::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cChat::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cOptionValue::MyDTI : MtDTI
{
};

enum sGUIExt::cOptionValue::TYPE : __int32
{
  TYPE_CLOCK_MODE = 0x0,
  TYPE_MAPMINI_ROTATION = 0x1,
  TYPE_DAMAGE_CHAT_DISP = 0x2,
  TYPE_UI_ZTEST = 0x3,
  TYPE_CAMERA_UD_MOVE_PATERN = 0x4,
  TYPE_CAMERA_UD_SPEED = 0x5,
  TYPE_CAMERA_LR_MOVE_PATERN = 0x6,
  TYPE_CAMERA_LR_SPEED = 0x7,
  TYPE_AUTO_SAVE = 0x8,
  TYPE_INSTALL = 0x9,
  TYPE_MAX = 0xA,
};

struct __cppobj sGUIExt::cQuestTargetInfoList::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cQuestTargetInfo::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cPriorityManagerList::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cPriorityManager::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cPriorityManager::cData::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cMap::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cMap::cMapGrid : MtObject
{
  bool mEnable;
  MtString mArcPath;
  u32 mParts;
  u32 mRows;
  u32 mCols;
  u32 mFloor;
  u32 mRowsMax;
  u32 mColsMax;
  MtVector2 mOfs;
  rTexture *mpTexture;
};

typedef MtTypedArray<uDDOModel> sGUIExt::TouchArrayType;

enum sGUIExt::PRIO_MANAGER : __int32
{
  PRIO_MANAGER_ENEMY = 0x0,
  PRIO_MANAGER_NPC = 0x1,
  PRIO_MANAGER_PARTY_MEMBER = 0x2,
  PRIO_MANAGER_MAX = 0x3,
};

enum sGUIExt::TYPE_NPCWINDOW : __int32
{
  TYPE_NPCWINDOW_24x6 = 0x0,
  TYPE_NPCWINDOW_MAX = 0x1,
  TYPE_NPCWINDOW_DEFAULT = 0x0,
};

struct sGUIExt::stSystemMsg
{
  u32 mSkipType;
  u32 mIconType;
  u32 mIconPos;
};

typedef sGUIExt::cPriorityManagerList *nDDOUtility::cArray<sGUIExt::cPriorityManagerList,3>::reference;

typedef sGUIExt::cPriorityManager *nDDOUtility::cArray<sGUIExt::cPriorityManager,2>::reference;

typedef u32 size_type;

struct uDDOModel;

struct __cppobj MtGeomLine : MtGeometry
{
  __attribute__((aligned(8))) MtLine mLine;
};

struct __cppobj MtGeomLine::MyDTI : MtDTI
{
};

struct __cppobj MtGeomRay : MtGeometry
{
  __attribute__((aligned(8))) MtRay mRay;
};

struct __cppobj MtGeomRay::MyDTI : MtDTI
{
};

struct __cppobj MtGeomPlane : MtGeometry
{
  __attribute__((aligned(8))) MtPlane mPlane;
};

struct __cppobj MtGeomPlane::MyDTI : MtDTI
{
};

struct __cppobj MtGeomPlaneXZ : MtGeometry:96
{
  MtPlaneXZ mPlaneXZ;
};

struct __cppobj MtGeomPlaneXZ::MyDTI : MtDTI
{
};

struct nCollisionUtil::LoadBuffer
{
  u8 *pBuffer;
  u32 Position;
  u32 Size;
};

struct uGUIOption;

typedef const MtObject *(*estimate_cast::UNIT_ESTIMATOR)(const MtObject *, const MtDTI *);

struct __cppobj __attribute__((aligned(8))) sSkeletonTool : sTool
{
};

struct __cppobj sSkeletonTool::MyDTI : MtDTI
{
};

struct __cppobj sTool::MyDTI : MtDTI
{
};

enum sTool::OP_MODE : __int32
{
  OP_DEFAULT = 0x0,
  OP_PAD1 = 0x1,
  OP_PAD2 = 0x2,
  OP_PAD3 = 0x3,
  OP_PAD4 = 0x4,
  OP_NUM = 0x5,
};

struct __cppobj sToolBase::MyDTI : MtDTI
{
};

struct HPDDbgMoji
{
  char mTmpBuffer[256];
  MtColor mColor;
  MtPoint mPos;
  MtPoint mAdd;
};

struct __va_list_tag
{
  unsigned int gp_offset;
  unsigned int fp_offset;
  void *overflow_arg_area;
  void *reg_save_area;
};

typedef __va_list_tag __va_list_tag_0;

typedef __va_list_tag_0 __builtin_va_list[1];

typedef __builtin_va_list __va_list;

typedef __va_list va_list;

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::network::utility::HttpDownloadManager::Task *,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::network::utility::HttpDownloadManager::Task *,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::network::utility::HttpDownloadManager::Task *,true,1> mThis;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::network::utility::HttpDownloadManager::UriTbl::Uri,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::network::utility::HttpDownloadManager::UriTbl::Uri,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::network::utility::HttpDownloadManager::UriTbl::Uri,true,1> mThis;
};

enum via::module::http_patch::Security : __int32
{
  Security_IgnoreUnknownCA = 0x1,
  Security_IgnoreCertCnInvalid = 0x2,
  Security_IgnoreCertDateInvalid = 0x4,
  Security_IgnoreCertWrongUsage = 0x8,
  Security_AllowRejectedCert = 0x10,
  Security_IgnoreValidationCache = 0x20,
};

struct __attribute__((aligned(8))) MtNetSubObject
{
  MtCriticalSection mCS;
  bool mIsThreadSafe;
  s32 mLockCount;
  MtNetError mFatal;
};

enum HttpClient::RedirectPolicy : __int32
{
  RedirectPolicy_Never_0 = 0x0,
  RedirectPolicy_Always_0 = 0x1,
  RedirectPolicy_DisallowHttpsToHttp_0 = 0x2,
  RedirectPolicy_NoSchemeChanges_0 = 0x3,
  RedirectPolicy_Max = 0x4,
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::network::utility::HttpDownloadManager::Task *,true,1> via::module::network::utility::HttpDownloadManager::httpdl_array_Task;

struct via_atomic_bool
{
  int (**_vptr$via_atomic_bool)(void);
  bool mBool;
  MtCriticalSection mCs;
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::network::utility::HttpDownloadManager::UriTbl::Uri,true,1> via::module::network::utility::HttpDownloadManager::UriTbl::httpdl_array_Uri;

struct __cppobj __attribute__((aligned(8))) via::module::network::utility::HttpDownloadManager::UriTbl : MtNetSubObject
{
  via::module::network::utility::HttpDownloadManager::UriTbl::httpdl_array_Uri mTbl;
  bool mIsAbort;
  bool mIsFail;
  s32 mLastError;
  HPDErrCategory mEcType;
};

struct __cppobj via::module::network::utility::HttpDownloadManager : MtNetSubObject
{
  int (**_vptr$HttpDownloadManager)(void);
  size_t mReceiveDataMaxSize;
  MT_CTSTR mUserAgentStrPtr;
  MT_CTSTR mProxyNameStrPtr;
  u32 mSecurityFlags;
  HttpClient::RedirectPolicy mRedirectPolicy;
  via::module::network::utility::HttpDownloadManager::httpdl_array_Task mTaskTbl;
  via_atomic_bool mIsInProgress;
  via::module::network::utility::HttpDownloadManager::Listener *mListenerPtr;
  MT_CTSTR mAuthUriStrPtr;
  via::module::network::utility::HttpDownloadManager::UriTbl mPathUriTbl;
};

struct HttpClient::Listener
{
  int (**_vptr$Listener)(void);
};

struct __cppobj via::module::network::utility::HttpDownloadManager::Task : HttpClient::Listener, MtNetSubObject
{
  via::module::network::utility::HttpDownloadManager *mManagerPtr;
  size_t mIndex;
  HttpClient *mHttpPtr;
  size_t mUriIdx;
  MtString mUriStr;
  bool mIsEnd;
  HPDErrCategory mCbEcType;
  size_t mCbStatusCode;
  size_t mCbContentLength;
  size_t mCbReceiveLength;
};

struct __attribute__((packed)) __attribute__((aligned(4))) MtNetSubObject:224
{
  MtCriticalSection mCS;
  bool mIsThreadSafe;
  __attribute__((aligned(4))) s32 mLockCount;
  MtNetError mFatal;
};

typedef void (*HttpClient::RequestCallback)(MtObject *, void *);

enum HttpClient::Method : __int32
{
  Method_Get = 0x0,
  Method_Post = 0x1,
  Method_Put = 0x2,
  Method_Delete = 0x3,
};

struct HttpClient::RequestArg
{
  bool isKeepalive;
  MT_CTSTR uriAuthStrPtr;
  MT_CTSTR uriPathStrPtr;
  HttpClient::Method method;
  MT_CTSTR headerStrPtr;
  const void *dataPtr;
  size_t dataSize;
};

struct __cppobj HttpClient : cHttpClient, MtNetSubObject:224
{
  MT_CHAR mRecvBuff[32768];
  u32 mScheme;
  HttpClient::Listener *mpListener;
  s32 mRequestMethod;
  MT_STR mpRequestUrl;
  MT_CTSTR mpRequestData;
  u32 mRequestDataSize;
  u32 mRequestDataSent;
  MT_CTSTR mpHeader;
  s32 mResponseHeaderSize;
  s32 mState;
  s32 mPhase;
  bool mIsReceivedHeader;
  s32 mSocketLib;
  size_t mReceiveDataMaxSize;
  MT_STR mpProxyServerName;
  MT_CTSTR mpUserAgentString;
  u32 mSecurityFlags;
  HttpClient::RedirectPolicy mRedirectPolicy;
  void *mpCertificateData;
  u32 mCertificateDataSize;
  MtString mCertificateName;
  HttpClient::RequestCallback mCallback;
  _BYTE gap10170[8];
  MtObject *mObject;
  bool mExit;
  bool mResume;
  bool mIsProcess;
  MtThread *mThread;
  MtSemaphore mSemaphore;
  HttpClient::Listener *mListenerPtr;
  bool mIsInProgress;
  bool mIsInitialized;
  bool mIsWaiting;
  bool mIsGoRequest;
  bool mIsGoFinalize;
  HttpClient::RequestArg mRequestArg;
  MtCriticalSection mCS;
  MtString mUrlStr;
  char *mRecvBuf;
  u64 mRecvBufSize;
  int mTemplateId;
  int mConnectionId;
  int mRequestId;
  SceHttpEpollHandle mEpollHandle;
  MT_CTSTR mpData;
  u32 mcData;
  s32 mLastRequestRet;
  bool swHttpClientDisuse;
  int mHttpNetMemId;
};

struct __cppobj via::module::network::utility::HttpDownloadManager::UriTbl::Uri : MtObject
{
  MtString mStr;
  u8 mFailCount;
  u8 mIsStart;
  u8 mIsEnd;
  s32 mLastError;
  HPDErrCategory mEcType;
  s32 mAffinity;
};

struct __cppobj via::module::network::utility::HttpDownloadManager::UriTbl::Uri::MyDTI : MtDTI
{
};

struct HttpClient::ResponseHeader
{
  s32 mStatusCode;
  s32 mContentLength;
  MtString mHeaderStr;
  MtString mLocation;
};

struct HttpClient::RecvBuf
{
  void *ptr;
  size_t size;
};

enum HttpClient::Error : __int32
{
  Error_Pending = 0xFFFFFFFF,
  Error_None = 0x0,
};

typedef MtCollisionUtil::MtArrayTemplateEx<MtStringExURL,true,1> httpdl_array_MtStringExURL;

typedef MtCollisionUtil::MtArrayTemplateEx<s32,false,1> httpdl_array_s32;

enum via::module::http_patch::FileController::PatchCommand : __int32
{
  PatchCommand_None = 0x0,
  PatchCommand_Size = 0x1,
  PatchCommand_Data_s2s = 0x2,
  PatchCommand_Data_p2s = 0x3,
  PatchCommand_Max = 0xFFFFFFFF,
};

union via::module::http_patch::FileController::PATCH_ARCHIVE_HDR::$D0285AB0920D4710456886D1169E7930
{
  u32 magic;
  u8 mg[4];
};

struct via::module::http_patch::FileController::PATCH_ARCHIVE_HDR
{
  via::module::http_patch::FileController::PATCH_ARCHIVE_HDR::$D0285AB0920D4710456886D1169E7930 _anon_0;
  u16 version;
  u16 command_num;
};

struct via::module::http_patch::FileController::PATCH_ARCHIVE_PATH
{
  MT_CHAR path[128];
};

struct via::module::http_patch::FileController::PatchCmdSize
{
  u32 size;
  u32 dmy[2];
};

struct via::module::http_patch::FileController::ARCHIVE_HDR
{
  u32 magic;
  u16 version;
  u16 resource_num;
};

struct via::module::http_patch::FileController::PatchCmdHead
{
  via::module::http_patch::FileController::ARCHIVE_HDR ah;
  u32 dmy[1];
};

struct via::module::http_patch::FileController::PatchCmdInfo
{
  u32 num;
  u32 dmy[2];
};

struct via::module::http_patch::FileController::PatchCmdData
{
  u32 offset_src;
  u32 offset_dst;
  u32 size;
};

union via::module::http_patch::FileController::PATCH_COMMAND::$3D690FC5CEBF944B2460C20FAA3624EB
{
  via::module::http_patch::FileController::PatchCmdSize size;
  via::module::http_patch::FileController::PatchCmdHead head;
  via::module::http_patch::FileController::PatchCmdInfo info;
  via::module::http_patch::FileController::PatchCmdData data;
};

struct via::module::http_patch::FileController::PATCH_COMMAND
{
  via::module::http_patch::FileController::PatchCommand cmd;
  via::module::http_patch::FileController::PATCH_COMMAND::$3D690FC5CEBF944B2460C20FAA3624EB _anon_0;
};

struct via::module::http_patch::FileController::FILE_ARCHIVE_HEADER
{
  u32 magic;
  u16 version;
  u16 resource_num;
};

enum via::path::DriveType : __int32
{
  DriveType_Download = 0x0,
  DriveType_Temp = 0x1,
  DriveType_MaxType = 0x2,
};

struct via::AutoPerfCounter
{
  __int8 gap0[1];
};

union Patch_SlideDic::PDSx_HEAD::$D0285AB0920D4710456886D1169E7930
{
  u32 magic;
  u8 mg[4];
};

struct Patch_SlideDic::PDSx_VER::$B94E78EA3E9CC6D63712F63D55B9F84A::$EDF7F5E3CFFD24B0C043A88D00C854F3
{
  u16 build;
  u8 minor;
  u8 major;
};

union Patch_SlideDic::PDSx_VER::$B94E78EA3E9CC6D63712F63D55B9F84A
{
  u32 sion;
  Patch_SlideDic::PDSx_VER::$B94E78EA3E9CC6D63712F63D55B9F84A::$EDF7F5E3CFFD24B0C043A88D00C854F3 sub;
};

struct Patch_SlideDic::PDSx_VER
{
  Patch_SlideDic::PDSx_VER::$B94E78EA3E9CC6D63712F63D55B9F84A _anon_0;
};

struct Patch_SlideDic::PDSx_HEAD
{
  Patch_SlideDic::PDSx_HEAD::$D0285AB0920D4710456886D1169E7930 _anon_0;
  u32 offset;
  u32 decSize;
  Patch_SlideDic::PDSx_VER ver;
};

enum Patch_SlideDic::cPSlideDicDecode::SLDIC_PATCH_TYPE : __int32
{
  SLDIC_PATCH_ALONE = 0x0,
  SLDIC_PATCH_SLDIC = 0x1,
  SLDIC_PATCH_SLTXT = 0x2,
  SLDIC_PATCH_KNOWN = 0x3,
  SLDIC_PATCH_SL_MAX = 0x4,
};

enum Patch_SlideDic::cPSlideDicDecode::PDFileID : __int32
{
  PDFID_PAT_CMD = 0x0,
  PDFID_PAT_DIC = 0x1,
  PDFID_NEW_FILE = 0x2,
  PDFID_OLD_FILE = 0x3,
};

struct __attribute__((aligned(8))) Patch_SlideDic::cPSlideDicDecode::cPDFile
{
  bool mBe;
  bool mOnMemory;
  Patch_SlideDic::cPSlideDicDecode::PDFileID mWhoAmI;
  MtFile mF;
  MtFileStream mFS;
  u32 mFileSize;
  u32 mWriteSize;
  u32 mPos;
  u32 mReadOffset;
  u32 mFileOffset;
  u8 *mMemAdrs;
  u32 mMemSize;
  u32 mMemPos;
  u32 mCntSeek;
  u32 mCntRead;
  u32 mCntWrite;
};

enum Patch_SlideDic::cPSlideDicDecode::FLEX_MEM_MODEL : __int32
{
  FMM_TYPE_0 = 0x0,
  FMM_TYPE_1 = 0x1,
  FMM_TYPE_2 = 0x2,
  FMM_TYPE_3 = 0x3,
  FMM_TYPE_4 = 0x4,
  FMM_TYPE_MAX = 0x5,
  FMM_TYPE_Error = 0x6,
  FMM_TYPE_MINIMUM = 0x0,
  FMM_TYPE_MAXIMUM = 0x4,
};

struct Patch_SlideDic::TYPE_CMD_CP_BASE
{
  u32 cmd;
  u32 pos;
};

struct Patch_SlideDic::TYPE_CMD_CP_PATCH
{
  u32 cmd;
  u32 pos;
};

struct Patch_SlideDic::TYPE_CMD_CP_DIR_1B
{
  u32 cmd;
};

struct Patch_SlideDic::TYPE_CMD_CP_DIR_4B
{
  u32 cmd;
};

struct Patch_SlideDic::TYPE_CMD_SL_BASE
{
  u32 cmd;
  u32 num;
  u32 pos;
};

struct Patch_SlideDic::TYPE_CMD_SL_PATCH
{
  u32 cmd;
  u32 num;
  u32 pos;
};

struct Patch_SlideDic::TYPE_CMD_SAME_DATA
{
  u32 cmd;
  u32 data;
};

struct Patch_SlideDic::TYPE_CMD_SERIAL_4B
{
  u32 cmd;
  u32 iData;
  u32 aData;
};

struct Patch_SlideDic::cPSlideDicDecode
{
  Patch_SlideDic::PDSx_HEAD mHeader;
  u8 *mBuffer;
  MtFileStream *mFFS;
  MtString mFFSPath;
  u8 *mTarPath;
  Patch_SlideDic::cPSlideDicDecode::SLDIC_PATCH_TYPE mPatchType;
  u32 mPatchSize;
  u32 mPatchOffset;
  MtString mStoreFolder;
  MtString mFnOld;
  MtString mFnNew;
  Patch_SlideDic::cPSlideDicDecode::cPDFile cPatCmd;
  Patch_SlideDic::cPSlideDicDecode::cPDFile cPatDic;
  Patch_SlideDic::cPSlideDicDecode::cPDFile cNewFile;
  Patch_SlideDic::cPSlideDicDecode::cPDFile cOldFile;
  bool mSwSingleMode;
  Patch_SlideDic::cPSlideDicDecode::FLEX_MEM_MODEL mFMMType;
  u32 mFMMSize[5];
  Patch_SlideDic::TYPE_CMD_CP_BASE mCpBase;
  Patch_SlideDic::TYPE_CMD_CP_PATCH mCpPatch;
  Patch_SlideDic::TYPE_CMD_CP_DIR_1B mCpDir1B;
  Patch_SlideDic::TYPE_CMD_CP_DIR_4B mCpDir4B;
  Patch_SlideDic::TYPE_CMD_SL_BASE mSLBase;
  Patch_SlideDic::TYPE_CMD_SL_PATCH mSLPatch;
  Patch_SlideDic::TYPE_CMD_SAME_DATA mSameData;
  Patch_SlideDic::TYPE_CMD_SERIAL_4B mSerial4B;
  u32 mOutputBufferSize;
  u32 mSize_B_WRT;
  u32 mSize_B_PCC;
  u32 mSize_F_PDS;
  u32 mSize_F_OLD;
  u32 mSize_F_NEW;
  u32 mCmdBuffer[4];
};

enum Patch_SlideDic::cPSlideDicDecode::SLDIC_ERR_TYPE : __int32
{
  SLDIC_ERR_NONE = 0x0,
  SLDIC_ERR_OPEN = 0x1,
  SLDIC_ERR_READ = 0x2,
  SLDIC_ERR_WRITE = 0x3,
  SLDIC_ERR_MAGIC = 0x4,
  SLDIC_ERR_VERSION = 0x5,
  SLDIC_ERR_UNKNOWN = 0x6,
  SLDIC_ERR_ABORT = 0x7,
  SLDIC_ERR_FMM = 0x8,
  SLDIC_ERR_MAX = 0x9,
};

struct MtAutoCriticalSection
{
  MtCriticalSection *mpCSection;
};

typedef via::module::http_patch::FileController::Failed via::module::http_patch::FileController::failed_t;

enum via::module::http_patch::DownloadFileAttribute : __int32
{
  DownloadFileAttribute_AssetFile = 0x1,
  DownloadFileAttribute_PatchFile = 0x2,
  DownloadFileAttribute_RefreshFile = 0x4,
  DownloadFileAttribute_DeleteFile = 0x8,
  DownloadFileAttribute_ArchiveFile = 0x10,
  DownloadFileAttribute_PlainBinaryFile = 0x20,
  DownloadFileAttribute_FileTypeMask = 0x3F,
};

struct __cppobj via::module::http_patch::ExeVersionListener : via::module::http_patch::FileListener
{
  u32 mVersionsLauncher;
  u32 mVersionsGameApp;
  via::module::http_patch::exefileinfo_array_t mExeFileInfo;
};

struct __cppobj via::module::http_patch::VersionListListener : via::module::http_patch::FileListener
{
  via::module::http_patch::versioninfo_array_t mVersions;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::http_patch::FullListListener::FileInfo,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::FullListListener::FileInfo,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::http_patch::FullListListener::FileInfo,true,1> mThis;
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::FullListListener::FileInfo,true,1> via::module::http_patch::FullListListener::DownloadFileInfo;

struct __cppobj via::module::http_patch::FullListListener : via::module::http_patch::FileListener
{
  via::module::http_patch::FullListListener::DownloadFileInfo mFullList;
};

struct via::module::http_patch::FullListListener::FileInfo
{
  MtStringEx<128> name;
  size_t size;
  u8 binary_hash[32];
  MtStringEx<32> split_file;
  u32 attr;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::http_patch::PurgeListListener::FileInfo,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::PurgeListListener::FileInfo,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::http_patch::PurgeListListener::FileInfo,true,1> mThis;
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::PurgeListListener::FileInfo,true,1> via::module::http_patch::PurgeListListener::DownloadFileInfo;

struct __cppobj via::module::http_patch::PurgeListListener : via::module::http_patch::FileListener
{
  via::module::http_patch::PurgeListListener::DownloadFileInfo mFileList;
};

struct via::module::http_patch::PurgeListListener::FileInfo
{
  MtStringEx<128> path;
};

struct __cppobj MtCollisionUtil::MtArrayTemplate<via::module::http_patch::FileListListener::FileInfo,true,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::FileListListener::FileInfo,true,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<via::module::http_patch::FileListListener::FileInfo,true,1> mThis;
};

typedef MtCollisionUtil::MtArrayTemplateEx<via::module::http_patch::FileListListener::FileInfo,true,1> via::module::http_patch::FileListListener::DownloadFileInfo;

struct __cppobj via::module::http_patch::FileListListener : via::module::http_patch::FileListener
{
  via::module::http_patch::FileListListener::DownloadFileInfo mFileList;
};

struct __attribute__((aligned(8))) via::module::http_patch::FileListListener::FileInfo
{
  u64 version;
  MtStringEx<128> path;
  size_t size;
  u8 binary_hash[32];
  u32 attribute;
};

struct via::module::http_patch::SucceedFileInfo
{
  u32 file_version;
  u64 hash;
};

typedef char std::_Simple_types<value_type>::value_type;

typedef std::_Simple_types<value_type>::value_type std::_String_val<_Val_types>::value_type;

typedef std::_Simple_types<value_type>::value_type *std::_Simple_types<value_type>::pointer;

typedef std::_Simple_types<value_type>::pointer std::_String_val<_Val_types>::pointer;

union std::_String_val<_Val_types>::_Bxty
{
  std::_String_val<_Val_types>::value_type _Buf[16];
  std::_String_val<_Val_types>::pointer _Ptr;
  char _Alias[16];
};

typedef size_t std::_Simple_types<value_type>::size_type;

typedef std::_Simple_types<value_type>::size_type std::_String_val<_Val_types>::size_type;

struct __cppobj std::_String_val<_Val_types> : std::_Container_base
{
  std::_String_val<_Val_types>::_Bxty _Bx;
  std::_String_val<_Val_types>::size_type _Mysize;
  std::_String_val<_Val_types>::size_type _Myres;
};

struct __cppobj std::_String_alloc<false,std::_String_base_types<char> > : std::_String_val<_Val_types>
{
};

struct __cppobj std::string : std::_String_alloc<false,std::_String_base_types<char> >
{
};

typedef std::_String_val<_Val_types>::size_type std::string::size_type;

typedef std::string std::string::_Myt;

typedef std::allocator<char> std::string::allocator_type;

struct std::_Allocator_base<char>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<char> : std::_Allocator_base<char>
{
};

typedef std::_String_val<_Val_types>::pointer std::string::pointer;

typedef std::_String_val<_Val_types>::value_type std::string::value_type;

typedef std::allocator<char> std::_String_base_types<char>::_Alloc;

typedef std::_String_base_types<char>::_Alloc std::_String_alloc<false,std::_String_base_types<char> >::_Alloc;

typedef std::_Wrap_alloc<_Alloc> std::_Wrap_alloc<_Alloc>::other;

typedef std::_Wrap_alloc<_Alloc>::other std::_String_base_types<char>::_Alty;

typedef std::_String_base_types<char>::_Alty std::_String_alloc<false,std::_String_base_types<char> >::_Alty;

struct __cppobj std::_Wrap_alloc<_Alloc> : std::allocator<char>
{
};

typedef const std::_Simple_types<value_type>::value_type *std::_Simple_types<value_type>::const_pointer;

typedef std::_Simple_types<value_type>::const_pointer std::_String_val<_Val_types>::const_pointer;

struct std::_Simple_types<value_type>
{
  __int8 gap0[1];
};

struct std::_String_base_types<char>
{
  __int8 gap0[1];
};

typedef char std::_Allocator_base<char>::value_type;

typedef std::_Allocator_base<char>::value_type std::allocator<char>::value_type;

typedef std::allocator<char>::value_type *std::allocator<char>::pointer;

typedef std::allocator<char> std::_Wrap_alloc<_Alloc>::_Mybase;

typedef std::allocator<char>::value_type std::allocator_traits<std::allocator<char> >::value_type;

typedef std::allocator_traits<std::allocator<char> >::value_type *std::allocator_traits<std::allocator<char> >::pointer;

typedef std::allocator_traits<std::allocator<char> >::pointer std::_Wrap_alloc<_Alloc>::pointer;

typedef size_t std::allocator_traits<std::allocator<char> >::size_type;

typedef std::allocator_traits<std::allocator<char> >::size_type std::_Wrap_alloc<_Alloc>::size_type;

struct std::allocator_traits<std::allocator<char> >
{
  __int8 gap0[1];
};

typedef std::allocator<char> std::allocator_traits<std::allocator<char> >::_Alloc;

struct std::char_traits<char>
{
  __int8 gap0[1];
};

typedef char std::char_traits<char>::_Elem;

typedef int std::char_traits<char>::int_type;

struct __cppobj std::_Iterator012<std::random_access_iterator_tag,value_type,difference_type,const_pointer,const_reference,_Iterator_base> : std::_Iterator_base0
{
};

typedef std::_String_val<_Val_types>::const_pointer std::_String_const_iterator<_Myt>::pointer;

struct __cppobj std::_String_const_iterator<_Myt> : std::_Iterator012<std::random_access_iterator_tag,value_type,difference_type,const_pointer,const_reference,_Iterator_base>
{
  std::_String_const_iterator<_Myt>::pointer _Ptr;
};

struct std::input_iterator_tag
{
  __int8 gap0[1];
};

struct __cppobj std::forward_iterator_tag : std::input_iterator_tag
{
};

struct __cppobj std::bidirectional_iterator_tag : std::forward_iterator_tag
{
};

struct __cppobj std::random_access_iterator_tag : std::bidirectional_iterator_tag
{
};

struct std::output_iterator_tag
{
  __int8 gap0[1];
};

struct std::initializer_list<char>
{
  const char *_First;
  const char *_Last;
};

struct __cppobj std::_String_iterator<_Myt> : std::_String_const_iterator<_Myt>
{
};

struct std::remove_reference<char *&>
{
  __int8 gap0[1];
};

typedef char *std::remove_reference<char *&>::type;

struct MtStringEx<16>
{
  u32 mLength;
  char mStr[16];
};

typedef size_t size_type_0;

typedef MtCollisionUtil::MtArrayTemplateEx<MtString,true,1> httpdl_array_MtString;

typedef via::module::http_patch::ParallelsFileListenerManager *via::module::http_patch::HttpPatchManager::parallelsfilelistenermanager_t;

typedef httpdl_array_MtString via::module::http_patch::findfile_array_t;

struct __cppobj via::module::http_patch::MtThread_HttpPatchManager_calcNormalVersionProc : MtThread
{
};

typedef via::crc_optimal<64,2620502051,4207869677,3735928559> via::module::http_patch::crc64_t;

typedef u64 via::detail::crc::unsigned_int_bit_storage_helper<2>::type;

typedef via::detail::crc::unsigned_int_bit_storage_helper<2>::type via::detail::crc::unsigned_int_bit_storage<64>::type;

typedef via::detail::crc::unsigned_int_bit_storage<64>::type via::detail::crc::unsigned_int_bit_traits<64>::least_type;

typedef via::detail::crc::unsigned_int_bit_traits<64>::least_type via::crc_optimal<64,2620502051,4207869677,3735928559>::value_type;

struct via::crc_optimal<64,2620502051,4207869677,3735928559>
{
  via::crc_optimal<64,2620502051,4207869677,3735928559>::value_type mResult;
};

typedef MtString via::module::http_patch::findfilepath_str_t;

typedef via::crc_optimal<64,2620502051,4207869677,3735928559> via::crc_optimal<64,2620502051,4207869677,3735928559>::this_type;

struct via::detail::crc::unsigned_int_bit_traits<64>
{
  __int8 gap0[1];
};

struct via::detail::crc::unsigned_int_bit_storage<64>
{
  __int8 gap0[1];
};

struct via::detail::crc::unsigned_int_bit_storage_helper<2>
{
  __int8 gap0[1];
};

struct via::detail::crc::crc_table_t<64,2620502051>
{
  __int8 gap0[1];
};

typedef via::detail::crc::unsigned_int_bit_storage<64>::type via::detail::crc::crc_table_t<64,2620502051>::value_type;

struct via::detail::crc::crc_calculator_base<64,2620502051>
{
  __int8 gap0[1];
};

struct __cppobj via::detail::crc::crc_calculator<64,2620502051> : via::detail::crc::crc_calculator_base<64,2620502051>
{
};

typedef via::detail::crc::unsigned_int_bit_storage<64>::type via::detail::crc::crc_calculator_base<64,2620502051>::value_type;

typedef via::detail::crc::crc_calculator_base<64,2620502051>::value_type via::detail::crc::crc_calculator<64,2620502051>::value_type;

struct via::detail::crc::reflector<8>
{
  __int8 gap0[1];
};

typedef u8 via::detail::crc::unsigned_int_bit_storage_helper<5>::type;

typedef via::detail::crc::unsigned_int_bit_storage_helper<5>::type via::detail::crc::unsigned_int_bit_storage<8>::type;

typedef via::detail::crc::unsigned_int_bit_storage<8>::type via::detail::crc::reflector<8>::value_type;

struct via::detail::crc::unsigned_int_bit_storage<8>
{
  __int8 gap0[1];
};

struct via::detail::crc::unsigned_int_bit_storage_helper<5>
{
  __int8 gap0[1];
};

struct via::detail::crc::reflector<64>
{
  __int8 gap0[1];
};

typedef via::detail::crc::unsigned_int_bit_storage<64>::type via::detail::crc::reflector<64>::value_type;

struct __cppobj MtCollisionUtil::MtArrayTemplate<unsigned long,false,1> : MtCollisionUtil::MtArrayBasicBase
{
};

struct MtCollisionUtil::MtArrayTemplateEx<u64,false,1>
{
  int (**_vptr$MtArrayTemplateEx)(void);
  MtCollisionUtil::MtArrayTemplate<unsigned long,false,1> mThis;
};

enum MtFile::FileInfo::ATTR : __int32
{
  ATTR_DIRECTORY = 0x1,
  ATTR_ARCHIVABLE = 0x2,
  ATTR_HIDDEN = 0x4,
  ATTR_NORMAL = 0x8,
  ATTR_READONLY = 0x10,
  ATTR_SYSTEM = 0x20,
};

struct std::_Error_objects<int>
{
  __int8 gap0[1];
};

struct std::error_category
{
  int (**_vptr$error_category)(void);
};

struct __cppobj std::_Generic_error_category : std::error_category
{
};

typedef std::string std::string;

typedef std::_String_val<_Val_types>::const_pointer std::string::const_pointer;

typedef std::_String_const_iterator<_Myt> std::_String_val<_Val_types>::const_iterator;

typedef std::_String_val<_Val_types>::const_iterator std::string::const_iterator;

typedef std::_String_iterator<_Myt> std::_String_val<_Val_types>::iterator;

typedef std::_String_val<_Val_types>::iterator std::string::iterator;

typedef std::_Simple_types<value_type>::value_type *std::_Simple_types<value_type>::reference;

typedef std::_Simple_types<value_type>::reference std::_String_val<_Val_types>::reference;

typedef std::_String_val<_Val_types>::reference std::string::reference;

typedef const std::_Simple_types<value_type>::value_type *std::_Simple_types<value_type>::const_reference;

typedef std::_Simple_types<value_type>::const_reference std::_String_val<_Val_types>::const_reference;

typedef std::_String_val<_Val_types>::const_reference std::string::const_reference;

typedef ptrdiff_t std::_Simple_types<value_type>::difference_type;

typedef std::_Simple_types<value_type>::difference_type std::_String_val<_Val_types>::difference_type;

typedef std::_String_val<_Val_types>::difference_type std::_String_const_iterator<_Myt>::difference_type;

typedef std::_String_const_iterator<_Myt> std::_String_const_iterator<_Myt>::_Myiter;

typedef std::_String_val<_Val_types>::pointer std::_String_iterator<_Myt>::pointer;

struct std::error_condition
{
  int _No_bool_decl;
  int _Myval;
  const std::error_category *_Mycat;
};

struct std::error_code
{
  int _No_bool_decl;
  int _Myval;
  const std::error_category *_Mycat;
};

struct __cppobj std::_Iostream_error_category : std::_Generic_error_category
{
};

struct __cppobj std::_System_error_category : std::_Generic_error_category
{
};

enum std::io_errc : __int32
{
  stream = 0x1,
};

struct lconv
{
  char *currency_symbol;
  char *int_curr_symbol;
  char *mon_decimal_point;
  char *mon_grouping;
  char *mon_thousands_sep;
  char *negative_sign;
  char *positive_sign;
  char frac_digits;
  char n_cs_precedes;
  char n_sep_by_space;
  char n_sign_posn;
  char p_cs_precedes;
  char p_sep_by_space;
  char p_sign_posn;
  char int_frac_digits;
  char int_n_cs_precedes;
  char int_n_sep_by_space;
  char int_n_sign_posn;
  char int_p_cs_precedes;
  char int_p_sep_by_space;
  char int_p_sign_posn;
  char *decimal_point;
  char *grouping;
  char *thousands_sep;
  char *_Frac_grouping;
  char *_Frac_sep;
  char *_False;
  char *_True;
  char *_No;
  char *_Yes;
};

struct MtStringEx<1040>
{
  u32 mLength;
  char mStr[1040];
};

typedef int clock_t;

typedef MtStringEx<256> MtStringExURL;

typedef MtCollisionUtil::MtArrayTemplateEx<u64,false,1> httpdl_array_u64;

struct __cppobj via::MtThread_Request_requestThread : MtThread
{
  via::Request *mpInstance;
};

typedef int32_t SceInt32;

enum Patch_SlideDic::CMD_KIND : __int32
{
  CMD_END = 0x0,
  CMD_CP_BASE = 0x1,
  CMD_CP_PATCH = 0x2,
  CMD_CP_DIR_1B = 0x3,
  CMD_CP_DIR_4B = 0x4,
  CMD_SL_BASE = 0x5,
  CMD_SL_BAS_2B = 0x6,
  CMD_SL_BAS_3B = 0x7,
  CMD_SL_PATCH = 0x8,
  CMD_SL_PAT_2B = 0x9,
  CMD_SL_PAT_3B = 0xA,
  CMD_SAME_DATA = 0xB,
  CMD_SERIAL_4B = 0xC,
  CMD_MAX = 0xD,
  CMD_MASK = 0xF,
  CMD_SHIFT = 0x1C,
  CMD_MASK_L = 0xFFFFFFF,
  CMD_SHIFT_DIR1B = 0x18,
  CMD_MASK_L_DIR1B = 0xFFFFFF,
  CMD_MASK_T_DIR1B = 0xF,
};

struct MtNetSubObject::ScopedLock
{
  MtNetSubObject *mObjPtr;
};

enum HttpClient::Security : __int32
{
  Security_IgnoreUnknownCA_0 = 0x1,
  Security_IgnoreCertCnInvalid_0 = 0x2,
  Security_IgnoreCertDateInvalid_0 = 0x4,
  Security_IgnoreCertWrongUsage_0 = 0x8,
  Security_AllowRejectedCert_0 = 0x10,
  Security_IgnoreValidationCache_0 = 0x20,
};

struct via::path::DrivePathInfo
{
  MT_CHAR path8[1024];
  u32 len;
  bool no_enable;
  via::path::DriveType type;
};

struct MtFile::RealPath
{
  MT_CHAR mPath[1024];
  bool mNullPath;
};

struct MtFilePath
{
  MT_CHAR mFullPath[1024];
  MT_CHAR mDir[1024];
  MT_CHAR mDrive[32];
  MT_CHAR mFileName[256];
  MT_CHAR mFileTitle[256];
  MT_CHAR mExt[256];
};

struct SceAppContentMountPoint
{
  char data[16];
};

typedef SceAppContentMountPoint SceAppContentMountPoint_0;

typedef uint32_t SceNetInAddr_t;

struct SceNetInAddr
{
  SceNetInAddr_t s_addr;
};

typedef SceNetInAddr SceNetInAddr_0;

union SceNetResolverAddrUn
{
  SceNetInAddr_0 addr;
  char reserved[16];
};

typedef SceNetResolverAddrUn SceNetResolverAddrUn_0;

struct SceNetResolverAddr
{
  SceNetResolverAddrUn_0 un;
  int af;
  int reserved[3];
};

typedef SceNetResolverAddr SceNetResolverAddr_0;

struct SceNetResolverInfo
{
  SceNetResolverAddr_0 addrs[10];
  int records;
  int dns4records;
  int reserved1;
  int reserved[13];
};

typedef SceNetResolverInfo SceNetResolverInfo_0;

typedef int SceNetId;

struct HTTPDL_GETHOSTBYNAME
{
  bool be;
  SceNetResolverInfo_0 infos;
  u32 ipNum;
  u32 eCode;
  SceNetId mDNSResolverID;
  char mDNSR_HostName[256];
  SceNetInAddr_0 ip[10];
};

struct std::ratio<1000,1>
{
  __int8 gap0[1];
};

struct std::chrono::system_clock
{
  __int8 gap0[1];
};

typedef std::chrono::time_point<std::chrono::system_clock,duration> std::chrono::system_clock::time_point;

struct std::chrono::duration<long long,micro>
{
  __int64 _MyRep;
};

struct std::chrono::time_point<std::chrono::system_clock,duration>
{
  std::chrono::duration<long long,micro> _MyDur;
};

typedef std::chrono::duration<long long,micro> std::chrono::duration<long long,micro>::_Myt;

struct std::chrono::duration<long long,nano>
{
  __int64 _MyRep;
};

typedef std::chrono::duration<long long,nano> std::chrono::duration<long long,nano>::_Myt;

struct std::chrono::_Duration_cast<std::chrono::duration<long long,micro>,std::chrono::duration<long long,nano>,type,false,true>
{
  __int8 gap0[1];
};

struct std::chrono::duration_values<long long>
{
  __int8 gap0[1];
};

struct std::ratio<1,1000000>
{
  __int8 gap0[1];
};

struct std::ratio<1,1000000000>
{
  __int8 gap0[1];
};

struct std::enable_if<true,std::chrono::duration<long long,nano> >
{
  __int8 gap0[1];
};

typedef std::chrono::duration<long long,nano> std::enable_if<true,std::chrono::duration<long long,nano> >::type;

struct std::enable_if<true,void>
{
  __int8 gap0[1];
};

typedef void std::enable_if<true,void>::type;

struct __cppobj HttpClient::MtThread_HttpReqTaskProcessThread : MtThread
{
  HttpClient *mpHttpClient;
};

enum cHttpClient::$E3A22CC0E8C3554FE14C1137C4B7F325 : __int32
{
  STATUS_DONE = 0x0,
  STATUS_WRITE = 0x1,
  STATUS_READ = 0x2,
  STATUS_WAIT = 0x3,
  STATUS_FINAL = 0x4,
};

enum cHttpClient::$7FF5296BABAFDC414A03BFBF8FBA204F : __int32
{
  SECURITY_IGNORE_UNKNOWN_CA = 0x1,
  SECURITY_IGNORE_CERT_CN_INVALID = 0x2,
  SECURITY_IGNORE_CERT_DATE_INVALID = 0x4,
  SECURITY_IGNORE_CERT_WRONG_USAGE = 0x8,
  SECURITY_ALLOW_REJECTED_CERT = 0x10,
  SECURITY_IGNORE_VALIDATION_CACHE = 0x20,
};

typedef void SceSslCert;

enum $D1FFCB9DAC0FF678E48D066E7FA7F691 : __int32
{
  SCE_HTTP_VERSION_1_0 = 0x1,
  SCE_HTTP_VERSION_1_1 = 0x2,
};

enum SceHttpMethods : __int32
{
  SCE_HTTP_METHOD_GET = 0x0,
  SCE_HTTP_METHOD_POST = 0x1,
  SCE_HTTP_METHOD_HEAD = 0x2,
  SCE_HTTP_METHOD_OPTIONS = 0x3,
  SCE_HTTP_METHOD_PUT = 0x4,
  SCE_HTTP_METHOD_DELETE = 0x5,
  SCE_HTTP_METHOD_TRACE = 0x6,
  SCE_HTTP_METHOD_CONNECT = 0x7,
};

enum $9E657442F33406395C528805426E6777 : __int32
{
  SCE_HTTP_HEADER_OVERWRITE = 0x0,
  SCE_HTTP_HEADER_ADD = 0x1,
};

struct __cppobj MtNet::Utility::PS4::MtNetString : MtNetObject
{
  size_t mBufSize;
  MT_STR mBufPtr;
};

enum MtNet::Utility::PS4::ReqCtx::ReqType : __int32
{
  ReqType_None = 0x0,
  ReqType_WebApiInitialize = 0x1,
  ReqType_WebApiGetFriendList = 0x2,
  ReqType_WebApiGetBlockList = 0x3,
  ReqType_WebApiSetPresenceGameStatus = 0x4,
  ReqType_WebApiSetPresenceGameData = 0x5,
  ReqType_WebApiGetPresenceGameData = 0x6,
  ReqType_WebApiCreateWebSession = 0x7,
  ReqType_WebApiJoinWebSession = 0x8,
  ReqType_WebApiLeaveWebSession = 0x9,
  ReqType_WebApiGetWebSessionRoot = 0xA,
  ReqType_WebApiGetWebSessionData = 0xB,
  ReqType_WebApiSetPlayedWith = 0xC,
  ReqType_WebApiGetEntitlementByRange = 0xD,
  ReqType_WebApiGetEntitlementById = 0xE,
  ReqType_WebApiSetEntitlement = 0xF,
  ReqType_Max = 0x10,
};

struct __cppobj MtNet::Utility::PS4::ReqCtx : MtNetObject
{
  MtNet::Utility::PS4::MtNetString mSendStr;
  MtNet::Utility::PS4::MtNetString mRecvStr;
  size_t mRecvSize;
  const void *mOwnerPtr;
  MtNet::Utility::PS4::ReqCtx::ReqType mReqType;
  void *mArgPtrTbl[8];
  s32 mErrorNo;
  bool mIsReady;
  bool mIsComplete;
  s64 mRequestId;
};

struct __cppobj MtNet::Utility::PS4::ReqCtx::MyDTI : MtDTI
{
};

struct __cppobj MtNet::Utility::PS4::MtNetString::MyDTI : MtDTI
{
};

typedef MtNet::Utility::PS4::ReqCtx *MtNet::Utility::PS4::ReqCtxPtr;

struct __cppobj MtNet::Utility::PS4::BlockList : MtNetObject:288
{
  s32 mValidNum;
  SceNpId_0 mNpId[100];
};

struct __cppobj MtNet::Utility::PS4::BlockList::MyDTI : MtDTI
{
};

struct __cppobj MtNet::Utility::PS4::Json : MtNetObject, sce::Json::MemAllocator
{
  sce::Json::Value mNull;
};

struct __cppobj MtNet::Utility::PS4::Json::MyDTI : MtDTI
{
};

typedef MtStringEx<64> MtNet::Utility::PS4::Json::EntitlementId;

struct MtNet::Utility::PS4::Json::FriendList
{
  s32 total;
  s32 offset;
  s32 rsize;
  s32 num;
  SceNpId_0 npIdTbl[500];
};

struct MtNet::Utility::PS4::Json::BlockList
{
  s32 total;
  s32 offset;
  s32 rsize;
  s32 num;
  SceNpId_0 npIdTbl[500];
};

struct MtNet::Utility::PS4::Json::Presence
{
  SceNpId_0 npId;
  u8 dataBuf[128];
  s32 dataSize;
};

typedef MtStringEx<32> MtNet::Utility::PS4::Json::EntitlementType;

struct MtNet::Utility::PS4::Json::EntitlementInfo
{
  MtNet::Utility::PS4::Json::EntitlementType type;
  bool isConsumable;
  MtNet::Utility::PS4::Json::EntitlementId id;
  SceRtcTick_0 activeDate;
  SceRtcTick_0 inactiveDate;
  u32 useCount;
  u32 useLimit;
};

struct MtNet::Utility::PS4::Json::EntitlementList
{
  s32 total;
  s32 offset;
  s32 rsize;
  s32 num;
  MtNet::Utility::PS4::Json::EntitlementInfo infoTbl[100];
};

struct MtNet::Utility::PS4::Json::EntitlementUseResult
{
  u32 useLimit;
};

struct __cppobj MtNet::Utility::PS4::MtNetThread : MtThread
{
};

struct __cppobj MtNet::Utility::PS4::PsPlus : MtNet::Utility::PS4::MtNetThread
{
  SceUserServiceUserId mSceUserId;
  u32 mFeatures;
  bool mIsProcess;
  bool mIsResult;
  bool mIsAuthorized;
  bool mIsRecheck;
  s32 mThreadError;
};

struct __cppobj MtNet::Utility::PS4::PsPlus::MyDTI : MtDTI
{
};

struct __cppobj MtNet::Utility::PS4::MtNetThread::MyDTI : MtDTI
{
};

typedef SceNpCommunicationId SceNpCommunicationId_0;

typedef SceNpCommunicationPassphrase SceNpCommunicationPassphrase_0;

struct SceNpMatching2CreateContextParam
{
  const SceNpId_0 *npId;
  const SceNpCommunicationId_0 *commId;
  const SceNpCommunicationPassphrase_0 *passPhrase;
  SceNpServiceLabel serviceLabel;
  size_t size;
};

typedef SceNpMatching2CreateContextParam SceNpMatching2CreateContextParam_0;

struct __cppobj __attribute__((aligned(8))) MtNet::Utility::PS4::Match : MtNetObject:288
{
  SceUserServiceUserId mSceUserId;
  SceNpMatching2CreateContextParam_0 mContextParam;
  const MtNetObject *mContextOwnerPtr;
  SceNpMatching2ContextId mContextId;
  SceNpMatching2ServerId mServerId;
  bool mIsContextStarted;
  bool mIsContextStartOver;
  bool mIsContextStopped;
  s32 mContextError;
  s32 mContextAsyncResult;
  s32 mContextStartResult;
  s32 mContextStartPhase;
  s32 mContextTermPhase;
};

struct SceNpCommunicationId
{
  char data[9];
  char term;
  uint8_t num;
  char dummy;
};

struct SceNpCommunicationPassphrase
{
  uint8_t data[128];
};

struct __cppobj MtNet::Utility::PS4::Match::MyDTI : MtDTI
{
};

struct sce::Json::Array::iterator
{
  void *m_itimpl;
};

struct sce::Json::Object::iterator
{
  void *m_itimpl;
};

struct sce::Json::Object::Pair
{
  sce::Json::String first;
  char _padding[4];
  sce::Json::Value second;
};

struct sce::Json::InitParameter
{
  sce::Json::MemAllocator *allocator;
  void *userData;
  size_t filebuffersize;
};

struct MtNetCom
{
  __int8 gap0[1];
};

struct __cppobj MtNetCom::IEntitlementPS4 : MtNetCom::INative
{
};

enum MtNetCom::IEntitlementPS4::EntitlementType : __int32
{
  Type_None = 0x0,
  Type_Service = 0x1,
  Type_Drm = 0x2,
  Type_Unified = 0x3,
  Type_Reward = 0x4,
};

struct MtNetCom::IEntitlementPS4::EntitlementInfo
{
  MtNetCom::IEntitlementPS4::EntitlementType mType;
  bool mIsConsumable;
  MT_CHAR mIdStr[64];
  u64 mActiveTick;
  u64 mInactiveTick;
  u32 mUseCount;
  u32 mUseLimit;
};

struct MtNetCom::IEntitlementPS4::EntitlementList
{
  s32 mTotal;
  s32 mOffset;
  s32 mRsize;
  s32 mNum;
  MtNetCom::IEntitlementPS4::EntitlementInfo mInfoTbl[100];
};

struct MtNetCom::IEntitlementPS4::EntitlementUseResult
{
  u32 mUseLimit;
};

struct __cppobj MtNetCom::IInvitePS4 : MtNetCom::INative
{
};

struct MtNetCom::IInvitePS4::SessionParam::Localized
{
  MT_CTSTR mpLanguage;
  MT_CTSTR mpName;
  MT_CTSTR mpStatus;
};

struct MtNetCom::IInvitePS4::SessionParam
{
  MT_CTSTR mpDefaultName;
  MT_CTSTR mpDefaultStatus;
  MtNetCom::IInvitePS4::SessionParam::Localized mLocalized[32];
  void *mpImageData;
  size_t mImageSize;
  MT_CTSTR mpMessageBody;
};

struct __cppobj MtNetCom::IInnerStringPS4 : MtNetCom::INative
{
};

struct MtNetCom::IInnerStringPS4::MessageParam
{
  MT_CTSTR mpPrgContext;
  MT_CTSTR mpNotSignInContext;
};

struct __cppobj MtNetCom::IPartyPS4 : MtNetCom::INative
{
};

struct __attribute__((aligned(8))) MtNetCom::IPartyPS4::PartyMemberInfo
{
  MtNetUniqueId mUniqueId;
  u16 mMemberId;
};

struct __attribute__((aligned(4))) MtNetCom::IPartyPS4::PartyInfo
{
  MtNetCom::IPartyPS4::PartyMemberInfo mMember[8];
  s32 mValidNum;
  bool mIsPrivate;
};

typedef uint16_t SceNetInPort_t;

struct SceNetSockInfo
{
  char name[32];
  SceUID pid;
  SceNetId s;
  int8_t socket_type;
  int8_t policy;
  int8_t priority;
  int8_t reserved8;
  int recv_queue_length;
  int send_queue_length;
  SceNetInAddr_0 local_adr;
  SceNetInAddr_0 remote_adr;
  SceNetInPort_t local_port;
  SceNetInPort_t remote_port;
  SceNetInPort_t local_vport;
  SceNetInPort_t remote_vport;
  int state;
  int flags;
  int tx_bps;
  int rx_bps;
  int max_tx_bps;
  int max_rx_bps;
  int tx_vbps;
  int rx_vbps;
  int recv_buffer_size;
  int send_buffer_size;
  int reserved6[8];
  int tx_drops;
  int rx_drops;
  int tx_wait;
  int reserved[2];
};

struct DLSPD_WORK
{
  u32 ix;
  f32 mbps;
  s64 size;
  s64 nsec;
  s32 buffSize[32];
  s64 buffNano[32];
};

struct CAL_ELAPSED_TIME
{
  std::chrono::system_clock::time_point _start;
  std::chrono::system_clock::time_point _end;
  s64 start;
  s64 end;
  s64 diff;
  s64 total;
};

struct SceSslData
{
  char *ptr;
  size_t size;
};

typedef SceNpState SceNpState_0;

struct SceNpAuthorizationCode
{
  char code[129];
  uint8_t padding[7];
};

typedef SceNpAuthorizationCode SceNpAuthorizationCode_0;

struct SceNpAuthGetAuthorizationCodeParameter
{
  size_t size;
  const SceNpOnlineId_0 *pOnlineId;
  const SceNpClientId_0 *pClientId;
  const char *pScope;
};

typedef SceNpAuthGetAuthorizationCodeParameter SceNpAuthGetAuthorizationCodeParameter_0;

struct MtNetMediator::PsnUsrInfo
{
  bool mIsValid;
  SceUserServiceUserId mSceUserId;
  s32 mXfUserNo;
  SceNpState_0 mNpState;
  SceNpId_0 mNpId;
  SceNpAuthorizationCode_0 mNpAuthCode;
  int mNpAuthIssuer;
  s32 mNpAuthAsyncPhase;
  s32 mNpAuthAsyncResult;
  int mNpAuthAsyncRequestId;
  SceNpAuthGetAuthorizationCodeParameter_0 mNpAuthGetParam;
  bool mIsChatRestriction;
  bool mIsUgcRestriction;
  int32_t mWebApiNormalPushFilterId;
  int32_t mWebApiServicePushFilterId;
  int32_t mWebApiUsrContextId;
  int mNpScoreContextId;
  int mNpTssContextId;
  int mNpTusContextId;
  SceRtcTick_0 mNpTusLastChangedDate;
  SceRtcTick_0 mNpTusCompChangedDate;
  bool mPresenceCanUse;
  MtStringEx<256> mPresenceStatusStr;
  u8 mPresenceDataTbl[128];
  s32 mPresenceDataSize;
  u32 mPresenceUpdateFlag;
  MtNet::Utility::PS4::ReqCtxPtr mPresenceReqCtxPtr;
  bool mBrowserIsParamPos;
  u32 mBrowserParamPosX;
  u32 mBrowserParamPosY;
  u32 mBrowserParamWidth;
  u32 mBrowserParamHeight;
  u32 mBrowserParamParts;
  bool mBrowserIsParamCb;
  MtStringEx<1024> mBrowserParamCbStr;
  MtString mBrowserResultCbStr;
  bool mBrowserIsRestrict;
  MtStringEx<256> mBrowserParamRestrictTbl[20];
  s32 mBrowserResultValue;
  bool mBrowserIsOpen;
  bool mErrorDialogIsOpen;
  bool mProfileDialogIsOpen;
  bool mInviteDialogIsOpen;
  s32 mPlayedWithPhase;
  SceNpOnlineId_0 mPlayedWithIdTbl[16];
  s32 mPlayedWithIdNum;
  MtStringEx<1024> mPlayedWithExplain;
  MtNet::Utility::PS4::ReqCtxPtr mPlayedWithReqCtxPtr;
  MtNet::Utility::PS4::BlockList mBlockList;
  bool mIsInviteAccept;
  MtNetSessionInfo mInviteSessionInfo;
  MtNetCom::IInvitePS4::SessionParam mInviteSessionParam;
  MtNetCom::IInnerStringPS4::MessageParam mInnerMessageParam;
  MtNet::Utility::PS4::ReqCtxPtr mEntitlementReqCtxPtr;
  MtNet::Utility::PS4::Json::EntitlementId mEntitlementId;
  MtNet::Utility::PS4::PsPlus *mPsPlusPtr;
  MtNet::Utility::PS4::Match *mMatchPtr;
};

struct __cppobj MtNetMediator : MtNetObject
{
  MtNetCore::InitParam mInitParam;
  MtNetMediator::PsnUsrInfo mPsnUsrInfoTbl[5];
  int mLibsslContextId;
  int mLibhttpContextId;
  MtNetCom::IPartyPS4::PartyInfo mPartyInfo;
  int32_t mWebApiLibContextId;
  SceKernelSema mNpMatchSema;
};

struct MtStringEx<4096>
{
  u32 mLength;
  char mStr[4096];
};

struct SceNpPartyJoinedInfo
{
  SceNpId_0 members[8];
  SceNpPartyRoomMemberId memberIds[8];
  uint8_t memberNum;
  bool privateParty;
  uint8_t memberJoinedIndex;
  uint8_t reserved;
};

typedef uint32_t SceNpPartyRoomLeftReason;

struct SceNpPartyRoomLeftInfo
{
  SceNpPartyRoomMemberId memberId;
  SceNpId_0 npId;
  uint8_t reserved[2];
  SceNpPartyRoomLeftReason reason;
};

typedef uint8_t SceNpPartyMemberFlags;

struct SceNpPartyMemberInfo
{
  SceNpId_0 npId;
  SceNpPartyRoomMemberId memberId;
  SceNpPartyMemberFlags memberFlags;
  uint8_t reserved;
  uint16_t reserved1;
  uint8_t reserved2[128];
};

typedef int32_t SceNpSessionInvitationEventFlag;

struct SceNpSessionInvitationEventParam
{
  SceNpSessionId_0 sessionId;
  SceNpInvitationId_0 invitationId;
  SceNpSessionInvitationEventFlag flag;
  char padding[4];
  SceNpOnlineId_0 onlineId;
  SceUserServiceUserId userId;
};

typedef SceNetSockInfo SceNetSockInfo_0;

typedef SceSslData SceSslData_0;

struct __cppobj sApp : cSystem
{
  sApp::Item *mpItem[256];
  u32 mItemNum;
  MT_CHAR mItemGroupKeyword[16][512];
  sMain *mpMain;
  s32 mCountry;
  s32 mLanguage;
  bool mAbort;
  bool mActive;
  u32 mEnterButtonAssign;
  s32 mUserDefinedParam[4];
  MtSize mPS4Resolution;
};

union sApp::Item::$1358F18DC4CF198FC538119F86E91B2A
{
  f32 mMinFValue;
  s32 mMinIValue;
};

union sApp::Item::$996DF796DA41F965A23AC9B97157EA6D
{
  f32 mMaxFValue;
  s32 mMaxIValue;
};

struct __cppobj sApp::Item : MtObject
{
  u16 mGroup;
  u8 mType;
  u8 mAttr;
  MtProperty mProp;
  MT_MFUNC mpGetMask;
  __attribute__((aligned(16))) MT_MFUNC mpIsEnable;
  __attribute__((aligned(16))) sApp::Item::$1358F18DC4CF198FC538119F86E91B2A _anon_0;
  sApp::Item::$996DF796DA41F965A23AC9B97157EA6D _anon_1;
  const MT_ENUM *mpEnum;
};

struct __cppobj sApp::MyDTI : MtDTI
{
};

struct __cppobj sApp::Item::MyDTI : MtDTI
{
};

enum sApp::Item::TYPE : __int32
{
  TYPE_UNKNOWN_0 = 0x0,
  TYPE_ENUM = 0x1,
  TYPE_FLAG = 0x2,
  TYPE_FLOAT = 0x3,
  TYPE_INT = 0x4,
  TYPE_BOOL_0 = 0x5,
};

enum sApp::USERDEFINEDPARAM : __int32
{
  USERDEFINEDPARAM_1 = 0x0,
  USERDEFINEDPARAM_2 = 0x1,
  USERDEFINEDPARAM_3 = 0x2,
  USERDEFINEDPARAM_4 = 0x3,
  MAX_USERDEFINEDPARAM = 0x4,
};

enum sApp::BUTTON_ASSIGN : __int32
{
  ENTER_BUTTON_ASSIGN_CIRCLE = 0x0,
  ENTER_BUTTON_ASSIGN_CROSS = 0x1,
};

enum sApp::APPLICATION_TYPE : __int32
{
  APPLICATION_TRIAL = 0x1,
  APPLICATION_FULL = 0x3,
  APPLICATION_UNKNOWN = 0xFF,
};

struct MtMemoryAllocator::allocateDefaultMemory::SHARED_ALLOCATOR
{
  u32 allocate_type;
  u32 shared_type;
};

enum MtScalableAllocator::AllocPoolType : __int32
{
  ALLOC_POOL_NONE = 0x0,
  ALLOC_POOL_4KB = 0x1,
  ALLOC_POOL_8KB = 0x2,
  ALLOC_POOL_16KB = 0x3,
  ALLOC_POOL_32KB = 0x4,
  ALLOC_POOL_48KB = 0x5,
  ALLOC_POOL_64KB = 0x6,
  ALLOC_POOL_96KB = 0x7,
  ALLOC_POOL_128KB = 0x8,
  ALLOC_POOL_UNKNOWN = 0xFFFFFFFF,
};

struct __attribute__((aligned(8))) MtMemoryAllocator::allocateDefaultMemory::MEMORYMAP_INFO
{
  u32 allocate_type;
  MT_CTSTR name;
  MtAllocator::TYPE memory_type;
  u32 size;
  u16 attribute;
  MtScalableAllocator::AllocPoolType pool_type;
  u32 mgindex;
};

enum MtMemoryAllocator::AppAllocator : __int32
{
  TEST_UNIT = 0x18,
  CONTEXT = 0x19,
  BROWSER_0 = 0x1A,
  DDO_MAX_ALLOCATOR = 0x1B,
};

enum MtMemoryAllocator::FrameworkAllocator : __int32
{
  RESOURCE = 0xC,
  SYSTEM = 0xD,
  UNIT = 0xE,
  AREA = 0xF,
  SOUND = 0x10,
  PHYSICS = 0x11,
  NETWORK = 0x12,
  AI = 0x13,
  EFFECT = 0x14,
  GUI = 0x15,
  INSTANCING = 0x16,
  VIRTUAL_EXTEND = 0x17,
  APP_ALLOCATOR = 0x18,
};

struct MtMemoryAllocator::Initializer
{
  int (**_vptr$Initializer)(void);
  u32 mMaxEntryNum;
  u32 mEntryNum;
  MtMemoryAllocator::Initializer::Entry **mAllocIdTable;
};

struct MtMemoryAllocator::MemoryCfg
{
  MtMemoryAllocator::MemoryCfg::SectionAttrib *mpIndexAttrib;
  u32 mIndexAttribNum;
  MtMemoryAllocator::MemoryCfg::SectionAttrib *mpAllocAttrib;
  u32 mAllocAttribNum;
  MtMemoryAllocator::MemoryCfg::SectionAttrib *mpCurrentAttrib;
  u32 mMaxAttribNum;
  void *mpWorkBuffer;
  u32 mWorkBufferSize;
  void *mpCurrentWorkBuffer;
  MT_CTSTR mPlatform;
  MT_CTSTR mBuildVariant;
  MtMemoryAllocator::Initializer mInitializer;
};

struct MtMemoryAllocator::MemoryCfg::SectionAttrib
{
  MT_CHAR platform[16];
  MT_CHAR build_variant[32];
  u32 line;
  const void *p_section;
};

struct __attribute__((aligned(8))) MtMemoryAllocator::Initializer::Entry
{
  MT_STR obj_name;
  size_t len;
  u32 alloc_id;
};

enum MtMemoryAllocator::MemoryCfg::STATE : __int32
{
  ST_ERR_CRITICAL = 0xFFFFFFF8,
  ST_ERR_NO_ATTRIBUTE = 0xFFFFFFF9,
  ST_ERR_TOO_MANY_SECTION = 0xFFFFFFFA,
  ST_ERR_INVALID_STATE = 0xFFFFFFFB,
  ST_ERR_EOF = 0xFFFFFFFC,
  ST_ERR_EMPTY_SECTION = 0xFFFFFFFD,
  ST_ERR_TOKEN = 0xFFFFFFFE,
  ST_ERR_UNRECOGNIZED = 0xFFFFFFFF,
  ST_UNKNOWN = 0x0,
  ST_COMMENT = 0x1,
  ST_SECTION = 0x2,
  ST_SECTION_END = 0x3,
  ST_INDEX = 0x4,
  ST_INDEX_ATTRIBUTE_BEGIN = 0x5,
  ST_INDEX_ATTRIBUTE = 0x6,
  ST_INDEX_ATTRIBUTE_END = 0x7,
  ST_ALLOCATOR = 0x8,
  ST_ALLOCATOR_ATTRIBUTE_BEGIN = 0x9,
  ST_ALLOCATOR_ATTRIBUTE = 0xA,
  ST_ALLOCATOR_ATTRIBUTE_END = 0xB,
  ST_LINE_BREAK = 0xC,
  ST_END = 0xD,
  ST_OK = 0x7FFFFFFF,
};

enum MtMemoryAllocator::MemoryCfg::ERR_CODE : __int32
{
  ERR_NONE = 0x0,
  ERR_UNRECOGNIZED = 0x1,
  ERR_TOKEN = 0x2,
  ERR_EMPTY_SECTION = 0x3,
  ERR_EOF = 0x4,
  ERR_INVALID_STATE = 0x5,
  ERR_TOO_MANY_SECTION = 0x6,
  ERR_NO_ATTRIBUTE = 0x7,
  ERR_CRITICAL = 0x8,
};

struct MtMemoryAllocator::AllocatorFactory
{
  int (**_vptr$AllocatorFactory)(void);
  void *mpWorkBuffer;
};

struct MtScalableAllocator::CTRLLIST
{
  MtScalableAllocator::CTRL *p_head;
  MtScalableAllocator::CTRL *p_tail;
  u32 el_num;
  u32 block_available;
};

struct MtScalableAllocator::MGR
{
  MT_CHAR name[64];
  MtScalableAllocator::CTRLLIST used;
  MtScalableAllocator::CTRLLIST blank;
  u32 id;
  u32 curr_call_no;
  size_t used_size;
  MtCriticalSection cs;
};

struct __cppobj __attribute__((aligned(8))) MtScalableAllocator : MtAllocator
{
  void *mpMemoryHead;
  void *mpMemoryTail;
  bool mReleaseMem;
  size_t mSize;
  size_t mBlockNum;
  size_t mAvailableBlockNum;
  MtScalableAllocator::CTRLLIST mGlobalPool;
  MtScalableAllocator::MGR mManager[8];
  u32 mIndexCounter;
  MtCriticalSection mGlobalCS;
  u32 mNumOfMgr;
  u32 mPoolType;
  size_t mPoolSize;
  u32 mDebugDataSize;
};

struct MtScalableAllocator::CTRL
{
  u16 dev_magic;
  unsigned __int16 dev_mark : 8;
  unsigned __int16 dev_dbgdata : 7;
  unsigned __int16 dev_termpnt : 1;
  MtScalableAllocator::CTRL *p_sblock;
  u32 sblock_ctr;
  u32 user_tag;
  MtScalableAllocator::CTRL *p_wprev;
  MtScalableAllocator::CTRL *p_wnext;
  MtScalableAllocator::CTRL *p_bnext;
  MtScalableAllocator::CTRL *p_bprev;
  MtScalableAllocator::CTRL::$9B2A9AE12905DF9294F321A66BE8E27A _anon_0;
  size_t size;
  size_t do_not_use;
};

struct MtScalableAllocator::CTRL::$9B2A9AE12905DF9294F321A66BE8E27A::$E11E9C246DA88CF68C32A36B12B624F7
{
  unsigned __int32 used : 1;
  unsigned __int32 used_block : 31;
  unsigned __int32 flag : 2;
  unsigned __int32 mgr_id : 5;
  unsigned __int32 call_no : 19;
  unsigned __int32 alloc_id : 6;
};

union MtScalableAllocator::CTRL::$9B2A9AE12905DF9294F321A66BE8E27A
{
  MtScalableAllocator::CTRL::$9B2A9AE12905DF9294F321A66BE8E27A::$E11E9C246DA88CF68C32A36B12B624F7 _anon_0;
  u64 tag;
};

struct __cppobj MtScalableAllocator::MyDTI : MtDTI
{
};

enum MtScalableAllocator::ManagerIndex : __int32
{
  MANAGER_0 = 0x0,
  MANAGER_1 = 0x1,
  MANAGER_2 = 0x2,
  MANAGER_3 = 0x3,
  MANAGER_4 = 0x4,
  MANAGER_5 = 0x5,
  MANAGER_6 = 0x6,
  MANAGER_7 = 0x7,
  MANAGER_MAX = 0x8,
};

typedef MtVector4 nDDOUtility::cKeyFrameValue<MtVector4,MtObject>::value_type;

struct nDDOUtility::cKeyFrameValue<MtVector4,MtObject>::stKeyValue
{
  f32 key;
  __attribute__((aligned(16))) nDDOUtility::cKeyFrameValue<MtVector4,MtObject>::value_type value;
};

struct __cppobj nDDOUtility::cKeyFrameValue<MtVector4,MtObject> : MtObject
{
  u32 keyNum;
  nDDOUtility::cKeyFrameValue<MtVector4,MtObject>::stKeyValue value[8];
};

struct __cppobj nDDOUtility::cKeyFrameValue<MtVector4,MtObject>::MyDTI : MtDTI
{
};

typedef float nDDOUtility::cKeyFrameValue<f32,MtObject>::value_type;

struct nDDOUtility::cKeyFrameValue<f32,MtObject>::stKeyValue
{
  f32 key;
  nDDOUtility::cKeyFrameValue<f32,MtObject>::value_type value;
};

struct __cppobj __attribute__((aligned(8))) nDDOUtility::cKeyFrameValue<f32,MtObject> : MtObject
{
  u32 keyNum;
  nDDOUtility::cKeyFrameValue<f32,MtObject>::stKeyValue value[8];
};

struct __cppobj nDDOUtility::cKeyFrameValue<f32,MtObject>::MyDTI : MtDTI
{
};

enum cResource::QUALITY : __int32
{
  QUALITY_LOWEST = 0x0,
  QUALITY_LOW = 0x1,
  QUALITY_NORMAL = 0x2,
  QUALITY_HIGH = 0x3,
  QUALITY_HIGHEST = 0x4,
  QUALITY_STREAM_LOW = 0x5,
  QUALITY_STREAM_HIGH = 0x6,
};

struct __cppobj __attribute__((aligned(4))) sResource : cSystem
{
  sResource::TypeInfo mTypeInfo[1024];
  u32 mTypeInfoNum;
  MtString mRootDirectory;
  MtString mResourcePath;
  MtString mNativePath;
  MtString mResourceFolder;
  MtString mNativeFolder;
  cResource *mpTable[16384];
  sResource::Property mResourceProperty;
  bool mOptimizeEnable;
  bool mBuildComplete;
  bool mForceHDDCache;
  bool mForceBackGround;
  bool mLoadEnd;
  bool mAutoUpdate;
  bool mCacheEnable;
  RESOURCE_PATH_FILTER mpPathFilter;
  void *mpPathFilterAdr;
  ScePthread mLoaderThreadHandle;
  MtSemaphore *mpLoadSemaphore;
  cResource *mpLoadList[1024];
  u32 mLoadNum;
  sResource::LOADING_INFO mLoadingInfo;
  u32 mDecodeThreadMask;
  u32 mDecodeThreadNum;
  ScePthread mDecodeThread[4];
  nWin32Detour::eventFlag mDecodeEvent[4];
  nWin32Detour::eventFlag mDecodeSync[4];
  ScePthread mDecodeThreadID[4];
  sResource::DECODEWORK mDecodeWork;
  s32 mTagCount;
  bool mRemoteConvert;
  bool mDecoderActivation[4];
  volatile bool mLoaderThreadSuspend;
  s32 mResourceNum;
  u32 mRModelDataReaderBufferSizeKB;
  u32 mRTextureDataReaderBufferSizeKB;
  u32 mRCollisionDataReaderBufferSizeKB;
  u32 mRGrassDataReaderBufferSizeKB;
  u32 mRNavigationMeshDataReaderBufferSizeKB;
  bool mForceVramMemory;
};

struct __cppobj sResource::MyDTI : MtDTI
{
};

struct __cppobj sResource::TypeInfo::MyDTI : MtDTI
{
};

struct __cppobj sResource::RemoteInfo : MtObject
{
  bool mEnable;
  MT_CHAR mConfigName[64];
  MT_CHAR mPCName[64];
  MT_CHAR mFolderName[64];
  u32 mConfigNameLen;
  u32 mPCNameLen;
  u32 mFolderNameLen;
};

struct __cppobj sResource::RemoteInfo::MyDTI : MtDTI
{
};

struct sResource::Iterator
{
  s32 mIndex;
};

struct __attribute__((aligned(8))) sResource::ResourceInfo
{
  MT_CTSTR fullpath;
  MT_CHAR path[1024];
  MT_CTSTR ext;
  u32 type;
};

struct __cppobj ObjectString : MtObject
{
  MtString mString;
};

struct __cppobj ObjectString::MyDTI : MtDTI
{
};

enum rArchiveListArray::$D93D9C43137DECF62E82139FA428E4A5 : __int32
{
  DATA_VERSION = 0xB,
  SPLIT_NUM = 0x80,
  SPLIT_MASK = 0x7F,
  HEADER_SIZE = 0x10,
};

enum cResource::ATTR : __int32
{
  ATTR_XMLNODE = 0x1,
  ATTR_SAVEABLE = 0x2,
  ATTR_CREATABLE = 0x4,
  ATTR_INTERMEDIATE = 0x8,
  ATTR_NATIVE = 0x10,
  ATTR_TEMP = 0x20,
  ATTR_USECACHE = 0x40,
  ATTR_ARCHIVE = 0x80,
  ATTR_BACKGROUND = 0x200,
  ATTR_USEGDATA = 0x400,
  ATTR_STREAM = 0x800,
  ATTR_COMPACTABLE = 0x1000,
  ATTR_CONVERTABLE_360 = 0x2000,
  ATTR_CONVERTABLE_PS3 = 0x4000,
  ATTR_CONVERTABLE_VITA = 0x8000,
  ATTR_CONVERTABLE_CAFE = 0x10000,
  ATTR_NOT_COPYABLE_VITA = 0x20000,
  ATTR_CONVERTABLE_VITAEMU = 0x40000,
  ATTR_CONVERTABLE_PS4 = 0x80000,
  ATTR_CONVERTABLE_XBOXONE = 0x100000,
};

enum rLanguageResIDConverter::$09659126B661EE17361CC0E56C0C01DE : __int32
{
  HEADER_SIZE_0 = 0x408,
};

enum rLanguageResIDConverter::$876574082F076A86AAF006FC268D1937 : __int32
{
  DATA_VERSION_0 = 0x1,
  TBL_BIT_NUM = 0x8,
  TBL_NUM = 0x100,
  TBL_MASK = 0xFF,
};

struct __cppobj rBrowserFont : cResource
{
  u32 mFontSize;
  void *mpFontData;
};

struct __cppobj rBrowserFont::MyDTI : MtDTI
{
};

struct __cppobj rTable : cResource
{
  u32 mUParam32[4];
  u64 mUParam64[2];
  MtArray mArray;
};

struct __cppobj rTable::MyDTI : MtDTI
{
};

struct __cppobj sAppExt : sApp
{
};

struct __cppobj sAppExt::MyDTI : MtDTI
{
};

typedef bool (*sArchiveManager::PickArcLoaderFunc)(cArcLoaderBase *, cArcLoaderBase *);

struct cSystem::cAutoCriticalSection
{
  cSystem *mpSys;
};

enum cResource::STATE : __int32
{
  STATE_USAGE = 0x1,
  STATE_UPDATE = 0x2,
  STATE_MODIFY = 0x4,
  STATE_RELOAD = 0x8,
  STATE_FAILED = 0x10,
  STATE_UPDATEQUERY = 0x20,
  STATE_CANCEL = 0x40,
  STATE_RELOADED = 0x80,
};

typedef res_ptr<rArchiveListArray> *nDDOUtility::cArray<rArchiveListArrayPtr,128>::reference;

typedef cArcLoaderBase **nDDOUtility::cArray<cArcLoaderBase *,256>::reference;

typedef cArcLoader<16> *nDDOUtility::cArray<cArcLoader16,2048>::reference;

typedef cArcLoader<16> **nDDOUtility::cArray<cArcLoader16 *,2048>::reference;

enum $799A75E67E23A3205AFD3E1E0F8F9359 : __int32
{
  ARC_LOAD_MODE_ALL = 0x0,
  ARC_LOAD_MODE_ONCE = 0x1,
  ARC_LOAD_MODE_NUM = 0x2,
};

enum $224F511C7D69A4B467EDF2F515CA91AA : __int32
{
  LOADREQTAGEX_HANDLE_INVALID = 0xFFFFFFFF,
  TAG_ARC_LOAD_MAX2 = 0x10,
  MAX_TICKET = 0x800,
  ARC_LOAD_NUM = 0x100,
};

enum sResource::MODE : __int32
{
  MODE_BLOCKING = 0x1,
  MODE_ASYNC = 0x2,
  MODE_USECACHE = 0x4,
  MODE_USEGDATA = 0x8,
  MODE_BACKGROUND = 0x20,
  MODE_CREATE = 0x40,
  MODE_NOLOAD = 0x80,
  MODE_STREAM = 0x100,
  MODE_PRELOAD = 0x200,
  MODE_QUALITY_LOWEST = 0x1000,
  MODE_QUALITY_LOW = 0x2000,
  MODE_QUALITY_HIGH = 0x4000,
  MODE_QUALITY_HIGHEST = 0x8000,
};

struct MtProfiler::Profile
{
  __int8 gap0[1];
};

struct __cppobj __attribute__((aligned(8))) cArcLoader<1> : cArcLoaderBase
{
  rArchive *mArcBuff[1];
  ARC_TAGID mTagBuff[1];
};

typedef cArcLoader<1> cArcLoader01;

struct __cppobj __attribute__((aligned(8))) cAsyncArc : cArcLoader01
{
};

struct __cppobj cArcLoader<4> : cArcLoaderBase
{
  rArchive *mArcBuff[4];
  ARC_TAGID mTagBuff[4];
};

typedef cArcLoader<4> cArcLoader04;

struct __cppobj cTagArcLoad : cArcLoader04
{
};

struct __cppobj sResourceExt::MyDTI : MtDTI
{
};

typedef cArcLoader<16> cArcLoader16;

struct sArchiveManager::moveArcLoader::cLocalFunc
{
  __int8 gap0[1];
};

enum sAreaExt::STAGE_TYPE : __int32
{
  STAGE_TYPE_NORMAL = 0x0,
  STAGE_TYPE_DARKNESS = 0x1,
  STAGE_TYPE_EXTENSION = 0x2,
  STAGE_TYPE_NUM = 0x3,
};

enum MtDTI::ATTR : __int32
{
  ATTR_ABSTRACT = 0x1,
  ATTR_HIDE = 0x2,
};

enum nDraw::DXGI_FORMAT : __int32
{
  DXGI_FORMAT_UNKNOWN = 0x0,
  DXGI_FORMAT_R32G32B32A32_TYPELESS = 0x1,
  DXGI_FORMAT_R32G32B32A32_FLOAT = 0x2,
  DXGI_FORMAT_R32G32B32A32_UINT = 0x3,
  DXGI_FORMAT_R32G32B32A32_SINT = 0x4,
  DXGI_FORMAT_R32G32B32_TYPELESS = 0x5,
  DXGI_FORMAT_R32G32B32_FLOAT = 0x6,
  DXGI_FORMAT_R32G32B32_UINT = 0x7,
  DXGI_FORMAT_R32G32B32_SINT = 0x8,
  DXGI_FORMAT_R16G16B16A16_TYPELESS = 0x9,
  DXGI_FORMAT_R16G16B16A16_FLOAT = 0xA,
  DXGI_FORMAT_R16G16B16A16_UNORM = 0xB,
  DXGI_FORMAT_R16G16B16A16_UINT = 0xC,
  DXGI_FORMAT_R16G16B16A16_SNORM = 0xD,
  DXGI_FORMAT_R16G16B16A16_SINT = 0xE,
  DXGI_FORMAT_R32G32_TYPELESS = 0xF,
  DXGI_FORMAT_R32G32_FLOAT = 0x10,
  DXGI_FORMAT_R32G32_UINT = 0x11,
  DXGI_FORMAT_R32G32_SINT = 0x12,
  DXGI_FORMAT_R32G8X24_TYPELESS = 0x13,
  DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 0x14,
  DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 0x15,
  DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 0x16,
  DXGI_FORMAT_R10G10B10A2_TYPELESS = 0x17,
  DXGI_FORMAT_R10G10B10A2_UNORM = 0x18,
  DXGI_FORMAT_R10G10B10A2_UINT = 0x19,
  DXGI_FORMAT_R11G11B10_FLOAT = 0x1A,
  DXGI_FORMAT_R8G8B8A8_TYPELESS = 0x1B,
  DXGI_FORMAT_R8G8B8A8_UNORM = 0x1C,
  DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 0x1D,
  DXGI_FORMAT_R8G8B8A8_UINT = 0x1E,
  DXGI_FORMAT_R8G8B8A8_SNORM = 0x1F,
  DXGI_FORMAT_R8G8B8A8_SINT = 0x20,
  DXGI_FORMAT_R16G16_TYPELESS = 0x21,
  DXGI_FORMAT_R16G16_FLOAT = 0x22,
  DXGI_FORMAT_R16G16_UNORM = 0x23,
  DXGI_FORMAT_R16G16_UINT = 0x24,
  DXGI_FORMAT_R16G16_SNORM = 0x25,
  DXGI_FORMAT_R16G16_SINT = 0x26,
  DXGI_FORMAT_R32_TYPELESS = 0x27,
  DXGI_FORMAT_D32_FLOAT = 0x28,
  DXGI_FORMAT_R32_FLOAT = 0x29,
  DXGI_FORMAT_R32_UINT = 0x2A,
  DXGI_FORMAT_R32_SINT = 0x2B,
  DXGI_FORMAT_R24G8_TYPELESS = 0x2C,
  DXGI_FORMAT_D24_UNORM_S8_UINT = 0x2D,
  DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 0x2E,
  DXGI_FORMAT_X24_TYPELESS_G8_UINT = 0x2F,
  DXGI_FORMAT_R8G8_TYPELESS = 0x30,
  DXGI_FORMAT_R8G8_UNORM = 0x31,
  DXGI_FORMAT_R8G8_UINT = 0x32,
  DXGI_FORMAT_R8G8_SNORM = 0x33,
  DXGI_FORMAT_R8G8_SINT = 0x34,
  DXGI_FORMAT_R16_TYPELESS = 0x35,
  DXGI_FORMAT_R16_FLOAT = 0x36,
  DXGI_FORMAT_D16_UNORM = 0x37,
  DXGI_FORMAT_R16_UNORM = 0x38,
  DXGI_FORMAT_R16_UINT = 0x39,
  DXGI_FORMAT_R16_SNORM = 0x3A,
  DXGI_FORMAT_R16_SINT = 0x3B,
  DXGI_FORMAT_R8_TYPELESS = 0x3C,
  DXGI_FORMAT_R8_UNORM = 0x3D,
  DXGI_FORMAT_R8_UINT = 0x3E,
  DXGI_FORMAT_R8_SNORM = 0x3F,
  DXGI_FORMAT_R8_SINT = 0x40,
  DXGI_FORMAT_A8_UNORM = 0x41,
  DXGI_FORMAT_R1_UNORM = 0x42,
  DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 0x43,
  DXGI_FORMAT_R8G8_B8G8_UNORM = 0x44,
  DXGI_FORMAT_G8R8_G8B8_UNORM = 0x45,
  DXGI_FORMAT_BC1_TYPELESS = 0x46,
  DXGI_FORMAT_BC1_UNORM = 0x47,
  DXGI_FORMAT_BC1_UNORM_SRGB = 0x48,
  DXGI_FORMAT_BC2_TYPELESS = 0x49,
  DXGI_FORMAT_BC2_UNORM = 0x4A,
  DXGI_FORMAT_BC2_UNORM_SRGB = 0x4B,
  DXGI_FORMAT_BC3_TYPELESS = 0x4C,
  DXGI_FORMAT_BC3_UNORM = 0x4D,
  DXGI_FORMAT_BC3_UNORM_SRGB = 0x4E,
  DXGI_FORMAT_BC4_TYPELESS = 0x4F,
  DXGI_FORMAT_BC4_UNORM = 0x50,
  DXGI_FORMAT_BC4_SNORM = 0x51,
  DXGI_FORMAT_BC5_TYPELESS = 0x52,
  DXGI_FORMAT_BC5_UNORM = 0x53,
  DXGI_FORMAT_BC5_SNORM = 0x54,
  DXGI_FORMAT_B5G6R5_UNORM = 0x55,
  DXGI_FORMAT_B5G5R5A1_UNORM = 0x56,
  DXGI_FORMAT_B8G8R8A8_UNORM = 0x57,
  DXGI_FORMAT_B8G8R8X8_UNORM = 0x58,
  DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 0x59,
  DXGI_FORMAT_B8G8R8A8_TYPELESS = 0x5A,
  DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 0x5B,
  DXGI_FORMAT_B8G8R8X8_TYPELESS = 0x5C,
  DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 0x5D,
  DXGI_FORMAT_BC6H_TYPELESS = 0x5E,
  DXGI_FORMAT_BC6H_UF16 = 0x5F,
  DXGI_FORMAT_BC6H_SF16 = 0x60,
  DXGI_FORMAT_BC7_TYPELESS = 0x61,
  DXGI_FORMAT_BC7_UNORM = 0x62,
  DXGI_FORMAT_BC7_UNORM_SRGB = 0x63,
  DXGI_FORMAT_FORCE_UINT = 0xFFFFFFFF,
};

enum nDraw::D3D11_INPUT_CLASSIFICATION : __int32
{
  D3D11_INPUT_PER_VERTEX_DATA = 0x0,
  D3D11_INPUT_PER_INSTANCE_DATA = 0x1,
};

enum nDraw::INPUT_ELEMENT_FORMAT : __int32
{
  IEF_UNDEFINED = 0x0,
  IEF_F32 = 0x1,
  IEF_F16 = 0x2,
  IEF_S16 = 0x3,
  IEF_U16 = 0x4,
  IEF_S16N = 0x5,
  IEF_U16N = 0x6,
  IEF_S8 = 0x7,
  IEF_U8 = 0x8,
  IEF_S8N = 0x9,
  IEF_U8N = 0xA,
  IEF_SCMP3N = 0xB,
  IEF_UCMP3N = 0xC,
  IEF_U8NL = 0xD,
  IEF_COLOR4N = 0xE,
  IEF_MAX = 0xF,
};

enum nDraw::SHADER_TYPE : __int32
{
  SHADER_VS = 0x0,
  SHADER_PS = 0x1,
  SHADER_GS = 0x2,
  SHADER_HS = 0x3,
  SHADER_DS = 0x4,
  SHADER_CS = 0x5,
  SHADER_ES = 0x6,
};

enum nDraw::OBJECT_TYPE : __int32
{
  OT_CBUFFER = 0x0,
  OT_TEXTURE = 0x1,
  OT_FUNCTION = 0x2,
  OT_SAMPLER = 0x3,
  OT_BLEND = 0x4,
  OT_DEPTHSTENCIL = 0x5,
  OT_RASTERIZER = 0x6,
  OT_TECHNIQUE = 0x7,
  OT_STRUCT = 0x8,
  OT_INPUTLAYOUT = 0x9,
  OT_SAMPLERCMP = 0xA,
  OT_POINTSTREAM = 0xB,
  OT_LINESTREAM = 0xC,
  OT_TRIANGLESTREAM = 0xD,
  OT_INPUTPATCH = 0xE,
  OT_OUTPUTPATCH = 0xF,
};

enum nDraw::CLASS_TYPE : __int32
{
  CT_UNDEFINED = 0x0,
  CT_VOID = 0x1,
  CT_SCALAR = 0x2,
  CT_VECTOR = 0x3,
  CT_MATRIX = 0x4,
  CT_STRUCT = 0x5,
  CT_OBJECT = 0x6,
};

enum nDraw::DATA_TYPE : __int32
{
  DT_UNDEFINED = 0x0,
  DT_FLOAT = 0x1,
  DT_HALF = 0x2,
  DT_BOOL = 0x3,
  DT_INT = 0x4,
  DT_UINT = 0x5,
  DT_DOUBLE = 0x6,
  DT_STRING = 0x7,
  DT_VOID = 0x8,
};

typedef nDraw::D3D11_INPUT_ELEMENT_DESC nDraw::D3D11_INPUT_ELEMENT_DESC_0;

typedef nDraw::D3D11_INPUT_ELEMENT_DESC_0 nDraw::GPUINPUT_ELEMENT;

struct __cppobj __attribute__((aligned(8))) nDraw::InputLayout : nDraw::Resource
{
  nDraw::GPUINPUT_ELEMENT *mGPUElements;
  u32 mGPUElementNum;
  nDraw::INPUT_ELEMENT *mElements;
  u32 mElementNum;
  u32 mStride;
  bool mIsInstanceData;
};

typedef char nDraw::CHAR;

typedef const nDraw::CHAR *nDraw::LPCSTR;

typedef unsigned int UINT;

typedef nDraw::DXGI_FORMAT nDraw::DXGI_FORMAT_0;

typedef nDraw::D3D11_INPUT_CLASSIFICATION nDraw::D3D11_INPUT_CLASSIFICATION_0;

struct nDraw::D3D11_INPUT_ELEMENT_DESC
{
  nDraw::LPCSTR SemanticName;
  UINT SemanticIndex;
  nDraw::DXGI_FORMAT_0 Format;
  UINT InputSlot;
  UINT AlignedByteOffset;
  nDraw::D3D11_INPUT_CLASSIFICATION_0 InputSlotClass;
  UINT InstanceDataStepRate;
};

struct nDraw::INPUT_ELEMENT
{
  MT_CTSTR sname;
  unsigned __int32 sindex : 6;
  unsigned __int32 format : 5;
  unsigned __int32 count : 7;
  unsigned __int32 start : 4;
  unsigned __int32 offset : 9;
  unsigned __int32 instance : 1;
  u32 padding1;
};

struct __cppobj nDraw::InputLayout::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) nDraw::InputLayout::INPUT_SEMANTIC
{
  MT_CTSTR sname;
  u32 sindex;
};

struct nDraw::InputLayout::FETCH_INFO
{
  unsigned __int32 enable : 1;
  unsigned __int32 index : 8;
  unsigned __int32 slot : 8;
  unsigned __int32 decoder : 15;
};

struct __cppobj nDraw::STRUCT : nDraw::OBJECT
{
  unsigned __int32 size : 10;
  unsigned __int32 member_num : 12;
  unsigned __int32 rcount : 10;
  u32 padding1;
  nDraw::VARIABLE *members;
};

struct nDraw::SQ_BASE
{
  unsigned __int32 type : 4;
  unsigned __int32 reserved : 28;
};

struct __cppobj nDraw::CBUFFER : nDraw::OBJECT
{
  unsigned __int32 size : 16;
  unsigned __int32 variable_num : 16;
  u32 crc;
  nDraw::VARIABLE *variables;
  void *pinitvalues;
};

struct __cppobj nDraw::FUNCTION : nDraw::OBJECT
{
  unsigned __int32 argument_num : 8;
  unsigned __int32 local_num : 12;
  unsigned __int32 immediate_num : 12;
  unsigned __int32 object_num : 10;
  unsigned __int32 depend_num : 9;
  unsigned __int32 direct_call : 1;
  unsigned __int32 attrtype : 4;
  unsigned __int32 attrcount : 8;
  unsigned __int32 domain : 2;
  unsigned __int32 partitioning : 3;
  unsigned __int32 output_topology : 2;
  unsigned __int32 maxtessfactor : 13;
  unsigned __int32 patchconstant_func : 12;
  u32 padding1;
  nDraw::VARIABLE *locals;
  u32 *immediates;
  nDraw::ST_BASE *pstatement;
  u16 *objects;
  u16 *depends;
  nDraw::VARIABLE ret;
};

struct nDraw::ST_BASE
{
  unsigned __int32 type : 4;
  unsigned __int32 reserved : 28;
};

struct nDraw::ST_SWITCH
{
  unsigned __int32 type : 4;
  unsigned __int32 attrtype : 4;
  unsigned __int32 attrcount : 8;
  unsigned __int32 reserved : 16;
  u32 padding1;
  nDraw::ST_EXPRESSION *pselector;
  nDraw::ST_BASE *pstatement;
};

struct nDraw::ST_EXPRESSION
{
  unsigned __int32 type : 4;
  unsigned __int32 sequence_num : 28;
  u32 padding1;
  nDraw::SQ_BASE sequences[1];
};

struct __cppobj nDraw::SAMPLER_STATE : nDraw::OBJECT
{
  nDraw::SAMPLER_DESC desc;
};

struct __cppobj sShader2::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) sShader2::SEMANTIC_INFO
{
  MT_CTSTR sname;
  u32 stype;
  u32 sindex;
  unsigned __int32 stage : 16;
  unsigned __int32 ctype : 8;
  unsigned __int32 dtype : 8;
};

struct __attribute__((aligned(8))) sShader2::ATTRIBUTE
{
  MT_CTSTR sname;
  unsigned __int32 sindex : 8;
  unsigned __int32 svalue : 4;
  unsigned __int32 offset : 6;
  unsigned __int32 start : 7;
  unsigned __int32 count : 6;
  unsigned __int32 usage : 1;
};

struct sShader2::INTERPOLATOR
{
  sShader2::ATTRIBUTE attrs[32];
  u32 attr_num;
  u32 slot_num;
};

struct sShader2::OP_CAST
{
  bool benable;
  u32 op_count;
  u32 depth;
  u32 stack[8];
};

struct __attribute__((aligned(8))) sShader2::CONTEXT
{
  MT_STR ptop;
  MT_STR pdst;
  MT_STR pend;
  const nDraw::OBJECT **pobjects;
  const nDraw::SHADER_STATE *states;
  const nDraw::OBJECT *poutputs[1024];
  u32 output_num;
  u32 encode_targets;
  bool encode_srgb;
  nDraw::FEATURE_LV flv;
  const nDraw::STRUCT *phsinput;
  sShader2::INTERPOLATOR interpolator;
  nDraw::SQ_BASE sqbuf[4096];
  nDraw::SQ_BASE *sqstack[32];
  u32 sqnum[32];
  sShader2::OP_CAST cast;
};

enum sShader2::PACK_MODE : __int32
{
  PACK_NONE = 0x0,
  PACK_SEQUENTIAL = 0x1,
  PACK_LIMITATION = 0x2,
};

struct sShader2::MICRO_CODE
{
  unsigned __int32 op_num : 4;
  unsigned __int32 dest_reg : 5;
  unsigned __int32 dest_mask : 4;
  unsigned __int32 src0_reg : 5;
  unsigned __int32 src0_mask : 4;
  unsigned __int32 src1_reg : 5;
  unsigned __int32 src1_mask : 4;
  unsigned __int32 src2_reg : 5;
  unsigned __int32 src2_mask : 4;
  unsigned __int32 eoc : 1;
  unsigned __int32 scalar : 1;
};

struct __cppobj rShaderPackage::MyDTI : MtDTI
{
};

enum sBrowser::$C16F254C4F7AC1936BBCFE86D71820CA : __int32
{
  SAVE_RNO_WAIT_REQ = 0x0,
  SAVE_RNO_WAIT_SAVE = 0x1,
  SAVE_RNO_SAVE_SUCCESS = 0x2,
  SAVE_RNO_SAVE_ERROR = 0x3,
};

enum sBrowser::$C7CE77FA11B96342B278135225D8355E : __int32
{
  BROWSER_RNO_IDLE = 0x0,
  BROWSER_RNO_MOVE = 0x1,
  BROWSER_RNO_CLOSE = 0x2,
  BROWSER_RNO_RESTART = 0x3,
  BROWSER_RNO_FEEDBACK = 0x4,
};

enum sBrowser::$69238857F16D31036D5FA36E34188F75 : __int32
{
  BROWSER_REQ_NONE = 0x0,
  BROWSER_REQ_EXEC = 0x1,
  BROWSER_REQ_CLOSE = 0x2,
  BROWSER_REQ_RESTART = 0x3,
  BROWSER_REQ_CALL_JS_FUNC = 0x4,
};

enum sBrowser::$D043A2E9E9956BB3C40FE53A0FD1B5DA : __int32
{
  BROWSER_SIZE_TYPE_BNR = 0x0,
  BROWSER_SIZE_TYPE_WIN = 0x1,
  BROWSER_SIZE_TYPE_WINFULL = 0x2,
  BROWSER_SIZE_TYPE_FULL = 0x3,
  BROWSER_SIZE_TYPE_NUM = 0x4,
};

struct sBrowser::VERTEX
{
  f32 x;
  f32 y;
  f32 z;
  u32 color;
  f32 u;
  f32 v;
};

enum nDraw::CULL_MODE : __int32
{
  CULL_NONE = 0x0,
  CULL_FRONT = 0x1,
  CULL_BACK = 0x2,
};

enum nDraw::MISC_DECODE_MODE : __int32
{
  MISC_DECODE_NONE = 0x0,
  MISC_DECODE_RG_CALC_Z = 0x1000,
  MISC_DECODE_XY_CALC_Z = 0x2000,
  MISC_DECODE_AG_CALC_Z = 0x3000,
  MISC_DECODE_R_TO_RGBA = 0x4000,
  MISC_DECODE_G_TO_RGBA = 0x5000,
  MISC_DECODE_B_TO_RGBA = 0x6000,
  MISC_DECODE_A_TO_RGBA = 0x7000,
  MISC_DECODE_RGBI = 0x8000,
  MISC_DECODE_RGBY = 0x9000,
  MISC_DECODE_DEPTH24 = 0xA000,
  MISC_DECODE_INVERSE_Z = 0xB000,
  MISC_DECODE_RGBE = 0xC000,
  MISC_DECODE_RC_RGB = 0xD000,
  MISC_DECODE_VARIANCE = 0xE000,
  MISC_DECODE_NORMAL = 0xF000,
  MISC_DECODE_STENCIL = 0x10000,
  MISC_DECODE_RR_RGBI = 0x11000,
  MISC_DECODE_RR_RGBNL = 0x12000,
  MISC_DECODE_RR_RGB7E3 = 0x13000,
  MISC_DECODE_RGBNL = 0x14000,
  MISC_DECODE_YCCA = 0x15000,
  MISC_DECODE_YCCA_SRGB = 0x16000,
  MISC_DECODE_RGB7E3 = 0x17000,
  MISC_DECODE_SRGBA = 0x18000,
  MISC_DECODE_SRGB_P2S = 0x40000,
  MISC_DECODE_SRGB = 0x80000,
};

enum nDraw::TBrowserFont : __int32
{
  TBrowserFont_NormalFont = 0x0,
  TBrowserFont_BasePlane = 0x1,
};

enum cDraw::ENTRY_STATE : __int32
{
  ES_CONSTANT_SET = 0x2,
  ES_IMMEDIATE_SET = 0x4,
  ES_DRAW = 0x8,
  ES_DRAW_CANCEL = 0x10,
  ES_MATERIAL = 0x20,
  ES_MATERIAL_CANCEL = 0x40,
  ES_MATERIAL_MULTIPASS = 0x80,
  ES_COMMAND_CACHE = 0x100,
  ES_STATE_DISABLE = 0x1E,
};

struct __attribute__((aligned(8))) SNJ_BROWSER_BITMAP
{
  int w;
  int h;
  int byt;
  int ptc;
  int fmt;
  int siz;
  int typ;
  void *dathnd;
  int dattyp;
  unsigned __int8 *datptr;
  int datlck;
  int datcre;
  unsigned __int8 *msk;
  int mskptc;
};

struct SNJ_BROWSER_FONTINFO
{
  int filsiz;
  int imgw;
  int imgh;
  int fntw;
  int fnth;
  int fntmgn;
  int fntdatidx[2];
};

enum sKeyboardInterface::KEYBOARD_OPTION : __int32
{
  KEYBOARD_OPTION_DEFAULT = 0x0,
  KEYBOARD_OPTION_PASSWORD = 0x4,
};

enum nPlatform::E_PLATFORM_TYPE : __int32
{
  PLATFORM_TYPE_NONE = 0x0,
  PLATFORM_TYPE_PC = 0x1,
  PLATFORM_TYPE_PS3 = 0x2,
  PLATFORM_TYPE_PS4 = 0x3,
};

enum sHttpPatch::$2009B4A3A17DDFDCFCDE8C20F05CC755 : __int32
{
  FLOW_FORMAT_INIT = 0x0,
  FLOW_FORMAT_REQ = 0x1,
  FLOW_FORMAT_WAIT = 0x2,
  FLOW_FORMAT_ERROR = 0x3,
  FLOW_FORMAT_EXIT = 0x4,
  FLOW_FORMAT_SUSPEND = 0x63,
};

struct SNJ_BROWSER_POINT
{
  int x;
  int y;
};

struct SNJ_BROWSER_IMEINFO
{
  int fCharset;
  int fMaxLength;
  int fBufferSize;
  char *fBuffer;
  int fTemplateSize;
  char *fTemplate;
  int fFormatSize;
  char *fFormat;
  int fResultSize;
  int fResult;
  int fCompoType;
  int fCompoUsage;
  int fEchoChar;
  int fSelectedRangeStart;
  int fSelectedRangeEnd;
  int fSelectedRangeDirection;
  unsigned int fInputCharset;
  SNJ_BROWSER_RECT *fCompoRect;
};

struct __cppobj __attribute__((aligned(8))) sRenderExt : sRender
{
};

struct __cppobj sRenderExt::MyDTI : MtDTI
{
};

enum sDialogBase::$0D7C87ACA9E409CA0F444A6F179CBA49 : __int32
{
  PHASE_IDLE = 0x0,
  PHASE_SHOW = 0x1,
};

enum sCommonDialog::MSG_DIALOG_RESULT : __int32
{
  MSG_DIALOG_RESULT_BUTTON_INVALID = 0x0,
  MSG_DIALOG_RESULT_BUTTON_OK = 0x1,
  MSG_DIALOG_RESULT_BUTTON_YES = 0x1,
  MSG_DIALOG_RESULT_BUTTON_NO = 0x2,
  MSG_DIALOG_RESULT_USER_CANCELED = 0x3,
  MSG_DIALOG_RESULT_ABORTED = 0x4,
  MSG_DIALOG_RESULT_ERROR = 0x5,
};

struct __cppobj sGuideExt::MyDTI : MtDTI
{
};

typedef nPlatformUtil::nSystemService::CALL_TYPE::DummyName nPlatformUtil::nSystemService::CALL_TYPE::TYPE;

struct MtNetCom::IRichPresence::Handler
{
  int (**_vptr$Handler)(void);
};

enum MtNetCom::$88019023EE59E4F3500DBD8C241A97EC : __int32
{
  IID_INative = 0x0,
  IID_IRichPresence = 0x1,
  IID_IDialog = 0x2,
  IID_IPlayersHistory = 0x3,
  IID_ISessionCreateFlags = 0x4,
  IID_IWindowHandle = 0x5,
  IID_IRankingBoardMap = 0x6,
  IID_IInnerString = 0x7,
  IID_IParty = 0x8,
  IID_IInvite = 0x9,
  IID_IParentalLock = 0xA,
  IID_ITusCommon = 0xB,
  IID_IPsHome = 0xC,
  IID_ISessionPort = 0xD,
  IID_IXSessionHandle = 0xE,
  IID_IAchievementOption = 0xF,
  IID_IPsnTicket = 0x10,
  IID_IPsnProfile = 0x11,
  IID_IActivity = 0x12,
  IID_IPsnPresence = 0x13,
  IID_IDeviceInfo = 0x14,
  IID_IPsnServiceState = 0x15,
  IID_IPsnInGameDataMessage = 0x16,
  IID_IPsnTus = 0x17,
  IID_IXdpStatsRelatedLeaderboard = 0x18,
  IID_ICheckPrivilege = 0x19,
  IID_IPlayersHistoryPS4 = 0x1A,
  IID_IInvitePS4 = 0x1B,
  IID_IParentalLockPS4 = 0x1C,
  IID_IPsnTicketPS4 = 0x1D,
  IID_IPsnProfilePS4 = 0x1E,
  IID_IPsnPresencePS4 = 0x1F,
  IID_IInnerStringPS4 = 0x20,
  IID_IPsPlusPS4 = 0x21,
  IID_IPartyPS4 = 0x22,
  IID_IPsnTusPS4 = 0x23,
  IID_IEntitlementPS4 = 0x24,
  IID_IFriendList = 0x25,
  IID_IProtocolActivation = 0x26,
  IID_IUpstreamDisconnection = 0x27,
  IID_IRichPresenceXboxOne = 0x28,
  IID_ISteamAppAdmin = 0x29,
};

struct __cppobj MtNetCom::IInnerString : MtNetCom::INative
{
};

struct __cppobj MtNetCom::CInnerString : MtObject, MtNetCom::IInnerString
{
};

struct __cppobj MtNetCom::CRichPresence : MtObject, MtNetCom::IRichPresence
{
};

struct __cppobj __attribute__((aligned(8))) uFilter : cUnit
{
  u16 mPass;
  u32 mPriority;
  u32 mScreenLayer;
};

enum sGUIExt::cMap::$556C4B2656C184803E47020989528FD0 : __int32
{
  MAPTYPE_CURRENT = 0x0,
  MAPTYPE_FIELD = 0x1,
  MAPTYPE_MAX = 0x2,
};

enum sGUIExt::cMap::$25CB50DDC1B9D21B08F1F1582C5AF008 : __int32
{
  GRIDTYPE_NORMAL = 0x0,
  GRIDTYPE_PARTS = 0x1,
  GRIDTYPE_MAX = 0x2,
};

enum sGUIExt::cMap::$5D3917D5A6D62F1F8FA5C62937D855D9 : __int32
{
  RTYPE_0 = 0x0,
  RTYPE_1 = 0x1,
  RTYPE_2 = 0x2,
};

enum sGUIExt::cMap::$8EF9F0E3A35506F551AC239E15A88285 : __int32
{
  MODEMINI_S = 0x0,
  MODEMINI_L = 0x1,
  MODEMINI_NDISP = 0x2,
};

struct __cppobj sGUIExt::cGUIInfo : MtObject
{
  MtString mName;
};

struct __cppobj sGUIExt::cGUIInfo::MyDTI : MtDTI
{
};

struct __cppobj sGUIExt::cTFSInfo : MtObject
{
  s32 mHeader;
  MtString mString;
};

struct __cppobj sGUIExt::cTFSInfo::MyDTI : MtDTI
{
};

enum sGUIExt::$72A8547B27EFCDFE4D51AB12098CDB90 : __int32
{
  RNO_INIT = 0x0,
  RNO_WAIT = 0x1,
};

enum sGUIExt::$08EB9305C9B7E64680F4442EB23CAF35 : __int32
{
  TFSF_NONE = 0x0,
  TFSF_UNIT = 0x1,
  TFSF_CONTROL = 0x2,
  TFSF_DETAIL = 0x4,
  TFSF_PRINTLOG = 0x8,
};

enum sGUIExt::$E5A73AB82872CBCC4B079ED42A8DF7D0 : __int32
{
  PRIOGRP_LOW = 0x0,
  PRIOGRP_HEADER_EM = 0x1,
  PRIOGRP_HEADER_PT = 0x2,
  PRIOGRP_HUD = 0x3,
  PRIOGRP_VARIABLE = 0x4,
  PRIOGRP_MENU = 0x5,
  PRIOGRP_HIGH = 0x6,
  PRIOGRP_DBGRECT = 0x7,
  PRIOGRP_DBGPRINT = 0x8,
  PRIOGRP_MAX = 0x9,
};

enum sGUIExt::$C834EA84D51468E95DF3C2BF7BF9C617 : __int32
{
  MENUIF_NONE = 0x0,
  MENUIF_GAMEMENU = 0x1,
  MENUIF_SCM = 0x2,
  MENUIF_CHATL = 0x4,
  MENUIF_ANYMENU = 0x8,
};

enum nDraw::SCREEN_LAYER : __int32
{
  SCREEN_LAYER_00 = 0x0,
  SCREEN_LAYER_01 = 0x1,
  SCREEN_LAYER_02 = 0x2,
  SCREEN_LAYER_03 = 0x3,
  SCREEN_LAYER_04 = 0x4,
  SCREEN_LAYER_05 = 0x5,
  SCREEN_LAYER_06 = 0x6,
  SCREEN_LAYER_07 = 0x7,
  SCREEN_LAYER_08 = 0x8,
  SCREEN_LAYER_09 = 0x9,
  SCREEN_LAYER_10 = 0xA,
  SCREEN_LAYER_11 = 0xB,
  SCREEN_LAYER_12 = 0xC,
  SCREEN_LAYER_13 = 0xD,
  SCREEN_LAYER_14 = 0xE,
  SCREEN_LAYER_15 = 0xF,
  SCREEN_LAYER_16 = 0x10,
  SCREEN_LAYER_17 = 0x11,
  SCREEN_LAYER_18 = 0x12,
  SCREEN_LAYER_19 = 0x13,
  SCREEN_LAYER_20 = 0x14,
  SCREEN_LAYER_21 = 0x15,
  SCREEN_LAYER_22 = 0x16,
  SCREEN_LAYER_23 = 0x17,
  SCREEN_LAYER_24 = 0x18,
  SCREEN_LAYER_25 = 0x19,
  SCREEN_LAYER_26 = 0x1A,
  SCREEN_LAYER_27 = 0x1B,
  SCREEN_LAYER_28 = 0x1C,
  SCREEN_LAYER_29 = 0x1D,
  SCREEN_LAYER_30 = 0x1E,
  SCREEN_LAYER_31 = 0x1F,
  MAX_SCREEN_LAYER = 0x7F,
};

struct nGUI::MessageDrawState
{
  rGUIFont *pFont;
  cGUIFontFilter *pFontFilter;
  u32 ffIndex;
  u32 zbiasOffset;
  u32 color;
  u32 iconColor;
  f32 fontWidth;
  f32 fontHeight;
  bool pageEnd;
  bool is3D;
  nGUI::MTAG *pDrawStartMTag;
  nGUI::MTAG *pDrawEndMTag;
  nGUI::MTAG **ppDrawMTagTop;
  nGUI::MTAG *pDrawSearchTopMTag;
  nGUI::Draw *pDrawObj;
  nGUI::VERTEX *pVertex;
  nGUI::BufferObject *pVertexObject;
  u16 *pIndex;
  nGUI::BufferObject *pIndexObject;
};

struct nGUI::Draw::$8E4DACC3875D01F08CD2F7DF64C8DA67::$9EE0F4CA9EA9D8C128D0901A686D5F2A
{
  unsigned __int32 mStencilMaskCount : 8;
  unsigned __int32 mStencilRefCount : 8;
  unsigned __int32 mStencilStart : 8;
  unsigned __int32 mStencilMaskStackCount : 4;
};

struct nGUI::Draw::$8E4DACC3875D01F08CD2F7DF64C8DA67::$B94E2DEEE0D9CE2AE4D58828E080F563
{
  unsigned __int32 mStencilRef : 8;
};

union nGUI::Draw::$8E4DACC3875D01F08CD2F7DF64C8DA67
{
  nGUI::Draw::$8E4DACC3875D01F08CD2F7DF64C8DA67::$9EE0F4CA9EA9D8C128D0901A686D5F2A _anon_0;
  nGUI::Draw::$8E4DACC3875D01F08CD2F7DF64C8DA67::$B94E2DEEE0D9CE2AE4D58828E080F563 _anon_1;
};

struct nGUI::Draw::STENCIL_INFO
{
  unsigned __int32 type : 8;
  unsigned __int32 maskCount : 8;
  unsigned __int32 padding : 16;
};

struct __cppobj nGUI::Draw : MtObject
{
  cDraw *mpDraw;
  unsigned __int32 mColorStackCount : 8;
  unsigned __int32 mDrawPass : 4;
  unsigned __int32 mTechniquePass : 4;
  unsigned __int32 mDepthState : 4;
  unsigned __int32 mStencilState : 4;
  unsigned __int32 mBillboard : 4;
  u32 mAttr;
  nGUI::TEXTURE *mpTexture;
  nDraw::Texture *mpFontTexture;
  nDraw::PASS_TYPE mNDrawPass;
  nGUI::Draw::$8E4DACC3875D01F08CD2F7DF64C8DA67 _anon_0;
  nGUI::Draw::STENCIL_INFO mStencilMaskStack[16];
  f32 mBaseZ;
  f32 mViewZ;
  f32 mScreenZ;
  unsigned __int32 mAlphaMaskStackCount : 4;
  unsigned __int32 mAlphaMaskApply : 1;
  nDraw::RenderTargetView *mpRenderTargetBackup;
  nDraw::DepthStencilView *mpDepthStencilBackup;
  u32 mAlphaMaskStack[16];
  MtVector2 mOffset;
  MtVector2 mScale;
  MtRect mScissorRect;
  MtVector4 mColorScaleStack[16];
  MtVector4 mAmbientColorStack[16];
};

struct __cppobj nGUI::Draw::MyDTI : MtDTI
{
};

struct __cppobj nGUI::BlendState : MtObject
{
};

struct __cppobj nGUI::BlendState::MyDTI : MtDTI
{
};

struct __attribute__((aligned(4))) nGUI::BlendState::BLEND_DATA
{
  SO_HANDLE handle;
  bool alphaTest;
};

enum nGUI::BlendState::BLEND_MODE : __int32
{
  BLEND_DEFAULT = 0x0,
  BLEND_BlendAlpha = 0x1,
  BLEND_BlendInvAlpha = 0x2,
  BLEND_Add = 0x3,
  BLEND_Mul = 0x4,
  BLEND_AddAlpha = 0x5,
  BLEND_AddInvAlpha = 0x6,
  BLEND_BlendFactor = 0x7,
  BLEND_BlendFactorAlpha = 0x8,
  BLEND_Max = 0x9,
  BLEND_AddColor = 0xA,
  BLEND_BlendColor = 0xB,
  BLEND_RevSubAlpha = 0xC,
  BLEND_RevSubInvAlpha = 0xD,
  BLEND_RevSubBlendAlpha = 0xE,
  BLEND_RevSubColor = 0xF,
  BLEND_RevSubBlendColor = 0x10,
  BLEND_RevSub = 0x11,
  BLEND_ColorBlendAlphaAdd = 0x12,
  BLEND_AddRGB = 0x13,
  BLEND_AddInvColor = 0x14,
  BLEND_MODE_NUM = 0x15,
};

struct __cppobj nGUI::SamplerState : MtObject
{
};

struct __cppobj nGUI::SamplerState::MyDTI : MtDTI
{
};

enum nGUI::SamplerState::SAMPLER_MODE : __int32
{
  SAMPLER_WrapLinear = 0x0,
  SAMPLER_ClampLinear = 0x1,
  SAMPLER_WrapPoint = 0x2,
  SAMPLER_ClampPoint = 0x3,
  SAMPLER_MODE_NUM = 0x4,
};

enum nGUI::FRAMERATE_MODE : __int32
{
  FRAMERATE_60FPS = 0x0,
  FRAMERATE_30FPS = 0x1,
  FRAMERATE_MODE_NUM = 0x2,
};

enum nGUI::ALIGNMENT : __int32
{
  ALIGNMENT_NONE = 0x0,
  ALIGNMENT_LT = 0x1,
  ALIGNMENT_CT = 0x2,
  ALIGNMENT_RT = 0x3,
  ALIGNMENT_LC = 0x4,
  ALIGNMENT_CC = 0x5,
  ALIGNMENT_RC = 0x6,
  ALIGNMENT_LB = 0x7,
  ALIGNMENT_CB = 0x8,
  ALIGNMENT_RB = 0x9,
  ALIGNMENT_NUM = 0xA,
};

enum nGUI::RESOLUTION_ADJUST : __int32
{
  RESOLUTION_ADJUST_FOLLOW = 0x0,
  RESOLUTION_ADJUST_NONE = 0x1,
  RESOLUTION_ADJUST_VARIABLE = 0x2,
  RESOLUTION_ADJUST_VARIABLE_STRETCH = 0x3,
  RESOLUTION_ADJUST_VARIABLE_SHRINK = 0x4,
  RESOLUTION_ADJUST_SMALLPROP = 0x5,
  RESOLUTION_ADJUST_SMALLPROP_STRETCH = 0x6,
  RESOLUTION_ADJUST_SMALLPROP_SHRINK = 0x7,
  RESOLUTION_ADJUST_BIGPROP = 0x8,
  RESOLUTION_ADJUST_BIGPROP_STRETCH = 0x9,
  RESOLUTION_ADJUST_BIGPROP_SHRINK = 0xA,
  RESOLUTION_ADJUST_NUM = 0xB,
};

enum nGUI::TEXT_CONDITION : __int32
{
  TEXT_CONDITION_STOP = 0x0,
  TEXT_CONDITION_NORMAL = 0x1,
  TEXT_CONDITION_TIME = 0x2,
  TEXT_CONDITION_STAY = 0x3,
  TEXT_CONDITION_PAGE = 0x4,
  TEXT_CONDITION_DISP = 0x5,
  TEXT_CONDITION_NUM = 0x6,
};

struct nGUI::TEXT_STATUS
{
  s32 position;
  nGUI::TEXT_CONDITION condition;
};

struct __cppobj rGUI::MyDTI : MtDTI
{
};

struct __cppobj cGUIFontFilter::MyDTI : MtDTI
{
};

struct __cppobj rGUIIconInfo::MyDTI : MtDTI
{
};

struct __cppobj uBlurFilterExt::MyDTI : MtDTI
{
};

struct __cppobj uBlurFilter::MyDTI : MtDTI
{
};

struct __cppobj uFilter::MyDTI : MtDTI
{
};

enum uFilter::PASS : __int32
{
  PASS_SOLID_0 = 0x1,
  PASS_TRANSPARENT_0 = 0x3,
  PASS_DISTORTION_0 = 0x4,
  PASS_FILTER_0 = 0x5,
  PASS_SCREEN_0 = 0x6,
};

enum cUnit::UNIT_ATTR : __int32
{
  UATTR_MOVE = 0x1,
  UATTR_DRAW = 0x2,
  UATTR_SELECT = 0x4,
  UATTR_FIX = 0x8,
  UATTR_VISIBLE = 0x10,
};

enum cUnit::BEFLAG : __int32
{
  BEFLAG_DISABLE = 0x0,
  BEFLAG_PRE_MOVE = 0x1,
  BEFLAG_MOVE = 0x2,
  BEFLAG_PRE_DELETE = 0x3,
  BEFLAG_DELETE = 0x4,
};

struct __cppobj uGUIDbgPrint::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::MyDTI : MtDTI
{
};

struct __cppobj MtTypedArray<uGUIBase::cVarData> : MtArray
{
};

struct __cppobj uGUIBase::cDuplicateData : MtObject
{
  cGUIInstance *mpInst;
  MtTypedArray<uGUIBase::cVarData> mVarDatas;
};

struct __cppobj MtTypedArray<cGUIInstAnimVariable> : MtArray
{
};

struct __cppobj uGUIBase::cVarData : MtObject
{
  cGUIVariable *mpVariable;
  u32 mVariableOrgId;
  MtTypedArray<cGUIInstAnimVariable> mAnmInsts;
};

enum uGUIBase::cControl::MSG_REASON : __int32
{
  BTN_START = 0x0,
  TRG_UP = 0x0,
  TRG_DOWN = 0x1,
  TRG_LEFT = 0x2,
  TRG_RIGHT = 0x3,
  TRG_DECIDE = 0x4,
  TRG_CANCEL = 0x5,
  TRG_CHKOUT = 0x6,
  TRG_TOPBTN = 0x7,
  TRG_START = 0x8,
  TRG_SELECT = 0x9,
  TRG_LT = 0xA,
  TRG_RT = 0xB,
  TRG_LB = 0xC,
  TRG_RB = 0xD,
  TRG_R3 = 0xE,
  TRG_L3 = 0xF,
  BTN_END = 0x10,
  BTN_OFF_START = 0x10,
  OFF_UP = 0x10,
  OFF_DOWN = 0x11,
  OFF_LEFT = 0x12,
  OFF_RIGHT = 0x13,
  OFF_DECIDE = 0x14,
  OFF_CANCEL = 0x15,
  OFF_CHKOUT = 0x16,
  OFF_TOPBTN = 0x17,
  OFF_START = 0x18,
  OFF_SELECT = 0x19,
  OFF_LT = 0x1A,
  OFF_RT = 0x1B,
  OFF_LB = 0x1C,
  OFF_RB = 0x1D,
  OFF_R3 = 0x1E,
  OFF_L3 = 0x1F,
  BTN_OFF_END = 0x20,
  BTN_REL_START = 0x20,
  REL_UP = 0x20,
  REL_DOWN = 0x21,
  REL_LEFT = 0x22,
  REL_RIGHT = 0x23,
  REL_DECIDE = 0x24,
  REL_CANCEL = 0x25,
  REL_CHKOUT = 0x26,
  REL_TOPBTN = 0x27,
  REL_START = 0x28,
  REL_SELECT = 0x29,
  REL_LT = 0x2A,
  REL_RT = 0x2B,
  REL_LB = 0x2C,
  REL_RB = 0x2D,
  REL_R3 = 0x2E,
  REL_L3 = 0x2F,
  BTN_REL_END = 0x30,
  BTN_HOLD_START = 0x30,
  HOLD_UP = 0x30,
  HOLD_DOWN = 0x31,
  HOLD_LEFT = 0x32,
  HOLD_RIGHT = 0x33,
  HOLD_DECIDE = 0x34,
  HOLD_CANCEL = 0x35,
  HOLD_CHKOUT = 0x36,
  HOLD_TOPBTN = 0x37,
  HOLD_START = 0x38,
  HOLD_SELECT = 0x39,
  HOLD_LT = 0x3A,
  HOLD_RT = 0x3B,
  HOLD_LB = 0x3C,
  HOLD_RB = 0x3D,
  HOLD_R3 = 0x3E,
  HOLD_L3 = 0x3F,
  BTN_HOLD_END = 0x40,
  TRG_AR_UP = 0x40,
  TRG_AR_DOWN = 0x41,
  TRG_AR_RIGHT = 0x42,
  TRG_AR_LEFT = 0x43,
  TRG_TAB_R = 0x44,
  TRG_TAB_L = 0x45,
  TRG_LEFT_LIMIT = 0x46,
  SET_FOCUS = 0x47,
  RESET_FOCUS = 0x48,
  MESSAGE_REASON_MAX = 0x49,
};

struct __cppobj uGUIBase::cControl::Message : MtObject
{
  uGUIBase::cControl::MSG_REASON reason;
  s32 current;
  s32 old;
  uGUIBase::cControl *pSender;
};

struct __cppobj uGUIBase::cControl : MtObject
{
  void (*messageEvent[73])(uGUIBase *, uGUIBase::cControl::Message *);
  _BYTE gap250[584];
  bool mFocus;
  bool mSingleInputMode;
  bool mEnableLoop;
  bool mEnableTrgLoop;
  bool mMovePosAuto;
  uGUIBase::cControl *mpParent;
  uGUIBase::cControl *mpChild;
  uGUIBase::cControl *mpNext;
  s32 mBindPos;
  uGUIBase *mpParentGUI;
  s32 mCurrentPos;
  s32 mOldPos;
  u32 *mTags;
  s32 mItemNum;
  uGUIBase::cControl::Message mMessageQueue[8];
  s32 mQueueWriteIndex;
  s32 mQueueReadIndex;
  bool mAutoDispatch;
  bool mDebugMode;
  bool mSystemInput;
  f32 mHoldFrame[16];
  f32 mHoldFrameMax;
  u32 mMsgOkF;
  u32 mCtrlF;
  bool mShiftMsgReason[16][16];
  u32 mSpdUpChkCnt;
  u32 mSpdUpChk;
  s32 mSpdUpAdd;
  s32 mSpdUpAddAdd;
  s32 mSpdUpAddMax;
  rSoundRequest *mpSeResMoveV;
  u32 mSeMoveV;
  rSoundRequest *mpSeResMoveH;
  u32 mSeMoveH;
  rSoundRequest *mpSeResDecide;
  u32 mSeDecide;
  rSoundRequest *mpSeResCancel;
  u32 mSeCancel;
  rSoundRequest *mpSeResLimit;
  u32 mSeLimit;
  rSoundRequest *mpSeResStart;
  u32 mSeStart;
  rSoundRequest *mpSeResSelect;
  u32 mSeSelect;
  rSoundRequest *mpSeResTop;
  u32 mSeTop;
  rSoundRequest *mpSeResCheck;
  u32 mSeCheck;
  bool mIsBeforeLimit;
  bool mIsEnableLimitLeft;
  MtString mName;
};

struct __cppobj uGUIBase::cControl::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cMenuDepthInfo : MtObject
{
  s32 mSelectedPos;
};

struct __cppobj uGUIBase::cMenuDepthInfo::MyDTI : MtDTI
{
};

enum uGUIBase::$2FE20379A3D3720E917187CA7AF97747 : __int32
{
  BASEF_NONE = 0x0,
  BASEF_PAUSE = 0x1,
  BASEF_NOLOAD = 0x2,
};

enum uGUIBase::$8EF667A8669A9F104EF8ECC74E350DA0 : __int32
{
  ENDTYPE_KILL = 0x0,
  ENDTYPE_EXIT = 0x1,
};

enum uGUIBase::$0763CAD7D0A1F010268A8176E1FC48DF : __int32
{
  GENDERTYPE_NONE = 0x0,
  GENDERTYPE_MTOM = 0x1,
  GENDERTYPE_MTOF = 0x2,
  GENDERTYPE_FTOM = 0x3,
  GENDERTYPE_FTOF = 0x4,
  GENDERTYPE_PTOM = 0x5,
  GENDERTYPE_PTOF = 0x6,
  GENDERTYPE_MTOP = 0x7,
  GENDERTYPE_FTOP = 0x8,
  GENDERTYPE_MAX = 0x9,
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cVerticalList : uGUIBase::cControl
{
  s32 mVisibleSize;
  s32 mLocate;
  s32 mOldLocate;
};

struct __cppobj uGUIBase::cVerticalList::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cVerticalSlider : uGUIBase::cControl
{
};

struct __cppobj uGUIBase::cVerticalSlider::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cHorizontalList : uGUIBase::cControl
{
  bool mTabType;
  s32 mVisibleSize;
  s32 mLocate;
  s32 mOldLocate;
};

struct __cppobj uGUIBase::cHorizontalList::MyDTI : MtDTI
{
};

struct __cppobj uGUI::MyDTI : MtDTI
{
};

struct __cppobj uCoord::MyDTI : MtDTI
{
};

struct __cppobj cGUIInstRoot::MyDTI : MtDTI
{
};

struct __cppobj cGUIInstance::MyDTI : MtDTI
{
};

struct __cppobj cGUIInstNull::MyDTI : MtDTI
{
};

struct __cppobj cGUIInstScissorMask::MyDTI : MtDTI
{
};

struct __cppobj cGUIInstAnimation::MyDTI : MtDTI
{
};

struct __cppobj cGUIObject::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjRoot::MyDTI : MtDTI
{
};

struct __cppobj cGUIInstAnimVariable::MyDTI : MtDTI
{
};

struct __cppobj cGUIVariable::MyDTI : MtDTI
{
};

struct __cppobj cGUIInstAnimControl::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjText::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjMessage::MyDTI : MtDTI
{
};

struct __cppobj cGUIObj2D::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjChildAnimationRoot::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjNull::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjTextureSet::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjTexture::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjPolygon::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjScissorMask::MyDTI : MtDTI
{
};

struct __cppobj cGUIObjColorAdjust::MyDTI : MtDTI
{
};

struct __cppobj cGUIVarInt::MyDTI : MtDTI
{
};

struct __cppobj cGUIVarFloat::MyDTI : MtDTI
{
};

typedef std::_Simple_types<value_type>::size_type std::_Vector_val<_Val_types>::size_type;

typedef std::_Vector_val<_Val_types>::size_type std::vector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::size_type;

typedef const std::_Simple_types<value_type>::value_type_0 *std::_Simple_types<value_type>::const_reference_0;

typedef std::_Simple_types<value_type>::const_reference_0 std::_Vector_val<_Val_types>::const_reference;

typedef std::_Vector_val<_Val_types>::const_reference std::vector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::const_reference;

struct std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >
{
  __int8 gap0[1];
};

struct std::_Allocator_base<uGUI::DuplicateBuffer>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<uGUI::DuplicateBuffer> : std::_Allocator_base<uGUI::DuplicateBuffer>
{
};

typedef unsigned int std::_Simple_types<value_type>::value_type_1;

typedef std::_Simple_types<value_type>::value_type_1 *std::_Simple_types<value_type>::pointer_1;

struct std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> >
{
  __int8 gap0[1];
};

struct std::_Allocator_base<unsigned int>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<unsigned int> : std::_Allocator_base<unsigned int>
{
};

struct __cppobj MtStlAllocator<uGUI::DuplicateBuffer> : std::allocator<uGUI::DuplicateBuffer>
{
};

struct __cppobj std::_Wrap_alloc<_Alloc>_0 : MtStlAllocator<uGUI::DuplicateBuffer>
{
};

struct std::_Get_pointer_type<MtStlAllocator<uGUI::DuplicateBuffer> >
{
  __int8 gap0[1];
};

struct std::allocator_traits<MtStlAllocator<uGUI::DuplicateBuffer> >
{
  __int8 gap0[1];
};

struct std::_Get_size_type<MtStlAllocator<uGUI::DuplicateBuffer> >
{
  __int8 gap0[1];
};

struct std::_Get_const_void_pointer_type<MtStlAllocator<uGUI::DuplicateBuffer> >
{
  __int8 gap0[1];
};

struct std::_Get_const_pointer_type<MtStlAllocator<uGUI::DuplicateBuffer> >
{
  __int8 gap0[1];
};

typedef std::_Vector_val<_Val_types>::pointer std::_Vector_const_iterator<_Myt>::_Tptr;

struct __cppobj std::_Vector_const_iterator<_Myt> : std::_Iterator012<std::random_access_iterator_tag,value_type,difference_type,const_pointer,const_reference,_Iterator_base>
{
  std::_Vector_const_iterator<_Myt>::_Tptr _Ptr;
};

struct __cppobj std::_Vector_iterator<_Myt> : std::_Vector_const_iterator<_Myt>
{
};

struct std::initializer_list<value_type>
{
  cUserManagerListener *const *_First;
  cUserManagerListener *const *_Last;
};

struct __cppobj MtStlAllocator<unsigned int> : std::allocator<unsigned int>
{
};

struct __cppobj std::_Wrap_alloc<_Alloc>_1 : MtStlAllocator<unsigned int>
{
};

struct std::_Get_pointer_type<MtStlAllocator<unsigned int> >
{
  __int8 gap0[1];
};

struct std::allocator_traits<MtStlAllocator<unsigned int> >
{
  __int8 gap0[1];
};

struct std::_Get_size_type<MtStlAllocator<unsigned int> >
{
  __int8 gap0[1];
};

struct std::_Get_const_void_pointer_type<MtStlAllocator<unsigned int> >
{
  __int8 gap0[1];
};

struct std::_Get_const_pointer_type<MtStlAllocator<unsigned int> >
{
  __int8 gap0[1];
};

struct __cppobj rSoundRequest::MyDTI : MtDTI
{
};

struct __cppobj uGUIDbgRect::MyDTI : MtDTI
{
};

typedef sGUIExt::cQuestTargetInfo *nDDOUtility::cArray<sGUIExt::cQuestTargetInfo,8>::reference;

typedef sGUIExt::cPriorityManager::cData *nDDOUtility::cArray<sGUIExt::cPriorityManager::cData,64>::reference;

typedef sGUIExt::cPriorityManager::cData **nDDOUtility::cArray<sGUIExt::cPriorityManager::cData *,64>::reference;

typedef struct uGUINpcWindowBase **nDDOUtility::cArray<uGUINpcWindowBase *,1>::reference;

enum sUnitExt::eMoveLine : __int32
{
  ML_PREPROCESS = 0x0,
  ML_SCHEDULER = 0x1,
  ML_SCHEDULER_SUB = 0x2,
  ML_FILTER = 0x3,
  ML_SCR = 0x4,
  ML_SCR_SUB = 0x5,
  ML_CTRL = 0x6,
  ML_OBJ_BIG_EM = 0x7,
  ML_OBJ_BIG_EM_SUB1 = 0x8,
  ML_PLAYER = 0x9,
  ML_NPC_AI = 0xA,
  ML_EM_NPC = 0xB,
  ML_EM2 = 0xC,
  ML_ALL_SUB1 = 0xD,
  ML_ALL_SUB2 = 0xE,
  ML_ID_CAM_SOUND = 0xF,
  ML_ID_SUB_EFF_CTRL = 0x10,
  ML_ID1 = 0x11,
  ML_ID1_SUB = 0x12,
  ML_ID2 = 0x13,
  ML_ID2_SUB = 0x14,
  ML_EFFECT = 0x15,
  ML_EFFECT_SUB = 0x16,
  ML_LIGHT = 0x17,
  ML_FADE = 0x18,
  ML_FADE_SCHEDULER = 0x19,
  ML_FADE_FILTER = 0x1A,
  ML_POSTPROCESS = 0x1B,
  ML_NUM = 0x1C,
  ML_NPC = 0xB,
  ML_SHELL = 0xD,
  ML_SOUND_GENERATOR = 0xF,
  ML_INTEL = 0xA,
  ML_OBJ = 0x7,
  ML_OBJ_SUB1 = 0x8,
  ML_OBJ_SUB2 = 0x8,
  ML_PLAYER_SUB1 = 0xD,
  ML_PLAYER_SUB2 = 0xE,
  ML_CMC = 0x9,
  ML_CMC_SUB1 = 0xD,
  ML_CMC_SUB2 = 0xE,
  ML_ENEMY = 0xB,
  ML_ENEMY_SUB1 = 0xD,
  ML_ENEMY_SUB2 = 0xE,
  ML_OBJ2 = 0xD,
  ML_OBJ2_SUB1 = 0xE,
  ML_OBJ2_SUB2 = 0xE,
  ML_CAMERA = 0xF,
  ML_EFFECT_CTRL = 0x14,
};

struct __attribute__((aligned(8))) MtJsonReader::Handler
{
  int (**_vptr$Handler)(void);
  bool mError;
};

struct __cppobj sHttpClient::hDDO : MtJsonReader::Handler
{
  MtString mFieldName;
  MtString mObjectName;
  MtString mArrayName;
};

struct __cppobj __attribute__((aligned(8))) sHttpClient::hServerEnvironmentList : sHttpClient::hDDO
{
  u32 mIndex;
};

struct __cppobj __attribute__((aligned(8))) sHttpClient::hStartAddr : sHttpClient::hDDO
{
  u32 mIndex;
};

struct __cppobj sHttpClient::hPrepare : sHttpClient::hDDO
{
};

struct __cppobj sHttpClient::hLoginInfo : sHttpClient::hDDO
{
};

struct __cppobj __attribute__((aligned(8))) sHttpClient::hSendDLErrorInfo : sHttpClient::hDDO
{
  u32 mIndex;
};

enum cHttpClient::$44EB7A3E30E5DEC21E1FCFB7046D191E : __int32
{
  METHOD_GET = 0x0,
  METHOD_POST = 0x1,
  METHOD_PUT = 0x2,
  METHOD_DELETE = 0x3,
};

enum cHttpClient::eRedirectPolicy : __int32
{
  REDIRECT_POLICY_NEVER = 0x0,
  REDIRECT_POLICY_ALWAYS = 0x1,
  REDIRECT_POLICY_DISALLOW_HTTPS_TO_HTTP = 0x2,
  REDIRECT_POLICY_NO_SCHEME_CHANGES = 0x3,
  REDIRECT_POLICY_MAX = 0x4,
};

enum cHttpClient::$492C2B95DEA92789365CACF80EA7DC6F : __int32
{
  ERROR_GENERAL = 0xFFFFFFFF,
};

struct MtJsonReader
{
  int (**_vptr$MtJsonReader)(void);
  MtStream *mStream;
};

struct HTTPDL_AcquiredIPA
{
  u32 ipa;
  u32 cnt;
};

struct sHttpPatch::FILE_LIST_ITEM
{
  MtString name_FileList;
  MtString name_VersionList;
};

enum sHttpPatch::$FDA2A24E045E9A0A8C0A511825B70035 : __int32
{
  FLOW_FORCE_MATCHED_VER_CHECK_INIT = 0x0,
  FLOW_FORCE_MATCHED_VER_CHECK_REQ = 0x1,
  FLOW_FORCE_MATCHED_VER_CHECK_WAIT = 0x2,
  FLOW_FORCE_MATCHED_VER_CHECK_ERROR = 0x3,
  FLOW_FORCE_MATCHED_VER_CHECK_EXIT = 0x4,
  FLOW_FORCE_MATCHED_VER_CHECK_SUSPEND = 0x63,
};

struct __cppobj sKeyboardExt::MyDTI : MtDTI
{
};

enum SceImeDialogStatus : __int32
{
  SCE_IME_DIALOG_STATUS_NONE = 0x0,
  SCE_IME_DIALOG_STATUS_RUNNING = 0x1,
  SCE_IME_DIALOG_STATUS_FINISHED = 0x2,
};

enum SceImeDialogEndStatus : __int32
{
  SCE_IME_DIALOG_END_STATUS_OK = 0x0,
  SCE_IME_DIALOG_END_STATUS_USER_CANCELED = 0x1,
  SCE_IME_DIALOG_END_STATUS_ABORTED = 0x2,
};

struct MtCharset
{
  __int8 gap0[1];
};

enum MtCharset::eUTF16Type : __int32
{
  TYPE_UTF16_LE = 0x0,
  TYPE_UTF16_BE = 0x1,
  TYPE_UTF16_LE_BOM = 0x2,
  TYPE_UTF16_BE_BOM = 0x3,
};

enum MtCharset::eEncodingType : __int32
{
  ET_UNKNOWN = 0x0,
  ET_ASCII = 0x1,
  ET_SJIS = 0x2,
  ET_UTF8 = 0x3,
  ET_UTF8N = 0x4,
};

enum MtCharset::eElementType : __int32
{
  TYPE_UNKNOWN_1 = 0x0,
  TYPE_ASCII = 0x1,
  TYPE_KANA = 0x2,
  TYPE_HANKANA = 0x2,
  TYPE_KANJI = 0x3,
};

struct std::_Simple_types<cUserManagerListener *>
{
  __int8 gap0[1];
};

struct __cppobj std::_Tree_simple_types<value_type> : std::_Simple_types<cUserManagerListener *>
{
};

struct std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >
{
  __int8 gap0[1];
};

struct std::_Allocator_base<cUserManagerListener *>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<cUserManagerListener *> : std::_Allocator_base<cUserManagerListener *>
{
};

struct std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false>
{
  __int8 gap0[1];
};

struct std::binary_function<cUserManagerListener *,cUserManagerListener *,bool>
{
  __int8 gap0[1];
};

struct __cppobj std::less<cUserManagerListener *> : std::binary_function<cUserManagerListener *,cUserManagerListener *,bool>
{
};

struct std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<std::_Tree_node<value_type,_Voidptr> > : std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >
{
};

struct __cppobj MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > : std::allocator<std::_Tree_node<value_type,_Voidptr> >
{
};

struct __cppobj std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > > : MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >
{
};

struct std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::_Get_size_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::_Get_const_void_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

struct std::_Get_const_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

typedef std::_Tree_node<value_type,_Voidptr>_0 std::_Tree_simple_types<value_type>::_Node_0;

typedef std::_Tree_simple_types<value_type>::_Node_0 *std::_Tree_simple_types<value_type>::_Nodeptr_0;

typedef std::_Tree_simple_types<value_type>::_Nodeptr_0 std::_Tree_val<_Val_types>::_Nodeptr_0;

typedef std::_Tree_val<_Val_types>::_Nodeptr_0 std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr_0;

struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_0 : std::_Iterator012<std::bidirectional_iterator_tag,value_type,difference_type,const_pointer,const_reference,std::_Iterator_base0>
{
  std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr_0 _Ptr;
};

struct __cppobj std::_Tree_const_iterator<_Myt>_0 : std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_0
{
};

struct __attribute__((aligned(8))) std::_Pair_base<std::_Tree_const_iterator<_Myt>,bool>
{
  std::_Tree_const_iterator<_Myt>_0 first;
  bool second;
};

struct __cppobj std::pair<iterator,bool> : std::_Pair_base<std::_Tree_const_iterator<_Myt>,bool>
{
};

typedef std::_Tree_node<value_type,_Voidptr>_0 *std::_Tree_node<value_type,_Voidptr>::_Nodeptr_0;

struct std::_Tree_node<value_type,_Voidptr>_0
{
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_0 _Left;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_0 _Parent;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_0 _Right;
  char _Color;
  char _Isnil;
  cUserManagerListener *_Myval;
};

typedef std::_Tree_val<_Val_types>::_Nodeptr std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr;

struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base> : std::_Iterator012<std::bidirectional_iterator_tag,value_type,difference_type,const_pointer,const_reference,std::_Iterator_base0>
{
  std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr _Ptr;
};

struct __cppobj std::_Tree_const_iterator<_Myt> : std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>
{
};

struct std::_If<true,const_iterator,iterator>
{
  __int8 gap0[1];
};

struct __cppobj std::_Tree_iterator<_Myt> : std::_Tree_const_iterator<_Myt>
{
};

struct std::_Pair_base<std::_Tree_const_iterator<_Myt>,std::_Tree_const_iterator<_Myt> >
{
  std::_Tree_const_iterator<_Myt>_0 first;
  std::_Tree_const_iterator<_Myt>_0 second;
};

struct __cppobj std::pair<iterator,iterator> : std::_Pair_base<std::_Tree_const_iterator<_Myt>,std::_Tree_const_iterator<_Myt> >
{
};

struct std::_Nil
{
  __int8 gap0[1];
};

struct SceImeDialogResult
{
  SceImeDialogEndStatus endstatus;
  int8_t reserved[12];
};

struct __cppobj sUserManager::MyDTI : MtDTI
{
};

struct __cppobj MtStlAllocator<cUserManagerListener *> : std::allocator<cUserManagerListener *>
{
};

typedef SceImeDialogResult SceImeDialogResult_0;

enum sMouseExt::BUTTON_EX : __int32
{
  BUTTON_EX_NOTHING = 0x0,
  BUTTON_EX_L = 0x1,
  BUTTON_EX_R = 0x2,
  BUTTON_EX_M = 0x4,
  BUTTON_EX_3 = 0x8,
  BUTTON_EX_4 = 0x10,
  BUTTON_EX_5 = 0x20,
  BUTTON_EX_6 = 0x40,
  BUTTON_EX_7 = 0x80,
  BUTTON_EX_WF = 0x1000,
  BUTTON_EX_WB = 0x2000,
};

typedef void (*sNetwork::RECEIVE_CALLBACK)(MtObject *, s32, const void *, u32);

enum sNetwork::$EFF8CE637FA9DD19B14743E0CFF2E1AA : __int32
{
  SERVICE_STATE_NULL = 0x0,
  SERVICE_STATE_BOOTUP = 0x1,
  SERVICE_STATE_NONE = 0x2,
  SERVICE_STATE_USER = 0x3,
  SERVICE_STATE_AUTH = 0x4,
  SERVICE_STATE_SHUTDOWN = 0x5,
  SERVICE_STATE_ERROR = 0x6,
  SERVICE_STATE_FATAL = 0x7,
  SERVICE_STATE_NUM = 0x8,
};

enum nNetwork::nAchievement::Object::$530CE0F62247F1AAD028AE782276607C : __int32
{
  STATE_SYSTEM_WAIT = 0x0,
  STATE_COMMAND_WAIT = 0x1,
  STATE_NUM_0 = 0x2,
};

enum nNet::SESSION_ID : __int32
{
  SESSION_ID_GAME = 0x0,
  SESSION_ID_NUM = 0x1,
  SESSION_ID_LOBBY = 0x1,
  SESSION_ID_ALL = 0x2,
};

enum nNet::LOBBY_ID : __int32
{
  LOBBY_ID_LOBBY = 0x0,
  LOBBY_ID_NUM = 0x1,
};

struct __cppobj MtNetCom::IParentalLockPS4 : MtNetCom::INative
{
};

struct __cppobj MtNetCom::IPsnTicketPS4 : MtNetCom::INative
{
};

struct __cppobj MtNetCom::CPsnTicketPS4 : MtObject, MtNetCom::IPsnTicketPS4
{
  s32 mRefCnt;
  s32 _dummy_variable_PsnTicketPS4;
};

struct __cppobj MtNetCom::CParentalLockPS4 : MtObject, MtNetCom::IParentalLockPS4
{
  s32 mRefCnt;
  s32 _dummy_variable_ParentalLockPS4;
};

struct __cppobj MtNetCom::CInnerStringPS4 : MtObject, MtNetCom::IInnerStringPS4
{
  s32 mRefCnt;
  s32 _dummy_variable_InnerStringPS4;
};

struct MtNetServiceError::Info
{
  bool mIsGot;
  s32 mLevel;
  MtNetError mError;
  s32 mIndex;
};

struct __attribute__((aligned(8))) MtNetServiceError::Target
{
  const void *mpObject;
  s32 mIndex;
};

struct __cppobj __attribute__((aligned(8))) MtNetServiceError : MtNetObject:288
{
  u32 mSupportService;
  MtNetServiceError::Info mInfo[2];
  MtNetServiceError::Target mTarget[16];
  MtNetError mInternalError;
};

struct __cppobj MtNetServiceError::MyDTI : MtDTI
{
};

enum MtNetServiceError::$C6BFAA83DF18700D6CC221BB71118AE3 : __int32
{
  LEVEL_NONE = 0x0,
  LEVEL_REQUEST = 0x1,
  LEVEL_SERVICE = 0x2,
  LEVEL_CONTEXT = 0x3,
  LEVEL_APP = 0x4,
};

struct __cppobj MtNetQueue : MtNetBuffer
{
};

struct __attribute__((aligned(8))) MtNetQueue::Buffer
{
  u8 *mpBuffer;
  u16 mSize;
};

enum sPadExt::cPadInfo::$F0C3C697B8AC1C3723C04E7BDD73BAE2 : __int32
{
  LEFT = 0x0,
  RIGHT = 0x1,
  ANLG_STICK_NUM = 0x2,
};

enum sPadExt::cPadInfo::$7B33C38F576093254329D9EDBFCF6145 : __int32
{
  VIB_INFO_NUM = 0x10,
};

struct sPadExt::PAD_TYPE_DATA
{
  sPadExt::PAD_BTN_TYPE mPadBtnType;
  u32 mPadCode;
};

enum sPadExt::$7B3C77AE9A50DA18E285505663855BEE : __int32
{
  OPTION_CONTROLER_TYPE_A = 0x0,
  OPTION_CONTROLER_TYPE_B = 0x1,
  OPTION_CONTROLER_TYPE_C = 0x2,
  OPTION_CONTROLER_TYPE_D = 0x3,
  OPTION_CONTROLER_TYPE_E = 0x4,
  OPTION_CONTROLER_TYPE_F = 0x5,
  OPTION_CONTROLER_TYPE_NUM = 0x6,
};

enum sPad::KIND : __int32
{
  KIND_NONE = 0x0,
  KIND_UNKNOWN = 0x1,
  KIND_JOYPAD = 0x2,
  KIND_PS3PAD = 0x3,
  KIND_X360PAD = 0x4,
  KIND_XBOXONEPAD = 0x5,
  KIND_ARCADE_STICK = 0x6,
  KIND_FLIGHT_STICK = 0x7,
  KIND_WHEEL = 0x8,
  KIND_DANCEPAD = 0x9,
  KIND_GUITAR = 0xA,
  KIND_DRUM_KIT = 0xB,
  KIND_BIGBUTTON = 0xC,
  KIND_CTR = 0xD,
  KIND_VITAPAD = 0xE,
  KIND_PS4PAD = 0xF,
  KIND_NUM = 0x10,
};

enum nDraw::SCENE_ATTRIBUTE : __int32
{
  SCENE_ZPREPASS = 0x2,
  SCENE_LIGHT_MASK = 0x4,
  SCENE_HDR_FILTER = 0x8,
  SCENE_DEPTHSTENCIL = 0x10,
  SCENE_REDUCTION = 0x20,
  SCENE_PRIMARY = 0x40,
  SCENE_DISTORTION_STENCIL = 0x80,
  SCENE_AUTO_RESIZE = 0x100,
  SCENE_DISTORTION = 0x200,
  SCENE_DITHERING = 0x400,
  SCENE_ALPHA_MASK = 0x800,
  SCENE_TRANSPARENT_DEFERRED = 0x2000,
  SCENE_DEFERRED_LIGHTING = 0x4000,
  SCENE_BACKFACE_DEPTHSTENCIL = 0x10000,
  SCENE_AMBIENT_MASK = 0x20000,
  SCENE_TANGENT = 0x100000,
  SCENE_HALF_LAMBERT = 0x200000,
};

enum sSavedata::$E0A642658519159BB2F9B39355A3C4DE : __int32
{
  STATE_IDLE = 0x0,
  STATE_EXECUTING = 0x1,
  STATE_BASE = 0x2,
};

enum MtMemoryStream::MODE : __int32
{
  MODE_READ_0 = 0x1,
  MODE_WRITE_0 = 0x2,
  MODE_EXPAND = 0x4,
};

enum system_launcher : __int32
{
  lnc_signout_reboot_lnc = 0x0,
  lnc_non_connect_lan_reboot_lnc_common = 0x1,
  lnc_network_cancel_reboot_lnc_common = 0x2,
  lnc_network_error_common = 0x3,
  lnc_network_error_reboot_lnc_common = 0x4,
  lnc_ng_parentallock = 0x5,
  lnc_ng_chatlimit = 0x6,
  lnc_ng_ugc = 0x7,
  lnc_check_hdd_common = 0x8,
  lnc_ng_hdd_lack_common = 0x9,
  lnc_check_trophy = 0xA,
  lnc_creating_savedata = 0xB,
  lnc_ng_savedata_clash_common = 0xC,
  lnc_ng_savedata_load_common = 0xD,
  lnc_ng_savedata_user_common = 0xE,
  lnc_ng_savedata_creating_return_l_common = 0xF,
  lnc_ng_savedata_error_common = 0x10,
  lnc_check_savedata = 0x11,
  lnc_ng_hdd_error_return_l_common = 0x12,
  lnc_ng_trophy_error_return_l_common = 0x13,
  lnc_network_ng_reboot_lnc_common = 0x14,
  lnc_network_starting_common = 0x15,
  lnc_launcher_reboot = 0x16,
  lnc_server_timeout = 0x17,
  lnc_server_communication = 0x18,
  lnc_titlename_jp = 0x19,
  system_launcher_NUM = 0x1A,
  system_launcher_SEET_NUM = 0x1,
};

struct __cppobj aViewer : cArea
{
};

struct __cppobj aViewer::MyDTI : MtDTI
{
};

struct __cppobj sScene::MyDTI : MtDTI
{
};

struct __cppobj sScene::TextureInfo::MyDTI : MtDTI
{
};

enum sScene::GEOM : __int32
{
  GEOM_SPHERE = 0x0,
  GEOM_2DPLANE = 0x1,
  GEOM_I2GLINE = 0x2,
  GEOM_CUBE = 0x3,
  GEOM_SPHERE_D2 = 0x4,
  GEOM_CONE_D2 = 0x5,
  GEOM_NUM = 0x6,
};

struct __cppobj uLight::MyDTI : MtDTI
{
};

struct uLight::SHFACTOR
{
  MtVector4 r[3];
  MtVector4 g[3];
  MtVector4 b[3];
};

enum uLight::MODE : __int32
{
  MODE_DEFAULT_0 = 0x0,
  MODE_DIFFUSE = 0x1,
  MODE_SPECULAR = 0x2,
  MODE_BALANCE = 0x3,
  __MODE__U32 = 0xFFFFFFFF,
};

struct __cppobj __attribute__((aligned(16))) uFreeCamera : uCamera
{
  uCoord *mpParent;
  s32 mParentNo;
  uCoord *mpTarget;
  s32 mTargetNo;
  s32 mControlPad;
  MtVector3 mControlSpeed;
  bool mPadControl;
};

struct __cppobj uFreeCamera::MyDTI : MtDTI
{
};

struct __cppobj uHemiSphereLight : uLight
{
  __attribute__((aligned(8))) MtVector3 mRevColor;
  MtVector3 mDir;
};

struct __cppobj uHemiSphereLight::MyDTI : MtDTI
{
};

struct rGrassWind::cParamSetSync::syncParams
{
  MtProperty mProp;
  rGrassWind::cParamSet *mpParams;
};

struct rGrassWind::cParamSetSync
{
  f32 mCurrentFrame;
  rGrassWind *mpResource;
  cUnit *mpUnit;
  u32 mPropNum;
  rGrassWind::cParamSetSync::syncParams mProps[32];
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uGrassEffect:31648 : cUnit
{
  u32 mPriority;
  _BYTE gap44[4];
  rGrassWind::cParamSetSync mSync;
  rGrassWind *mpResource;
  f32 mSpeed;
};

struct __cppobj __attribute__((aligned(8))) uGrassWind : uGrassEffect:31648
{
  u32 mType;
  f32 mAmplification;
  f32 mFrequency;
  f32 mPhase;
  f32 mElapsedPhase;
  u32 mWindGroup;
};

struct __cppobj rGrassWind : cResource
{
  MtArray mParamSetArray;
  u32 mMaxFrame;
  u32 mDTI;
  bool mLoop;
  bool mAutoDeath;
  u32 mPriority;
};

struct __cppobj rGrassWind::cParamSet : MtObject
{
  MtString mName;
  f32 mMax;
  f32 mMin;
  u32 mParamNum;
  rGrassWind::cParams *mpParams;
};

struct rGrassWind::cParams::$428657CF51573A08BB0981B69E35F8D7::$B11F62A5AB90A2B2A9F087893ED60B6D
{
  unsigned __int32 mSelect : 1;
  unsigned __int32 mValue : 16;
  unsigned __int32 mFrameNo : 15;
};

union rGrassWind::cParams::$428657CF51573A08BB0981B69E35F8D7
{
  rGrassWind::cParams::$428657CF51573A08BB0981B69E35F8D7::$B11F62A5AB90A2B2A9F087893ED60B6D _anon_0;
  u32 mKey;
};

struct rGrassWind::cParams
{
  rGrassWind::cParams::$428657CF51573A08BB0981B69E35F8D7 _anon_0;
};

enum nSound::ChannelNumber : __int32
{
  ChannelNumber_1ch = 0x1,
  ChannelNumber_2ch = 0x2,
  ChannelNumber_21ch = 0x3,
  ChannelNumber_4ch = 0x4,
  ChannelNumber_5ch = 0x5,
  ChannelNumber_51ch = 0x6,
  ChannelNumber_7ch = 0x7,
  ChannelNumber_71ch = 0x8,
};

struct __cppobj sDDOMain_0 : sMain
{
  f32 mSystemTimer;
  sRender *mpRender;
  sToolExt *mpTool;
  sUnitExt *mpUnit;
  sResourceExt *mpResource;
  sCamera *mpCamera;
  sPadExt *mpPad;
  sEffect *mpEffect;
  sCollision *mpCollision;
  sShader2 *mpShader2;
  sSound *mpSound;
  sCapture *mpCapture;
  sAreaExt *mpArea;
  sGpuParticle *mpGpuParticle;
  sMouseExt *mpMouse;
  sKeyboardExt *mpKeyboard;
  sVibration *mpVibration;
  nPhysics::System *mpPhysics2;
  sAI *mpAI;
  sZone *mpZone;
  sRemoteProcedure *mpRPC;
  sNetworkExt *mpNetwork;
  sGuideExt *mpGuide;
  sHttpClient *mpHttpClient;
  sDialogBase *mpDialog;
  sArchiveManager *mpArchiveManager;
  sSetManager *mpSetManager;
  sContextManager *mpContextManager;
  sGUIExt *mpGUI;
  sGrass *mpGrass;
  sScene *mpScene;
  sOccluder *mpOccluder;
  sShadow *mpShadow;
  sDemo *mpDemo;
  sPlatformUtil *mpPlatformUtil;
  sHttpPatch *mpHttpPatch;
  sSavedataExt *mpSavedata;
  sFile *mpFile;
  sSystemFont *mpSystemFont;
  sCommonDialog *mpCommonDialog;
  sUserManager *mpUserManager;
  sExceptionHandler *mpExceptionHandler;
  sPrimitive *mpPrimitive;
  sSyncPoint *mpSyncPoint;
  sHID *mpHID;
  sCoprocessor *mpCoprocessor;
  sLayout *mpLayout;
  sKeyboardInterface *mpKbInterface;
  sWorkRate *mpWorkRate;
  sBrowser *mpBrowser;
  sMovie *mpMovie;
  MtSemaphore *mpBrowserSemaphore;
  ScePthread mBrowserThread;
  ScePthreadAttr mBrowserThreadAttr;
  MtObject *mpBrowserObject;
  MT_MFUNC mBrowserFunction;
  __attribute__((aligned(16))) void *mpBrowserStack;
  volatile bool mbWait;
  volatile bool mBrowserThreadAlive;
  bool mIsAutoUpdate;
};

struct nPhysics::ISLAND
{
  u32 mAggressiveSleepCount;
  u32 mStatus;
  u32 mStationaryCount;
  u32 mHash;
};

struct __attribute__((aligned(8))) nPhysics::StackMemory
{
  u8 *mMemoryAddress;
  u32 mMemorySize;
  u32 mUsedMemorySize;
  nPhysics::StackMemory::MEMORY_BLOCK *mMemoryBlock;
  nPhysics::StackMemory::MEMORY_BLOCK *mCurrentMemoryBlock;
  u32 mStackSize;
};

struct __attribute__((aligned(8))) nPhysics::ID_ARRAY
{
  u32 *mValidID;
  u32 *mValidIDIndex;
  u32 *mInvalidID;
  u32 mNumValidID;
  u32 mNumMigratedID;
  u32 mMaxID;
  u32 mCreatePosition;
  u32 mRemovePosition;
};

struct __cppobj __attribute__((aligned(8))) nPhysics::List<nPhysics::RigidBody,1> : MtObject
{
  nPhysics::RigidBody *mTop;
  nPhysics::RigidBody *mBottom;
  s32 mNum;
};

struct __cppobj __attribute__((aligned(8))) nPhysics::List<nPhysics::RigidBody,2> : MtObject
{
  nPhysics::RigidBody *mTop;
  nPhysics::RigidBody *mBottom;
  s32 mNum;
};

struct __cppobj __attribute__((aligned(8))) nPhysics::List<nPhysics::RigidBody,3> : MtObject
{
  nPhysics::RigidBody *mTop;
  nPhysics::RigidBody *mBottom;
  s32 mNum;
};

struct __cppobj __attribute__((aligned(8))) nPhysics::List<nPhysics::Constraint::Object,3> : MtObject
{
  nPhysics::Constraint::Object *mTop;
  nPhysics::Constraint::Object *mBottom;
  s32 mNum;
};

struct __cppobj __attribute__((aligned(8))) nPhysics::List<nPhysics::RigidBody,0> : MtObject
{
  nPhysics::RigidBody *mTop;
  nPhysics::RigidBody *mBottom;
  s32 mNum;
};

struct __cppobj __attribute__((aligned(8))) nPhysics::List<nPhysics::Constraint::Object,0> : MtObject
{
  nPhysics::Constraint::Object *mTop;
  nPhysics::Constraint::Object *mBottom;
  s32 mNum;
};

struct __cppobj __attribute__((aligned(8))) nPhysics::List<nPhysics::Phantom,0> : MtObject
{
  nPhysics::Phantom *mTop;
  nPhysics::Phantom *mBottom;
  s32 mNum;
};

struct __cppobj __attribute__((aligned(8))) nPhysics::List<nPhysics::Phantom,1> : MtObject
{
  nPhysics::Phantom *mTop;
  nPhysics::Phantom *mBottom;
  s32 mNum;
};

typedef u32 (*nPhysics::GET_MATERIAL_ID)(const sCollision::SbcInfo *);

struct nPhysics::Callback
{
  MtAllocator *Allocator;
  nPhysics::Callback::INFO *Info;
  u32 Num;
  u32 Size;
};

struct nPhysics::System::THREAD_INFO
{
  u32 Index;
  MT_MFUNC32 Function;
  _BYTE gap10[8];
  ScePthread ID;
};

struct nPhysics::LockFreePipe<12>
{
  volatile u32 mReadOffset;
  volatile u32 mWriteOffset;
  __attribute__((aligned(16))) u8 mBuffer[4096];
};

struct nPhysics::Barrier
{
  __int8 gap0[1];
};

struct nPhysics::IoSPU::SYNC_RIGID_BODY
{
  u32 NumRigidBody;
  const u32 *AddressRigidBodyID;
  f32 InterpolationTime;
  const nPhysics::RIGID_BODY_DATA *AddressPreservedRigidBodyData;
  const nPhysics::CURRENT_RIGID_BODY_DATA *AddressCurrentRigidBodyData;
  nPhysics::RIGID_BODY_DATA *OutputInterpolationRigidBodyData;
  nPhysics::RIGID_BODY_STATUS *AddressRigidBodyStatus;
  u8 *AddressIslandWakeupTrigger;
  u32 *AddressIslandIndexOfRigidBody;
  u32 MaxRigidBody;
  u32 *reserve[2];
};

union nPhysics::Math::Vector3::$52CBD44454014F57BC42C6A661E19C73
{
  f32 mF32[4];
  u32 mU32[4];
  s32 mS32[4];
  u16 mU16[8];
  s16 mS16[8];
};

struct nPhysics::Math::Vector3
{
  nPhysics::Math::Vector3::$52CBD44454014F57BC42C6A661E19C73 _anon_0;
};

struct nPhysics::IoSPU::SETUP_RIGID_BODY
{
  const u32 *AddressRigidBodyID;
  u32 StartBatch;
  u32 NumBatch;
  const nPhysics::SHAPES *AddressRigidBodyShapes;
  nPhysics::POWER *AddressRigidBodyPower;
  nPhysics::CURRENT_RIGID_BODY_DATA *AddressCurrentRigidBodyData;
  nPhysics::RIGID_BODY_STATUS *AddressRigidBodyStatus;
  nPhysics::RIGID_BODY_INFORMATION *AddressRigidBodyInformation;
  nPhysics::SHAPES *OutputTransformedRigidBodyShapes;
  nPhysics::AABB *OutputRigidBodyAABB;
  nPhysics::RIGID_BODY_DATA *OutputPreservedRigidBodyData;
  f32 CollisionMargin;
  __attribute__((aligned(16))) nPhysics::Math::Vector3 StepGravity;
};

struct nPhysics::IoSPU::CALCULATE_VARIANCE
{
  nPhysics::Math::Vector3 PowerSum;
  nPhysics::Math::Vector3 Sum;
};

struct nPhysics::IoSPU::QUANTIZE_AABB
{
  nPhysics::AABB *AddressRigidBodyAABB;
  nPhysics::QUANTIZATION_AABB *OutputQuantizationRigidBodyAABB;
  nPhysics::AABB *AddressPhantomAABB;
  nPhysics::QUANTIZATION_AABB *OutputQuantizationPhantomAABB;
  u32 NumRigidBody;
  u32 MaxVariance;
  u32 NumRigidBodyOutsideArea;
  u32 padding1;
  u32 *OutputRigidBodyIDOutsideArea;
  u32 padding2;
  u32 padding3;
  f32 QuantizationOffset[3];
  u32 NumPhantom;
  nPhysics::Math::Vector3 QuantizationScale;
};

struct nPhysics::IoSPU::SORT
{
  nPhysics::SORT_DATA *AddressWorkSortData;
  nPhysics::SORT_DATA *AddressSortData;
  u32 StartBatch;
  u32 NumBatch;
  u32 NumSortData;
  u32 NumUseSPU;
  u32 TaskID;
  u32 reserve;
  nPhysics::MERGE_SORT_INFO *AddressMergeSortInfo;
  u32 NumMergeSortInfo;
  u32 reserve1[2];
  u32 *AddressWorkKey;
  u32 *AddressWorkAddress;
  u32 *AddressWorkShelter1;
  u32 *AddressWorkShelter2;
};

struct nPhysics::IoSPU::DETECT_PHANTOM_PAIR
{
  nPhysics::QUANTIZATION_AABB *AddressRigidBodyAABB;
  u32 NumRigidBodyAABB;
  nPhysics::QUANTIZATION_AABB *AddressPhantomAABB;
  u32 NumPhantomAABB;
  nPhysics::RIGID_BODY_ID *AddressNewPair;
  u32 NumNewPair;
  nPhysics::COLLISION_INFORMATION *AddressRigidBodyCollisionInformation;
  nPhysics::COLLISION_INFORMATION *AddressPhantomCollisionInformation;
  u32 reserve[3];
  u32 MaxVariance;
};

struct __attribute__((aligned(16))) nPhysics::IoSPU::DETECT_PAIR
{
  nPhysics::QUANTIZATION_AABB *AddressRestAABB;
  s32 NumRestAABB;
  nPhysics::QUANTIZATION_AABB *AddressProcessAABB;
  u32 NumProcessAABB;
  nPhysics::SORTED_PAIR *AddressNewPair;
  u32 NumNewPair;
  u32 MaxVariance;
  nPhysics::COLLISION_INFORMATION *AddressCollisionInformation;
};

struct __attribute__((aligned(16))) nPhysics::IoSPU::DETECT_COLLISION_WITH_SCROLL
{
  nPhysics::AABB *AddressRigidBodyAABB;
  nPhysics::SORTED_PAIR *OutputNewPair;
  u32 OutputNumNewPair;
  u32 StartBatch;
  u32 NumBatch;
  const nPhysics::CURRENT_RIGID_BODY_DATA *AddressRigidBodyData;
  u32 MaxRigidBody;
  nPhysics::SHAPES *AddressRigidBodyShapes;
  u32 reserve1[9];
  nPhysics::COLLISION_INFORMATION *AddressCollisionInformation;
  nPhysics::CONTACT_INFO *AddressRigidBodyScrollContactInfo;
  u32 *OutputGroundLayerRigidBodyID;
};

struct __attribute__((aligned(16))) nPhysics::IoSPU::MERGE_PAIR
{
  nPhysics::SORTED_PAIR *AddressOldPair;
  u32 NumOldPair;
  nPhysics::SORTED_PAIR *AddressNewPair;
  u32 NumNewPair;
  nPhysics::SORTED_PAIR *AddressDisableOldPair;
  u32 reserve[3];
  u32 OutputNumEnablePair;
  u32 OutputNumDisablePair;
  u32 OutputNumNewPair;
  u32 OutputStartOldPairIndex;
};

struct nPhysics::CONTACT_UPDATE_PARAMETER
{
  f32 NormalSeparateLimit;
  f32 TangentSeparateLimit;
  f32 DistanceLimit;
  f32 reserve;
};

struct nPhysics::IoSPU::DETECT_COLLISION_PAIR
{
  nPhysics::CONTACT_PAIR *AddressContactPair;
  u32 NumPair;
  nPhysics::SORTED_PAIR *AddressPair;
  const nPhysics::SORTED_PAIR *AddressNewPair;
  const nPhysics::SORTED_PAIR *AddressStockPair;
  u32 NumStockPair;
  const nPhysics::CONTACT_INFO *AddressRigidBodyScrollContactInfo;
  const nPhysics::SHAPES *AddressRigidBodyShapes;
  const nPhysics::RIGID_BODY_DATA *AddressPreservedRigidBodyData;
  u32 MaxRigidBody;
  u32 MaxMaterial;
  u32 OutputDisablePairCount;
  __attribute__((aligned(16))) nPhysics::CONTACT_UPDATE_PARAMETER ContactUpdateParameter;
};

struct nPhysics::IoSPU::SPLIT_CONSTRAINT
{
  nPhysics::RIGID_BODY_DATA *AddressRigidBodyData;
  nPhysics::RIGID_BODY_LINK *AddressRigidBodyLink;
  u8 *AddressNumRigidBodyLink;
  nPhysics::CONTACT_PAIR *AddressContactPair;
  nPhysics::ORDERED_ID *OutputOrderedPairID;
  nPhysics::ORDERED_ID *OutputOrderedConstraintID;
  u32 *OutputNumPairIDPerBlock;
  u32 *OutputNumConstraintIDPerBlock;
  u32 *OutputNumOrderedPairID;
  u32 *OutputNumOrderedConstraintID;
  nPhysics::SORTED_PAIR *AddressPair;
  nPhysics::CONSTRAINT_HEADER *AddressConstraintHeader;
  u32 NumPair;
  u32 NumConstraint;
  u32 NumDisablePair;
  u32 NumBatchOrderedPairID;
  u32 NumBatchOrderedConstraintID;
  u32 NumUseSPU;
  u32 OutputNumPhase;
  u32 OutputNumBlock;
  u32 *OutputNumBlockPerPhase;
  s8 *AddressRigidBodyLayer;
  nPhysics::IoSPU::PROFILER_DATA *AddressProfiler;
  u32 *AddressGroundLayerRigidBodyID;
  u32 NumGroundLayerRigidBody;
  u32 MinimumGranularity;
  u32 MaximumGranularity;
  u32 MaxMaterial;
  u32 MaxRigidBody;
  u32 MaxContactPair;
  u32 MaxConstraint;
  u32 MaxPrefetch;
};

struct __attribute__((aligned(16))) nPhysics::IoSPU::CALCULATE_ISLAND
{
  nPhysics::SORTED_PAIR *AddressPair;
  u32 NumPair;
  nPhysics::CONSTRAINT_HEADER *AddressConstraintHeader;
  u32 NumConstraint;
  u32 MaxRigidBody;
  u32 MaxMaterial;
  u32 NumRigidBody;
  u32 *AddressRigidBodyID;
  u32 *AddressIslandIndexOfRigidBody;
  nPhysics::ISLAND *AddressIsland;
  u32 NumIsland;
  u32 OutputNumIsland;
};

struct nPhysics::SOLVER_CONFIG
{
  f32 InverseWeightAmplifyCoefficient;
  f32 ContactTolerance;
  u32 reserve[2];
  MtHermiteCurve ElasticFrictionCurve;
};

struct __attribute__((aligned(16))) nPhysics::IoSPU::SOLVE_CONSTRAINT
{
  nPhysics::CURRENT_RIGID_BODY_DATA *AddressCurrentRigidBodyData;
  nPhysics::DELTA_VELOCITY *AddressDeltaVelocity;
  const nPhysics::RIGID_BODY_STATUS *AddressRigidBodyStatus;
  const u32 *AddressNumBlockPerPhase;
  nPhysics::CONTACT_PAIR *AddressContactPair;
  nPhysics::CONSTRAINT *AddressConstraint;
  const u32 *AddressRigidBodyID;
  const s8 *AddressRigidBodyLayer;
  const nPhysics::ORDERED_ID *AddressOrderedPairID;
  const nPhysics::ORDERED_ID *AddressOrderedConstraintID;
  const u32 *AddressNumOrderedPairID;
  const u32 *AddressNumOrderedConstraintID;
  const u32 *AddressNumPairIDPerBlock;
  const u32 *AddressNumConstraintIDPerBlock;
  const nPhysics::SORTED_PAIR *AddressPair;
  const nPhysics::CONSTRAINT_HEADER *AddressConstraintHeader;
  u32 NumBatchOrderedPairID;
  u32 NumBatchOrderedConstraintID;
  u32 TaskID;
  u32 NumPhase;
  u32 NumPrefetch;
  u32 NumUseSPU;
  u32 LoopCount;
  u32 MaxMaterial;
  u32 NumBlock;
  f32 StepTime;
  f32 SPS;
  u32 NumPair;
  u32 NumRigidBody;
  u32 MaxRigidBody;
  u32 reserve;
  nPhysics::IoSPU::PROFILER_DATA *AddressProfiler;
  nPhysics::SOLVER_CONFIG SolverConfig;
};

struct nPhysics::UPDATE_RIGID_BODY_CONFIG
{
  f32 LinearExtraDamping;
  f32 LinearExtraDampingRange2;
  f32 AngularExtraDamping;
  f32 AngularExtraDampingRange2;
  f32 LinearSleepRange2;
  f32 AngularSleepRange2;
  f32 WakeupPosition;
  f32 WakeupRotation;
};

struct nPhysics::IoSPU::UPDATE_RIGID_BODY
{
  nPhysics::CURRENT_RIGID_BODY_DATA *AddressRigidBodyData;
  const nPhysics::DELTA_VELOCITY *AddressDeltaVelocity;
  nPhysics::RIGID_BODY_INFORMATION *AddressRigidBodyInformation;
  nPhysics::RIGID_BODY_STATUS *AddressRigidBodyStatus;
  u32 *AddressRigidBodyID;
  s8 *AddressRigidBodyLayer;
  nPhysics::IoSPU::PROFILER_DATA *AddressProfiler;
  u32 StartBatch;
  u32 NumBatch;
  u32 MaxRigidBody;
  u32 *AddressIslandIndexOfRigidBody;
  u32 *AddressIslandStatus;
  __attribute__((aligned(16))) nPhysics::UPDATE_RIGID_BODY_CONFIG Config;
};

typedef bool (*nPhysics::IS_VALID_MATERIAL_ID)(const s32);

struct __cppobj nPhysics::System : cSystem
{
  nPhysics::RigidBody *mRigidBodyInstance;
  nPhysics::CURRENT_RIGID_BODY_DATA *mCurrentRigidBodyData;
  nPhysics::RIGID_BODY_DATA *mPreservedRigidBodyData;
  nPhysics::RIGID_BODY_DATA *mInterpolationRigidBodyData;
  nPhysics::SHAPES *mRigidBodyShapes;
  nPhysics::SHAPES *mTransformedRigidBodyShapes;
  nPhysics::POWER *mRigidBodyPower;
  nPhysics::RIGID_BODY_INFORMATION *mRigidBodyInformation;
  nPhysics::RIGID_BODY_STATUS *mRigidBodyStatus;
  nPhysics::COLLISION_INFORMATION *mCollisionInformation;
  nPhysics::RIGID_BODY_LINK *mRigidBodyLink;
  u8 *mNumRigidBodyLink;
  nPhysics::RIGID_BODY_LINK *mCurrentRigidBodyLink;
  nPhysics::RIGID_BODY_LINK *mNextRigidBodyLink;
  u8 *mNumCurrentRigidBodyLink;
  u8 *mNumNextRigidBodyLink;
  nPhysics::CONSTRAINT_HEADER *mConstraintHeader;
  nPhysics::CONSTRAINT *mConstraint;
  nPhysics::SORTED_PAIR *mSortedContactPair;
  nPhysics::SORTED_PAIR *mTemporaryContactPair;
  nPhysics::SORTED_PAIR *mDisableContactPair;
  u32 *mIslandIndexOfRigidBody;
  u32 mNumIsland;
  __attribute__((aligned(8))) nPhysics::ISLAND mIsland[256];
  nPhysics::ISLAND *mTemporaryIsland;
  u32 *mMergeIslandTable;
  u32 *mIslandIndexTable;
  u32 *mCurrentIslandHash;
  u32 mIslandStatus[3][256];
  nPhysics::StackMemory mStackMemory;
  nPhysics::ID_ARRAY mRigidBodyID;
  nPhysics::ID_ARRAY mConstraintID;
  u32 mNumProcessRigidBody;
  u32 *mProcessRigidBodyID;
  u32 mNumProcessPhantom;
  u32 *mNumBlockPerPhase;
  u32 *mGroundLayerRigidBodyID;
  u32 mNumGroundLayerRigidBody;
  s8 *mRigidBodyLayer;
  nPhysics::CONTACT_PAIR *mContactPair;
  u32 mNumContactPair;
  u32 mMaxRigidBody;
  u32 mMaxContactPair;
  u32 mMaxGeometry;
  u32 mMaxConstraint;
  u32 mMaxMaterial;
  nPhysics::List<nPhysics::RigidBody,1> mRigidBodyEnableList[6];
  nPhysics::List<nPhysics::RigidBody,2> mRigidBodyDisableList[6];
  nPhysics::List<nPhysics::RigidBody,3> mRigidBodyDeleteList[6];
  nPhysics::List<nPhysics::Constraint::Object,3> mConstraintDeleteList[6];
  nPhysics::List<nPhysics::RigidBody,0> mRigidBodyList;
  nPhysics::List<nPhysics::Constraint::Object,0> mConstraintList;
  nPhysics::List<nPhysics::Phantom,0> mPhantomList;
  nPhysics::List<nPhysics::Phantom,0> mPhantomAddList[6];
  nPhysics::List<nPhysics::Phantom,1> mPhantomRemoveList[6];
  f32 mInertiaTensorScale;
  f32 mAmplifyCoefficient;
  f32 mCollisionMargin;
  __attribute__((aligned(8))) MtVector3 mGravity;
  MtVector3 mStepGravity;
  MtVector3 mInverseAmplifyCoefficient;
  MtVector3 mQuantizationOffset;
  MtVector3 mQuantizationScale;
  MtHermiteCurve mElasticFrictionCurve;
  f32 mContactLimit;
  f32 mContactPower;
  f32 mBallJointPower;
  f32 mBallJointDamper;
  f32 mSwingLimitPower;
  f32 mTwistLimitPower;
  f32 mDistancePower;
  f32 mHingePower;
  f32 mAxisPower;
  f32 mMotorPower;
  f32 mSpringPower;
  f32 mGyroPower;
  f32 mMotionPower;
  f32 mNormalSeparateLimit;
  f32 mTangentSeparateLimit;
  f32 mDistanceSeparateLimit;
  f32 mContactTolerance;
  f32 mLimitTorque;
  f32 mOmega;
  f32 mEpsilon;
  u32 mMaxLoop;
  bool mPause;
  bool mRunningThread;
  u32 mSystemTimer;
  f32 mCurrentTime;
  f32 mNextTime;
  f32 mPreviousTime;
  f32 mInterpolationTime;
  f32 mStepTime;
  s32 mStepPerSecond;
  f32 mRealStepPerSecond;
  f32 mLinearExtraDampingRange2;
  f32 mAngularExtraDampingRange2;
  f32 mLinearExtraDamping;
  f32 mAngularExtraDamping;
  f32 mLinearSleepRange2;
  f32 mAngularSleepRange2;
  u32 mSleepStartCount;
  f32 mWakeupPosition;
  f32 mWakeupRotation;
  f32 mWakeupVelocity2;
  f32 mStaticLimit2;
  f32 mIntegrationEpsilon;
  MtArray mMaterialList;
  nPhysics::MATERIAL *mMaterial;
  nPhysics::GET_MATERIAL_ID mFunctionGetMaterialID;
  nPhysics::Callback mStepEnd;
  u32 mNumUseTask;
  u32 mNumUseTaskGame;
  u32 mNumRunTask;
  SceKernelEventFlag mSyncThreadEventFlag;
  nPhysics::System::THREAD_INFO mMainThreadInfo;
  nPhysics::System::THREAD_INFO mJobThreadInfo[3];
  u32 mMaxJobThread;
  s32 mJobIndex[3];
  bool mExitThread;
  nPhysics::LockFreePipe<12> mCommand[6];
  MtCriticalSection mCriticalSectionCreateEntity;
  MtCriticalSection mCriticalSectionCallback;
  bool mUserLock;
  u32 mNumRigidBody;
  u32 mNumConstraint;
  u32 mMaxVariance;
  u32 mNumNewPair;
  u32 mNumDisablePair;
  nPhysics::Barrier mSyncBarrier;
  u32 mNumRigidBodyPerTask[3];
  __attribute__((aligned(16))) nPhysics::IoSPU::SYNC_RIGID_BODY mSyncRigidBody[3];
  nPhysics::IoSPU::SETUP_RIGID_BODY mSetupRigidBody[3];
  nPhysics::IoSPU::CALCULATE_VARIANCE mCalculateVariance[3];
  nPhysics::IoSPU::QUANTIZE_AABB mQuantizeAABB[3];
  nPhysics::IoSPU::SORT mSort[3];
  nPhysics::IoSPU::DETECT_PHANTOM_PAIR mDetectPhantomPair[3];
  nPhysics::IoSPU::DETECT_PAIR mDetectPair[3];
  nPhysics::IoSPU::DETECT_COLLISION_WITH_SCROLL mDetectCollisionWithScroll[3];
  nPhysics::IoSPU::MERGE_PAIR mMergePair[3];
  nPhysics::IoSPU::DETECT_COLLISION_PAIR mDetectCollisionPair[3];
  nPhysics::IoSPU::SPLIT_CONSTRAINT mSplitConstraint;
  nPhysics::IoSPU::CALCULATE_ISLAND mCalculateIsland;
  nPhysics::IoSPU::SOLVE_CONSTRAINT mSolveConstraint[3];
  nPhysics::IoSPU::UPDATE_RIGID_BODY mUpdateRigidBody[3];
  rSoundPhysicsList *mGroundSoundResource;
  csSoundPhysicsRigidBody *mGroundSound;
  nPhysics::IS_VALID_MATERIAL_ID mCheckMaterialIDFunction;
};

struct __cppobj nPhysics::Base : MtObject
{
};

typedef void (*nPhysics::Event::COLLIDE_FUNCTION)(MtObject *, const nPhysics::Event::Collide *);

typedef void (*nPhysics::Event::CONTACT_FUNCTION)(MtObject *, const nPhysics::Event::Contact *);

typedef void (*nPhysics::Event::SEPARATE_FUNCTION)(MtObject *, const nPhysics::Event::Separate *);

typedef void (*nPhysics::Event::STATUS_FUNCTION)(MtObject *);

struct nPhysics::ListComponent<nPhysics::RigidBody,4>
{
  int (**_vptr$ListComponent)(void);
  nPhysics::RigidBody *mNext[4];
  nPhysics::RigidBody *mPrevious[4];
};

struct __cppobj nPhysics::RigidBody : nPhysics::Base
{
  u32 mID;
  nPhysics::CURRENT_RIGID_BODY_DATA *mCurrentData;
  nPhysics::RIGID_BODY_DATA *mPreviousData;
  nPhysics::RIGID_BODY_DATA *mNextData;
  nPhysics::RIGID_BODY_DATA *mInterpolationData;
  nPhysics::SHAPES *mShapes;
  nPhysics::SHAPES *mTransformedShapes;
  nPhysics::POWER *mPower;
  nPhysics::RIGID_BODY_INFORMATION *mInformation;
  nPhysics::RIGID_BODY_STATUS *mStatus;
  nPhysics::COLLISION_INFORMATION *mCollisionInformation;
  nPhysics::Listener::Status *mStatusListener2;
  nPhysics::Listener::Collision *mCollisionListener2;
  MtObject *mCollisionListener;
  nPhysics::Event::COLLIDE_FUNCTION mCollideFunction;
  _BYTE gap80[8];
  nPhysics::Event::CONTACT_FUNCTION mContactFunction;
  _BYTE gap90[8];
  nPhysics::Event::SEPARATE_FUNCTION mSeparateFunction;
  _BYTE gapA0[8];
  MtObject *mStatusListener;
  nPhysics::Event::STATUS_FUNCTION mSleepFunction;
  __attribute__((aligned(16))) nPhysics::Event::STATUS_FUNCTION mWakeupFunction;
  __attribute__((aligned(16))) uintptr mUserData;
  MtFloat3x3 mInertiaTensor;
  f32 mOriginalMass;
  f32 mMass;
  nPhysics::ListComponent<nPhysics::RigidBody,4> mListComponent;
};

struct nPhysics::Math::Quaternion
{
  f32 X;
  f32 Y;
  f32 Z;
  f32 W;
};

struct nPhysics::RIGID_BODY_DATA
{
  nPhysics::Math::Vector3 Position;
  nPhysics::Math::Quaternion Rotation;
  nPhysics::Math::Vector3 LinearVelocity;
  nPhysics::Math::Vector3 AngularVelocity;
};

struct nPhysics::Math::Matrix3
{
  nPhysics::Math::Vector3 mInstance[3];
};

union nPhysics::Math::Vector4::$52CBD44454014F57BC42C6A661E19C73
{
  f32 mF32[4];
  u32 mU32[4];
  s32 mS32[4];
  u16 mU16[8];
  s16 mS16[8];
};

struct nPhysics::Math::Vector4
{
  nPhysics::Math::Vector4::$52CBD44454014F57BC42C6A661E19C73 _anon_0;
};

struct __cppobj nPhysics::CURRENT_RIGID_BODY_DATA : nPhysics::RIGID_BODY_DATA
{
  nPhysics::Math::Matrix3 InverseInertiaTensor;
  nPhysics::Math::Vector4 Parameter;
};

struct __attribute__((aligned(16))) nPhysics::AABB
{
  nPhysics::Math::Vector3 Maximum;
  nPhysics::Math::Vector3 Minimum;
  uintptr mpAddress;
};

struct nPhysics::SHAPE
{
  u32 Type;
  s32 MaterialNo;
  u32 Attribute;
  u32 reserve[1];
  nPhysics::Math::Vector4 Parameter[4];
};

struct nPhysics::SHAPES
{
  u32 NumShape;
  u32 Status;
  u32 ScrollType;
  u32 ScrollFilter;
  nPhysics::AABB CircumscribedAABB;
  nPhysics::Math::Vector3 Velocity;
  nPhysics::SHAPE Shape[4];
};

struct nPhysics::POWER
{
  nPhysics::Math::Vector4 Force[4];
  nPhysics::Math::Vector4 Torque[4];
};

struct nPhysics::RIGID_BODY_INFORMATION
{
  nPhysics::Math::Matrix3 InverseInertiaTensor;
  nPhysics::Math::Vector4 Parameter;
  nPhysics::Math::Vector4 VelocityParameter;
  MtFloat3A SleepPosition;
  u32 AggressiveSleepCount;
  MtFloat4A SleepRotation;
};

struct nPhysics::RIGID_BODY_STATUS
{
  u32 Status;
  u32 CurrentStatus;
  u32 AddState;
  u32 RemoveState;
};

struct nPhysics::COLLISION_INFORMATION
{
  u32 Group;
  u32 ID;
  u32 PrimaryFilter;
  u32 SecondaryFilter;
  u32 reserve;
  u32 Bit;
  u32 PrimaryAttribute;
  u32 SecondaryAttribute;
};

struct nPhysics::RIGID_BODY_LINK
{
  u32 ID[16];
  u16 RigidBodyID[16];
};

struct nPhysics::CONSTRAINT_HEADER
{
  u32 RigidBodyID1;
  u32 RigidBodyID2;
  unsigned __int32 NumConstraint : 4;
  unsigned __int32 Type : 4;
  unsigned __int32 FunctionID : 8;
  unsigned __int32 Status : 16;
  u32 ID;
};

struct nPhysics::CONSTRAINT_CACHE2
{
  nPhysics::Math::Vector3 Axis;
  f32 InitialValue;
  f32 InverseConstant;
  f32 Minimum;
  f32 Maximum;
};

struct nPhysics::CONSTRAINT
{
  nPhysics::CONSTRAINT_HEADER Header;
  nPhysics::CONSTRAINT_CACHE2 ConstraintCache[4];
  nPhysics::Math::Matrix3 InverseInertiaTensor1;
  nPhysics::Math::Matrix3 InverseInertiaTensor2;
  nPhysics::Math::Vector4 Parameter[8];
  f32 SpringPower;
  f32 DampingPower;
  u32 Attribute;
  f32 reserve[1];
};

union nPhysics::SORT_DATA::$8B9F0BF747664F9E9C756FE5EE9AD07B
{
  f32 mF32[8];
  u32 mU32[8];
  s32 mS32[8];
  u16 mU16[16];
  s16 mS16[16];
};

struct nPhysics::SORT_DATA
{
  nPhysics::SORT_DATA::$8B9F0BF747664F9E9C756FE5EE9AD07B _anon_0;
};

struct __cppobj nPhysics::SORTED_PAIR : nPhysics::SORT_DATA
{
};

struct nPhysics::StackMemory::MEMORY_BLOCK
{
  u32 UsedSize;
  void *StartAddress;
  u32 ResultSize;
  void *ResultAddress;
};

struct nPhysics::CONTACT_PAIR_HEADER::$C4500AF58A2FF5109116B29DCE3398E8::$F7E25B8C79457FAC9F6AA969A3772A44
{
  unsigned __int32 ContactKeepCount : 24;
  unsigned __int32 FunctionID : 4;
  unsigned __int32 NumContact : 4;
};

union nPhysics::CONTACT_PAIR_HEADER::$C4500AF58A2FF5109116B29DCE3398E8
{
  u32 ClearValue;
  nPhysics::CONTACT_PAIR_HEADER::$C4500AF58A2FF5109116B29DCE3398E8::$F7E25B8C79457FAC9F6AA969A3772A44 _anon_0;
};

struct nPhysics::CONTACT_PAIR_HEADER
{
  u32 RigidBodyID1;
  u32 RigidBodyID2;
  nPhysics::CONTACT_PAIR_HEADER::$C4500AF58A2FF5109116B29DCE3398E8 _anon_0;
  __int32 MaterialNo1 : 16;
  __int32 MaterialNo2 : 16;
};

struct nPhysics::CONSTRAINT_CACHE
{
  nPhysics::Math::Vector3 Axis;
  nPhysics::Math::Vector3 CrossAxisMass[2];
};

struct nPhysics::CONTACT
{
  nPhysics::CONSTRAINT_CACHE ConstraintCache[3];
};

struct nPhysics::CONTACT_PAIR
{
  nPhysics::CONTACT_PAIR_HEADER Header;
  nPhysics::Math::Vector4 CombinedFriction;
  f32 PenetrationDepth[4];
  nPhysics::Math::Vector4 Parameter;
  nPhysics::Math::Vector3 WorldRelativePosition1[4];
  nPhysics::Math::Vector3 WorldRelativePosition2[4];
  nPhysics::CONTACT Contact[4];
  nPhysics::Math::Vector3 LocalPosition1[4];
  nPhysics::Math::Vector3 LocalPosition2[4];
};

enum nPhysics::CONSTRAINT::TYPE : __int32
{
  TYPE_BALL_JOINT = 0x0,
  TYPE_AXIS = 0x1,
  TYPE_CONE_TWIST = 0x2,
  TYPE_HINGE = 0x3,
  TYPE_UNIVERSAL = 0x4,
  TYPE_MUSCLE = 0x5,
  TYPE_MOTOR = 0x6,
  TYPE_ERROR = 0x7,
  TYPE_MAX_0 = 0x8,
};

struct nPhysics::ListComponent<nPhysics::Constraint::Object,4>
{
  int (**_vptr$ListComponent)(void);
  nPhysics::Constraint::Object *mNext[4];
  nPhysics::Constraint::Object *mPrevious[4];
};

struct __cppobj nPhysics::Constraint::Object : nPhysics::Base
{
  nPhysics::CONSTRAINT::TYPE mType;
  nPhysics::RigidBody *mRigidBody[2];
  nPhysics::ListComponent<nPhysics::Constraint::Object,4> mListComponent;
};

typedef void (*nPhysics::Phantom::EVENT_CALLBACK)(MtObject *);

typedef void (*nPhysics::Phantom::COLLIDE_CALLBACK)(MtObject *, nPhysics::RigidBody *, const nPhysics::CONTACT_INFO *);

struct nPhysics::ListComponent<nPhysics::Phantom,2>
{
  int (**_vptr$ListComponent)(void);
  nPhysics::Phantom *mNext[2];
  nPhysics::Phantom *mPrevious[2];
};

struct nPhysics::Phantom
{
  nPhysics::COLLISION_INFORMATION mCollisionInformation;
  nPhysics::SHAPE mShape;
  nPhysics::SHAPE mUpdateShape;
  MtObject *mSelfObject;
  nPhysics::Phantom::EVENT_CALLBACK mBeginCallbackFunction;
  _BYTE gapD0[8];
  nPhysics::Phantom::COLLIDE_CALLBACK mCollideCallbackFunction;
  _BYTE gapE0[8];
  nPhysics::Phantom::EVENT_CALLBACK mEndCallbackFunction;
  _BYTE gapF0[8];
  u32 mKeepAliveTime;
  u32 mStatus;
  bool mUpdate;
  bool mEnable;
  nPhysics::ListComponent<nPhysics::Phantom,2> mListComponent;
};

struct __cppobj nPhysics::MATERIAL : MtObject
{
  f32 StaticFriction;
  f32 KineticFriction;
  f32 Restitution;
  __attribute__((aligned(16))) MtVector3 Direction;
};

struct __attribute__((aligned(8))) nPhysics::Callback::INFO
{
  MtObject *Object;
  MT_MFUNC Function;
  _BYTE gap10[8];
};

struct __cppobj nPhysics::QUANTIZATION_AABB : nPhysics::SORT_DATA
{
};

struct nPhysics::MERGE_SORT_INFO
{
  nPhysics::SORT_DATA *AddressWorkSortData;
  nPhysics::SORT_DATA *AddressSortData;
  u32 StartBatch1;
  u32 StartBatch2;
  u32 NumBatch1;
  u32 NumBatch2;
  u32 TaskID1;
  u32 TaskID2;
};

struct nPhysics::RIGID_BODY_ID
{
  u16 RigidBodyID1;
  u16 RigidBodyID2;
};

enum nPhysics::CUBE_MAP_ID : __int32
{
  CUBE_MAP_ID_INVALID = 0x0,
  CUBE_MAP_ID_LEFT = 0x1,
  CUBE_MAP_ID_RIGHT = 0x2,
  CUBE_MAP_ID_TOP = 0x3,
  CUBE_MAP_ID_BOTTOM = 0x4,
  CUBE_MAP_ID_FRONT = 0x5,
  CUBE_MAP_ID_BACK = 0x6,
  CUBE_MAP_ID_MAX = 0x7,
};

struct nPhysics::CONTACT_INFO
{
  MtFloat3A Position1;
  f32 Distance;
  MtFloat3A Position2;
  unsigned __int32 MaterialNo1 : 16;
  unsigned __int32 MaterialNo2 : 16;
  MtFloat3A Normal;
  nPhysics::CUBE_MAP_ID CubeMapID;
};

struct nPhysics::ORDERED_ID
{
  u32 ID;
  u16 RigidBodyID1;
  u16 RigidBodyID2;
};

struct nPhysics::IoSPU::PROFILER_DATA
{
  MT_CHAR Name[64];
  u32 TempCount;
  u32 TotalCount;
  u32 Average;
  u32 Reference;
  u32 MaximumCount;
  u32 MinimumCount;
  u32 ParentIndex;
  u32 Index;
};

struct nPhysics::DELTA_VELOCITY
{
  nPhysics::Math::Vector3 Linear;
  nPhysics::Math::Vector3 Angular;
};

struct rSoundPhysicsList::HEADER
{
  u32 Magic;
  u32 Version;
  u32 NumMaterial;
  u32 Reserve;
};

struct __cppobj __attribute__((aligned(8))) rSoundPhysicsList : cResource
{
  rSoundPhysicsList::HEADER mHeader;
  rSoundPhysicsRigidBody *mSoundResource[65];
  s32 mIndexTable[65];
};

struct cSoundPhysicsRigidBody
{
  int (**_vptr$cSoundPhysicsRigidBody)(void);
  rSoundPhysicsRigidBody *mpRes;
  void *mRequestCallbackFunction;
  void *mRequestCallbackArgument;
};

struct __cppobj csSoundPhysicsRigidBody : cSoundPhysicsRigidBody
{
};

struct nPhysics::Listener::Status
{
  int (**_vptr$Status)(void);
};

struct nPhysics::Listener::Collision
{
  int (**_vptr$Collision)(void);
};

struct nPhysics::Event::Collide
{
  nPhysics::SORTED_PAIR *mPair;
  const nPhysics::CONTACT_PAIR *mContactPair;
  nPhysics::RigidBody *mRigidBody1;
  nPhysics::RigidBody *mRigidBody2;
  const MtVector3 mPosition1;
  const MtVector3 mPosition2;
  const MtQuaternion mRotation1;
  const MtQuaternion mRotation2;
  const MtVector3 mLinearVelocity1;
  const MtVector3 mLinearVelocity2;
  const MtVector3 mAngularVelocity1;
  const MtVector3 mAngularVelocity2;
};

struct __cppobj nPhysics::Event::Contact : nPhysics::Event::Collide
{
};

struct nPhysics::Event::Separate
{
  nPhysics::RigidBody *mRigidBody1;
  nPhysics::RigidBody *mRigidBody2;
};

struct __cppobj MtTypedArray<rSoundPhysicsRigidBody::cSoundFirstRequestData> : MtArray
{
};

struct __cppobj MtTypedArray<rSoundPhysicsRigidBody::cSoundFinishRequestData> : MtArray
{
};

struct __cppobj MtTypedArray<rSoundPhysicsRigidBody::cSoundSlideRequestData> : MtArray
{
};

struct __cppobj MtTypedArray<rSoundPhysicsRigidBody::cSoundRollRequestData> : MtArray
{
};

struct __cppobj MtTypedArray<rSoundPhysicsRigidBody::cSoundPhysicsRequestData> : MtArray
{
};

struct __cppobj __attribute__((aligned(4))) rSoundPhysicsRigidBody : cResource
{
  MtTypedArray<rSoundPhysicsRigidBody::cSoundFirstRequestData> mSoundFirstDataArray;
  MtTypedArray<rSoundPhysicsRigidBody::cSoundFinishRequestData> mSoundFinishDataArray;
  MtTypedArray<rSoundPhysicsRigidBody::cSoundSlideRequestData> mSoundSlideDataArray;
  MtTypedArray<rSoundPhysicsRigidBody::cSoundRollRequestData> mSoundRollDataArray;
  MtTypedArray<rSoundPhysicsRigidBody::cSoundPhysicsRequestData> mSoundPhysicsDataArray;
  s32 mIndexTable[5][65];
  bool mIsUsingMaterialNo[5];
  bool mEnableRequestDuringContact[5];
  s8 mMaterialNoConvTbl[64];
};

struct __attribute__((aligned(8))) sSound::EffectResourceWork
{
  int (**_vptr$EffectResourceWork)(void);
  u32 mId;
  sSound::EffectResourceWork::FADE_STATUS mFadeStatus;
  f32 mFadeTime;
  f32 mFadeElapsedTime;
  u32 mResourceIndex;
};

struct __cppobj sDDOMain_0::MyDTI : MtDTI
{
};

enum sRender::RENDERMODE_FLAGS : __int32
{
  RM_D2 = 0x1,
  RM_D4 = 0x2,
  RM_D5 = 0x4,
  RM_VSYNC = 0x8,
  RM_ENTRY_SERIAL = 0x80,
  RM_ENTRY_NEXTFRAME = 0x100,
  RM_SRGB_DISABLE = 0x200,
  RM_HDPLUS = 0x400,
};

enum sce::Vectormath::Simd::RotationOrder : __int32
{
  kXYZ = 0x0,
  kYZX = 0x1,
  kZXY = 0x2,
  kXZY = 0x3,
  kYXZ = 0x4,
  kZYX = 0x5,
};

struct vec_float4
{
  float body[4];
};

struct sce::Vectormath::Simd::Aos::Vector4
{
  vec_float4 mVec128;
};

typedef const sce::Vectormath::Simd::Aos::Vector2 sce::Vectormath::Simd::Aos::Vector2_arg;

struct vec_float2
{
  float body[2];
};

struct sce::Vectormath::Simd::Aos::Vector2
{
  vec_float2 mVec64;
};

typedef const sce::Vectormath::Simd::Aos::Vector3 sce::Vectormath::Simd::Aos::Vector3_arg;

struct sce::Vectormath::Simd::Aos::Vector3
{
  vec_float4 mVec128;
};

typedef const sce::Vectormath::Simd::Aos::Point3 sce::Vectormath::Simd::Aos::Point3_arg;

struct sce::Vectormath::Simd::Aos::Point3
{
  vec_float4 mVec128;
};

struct sce::Vectormath::Simd::Aos::VecIdx
{
  vec_float4 *ref;
  int i;
  char padding[4];
};

typedef const sce::Vectormath::Simd::Aos::Quat sce::Vectormath::Simd::Aos::Quat_arg;

struct sce::Vectormath::Simd::Aos::Quat
{
  vec_float4 mVec128;
};

typedef const sce::Vectormath::Simd::Aos::Vector4 sce::Vectormath::Simd::Aos::Vector4_arg;

typedef const sce::Vectormath::Simd::Aos::Matrix3 *sce::Vectormath::Simd::Aos::Matrix3_arg;

struct sce::Vectormath::Simd::Aos::Matrix3
{
  sce::Vectormath::Simd::Aos::Vector3 mCol0;
  sce::Vectormath::Simd::Aos::Vector3 mCol1;
  sce::Vectormath::Simd::Aos::Vector3 mCol2;
};

typedef const sce::Vectormath::Simd::floatInVec sce::Vectormath::Simd::floatInVec_arg;

struct sce::Vectormath::Simd::floatInVec
{
  vec_float4 mData;
};

typedef const sce::Vectormath::Simd::boolInVec sce::Vectormath::Simd::boolInVec_arg;

struct vec_uint4
{
  uint32_t body[4];
};

struct sce::Vectormath::Simd::boolInVec
{
  vec_uint4 mData;
};

struct __cppobj sToolExt::MyDTI : MtDTI
{
};

struct __cppobj cPrim::MyDTI : MtDTI
{
};

struct cPrim::UVOffset
{
  MtFloat2 offset[4];
  u32 offset_num;
};

struct __attribute__((aligned(8))) cPrim::PrimCamera
{
  MtVector3 pos;
  MtVector3 up;
  MtVector3 target;
  f32 near_v;
  f32 far_v;
  f32 fov;
};

struct __cppobj cPrimObj::MyDTI : MtDTI
{
};

struct __cppobj cPrimTagList::MyDTI : MtDTI
{
};

struct nPrim::TexCoord
{
  f32 u;
  f32 v;
};

struct nPrim::Vertex
{
  MtFloat3 pos;
  MtColor col;
  f32 scale;
  unsigned __int32 hdr_intensity : 16;
  unsigned __int32 binormal : 8;
  unsigned __int32 reserved : 8;
  nPrim::TexCoord tex_coord;
  MtVector3 normal;
  MtVector3 tangent;
};

struct nPrim::Rect::$8E64B9E672468EE28F5B674F9130C8AD::$C11471989851DD7A62B67C25D5A4336F
{
  unsigned __int32 x : 16;
  unsigned __int32 y : 16;
  unsigned __int32 w : 16;
  unsigned __int32 h : 16;
};

union nPrim::Rect::$8E64B9E672468EE28F5B674F9130C8AD
{
  nPrim::Rect::$8E64B9E672468EE28F5B674F9130C8AD::$C11471989851DD7A62B67C25D5A4336F _anon_0;
  u64 data;
};

struct nPrim::Rect
{
  nPrim::Rect::$8E64B9E672468EE28F5B674F9130C8AD _anon_0;
};

struct nPrim::FRect::$77B11B9F64D3D24ED0ACDA1C63BF3119
{
  f32 fx;
  f32 fy;
  f32 fw;
  f32 fh;
};

struct nPrim::FRect
{
  nPrim::FRect::$77B11B9F64D3D24ED0ACDA1C63BF3119 _anon_0;
};

struct nPrim::VertexFormat::$64F17342648F1F84732D89889730F943::$C366D4AD378F060E214BEC173EF050BD
{
  unsigned __int32 spr_scale : 16;
  unsigned __int32 spr_rot : 16;
  unsigned __int32 spr_w : 8;
  unsigned __int32 spr_h : 8;
  unsigned __int32 spr_aspect_ratio : 8;
  unsigned __int32 spr_volume : 8;
};

struct nPrim::VertexFormat::$64F17342648F1F84732D89889730F943::$2153B0669F191ADCF123EBC60CA75754
{
  unsigned __int32 nt_spr_rot : 16;
  unsigned __int32 nt_spr_w : 16;
  unsigned __int32 nt_spr_h : 16;
  unsigned __int32 nt_spr_volume : 16;
};

struct nPrim::VertexFormat::$64F17342648F1F84732D89889730F943::$0972FC4E712B701E843E5CB5DD167C09
{
  unsigned __int32 polyline_w : 16;
  unsigned __int32 polyline_reserved : 16;
  unsigned __int32 polyline_tangent_x : 8;
  unsigned __int32 polyline_tangent_y : 8;
  unsigned __int32 polyline_tangent_z : 8;
  unsigned __int32 polyline_volume : 8;
};

struct nPrim::VertexFormat::$64F17342648F1F84732D89889730F943::$21795708EDA18C013895B2BA6543B1A3
{
  unsigned __int32 poly_normal_x : 8;
  unsigned __int32 poly_normal_y : 8;
  unsigned __int32 poly_normal_z : 8;
  unsigned __int32 poly_binormal : 8;
  unsigned __int32 poly_tangent_x : 8;
  unsigned __int32 poly_tangent_y : 8;
  unsigned __int32 poly_tangent_z : 8;
  unsigned __int32 poly_volume : 8;
};

union nPrim::VertexFormat::$64F17342648F1F84732D89889730F943
{
  nPrim::VertexFormat::$64F17342648F1F84732D89889730F943::$C366D4AD378F060E214BEC173EF050BD _anon_0;
  nPrim::VertexFormat::$64F17342648F1F84732D89889730F943::$2153B0669F191ADCF123EBC60CA75754 _anon_1;
  nPrim::VertexFormat::$64F17342648F1F84732D89889730F943::$0972FC4E712B701E843E5CB5DD167C09 _anon_2;
  nPrim::VertexFormat::$64F17342648F1F84732D89889730F943::$21795708EDA18C013895B2BA6543B1A3 _anon_3;
};

struct nPrim::VertexFormat
{
  MtFloat3 pos;
  u32 color;
  __int32 u : 16;
  __int32 v : 16;
  unsigned __int32 zofs : 16;
  unsigned __int32 intensity : 16;
  nPrim::VertexFormat::$64F17342648F1F84732D89889730F943 _anon_0;
};

struct __cppobj cPrimBuffer::MyDTI : MtDTI
{
};

struct __cppobj rModel::MyDTI : MtDTI
{
};

struct __cppobj rMaterial::MyDTI : MtDTI
{
};

struct __cppobj cPrimTexHandle::MyDTI : MtDTI
{
};

struct __cppobj rSceneTexture::MyDTI : MtDTI
{
};

struct __cppobj sEffect::MyDTI : MtDTI
{
};

struct __cppobj cWind::MyDTI : MtDTI
{
};

struct __cppobj rShader2::MyDTI : MtDTI
{
};

struct __cppobj sSound::MyDTI : MtDTI
{
};

enum sSound::EFFECT_TYPE : __int32
{
  FX_NONE = 0xFFFFFFFF,
  FX_REVERB = 0x0,
  FX_EQ = 0x1,
  FX_DELAY = 0x2,
  FX_MAX = 0x3,
};

typedef sSound::SOUNDDRIVER_INIT_PARAM sSound::SOUNDDRIVER_INIT_PARAM_0;

enum sSound::REVERB_MODE : __int32
{
  REVERB_MODE_MONO = 0x0,
  REVERB_MODE_STEREO = 0x1,
};

struct __attribute__((aligned(4))) sSound::SOUNDDRIVER_INIT_PARAM
{
  sSound::REVERB_MODE mReverbMode;
  u32 mChannelsProcess;
  bool mBgmPortEnable;
  u32 mPadSpeakerPortNum;
  bool mRestrictedPortEnable;
};

struct __cppobj sSound::AudioOutThread : MtThread
{
};

struct sSound::AudioOutPort
{
  int (**_vptr$AudioOutPort)(void);
  s32 mPortHandle;
  f32 *mpBuffer;
  u32 mChannelNum;
  u32 mAudioOutPortType;
};

struct sSound::AudioOut
{
  int (**_vptr$AudioOut)(void);
  sSound::AudioOutThread mAudioOutThread;
  u32 mBufferIndex;
  bool mBgmPortEnable;
  u32 mPadSpeakerPortNum;
  bool mRestrictedPortEnable;
  sSound::AudioOutPort mAudioOutPortMain;
  sSound::AudioOutPort mAudioOutPortBgm;
  sSound::AudioOutPort mAudioOutPortPadSpeaker[4];
  sSound::AudioOutPort mAudioOutPortRestricted;
  MtCriticalSection mAudioOutProcessSection;
};

typedef uintptr_t SceNgs2Handle;

struct __attribute__((aligned(8))) sSound::NGS2Rack
{
  int (**_vptr$NGS2Rack)(void);
  SceNgs2Handle mRackHandle;
  u32 mRackId;
};

struct __cppobj sSound::NGS2RackSampler : sSound::NGS2Rack
{
};

enum sSound::NGS2System::ROUTING : __int32
{
  ROUTING_NO_EFFECT = 0x0,
  ROUTING_REVERB_EQ = 0x1,
};

struct sSound::NGS2System
{
  int (**_vptr$NGS2System)(void);
  sSound::AudioOut mAudioOut;
  SceNgs2Handle mSystemHandle;
  sSound::NGS2Routing *mpNGS2RoutingMain;
  sSound::NGS2Routing *mpNGS2RoutingBgm;
  sSound::NGS2Routing *mpNGS2RoutingPadSpeaker[4];
  sSound::NGS2Routing *mpNGS2RoutingRestricted;
  sSound::NGS2RackSampler mRackSamplerSe;
  sSound::NGS2RackSampler mRackSamplerStream;
  sSound::NGS2RackSampler mRackSamplerExternal;
  sSound::NGS2System::ROUTING mRoutingIndex;
  MtCriticalSection mRoutingSection;
};

struct __cppobj sSound::NativeSystemPS4::PS4Property : MtObject
{
};

struct __cppobj sSound::NativeSystemPS4 : sSound::NativeSystem
{
  sSound::NGS2System mNGS2System;
  u32 mSystemChannelNum;
  bool mEnableSilentDetection;
  f32 mSilentDetectThreshold;
  sSound::NGS2System::ROUTING mRoutingIndex;
  sSound::NativeSystemPS4::PS4Property mPS4Property;
};

struct sSound::NGS2Voice
{
  int (**_vptr$NGS2Voice)(void);
  SceNgs2Handle mVoiceHandle;
};

struct __cppobj sSound::NGS2VoiceMastering : sSound::NGS2Voice
{
};

struct __cppobj sSound::NGS2RackMastering : sSound::NGS2Rack
{
};

struct sSound::NGS2Routing
{
  int (**_vptr$NGS2Routing)(void);
  sSound::NGS2VoiceMastering mVoiceMastering;
  sSound::NGS2RackMastering mRackMastering;
  MtCriticalSection mRefCountSection;
};

struct __cppobj sSound::NativeSystemPS4::PS4Property::MyDTI : MtDTI
{
};

enum sSound::DISTANCE_CURVE_TYPE : __int32
{
  DISTANCE_CURVE_TYPE_VOLUME = 0x0,
  DISTANCE_CURVE_TYPE_REVERB = 0x1,
  DISTANCE_CURVE_TYPE_LFE = 0x2,
};

enum sSound::ENC_SOUND_KIND : __int32
{
  ENC_SOUND_KIND_ALL = 0x0,
  ENC_SOUND_KIND_SE = 0x1,
  ENC_SOUND_KIND_STREAM = 0x2,
};

enum sSound::STOP_TYPE : __int32
{
  STOP_TYPE_NORMAL = 0x0,
  STOP_TYPE_KEYOFF = 0x1,
  STOP_TYPE_KEYOFF_WITH_RELEASETIME = 0x2,
};

struct __attribute__((aligned(2))) sSound::EntryControlParam
{
  u8 mPriority;
  bool mPriorityIsLink;
  u8 mPrioMode;
  bool mPrioModeIsLink;
  s16 mID_1;
  s16 mID_2;
  s16 mID_3;
  u16 mBookingTimer;
  u8 mGlobalID;
  u8 mLimit;
  bool mExtractParamIsLink;
};

struct __cppobj __attribute__((aligned(2))) sSound::SeEntryControlParam : sSound::EntryControlParam
{
  s16 mProgramNo;
  bool mProgramNoIsLink;
};

struct __attribute__((aligned(8))) sSound::SeExtractParam
{
  sSound::SeEntry *pEntry;
  rSoundRequest *pRequest;
  rSoundRequest::Element *pRequestElement;
  s32 entryReqNo;
  u8 priority;
  u8 prioMode;
  s16 id1;
  s16 id2;
  s16 id3;
  u16 bookingTimer;
  u8 globalID;
  u8 limit;
  s16 parogramNo;
};

struct __cppobj sSound::StreamEntryControlParam : sSound::EntryControlParam
{
};

struct __cppobj rSoundBank::MyDTI : MtDTI
{
};

struct __cppobj rSoundDirectionalSet::MyDTI : MtDTI
{
};

struct __cppobj sCapture::MyDTI : MtDTI
{
};

enum sCapture::FORMAT : __int32
{
  FMT_AVI = 0x0,
  FMT_BMP = 0x1,
  FMT_TGA = 0x2,
  FMT_WMV = 0x3,
  FMT_JPG = 0x4,
};

enum sCapture::SCALE : __int32
{
  SCALE_DEFAULT = 0x0,
  SCALE_REDUCTION2 = 0x1,
  SCALE_REDUCTION4 = 0x2,
  SCALE_EXPANSION2 = 0x3,
  SCALE_EXPANSION4 = 0x4,
  SCALE_EXPANSION8 = 0x5,
  SCALE_EXPANSION16 = 0x6,
};

enum sCapture::ANTIALIASING : __int32
{
  ANTIALIASING_NONE = 0x1,
  ANTIALIASING_4X = 0x4,
  ANTIALIASING_9X = 0x9,
  ANTIALIASING_16X = 0x10,
  ANTIALIASING_36X = 0x24,
  ANTIALIASING_64X = 0x40,
};

enum sCapture::MOTIONBLUR : __int32
{
  MOTIONBLUR_NONE = 0x1,
  MOTIONBLUR_8X = 0x8,
  MOTIONBLUR_16X = 0x10,
  MOTIONBLUR_32X = 0x20,
  MOTIONBLUR_64X = 0x40,
};

enum sCapture::TARGET : __int32
{
  TARGET_DESKTOP1 = 0x0,
  TARGET_DESKTOP2 = 0x1,
  TARGET_DESKTOP3 = 0x2,
  TARGET_DESKTOP4 = 0x3,
  TARGET_DEFAULT = 0x4,
};

enum sCapture::CODEC : __int32
{
  CODEC_RGB24 = 0x0,
  CODEC_IYUV = 0x1,
  CODEC_WMV9 = 0x2,
  CODEC_VC1 = 0x3,
};

struct __cppobj sGpuParticle::MyDTI : MtDTI
{
};

struct sGpuParticle::Particle::$FB42A98E57440A6D1F57DCCF3BAAEDF9::$7B5BD59AABEDFD07A912A8604099C011
{
  unsigned __int32 scale : 16;
  unsigned __int32 index : 16;
  unsigned __int32 hdr_intensity : 16;
  unsigned __int32 rotation : 16;
  s16 texcoord_scale[2];
  u32 reserved;
};

struct sGpuParticle::Particle::$FB42A98E57440A6D1F57DCCF3BAAEDF9::$E6FE0FAF4E5887F57BE643C8B0058079
{
  f32 line_vec[3];
  unsigned __int32 line_scl : 16;
  unsigned __int32 line_int : 16;
};

struct sGpuParticle::Particle::$FB42A98E57440A6D1F57DCCF3BAAEDF9::$C71BC1D110D895C7154C07FBB35F2517
{
  unsigned __int32 pl_intensity : 16;
  unsigned __int32 pl_width : 16;
  s16 pl_texcoord[2];
  unsigned __int32 pl_tangent_x : 8;
  unsigned __int32 pl_tangent_y : 8;
  unsigned __int32 pl_tangent_z : 8;
  unsigned __int32 pl_reserved : 8;
  f32 pl_scale;
};

union sGpuParticle::Particle::$FB42A98E57440A6D1F57DCCF3BAAEDF9
{
  sGpuParticle::Particle::$FB42A98E57440A6D1F57DCCF3BAAEDF9::$7B5BD59AABEDFD07A912A8604099C011 _anon_0;
  sGpuParticle::Particle::$FB42A98E57440A6D1F57DCCF3BAAEDF9::$E6FE0FAF4E5887F57BE643C8B0058079 _anon_1;
  sGpuParticle::Particle::$FB42A98E57440A6D1F57DCCF3BAAEDF9::$C71BC1D110D895C7154C07FBB35F2517 _anon_2;
};

struct sGpuParticle::Particle
{
  MtFloat3 pos;
  MtColor color;
  sGpuParticle::Particle::$FB42A98E57440A6D1F57DCCF3BAAEDF9 _anon_0;
};

struct __cppobj cBlendState::MyDTI : MtDTI
{
};

enum cBlendState::eDefaultBState : __int32
{
  BLEND_RGBA = 0x0,
  BLEND_ADD_SA_ONE = 0x0,
  BLEND_ADD_SA_ISA = 0x1,
  BLEND_ADD_SC_ONE = 0x2,
  BLEND_ADD_SC_ISA = 0x3,
  BLEND_ADD_ONE_ONE = 0x4,
  BLEND_RS_SA_ONE = 0x5,
  BLEND_RS_SA_ISA = 0x6,
  BLEND_RS_SC_ONE = 0x7,
  BLEND_RS_SC_ISA = 0x8,
  BLEND_RS_ONE_ONE = 0x9,
  BLEND_MIN_SA_ONE = 0xA,
  BLEND_MAX_SA_ONE = 0xB,
  BLEND_ADD_DC_ONE = 0xC,
  BLEND_ADD_DC_ISA = 0xD,
  BLEND_ADD_DCA_ONE = 0xE,
  BLEND_ADD_DCA_ISA = 0xF,
  BLEND_NONE = 0x10,
  BLEND_RGB = 0x11,
  BLEND_ADD_SA_ONE_RGB = 0x11,
  BLEND_ADD_SA_ISA_RGB = 0x12,
  BLEND_ADD_SC_ONE_RGB = 0x13,
  BLEND_ADD_SC_ISA_RGB = 0x14,
  BLEND_ADD_ONE_ONE_RGB = 0x15,
  BLEND_RS_SA_ONE_RGB = 0x16,
  BLEND_RS_SA_ISA_RGB = 0x17,
  BLEND_RS_SC_ONE_RGB = 0x18,
  BLEND_RS_SC_ISA_RGB = 0x19,
  BLEND_RS_ONE_ONE_RGB = 0x1A,
  BLEND_MIN_SA_ONE_RGB = 0x1B,
  BLEND_MAX_SA_ONE_RGB = 0x1C,
  BLEND_ADD_DC_ONE_RGB = 0x1D,
  BLEND_ADD_DC_ISA_RGB = 0x1E,
  BLEND_ADD_DCA_ONE_RGB = 0x1F,
  BLEND_ADD_DCA_ISA_RGB = 0x20,
  BLEND_NONE_RGB = 0x21,
  BLEND_MAX = 0x22,
};

struct __cppobj sVibration::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) sVibration::VibFlag
{
  int (**_vptr$VibFlag)(void);
  u32 mFlag;
};

struct __cppobj nPhysics::System::MyDTI : MtDTI
{
};

struct __cppobj nPhysics::RigidBody::MyDTI : MtDTI
{
};

struct __cppobj nPhysics::InertiaTensor : MtObject
{
  __attribute__((aligned(16))) MtMatrix mBasic;
  MtMatrix mBasicInverse;
  MtMatrix mCurrent;
  MtMatrix mCurrentInverse;
};

struct __cppobj nPhysics::Mass : MtObject
{
  f32 mMass;
  f32 mInverseMass;
};

struct __attribute__((aligned(16))) nPhysics::RigidBody::INITIALIZER
{
  nPhysics::InertiaTensor mInertiaTensor;
  nPhysics::SHAPES mShapes;
  MtVector3 mPosition;
  MtQuaternion mRotation;
  MtVector3 mLinearVelocity;
  MtVector3 mAngularVelocity;
  nPhysics::Mass mMass;
  u32 mStatus;
  f32 mMaxRadianPerStep;
  f32 mMaxLinearVelocity;
  f32 mMaxAngularVelocity;
  f32 mLinearDamping;
  f32 mAngularDamping;
  f32 mStaticFriction;
  f32 mKineticFriction;
  f32 mRestitution;
};

struct __cppobj nPhysics::Base::MyDTI : MtDTI
{
};

struct nPhysics::Math::Matrix
{
  nPhysics::Math::Vector4 mInstance[4];
};

typedef nPhysics::SHAPE (*nPhysics::SHAPE::MOVE_SHAPE)(const nPhysics::SHAPE *, const nPhysics::Math::Vector3 *);

typedef void (*nPhysics::SHAPE::TRANSFORM_SHAPE)(nPhysics::SHAPE *, nPhysics::AABB *, const nPhysics::SHAPE *, const nPhysics::Math::Matrix *);

typedef nPhysics::AABB (*nPhysics::SHAPE::GET_CIRCUMSCRIBED_AABB)(const nPhysics::SHAPE *);

typedef nPhysics::Math::Vector3 (*nPhysics::SHAPE::GET_SUPPORT_MAPPING)(const nPhysics::SHAPE *, const nPhysics::Math::Vector3 *);

typedef nPhysics::Math::Vector3 (*nPhysics::SHAPE::GET_INTERNAL_POSITION)(const nPhysics::SHAPE *);

struct nPhysics::Listener::Collision::COLLIDE_EVENT
{
  nPhysics::SORTED_PAIR *mPair;
  const nPhysics::CONTACT_PAIR *mContactPair;
  nPhysics::RigidBody *mRigidBody1;
  nPhysics::RigidBody *mRigidBody2;
  const MtVector3 mPosition1;
  const MtVector3 mPosition2;
  const MtQuaternion mRotation1;
  const MtQuaternion mRotation2;
  const MtVector3 mLinearVelocity1;
  const MtVector3 mLinearVelocity2;
  const MtVector3 mAngularVelocity1;
  const MtVector3 mAngularVelocity2;
};

struct __cppobj nPhysics::Listener::Collision::CONTACT_EVENT : nPhysics::Listener::Collision::COLLIDE_EVENT
{
};

struct nPhysics::Listener::Collision::SEPARATE_EVENT
{
  nPhysics::RigidBody *mRigidBody1;
  nPhysics::RigidBody *mRigidBody2;
};

struct __cppobj nPhysics::Constraint::Object::MyDTI : MtDTI
{
};

struct nPhysics::INITIALIZE_PARAMETER
{
  MtFloat3 WorldCenter;
  u32 MaxRigidBody;
  MtFloat3 WorldExtent;
  u32 MaxContactPair;
  u32 MaxGeometry;
  u32 MaxConstraint;
  u32 MaxMaterial;
};

struct __cppobj nPhysics::InertiaTensor::MyDTI : MtDTI
{
};

struct __cppobj nPhysics::Mass::MyDTI : MtDTI
{
};

struct __cppobj nPhysics::Material : MtObject
{
  f32 mStaticFriction;
  f32 mKineticFriction;
  f32 mRestitution;
  __attribute__((aligned(16))) MtVector3 mDirection;
};

struct __cppobj nPhysics::Material::MyDTI : MtDTI
{
};

struct __cppobj sAI::MyDTI : MtDTI
{
};

struct __cppobj cAIService::MyDTI : MtDTI
{
};

struct __cppobj cAIObject::MyDTI : MtDTI
{
};

struct __cppobj cAITask::MyDTI : MtDTI
{
};

struct __cppobj cAITaskJobPrimList::MyDTI : MtDTI
{
};

struct __cppobj cAITaskJobPrim::MyDTI : MtDTI
{
};

struct __cppobj nAI::TaskPerformanceInfo::MyDTI : MtDTI
{
};

struct __cppobj nAI::TaskPerformanceInfo::LOD::MyDTI : MtDTI
{
};

struct nAI::TASK_PERFORMANCE_INFO
{
  MT_CTSTR mName;
  f32 mAllowTime;
  u32 mOverloadManageType;
  u32 mLODNum;
  nAI::TASK_PERFORMANCE_LOD_INFO *mLOD;
};

struct nAI::TASK_PERFORMANCE_LOD_INFO
{
  bool mEnablePerformanceManage;
  f32 mPerformanceIndicator;
  u32 mOverloadManageType;
};

struct __cppobj sZone::MyDTI : MtDTI
{
};

enum sZone::LOCK_TYPE : __int32
{
  LOCK_TYPE_ADD_ZONE_RESOURCE = 0x0,
  LOCK_TYPE_DELETE_ZONE_RESOURCE = 0x1,
  LOCK_TYPE_ADD_LISTENER = 0x2,
  LOCK_TYPE_MOVE_LISTENER = 0x3,
  LOCK_TYPE_MAX = 0x4,
};

struct __cppobj MtGeomCylinder : MtGeomConvex
{
  MtCylinder mCylinder;
};

struct sZone::SearchParam
{
  MtGeomAABB SearchAABB;
  u32 ThreadIndex;
  MtTypedArray<nZone::cLayoutElement> *pHitArray;
  cZoneListener *pListener;
  cZoneLayout::cInGameGroupManager *pGroupManager;
  u32 CollisionType;
  __attribute__((aligned(16))) MtVector3 NowListenerPos;
  MtLineSegment NowListenerLS;
  MtGeomConvex *pNowListenerConvex;
  __attribute__((aligned(16))) MtGeomAABB WorkAABB;
  MtGeomOBB WorkOBB;
  MtGeomSphere WorkSphere;
  MtGeomCapsule WorkCapsule;
  MtGeomCylinder WorkCylinder;
  MtGeomTriangle WorkTriangle;
};

struct __cppobj __attribute__((aligned(8))) cZoneListener : MtObject
{
  u32 mTargetZoneLayoutIndex;
  u32 mTargetZoneLayoutHandle;
  cZoneLayout *mpZoneLayout;
  cZoneLayout::cInGameGroupManager *mpGroupManager;
  u32 mTargetShapeType;
  u32 mPriorityRuleType;
  bool mFlgCallNotifiedFunction;
  bool mFlgCallContentsCallbackFunction;
  bool mFlgCallbackSingleCallContentsGroup;
};

struct __cppobj cZoneLayout::cInGameGroupManager : MtObject
{
  u32 mIndex;
  MtObject *mpUserOwner;
  cZoneLayout *mpSystemOwner;
  rZone::cGroupManager *mpResourceGroupManager;
  bool mFlgEnable;
  cZoneLayout::cDynamicBVHMaster *mpDynamicBvhMaster;
};

struct __cppobj MtTypedArray<cZoneLayout::cInGameGroupManager> : MtArray
{
};

struct __cppobj cZoneLayout : MtObject
{
  u32 mIndex;
  rZone *mpNativeResource;
  __attribute__((aligned(16))) MtVector3 mWorldOffset;
  MtQuaternion mQuaternion;
  MtMatrix mWorldMatrix;
  MtMatrix mWorldInverseMatrix;
  nZone::cLayoutElement *mpLayoutElementArray;
  u32 mLayoutElementNum;
  nZone::cContentsPool *mpContentsPool;
  const MtDTI *mpGroupManagerDTI;
  MtTypedArray<cZoneLayout::cInGameGroupManager> mGroupManagerArray;
  cZoneLayout::cDynamicBVHMaster *mpDynamicBvhMaster;
  bool mFlgActive;
  bool mFlgEnableApplyOffset;
  bool mFlgEnableQuaternion;
};

struct __cppobj rZone::cGroupManager : MtObject
{
  rZone *mpOwner;
  u32 mIndex;
  s32 mGroupID;
  u32 mLayoutIndexArrayNum;
  u32 *mpLayoutIndexArray;
  u32 mGlobalLayoutIndexArrayNum;
  u32 *mpGlobalLayoutIndexArray;
  u32 mBroadPhaseMode;
  cGridCollision *mpGrid;
  cGridCollisionRegistInfo *mpGridRegisterInfo;
};

struct __cppobj cZoneLayout::cDynamicBVHMaster : MtObject
{
  cDynamicBVHCollision mDynamicBVH;
  s32 mDynamicBVHRequestNum;
  MtTypedArray<nZone::cLayoutElement> mDBVTUpdateArray[6];
};

struct __cppobj MtTypedArray<nZone::cContentsPool::cContentsList> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) nZone::cContentsPool : MtObject
{
  MtTypedArray<nZone::cContentsPool::cContentsList> mContentsListArray;
  bool mFlgNativeData;
};

struct __cppobj rZone : cResource
{
  u32 mCategoryVersion;
  u32 mCategoryAttribute;
  MtString mCategoryName;
  u32 mCategoryDtiID;
  nZone::cLayoutElement *mpLayoutElements;
  u32 mLayoutElementsNum;
  u32 mGlobalLayoutIndexArrayNum;
  u32 *mpGlobalLayoutIndexArray;
  nZone::cContentsPool mContentsPool;
  u32 *mpUniqueIDTable;
  u32 mUniqueIDTableNum;
  rZone::cGroupManager *mpGroupManagerArray;
  u32 mGroupManagerArrayNum;
  u32 mBroadPhaseMode;
  cGridCollision *mpGrid;
  cGridCollisionRegistInfo *mpGridRegisterInfo;
};

struct __cppobj nZone::cLayoutElement : MtObject
{
  cZoneLayout *mpOwner;
  s32 mPriority;
  nZone::ShapeInfoBase *mpShapeInfo;
  s32 mContentsPoolID;
  s32 mContentsPoolGroupID;
  bool mIsEnable;
  bool mIsDynamic;
  bool mFlgShallowCopyShape;
  u32 mIndex;
  u32 mLayoutGroupIndex;
  u32 mIndexOfLayoutGroup;
  MtObject *mpExtendObj;
  u32 mUniqueID;
  s32 mGroupID;
  cDynamicBVHCollision::Node *mpDynamicBVHNode;
  nZone::cContentsPool *mpContentsPool;
};

struct __cppobj __attribute__((aligned(4))) nZone::ShapeInfoBase : MtObject
{
  f32 mDecay;
  bool mIsNativeData;
};

struct __cppobj cZoneLayout::MyDTI : MtDTI
{
};

struct __cppobj cZoneLayout::cInGameGroupManager::MyDTI : MtDTI
{
};

struct __cppobj cZoneLayout::cDynamicBVHMaster::MyDTI : MtDTI
{
};

struct __cppobj rZone::MyDTI : MtDTI
{
};

struct __cppobj rZone::cGroupManager::MyDTI : MtDTI
{
};

struct rZone::cMemoryHeader::cContentsPoolInfo
{
  u32 mContentsListNum;
};

struct rZone::cMemoryHeader::cGridInfo
{
  u32 mGridRegisterNum;
  u32 mGridCellNum;
};

struct rZone::cMemoryHeader
{
  u32 mLayoutInfoNum;
  rZone::cMemoryHeader::cLayoutInfo *mpLayoutInfoArray;
  u32 mGlobalLayoutIndexArrayNum;
  u32 mGroupInfoNum;
  rZone::cMemoryHeader::cGroupInfo *mpGroupInfoArray;
  rZone::cMemoryHeader::cContentsPoolInfo mContentsPoolInfo;
  u32 mUniqueIDTableNum;
  rZone::cMemoryHeader::cGridInfo mAllGridInfo;
};

struct rZone::cMemoryHeader::cLayoutInfo
{
  u32 mShapeType;
};

struct rZone::cMemoryHeader::cGroupInfo
{
  u32 mRegisterLayoutNum;
  u32 mGlobalShapeNum;
  rZone::cMemoryHeader::cGridInfo mGroupGridInfo;
};

struct __cppobj nZone::cLayoutElement::MyDTI : MtDTI
{
};

struct __cppobj nZone::ShapeInfoBase::MyDTI : MtDTI
{
};

enum nZone::ShapeInfoBase::SHAPE_TYPE : __int32
{
  SHAPE_TYPE_NONE = 0x0,
  SHAPE_TYPE_AREA = 0x1,
  SHAPE_TYPE_AABB = 0x2,
  SHAPE_TYPE_OBB = 0x3,
  SHAPE_TYPE_SPHERE = 0x4,
  SHAPE_TYPE_CAPSULE = 0x5,
  SHAPE_TYPE_CYLINDER = 0x6,
  SHAPE_TYPE_POINT = 0x7,
  SHAPE_TYPE_LINE = 0x8,
  SHAPE_TYPE_PANEL = 0x9,
  SHAPE_TYPE_CONE = 0xA,
  SHAPE_TYPE_GLOBAL = 0xB,
  SHAPE_TYPE_NUM = 0xC,
  SHAPE_TYPE_INVALID = 0xFFFFFFFF,
};

struct __cppobj nZone::cContentsPool::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nZone::cContentsPool::cContentsList : MtObject
{
  MtArray mZoneContentsArray;
  s32 mGroupID;
  u32 mRunCounter[19];
  bool mFlgNativeData;
};

struct __cppobj nZone::cContentsPool::cContentsList::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cZoneContents : MtObject
{
  MtString mName;
  MtString mCategoryName;
  bool mFlgUse;
  bool mIsNativeData;
};

struct __cppobj sRemoteProcedure::MyDTI : MtDTI
{
};

typedef sRemoteProcedure::SNode std::_Simple_types<value_type>::value_type_2;

typedef std::_Simple_types<value_type>::value_type_2 *std::_Simple_types<value_type>::pointer_2;

typedef std::_Simple_types<value_type>::pointer_2 std::_Vector_val<_Val_types>::pointer_0;

struct __cppobj std::_Vector_val<_Val_types>_0 : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer_0 _Myfirst;
  std::_Vector_val<_Val_types>::pointer_0 _Mylast;
  std::_Vector_val<_Val_types>::pointer_0 _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > > : std::_Vector_val<_Val_types>_0
{
};

struct __cppobj std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > : std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >
{
};

struct __cppobj MtStlVector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > : std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >
{
};

typedef MtStlVector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > sRemoteProcedure::DObjList;

typedef size_t std::_Simple_types<std::pair<const unsigned int,unsigned int> >::size_type;

typedef std::_Simple_types<std::pair<const unsigned int,unsigned int> >::size_type std::_Tree_val<_Val_types>::size_type_2;

struct __cppobj std::_Tree_val<_Val_types>_2 : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr _Myhead;
  std::_Tree_val<_Val_types>::size_type_2 _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > > : std::_Tree_val<_Val_types>_2
{
};

struct __cppobj std::_Tree_buy<value_type,allocator_type>_2 : std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > >
{
};

struct __cppobj std::_Tree_comp<false,std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> > : std::_Tree_buy<value_type,allocator_type>_2
{
};

struct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> > : std::_Tree_comp<false,std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >
{
};

struct __cppobj std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > : std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >
{
};

struct __cppobj MtStlMap<RPC_ID,u32,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > : std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >
{
};

typedef MtStlMap<RPC_ID,u32,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > sRemoteProcedure::DObjIndexMap;

struct sRemoteProcedure::SParallelNode
{
  sRemoteProcedure::DObjList mObjList;
  u32 mNextEmptyIndex;
  sRemoteProcedure::DObjIndexMap mObjMap;
};

struct __attribute__((aligned(8))) sRemoteProcedure::SNode
{
  cRemoteProcedure *mpObj;
  u32 mNextEmpty;
};

struct __cppobj std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> > : std::_Tree_buy<value_type,allocator_type>
{
};

struct __cppobj std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> > : std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >
{
};

struct __cppobj std::set<MtString,std::less<MtString>,MtStlAllocator<MtString> > : std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >
{
};

struct __cppobj MtStlSet<MtString,MtStlAllocator<MtString> > : std::set<MtString,std::less<MtString>,MtStlAllocator<MtString> >
{
};

typedef MtStlSet<MtString,MtStlAllocator<MtString> > cRemoteProcedure::DGroupList;

typedef void (*cRemoteProcedure::PROCESS_CALLBACK)(MtObject *, cRemoteCall *, s32);

struct __cppobj cRemoteProcedure : MtObject
{
  cRemoteProcedure::DGroupList mRpcGroupList;
  bool mValid;
  bool mKill;
  MOVE_LINE mCurrentParallelLineLocal;
  MOVE_LINE mParallelLine;
  u32 mLastUpdateIndex;
  bool mIsParallelLocal;
  RPC_ID mID;
  MtString mGroup;
  MtCriticalSection mCS;
  cRemoteProcedure::PROCESS_CALLBACK mpCallback;
  _BYTE gap50[8];
  MtObject *mpParent;
};

typedef std::_Tree_val<_Val_types>::size_type_0 std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >::size_type;

struct std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >
{
  __int8 gap0[1];
};

struct __cppobj std::_Tree_simple_types<value_type>_0 : std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >
{
};

struct std::_Pair_base<const unsigned int,cRemoteProcedure *>
{
  const unsigned int first;
  cRemoteProcedure *second;
};

struct __cppobj std::pair<const unsigned int,cRemoteProcedure *> : std::_Pair_base<const unsigned int,cRemoteProcedure *>
{
};

struct std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >
{
  __int8 gap0[1];
};

struct std::_Allocator_base<std::pair<const unsigned int,cRemoteProcedure *> >
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<std::pair<const unsigned int,cRemoteProcedure *> > : std::_Allocator_base<std::pair<const unsigned int,cRemoteProcedure *> >
{
};

struct std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false>
{
  __int8 gap0[1];
};

struct std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false>::value_compare;

struct std::binary_function<unsigned int,unsigned int,bool>
{
  __int8 gap0[1];
};

struct __cppobj std::less<unsigned int> : std::binary_function<unsigned int,unsigned int,bool>
{
};

struct std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >
{
  __int8 gap0[1];
};

struct __cppobj std::_Tree_simple_types<value_type>_1 : std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >
{
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > : std::_Vector_val<_Val_types>
{
};

struct __cppobj std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > : std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
};

struct __cppobj MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > : std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >
{
};

struct std::_Pair_base<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
  const MtString first;
  MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > second;
};

struct __cppobj std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > : std::_Pair_base<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
};

struct std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >
{
  __int8 gap0[1];
};

struct std::_Allocator_base<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > : std::_Allocator_base<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >
{
};

struct std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false>
{
  __int8 gap0[1];
};

struct std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false>::value_compare;

struct std::binary_function<MtString,MtString,bool>
{
  __int8 gap0[1];
};

struct __cppobj std::less<MtString> : std::binary_function<MtString,MtString,bool>
{
};

struct std::_If<false,const_iterator,iterator>
{
  __int8 gap0[1];
};

struct std::pair<const_iterator,const_iterator>;

typedef std::_Vector_val<_Val_types>::pointer_0 std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::pointer;

typedef MtStlAllocator<sRemoteProcedure::SNode> std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::_Alloc;

typedef std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >::_Alloc;

struct std::_Allocator_base<sRemoteProcedure::SNode>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<sRemoteProcedure::SNode> : std::_Allocator_base<sRemoteProcedure::SNode>
{
};

struct __cppobj MtStlAllocator<sRemoteProcedure::SNode> : std::allocator<sRemoteProcedure::SNode>
{
};

typedef std::_Wrap_alloc<_Alloc>_2 std::_Wrap_alloc<_Alloc>::other_0;

typedef std::_Wrap_alloc<_Alloc>::other_0 std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::_Alty;

typedef std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::_Alty std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >::_Alty;

struct __cppobj std::_Wrap_alloc<_Alloc>_2 : MtStlAllocator<sRemoteProcedure::SNode>
{
};

struct std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >
{
  __int8 gap0[1];
};

typedef sRemoteProcedure::SNode std::_Allocator_base<sRemoteProcedure::SNode>::value_type;

typedef std::_Allocator_base<sRemoteProcedure::SNode>::value_type std::allocator<sRemoteProcedure::SNode>::value_type;

typedef std::allocator<sRemoteProcedure::SNode>::value_type *std::allocator<sRemoteProcedure::SNode>::pointer;

typedef size_t std::allocator<sRemoteProcedure::SNode>::size_type;

typedef std::allocator<sRemoteProcedure::SNode>::pointer MtStlAllocator<sRemoteProcedure::SNode>::pointer;

typedef MtStlAllocator<sRemoteProcedure::SNode>::pointer std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >::type;

typedef std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >::type std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >::pointer;

typedef std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >::pointer std::_Wrap_alloc<_Alloc>_2::pointer;

typedef std::allocator<sRemoteProcedure::SNode>::size_type MtStlAllocator<sRemoteProcedure::SNode>::size_type;

typedef MtStlAllocator<sRemoteProcedure::SNode>::size_type std::_Get_size_type<MtStlAllocator<sRemoteProcedure::SNode> >::type;

typedef std::_Get_size_type<MtStlAllocator<sRemoteProcedure::SNode> >::type std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >::size_type;

typedef std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >::size_type std::_Wrap_alloc<_Alloc>_2::size_type;

struct std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >
{
  __int8 gap0[1];
};

struct std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >
{
  __int8 gap0[1];
};

struct std::_Get_size_type<MtStlAllocator<sRemoteProcedure::SNode> >
{
  __int8 gap0[1];
};

typedef std::less<unsigned int> std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false>::key_compare;

typedef std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false>::key_compare std::_Tree_comp<false,std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::key_compare;

typedef std::_Tree_comp<false,std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::key_compare std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::key_compare;

typedef MtStlAllocator<std::pair<const unsigned int,unsigned int> > std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false>::allocator_type;

typedef std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false>::allocator_type std::_Tree_comp<false,std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::allocator_type;

typedef std::_Tree_comp<false,std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::allocator_type std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::allocator_type;

struct std::_Allocator_base<std::pair<const unsigned int,unsigned int> >
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<std::pair<const unsigned int,unsigned int> > : std::_Allocator_base<std::pair<const unsigned int,unsigned int> >
{
};

struct __cppobj MtStlAllocator<std::pair<const unsigned int,unsigned int> > : std::allocator<std::pair<const unsigned int,unsigned int> >
{
};

typedef std::_Tree_iterator<_Myt> std::_If<false,const_iterator,iterator>::type;

typedef std::_If<false,const_iterator,iterator>::type std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::iterator;

typedef std::_Tree_const_iterator<_Myt> std::_Tree_val<_Val_types>_2::const_iterator;

typedef std::_Tree_val<_Val_types>_2::const_iterator std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::const_iterator;

typedef std::_Tree_node<value_type,_Voidptr> std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type;

typedef std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type *std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer;

typedef MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type;

typedef std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer;

typedef std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::_Nodeptr;

typedef std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::_Nodeptr std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > >::_Nodeptr;

typedef std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > >::_Nodeptr std::_Tree_buy<value_type,allocator_type>_2::_Nodeptr;

typedef std::_Tree_buy<value_type,allocator_type>_2::_Nodeptr std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::_Nodeptr;

typedef MtStlAllocator<std::pair<const unsigned int,unsigned int> > std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::_Alloc;

typedef std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::_Alloc std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > >::_Alloc;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > > std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::other;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::other std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::_Alnod_type;

typedef std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::_Alnod_type std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > >::_Alty;

typedef std::_Tree_val<_Val_types>::_Nodeptr *std::_Tree_val<_Val_types>_2::_Nodepref;

typedef std::pair<const unsigned int,unsigned int> std::_Simple_types<std::pair<const unsigned int,unsigned int> >::value_type;

typedef std::_Simple_types<std::pair<const unsigned int,unsigned int> >::value_type *std::_Simple_types<std::pair<const unsigned int,unsigned int> >::reference;

typedef std::_Simple_types<std::pair<const unsigned int,unsigned int> >::reference std::_Tree_val<_Val_types>_2::reference;

struct std::_Simple_types<std::pair<const unsigned int,unsigned int> >
{
  __int8 gap0[1];
};

struct __cppobj std::_Tree_simple_types<value_type>_2 : std::_Simple_types<std::pair<const unsigned int,unsigned int> >
{
};

struct std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >
{
  __int8 gap0[1];
};

typedef size_t std::allocator<std::_Tree_node<value_type,_Voidptr> >::size_type;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::size_type MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::size_type;

typedef MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::size_type std::_Get_size_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type;

typedef std::_Get_size_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::size_type;

typedef std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::size_type std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::size_type;

struct std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false>
{
  __int8 gap0[1];
};

struct std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false>::value_compare;

typedef std::_Tree_val<_Val_types>::_Nodeptr std::_Tree_const_iterator<_Myt>::_Nodeptr;

typedef std::_Tree_const_iterator<_Myt> std::_Tree_const_iterator<_Myt>::_Myiter;

typedef std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base> std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Myiter;

typedef std::_Tree_val<_Val_types>::_Nodeptr std::_Tree_iterator<_Myt>::_Nodeptr;

struct std::_Get_const_void_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >
{
  __int8 gap0[1];
};

struct std::_Get_const_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >
{
  __int8 gap0[1];
};

struct std::_Tree_unchecked_iterator<std::_Tree_val<_Val_types> >;

struct __cppobj MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > : std::allocator<std::pair<const unsigned int,cRemoteProcedure *> >
{
};

struct __cppobj MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > : std::allocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >
{
};

struct __cppobj sGrass::MyDTI : MtDTI
{
};

struct GRASS_OUTSOURCING::GrassCommon
{
  MtFloat4 fAmbientOcclusionFactor;
  MtFloat4 fFadeParams;
  f32 fNearClipDistance;
  MtFloat4 fWindMapCoordinate;
};

struct GRASS_OUTSOURCING::GrassMaterial
{
  f32 fGrassTranslucent;
  f32 fGrassSpecularPower;
  MtFloat4 fGrassColor[2];
};

struct GRASS_OUTSOURCING::GrassChain
{
  MtFloat4 fChain[16];
  MtFloat4 fChainNormal[16];
  MtVector4 fChainSoa[2][8];
  MtVector4 fChainLength[2][2];
};

struct GRASS_OUTSOURCING::GrassBillboard
{
  MtFloat3 fBillboardDirection;
  MtFloat4 fBillboard[4];
  __attribute__((aligned(8))) MtVector4 fBillboardSoa[4];
  MtVector4 fBillboardLength;
};

struct GRASS_OUTSOURCING::GrassRoot
{
  MtFloat4 fGlobalWindParam;
};

struct GRASS_OUTSOURCING::GrassUnit
{
  MtFloat4 fQuantScale;
  MtFloat4 fQuantOffset;
  MtFloat4 fGlobalWind[8];
};

struct GRASS_OUTSOURCING::GrassWind
{
  MtFloat4 fWindNum;
  MtFloat4 fWindParams[8];
  MtFloat4 fWinds[8];
  MtFloat4 fWinds2[8];
  f32 fWindDisable;
};

struct __attribute__((aligned(16))) GRASS_OUTSOURCING::Misc
{
  MtFloat3 fCameraPos;
  __attribute__((aligned(8))) MtMatrix fViewProj;
  bool isFixed;
};

struct __cppobj GRASS_OUTSOURCING::SHADER : GRASS_OUTSOURCING::GrassCommon, GRASS_OUTSOURCING::GrassMaterial, GRASS_OUTSOURCING::GrassChain, GRASS_OUTSOURCING::GrassBillboard, GRASS_OUTSOURCING::GrassRoot, GRASS_OUTSOURCING::GrassUnit, GRASS_OUTSOURCING::GrassWind, GRASS_OUTSOURCING::Misc
{
};

struct GRASS_OUTSOURCING::VERTEX
{
  u8 index_num;
  bool index_odd;
  u16 num[4];
};

struct __attribute__((aligned(8))) CoprocessorObject::additionalLazyInfo
{
  void *pPutRequestLs;
  u32 sizePutRequestBuffer;
  u8 pad[8];
};

struct __attribute__((aligned(8))) CoprocessorObject::JITInfo
{
  void *pEaBuffer;
  u32 sizeBuffer;
  void *pLsBuffer;
  u8 attribute;
  u8 pad[3];
};

struct __attribute__((aligned(8))) CoprocessorObject::LazyInfo
{
  void *pEaBuffer;
  u32 sizeBuffer;
  void *pLsBuffer;
  u8 attribute;
  u8 pad[3];
};

struct __cppobj CoprocessorObject : MtObject
{
  CoprocessorObject::additionalLazyInfo mAddLazyInfo[63];
  u8 mLazyPad[16];
  u32 mBehavior;
  u32 mSizeLS;
  u8 mPad[8];
  CoprocessorObject::JITInfo mJITInfo[8];
  CoprocessorObject::LazyInfo mLazyInfo[63];
};

struct __cppobj cpGrassCoprocessor : CoprocessorObject
{
};

struct cCoGrass
{
  GRASS_OUTSOURCING::SHADER mJB_0;
  GRASS_OUTSOURCING::VERTEX mJB_1;
  cpGrassCoprocessor mJob;
};

struct GRASS_OUTSOURCING::SHADER::LIGHT_OUTPUT
{
  bool enable;
  __attribute__((aligned(16))) MtVector3 direction;
  MtVector3 diffuse;
  MtVector3 specular;
};

struct GRASS_OUTSOURCING::Output
{
  f32 x;
  f32 y;
  f32 z;
};

struct GRASS_OUTSOURCING::GRASS_INPUT
{
  MtFloat3 position;
  f32 color_blend;
  f32 lightmap;
  MtFloat2 cos_sin;
  u8 vert_no;
  MtFloat2 width_height;
  f32 power;
  f32 ambient_occlusion;
  f32 angle;
};

struct GRASS_OUTSOURCING::IA_GRASS_HICOMP
{
  MtFloat3 qposition;
  u8 vertex_no;
  f32 angle;
  f32 lightmap;
  f32 color_blend;
  f32 ambient_occlusion;
};

struct GRASS_OUTSOURCING::Input::$CF785618BFFE464E119BE40A7E566CCF::$DDBC0139D24B0D68707F05EF4B22DEAF
{
  unsigned __int32 px : 8;
  unsigned __int32 py : 8;
  unsigned __int32 pz : 8;
  unsigned __int32 angle : 8;
};

union GRASS_OUTSOURCING::Input::$CF785618BFFE464E119BE40A7E566CCF
{
  GRASS_OUTSOURCING::Input::$CF785618BFFE464E119BE40A7E566CCF::$DDBC0139D24B0D68707F05EF4B22DEAF _anon_0;
  u32 px_py_pz_angle;
};

struct GRASS_OUTSOURCING::Input
{
  GRASS_OUTSOURCING::Input::$CF785618BFFE464E119BE40A7E566CCF _anon_0;
};

struct GRASS_OUTSOURCING::CompVertexFormat::$553B6764CD3D4C8FEBEC1D54B2EC6E3B::$324C6189B98E3C2070C782AD27BBB2F9
{
  unsigned __int32 px : 8;
  unsigned __int32 py : 8;
  unsigned __int32 pz : 8;
  unsigned __int32 vert : 8;
};

union GRASS_OUTSOURCING::CompVertexFormat::$553B6764CD3D4C8FEBEC1D54B2EC6E3B
{
  GRASS_OUTSOURCING::CompVertexFormat::$553B6764CD3D4C8FEBEC1D54B2EC6E3B::$324C6189B98E3C2070C782AD27BBB2F9 _anon_0;
  u32 px_py_pz_vert;
};

struct GRASS_OUTSOURCING::CompVertexFormat::$5B43F20A43D1D9A0D9362F668275DEE8::$9AC6A213B56927638BB31FA7D95929FB
{
  unsigned __int32 angle : 8;
  unsigned __int32 lm : 8;
  unsigned __int32 cb : 8;
  unsigned __int32 ambocc : 8;
};

union GRASS_OUTSOURCING::CompVertexFormat::$5B43F20A43D1D9A0D9362F668275DEE8
{
  GRASS_OUTSOURCING::CompVertexFormat::$5B43F20A43D1D9A0D9362F668275DEE8::$9AC6A213B56927638BB31FA7D95929FB _anon_0;
  u32 angle_lm_cb_ambocc;
};

struct GRASS_OUTSOURCING::CompVertexFormat
{
  GRASS_OUTSOURCING::CompVertexFormat::$553B6764CD3D4C8FEBEC1D54B2EC6E3B _anon_0;
  GRASS_OUTSOURCING::CompVertexFormat::$5B43F20A43D1D9A0D9362F668275DEE8 _anon_1;
};

struct __cppobj CoprocessorObject::MyDTI : MtDTI
{
};

enum CoprocessorObject::eBufferAttribute : __int32
{
  BA_READ_ONLY = 0x0,
  BA_WRITE_ONLY = 0x1,
  BA_READWRITE = 0x2,
  ATTR_WRITEBACK_NEVER = 0x0,
  ATTR_WRITEBACK = 0x2,
};

struct cGrassOutsourcing
{
  u32 mCounter;
  nDraw::VertexBuffer *mpPinpongVertexBuffer[2];
  nDraw::VertexBuffer *mpVertexBuffer;
  u32 mVertexNum;
  u32 mMaxGrassIndexNum;
  u32 mVertexStride;
  nDraw::VertexBuffer *mpTempVertexBuffer;
  u32 mLocalGrassCount;
  GRASS_OUTSOURCING::Input *mLocalGrassBuffer;
  GRASS_OUTSOURCING::Output *mpWriter;
  GRASS_OUTSOURCING::SHADER mShader;
  GRASS_OUTSOURCING::VERTEX mVertex;
  cCoGrass grass;
};

struct __cppobj sOccluder::MyDTI : MtDTI
{
};

struct sOccluder::BoundingBox
{
  MtVector3 x;
  MtVector3 y;
  MtVector3 z;
  MtVector3 c;
  MtVector3 w;
};

struct __cppobj rOccluder::MyDTI : MtDTI
{
};

struct __cppobj rOccluder::cQuad::MyDTI : MtDTI
{
};

struct __cppobj sShadow::MyDTI : MtDTI
{
};

struct __cppobj sShadow::ResourceGroup::MyDTI : MtDTI
{
};

struct __cppobj sShadow::Resource::MyDTI : MtDTI
{
};

struct __cppobj sShadow::ViewConsistentResource::MyDTI : MtDTI
{
};

struct __cppobj sShadow::Node::MyDTI : MtDTI
{
};

enum sShadow::RESOURCE_TYPE : __int32
{
  RESOURCE_TYPE_SPOT = 0x0,
  RESOURCE_TYPE_POINT = 0x1,
  RESOURCE_TYPE_MAX_NUM = 0x2,
};

struct sShadow::Parameter
{
  u32 mViewNum;
  const sShadow::Node *mpNode;
  const sShadow::Resource *mpResource;
};

struct __cppobj uShadow::MyDTI : MtDTI
{
};

struct uShadow::ShadowViewIndependentReceiveState
{
  SO_HANDLE FShadowReceive;
  SO_HANDLE FShadowReceiveRT;
  SO_HANDLE FShadowMultiReceiveRT;
  SO_HANDLE FShadowFilter;
  SO_HANDLE FShadowFilterPoint;
  SO_HANDLE FShadowLightFace;
  SO_HANDLE FShadowReceiveAttn;
  SO_HANDLE SSShadowVariance;
};

struct __attribute__((aligned(8))) uShadow::ShadowReceiveParam
{
  MtFloat3 lightPos;
  f32 lightRangeInverse;
  f32 distanceBias;
  MtFloat3 lightDir;
  MtFloat4 range;
  MtFloat4x4 projectNear;
  MtFloat4x4 projectMiddle;
  MtFloat4x4 projectFar;
  MtFloat2 distanceAttn;
  MtFloat2 angularAttn;
  MtFloat2 cubeFaceOffset;
  MtFloat2 cubeFaceScale;
  MtFloat4 mapSize;
  MtFloat3x4 rangeMat;
  f32 faceIncreaseAttn;
  f32 faceDecreaseAttn;
  f32 distanceScaledDepthBias;
  f32 varianceEpsilon;
  f32 pmaxPower;
  f32 nearPlane;
  f32 attn;
};

enum uShadow::ShadowMap::DrawMode : __int32
{
  DrawModeNormal = 0x0,
  DrawModeStaticOnly = 0x1,
  DrawModeDynamicOnly = 0x2,
};

struct __attribute__((aligned(16))) uShadow::ShadowMap
{
  nDraw::Texture *shadowMap;
  nDraw::Texture *depthStencil;
  MtMatrix view;
  MtMatrix proj;
  MtRect viewport;
  bool clearShadowMap;
  MtVector3 *frustumVertices;
  uShadow::ShadowMap::DrawMode drawMode;
};

struct cConvexBoundingVolume
{
  int (**_vptr$cConvexBoundingVolume)(void);
};

enum MtFrustum::HIT_TYPE : __int32
{
  HIT_OUTSIDE = 0x0,
  HIT_INSIDE = 0x1,
  HIT_INTERSECT = 0x2,
};

typedef nPlatformUtil::nSharePlay::APPROVE_MODE::DummyName nPlatformUtil::nSharePlay::APPROVE_MODE::TYPE;

struct __cppobj sFile::MyDTI : MtDTI
{
};

enum sFile::PREFETCH_FLAG : __int32
{
  PREFETCH_NUM = 0x0,
};

struct __cppobj sExceptionHandler::MyDTI : MtDTI
{
};

struct nAutomation::Envelope::HASH::ATTACHMENT
{
  u32 name;
  u32 size;
  u32 buffer;
};

struct nAutomation::Envelope::HASH
{
  nAutomation::Envelope::HASH::ATTACHMENT attachment[16];
  u32 address[16];
  u32 from;
  u32 reply;
  u32 subject;
  u32 body;
  u32 isBusy;
};

struct __attribute__((aligned(8))) nAutomation::CryptoString
{
  int (**_vptr$CryptoString)(void);
  const u8 *mpEncrypted;
  u32 mEncryptedSize;
};

struct __cppobj sPrimitive::MyDTI : MtDTI
{
};

enum sPrimitive::ePrimSysState : __int32
{
  STATE_UNINITIALIZED = 0x0,
  STATE_READY = 0x1,
  STATE_TERMINATED = 0x2,
};

enum sPrimitive::LAYOUTMODE : __int32
{
  LAYOUT_NONE = 0x0,
  LAYOUT_STRETCH = 0x1,
  LAYOUT_PANSCAN = 0x2,
  LAYOUT_LETTERBOX = 0x3,
};

enum sPrimitive::ePrimType : __int32
{
  TYPE_NULL_0 = 0x0,
  TYPE_WORLD = 0x1,
  TYPE_SCREEN = 0x2,
  MAX_PRIM_TYPE = 0x3,
};

struct __attribute__((aligned(4))) sPrimitive::DrawInfo
{
  u32 base_priority;
  cPrimTagList::IndexTag *p_tags;
  u32 tag_num;
  bool use_vscr;
};

struct __cppobj cPrimTexHandleManager::MyDTI : MtDTI
{
};

struct __cppobj cPrimBufferManager::MyDTI : MtDTI
{
};

struct __cppobj cPrimTagManager::MyDTI : MtDTI
{
};

struct __cppobj sSyncPoint::MyDTI : MtDTI
{
};

struct __cppobj sSyncPoint::syncPointElement::MyDTI : MtDTI
{
};

struct __cppobj sHID::MyDTI : MtDTI
{
};

enum sHID::HID : __int32
{
  HID_NATAL = 0x0,
  MAX_HID = 0x1,
};

struct __cppobj cHID::MyDTI : MtDTI
{
};

struct __cppobj sCoprocessor::MyDTI : MtDTI
{
};

enum sCoprocessor::QUEUE_KIND : __int32
{
  QUEUE_INITIALIZE = 0x0,
  QUEUE_DRAW = 0x1,
  QUEUE_FRAME = 0x2,
  QUEUE_NUM = 0x3,
};

struct __cppobj sMovie::MyDTI : MtDTI
{
};

struct __cppobj uBaseModel::MyDTI : MtDTI
{
};

enum uBaseModel::VFCULL_LEVEL : __int32
{
  VFCULL_NONE = 0x0,
  VFCULL_LEVEL1 = 0x1,
  VFCULL_LEVEL2 = 0x2,
  VFCULL_LEVEL3 = 0x3,
  _VFCULL_LEVEL_S32_ = 0x7FFFFFFF,
};

enum uBaseModel::LOD_TYPE : __int32
{
  LOD_AUTO = 0xFFFFFFFF,
  LOD_HIGH = 0x1,
  LOD_MEDIUM = 0x2,
  LOD_LOW = 0x4,
  _LOD_TYPE_S32_ = 0x7FFFFFFF,
};

enum uBaseModel::SHADER_QUALITY : __int32
{
  SHADER_AUTO = 0xFFFFFFFF,
  SHADER_HIGH = 0x0,
  SHADER_MEDIUM = 0x1,
  SHADER_LOW = 0x2,
  _SHADER_QUALITY_S32_ = 0x7FFFFFFF,
};

enum uBaseModel::CACHE_MODE : __int32
{
  CACHE_NONE = 0x0,
  CACHE_LEVEL1 = 0x1,
  __CACHE_MODE__U32 = 0xFFFFFFFF,
};

enum uBaseModel::CACHE_TYPE : __int32
{
  CACHE_DEFAULT = 0x0,
  CACHE_SHADOW0_RECV = 0x1,
  CACHE_SHADOW0_CAST = 0x2,
  CACHE_SHADOW1_RECV = 0x3,
  CACHE_SHADOW1_CAST = 0x4,
  MAX_CACHE = 0x60,
};

enum MOT_TYPE : __int32
{
  MOT_BASE = 0x0,
  MOT_BLEND1 = 0x1,
  MOT_BLEND2 = 0x2,
  MOT_BLEND3 = 0x3,
  MOT_BLEND4 = 0x4,
  MOT_BLEND5 = 0x5,
  MOT_BLEND6 = 0x6,
  MOT_BLEND7 = 0x7,
  MOT_TYPE_NUM = 0x8,
  MOT_TYPE_UNDEF = 0xFFFFFFFF,
};

struct __cppobj uBaseEffect : uCoord
{
  u32 mStatus;
  rEffectList *mpEffectList;
  f32 mBaseFps;
  f32 mDeltaTimeRate;
  f32 mDeltaTimeCoef;
  f32 mTimeInterpolationRate;
  s32 mIntTimeInterpolationRate;
  u32 mTimer;
  unsigned __int32 mLoopNum : 16;
  unsigned __int32 mLoopFrame : 16;
  unsigned __int32 mKillNo : 16;
  unsigned __int32 mExclusionTrait : 8;
  unsigned __int32 mAxisType : 4;
  unsigned __int32 mRelationType : 4;
  unsigned __int32 mEndType : 4;
  unsigned __int32 mCullingGroup : 4;
  unsigned __int32 mParticleVolume : 4;
  unsigned __int32 mFilterVolume : 4;
  unsigned __int32 mLifeFrameVolume : 4;
  unsigned __int32 mBoundaryType : 4;
  unsigned __int32 mCreateFlag : 1;
  unsigned __int32 mParentDisableFlag : 1;
  unsigned __int32 mParentModelFlag : 1;
  unsigned __int32 mBoundaryFlag : 1;
  unsigned __int32 mBoundaryResult : 4;
  cUnit *mpRelationParent;
  MtMatrix mWmatBase;
  MtVector3 mOfs;
  MtVector3 mDir;
  cEffectTransparency mTransparencyParam;
};

struct __cppobj __attribute__((aligned(16))) uEffect : uBaseEffect
{
  MtVector3 mParticle3DScale;
  f32 mParticleScale;
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mLifeFrame : 16;
  unsigned __int32 mWaitFrame : 16;
  unsigned __int32 mLightPriority : 8;
  unsigned __int32 mChildUnitLevel : 8;
  f32 mGravityCoef;
  u32 mDrawBuffSize;
  s32 mSetNo;
  u32 mGroupFlag;
  u32 mMaterialFlag;
  uEffect *mpParentGenerator;
  u32 mParentGeneratorId;
  unsigned __int32 mChildUnitMoveNum : 16;
  unsigned __int32 mChildLoopFrame : 16;
  unsigned __int32 mChildLifeFrame : 16;
  unsigned __int32 mChildWaitFrame : 16;
  unsigned __int32 mGeneratorNum : 16;
  unsigned __int32 mGeneratorMoveNum : 16;
  unsigned __int32 mJointNum : 16;
  unsigned __int32 mJointMoveNum : 16;
  u32 mUnitNo;
  u32 mGeneratorBuffSize;
  cParticleManager *mpManager;
  cEffectJoint *mJoint;
  u8 *mpChildUnitBuff;
  f32 mWaitFrameCoef;
  f32 mBoundaryRadius;
  unsigned __int32 mChildSetRate : 12;
  unsigned __int32 mSerialEffectType : 4;
  unsigned __int32 mSerialEffectWaitTimer : 16;
  s32 mDrawDepthBias;
  unsigned __int32 mLoopCtr : 16;
  unsigned __int32 mRandCtr : 16;
};

struct __cppobj rEffectList : cResource
{
  f32 mBaseFps;
  u8 *mpParamBuff;
  u32 mParamBuffSize;
  rEffectList::ResourceInfo *mResourceInfo;
  unsigned __int32 mListNum : 16;
  unsigned __int32 mJointNum : 16;
  unsigned __int32 mResourceInfoNum : 16;
  unsigned __int32 mJointIndexOffset : 16;
  unsigned __int32 mUnitGeneratorType : 4;
  unsigned __int32 mUnitMoveType : 4;
  unsigned __int32 mJointShare : 4;
  unsigned __int32 mEffectList0419 : 4;
  unsigned __int32 mEffectList161a : 16;
  rEffectList *mpSerialEffect;
  u32 mUnitGeneratorParamOffset;
  u32 mUnitMoveParamOffset;
  u32 mUnitJointParamOffset;
  u32 mUnitParamOffset;
};

typedef rEffectList::EFL_GENERATOR rEffectList::EFL_GENERATOR_0;

typedef rEffectList::EFL_PARTICLE_COMMON rEffectList::EFL_PARTICLE_COMMON_0;

typedef rEffectList::EFL_LIFE_FRAME rEffectList::EFL_LIFE_FRAME_0;

typedef rEffectList::EFL_MOVE_COMMON rEffectList::EFL_MOVE_COMMON_0;

struct __cppobj cParticleManager : MtObject
{
  uEffect *mpOwner;
  cParticleManager *mpNext;
  u32 mStatus;
  unsigned __int32 mManagerNo : 16;
  unsigned __int32 mListNo : 16;
  cEffectJoint *mpJoint;
  unsigned __int32 mJointNo : 16;
  unsigned __int32 mJointIndex : 16;
  u32 mParticleBuffSize;
  u8 *mpParticleBuff;
  rEffectList::ResourceInfo *mpResourceInfo;
  sGpuParticle::Context *mpContext;
  rEffectList::EFL_GENERATOR_0 *mpGeneratorParam;
  rEffectList::EFL_PARTICLE_COMMON_0 *mpParticleParam;
  rEffectList::EFL_LIFE_FRAME_0 *mpLifeParam;
  rEffectList::EFL_MOVE_COMMON_0 *mpMoveParam;
  unsigned __int32 mParticleType : 8;
  unsigned __int32 mGeneratorType : 4;
  unsigned __int32 mLifeType : 4;
  unsigned __int32 mMoveType : 4;
  unsigned __int32 mWorkMoveType : 4;
  unsigned __int32 mColorCorrectType : 4;
  unsigned __int32 mKeepHoldFlag : 1;
  unsigned __int32 mConstUpdateFlag : 1;
  unsigned __int32 mLifeRateCurveFlag : 1;
  unsigned __int32 mOtDepthBiasFlag : 1;
  unsigned __int32 mDrawMode : 8;
  unsigned __int32 mDrawPass : 8;
  unsigned __int32 mDrawType : 8;
  unsigned __int32 mRno : 8;
  u32 mRandCtr;
  u32 mParticleRandCtr;
  unsigned __int32 mStartRandCtr : 16;
  unsigned __int32 mPrimRotOptionFlag : 8;
  unsigned __int32 mBoundaryFlag : 4;
  unsigned __int32 mParticleVolume : 4;
  u32 mManager324c;
  MtAABB mBoundingBox;
  f32 mBoundingRadius;
  f32 mBoundingDistanceSQ;
  u32 mTimer;
  u32 mGeneratorOptionFlag;
  u32 mParticleOptionFlag;
  u32 mAllocBuffSize;
  f32 mTimeInterpolationRate;
  s32 mIntTimeInterpolationRate;
  u32 mLightGroupFlag;
  s32 mVibrationId;
  unsigned __int32 mSeReqNo : 16;
  unsigned __int32 mSeOptionFlag : 16;
  u32 mManager329c;
};

typedef rEffectList::EFL_JOINT rEffectList::EFL_JOINT_0;

struct __attribute__((aligned(16))) cEffectJoint
{
  MtMatrix mWmat;
  MtMatrix mSubWmat;
  MtFloat3 mOfs;
  s32 mParentNo;
  MtQuaternion mQuat;
  MtFloat3 mSubOfs;
  s32 mSubParentNo;
  MtQuaternion mSubQuat;
  MtVector3 mPrevWorldPos;
  MtVector3 mUpdateConstWorldOfs;
  MtVector3 mScale;
  MtFloat3 mScaleBase;
  f32 mLargestScale;
  uEffect *mpOwner;
  rEffectList::EFL_JOINT_0 *mpJointParam;
  unsigned __int32 mJointIndex : 16;
  unsigned __int32 mJointNo : 16;
  unsigned __int32 mStatus : 8;
  unsigned __int32 mOrder : 4;
  unsigned __int32 mSubOrder : 4;
  unsigned __int32 mRelationType : 4;
  unsigned __int32 mRelationScaleType : 4;
  unsigned __int32 mSubRelationType : 4;
  unsigned __int32 mSubRelationScaleType : 4;
  unsigned __int32 mRno : 4;
  unsigned __int32 mCurDataIndex : 1;
  unsigned __int32 mOldDataIndex : 1;
  unsigned __int32 mSubWmatFlag : 1;
  unsigned __int32 mConstUpdateFlag : 1;
  unsigned __int32 mParentSymmetry : 1;
  unsigned __int32 mParentSymmetryScale : 1;
  unsigned __int32 mSymmetryEnable : 1;
  unsigned __int32 mOfsScaleFlag : 1;
  unsigned __int32 mBillboardEnable : 1;
  unsigned __int32 mBillboardLookAt : 1;
  unsigned __int32 mJoint02111 : 2;
  unsigned __int32 mStartRandCtr : 16;
  u32 mRandCtr;
  u32 mTimer;
  unsigned __int32 mWaitFrame : 16;
  unsigned __int32 mWaitTimer : 16;
  u32 mAllocBuffSize;
  u8 *mpExtendedBuff;
  cEffectJointKeyframe *mpKeyframe;
  cEffectJointAngle *mpAngle;
};

struct __attribute__((aligned(8))) rEffectList::ResourceInfo
{
  u32 mStatus;
  u32 mTrait;
  rTexture *mpTexture[3];
  rEffectAnim *mpAnim;
  rModel *mpModel;
  rEffectStrip *mpRangeStrip;
  rEffectStrip *mpPathStrip;
  rEffectList *mpBounceEffect;
  rEffectList *mpFinishEffect;
  rVibration *mpExtVibration;
  rSoundRequest *mpSoundRequest;
  cResource *mpForce;
  f32 mFresnelFactor;
  f32 mFresnelBias;
  f32 mFresnelExponent;
};

struct rEffectList::EFL_GENERATOR
{
  u32 GroupFlag;
  u32 MaterialFlag;
  u32 GeneratorOptionFlag;
  unsigned __int32 ParticleNum : 16;
  unsigned __int32 UnitEndType : 8;
  unsigned __int32 RandomNoNum : 8;
  s32 RandomNo[8];
  unsigned __int32 AxisType : 4;
  unsigned __int32 LODType : 4;
  unsigned __int32 VibReqType : 8;
  unsigned __int32 VibPad : 8;
  unsigned __int32 VibCamera : 8;
  u32 VibPriority;
  unsigned __int32 VibListNo : 16;
  unsigned __int32 VibOptionFlag : 16;
  unsigned __int32 SeReqNo : 16;
  unsigned __int32 SeOptionFlag : 16;
  MtRangeF ParticleScale;
  MtRangeU16 SetNum;
  MtRangeU16 LoopNum;
  MtRangeU16 SetFrame;
  MtRangeU16 IntervalFrame;
  f32 SetFrameDist;
  f32 IntervalFrameDist;
  MtRangeF Range[3];
  unsigned __int32 RangeType : 8;
  unsigned __int32 RangeDirType : 8;
  unsigned __int32 RangeOptionFlag : 8;
  unsigned __int32 RangeDisperseType : 8;
  unsigned __int32 RangeStripType : 8;
  unsigned __int32 RangeStripFlag : 8;
  unsigned __int32 RangeStripPartsNo : 16;
  MtRangeF RangeDirBlendRate;
  MtRangeF RangeScaleX;
  MtRangeF RangeScaleY;
  MtRangeF RangeScaleZ;
  unsigned __int32 RangeDivideNum : 16;
  unsigned __int32 BoundaryFlag : 4;
  unsigned __int32 Generator04a2 : 4;
  unsigned __int32 Generator08a3 : 8;
  f32 RangeCollisionDist;
  f32 RangeCollCorrectDist;
  MtRangeU16 RevivalFrame;
  f32 SetNumCorrectCoef;
  unsigned __int32 KeyframeSetNumParamOffset : 16;
  unsigned __int32 KeyframeRangeParamOffset : 16;
  unsigned __int32 RangeStripPathOffset : 16;
  unsigned __int32 ExtVibrationPathOffset : 16;
  unsigned __int32 SoundRequestPathOffset : 16;
  unsigned __int32 BoundaryParamOffset : 16;
};

struct rEffectList::EFL_PARTICLE_COMMON
{
  unsigned __int32 DrawMode : 8;
  unsigned __int32 EntryType : 8;
  unsigned __int32 CullingFlag : 8;
  unsigned __int32 BlendState : 8;
  u32 ParticleOptionFlag;
  u32 LightGroupFlag;
  s32 Zofs;
  f32 OtDepthBias;
  unsigned __int32 FixOtDepth : 16;
  unsigned __int32 VolumeBlendRate : 8;
  unsigned __int32 VolumeBlendRateRange : 8;
  unsigned __int32 ColorCorrectType : 4;
  unsigned __int32 GpuParticleType : 4;
  unsigned __int32 ShadeLightType : 4;
  unsigned __int32 ShaderType : 4;
  unsigned __int32 SynchroUnitFlag : 1;
  unsigned __int32 OtDepthBiasFlag : 1;
  unsigned __int32 SynchroUnitLimitFlag : 1;
  unsigned __int32 PScaleAdaptedFlag : 1;
  unsigned __int32 PCommon041a : 4;
  unsigned __int32 RotOptionFlag : 8;
  f32 ScaleAddCoef;
  MtRangeF Intensity;
  MtRangeF Scale;
  MtRangeF ScaleAdd;
  unsigned __int32 KeyframeIntensityParamOffset : 16;
  unsigned __int32 KeyframeScaleParamOffset : 16;
  unsigned __int32 LevelCorrectionParamOffset : 16;
  unsigned __int32 CullingParamOffset : 16;
};

struct rEffectList::EFL_LIFE_FRAME
{
  MtRangeU16 AppearFrame;
  MtRangeU16 KeepFrame;
  MtRangeU16 VanishFrame;
  unsigned __int32 KeepHoldFlag : 1;
  unsigned __int32 KeyframeKeepFrameParamOffset : 15;
  unsigned __int32 KeepHoldFrame : 16;
};

struct rEffectList::EFL_MOVE_COMMON
{
  u32 MoveOptionFlag;
  unsigned __int32 ForceType : 8;
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 CollParamOffset : 16;
  MtRangeF ForceRate;
};

struct rEffectList::EFL_JOINT
{
  unsigned __int32 JointIndex : 8;
  unsigned __int32 Order : 4;
  unsigned __int32 RelationType : 4;
  unsigned __int32 RelationScaleType : 4;
  unsigned __int32 SubOrder : 4;
  unsigned __int32 SubRelationType : 4;
  unsigned __int32 SubRelationScaleType : 4;
  unsigned __int32 ParentSymmetry : 1;
  unsigned __int32 ParentSymmetryScale : 1;
  unsigned __int32 ConstUpdateFlag : 1;
  unsigned __int32 MoveConstUpdateFlag : 1;
  unsigned __int32 SubWmatFlag : 1;
  unsigned __int32 OfsScaleFlag : 1;
  unsigned __int32 Joint0204 : 2;
  unsigned __int32 Joint0805 : 8;
  unsigned __int32 JointOptionFlag : 16;
  MtRangeF Scale[3];
  MtFloat3 Ofs;
  s32 ParentNo;
  MtQuaternion Quat;
  MtFloat3 SubOfs;
  s32 SubParentNo;
  MtQuaternion SubQuat;
  s32 RandomNo;
  MtRangeU16 WaitFrame;
  unsigned __int32 KeyframeScaleParamOffset : 16;
  unsigned __int32 KeyframeOfsParamOffset : 16;
  unsigned __int32 KeyframeAngleParamOffset : 16;
  unsigned __int32 AngleRangeParamOffset : 16;
};

struct cEffectJointKeyframe
{
  MtFloat3 mOfsKeyframeRate;
  u32 mJointKeyframe320c;
  MtFloat3 mAngleKeyframeRate;
  u32 mJointKeyframe321c;
};

struct cEffectJointAngle
{
  MtVector3 mAngle[2];
  MtVector3 mAngleAdd;
};

typedef rEffectAnim::SEQ_INDEX rEffectAnim::SEQ_INDEX_0;

union rEffectAnim::$1E6F1FF763C198D65D54F99961B3D6C1
{
  u8 *mpParamBuff;
  rEffectAnim::SEQ_INDEX_0 *mSeqIndexArray;
};

struct __cppobj rEffectAnim : cResource
{
  u32 mParamBuffSize;
  unsigned __int32 mSeqNum : 24;
  unsigned __int32 mOptionFlag : 8;
  rEffectAnim::$1E6F1FF763C198D65D54F99961B3D6C1 _anon_0;
};

struct __cppobj __attribute__((aligned(8))) rEffectStrip : cResource
{
  u8 *mpParamBuff;
  u32 mParamBuffSize;
  u32 mPartsNum;
  u32 mJointNum;
  u32 mTotalVertexNum;
  u32 mTotalIndexNum;
};

struct rEffectAnim::SEQ_INDEX
{
  u32 SeqPatTopOffset;
  unsigned __int32 SeqPatNum : 16;
  unsigned __int32 DefaultAnimFlag : 16;
  MtPoint DefaultPatCenter;
  MtPoint ConPatBasePoint;
  unsigned __int32 ConPatColNum : 16;
  unsigned __int32 ConPatTotalNum : 16;
  unsigned __int32 ConPatSizeW : 16;
  unsigned __int32 ConPatSizeH : 16;
};

struct __cppobj uEffect::MyDTI : MtDTI
{
};

struct __cppobj uBaseEffect::MyDTI : MtDTI
{
};

struct __cppobj rEffectList::MyDTI : MtDTI
{
};

typedef rEffectList::EFL_INDEX rEffectList::EFL_INDEX_0;

struct rEffectList::EFL_INDEX
{
  unsigned __int32 JointIndex : 8;
  unsigned __int32 GeneratorParamOffset : 24;
  unsigned __int32 ParticleType : 8;
  unsigned __int32 ParticleParamOffset : 24;
  unsigned __int32 GeneratorType : 4;
  unsigned __int32 LifeType : 4;
  unsigned __int32 LifeParamOffset : 24;
  unsigned __int32 MoveType : 4;
  unsigned __int32 ParticleAlternativeFlag : 4;
  unsigned __int32 MoveParamOffset : 24;
};

typedef rEffectList::EFL_PARAM_RPATH rEffectList::EFL_PARAM_RPATH_0;

struct rEffectList::EFL_PARAM_RPATH
{
  MT_CHAR ResourcePath[64];
};

typedef rEffectList::EFL_PARAM_BOUNDARY rEffectList::EFL_PARAM_BOUNDARY_0;

struct rEffectList::EFL_PARAM_BOUNDARY
{
  MtAABB BoundingBox;
  f32 BoundingRadius;
  f32 BoundingDistanceSQ;
  f32 Boundary;
  u32 ParamBoundary322c;
};

typedef rEffectList::EFL_PARAM_CULLING rEffectList::EFL_PARAM_CULLING_0;

struct rEffectList::EFL_PARAM_CULLING
{
  unsigned __int32 CullingFlag : 8;
  unsigned __int32 CullingRotAxisType : 4;
  unsigned __int32 CullingRotOrder : 4;
  unsigned __int32 CullingOptionFlag : 16;
  MtFloat3 CullingRot;
  f32 CullingDistNearStart;
  f32 CullingDistNearEnd;
  f32 CullingDistFarStart;
  f32 CullingDistFarEnd;
  f32 CullingAngleStart;
  f32 CullingAngleEnd;
  f32 CullingRate;
  f32 OcclusionRadius;
};

typedef rEffectList::EFL_PARAM_LEVEL_CORRECTION rEffectList::EFL_PARAM_LEVEL_CORRECTION_0;

struct rEffectList::EFL_PARAM_LEVEL_CORRECTION
{
  u32 Type;
  s32 Attenuation;
  f32 LevelMin;
  f32 LevelMax;
  MtFloat3 Color;
  u32 KeyframeRangeParamOffset;
};

typedef rEffectList::EFL_PARAM_COLL rEffectList::EFL_PARAM_COLL_0;

struct rEffectList::EFL_PARAM_COLL
{
  unsigned __int32 CollType : 8;
  unsigned __int32 CollFlag : 8;
  unsigned __int32 CollCancelFrame : 8;
  unsigned __int32 BounceReactionType : 4;
  unsigned __int32 FinishReactionType : 4;
  f32 CollRadiusAdd;
  MtRangeF CollRadius;
  MtRangeF BounceRate;
  MtRangeU16 BounceNum;
  unsigned __int32 BounceEffectParamOffset : 16;
  unsigned __int32 FinishEffectParamOffset : 16;
  f32 HeightOffset;
  u32 ParamColl3224;
  u32 ParamColl3228;
  u32 ParamColl322c;
};

typedef rEffectList::EFL_PARAM_SUB_EFFECT rEffectList::EFL_PARAM_SUB_EFFECT_0;

struct rEffectList::EFL_PARAM_SUB_EFFECT
{
  MT_CHAR EffectPath[64];
  u32 GroupFlag;
  u32 MaterialFlag;
  unsigned __int32 AxisType : 4;
  unsigned __int32 Order : 4;
  unsigned __int32 SerialEffectType : 4;
  unsigned __int32 SerialEffectOptionFlag : 4;
  unsigned __int32 SerialEffectWaitFrame : 16;
  s32 SerialEffectParentListNo;
};

typedef rEffectList::EFL_JOINT_INDEX rEffectList::EFL_JOINT_INDEX_0;

struct rEffectList::EFL_JOINT_INDEX
{
  u32 JointParamOffset;
};

typedef rEffectList::EFL_PARAM_ANGLE_RANGE rEffectList::EFL_PARAM_ANGLE_RANGE_0;

struct rEffectList::EFL_PARAM_ANGLE_RANGE
{
  MtRangeF Angle[3];
  MtRangeF AngleAdd[3];
  f32 AngleAddCoef;
  s32 AngleRandomNo;
  u32 ParamAngle3238;
  u32 ParamAngle323c;
};

typedef rEffectList::EFL_UNIT rEffectList::EFL_UNIT_0;

struct rEffectList::EFL_UNIT
{
  u32 UnitOptionFlag;
  unsigned __int32 DrawView : 16;
  unsigned __int32 BoundaryType : 4;
  unsigned __int32 BoundaryFlag : 4;
  unsigned __int32 Unit0807 : 8;
  unsigned __int32 BoundaryParamOffset : 16;
  unsigned __int32 SerialEffectParamOffset : 16;
  unsigned __int32 ColorBlendRate : 16;
  unsigned __int32 ColorID : 8;
  unsigned __int32 Unit080f : 8;
};

typedef rEffectList::EFL_PARTICLE_CUSTOM rEffectList::EFL_PARTICLE_CUSTOM_0;

struct __cppobj rEffectList::EFL_PARTICLE_DRAW_COMMON : rEffectList::EFL_PARTICLE_COMMON_0
{
  unsigned __int32 ColorFlag : 8;
  unsigned __int32 KeyframePatSpeedParamFlag : 1;
  unsigned __int32 PDrawCommon0741 : 7;
  unsigned __int32 KeyframeColorParamOffset : 16;
  unsigned __int32 KeyframePatNoParamOffset : 16;
  unsigned __int32 PDrawCommon1646 : 16;
  MtColor Color[2];
};

typedef rEffectList::EFL_PARTICLE_DRAW_COMMON rEffectList::EFL_PARTICLE_DRAW_COMMON_0;

struct __cppobj rEffectList::EFL_PARTICLE_PAT_COMMON : rEffectList::EFL_PARTICLE_DRAW_COMMON_0
{
  unsigned __int32 AnimFlag : 16;
  unsigned __int32 SeqNoMin : 8;
  unsigned __int32 SeqNoRange : 8;
  unsigned __int32 PatNoMin : 16;
  unsigned __int32 PatNoRange : 16;
  f32 PatSpeed;
  f32 PatNoMax;
};

typedef rEffectList::EFL_PARTICLE_PAT_COMMON rEffectList::EFL_PARTICLE_PAT_COMMON_0;

struct __cppobj rEffectList::EFL_PARTICLE_PRIM_COMMON : rEffectList::EFL_PARTICLE_PAT_COMMON_0
{
  MtPoint PatCenter;
  unsigned __int32 FresnelFactorFix : 16;
  unsigned __int32 FresnelBiasFix : 16;
  f32 FresnelExponent;
  MT_CHAR TexturePath[3][64];
  MT_CHAR AnimPath[64];
};

typedef rEffectList::EFL_PARTICLE_PRIM_COMMON rEffectList::EFL_PARTICLE_PRIM_COMMON_0;

struct __cppobj rEffectList::EFL_PARTICLE_CUSTOM : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  unsigned __int32 CustomType : 8;
  unsigned __int32 PCustom08161 : 8;
  unsigned __int32 PCustom16162 : 16;
  u32 CustomFlag;
  MtEaseCurve CustomCurve;
  s32 CustomParamS[8];
  f32 CustomParamF[8];
  MtRange CustomRangeParamS[4];
  MtRangeF CustomRangeParamF[4];
};

typedef rEffectList::EFL_PARAM_LINE_FIX rEffectList::EFL_PARAM_LINE_FIX_0;

struct rEffectList::EFL_PARAM_LINE_FIX
{
  MtRangeF ModelScale[3];
  MtRangeF ModelScaleAdd[3];
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 ParamLineFix0461 : 4;
  unsigned __int32 ParamLineFix1662 : 16;
  f32 RotAddCoef;
  u32 KeyframeModelScaleParamOffset;
  u32 KeyframeRotParamOffset;
};

typedef rEffectList::EFL_PARAM_LINE_LENGTH rEffectList::EFL_PARAM_LINE_LENGTH_0;

struct rEffectList::EFL_PARAM_LINE_LENGTH
{
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 ParamLineFix0431 : 4;
  unsigned __int32 KeyframeLengthParamOffset : 16;
  f32 RotAddCoef;
  MtRangeF Length;
  MtRangeF LengthAdd;
  f32 LengthAddCoef;
  u32 KeyframeRotParamOffset;
};

typedef rEffectList::EFL_PARAM_CLOTH_CHAIN rEffectList::EFL_PARAM_CLOTH_CHAIN_0;

struct rEffectList::EFL_PARAM_CHAIN
{
  unsigned __int32 OptionFlag : 16;
  unsigned __int32 PreUpdateLoopNum : 16;
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 BlendRotAxisType : 4;
  unsigned __int32 BlendRotOrder : 4;
  unsigned __int32 HoldPosNum : 8;
  unsigned __int32 ParamChain0807 : 8;
  MtRangeF Length;
  MtRangeF LengthAdd;
  MtRangeF BlendRate;
  MtRangeF Acceleration;
  MtRangeF FrameInf;
  MtRangeF VertexInf;
  MtRangeF Rot[3];
  MtRangeF BlendRot[3];
  MtRangeF ForceRate;
  MtRangeF ForceVertexAttenuateRate;
  f32 StretchScale;
  f32 ShrinkCoef;
  f32 LengthAddCoef;
  unsigned __int32 KeyframeLengthParamOffset : 16;
  unsigned __int32 KeyframeBlendRateParamOffset : 16;
  u32 KeyframeRotParamOffset;
  u32 KeyframeBlendRotParamOffset;
};

typedef rEffectList::EFL_PARAM_CHAIN rEffectList::EFL_PARAM_CHAIN_0;

struct __cppobj rEffectList::EFL_PARAM_CLOTH_CHAIN : rEffectList::EFL_PARAM_CHAIN_0
{
  MtRangeU16 ConstOffFrame;
  MtRangeU16 DistConvFrame;
  MtRangeF DistExpansion;
  MtRangeF SubRange[3];
  u32 SubRangeType;
  unsigned __int32 SubRangeDivideNum : 16;
  unsigned __int32 ClothOptionFlag : 8;
  unsigned __int32 ClothChain08cf : 8;
};

typedef rEffectList::EFL_PARAM_CLOTH_CURVE rEffectList::EFL_PARAM_CLOTH_CURVE_0;

struct rEffectList::EFL_PARAM_CLOTH_STRAIGHT
{
  MtRangeF SubRange[3];
  u32 SubRangeType;
  unsigned __int32 SubRangeDivideNum : 16;
  unsigned __int32 ClothStraight161e : 16;
};

typedef rEffectList::EFL_PARAM_CLOTH_STRAIGHT rEffectList::EFL_PARAM_CLOTH_STRAIGHT_0;

struct __cppobj rEffectList::EFL_PARAM_CLOTH_CURVE : rEffectList::EFL_PARAM_CLOTH_STRAIGHT_0
{
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 CurveType : 4;
  unsigned __int32 CurveOptionFlag : 16;
  u32 KeyframeRotParamOffset;
  MtRangeF CurveCoef;
  MtEaseCurve VertexAmpCurve;
  f32 RotAddCoef;
  u32 ParamLineFix326c;
};

struct __cppobj rEffectList::EFL_PARAM_CLOTH_ZIGZAG : rEffectList::EFL_PARAM_CLOTH_CURVE_0
{
  MtRangeF VertexAmplitudeX;
  MtRangeF VertexAmplitudeY;
  MtRangeF VertexAmplitudeZ;
  MtRangeU16 VertexUpdateFrame;
  u32 KeyframeModelScaleParamOffset;
  MtRangeF ModelScale[3];
  MtRangeF ModelScaleAdd[3];
};

struct rEffectList::EFL_PARAM_TEX_SCROLL_BASE
{
  MtRangeF TexScrollOffsetU;
  MtRangeF TexScrollOffsetV;
  MtRangeF TexScrollSpeedU;
  MtRangeF TexScrollSpeedV;
  f32 TexScrollSpeedCoef;
  f32 ParamTexScroll3224;
  f32 ParamTexScroll3228;
  f32 ParamTexScroll322c;
};

typedef rEffectList::EFL_PARAM_TEX_SCROLL_BASE rEffectList::EFL_PARAM_TEX_SCROLL_BASE_0;

struct __cppobj rEffectList::EFL_PARAM_TEX_SCROLL : rEffectList::EFL_PARAM_TEX_SCROLL_BASE_0
{
  u32 KeyframeTexScrollUParamOffset;
  u32 KeyframeTexScrollVParamOffset;
  u32 KeyframeTexScrollSpeedUParamFlag;
  u32 KeyframeTexScrollSpeedVParamFlag;
};

struct rEffectList::EFL_PARAM_LINE_FIX_END
{
  MtRangeF ReleaseDist;
  u32 ParamLineFixEnd3208;
  u32 ParamLineFixEnd320c;
};

struct __cppobj rEffectList::EFL_PARAM_LINE_ZIGZAG : rEffectList::EFL_PARAM_LINE_LENGTH_0
{
  MtRangeF VertexAmplitudeX;
  MtRangeF VertexAmplitudeY;
  MtRangeF VertexAmplitudeZ;
  MtRangeU16 VertexUpdateFrame;
  u32 KeyframeModelScaleParamOffset;
  MtEaseCurve VertexAmpCurve;
  unsigned __int32 CurveOptionFlag : 16;
  unsigned __int32 ParamLineZigzag167a : 16;
  u32 ParamLineZigzag327c;
  MtRangeF ModelScale[3];
  MtRangeF ModelScaleAdd[3];
};

struct __cppobj rEffectAnim::MyDTI : MtDTI
{
};

typedef rEffectAnim::SEQ_PAT rEffectAnim::SEQ_PAT_0;

struct rEffectAnim::SEQ_PAT::$D243327C5E11F6C093566621FDB1A86D::$CC9D742CA3B8F2AEE6851E312484ABCE
{
  s16 U;
  s16 V;
  s16 W;
  s16 H;
};

union rEffectAnim::SEQ_PAT::$D243327C5E11F6C093566621FDB1A86D
{
  rEffectAnim::SEQ_PAT::$D243327C5E11F6C093566621FDB1A86D::$CC9D742CA3B8F2AEE6851E312484ABCE _anon_0;
  u64 Rect;
};

struct rEffectAnim::SEQ_PAT
{
  rEffectAnim::SEQ_PAT::$D243327C5E11F6C093566621FDB1A86D _anon_0;
  f32 U0;
  f32 V0;
  f32 U1;
  f32 V1;
};

struct __cppobj rEffectStrip::MyDTI : MtDTI
{
};

typedef rEffectStrip::PARTS_PARAM rEffectStrip::PARTS_PARAM_0;

struct rEffectStrip::PARTS_PARAM
{
  u32 VertexNum;
  u32 IndexNum;
};

typedef rEffectStrip::VERTEX_PARAM rEffectStrip::VERTEX_PARAM_0;

struct rEffectStrip::VERTEX_PARAM::$DC35C99487B5383C826AB6FBC3D6E4C5::$B9BFB162EDC7D07727530A75906CBF16
{
  unsigned __int32 BlendIndex0 : 8;
  unsigned __int32 BlendIndex1 : 8;
  unsigned __int32 BlendIndex2 : 8;
  unsigned __int32 BlendIndex3 : 8;
};

union rEffectStrip::VERTEX_PARAM::$DC35C99487B5383C826AB6FBC3D6E4C5
{
  u32 BlendIndices;
  rEffectStrip::VERTEX_PARAM::$DC35C99487B5383C826AB6FBC3D6E4C5::$B9BFB162EDC7D07727530A75906CBF16 _anon_0;
};

struct rEffectStrip::VERTEX_PARAM::$2711F18499668360AED4AF59DDD3B745::$CE665ADC6F65E8570FF9DD57D1A7312F
{
  unsigned __int32 BlendWeight0 : 8;
  unsigned __int32 BlendWeight1 : 8;
  unsigned __int32 BlendWeight2 : 8;
  unsigned __int32 BlendWeight3 : 8;
};

union rEffectStrip::VERTEX_PARAM::$2711F18499668360AED4AF59DDD3B745
{
  u32 BlendWeights;
  rEffectStrip::VERTEX_PARAM::$2711F18499668360AED4AF59DDD3B745::$CE665ADC6F65E8570FF9DD57D1A7312F _anon_0;
};

struct rEffectStrip::VERTEX_PARAM
{
  MtFloat3 Pos;
  rEffectStrip::VERTEX_PARAM::$DC35C99487B5383C826AB6FBC3D6E4C5 _anon_0;
  MtFloat3 Norm;
  rEffectStrip::VERTEX_PARAM::$2711F18499668360AED4AF59DDD3B745 _anon_1;
};

typedef rEffectStrip::INDEX_PARAM rEffectStrip::INDEX_PARAM_0;

struct rEffectStrip::INDEX_PARAM
{
  unsigned __int32 VertexNo0 : 16;
  unsigned __int32 VertexNo1 : 16;
  unsigned __int32 VertexNo2 : 16;
  unsigned __int32 IndexParam3206 : 16;
};

struct rEffectStrip::EFS_HEADER
{
  u32 Magic;
  u32 Version;
  u32 ParamBuffSize;
  u32 EfsHeader320c;
  u32 PartsNum;
  u32 JointNum;
  u32 TotalVertexNum;
  u32 TotalIndexNum;
};

typedef nEffect::KEYFRAME_INDEX nEffect::KEYFRAME_INDEX_0;

struct nEffect::KEYFRAME_INDEX
{
  unsigned __int32 KeyframeNum : 8;
  unsigned __int32 FixAngleFlag : 1;
  unsigned __int32 SingleParamFlag : 1;
  unsigned __int32 Reserved0601 : 6;
  unsigned __int32 Reserved0802 : 8;
  unsigned __int32 RefType : 3;
  unsigned __int32 InpType : 3;
  unsigned __int32 LoopFlag : 1;
  unsigned __int32 InitOnlyFlag : 1;
};

struct nEffect::SimpleCurve
{
  f32 mX[3];
  u32 mLoopFlag;
  f32 mY[4];
};

struct __cppobj cParticleManager::MyDTI : MtDTI
{
};

struct __cppobj cParticleGenerator : cParticleManager
{
  cParticle *mpMoveTopParticle;
  cParticle *mpMoveBotParticle;
  cParticle *mpStockTopParticle;
  cParticle *mpStockBotParticle;
  u32 mParticleStatus;
  u32 mParticleLifeOffset;
  u32 mParticleMoveOffset;
  u32 mParticleCullingOffset;
  unsigned __int32 mParticleNum : 16;
  unsigned __int32 mParticleMoveNum : 16;
  unsigned __int32 mParticleSize : 16;
  unsigned __int32 mParticlePosSize : 16;
  unsigned __int32 mParticleLifeSize : 16;
  unsigned __int32 mParticleMoveSize : 16;
  unsigned __int32 mParticleCullingSize : 16;
  unsigned __int32 mParticleFlagBase : 16;
  unsigned __int32 mStripParentNo : 16;
  unsigned __int32 mSetTimer : 16;
  unsigned __int32 mRangeDivideNum : 16;
  unsigned __int32 mRangeType : 8;
  unsigned __int32 mRangeDirType : 8;
  unsigned __int32 mRangeDisperseType : 8;
  unsigned __int32 mLODType : 4;
  unsigned __int32 mAxisType : 4;
  unsigned __int32 mParticleRotOrder : 4;
  unsigned __int32 mParticleRotAxisType : 4;
  unsigned __int32 mParticleDirAxisType : 4;
  unsigned __int32 mGenerator043b : 4;
  unsigned __int32 mMoveRotOrder : 4;
  unsigned __int32 mMoveRotAxisType : 4;
  unsigned __int32 mCurDataIndex : 1;
  unsigned __int32 mOldDataIndex : 1;
  unsigned __int32 mSynchroUnitFlag : 1;
  unsigned __int32 mRotInitFlag : 1;
  unsigned __int32 mRotLocalFlag : 1;
  unsigned __int32 mModelScaleAfterFlag : 1;
  unsigned __int32 mPathInitFlag : 1;
  unsigned __int32 mPatRotFlag : 1;
  unsigned __int32 mVolumeBlendRate : 8;
  unsigned __int32 mVolumeBlendRateRange : 8;
  rEffectList::EFL_PARAM_COLL_0 *mpCollParam;
  u32 mPrimAttribute;
  f32 mParticleScaleBase;
  f32 mParticleScale;
  __attribute__((aligned(16))) MtMatrix mParticleScaleWmat;
  MtVector3 mParticle3DScale;
  MtVector3 mForceVec;
  MtVector3 mRangeScale;
  MtColor mColor[2];
  MtColor mPlaceColor[2];
  MtColor *mpOrgColor;
  MtColor *mpOrgPlaceColor;
  MtRangeF mIntensity;
  MtRangeF *mpOrgIntensity;
  unsigned __int32 mColorFlag : 8;
  unsigned __int32 mDecreaseWaitTimer : 8;
  unsigned __int32 mDecreaseModNum : 8;
  unsigned __int32 mSetNumCorrectFlag : 1;
  unsigned __int32 mEachFrameMode : 1;
  unsigned __int32 mClothChainFlag : 1;
  unsigned __int32 mLiteParticleFlag : 1;
  unsigned __int32 mSynchroUnitLimitFlag : 1;
  unsigned __int32 mGenerator03e7 : 3;
  u32 mSetParticleTotal;
  u32 mSetFrameTotal;
  f32 mSetFrameOfs;
  f32 mIntervalFrameOfs;
  unsigned __int32 mSetNumKeyframeRandom : 16;
  unsigned __int32 mLoopCtr : 16;
  f32 mSubPosDistCoef;
  u8 *mpExtendedBuff;
  cEffectCulling *mpCulling;
  cEffectPath *mpPath;
  cEffectShadeLight *mpShadeLight;
  cClothVertex *mpClothVertex;
  bool mStencilTest;
};

struct cParticle
{
  cParticle *mpPrev;
  cParticle *mpNext;
  unsigned __int32 mParticleNo : 16;
  unsigned __int32 mSetNo : 16;
  unsigned __int32 mFlag : 16;
  unsigned __int32 mVolumeBlendRate : 8;
  unsigned __int32 mCurDataIndex : 1;
  unsigned __int32 mOldDataIndex : 1;
  unsigned __int32 mEnableFlag : 1;
  unsigned __int32 mAnimEnableFlag : 1;
  unsigned __int32 mGeneralFlag0 : 1;
  unsigned __int32 mGeneralFlag1 : 1;
  unsigned __int32 mGeneralFlag2 : 1;
  unsigned __int32 mGeneralFlag3 : 1;
  u32 mStatus;
  u32 mTimer;
  nPrim::Material mMaterial;
  __attribute__((aligned(16))) MtVector3 mPos[2];
  f32 mScale[2];
  f32 mScaleAdd;
  cUnit *mpSynchroUnit;
  u32 mIntensity[2];
  f32 mSrcIntensity;
  f32 mSrcIntensityKeyframeRate;
};

struct cEffectCulling
{
  MtVector3 mLocalDir;
  MtVector3 mCullingDir[2];
};

struct cEffectPath
{
  MtVector3 mScale;
  MtFloat3 m3DScale;
  f32 mLengthScale;
};

struct cEffectShadeLight
{
  MtVector3 mOfs;
  MtColor mColor;
  f32 mRange;
  f32 mAttenuation;
  MtFloat3 mOfsKeyframeRate;
  unsigned __int32 mColorKeyframeRate : 16;
  unsigned __int32 mShadeLight162a : 16;
  f32 mRangeKeyframeRate;
};

struct cClothVertex
{
  unsigned __int32 mClothType : 8;
  unsigned __int32 mVertexNum : 8;
  unsigned __int32 mClothVertex0802 : 8;
  unsigned __int32 mClothVertex0803 : 8;
  MtVector3 *mPos;
  u32 mClothVertex3208;
  u32 mClothVertex320c;
};

struct __cppobj cParticleGenerator::MyDTI : MtDTI
{
};

struct cEffectStrip
{
  MtVector3 mOfs;
  unsigned __int32 mPartsNo : 16;
  unsigned __int32 mRno : 8;
  unsigned __int32 mCalcDirFlag : 1;
  unsigned __int32 mCalcWorldDirFlag : 1;
  unsigned __int32 mSkiningFlag : 1;
  unsigned __int32 mPathLoopFlag : 1;
  unsigned __int32 mStripReserved0413 : 4;
  unsigned __int32 mVertexNo : 16;
  unsigned __int32 mVertexNum : 16;
  f32 mBlendRate0;
  f32 mBlendRate1;
};

struct cParticleGenerator::ParticleParam
{
  cEffectStrip mStrip;
  f32 mLifeRate;
  f32 mSetRate;
  uEffect *mpChild;
};

struct cParticleLifeCommon
{
  f32 mLifeRate;
};

struct cParticleMoveCommon
{
  MtVector3 mCurDir;
  unsigned __int32 mMoveRno : 2;
  unsigned __int32 mGravityScaleFlag : 1;
  unsigned __int32 mMoveCommon0100 : 1;
  unsigned __int32 mCollStatus : 4;
  unsigned __int32 mBounceCtr : 8;
  unsigned __int32 mCollCancelTimer : 8;
  unsigned __int32 mForceType : 8;
  f32 mForceRate;
  f32 mCollRadius;
  f32 mBounceRate;
};

struct cParticle:960
{
  cParticle *mpPrev;
  cParticle *mpNext;
  unsigned __int32 mParticleNo : 16;
  unsigned __int32 mSetNo : 16;
  unsigned __int32 mFlag : 16;
  unsigned __int32 mVolumeBlendRate : 8;
  unsigned __int32 mCurDataIndex : 1;
  unsigned __int32 mOldDataIndex : 1;
  unsigned __int32 mEnableFlag : 1;
  unsigned __int32 mAnimEnableFlag : 1;
  unsigned __int32 mGeneralFlag0 : 1;
  unsigned __int32 mGeneralFlag1 : 1;
  unsigned __int32 mGeneralFlag2 : 1;
  unsigned __int32 mGeneralFlag3 : 1;
  u32 mStatus;
  u32 mTimer;
  nPrim::Material mMaterial;
  _BYTE gap28[8];
  MtVector3 mPos[2];
  f32 mScale[2];
  f32 mScaleAdd;
  cUnit *mpSynchroUnit;
  u32 mIntensity[2];
  f32 mSrcIntensity;
  f32 mSrcIntensityKeyframeRate;
};

struct __cppobj __attribute__((aligned(16))) cLineParticle : cParticle:960
{
  MtColor mColor[2][2];
  MtColor mSrcHeadColor;
  MtColor mSrcPlaceColor;
  unsigned __int32 mSrcHeadColorKeyframeRate : 16;
  unsigned __int32 mSrcPlaceColorKeyframeRate : 16;
  unsigned __int32 mLineType : 8;
  unsigned __int32 mLineOfsNum : 8;
  unsigned __int32 mColorPlaceNo : 8;
  unsigned __int32 mColorPlaceType : 4;
  unsigned __int32 mClothType : 4;
};

struct __cppobj cParticleMoveNone : cParticleMoveCommon
{
  cEffectStrip mStrip;
};

struct __cppobj cParticleMoveCustom : cParticleMoveNone
{
};

struct __cppobj uModel::MyDTI : MtDTI
{
};

struct __cppobj uModel::Joint::MyDTI : MtDTI
{
};

struct __cppobj uModel::Constraint::MyDTI : MtDTI
{
};

struct __cppobj uModel::Motion::MyDTI : MtDTI
{
};

struct __cppobj uConstraint::cConstraint : uModel::Constraint
{
  uConstraint *mpParent;
};

struct __cppobj __attribute__((aligned(8))) uConstraint : cUnit
{
  uConstraint::cConstraint mConstraint;
  uConstraint *mpPrevCns;
  uConstraint *mpNextCns;
  uModel::Joint *mpParentJnt;
  f32 mBlendWeight;
  u32 mID;
  s32 mOrder;
  u32 mPri;
  uModel *mpModel;
  f32 mBlendSpeed;
  f32 mBlend;
  bool mIgnoreRate;
  bool mEnable;
};

struct __cppobj uConstraint::MyDTI : MtDTI
{
};

struct __cppobj uConstraint::cConstraint::MyDTI : MtDTI
{
};

struct __cppobj rMotionList::MyDTI : MtDTI
{
};

struct __cppobj cParticleLifeFrame : cParticleLifeCommon
{
  unsigned __int32 mAppearFrame : 16;
  unsigned __int32 mKeepFrame : 16;
  unsigned __int32 mVanishFrame : 16;
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mKeepHoldTimer : 16;
  unsigned __int32 mLifeRno : 8;
  unsigned __int32 mKeepHoldFlag : 1;
  unsigned __int32 mLifeFrame070f : 7;
};

struct __cppobj cParticleLifeKeyframe : cParticleLifeCommon
{
  f32 mLifeRateKeyframeRate;
  unsigned __int32 mVanishFrame : 16;
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mLifeRno : 8;
  unsigned __int32 mLifeKeyframe080d : 8;
  unsigned __int32 mLifeKeyframe080e : 8;
  unsigned __int32 mLifeKeyframe080f : 8;
};

struct __cppobj cParticleLifeCurveframe : cParticleLifeCommon
{
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mLifeRno : 8;
  unsigned __int32 mLifeCurveframe0807 : 8;
  unsigned __int32 mLifeCurveframe1608 : 16;
  unsigned __int32 mVanishFrame : 16;
  unsigned __int32 mCurveFrame : 16;
  unsigned __int32 mCurveTimer : 16;
  nEffect::SimpleCurve mLifeRateCurve;
};

struct __cppobj __attribute__((aligned(8))) cEffectUnitGenerator : cParticleGenerator
{
};

struct __cppobj cEffectUnitGenerator::MyDTI : MtDTI
{
};

struct cClothStraight
{
  MtVector3 mSubOfs;
};

struct __cppobj cClothChain : cClothStraight
{
  MtVector3 mDir[2][2];
  f32 mLength[2];
  f32 mLengthAdd;
  unsigned __int32 mConstOffTimer : 16;
  unsigned __int32 mClothChain165e : 16;
  unsigned __int32 mStatus : 16;
  unsigned __int32 mPreUpdateLoopNum : 16;
  f32 mAcceleration;
  f32 mFrameInf;
  f32 mVertexInf;
  MtVector3 mLocalDir[2];
  MtFloat3 mRotKeyframeRate[2];
  f32 mDistConvRate;
  f32 mForceRate;
  f32 mForceVertexAttenuateCoef;
  u32 mClothChain32b4;
  u32 mClothChain32b8;
  u32 mClothChain32bc;
};

struct __cppobj cClothCurve : cClothStraight
{
  MtVector3 mDir[2];
  MtVector3 mRot;
  MtVector3 mRotAdd;
  f32 mCurveCoef;
  unsigned __int32 mCurveType : 8;
  unsigned __int32 mClothCurve084d : 8;
  unsigned __int32 mCurveStatus : 16;
  u32 mClothCurve3258;
  u32 mClothCurve325c;
};

struct __cppobj cClothZigzag : cClothCurve
{
  MtVector3 mModelScale[2];
  MtVector3 mModelScaleAdd;
  MtVector3 mVertexAmplitude;
  u32 mVertexRandCtr;
  u32 mVertexUpdateTimer;
  u32 mClothZigzag3298;
  u32 mClothZigzag329c;
};

struct cSynchronization::BoundaryParam
{
  MtVector3 mPos;
  MtAABB mBox;
  f32 mRadius;
  f32 mDistanceSQ;
  unsigned __int32 mRadiusEnable : 8;
  unsigned __int32 mBoxEnable : 8;
  unsigned __int32 mDistanceEnable : 8;
  unsigned __int32 mType : 8;
  u32 mPadding323c;
};

struct cSynchronization
{
  cUnit *mpParent;
  unsigned __int32 mDrawMode : 16;
  unsigned __int32 mDrawView : 16;
  u32 mCullingFlag;
  f32 mCullingDistSq;
  __attribute__((aligned(16))) MtVector3 mCullingPos;
  cSynchronization::BoundaryParam mBoundaryParam;
};

struct cParticleAnimParam
{
  u32 mAnimFlag;
  u32 mSeqNo;
  f32 mPatNoRate;
  f32 mPatSpeed;
  f32 mKeyframeRate;
};

struct cEffectAnim
{
  unsigned __int32 mAnimFlag : 16;
  unsigned __int32 mSeqNo : 16;
  unsigned __int32 mPatNum : 16;
  unsigned __int32 mPatNoMax : 16;
  f32 mPatNoRate;
  f32 mPatSpeed;
};

struct __cppobj cMatrixParticle : cParticle
{
  MtVector3 mRot[2];
  MtVector3 mDir[2];
  MtVector3 mRotAdd;
};

struct cEffectLineLength
{
  MtVector3 mRot[2];
  MtVector3 mRotAdd;
  f32 mLength[2];
  f32 mLengthAdd;
  u32 mLineLength323c;
};

struct cEffectChain
{
  f32 mLength;
  f32 mLengthAdd;
  f32 mTotalLength;
  f32 mAcceleration;
  f32 mFrameInf;
  f32 mVertexInf;
  f32 mBlendRate;
  unsigned __int32 mStatus : 12;
  unsigned __int32 mMode : 4;
  unsigned __int32 mOfsNum : 8;
  unsigned __int32 mHoldOfsNum : 8;
  unsigned __int32 mLengthKeyframeTimer : 16;
  unsigned __int32 mRotKeyframeTimer : 16;
  unsigned __int32 mBlendRotKeyframeTimer : 16;
  unsigned __int32 mBlendRateKeyframeTimer : 16;
  f32 mForceRate;
  f32 mForceVertexAttenuateCoef;
  MtFloat3 mRotKeyframeRate;
  MtFloat3 mBlendRotKeyframeRate;
  f32 mBlendRateKeyframeRate;
  f32 mOriginalLength;
  MtVector3 mWorldDir;
  MtVector3 mLocalDir;
  MtVector3 mLocalBlendDir;
  MtVector3 mWorldPos;
};

struct cEffectValueU32
{
  u32 mValue0;
  u32 mValue1;
};

union cParticleMoveBase::$63142D927B2254E13179925D9DF7BD17
{
  f32 mRotKeyframeRate[3];
  u32 mRotKeyframeRandom[3];
};

struct __cppobj cParticleMoveBase : cParticleMoveCommon
{
  f32 mSpeed;
  f32 mAcceleration;
  f32 mGravity;
  f32 mFallSpeed;
  cParticleMoveBase::$63142D927B2254E13179925D9DF7BD17 _anon_0;
  f32 mSpeedKeyframeRate;
  f32 mFallSpeedKeyframeRate;
  unsigned __int32 mMoveStatus : 16;
  unsigned __int32 mReleaseTimer : 16;
  f32 mDistance[2];
};

struct __cppobj cParticleMovePathStrip : cParticleMoveBase
{
  cEffectStrip mStrip;
  MtVector3 mRot;
  f32 mDistanceRate[2];
  unsigned __int32 mReachFrame : 16;
  unsigned __int32 mReachTimer : 16;
  u32 mMovePathStrip327c;
};

struct __cppobj cParticleMovePathChain : cParticleMoveBase
{
  MtVector3 mOfs;
  MtVector3 mRot;
};

struct __cppobj cParticleMovePathKeyframe : cParticleMoveBase
{
  cEffectStrip mStrip;
  MtVector3 mRot;
  MtFloat3 mOfsKeyframeRate;
  u32 mMovePathKeyframe327c;
};

struct __cppobj cParticleMovePathLine : cParticleMoveBase
{
  cEffectStrip mStrip;
  MtVector3 mRot;
};

struct __cppobj cParticleMoveAdd : cParticleMoveBase
{
  MtVector3 mSpeedVec;
  MtVector3 mAccelerationVec;
};

struct __cppobj cParticleMoveMul : cParticleMoveBase
{
  MtVector3 mSpeedVec;
};

struct __cppobj cParticleMoveSpin : cParticleMoveMul
{
  MtVector3 mCircleCenterPos;
  MtVector3 mCircleRot;
  MtVector3 mCircleRotAdd;
  f32 mCircleRadius;
  f32 mCircleRadiusAdd;
  f32 mCircleAngle;
  f32 mCircleAngleAdd;
};

struct __cppobj cParticleNode : cParticleManager
{
  MtMatrix mParam[4];
  MtMatrix mMatrix;
  nPrim::Material mMaterial;
  unsigned __int32 mParticleNum : 16;
  unsigned __int32 mParticleMoveNum : 16;
  f32 mLifeRate;
  f32 mParticleScaleBase;
  f32 mParticleScale;
  f32 mParticleSpeed;
  f32 mTime;
  MtPoint mPatPoint;
  unsigned __int32 mPatSize : 16;
  unsigned __int32 mPatColNum : 16;
  unsigned __int32 mPatTotalNum : 16;
  unsigned __int32 mPatNoMax : 8;
  unsigned __int32 mNodeLoopFlag : 1;
  unsigned __int32 mLoopStartFlag : 1;
  unsigned __int32 mPatNoInpFlag : 1;
  unsigned __int32 mColorVecFlag : 1;
  unsigned __int32 mNode0416f : 4;
  unsigned __int32 mNodeFrame : 16;
  unsigned __int32 mNodeLoopNum : 16;
  unsigned __int32 mNodeLoopCtr : 16;
  unsigned __int32 mWaitTimer : 16;
  unsigned __int32 mIntensity : 16;
  unsigned __int32 mNodeInpType : 8;
  unsigned __int32 mNodeDrawType : 8;
  unsigned __int32 mNodeRangeType : 8;
  unsigned __int32 mNode0817d : 8;
  unsigned __int32 mNode0817e : 8;
  unsigned __int32 mNode0817f : 8;
  f32 mDrawVolume[8];
};

struct __cppobj cParticleNode::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uEffect2D : uCoord
{
  unsigned __int32 mStatus : 16;
  unsigned __int32 mDrawPass : 8;
  unsigned __int32 mLoopNum : 8;
  f32 mBaseFps;
  f32 mDeltaTimeCoef;
  u32 mTimer;
  f32 mTimeInterpolationRate;
  s32 mIntTimeInterpolationRate;
  u32 mDrawBuffSize;
  u32 mDrawPriority;
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mLoopFrame : 16;
  unsigned __int32 mLifeFrame : 16;
  unsigned __int32 mWaitFrame : 16;
  unsigned __int32 mGeneratorNum : 16;
  unsigned __int32 mGeneratorMoveNum : 16;
  u32 mGeneratorBuffSize;
  cParticle2DGenerator *mGenerator;
  rEffect2D *mpEffect2D;
  u32 mGroupFlag;
  u32 mMaterialFlag;
  MtFloat2 mScreenPos;
  unsigned __int32 mKillNo : 16;
  unsigned __int32 mDrawTargetNum : 4;
  unsigned __int32 mEndType : 4;
  unsigned __int32 mSizeAdjustType : 4;
  unsigned __int32 mCreateFlag : 1;
  unsigned __int32 mRTFlag : 1;
  unsigned __int32 mEffect2D024b : 2;
  f32 mEffectScale;
  MtColor mRTBaseMapColor;
  MtColor mRTNormalMapColor;
  u32 mRTMaskMapAlpha;
  f32 mAlphaRate;
  nDraw::Texture *mpTempTexture[4];
  nDraw::Texture *mpDepthStencil[4];
};

typedef rEffect2D::E2D_GENERATOR rEffect2D::E2D_GENERATOR_0;

typedef rEffect2D::E2D_PARTICLE_COMMON rEffect2D::E2D_PARTICLE_COMMON_0;

typedef rEffect2D::E2D_LIFE_FRAME rEffect2D::E2D_LIFE_FRAME_0;

typedef rEffect2D::E2D_MOVE_COMMON rEffect2D::E2D_MOVE_COMMON_0;

struct cParticle2DGenerator
{
  uEffect2D *mpOwner;
  unsigned __int32 mGeneratorNo : 16;
  unsigned __int32 mListNo : 16;
  unsigned __int32 mStatus : 16;
  unsigned __int32 mParticleTotalSize : 16;
  unsigned __int32 mParticleNum : 16;
  unsigned __int32 mParticleMoveNum : 16;
  __attribute__((aligned(16))) MtMatrix mLmat;
  MtVector3 mWorldPos;
  MtFloat2 mScreenPos;
  rEffect2D::ResourceInfo *mpResourceInfo;
  unsigned __int32 mGeneratorType : 8;
  unsigned __int32 mParticleType : 8;
  unsigned __int32 mLifeType : 8;
  unsigned __int32 mMoveType : 8;
  rEffect2D::E2D_GENERATOR_0 *mpGeneratorParam;
  rEffect2D::E2D_PARTICLE_COMMON_0 *mpParticleParam;
  rEffect2D::E2D_LIFE_FRAME_0 *mpLifeParam;
  rEffect2D::E2D_MOVE_COMMON_0 *mpMoveParam;
  u32 mRandCtr;
  unsigned __int32 mStartRandCtr : 16;
  unsigned __int32 mWaitFrame : 16;
  unsigned __int32 mParticlePosOffset : 16;
  unsigned __int32 mParticleLifeOffset : 16;
  unsigned __int32 mParticleMoveOffset : 16;
  unsigned __int32 mRno : 8;
  unsigned __int32 mColorCorrectType : 4;
  unsigned __int32 mCurDataIndex : 1;
  unsigned __int32 mOldDataIndex : 1;
  unsigned __int32 mEachFrameMode : 1;
  unsigned __int32 mKeepHoldFlag : 1;
  cParticle2D *mpMoveTopParticle;
  cParticle2D *mpMoveBotParticle;
  cParticle2D *mpStockTopParticle;
  cParticle2D *mpStockBotParticle;
  u8 *mpParticleBuff;
  u32 mPrimAttribute[3];
  u32 mTimer;
  unsigned __int32 mSetTimer : 16;
  unsigned __int32 mLoopCtr : 16;
  u32 mSetParticleTotal;
  u32 mSetFrameTotal;
  f32 mSetFrameOfs;
  f32 mIntervalFrameOfs;
  u32 mSetNumKeyframeRandom;
  unsigned __int32 mColorFlag : 8;
  unsigned __int32 mGenerator08cd : 8;
  unsigned __int32 mGenerator08ce : 8;
  unsigned __int32 mGenerator08cf : 8;
  MtColor mColor[2];
  MtColor mPlaceColor[2];
  MtColor *mpOrgColor;
  MtColor *mpOrgPlaceColor;
  u32 mGeneratorOptionFlag;
  u32 mGenerator32ec;
};

struct __cppobj rEffect2D : cResource
{
  f32 mBaseFps;
  u8 *mpParamBuff;
  u32 mParamBuffSize;
  u32 mListNum;
  rEffect2D::ResourceInfo *mResourceInfo;
  u32 mResourceInfoNum;
  rRenderTargetTexture *mpRTTexture[3];
  u32 mRTTextureNum;
  rTexture *mpBackTexture[3];
};

struct rEffect2D::ResourceInfo
{
  u32 mStatus;
  rTexture *mpTexture[3];
  cResource *mpChar;
  f32 mTextureInvW;
  f32 mTextureInvH;
};

struct rEffect2D::E2D_GENERATOR
{
  u32 GroupFlag;
  u32 MaterialFlag;
  u32 ParticleNum;
  s32 RandomNo;
  MtFloat3 Ofs;
  MtRangeU16 WaitFrame;
  MtRangeU16 SetNum;
  MtRangeU16 LoopNum;
  MtRangeU16 SetFrame;
  MtRangeU16 IntervalFrame;
  f32 SetFrameDist;
  f32 IntervalFrameDist;
  u32 GeneratorOptionFlag;
  s32 ParentNo;
  MtRangeF Range[2];
  unsigned __int32 RangeType : 8;
  unsigned __int32 RangeDirType : 8;
  unsigned __int32 RangeOptionFlag : 8;
  unsigned __int32 Generator0853 : 8;
  u32 RangeDivideNum;
  MtRangeF RangeDirBlendRate;
  u32 KeyframeSetNumParamOffset;
  u32 KeyframeRangeParamOffset;
  MtRangeF Angle;
};

struct rEffect2D::E2D_PARAM_DRAW
{
  u32 ParticleOptionFlag;
  u32 BlendState;
};

typedef rEffect2D::E2D_PARAM_DRAW rEffect2D::E2D_PARAM_DRAW_0;

struct rEffect2D::E2D_PARTICLE_COMMON
{
  rEffect2D::E2D_PARAM_DRAW_0 DrawTargetParam[3];
  unsigned __int32 ColorFlag : 8;
  unsigned __int32 ColorCorrectType : 4;
  unsigned __int32 ShaderType : 4;
  unsigned __int32 KeyframePatSpeedParamFlag : 1;
  unsigned __int32 ExtractLinePosFlag : 1;
  unsigned __int32 PScaleAdaptedFlag : 1;
  unsigned __int32 PCommon051a : 5;
  unsigned __int32 PCommon081b : 8;
  f32 ScaleAddCoef;
  MtColor Color[2];
  MtRangeF Intensity;
  MtRangeF Scale;
  MtRangeF ScaleAdd;
  unsigned __int32 KeyframeIntensityParamOffset : 16;
  unsigned __int32 KeyframeColorParamOffset : 16;
  unsigned __int32 KeyframeScaleParamOffset : 16;
  unsigned __int32 KeyframePatNoParamOffset : 16;
  unsigned __int32 LevelCorrectionParamOffset : 16;
  unsigned __int32 PCommon164a : 16;
  u32 PCommon324c;
};

struct rEffect2D::E2D_LIFE_FRAME
{
  MtRangeU16 AppearFrame;
  MtRangeU16 KeepFrame;
  MtRangeU16 VanishFrame;
  unsigned __int32 KeepHoldFlag : 1;
  unsigned __int32 KeyframeKeepFrameParamOffset : 15;
  unsigned __int32 KeepHoldFrame : 16;
};

struct rEffect2D::E2D_MOVE_COMMON
{
  MtRangeF Rot;
  MtRangeF Speed;
  MtRangeF GravityX;
  MtRangeF GravityY;
  u32 KeyframeRotParamOffset;
  u32 KeyframeSpeedParamOffset;
  u32 KeyframeFallSpeedParamOffset;
  u32 MCommon322c;
};

struct cParticle2D
{
  cParticle2D *mpPrev;
  cParticle2D *mpNext;
  unsigned __int32 mParticleNo : 16;
  unsigned __int32 mSetNo : 16;
  unsigned __int32 mFlag : 16;
  unsigned __int32 mEnableFlag : 1;
  unsigned __int32 mCurDataIndex : 1;
  unsigned __int32 mOldDataIndex : 1;
  unsigned __int32 mParticle050e : 5;
  unsigned __int32 mParticle080f : 8;
  u32 mStatus;
  u32 mTimer;
  nPrim::Material mMaterial[3];
  MtFloat2 mPos[2];
  f32 mBaseScale;
  f32 mBaseScaleAdd;
  f32 mLifeRate;
  unsigned __int32 mLineType : 8;
  unsigned __int32 mLineOfsNum : 8;
  unsigned __int32 mParticle084e : 8;
  unsigned __int32 mParticle084f : 8;
  u32 mIntensity[2];
  u32 mBaseIntensity;
  f32 mIntensityKeyframeRate;
};

struct __cppobj rRenderTargetTexture : rTexture
{
};

struct __cppobj __attribute__((aligned(16))) uSimpleEffect : uBaseEffect
{
  uSimpleEffect::Particle *mpParticle;
  u32 mParticleNum;
  u32 mParticleCreateNum;
  rVertices *mpVertices;
  rEffectList::ResourceInfo *mpResourceInfo;
  rEffectList::EFL_GENERATOR_0 *mpGeneratorParam;
  rEffectList::EFL_PARTICLE_PRIM_COMMON_0 *mpParticleParam;
  rEffectList::EFL_JOINT_0 *mpJointParam;
  unsigned __int32 mListNo : 16;
  unsigned __int32 mStartRandCtr : 16;
  unsigned __int32 mParticleType : 8;
  unsigned __int32 mDrawPass : 8;
  unsigned __int32 mDrawType : 8;
  unsigned __int32 mShaderType : 4;
  unsigned __int32 mInitFlag : 1;
  unsigned __int32 mOfsInvalidMode : 1;
  unsigned __int32 mSimpleEffect0227 : 2;
  f32 mParticleDeltaTime;
  u32 mPrimAttribute;
  u32 mParticleBuffSize;
  u32 mLightGroupFlag;
  u32 mRandCtr;
  u32 mSimpleEffect323c;
};

union uSimpleEffect::Particle::$D39AE53EC496D3095D21089E3BBF1F8B
{
  f32 mParamF32[6];
  u32 mParamU32[6];
};

struct uSimpleEffect::Particle
{
  int (**_vptr$Particle)(void);
  __attribute__((aligned(16))) MtVector3 mPos;
  uSimpleEffect::Particle *mpPrev;
  uSimpleEffect::Particle *mpNext;
  u32 mParticleNo;
  unsigned __int32 mIntensity : 16;
  unsigned __int32 mVolumeBlendRate : 8;
  unsigned __int32 mEnableFlag : 1;
  unsigned __int32 mUpdateAlphaFlag : 1;
  unsigned __int32 mParticle061f : 6;
  cEffectAnim mAnim;
  nPrim::Material mMaterial;
  f32 mPatNoRate;
  MtColor mColor;
  f32 mBaseAlpha;
  f32 mAlphaRate;
  uSimpleEffect::Particle::$D39AE53EC496D3095D21089E3BBF1F8B _anon_0;
};

struct __cppobj rVertices : cResource
{
  u8 *mpParamBuff;
  u32 mParamBuffSize;
  u32 mVertexNum;
};

typedef const vec_uint2 vec_uint2_arg;

struct vec_uint2
{
  uint32_t body[2];
};

typedef const vec_uint4 vec_uint4_arg;

typedef vec_uint4 fast_uint_vector_type;

typedef vec_uint4_arg fast_uint_vector_arg;

typedef const vec_float2 vec_float2_arg;

typedef const vec_float4 vec_float4_arg;

typedef vec_float4 fast_float_vector_type;

typedef vec_float4_arg fast_float_vector_arg;

typedef vec_float2 vec_float2_ext;

typedef const vec_float2_ext *vec_float2_ext_arg;

typedef const vec_float3_ext *vec_float3_ext_arg;

struct vec_float3_ext
{
  float body[3];
};

typedef vec_float4 vec_float4_ext;

typedef const vec_float4_ext *vec_float4_ext_arg;

struct $7610F0851406DE4707793366F507BBC2
{
  uint16_t output;
  uint8_t channel;
  uint8_t reserved8_1[1];
  int16_t volume;
  uint16_t rerouteCounter;
  uint64_t flag;
  uint64_t reserved64[2];
};

struct SceNgs2RackOption
{
  size_t size;
  char name[16];
  uint32_t flags;
  uint32_t maxGrainSamples;
  uint32_t maxVoices;
  uint32_t maxInputDelayBlocks;
  uint32_t maxMatrices;
  uint32_t maxPorts;
  uint32_t aReserved[20];
};

struct SceNgs2ContextBufferInfo
{
  void *hostBuffer;
  size_t hostBufferSize;
  uintptr_t reserved[5];
  uintptr_t userData;
};

struct __cppobj __attribute__((aligned(8))) rAI : cResource
{
  u32 mTaskPerformanceInfoNum;
  rAI::TaskPerformanceInfo **mpTaskPerformanceInfoList;
  f32 mTaskPerformanceIndicator;
};

struct __cppobj cAIResource : MtObject
{
};

struct __cppobj rAI::TaskPerformanceInfo : cAIResource
{
  MtString mDTIName;
  u32 mOverloadManageType;
  f32 mPerformanceIndicator;
  f32 mAllowTime;
  u32 mLODNum;
  rAI::TaskPerformanceInfo::LOD **mpLODList;
};

struct __cppobj __attribute__((aligned(8))) rAI::TaskPerformanceInfo::LOD : cAIResource
{
  bool mEnablePerformanceManage;
  f32 mPerformanceIndicator;
  u32 mOverloadManageType;
};

struct __cppobj MtGeomCylinder::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uGrassEffect : cUnit
{
  u32 mPriority;
  rGrassWind::cParamSetSync mSync;
  rGrassWind *mpResource;
  f32 mSpeed;
};

struct __cppobj uGrassWind::MyDTI : MtDTI
{
};

struct __cppobj uGrassEffect::MyDTI : MtDTI
{
};

struct __cppobj rGrassWind::MyDTI : MtDTI
{
};

struct __cppobj rGrassWind::cParamSet::MyDTI : MtDTI
{
};

struct sched_param
{
  int sched_priority;
};

typedef sched_param SceKernelSchedParam;

enum sUnitExt::$5DD59388B2BBD4300CAC685FAD4112F3 : __int32
{
  UG_PREPROCESS = 0x10,
  UG_SCHEDULER = 0x11,
  UG_SCHEDULER_SUB = 0x12,
  UG_FILTER = 0x13,
  UG_SCR = 0x14,
  UG_SCR_SUB = 0x15,
  UG_OBJ = 0x16,
  UG_OBJ_SUB1 = 0x17,
  UG_OBJ_SUB2 = 0x18,
  UG_PLAYER = 0x19,
  UG_PLAYER_SUB1 = 0x1A,
  UG_PLAYER_SUB2 = 0x1B,
  UG_CMC = 0x1C,
  UG_CMC_SUB1 = 0x1D,
  UG_NPC = 0x1E,
  UG_ENEMY = 0x1F,
  UG_ENEMY_SUB1 = 0x20,
  UG_ENEMY_SUB2 = 0x21,
  UG_OBJ2 = 0x22,
  UG_OBJ2_SUB1 = 0x23,
  UG_OBJ2_SUB2 = 0x24,
  UG_CAMERA = 0x25,
  UG_EFFECT_CTRL = 0x26,
  UG_EFFECT = 0x27,
  UG_EFFECT_SUB = 0x28,
  UG_LIGHT = 0x29,
  UG_ID1 = 0x2A,
  UG_ID1_SUB = 0x2B,
  UG_ID2 = 0x2C,
  UG_ID2_SUB = 0x2D,
  UG_ID2_SUB2 = 0x2E,
  UG_ID2_SUB3 = 0x2F,
  UG_ID2_SUB4 = 0x30,
  UG_FADE = 0x31,
  UG_FADE_SCHEDULER = 0x32,
  UG_FADE_FILTER = 0x33,
  UG_POSTPROCESS = 0x34,
  UG_SHELL1 = 0x35,
  UG_SHELL2 = 0x36,
  UG_STOP_EVENT = 0x37,
  UG_EFFECT_UNIT = 0x38,
  UG_PAUSE = 0x39,
  UG_STAGE_SETUP_WAIT = 0x3A,
  UG_STOP_FSM_EVENT = 0x3B,
  UG_PAUSE_SYSTEM = 0x3C,
  DEFAULT_GROUP_COUNT_EXT = 0x3D,
  UG_SOUND_GENERATOR = 0x31,
  UG_SHELL = 0x22,
};

enum sWorkRate::$5A94C3EDA4A452E7EF3136C33C240574 : __int32
{
  WR_GLOBAL = 0x0,
  WR_GAME = 0x1,
  WR_PLAYER = 0x2,
  WR_ENEMY = 0x3,
  WR_SET = 0x4,
  WR_PL_CUSTOM_SKILL = 0x5,
  WR_NUM = 0x6,
};

enum sWorkRate::$CF89CF6D0383C46D1FE4E64B0A95FA1F : __int32
{
  WR_PRIO_NONE = 0xFFFFFFFF,
  WR_PRIO_00 = 0x0,
  WR_PRIO_01 = 0x1,
  WR_PRIO_02 = 0x2,
  WR_PRIO_03 = 0x3,
  WR_PRIO_04 = 0x4,
  WR_PRIO_05 = 0x5,
  WR_PRIO_DEFAULT = 0x5,
  WR_PRIO_06 = 0x6,
  WR_PRIO_07 = 0x7,
  WR_PRIO_08 = 0x8,
  WR_PRIO_09 = 0x9,
  WR_PRIO_10 = 0xA,
};

struct __cppobj uFade : cUnit
{
  bool mIsEnd;
  bool mIsStop;
  f32 mFrameAdd;
  f32 mFrameNow;
  s32 mFadeType;
  uScheduler *mpScheduler;
};

struct __cppobj uScheduler : cUnit
{
  u32 mTrackNum;
  f32 mFrame;
  f32 mPrevFrame;
  f32 mSpeed;
  bool mPause;
  bool mLoop;
  bool mFloorFrame;
  bool mMarkerAdjust;
  bool mAutoDelete;
  bool mPauseToFullStop;
  bool mPauseToFullStopMoved;
  uScheduler::TRACK_WORK *mTrackWork;
  uScheduler::TRACK_WORK **mpUnitTrack;
  u32 mUnitTrackNum;
  rScheduler *mpScheduler;
};

struct uScheduler::TRACK_WORK
{
  rScheduler::TRACK *ptrack;
  unsigned __int32 type : 8;
  unsigned __int32 curkey : 24;
  MtObject *pobj;
  MtProperty prop;
};

struct __cppobj rScheduler : cResource
{
  rScheduler::HEADER *mpHeader;
};

union rScheduler::TRACK::$BD9519F2E290AEDA5B85E68E2FA2FF58
{
  u32 parent_index;
  s32 move_line;
};

union rScheduler::TRACK::$7D8E9772C7F84632B7673D73F97B58DB
{
  MT_CTSTR prop_name;
  MT_CTSTR track_name;
};

union rScheduler::TRACK::$00581D864D3F9E2EB4961B7F40F0E390
{
  u32 prop_index;
  u32 dti_id;
  const MtDTI *pdti;
};

struct rScheduler::TRACK
{
  unsigned __int32 track_type : 8;
  unsigned __int32 prop_type : 8;
  unsigned __int32 key_num : 16;
  rScheduler::TRACK::$BD9519F2E290AEDA5B85E68E2FA2FF58 _anon_0;
  rScheduler::TRACK::$7D8E9772C7F84632B7673D73F97B58DB _anon_1;
  rScheduler::TRACK::$00581D864D3F9E2EB4961B7F40F0E390 _anon_2;
  u64 unit_group;
  rScheduler::KEY *key_frame;
  u8 *key_value;
};

struct rScheduler::HEADER
{
  u32 magic;
  u16 version;
  u16 track_num;
  u32 crc;
  unsigned __int32 frame_max : 24;
  unsigned __int32 floor_frame : 1;
  unsigned __int32 reserved : 7;
  u32 base_track;
  u8 *meta_data;
  rScheduler::TRACK track[1];
};

struct rScheduler::KEY
{
  unsigned __int32 frame : 24;
  unsigned __int32 mode : 8;
};

struct __cppobj uFade::MyDTI : MtDTI
{
};

enum uFade::$E9C6D207F8367DE9EBC6BFAF492AA423 : __int32
{
  TYPE_FADE_IN = 0x0,
  TYPE_FADE_OUT = 0x1,
  TYPE_NUM_0 = 0x2,
  TYPE_INVALID = 0xFFFFFFFF,
};

struct __cppobj uScheduler::MyDTI : MtDTI
{
};

struct __cppobj rScheduler::MyDTI : MtDTI
{
};

enum sWorkRate::$34DA7D4C78D3614DF66A1478A8B08D5A : __int32
{
  WRB_GLOBAL = 0x1,
  WRB_GAME = 0x2,
  WRB_PLAYER = 0x4,
  WRB_ENEMY = 0x8,
  WRB_SET = 0x10,
  WRB_PL_CUSTOM_SKILL = 0x20,
  WRB_WORLD = 0x23,
  WRB_PLAYER_DEFAULT = 0x27,
  WRB_ENEMY_DEFAULT = 0x2B,
  WRB_NPC_DEFAULT = 0x2B,
  WRB_OM_DEFAULT = 0x33,
  WRB_CAMERA_DEFAULT = 0x23,
};

enum uGUIBase::cControl::$94787F41AE20A7C9E8CE15D300C24D3E : __int32
{
  KONF_NONE = 0x0,
  KONF_ON = 0x1,
  KONF_OFF = 0x2,
  KONF_TRG = 0x4,
  KONF_REP = 0x8,
  KONF_MOVEKEY = 0x10,
};

enum uGUIBase::cControl::$CFC35D776D4A834305018F53EA7B4BE2 : __int32
{
  CTRLF_NONE = 0x0,
  CTRLF_REPMOVE = 0x1,
  CTRLF_NSTICKMOVE = 0x2,
  CTRLF_PRLLMOVE = 0x4,
  CTRLF_RSTICKMOVE = 0x8,
  CTRLF_REVERSEMOVE = 0x10,
};

struct __cppobj uGUIBase::cHorizontalSlider : uGUIBase::cControl
{
};

struct __cppobj uGUIBase::cHorizontalSlider::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cNumericSelector : uGUIBase::cHorizontalList
{
  sPadExt::PAD_BTN_TYPE mInputKeepButton;
  f32 mInputKeepFrame;
  bool mIsSuperRepeat;
  bool mIsStrictInput;
};

struct __cppobj uGUIBase::cNumericSelector::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cMatrix : uGUIBase::cControl
{
  s32 mRow;
  s32 mColumn;
  s32 mAdd;
  u32 mFlag;
  s32 mVisibleW;
  s32 mVisibleH;
  s32 mLocateX;
  s32 mLocateY;
};

struct __cppobj uGUIBase::cMatrix::MyDTI : MtDTI
{
};

enum uGUIBase::cMatrix::$CCF431AA8251FBB814A77C6F701AAA04 : __int32
{
  FLAG_NONE_0 = 0x0,
  FLAG_LIMITMAX = 0x1,
  FLAG_01 = 0x2,
  FLAG_02 = 0x2,
  FLAG_03 = 0x2,
  FLAG_04 = 0x2,
  FLAG_05 = 0x2,
  FLAG_06 = 0x2,
  FLAG_07 = 0x2,
  FLAG_08 = 0x2,
  FLAG_09 = 0x2,
  FLAG_10 = 0x2,
  FLAG_11 = 0x2,
  FLAG_12 = 0x2,
  FLAG_13 = 0x2,
  FLAG_14 = 0x2,
  FLAG_15 = 0x2,
  FLAG_16 = 0x2,
  FLAG_17 = 0x2,
  FLAG_18 = 0x2,
  FLAG_19 = 0x2,
  FLAG_20 = 0x2,
  FLAG_21 = 0x2,
  FLAG_22 = 0x2,
  FLAG_23 = 0x2,
  FLAG_24 = 0x2,
  FLAG_25 = 0x2,
  FLAG_26 = 0x2,
  FLAG_27 = 0x2,
  FLAG_28 = 0x2,
  FLAG_29 = 0x2,
  FLAG_30 = 0x2,
  FLAG_31 = 0x2,
};

struct __cppobj uGUIBase::cHorizontalTab : uGUIBase::cHorizontalList
{
};

struct __cppobj uGUIBase::cHorizontalTab::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(4))) uGUIBase::cSlider : uGUIBase::cControl
{
  s32 mMin;
  s32 mMax;
  s32 mStep;
  bool mEnableInputUDKey;
};

struct __cppobj uGUIBase::cSlider::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cScrollVList : uGUIBase::cVerticalList
{
  MT_MFUNC mpCallbackFunc;
  _BYTE gap800[8];
  uGUIBase *mpParent;
  f32 mMargin;
  f32 mFrameCnt;
  __attribute__((aligned(16))) MtVector4 mBasePos;
  MtVector4 mTargetPos;
  MtVector4 mNowPos;
  f32 mSpeed;
  f32 mScrollCtr;
};

struct __cppobj uGUIBase::cScrollVList::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cPageSlider : uGUIBase::cControl
{
  f32 mCurrentPos;
  f32 mOldPos;
  f32 mSpeed;
};

struct __cppobj uGUIBase::cPageSlider::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cMsgOutline : MtObject
{
  uGUIBase *mpParentGUI;
  cGUIInstAnimation *mpInstOrg;
  cGUIInstAnimation *mpInstDupli[5];
  cGUIObjMessage *mpObjMessage;
  bool mChildAnim;
  MtString mMsg;
  MtString mMsgOld;
  MtVector4 mPosOld;
  MtVector4 mColorScaleOld;
  MtVector3 mScaleOld;
};

struct nDDOUtility::cArray<MtStringEx<32>,10>
{
  MtStringEx<32> elems[10];
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cValueList : MtObject
{
  nDDOUtility::cArray<MtStringEx<32>,10> mValues;
  u32 mNum;
};

struct __cppobj uGUIBase::cValueList::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cInterpolationValue : MtObject
{
  f32 mSpeed;
  f32 mPow;
  f32 mMax;
  f32 mValue;
  bool mInverse;
};

struct __cppobj uGUIBase::cInterpolationValue::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) uGUIBase::cUnitWatcher::cFunc<END_FUNC>
{
  MtObject *mpUnit;
  bool (*mpFunc)(MtObject *);
  _BYTE gap10[8];
};

struct __cppobj uGUIBase::cUnitWatcher : MtObject
{
  uGUIBase *mpUnit;
  uGUIBase *mpOldUnit;
  bool mKillReq;
  bool mForceEnd;
  uGUIBase::cUnitWatcher::cFunc<END_FUNC> mEndFunc;
};

struct __cppobj uGUIBase::cUnitWatcher::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cReferenceUIBase : MtObject
{
  cGUIInstAnimation *mpInstance;
  uGUIBase *mpUnit;
};

struct __cppobj uGUIBase::cReferenceUIBase::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cReferenceUISlider : uGUIBase::cReferenceUIBase
{
  cGUIObjPolygon *mpOBJ_fix_selector_selctor_bar;
  cGUIObjChildAnimationRoot *mpOBJ_fix_selector_cursor_r0;
  cGUIObjChildAnimationRoot *mpOBJ_fix_selector_cursor_l0;
  cGUIObjTexture *mpOBJ_fix_selector_fix_cursor;
};

struct __cppobj uGUIBase::cReferenceUISlider::MyDTI : MtDTI
{
};

enum uGUIBase::cReferenceUICursor::TYPE : __int32
{
  TYPE_LEFT = 0x0,
  TYPE_CENTER = 0x1,
};

struct nDDOUtility::cArray<cGUIObjTexture *,6>
{
  cGUIObjTexture *elems[6];
};

typedef nDDOUtility::cArray<cGUIObjTexture *,6> uGUIBase::cReferenceUICursor::cObjs;

struct nDDOUtility::cArray<MtVector4,6>
{
  MtVector4 elems[6];
};

typedef nDDOUtility::cArray<MtVector4,6> uGUIBase::cReferenceUICursor::cPositions;

struct __cppobj __attribute__((aligned(8))) uGUIBase::cReferenceUICursor : uGUIBase::cReferenceUIBase
{
  uGUIBase::cReferenceUICursor::TYPE mType;
  uGUIBase::cReferenceUICursor::cObjs mpObjs;
  uGUIBase::cReferenceUICursor::cPositions mPositions;
  bool mVisibleUnderLine;
  f32 mWidth;
  bool mRightMinus;
};

struct __cppobj uGUIBase::cReferenceUICursor::MyDTI : MtDTI
{
};

enum uGUIBase::cReferenceUICursor::$E0686CFADF114C584FFDF5304E8378FA : __int32
{
  OBJ_CURSOR_LEFT = 0x0,
  OBJ_CURSOR_CENTER = 0x1,
  OBJ_CURSOR_RIGHT = 0x2,
  OBJ_LINE_LEFT = 0x3,
  OBJ_LINE_CENTER = 0x4,
  OBJ_LINE_RIGHT = 0x5,
  OBJ_MAX = 0x6,
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cReferenceUISelector : uGUIBase::cReferenceUIBase
{
  cGUIInstAnimation *mpInstMessage;
  cGUIInstNull *mpINST_Null;
  cGUIObjMessage *mpMessageObj;
  s32 mIndex;
  uGUIBase::cValueList mValues;
  bool mForcus;
  bool mLoop;
};

struct __cppobj uGUIBase::cReferenceUISelector::MyDTI : MtDTI
{
};

enum uGUIBase::cReferenceUICondition::TYPE : __int32
{
  TYPE_NEW = 0x0,
  TYPE_EQUIP = 0x1,
};

struct __cppobj __attribute__((aligned(4))) uGUIBase::cReferenceUICondition : uGUIBase::cReferenceUIBase
{
  uGUIBase::cReferenceUICondition::TYPE mType;
  bool mEnable;
};

struct __cppobj uGUIBase::cReferenceUICondition::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cReferenceUIWeight : uGUIBase::cReferenceUIBase
{
  cGUIObjMessage *mpMessageObj;
};

struct __cppobj uGUIBase::cReferenceUIWeight::MyDTI : MtDTI
{
};

struct nDDOUtility::cArray<cGUIObjMessage *,2>
{
  cGUIObjMessage *elems[2];
};

enum uGUIBase::cReferenceUITwoSelection::DIR : __int32
{
  DIR_LEFT = 0x0,
  DIR_RIGHT = 0x1,
  DIR_MAX = 0x2,
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cReferenceUITwoSelection : uGUIBase::cReferenceUIBase
{
  nDDOUtility::cArray<cGUIObjMessage *,2> mpMessageObjs;
  uGUIBase::cReferenceUITwoSelection::DIR mDir;
};

struct __cppobj uGUIBase::cReferenceUITwoSelection::MyDTI : MtDTI
{
};

enum uGUIBase::cReferenceUICategory::TYPE : __int32
{
  TYPE_00_0 = 0x0,
  TYPE_01_0 = 0x1,
  TYPE_02_0 = 0x2,
  TYPE_03_0 = 0x3,
  TYPE_04_0 = 0x4,
  TYPE_05_0 = 0x5,
  TYPE_06_0 = 0x6,
  TYPE_07_0 = 0x7,
  TYPE_08_0 = 0x8,
  TYPE_09_0 = 0x9,
};

struct __cppobj uGUIBase::cReferenceUICategory : uGUIBase::cReferenceUIBase
{
  bool mEnable;
  uGUIBase::cReferenceUICategory::TYPE mType;
};

struct __cppobj uGUIBase::cReferenceUICategory::MyDTI : MtDTI
{
};

enum uGUIBase::cReferenceUISkip::DIR : __int32
{
  DIR_LEFT_0 = 0x0,
  DIR_RIGHT_0 = 0x1,
};

enum uGUIBase::cReferenceUISkip::TYPE : __int32
{
  TYPE_NONE = 0x0,
  TYPE_LB = 0x1,
  TYPE_RB = 0x2,
};

struct __cppobj uGUIBase::cReferenceUISkip : uGUIBase::cReferenceUIBase
{
  cGUIInstAnimation *mpINST_msg_skip_left;
  cGUIInstAnimation *mpINST_msg_skip_right;
  cGUIObjMessage *mpLeftMessageObj;
  cGUIObjMessage *mpRightMessageObj;
  uGUIBase::cReferenceUISkip::DIR mDir;
  uGUIBase::cReferenceUISkip::TYPE mType;
};

struct __cppobj uGUIBase::cReferenceUISkip::MyDTI : MtDTI
{
};

struct uGUIBase::cDupliInstance<cGUIInstAnimation *>
{
  cGUIInstAnimation *mpDupli;
  cGUIInstAnimation *mpOrgInst;
};

struct uGUIBase::cReferenceUIPageDot::cParam
{
  bool mForcus;
  bool mUse;
  uGUIBase::cDupliInstance<cGUIInstAnimation *> mpInstance;
};

struct nDDOUtility::cArray<uGUIBase::cReferenceUIPageDot::cParam,16>
{
  uGUIBase::cReferenceUIPageDot::cParam elems[16];
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cReferenceUIPageDot : uGUIBase::cReferenceUIBase
{
  nDDOUtility::cArray<uGUIBase::cReferenceUIPageDot::cParam,16> mParams;
  u32 mNum;
};

struct uGUIBase::cSupportBase
{
  __int8 gap0[1];
};

struct __cppobj uGUIBase::cReferenceUIPageDot::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uGUIBase::cColorControl : MtObject
{
  f32 mSpeed;
  MtColor mColor;
  MtColor mChangeColor;
  MtColor mEndColor;
  f32 mLerp;
};

struct __cppobj uGUIBase::cColorControl::MyDTI : MtDTI
{
};

struct __cppobj uGUIBase::cScreenAdjustPos : MtObject
{
  MtRect mRect;
  __attribute__((aligned(16))) MtVector4 mBasePos;
  MtVector4 mEndPos;
  MtVector4 m2DScreenDir;
  MtVector3 mScale;
  MtFloat2 mOverSize;
  f32 mLenMax;
  f32 mScaleMax;
  bool mIsScreenOut;
};

struct __cppobj uGUIBase::cScreenAdjustPos::MyDTI : MtDTI
{
};

enum uGUIBase::$301DFC981B71D4DFA8B2B6C96D4C9313 : __int32
{
  NINESAL_LT = 0x0,
  NINESAL_LC = 0x1,
  NINESAL_LB = 0x2,
  NINESAL_CT = 0x3,
  NINESAL_CC = 0x4,
  NINESAL_CB = 0x5,
  NINESAL_RT = 0x6,
  NINESAL_RC = 0x7,
  NINESAL_RB = 0x8,
  NINESAL_NUM = 0x9,
};

enum uGUIBase::$E0270AC4AC047C22F16605DFA2C23A81 : __int32
{
  NINESF_NONE = 0x0,
  NONESF_NW = 0x1,
  NONESF_NH = 0x2,
};

enum uGUIBase::cReferenceUIGoldRim::TYPE : __int32
{
  TYPE_GOLD = 0x0,
  TYPE_RIM = 0x1,
  TYPE_MAX_1 = 0x2,
};

struct __cppobj uGUIBase::cReferenceUIGoldRim : uGUIBase::cReferenceUIBase
{
  cGUIInstAnimation *mpInstance;
  cGUIObjMessage *mpOBJ_msg_wlth_m_amount;
  cGUIObjTexture *mpOBJ_msg_wlth_pic;
  cGUIObjTexture *mpOBJ_msg_wlth_left;
  cGUIObjTexture *mpOBJ_msg_wlth_center;
  cGUIObjTexture *mpOBJ_msg_wlth_right;
  uGUIBase::cReferenceUIGoldRim::TYPE mType;
  MtStringEx<32> mStr;
};

enum nGUI::END_CONDITION_TYPE : __int32
{
  EC_FLOW_ANIMATION_END = 0x0,
  EC_FRAME_COUNT = 0x1,
  EC_INFINITE = 0x2,
  EC_CHANGE_VARIABLE = 0x3,
  EC_ANIMATION_END = 0x4,
  END_CONDITION_TYPE_NUM = 0x5,
};

typedef MtStringEx<32> *nDDOUtility::cArray<MtStringEx<32>,10>::reference;

typedef const MtStringEx<32> *nDDOUtility::cArray<MtStringEx<32>,10>::const_reference;

typedef cGUIObjTexture **nDDOUtility::cArray<cGUIObjTexture *,6>::reference;

typedef MtVector4 *nDDOUtility::cArray<MtVector4,6>::reference;

typedef cGUIObjMessage **nDDOUtility::cArray<cGUIObjMessage *,2>::reference;

typedef uGUIBase::cReferenceUIPageDot::cParam *nDDOUtility::cArray<uGUIBase::cReferenceUIPageDot::cParam,16>::reference;

enum sGUIExt::$37679D6447DEB29B56F0B2D6C02305D0 : __int32
{
  PRIO_BOTTOM = 0x0,
  PRIO_LOW = 0x1,
  PRIO_LOW_TOP = 0x40,
  PRIO_HUD = 0xC1,
  PRIO_HUD_TOP = 0x100,
  PRIO_VARIABLE = 0x101,
  PRIO_VARIABLE_TOP = 0x140,
  PRIO_MENU = 0x141,
  PRIO_MENU_TOP = 0x180,
  PRIO_HIGH = 0x181,
  PRIO_HIGH_TOP = 0x1C0,
  PRIO_DBGRECT = 0x1C1,
  PRIO_DBGRECT_TOP = 0x200,
  PRIO_DBGPRINT = 0x201,
  PRIO_DBGPRINT_TOP = 0x240,
  PRIO_TOP = 0x241,
  PRIO_OVER_SCREEN_SPACE = 0x6978,
};

struct __cppobj __attribute__((aligned(16))) uGUICapLogo : uGUIBase
{
  rGUI *mpGUIRes;
  cGUIInstance *mpINST_Null;
  uGUIBase::cControl *mpCtrl;
  f32 mAlpha;
  u32 mFlowSwitch;
  bool mSkip;
};

struct __cppobj uGUICapLogo::MyDTI : MtDTI
{
};

enum MtJsonReader::parse::$D8E5BB112D2BC260A14D5AB599F582F4 : __int32
{
  BEGIN_NONE = 0x0,
  BEGIN_OBJECT = 0x1,
  BEGIN_ARRAY = 0x2,
};

enum MtJsonReader::parse::$35D23595D1A17125CCE61484D2C966D4 : __int32
{
  STT_DEFAULT = 0x0,
  STT_STRING = 0x1,
  STT_NUMBER = 0x2,
  STT_BOOLEAN = 0x3,
  STT_UNICODE = 0x4,
  STT_ERROR = 0x5,
};

struct MemoryAllocatorType
{
  MT_CHAR mAllocatorTypeStr[64][64];
  u32 mAllocatorTypeNum;
};

enum MtAllocator::ATTR : __int32
{
  ATTR_READONLY_0 = 0x1,
  ATTR_THREADSAFE = 0x2,
  ATTR_JOBSAFE = 0x4,
  ATTR_FAST_STACKWALK = 0x8,
  ATTR_TRACE = 0x10,
  ATTR_DEBUG = 0x20,
  ATTR_MEMORYFILL = 0x40,
  ATTR_ZEROCLEAR = 0x80,
  ATTR_ERR = 0xFFFF,
};

struct MtStackBuffer<MtMemoryAllocator::MemoryCfg::STATE>
{
  u32 mMaxElement;
  u32 mElementNum;
  MtMemoryAllocator::MemoryCfg::STATE *mpBuffer;
  MtAllocator *mpAllocator;
};

struct MtVirtualAllocator::HEAP_INFO
{
  MtVirtualAllocator::HEAP_INFO *mpPreviousHeap;
  MtVirtualAllocator::HEAP_INFO *mpNextHeap;
  MtVirtualAllocator::HEAP_INFO *mpPreviousSpare;
  MtVirtualAllocator::HEAP_INFO *mpNextSpare;
  size_t mUsedBlock;
  size_t mSpareBlock;
  u32 mCalledNo;
  MtVirtualAllocator::HEAP_INFO *mpHeader;
};

struct __cppobj MtVirtualAllocator : MtAllocator
{
  void *mpVirtualAddress;
  MtVirtualAllocator::HEAP_INFO *mpHead;
  MtVirtualAllocator::HEAP_INFO mSpareHead[18];
  u32 mCalledNo;
  u32 *mpCommitFlag;
  u32 mPhysicalSize;
  u32 mVirtualSize;
  u32 mMaxPhysicalPageNum;
  u32 mUsedPhysicalPageNum;
};

struct __cppobj MtVirtualAllocator::MyDTI : MtDTI
{
};

struct MtHeapAllocator::HEAP_INFO
{
  MtHeapAllocator::HEAP_INFO *pBack_work;
  MtHeapAllocator::HEAP_INFO *pNext_work;
  MtHeapAllocator::HEAP_INFO *pBack_spare;
  MtHeapAllocator::HEAP_INFO *pNext_spare;
  size_t Use_block;
  size_t Spare_block;
  unsigned __int32 Align_size : 16;
  unsigned __int32 Size_diff : 16;
  u32 Called_no;
};

struct __cppobj __attribute__((aligned(8))) MtHeapAllocator : MtAllocator
{
  MtHeapAllocator::HEAP_INFO *mpHead;
  MtHeapAllocator::HEAP_INFO mSpare_head[18];
  size_t mRealSize;
  u32 mBreakNo;
};

struct __cppobj MtHeapAllocator::MyDTI : MtDTI
{
};

struct __cppobj MtBlockAllocator : MtAllocator
{
  u8 *mpBuffer;
  size_t mBlockSize;
  size_t mBlockNum;
  size_t mEmptyPt;
  u8 **mpEmptyBlock;
};

struct __cppobj MtBlockAllocator::MyDTI : MtDTI
{
};

struct MtExHeapAllocator::HEAP_BLOCK_HEADER
{
  MtExHeapAllocator::HEAP_INFO *mpUsedTop;
  MtExHeapAllocator::HEAP_INFO *mpEmptyTop;
  MtExHeapAllocator::HEAP_INFO *mpEmptyEnd;
  MtExHeapAllocator::HEAP_INFO *mpMemTop;
  MtExHeapAllocator::HEAP_INFO *mpMemEnd;
  size_t mTotalSize;
  size_t mUsedSize;
  size_t mMaxUsedSize;
};

struct __cppobj __attribute__((aligned(8))) MtExHeapAllocator : MtAllocator
{
  void *mpBuffer;
  MtExHeapAllocator::HEAP_BLOCK_HEADER mDefaultHeap;
  MtExHeapAllocator::HEAP_HEADER *mpHeapHeader;
  u32 mHeapNum;
  u32 mHeapIndex;
  u32 mBlockIndex;
  u32 mSystemTag;
  u32 mCalledNo;
};

struct MtExHeapAllocator::HEAP_INFO
{
  MtExHeapAllocator::HEAP_INFO *mpWorkBack;
  MtExHeapAllocator::HEAP_INFO *mpWorkNext;
  MtExHeapAllocator::HEAP_INFO *mpMemBack;
  MtExHeapAllocator::HEAP_INFO *mpMemNext;
  void *mpAdr;
  unsigned __int64 mSize : 40;
  unsigned __int64 mSizeDiff : 24;
  unsigned __int32 mUserData : 14;
  unsigned __int32 mbEmpty : 1;
  unsigned __int32 mbFront : 1;
  unsigned __int32 mSystemTag : 16;
  unsigned __int32 mHeapIndex : 16;
  unsigned __int32 mBlockIndex : 16;
  u32 mUserTag;
  u32 mCalledNo;
  u32 mCreateTime;
};

struct __attribute__((aligned(8))) MtExHeapAllocator::HEAP_HEADER
{
  MtExHeapAllocator::HEAP_BLOCK_HEADER *mpHeapBlockHeader;
  u32 mHeapBlockNum;
  char mName[16];
};

struct __cppobj MtExHeapAllocator::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) MtAllocator::getAllocatorAttr::Attrib
{
  MT_CTSTR str;
  u32 val;
};

union $<8100886,1>::$5B83A733686B10EEBE0D0D5DA8143907
{
  u32 value_u;
  f32 value_f;
};

enum $4CB16C15B4FF2F40C5C4E11F652FC070 : __int32
{
  SCE_KERNEL_WB_ONION = 0x0,
  SCE_KERNEL_WC_GARLIC = 0x3,
  SCE_KERNEL_WB_ONION_VOLATILE = 0x0,
  SCE_KERNEL_WB_ONION_NONVOLATILE = 0x1,
  SCE_KERNEL_WC_GARLIC_VOLATILE = 0x2,
  SCE_KERNEL_WC_GARLIC_NONVOLATILE = 0x3,
  SCE_KERNEL_WT_ONION_VOLATILE = 0x4,
  SCE_KERNEL_WT_ONION_NONVOLATILE = 0x5,
  SCE_KERNEL_WP_ONION_VOLATILE = 0x6,
  SCE_KERNEL_WP_ONION_NONVOLATILE = 0x7,
  SCE_KERNEL_UC_GARLIC_VOLATILE = 0x8,
  SCE_KERNEL_UC_GARLIC_NONVOLATILE = 0x9,
  SCE_KERNEL_WB_GARLIC = 0xA,
  SCE_KERNEL_MEMORY_TYPE_END = 0xB,
};

struct std::nothrow_t
{
  __int8 gap0[1];
};

typedef __int64_t __off_t;

typedef __off_t off_t;

struct __attribute__((aligned(8))) SceKernelVirtualQueryInfo
{
  void *start;
  void *end;
  off_t offset;
  int protection;
  int memoryType;
  unsigned __int32 isFlexibleMemory : 1;
  unsigned __int32 isDirectMemory : 1;
  unsigned __int32 isStack : 1;
  char name[32];
};

struct MtSerializer
{
  MT_CHAR mTempBuffer[256];
  s32 mClassIDMax;
  s32 mClassIDNum;
  MtSerializer::CLASS_ID *mClassID;
  MtSerializer::OBJECTDATA **mpObjectData;
  u32 mObjectDataNum;
  u8 *mpStringPool;
  size_t mStringPoolPt;
  MtProperty::Custom::PARAM mCustomParams[4];
  MT_CHAR mCustomParamValue[4][128];
};

struct __attribute__((aligned(8))) MtSerializer::CLASS_ID
{
  MtObject *pobject;
  unsigned __int32 refcount : 31;
  unsigned __int32 binst : 1;
};

union MtSerializer::OBJECTDATA::$E5EE08C7AF25999C1AB7716AE488C7AF
{
  u32 id;
  const MtDTI *pdti;
};

struct MtSerializer::OBJECTDATA::$7C6EE774A3EA51C2EAA263F9BA2D323A::$F4D3CBE0F4E39C5A90E3310A06C158F5
{
  unsigned __int32 prop_num : 15;
  unsigned __int32 init : 1;
  unsigned __int32 reserved : 16;
};

union MtSerializer::OBJECTDATA::$7C6EE774A3EA51C2EAA263F9BA2D323A
{
  MtSerializer::OBJECTDATA::$7C6EE774A3EA51C2EAA263F9BA2D323A::$F4D3CBE0F4E39C5A90E3310A06C158F5 _anon_0;
  u32 param32;
};

union MtSerializer::PROPERTYDATA::$2ACE049AF99A340770B95B95AEBD3A30
{
  MT_CTSTR name;
  u32 ownerofs;
};

struct MtSerializer::PROPERTYDATA::$FE35DC0B9A1F24E0BF4554C2303D6F64::$2FC4DAF8BADB4396A787250E35203F04
{
  unsigned __int32 type : 8;
  unsigned __int32 attr : 8;
  unsigned __int32 bytes : 15;
  unsigned __int32 disable : 1;
};

union MtSerializer::PROPERTYDATA::$FE35DC0B9A1F24E0BF4554C2303D6F64
{
  MtSerializer::PROPERTYDATA::$FE35DC0B9A1F24E0BF4554C2303D6F64::$2FC4DAF8BADB4396A787250E35203F04 _anon_0;
  u32 param32;
};

struct MtSerializer::PROPERTYDATA::$46FEC90059B592266AFB170E5AA21C08::$A06F4D88C1FD7DE1641289963A439BAE
{
  u32 offset;
  u32 count;
};

struct MtSerializer::PROPERTYDATA::$46FEC90059B592266AFB170E5AA21C08::$23F929B7026ADB7C03655AC682973DE6
{
  MT_MFUNC getter;
  __attribute__((aligned(16))) MT_MFUNC getcount;
};

union MtSerializer::PROPERTYDATA::$46FEC90059B592266AFB170E5AA21C08
{
  MtSerializer::PROPERTYDATA::$46FEC90059B592266AFB170E5AA21C08::$A06F4D88C1FD7DE1641289963A439BAE _anon_0;
  MtSerializer::PROPERTYDATA::$46FEC90059B592266AFB170E5AA21C08::$23F929B7026ADB7C03655AC682973DE6 _anon_1;
};

struct MtSerializer::PROPERTYDATA::$C7D617DCE6E540FCD4FD1A91262F9D0B
{
  MT_MFUNC setter;
  __attribute__((aligned(16))) MT_MFUNC setcount;
};

struct MtSerializer::PROPERTYDATA
{
  MtSerializer::PROPERTYDATA::$2ACE049AF99A340770B95B95AEBD3A30 _anon_0;
  MtSerializer::PROPERTYDATA::$FE35DC0B9A1F24E0BF4554C2303D6F64 _anon_1;
  u32 padding1;
  MtSerializer::PROPERTYDATA::$46FEC90059B592266AFB170E5AA21C08 _anon_2;
  MtSerializer::PROPERTYDATA::$C7D617DCE6E540FCD4FD1A91262F9D0B _anon_3;
};

struct MtSerializer::OBJECTDATA
{
  MtSerializer::OBJECTDATA::$E5EE08C7AF25999C1AB7716AE488C7AF _anon_0;
  MtSerializer::OBJECTDATA::$7C6EE774A3EA51C2EAA263F9BA2D323A _anon_1;
  u32 padding1;
  MtSerializer::PROPERTYDATA prop[1];
};

enum MtSerializer::MODE : __int32
{
  MODE_STATE = 0x0,
  MODE_CONFIG = 0x1,
  MODE_USER = 0x2,
};

enum MtSerializer::ENCODING : __int32
{
  ENCODING_AUTO = 0x0,
  ENCODING_AS_IS = 0x1,
};

struct __attribute__((aligned(8))) MtXmlWriter::SCOPE
{
  MT_CTSTR name;
  u8 open;
  u8 chr;
  s16 count;
};

enum MtXmlWriter::ENCODE_TYPE : __int32
{
  ENCODE_UNKNOWN = 0x0,
  ENCODE_UTF8 = 0x1,
  ENCODE_SHIFT_JIS = 0x2,
};

struct __attribute__((aligned(8))) MtXmlWriter
{
  int (**_vptr$MtXmlWriter)(void);
  MtStream *mStream;
  MtXmlWriter::SCOPE mScope[512];
  s32 mScopePt;
  char mCache[4096];
  s32 mCachePt;
  MtXmlWriter::ENCODE_TYPE mEncode;
};

struct MtCharset::cSolver
{
  int (**_vptr$cSolver)(void);
};

struct __cppobj MtCharset::cMultiByteSolver : MtCharset::cSolver
{
  MtCharset::eEncodingType mEncoding;
  u8 mLeadByte;
  u8 mCurrentByte;
  u32 mByteLength;
  u32 mEndIndex;
};

typedef bool (*$<8313923,1>::MT_GETTER)(MtObject *, u32);

typedef u8 (*$<8314147,1>::MT_GETTER)(MtObject *, u32);

typedef u16 (*$<8314359,1>::MT_GETTER)(MtObject *, u32);

typedef u32 (*$<8314571,1>::MT_GETTER)(MtObject *, u32);

typedef u64 (*$<8314775,1>::MT_GETTER)(MtObject *, u32);

typedef s8 (*$<8314979,1>::MT_GETTER)(MtObject *, u32);

typedef s16 (*$<8315191,1>::MT_GETTER)(MtObject *, u32);

typedef s32 (*$<8315403,1>::MT_GETTER)(MtObject *, u32);

typedef s64 (*$<8315607,1>::MT_GETTER)(MtObject *, u32);

typedef void (*$<8315823,1>::MT_SETTER)(MtObject *, f32, u32);

typedef f64 (*$<8316036,1>::MT_GETTER)(MtObject *, u32);

typedef MT_CTSTR (*$<8316258,1>::MT_GETTER)(MtObject *, u32);

typedef MtColor (*$<8316497,1>::MT_GETTER)(MtObject *, u32);

typedef MtPoint (*$<8316709,1>::MT_GETTER)(MtObject *, u32);

typedef MtSize (*$<8316921,1>::MT_GETTER)(MtObject *, u32);

typedef MtRect (*$<8317133,1>::MT_GETTER)(MtObject *, u32);

typedef MtVector3 (*$<8317345,1>::MT_GETTER)(MtObject *, u32);

typedef MtVector4 (*$<8317637,1>::MT_GETTER)(MtObject *, u32);

typedef MtQuaternion (*$<8317849,1>::MT_GETTER)(MtObject *, u32);

typedef MtProperty (*$<8318079,1>::MT_GETTER)(MtObject *, u32);

typedef MtTime (*$<8318326,1>::MT_GETTER)(MtObject *, u32);

typedef MtFloat2 (*$<8318538,1>::MT_GETTER)(MtObject *, u32);

typedef MtFloat3 (*$<8318742,1>::MT_GETTER)(MtObject *, u32);

typedef MtFloat4 (*$<8318946,1>::MT_GETTER)(MtObject *, u32);

typedef MtEaseCurve (*$<8319150,1>::MT_GETTER)(MtObject *, u32);

typedef MtLine (*$<8319354,1>::MT_GETTER)(MtObject *, u32);

typedef MtLineSegment (*$<8319566,1>::MT_GETTER)(MtObject *, u32);

typedef MtRay (*$<8319778,1>::MT_GETTER)(MtObject *, u32);

typedef MtPlane (*$<8319990,1>::MT_GETTER)(MtObject *, u32);

typedef MtSphere (*$<8320194,1>::MT_GETTER)(MtObject *, u32);

typedef MtAABB (*$<8320398,1>::MT_GETTER)(MtObject *, u32);

typedef MtCone (*$<8320610,1>::MT_GETTER)(MtObject *, u32);

typedef MtTorus (*$<8320822,1>::MT_GETTER)(MtObject *, u32);

typedef MtEllipsoid (*$<8321034,1>::MT_GETTER)(MtObject *, u32);

typedef MtRange (*$<8321246,1>::MT_GETTER)(MtObject *, u32);

typedef MtRangeF (*$<8321458,1>::MT_GETTER)(MtObject *, u32);

typedef MtRangeU16 (*$<8321670,1>::MT_GETTER)(MtObject *, u32);

typedef MtHermiteCurve (*$<8321882,1>::MT_GETTER)(MtObject *, u32);

typedef MtLineSegment4 (*$<8322094,1>::MT_GETTER)(MtObject *, u32);

typedef MtAABB4 (*$<8322306,1>::MT_GETTER)(MtObject *, u32);

typedef MtOscillator (*$<8322518,1>::MT_GETTER)(MtObject *, u32);

typedef MtVariable (*$<8322730,1>::MT_GETTER)(MtObject *, u32);

typedef MtVector2 (*$<8322942,1>::MT_GETTER)(MtObject *, u32);

typedef MtRect3D (*$<8323266,1>::MT_GETTER)(MtObject *, u32);

typedef MtPlaneXZ (*$<8323478,1>::MT_GETTER)(MtObject *, u32);

typedef MtRayY (*$<8323682,1>::MT_GETTER)(MtObject *, u32);

typedef MtPointF (*$<8323894,1>::MT_GETTER)(MtObject *, u32);

typedef MtSizeF (*$<8324106,1>::MT_GETTER)(MtObject *, u32);

typedef MtRectF (*$<8324318,1>::MT_GETTER)(MtObject *, u32);

typedef void (*$<8325918,1>::MT_SETTER)(MtObject *, bool, u32);

typedef void (*$<8326145,1>::MT_SETTER)(MtObject *, u16, u32);

typedef void (*$<8326372,1>::MT_SETTER)(MtObject *, s8, u32);

typedef void (*$<8326599,1>::MT_SETTER)(MtObject *, s16, u32);

typedef void (*$<8326826,1>::MT_SETTER)(MtObject *, u32, u32);

typedef void (*$<8327032,1>::MT_SETTER)(MtObject *, MtObject *, u32);

typedef void (*$<8327257,1>::MT_SETTER)(MtObject *, f64, u32);

typedef void (*$<8327594,1>::MT_SETTER)(MtObject *, const MtColor *, u32);

typedef void (*$<8327819,1>::MT_SETTER)(MtObject *, const MtPoint *, u32);

typedef void (*$<8328076,1>::MT_SETTER)(MtObject *, const MtSize *, u32);

typedef void (*$<8328333,1>::MT_SETTER)(MtObject *, const MtRect *, u32);

typedef void (*$<8328654,1>::MT_SETTER)(MtObject *, const MtVector3 *, u32);

typedef void (*$<8328879,1>::MT_SETTER)(MtObject *, const MtVector4 *, u32);

typedef void (*$<8329104,1>::MT_SETTER)(MtObject *, const MtQuaternion *, u32);

typedef void (*$<8329361,1>::MT_SETTER)(MtObject *, const MtTime *, u32);

typedef void (*$<8329586,1>::MT_SETTER)(MtObject *, const MtFloat2 *, u32);

typedef void (*$<8329811,1>::MT_SETTER)(MtObject *, const MtFloat3 *, u32);

typedef void (*$<8330036,1>::MT_SETTER)(MtObject *, const MtFloat4 *, u32);

typedef void (*$<8330263,1>::MT_SETTER)(MtObject *, const MtEaseCurve *, u32);

typedef void (*$<8330488,1>::MT_SETTER)(MtObject *, const MtPlane *, u32);

typedef void (*$<8330745,1>::MT_SETTER)(MtObject *, const MtSphere *, u32);

typedef void (*$<8331002,1>::MT_SETTER)(MtObject *, const MtCone *, u32);

typedef void (*$<8331227,1>::MT_SETTER)(MtObject *, const MtTorus *, u32);

typedef void (*$<8331452,1>::MT_SETTER)(MtObject *, const MtRange *, u32);

typedef void (*$<8331677,1>::MT_SETTER)(MtObject *, const MtRangeF *, u32);

typedef void (*$<8331902,1>::MT_SETTER)(MtObject *, const MtRangeU16 *, u32);

typedef void (*$<8332127,1>::MT_SETTER)(MtObject *, const MtHermiteCurve *, u32);

typedef void (*$<8332354,1>::MT_SETTER)(MtObject *, const MtLineSegment4 *, u32);

typedef void (*$<8332579,1>::MT_SETTER)(MtObject *, const MtAABB4 *, u32);

typedef void (*$<8332804,1>::MT_SETTER)(MtObject *, const MtOscillator *, u32);

typedef void (*$<8333031,1>::MT_SETTER)(MtObject *, const MtVariable *, u32);

typedef void (*$<8333320,1>::MT_SETTER)(MtObject *, const MtVector2 *, u32);

typedef void (*$<8333577,1>::MT_SETTER)(MtObject *, const MtRect3D *, u32);

typedef void (*$<8333802,1>::MT_SETTER)(MtObject *, const MtPlaneXZ *, u32);

typedef void (*$<8334027,1>::MT_SETTER)(MtObject *, const MtRayY *, u32);

typedef void (*$<8334284,1>::MT_SETTER)(MtObject *, const MtPointF *, u32);

typedef void (*$<8334541,1>::MT_SETTER)(MtObject *, const MtSizeF *, u32);

typedef void (*$<8334798,1>::MT_SETTER)(MtObject *, const MtRectF *, u32);

typedef void (*$<8335301,1>::MT_SETTER)(MtObject *, MT_CTSTR, u32);

typedef u32 (*$<8335703,1>::MT_GETTER)(MtObject *);

typedef MtObject *(*MtProperty::getClass::MT_GETTER)(MtObject *, u32);

typedef void (*$<8336050,1>::MT_SETTER)(MtObject *, u8, u32);

typedef void (*$<8336164,1>::MT_SETTER)(MtObject *, u64, u32);

typedef void (*$<8336276,1>::MT_SETTER)(MtObject *, s32, u32);

typedef void (*$<8336390,1>::MT_SETTER)(MtObject *, s64, u32);

typedef f32 (*MtProperty::getF32::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setString::MT_SETTER)(MtObject *, const MtString *, u32);

typedef void (*MtProperty::setMatrix::MT_SETTER)(MtObject *, const MtMatrix *, u32);

typedef MtMatrix (*MtProperty::getMatrix::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setProperty::MT_SETTER)(MtObject *, const MtProperty *, u32);

typedef void (*MtProperty::setLine::MT_SETTER)(MtObject *, const MtLine *, u32);

typedef void (*MtProperty::setLineSegment::MT_SETTER)(MtObject *, const MtLineSegment *, u32);

typedef void (*MtProperty::setRay::MT_SETTER)(MtObject *, const MtRay *, u32);

typedef void (*MtProperty::setCapsule::MT_SETTER)(MtObject *, const MtCapsule *, u32);

typedef MtCapsule (*MtProperty::getCapsule::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setAABB::MT_SETTER)(MtObject *, const MtAABB *, u32);

typedef void (*MtProperty::setOBB::MT_SETTER)(MtObject *, const MtOBB *, u32);

typedef MtOBB (*MtProperty::getOBB::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setCylinder::MT_SETTER)(MtObject *, const MtCylinder *, u32);

typedef MtCylinder (*MtProperty::getCylinder::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setTriangle::MT_SETTER)(MtObject *, const MtTriangle *, u32);

typedef MtTriangle (*MtProperty::getTriangle::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setEllipsoid::MT_SETTER)(MtObject *, const MtEllipsoid *, u32);

typedef void (*MtProperty::setRect3D_XZ::MT_SETTER)(MtObject *, const MtRect3D_XZ *, u32);

typedef MtRect3D_XZ (*MtProperty::getRect3D_XZ::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setRect3DC::MT_SETTER)(MtObject *, const MtCollisionUtil::MtRect3DC *, u32);

typedef MtCollisionUtil::MtRect3DC (*MtProperty::getRect3DC::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setCount::MT_SETTER)(MtObject *, u32);

typedef const MT_ENUM *(*MtProperty::getEnumList::MT_GETTER)(MtObject *, u32);

typedef MtFloat2 (*MtProperty::getVector::MT_GETTER)(MtObject *, u32);

typedef MtFloat3x3 (*MtProperty::getFloat3x3::MT_GETTER)(MtObject *, u32);

typedef MtFloat3x4 (*MtProperty::getFloat3x4::MT_GETTER)(MtObject *, u32);

typedef MtFloat4x3 (*MtProperty::getFloat4x3::MT_GETTER)(MtObject *, u32);

typedef MtFloat4x4 (*MtProperty::getFloat4x4::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setVector::MT_SETTER)(MtObject *, const MtFloat2 *, u32);

typedef void (*MtProperty::setFloat3x3::MT_SETTER)(MtObject *, const MtFloat3x3 *, u32);

typedef void (*MtProperty::setFloat3x4::MT_SETTER)(MtObject *, const MtFloat3x4 *, u32);

typedef void (*MtProperty::setFloat4x3::MT_SETTER)(MtObject *, const MtFloat4x3 *, u32);

typedef void (*MtProperty::setFloat4x4::MT_SETTER)(MtObject *, const MtFloat4x4 *, u32);

typedef bool (*MtProperty::get<bool>::MT_GETTER)(MtObject *, u32);

typedef unsigned __int8 (*MtProperty::get<u8>::MT_GETTER)(MtObject *, u32);

typedef unsigned __int16 (*MtProperty::get<u16>::MT_GETTER)(MtObject *, u32);

typedef unsigned int (*MtProperty::get<u32>::MT_GETTER)(MtObject *, u32);

typedef unsigned __int64 (*MtProperty::get<u64>::MT_GETTER)(MtObject *, u32);

typedef char (*MtProperty::get<s8>::MT_GETTER)(MtObject *, u32);

typedef __int16 (*MtProperty::get<s16>::MT_GETTER)(MtObject *, u32);

typedef int (*MtProperty::get<s32>::MT_GETTER)(MtObject *, u32);

typedef __int64 (*MtProperty::get<s64>::MT_GETTER)(MtObject *, u32);

typedef float (*MtProperty::get<f32>::MT_GETTER)(MtObject *, u32);

typedef double (*MtProperty::get<f64>::MT_GETTER)(MtObject *, u32);

typedef MtColor (*MtProperty::get<const MtColor>::MT_GETTER)(MtObject *, u32);

typedef MtPoint (*MtProperty::get<const MtPoint>::MT_GETTER)(MtObject *, u32);

typedef MtSize (*MtProperty::get<const MtSize>::MT_GETTER)(MtObject *, u32);

typedef MtRect (*MtProperty::get<const MtRect>::MT_GETTER)(MtObject *, u32);

typedef MtPointF (*MtProperty::get<const MtPointF>::MT_GETTER)(MtObject *, u32);

typedef MtSizeF (*MtProperty::get<const MtSizeF>::MT_GETTER)(MtObject *, u32);

typedef MtRectF (*MtProperty::get<const MtRectF>::MT_GETTER)(MtObject *, u32);

typedef MtVector2 (*MtProperty::get<const MtVector2>::MT_GETTER)(MtObject *, u32);

typedef MtVector3 (*MtProperty::get<const MtVector3>::MT_GETTER)(MtObject *, u32);

typedef MtVector4 (*MtProperty::get<const MtVector4>::MT_GETTER)(MtObject *, u32);

typedef MtFloat2 (*MtProperty::get<const MtFloat2>::MT_GETTER)(MtObject *, u32);

typedef MtFloat3 (*MtProperty::get<const MtFloat3>::MT_GETTER)(MtObject *, u32);

typedef MtFloat4 (*MtProperty::get<const MtFloat4>::MT_GETTER)(MtObject *, u32);

typedef MtQuaternion (*MtProperty::get<const MtQuaternion>::MT_GETTER)(MtObject *, u32);

typedef MtEaseCurve (*MtProperty::get<const MtEaseCurve>::MT_GETTER)(MtObject *, u32);

typedef MtHermiteCurve (*MtProperty::get<const MtHermiteCurve>::MT_GETTER)(MtObject *, u32);

typedef MtTime (*MtProperty::get<const MtTime>::MT_GETTER)(MtObject *, u32);

typedef MtLine (*MtProperty::get<const MtLine>::MT_GETTER)(MtObject *, u32);

typedef MtLineSegment (*MtProperty::get<const MtLineSegment>::MT_GETTER)(MtObject *, u32);

typedef MtLineSegment4 (*MtProperty::get<const MtLineSegment4>::MT_GETTER)(MtObject *, u32);

typedef MtRay (*MtProperty::get<const MtRay>::MT_GETTER)(MtObject *, u32);

typedef MtPlane (*MtProperty::get<const MtPlane>::MT_GETTER)(MtObject *, u32);

typedef MtSphere (*MtProperty::get<const MtSphere>::MT_GETTER)(MtObject *, u32);

typedef MtCapsule (*MtProperty::get<const MtCapsule>::MT_GETTER)(MtObject *, u32);

typedef MtAABB (*MtProperty::get<const MtAABB>::MT_GETTER)(MtObject *, u32);

typedef MtOBB (*MtProperty::get<const MtOBB>::MT_GETTER)(MtObject *, u32);

typedef MtAABB4 (*MtProperty::get<const MtAABB4>::MT_GETTER)(MtObject *, u32);

typedef MtCylinder (*MtProperty::get<const MtCylinder>::MT_GETTER)(MtObject *, u32);

typedef MtTriangle (*MtProperty::get<const MtTriangle>::MT_GETTER)(MtObject *, u32);

typedef MtCone (*MtProperty::get<const MtCone>::MT_GETTER)(MtObject *, u32);

typedef MtTorus (*MtProperty::get<const MtTorus>::MT_GETTER)(MtObject *, u32);

typedef MtEllipsoid (*MtProperty::get<const MtEllipsoid>::MT_GETTER)(MtObject *, u32);

typedef MtRange (*MtProperty::get<const MtRange>::MT_GETTER)(MtObject *, u32);

typedef MtRangeF (*MtProperty::get<const MtRangeF>::MT_GETTER)(MtObject *, u32);

typedef MtRangeU16 (*MtProperty::get<const MtRangeU16>::MT_GETTER)(MtObject *, u32);

typedef MtOscillator (*MtProperty::get<const MtOscillator>::MT_GETTER)(MtObject *, u32);

typedef MtVariable (*MtProperty::get<const MtVariable>::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::setNumeric<bool>::MT_SETTER)(MtObject *, bool, u32);

typedef void (*MtProperty::setNumeric<u8>::MT_SETTER)(MtObject *, unsigned __int8, u32);

typedef void (*MtProperty::setNumeric<u16>::MT_SETTER)(MtObject *, unsigned __int16, u32);

typedef void (*MtProperty::setNumeric<u32>::MT_SETTER)(MtObject *, unsigned int, u32);

typedef void (*MtProperty::setNumeric<u64>::MT_SETTER)(MtObject *, unsigned __int64, u32);

typedef void (*MtProperty::setNumeric<s8>::MT_SETTER)(MtObject *, char, u32);

typedef void (*MtProperty::setNumeric<s16>::MT_SETTER)(MtObject *, __int16, u32);

typedef void (*MtProperty::setNumeric<s32>::MT_SETTER)(MtObject *, int, u32);

typedef void (*MtProperty::setNumeric<s64>::MT_SETTER)(MtObject *, __int64, u32);

typedef void (*MtProperty::setNumeric<f32>::MT_SETTER)(MtObject *, float, u32);

typedef void (*MtProperty::setNumeric<f64>::MT_SETTER)(MtObject *, double, u32);

typedef void (*MtProperty::set<MtColor>::MT_SETTER)(MtObject *, const MtColor *, u32);

typedef void (*MtProperty::set<MtPoint>::MT_SETTER)(MtObject *, const MtPoint *, u32);

typedef void (*MtProperty::set<MtSize>::MT_SETTER)(MtObject *, const MtSize *, u32);

typedef void (*MtProperty::set<MtRect>::MT_SETTER)(MtObject *, const MtRect *, u32);

typedef void (*MtProperty::set<MtPointF>::MT_SETTER)(MtObject *, const MtPointF *, u32);

typedef void (*MtProperty::set<MtSizeF>::MT_SETTER)(MtObject *, const MtSizeF *, u32);

typedef void (*MtProperty::set<MtRectF>::MT_SETTER)(MtObject *, const MtRectF *, u32);

typedef void (*MtProperty::set<MtVector2>::MT_SETTER)(MtObject *, const MtVector2 *, u32);

typedef void (*MtProperty::set<MtVector3>::MT_SETTER)(MtObject *, const MtVector3 *, u32);

typedef void (*MtProperty::set<MtVector4>::MT_SETTER)(MtObject *, const MtVector4 *, u32);

typedef void (*MtProperty::set<MtFloat2>::MT_SETTER)(MtObject *, const MtFloat2 *, u32);

typedef void (*MtProperty::set<MtFloat3>::MT_SETTER)(MtObject *, const MtFloat3 *, u32);

typedef void (*MtProperty::set<MtFloat4>::MT_SETTER)(MtObject *, const MtFloat4 *, u32);

typedef void (*MtProperty::set<MtQuaternion>::MT_SETTER)(MtObject *, const MtQuaternion *, u32);

typedef void (*MtProperty::set<MtEaseCurve>::MT_SETTER)(MtObject *, const MtEaseCurve *, u32);

typedef void (*MtProperty::set<MtHermiteCurve>::MT_SETTER)(MtObject *, const MtHermiteCurve *, u32);

typedef void (*MtProperty::set<MtTime>::MT_SETTER)(MtObject *, const MtTime *, u32);

typedef void (*MtProperty::set<MtLine>::MT_SETTER)(MtObject *, const MtLine *, u32);

typedef void (*MtProperty::set<MtLineSegment>::MT_SETTER)(MtObject *, const MtLineSegment *, u32);

typedef void (*MtProperty::set<MtLineSegment4>::MT_SETTER)(MtObject *, const MtLineSegment4 *, u32);

typedef void (*MtProperty::set<MtRay>::MT_SETTER)(MtObject *, const MtRay *, u32);

typedef void (*MtProperty::set<MtPlane>::MT_SETTER)(MtObject *, const MtPlane *, u32);

typedef void (*MtProperty::set<MtSphere>::MT_SETTER)(MtObject *, const MtSphere *, u32);

typedef void (*MtProperty::set<MtCapsule>::MT_SETTER)(MtObject *, const MtCapsule *, u32);

typedef void (*MtProperty::set<MtAABB>::MT_SETTER)(MtObject *, const MtAABB *, u32);

typedef void (*MtProperty::set<MtOBB>::MT_SETTER)(MtObject *, const MtOBB *, u32);

typedef void (*MtProperty::set<MtCylinder>::MT_SETTER)(MtObject *, const MtCylinder *, u32);

typedef void (*MtProperty::set<MtTriangle>::MT_SETTER)(MtObject *, const MtTriangle *, u32);

typedef void (*MtProperty::set<MtCone>::MT_SETTER)(MtObject *, const MtCone *, u32);

typedef void (*MtProperty::set<MtTorus>::MT_SETTER)(MtObject *, const MtTorus *, u32);

typedef void (*MtProperty::set<MtEllipsoid>::MT_SETTER)(MtObject *, const MtEllipsoid *, u32);

typedef void (*MtProperty::set<MtRange>::MT_SETTER)(MtObject *, const MtRange *, u32);

typedef void (*MtProperty::set<MtRangeF>::MT_SETTER)(MtObject *, const MtRangeF *, u32);

typedef void (*MtProperty::set<MtRangeU16>::MT_SETTER)(MtObject *, const MtRangeU16 *, u32);

typedef void (*MtProperty::set<MtOscillator>::MT_SETTER)(MtObject *, const MtOscillator *, u32);

typedef void (*MtProperty::set<MtVariable>::MT_SETTER)(MtObject *, const MtVariable *, u32);

struct MtPropertyList::Iterator
{
  MtProperty *mpElement;
};

enum MtScalableAllocator::eNodeFlag : __int32
{
  POOL = 0x0,
  NODE = 0x1,
  SYS = 0x2,
};

enum MtScalableAllocator::MB_TYPE : __int32
{
  MB_USED = 0x0,
  MB_FREE = 0x1,
  MB_SYSTEM = 0x2,
  MB_POOL_L = 0x3,
  MB_POOL_G = 0x4,
};

enum MtScalableAllocator::ScalableAllocatorAttr : __int32
{
  ATTR_DEV_ZERO_SIZE_ASSERT = 0x200,
  ATTR_DEV_ENABLE_TERM = 0x400,
  ATTR_DEV_STACKWALK_4 = 0x800,
  ATTR_DEV_STACKWALK_8 = 0x1000,
  ATTR_DEV_STACKWALK_16 = 0x1800,
  ATTR_DEV_STACKWALK_MASK = 0x1800,
  ATTR_DEV_VALIDATE_MEM = 0x2000,
  ATTR_DEV_CHECK_OVERRUN = 0x4000,
  ATTR_DEV_FAIL_ASSERT = 0x8000,
};

struct __attribute__((aligned(8))) MtScalableAllocator::getAllocatorAttr::Attrib
{
  MT_CTSTR str;
  u32 val;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) MtScalableAllocator:10400 : MtAllocator
{
  _BYTE gap64[4];
  void *mpMemoryHead;
  void *mpMemoryTail;
  bool mReleaseMem;
  _BYTE gap79[7];
  size_t mSize;
  size_t mBlockNum;
  size_t mAvailableBlockNum;
  MtScalableAllocator::CTRLLIST mGlobalPool;
  MtScalableAllocator::MGR mManager[8];
  u32 mIndexCounter;
  _BYTE gap4F4[4];
  MtCriticalSection mGlobalCS;
  u32 mNumOfMgr;
  u32 mPoolType;
  size_t mPoolSize;
  u32 mDebugDataSize;
};

struct __cppobj MtVirtualExtendAllocator : MtScalableAllocator:10400
{
  s32 mLockSize;
};

struct __cppobj MtVirtualExtendAllocator::MyDTI : MtDTI
{
};

struct MtVirtualExtendAllocator::MEMORY_OPERATION
{
  __int8 gap0[1];
};

struct std::enable_if<true,type>
{
  __int8 gap0[1];
};

typedef double std::enable_if<true,type>::type;

struct MtColorHSV
{
  f32 h;
  f32 s;
  f32 v;
  f32 a;
};

struct MtColorHLS
{
  f32 h;
  f32 l;
  f32 s;
  f32 a;
};

struct MtMath
{
  __int8 gap0[1];
};

union MT_IF::$F31445BFC0D9F5650BA087A7CA619912
{
  s32 i;
  f32 f;
};

struct MT_IF
{
  MT_IF::$F31445BFC0D9F5650BA087A7CA619912 _anon_0;
};

enum MtCharset::estimateCharEncoding::eSearchState : __int32
{
  SS_FIND_SIZE = 0x0,
  SS_CHECK_RANGE = 0x1,
  SS_FATAL = 0x2,
};

struct code_mapper
{
  u8 sjis[2];
  u16 utf16;
  u8 utf8[4];
  u32 utf8_length;
  u8 padding[4];
};

struct MtDebug
{
  void (*mTraceHandler)(MT_CTSTR, void *);
  void (*mErrorHandler)(MT_CTSTR, void *);
  void (*mWarningHandler)(MT_CTSTR, void *);
  void (*mAbortHandler)(MT_CTSTR, void *);
  void (*mInfoHandler)(MT_CTSTR, void *);
  void *mTraceParam;
  void *mErrorParam;
  void *mWarningParam;
  void *mAbortParam;
  void *mInfoParam;
};

struct __cppobj MtHeapArray : MtArray
{
};

struct __cppobj MtHeapArray::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) MtTree : MtObject
{
  MtTree::Node *mpRoot;
  bool mFlgAutoDelete;
};

struct __cppobj __attribute__((aligned(8))) MtTree::Node : MtObject
{
  MtObject *mpObject;
  MtTree::Node *mpNext;
  MtTree::Node *mpBack;
  MtTree::Node *mpParent;
  MtTree::Node *mpChild;
  bool mFlgAutoDeleteObject;
  bool mFlgAutoDeleteChild;
  bool mFlgAutoDeleteNext;
};

struct __cppobj MtTree::MyDTI : MtDTI
{
};

struct __cppobj MtTree::Node::MyDTI : MtDTI
{
};

typedef bool (*MtTree::TRAVERSE_CALLBACK)(MtObject *, MtTree::Node *, void *);

struct __attribute__((aligned(8))) MtTree::FlagPtr
{
  void *ptr;
  bool flag;
};

struct MtCRC
{
  int (**_vptr$MtCRC)(void);
};

enum MtNetUniqueId::$628FEDAB911BE5F8556B2D1045F44CF4 : __int32
{
  TARGET_NONE = 0x0,
  TARGET_LAMM = 0x1,
  TARGET_LIVE = 0x2,
  TARGET_PSN = 0x3,
  TARGET_UDS = 0x4,
  TARGET_NEX = 0x5,
  TARGET_6 = 0x6,
  _RESERVED_VITA_PSN = 0x7,
  TARGET_VITA_ADHOC = 0x8,
  TARGET_9 = 0x9,
  TARGET_10 = 0xA,
  TARGET_11 = 0xB,
  TARGET_12 = 0xC,
  TARGET_NNAC = 0xD,
  TARGET_14 = 0xE,
  TARGET_STEAM = 0xF,
  TARGET_16 = 0x10,
  TARGET_17 = 0x11,
  TARGET_18 = 0x12,
  TARGET_19 = 0x13,
  TARGET_XBOXONE_LIVE = 0x14,
  TARGET_PS4_PSN = 0x15,
  TARGET_MAX = 0x16,
};

typedef wchar_t MT_WCHAR;

struct __cppobj MtNetCom::IPsPlusPS4 : MtNetCom::INative
{
};

enum MtNetCom::IPsPlusPS4::FEATURE : __int32
{
  FEATURE_NONE = 0x0,
  FEATURE_REALTIME_MULTIPLAY = 0x1,
  FEATURE_ASYNC_MULTIPLAY = 0x2,
};

struct __cppobj MtNetCom::IPlayersHistoryPS4 : MtNetCom::INative
{
};

struct __cppobj MtNetCom::CPlayersHistoryPS4 : MtObject, MtNetCom::IPlayersHistoryPS4
{
  s32 mRefCnt;
  s32 _dummy_variable_PlayersHistoryPS4;
};

struct __cppobj MtNetCom::CInvitePS4 : MtObject, MtNetCom::IInvitePS4
{
  s32 mRefCnt;
  s32 _dummy_variable_InvitePS4;
};

struct __cppobj MtNetCom::IPsnProfilePS4 : MtNetCom::INative
{
};

struct __cppobj MtNetCom::CPsnProfilePS4 : MtObject, MtNetCom::IPsnProfilePS4
{
  s32 mRefCnt;
  s32 _dummy_variable_PsnProfilePS4;
};

struct __cppobj MtNetCom::IPsnPresencePS4 : MtNetCom::INative
{
};

struct __cppobj MtNetCom::CPsnPresencePS4 : MtObject, MtNetCom::IPsnPresencePS4
{
  s32 mRefCnt;
  s32 _dummy_variable_PsnPresencePS4;
};

struct __cppobj MtNetCom::CPsPlusPS4 : MtObject, MtNetCom::IPsPlusPS4
{
  s32 mRefCnt;
  s32 _dummy_variable_PsPlusPS4;
};

struct __cppobj MtNetCom::CPartyPS4 : MtObject, MtNetCom::IPartyPS4
{
  s32 mRefCnt;
  s32 _dummy_variable_PartyPS4;
};

struct __cppobj MtNetCom::IPsnTusPS4 : MtNetCom::INative
{
};

struct __cppobj MtNetCom::CPsnTusPS4 : MtObject, MtNetCom::IPsnTusPS4
{
  s32 mRefCnt;
  s32 _dummy_variable_PsnTusPS4;
};

struct __cppobj MtNetCom::CEntitlementPS4 : MtObject, MtNetCom::IEntitlementPS4
{
  s32 mRefCnt;
  s32 _dummy_variable_EntitlementPS4;
};

struct __attribute__((aligned(8))) MtNetRandom
{
  int (**_vptr$MtNetRandom)(void);
  MtCriticalSection mCS;
  u32 mA;
  u32 mP;
  u32 mQ;
  u32 mShiftBits;
  u32 mMask;
};

struct __attribute__((aligned(8))) MtNetLog
{
  int (**_vptr$MtNetLog)(void);
  s32 mLevel;
  MT_CHAR mDbgStringTemp[512];
};

enum MtNetLog::$FB534DF38FB6826A1B655D177FA185F3 : __int32
{
  LEVEL_REQUIRED = 0x0,
  LEVEL_HIGH = 0x1,
  LEVEL_LOW = 0x2,
  LEVEL_VERBOSE = 0x3,
};

struct MtNetBase64
{
  __int8 gap0[1];
};

struct MtNetBase64Url
{
  __int8 gap0[1];
};

struct MtNetBlowfish
{
  u32 *mpPArray;
  u32 (*mpSBoxes)[256];
};

enum MtNetServiceError::$3C0B06B3CE943C390FC3837219949312 : __int32
{
  SERVICE_CONTEXT = 0x1,
  SERVICE_SESSION = 0x2,
  SERVICE_RANKING = 0x4,
};

struct MtNetPadding
{
  __int8 gap0[1];
};

enum MtNetPadding::ePaddingType : __int32
{
  PT_PKCS_5 = 0x0,
};

struct timespec
{
  time_t tv_sec;
  __int64 tv_nsec;
};

struct MtNetByteOrder
{
  __int8 gap0[1];
};

typedef timespec SceKernelTimespec;

enum MtNetMediator::PresenceFlag : __int32
{
  PresenceFlag_Str = 0x1,
  PresenceFlag_Data = 0x2,
};

struct MtNetObject::ScopedLock
{
  MtNetObject *mObjPtr;
};

struct __cppobj MtTypedArray<MtNet::Utility::PS4::ReqCtx> : MtArray
{
};

struct __attribute__((aligned(8))) MtNet::Utility::PS4::WebApi::ReqDeny
{
  u64 mTime;
  s32 mReason;
};

struct __cppobj __attribute__((aligned(8))) MtNet::Utility::PS4::WebApi : MtNet::Utility::PS4::MtNetThread
{
  MtTypedArray<MtNet::Utility::PS4::ReqCtx> mReqCtxPtrArray;
  MtNet::Utility::PS4::WebApi::ReqDeny mReqDenyTbl[16];
  u64 mLastTime;
  bool mIsProcess;
};

struct __cppobj MtNet::Utility::PS4::WebApi::MyDTI : MtDTI
{
};

typedef uint16_t SceNpMatching2Event;

typedef unsigned __int8 SceNpMatching2EventCause;

typedef SceNpPartyJoinedInfo SceNpPartyJoinedInfo_0;

typedef SceNpPartyRoomLeftInfo SceNpPartyRoomLeftInfo_0;

typedef SceNpPartyMemberInfo SceNpPartyMemberInfo_0;

typedef SceNpSessionInvitationEventParam SceNpSessionInvitationEventParam_0;

typedef int32_t SceNpPlusEventType;

enum SceCommonDialogStatus : __int32
{
  SCE_COMMON_DIALOG_STATUS_NONE = 0x0,
  SCE_COMMON_DIALOG_STATUS_INITIALIZED = 0x1,
  SCE_COMMON_DIALOG_STATUS_RUNNING = 0x2,
  SCE_COMMON_DIALOG_STATUS_FINISHED = 0x3,
};

enum SceCommonDialogResult : __int32
{
  SCE_COMMON_DIALOG_RESULT_OK = 0x0,
  SCE_COMMON_DIALOG_RESULT_USER_CANCELED = 0x1,
};

enum SceNpWebApiHttpMethod : __int32
{
  SCE_NP_WEBAPI_HTTP_METHOD_GET = 0x0,
  SCE_NP_WEBAPI_HTTP_METHOD_POST = 0x1,
  SCE_NP_WEBAPI_HTTP_METHOD_PUT = 0x2,
  SCE_NP_WEBAPI_HTTP_METHOD_DELETE = 0x3,
};

struct SceNpPartyMemberList
{
  SceNpId_0 members[8];
  SceNpPartyRoomMemberId memberIds[8];
  uint8_t memberNum;
  bool privateParty;
  uint8_t reserved[2];
};

struct SceNpPartyId
{
  uint8_t id[16];
};

struct SceCommonDialogBaseParam
{
  size_t size;
  uint8_t reserved[36];
  uint32_t magic;
};

typedef SceCommonDialogBaseParam SceCommonDialogBaseParam_0;

typedef int32_t SceWebBrowserDialogMode;

typedef SceWebBrowserDialogCallbackInitParam SceWebBrowserDialogCallbackInitParam_0;

typedef SceWebBrowserDialogImeParam SceWebBrowserDialogImeParam_0;

typedef SceWebBrowserDialogWebViewParam SceWebBrowserDialogWebViewParam_0;

struct __attribute__((aligned(4))) SceWebBrowserDialogParam
{
  SceCommonDialogBaseParam_0 baseParam;
  size_t size;
  SceWebBrowserDialogMode mode;
  SceUserServiceUserId userId;
  const char *url;
  SceWebBrowserDialogCallbackInitParam_0 *callbackInitParam;
  uint16_t width;
  uint16_t height;
  uint16_t positionX;
  uint16_t positionY;
  uint32_t parts;
  uint16_t headerWidth;
  uint16_t headerPositionX;
  uint16_t headerPositionY;
  uint32_t control;
  SceWebBrowserDialogImeParam_0 *imeParam;
  SceWebBrowserDialogWebViewParam_0 *webviewParam;
  uint32_t animation;
  char reserved[202];
};

typedef int32_t SceWebBrowserCallbackParamType;

struct SceWebBrowserDialogCallbackInitParam
{
  size_t size;
  SceWebBrowserCallbackParamType type;
  const char *data;
  char reserved[32];
};

struct __attribute__((aligned(8))) SceWebBrowserDialogImeParam
{
  size_t size;
  uint32_t option;
  char reserved[256];
};

struct __attribute__((aligned(8))) SceWebBrowserDialogWebViewParam
{
  size_t size;
  uint32_t option;
  char reserved[256];
};

struct SceWebBrowserDialogPredeterminedContentParam
{
  size_t size;
  const char *domain[20];
  char reserved[256];
};

typedef int32_t SceMsgDialogMode;

typedef SceMsgDialogUserMessageParam SceMsgDialogUserMessageParam_0;

typedef SceMsgDialogProgressBarParam SceMsgDialogProgressBarParam_0;

typedef SceMsgDialogSystemMessageParam SceMsgDialogSystemMessageParam_0;

struct __attribute__((aligned(8))) SceMsgDialogParam
{
  SceCommonDialogBaseParam_0 baseParam;
  size_t size;
  SceMsgDialogMode mode;
  SceMsgDialogUserMessageParam_0 *userMsgParam;
  SceMsgDialogProgressBarParam_0 *progBarParam;
  SceMsgDialogSystemMessageParam_0 *sysMsgParam;
  SceUserServiceUserId userId;
  char reserved[40];
};

typedef int32_t SceMsgDialogButtonType;

struct SceMsgDialogUserMessageParam
{
  SceMsgDialogButtonType buttonType;
  const char *msg;
  char reserved[32];
};

typedef int32_t SceMsgDialogProgressBarType;

struct SceMsgDialogProgressBarParam
{
  SceMsgDialogProgressBarType barType;
  const char *msg;
  char reserved[64];
};

typedef int32_t SceMsgDialogSystemMessageType;

struct SceMsgDialogSystemMessageParam
{
  SceMsgDialogSystemMessageType sysMsgType;
  char reserved[32];
};

typedef int32_t SceInvitationDialogMode;

struct SceInvitationDialogParam
{
  SceCommonDialogBaseParam_0 baseParam;
  uint32_t size;
  SceInvitationDialogMode mode;
  SceUserServiceUserId userId;
  void *callbackArg;
  const SceInvitationDialogDataParam *dataParam;
  uint8_t reserved[64];
};

typedef int32_t SceInvitationDialogAddressType;

struct __attribute__((aligned(8))) SceInvitationDialogAddressInfo::$8FC06090AC0A5BC5963564DB6778EE91
{
  const SceNpOnlineId_0 *onlineIds;
  uint32_t onlineIdsCount;
};

struct SceInvitationDialogAddressInfo::$71F3EB284E418417BF58EC535B9B95E7
{
  uint32_t onlineIdsMaxCount;
};

union SceInvitationDialogAddressInfo
{
  SceInvitationDialogAddressInfo::$8FC06090AC0A5BC5963564DB6778EE91 UserSelectDisableAddress;
  SceInvitationDialogAddressInfo::$71F3EB284E418417BF58EC535B9B95E7 UserSelectEnableAddress;
};

struct SceInvitationDialogAddressParam
{
  SceInvitationDialogAddressType addressType;
  SceInvitationDialogAddressInfo addressInfo;
};

typedef SceInvitationDialogAddressParam SceInvitationDialogAddressParam_0;

struct SceInvitationDialogDataParam::$0989C37D31E932407B8E790B99DFD8DA
{
  const char *userMessage;
  const SceNpSessionId_0 *sessionId;
  SceInvitationDialogAddressParam_0 addressParam;
};

struct SceInvitationDialogDataParam::$4F90966139EFEA3E36311EA7C25B109C
{
  uint8_t reserved[64];
};

union SceInvitationDialogDataParam
{
  SceInvitationDialogDataParam::$0989C37D31E932407B8E790B99DFD8DA SendInfo;
  SceInvitationDialogDataParam::$4F90966139EFEA3E36311EA7C25B109C RecvInfo;
};

typedef int32_t SceNpProfileDialogMode;

typedef int32_t SceNpProfileGriefReportItem;

struct SceNpProfileGriefReportParam
{
  SceNpProfileGriefReportItem reportItem;
  uint8_t reserved[28];
};

union SceNpProfileDialogParam::$A114C62DC611D5B4252FB816D7D110B9
{
  uint8_t reserved[32];
  SceNpProfileGriefReportParam griefReportParam;
};

struct SceNpProfileDialogParam
{
  SceCommonDialogBaseParam_0 baseParam;
  size_t size;
  SceNpProfileDialogMode mode;
  SceUserServiceUserId userId;
  SceNpOnlineId_0 targetOnlineId;
  void *userData;
  SceNpProfileDialogParam::$A114C62DC611D5B4252FB816D7D110B9 _anon_0;
};

typedef SceWebBrowserDialogCallbackResultParam SceWebBrowserDialogCallbackResultParam_0;

struct SceWebBrowserDialogResult
{
  int32_t result;
  SceWebBrowserDialogCallbackResultParam_0 *callbackResultParam;
  char reserved[240];
};

struct __attribute__((aligned(8))) SceWebBrowserDialogCallbackResultParam
{
  size_t size;
  SceWebBrowserCallbackParamType type;
  char data[2048];
  char reserved[32];
};

typedef int32_t SceMsgDialogButtonId;

struct SceMsgDialogResult
{
  SceMsgDialogMode mode;
  int32_t result;
  SceMsgDialogButtonId buttonId;
  char reserved[32];
};

typedef SceCommonDialogResult SceCommonDialogResult_0;

struct SceNpProfileDialogResult
{
  int32_t result;
  SceCommonDialogResult_0 userAction;
  void *userData;
  uint8_t reserved[32];
};

typedef SceInvitationDialogOnlineIdList SceInvitationDialogOnlineIdList_0;

struct SceInvitationDialogResult
{
  void *callbackArg;
  int32_t errorCode;
  SceCommonDialogResult_0 result;
  SceInvitationDialogOnlineIdList_0 *sentOnlineIds;
  uint8_t reserved[32];
};

struct SceInvitationDialogOnlineIdList
{
  uint32_t count;
  SceNpOnlineId_0 onlineId[16];
};

struct SceNpAuthCreateAsyncRequestParameter
{
  size_t size;
  SceKernelCpumask cpuAffinityMask;
  int threadPriority;
  uint8_t padding[4];
};

struct SceNpWebApiContentParameter
{
  size_t contentLength;
  const char *pContentType;
  uint8_t reserved[16];
};

typedef SceCommonDialogStatus SceCommonDialogStatus_0;

typedef SceMsgDialogResult SceMsgDialogResult_0;

typedef SceNpProfileDialogResult SceNpProfileDialogResult_0;

typedef SceInvitationDialogResult SceInvitationDialogResult_0;

typedef SceWebBrowserDialogParam SceWebBrowserDialogParam_0;

typedef SceMsgDialogParam SceMsgDialogParam_0;

typedef SceInvitationDialogParam SceInvitationDialogParam_0;

typedef SceNpProfileDialogParam SceNpProfileDialogParam_0;

typedef SceWebBrowserDialogResult SceWebBrowserDialogResult_0;

typedef SceNpAuthCreateAsyncRequestParameter SceNpAuthCreateAsyncRequestParameter_0;

typedef SceNpPartyMemberList SceNpPartyMemberList_0;

typedef SceNpPartyId SceNpPartyId_0;

typedef SceNpGamePresenceStatus SceNpGamePresenceStatus_0;

typedef SceWebBrowserDialogPredeterminedContentParam SceWebBrowserDialogPredeterminedContentParam_0;

union MT_UNION_IF
{
  s32 i;
  f32 f;
};

union MT_UNION_ID
{
  s64 i;
  f64 d;
};

struct __cppobj MtREDataReader : MtDataReader
{
};

struct __cppobj MtREDataWriter : MtDataWriter
{
};

enum MtFile::AsyncThreadPool::$6BF5012A19E37927C5C164CE6BC09A0E : __int32
{
  PoolNum = 0x3,
};

typedef __uint32_t __dev_t;

typedef __uint32_t __ino_t;

typedef __ino_t ino_t;

typedef __uint16_t __mode_t;

typedef __mode_t mode_t;

typedef __uint16_t __nlink_t;

typedef __nlink_t nlink_t;

typedef __uint32_t __uid_t;

typedef __uid_t uid_t;

typedef __uint32_t __gid_t;

typedef __gid_t gid_t;

typedef __int64_t __blkcnt_t;

typedef __blkcnt_t blkcnt_t;

typedef __uint32_t __blksize_t;

typedef __blksize_t blksize_t;

typedef __uint32_t __fflags_t;

typedef __fflags_t fflags_t;

struct stat
{
  __dev_t st_dev;
  ino_t st_ino;
  mode_t st_mode;
  nlink_t st_nlink;
  uid_t st_uid;
  gid_t st_gid;
  __dev_t st_rdev;
  timespec st_atim;
  timespec st_mtim;
  timespec st_ctim;
  off_t st_size;
  blkcnt_t st_blocks;
  blksize_t st_blksize;
  fflags_t st_flags;
  __uint32_t st_gen;
  __int32_t st_lspare;
  timespec st_birthtim;
};

struct dirent
{
  __uint32_t d_fileno;
  __uint16_t d_reclen;
  __uint8_t d_type;
  __uint8_t d_namlen;
  char d_name[256];
};

typedef stat SceKernelStat;

typedef __int64_t __ssize_t;

typedef __ssize_t ssize_t;

typedef dirent SceKernelDirent;

struct __attribute__((aligned(8))) MtXmlReader::Handler
{
  int (**_vptr$Handler)(void);
  bool mError;
};

struct __attribute__((aligned(4))) MtSerializer::XmlHandler::Context
{
  MtProperty *mpArray;
  MtPropertyList mPropList;
  u32 mCount;
  bool mEnable;
};

struct __cppobj MtSerializer::XmlHandler : MtXmlReader::Handler
{
  MtSerializer *mpSerializer;
  MtSerializer::XmlHandler::Context mContext[510];
  MtObject *mpObject;
  s32 mStackPt;
  MtSerializer::MODE mMode;
};

struct MtSerializer::HEADER
{
  u32 magic;
  u16 major_version;
  u16 minor_version;
  u32 max_object_id;
  u32 reserved;
  u32 object_num;
  u32 database_size;
};

struct MtSerializer::CLASSDATA::$D9E6D585E6051E9648A829CEDA43306A::$3C8019F20C7696C55B18EB3619FF9E85
{
  unsigned __int32 inst : 1;
  unsigned __int32 type : 15;
  unsigned __int32 id : 16;
};

union MtSerializer::CLASSDATA::$D9E6D585E6051E9648A829CEDA43306A
{
  u32 param32;
  MtSerializer::CLASSDATA::$D9E6D585E6051E9648A829CEDA43306A::$3C8019F20C7696C55B18EB3619FF9E85 _anon_0;
};

struct MtSerializer::CLASSDATA
{
  MtSerializer::CLASSDATA::$D9E6D585E6051E9648A829CEDA43306A _anon_0;
};

enum MtXmlReader::ENCODE_TYPE : __int32
{
  ENCODE_UNKNOWN_0 = 0x0,
  ENCODE_UTF8_0 = 0x1,
  ENCODE_SHIFT_JIS_0 = 0x2,
  ENCODE_UTF16BE = 0x3,
  ENCODE_UTF16LE = 0x4,
  ENCODE_AS_IS = 0x5,
};

struct __attribute__((aligned(8))) MtXmlReader
{
  int (**_vptr$MtXmlReader)(void);
  MtStream *mStream;
  MtXmlReader::ENCODE_TYPE mEncode;
};

struct MtXmlReader::ATTRIBUTE
{
  MT_CTSTR name;
  MT_CTSTR value;
};

enum MtXmlReader::eValidateResult : __int32
{
  VALIDATE_ERROR_NOERROR = 0x0,
  VALIDATE_ERROR_STREAM = 0x1,
  VALIDATE_ERROR_RETRY = 0x2,
  VALIDATE_ERROR_CANCEL = 0x3,
};

struct __attribute__((aligned(8))) MtXmlReader::ATTRIBUTE_METADATA
{
  size_t pname;
  size_t pvalue;
  unsigned __int16 name_is_resolved : 1;
  unsigned __int16 value_is_resolved : 1;
  unsigned __int16 name_is_allocated : 1;
  unsigned __int16 value_is_allocated : 1;
};

struct MtXmlReader::WORK
{
  MtXmlReader::ENCODE_TYPE encode_type;
  size_t plocalname;
  size_t ptarget;
  size_t pdata;
  u32 attr_num;
  MtXmlReader::ATTRIBUTE attr[512];
  MtXmlReader::ATTRIBUTE_METADATA attr_meta[512];
};

enum MtClipboardStream::MODE : __int32
{
  MODE_READ_1 = 0x1,
  MODE_WRITE_1 = 0x2,
};

struct __cppobj __attribute__((aligned(8))) MtClipboardStream : MtStream
{
  MtClipboardStream::MODE mMode;
};

struct __cppobj MtClipboardStream::MyDTI : MtDTI
{
};

struct __cppobj MtMemoryCachedStream : MtStream
{
  u8 *mBuffer;
  u32 mSeekPt;
  u32 mLength;
  u32 mWindowPos;
  u32 mEndPos;
  MtString mFilename;
  MtFile *mpFile;
};

struct __cppobj MtMemoryCachedStream::MyDTI : MtDTI
{
};

typedef u64 MtBigInt::word;

struct MtBigInt
{
  MtBigInt::word mNumArray[132];
};

struct MtCipher
{
  int (**_vptr$MtCipher)(void);
  MT_CHAR mTransKey_Guard[56];
  u32 mKeyLength_Guard;
  MtBigInt mModuloP_Guard;
  MtBigInt mModuloQ_Guard;
  MtBigInt mModulo_Guard;
  MtBigInt mOpenExpo_Guard;
  MtBigInt mPrivExpo_Guard;
  u32 mBlockSize_Guard;
  MtBigInt mModuloPQ_1_Guard;
  MtBigInt mModuloQP_1_Guard;
  u32 *mpPArray;
  u32 *mpSBox;
  u64 desKey;
  u64 desKey1;
  u64 desKey2;
  u8 aeskey_Guard[16];
};

struct __cppobj MtCipherStream : MtStream
{
  u32 mMode;
  MtCipher mCipher;
  MtStream *mpStream;
  u32 mCurrentPos;
  u32 mEndPos;
  u8 *mpBuffer;
  u32 mWindowPos;
  u32 mWindowSize;
};

struct __cppobj MtCipherStream::MyDTI : MtDTI
{
};

enum MtCipherStream::MODE : __int32
{
  MODE_READ_2 = 0x1,
  MODE_WRITE_2 = 0x2,
};

struct MtCipherStream::CIPHER_KEY
{
  u8 key[64];
};

enum MtXmlReader::managed_dynamic_array<u8,7>::eStrategy : __int32
{
  STRATEGY_ABONDON = 0x0,
  STRATEGY_EXPAND = 0x1,
};

struct __attribute__((aligned(8))) MtXmlReader::managed_dynamic_array<u8,7>
{
  unsigned __int8 *mpBuffer;
  size_t mNum;
  size_t mPt;
  MtXmlReader::managed_dynamic_array<u8,7>::eStrategy mStrategy;
};

enum MtXmlReader::PARSE_STATE : __int32
{
  STT_DEFAULT_0 = 0x0,
  STT_BEGIN_PARSE = 0x1,
  STT_UTF16LE = 0x2,
  STT_UTF16BE = 0x3,
  STT_UTF8 = 0x4,
  STT_BEGIN_TAG = 0x5,
  STT_BEGIN_TAG_N = 0x6,
  STT_BEGIN_PROCINST = 0x7,
  STT_BEGIN_DTD = 0x8,
  STT_END_TAG = 0x9,
  STT_END_TAG_N = 0xA,
  STT_BEGIN_ELEMENT = 0xB,
  STT_ELEMENT = 0xC,
  STT_ATTRIBUTE = 0xD,
  STT_END_ATTRIBUTE = 0xE,
  STT_BEGIN_ATTRIBUTE = 0xF,
  STT_END_ELEMENT = 0x10,
  STT_ERROR_0 = 0x11,
  STT_PRE_ATTRVALUE = 0x12,
  STT_BEGIN_ATTRVALUE = 0x13,
  STT_END_ATTRVALUE = 0x14,
  STT_PROCINST_DATA = 0x15,
  STT_END_PROCINST = 0x16,
  STT_XML_HEADER = 0x17,
  STT_XML_BEGIN_VERSION = 0x18,
  STT_XML_VERSION = 0x19,
  STT_XML_BEGIN_ENCODING = 0x1A,
  STT_XML_ENCODING = 0x1B,
  STT_PRE_PROCINST = 0x1C,
  STT_CHARACTERS = 0x1D,
  STT_SPCHAR_BEGIN = 0x1E,
  STT_SPCHAR = 0x1F,
  STT_SPCHAR_NUMERIC = 0x20,
  STT_SPCHAR_NUMERIC_DEC = 0x21,
  STT_SPCHAR_NUMERIC_HEX = 0x22,
  STT_SPCHAR_END = 0x23,
  STT_EXCLAMATION = 0x24,
  STT_BEGIN_COMMENT = 0x25,
  STT_COMMENT = 0x26,
  STT_COMMENT2 = 0x27,
  STT_END_COMMENT = 0x28,
};

typedef MtXmlReader::managed_dynamic_array<u8,7> MtXmlReader::parse::array_type;

struct MtNet::Utility::PS4::MtNetThread::ScopedLock
{
  MtNet::Utility::PS4::MtNetThread *mObjPtr;
};

typedef const sce::Json::Value *(*sce::Json::Value::NullAccessFunction)(sce::Json::ValueType, const sce::Json::Value *, void *);

typedef SceNpWebApiHttpMethod SceNpWebApiHttpMethod_0;

typedef SceNpWebApiContentParameter SceNpWebApiContentParameter_0;

enum MtNet::Utility::PS4::Match::startContext::$A468039429ED72FD446605BE6C3FBD43 : __int32
{
  Phase_StartReq = 0x0,
  Phase_StartWait = 0x1,
  Phase_Ok = 0x2,
  Phase_Term = 0x3,
};

enum $<9406454,1>::$5453928B9694124B13DFFD7A88499160 : __int32
{
  Phase_TermReq = 0x0,
  Phase_TermWait = 0x1,
  Phase_Ok_0 = 0x2,
};

struct SceNpWebApiPushEventDataType
{
  char val[65];
};

struct SceNpCheckPlusParameter
{
  size_t size;
  SceUserServiceUserId userId;
  char padding[4];
  uint64_t features;
  uint8_t reserved[32];
};

struct SceNpCheckPlusResult
{
  bool authorized;
  uint8_t reserved[32];
};

typedef int32_t SceNpCommerceDialogMode;

struct SceNpCommerceDialogParam
{
  SceCommonDialogBaseParam_0 baseParam;
  int32_t size;
  SceUserServiceUserId userId;
  SceNpCommerceDialogMode mode;
  SceNpServiceLabel serviceLabel;
  const char *const *targets;
  uint32_t numTargets;
  uint64_t features;
  void *userData;
  uint8_t reserved[32];
};

struct SceNpCommerceDialogResult
{
  int32_t result;
  bool authorized;
  void *userData;
  uint8_t reserved[32];
};

struct SceNpNotifyPlusFeatureParameter
{
  size_t size;
  SceUserServiceUserId userId;
  char padding[4];
  uint64_t features;
  uint8_t reserved[32];
};

typedef SceNpCommerceDialogParam SceNpCommerceDialogParam_0;

typedef SceNpWebApiPushEventDataType SceNpWebApiPushEventDataType_0;

typedef SceNpCheckPlusResult SceNpCheckPlusResult_0;

typedef SceNpCheckPlusParameter SceNpCheckPlusParameter_0;

typedef SceNpCommerceDialogResult SceNpCommerceDialogResult_0;

typedef SceNpNotifyPlusFeatureParameter SceNpNotifyPlusFeatureParameter_0;

enum MtFrustum::PLANE_TYPE : __int32
{
  PLANE_BOTTOM = 0x0,
  PLANE_TOP = 0x1,
  PLANE_LEFT = 0x2,
  PLANE_RIGHT = 0x3,
  PLANE_NEAR = 0x4,
  PLANE_FAR = 0x5,
};

enum MtCollisionUtil::AABB_VORONOI_ID : __int32
{
  AABB_X_MIN_BIT = 0x1,
  AABB_X_MAX_BIT = 0x2,
  AABB_Y_MIN_BIT = 0x4,
  AABB_Y_MAX_BIT = 0x8,
  AABB_Z_MIN_BIT = 0x10,
  AABB_Z_MAX_BIT = 0x20,
  AABB_VORONOI_INTERNAL_0 = 0x0,
  AABB_VORONOI_P_YZX0_0 = 0x1,
  AABB_VORONOI_P_YZX1_0 = 0x2,
  AABB_VORONOI_P_ZXY0_0 = 0x4,
  AABB_VORONOI_P_ZXY1_0 = 0x8,
  AABB_VORONOI_P_XYZ0_0 = 0x10,
  AABB_VORONOI_P_XYZ1_0 = 0x20,
  AABB_VORONOI_E_XY0Z0_0 = 0x14,
  AABB_VORONOI_E_XY1Z0_0 = 0x18,
  AABB_VORONOI_E_XY0Z1_0 = 0x24,
  AABB_VORONOI_E_XY1Z1_0 = 0x28,
  AABB_VORONOI_E_YZ0X0_0 = 0x11,
  AABB_VORONOI_E_YZ1X0_0 = 0x21,
  AABB_VORONOI_E_YZ0X1_0 = 0x12,
  AABB_VORONOI_E_YZ1X1_0 = 0x22,
  AABB_VORONOI_E_ZX0Y0_0 = 0x5,
  AABB_VORONOI_E_ZX1Y0_0 = 0x6,
  AABB_VORONOI_E_ZX0Y1_0 = 0x9,
  AABB_VORONOI_E_ZX1Y1_0 = 0xA,
  AABB_VORONOI_V_X0Y0Z0_0 = 0x15,
  AABB_VORONOI_V_X1Y0Z0_0 = 0x16,
  AABB_VORONOI_V_X0Y1Z0_0 = 0x19,
  AABB_VORONOI_V_X1Y1Z0_0 = 0x1A,
  AABB_VORONOI_V_X0Y0Z1_0 = 0x25,
  AABB_VORONOI_V_X1Y0Z1_0 = 0x26,
  AABB_VORONOI_V_X0Y1Z1_0 = 0x29,
  AABB_VORONOI_V_X1Y1Z1_0 = 0x2A,
};

struct MtLine4
{
  MtCollisionUtil::MtSoaVector3 from4;
  MtCollisionUtil::MtSoaVector3 dir4;
};

struct MtTriangle4
{
  MtCollisionUtil::MtSoaVector3 p0;
  MtCollisionUtil::MtSoaVector3 p1;
  MtCollisionUtil::MtSoaVector3 p2;
};

struct MtCollision
{
  __int8 gap0[1];
};

struct MtPlane4
{
  MtCollisionUtil::MtSoaVector3 normal4;
  MtCollisionUtil::MtSoaVector1 dist4;
};

struct MtAABB2D
{
  MtVector2 minpos;
  MtVector2 maxpos;
};

struct MtTriangle2D
{
  MtVector2 p0;
  MtVector2 p1;
  MtVector2 p2;
};

struct MtSegment
{
  MtVector4 Start;
  MtVector3 Direction;
};

struct __attribute__((aligned(8))) MtAABBCompress
{
  u16 minposX;
  u16 maxposX;
  u16 minposY;
  u16 maxposY;
  u16 minposZ;
  u16 maxposZ;
};

struct MtAABB4Compress
{
  u16 minposX[4];
  u16 maxposX[4];
  u16 minposY[4];
  u16 maxposY[4];
  u16 minposZ[4];
  u16 maxposZ[4];
};

struct MtOBB::MtOBB::SortElement
{
  u32 id;
  f32 value;
};

enum MtCipher::$E786EB3B0420FEE238C8480C59949FD3 : __int32
{
  nr = 0xA,
  nb = 0x4,
  nk = 0x4,
};

struct MtCipher::half_block::$096C37CF5D8B6A773E2624AD28A41D0D
{
  unsigned __int32 byte3 : 8;
  unsigned __int32 byte2 : 8;
  unsigned __int32 byte1 : 8;
  unsigned __int32 byte0 : 8;
};

union MtCipher::half_block
{
  u32 word;
  u8 byte[4];
  MtCipher::half_block::$096C37CF5D8B6A773E2624AD28A41D0D w;
};

typedef u8 (*_mc_func)(u8);

struct key_store
{
  u64 k[16];
};

union _uni_ptr
{
  u8 *b;
  u32 *w;
};

union _multi_ptr
{
  u8 *p8;
  u16 *p16;
  u32 *p32;
  _multi_ptr::_p64 *p64;
  _multi_ptr::_p128 *p128;
};

struct _multi_ptr::_p64
{
  u32 n[2];
};

struct _multi_ptr::_p128
{
  u32 n[4];
};

enum MtCollisionUtil::TRI_VORONOI_ID : __int32
{
  TRI_VORONOI_INTERNAL = 0x0,
  TRI_VORONOI_EDGE01 = 0x1,
  TRI_VORONOI_EDGE20 = 0x2,
  TRI_VORONOI_V0 = 0x3,
  TRI_VORONOI_EDGE12 = 0x4,
  TRI_VORONOI_V1 = 0x5,
  TRI_VORONOI_V2 = 0x6,
};

typedef unsigned __int128 unsigned___int128;

enum MtCollisionUtil::AABB_EDGE_ID : __int32
{
  AABB_EDGE_ID_011_TO_111 = 0x0,
  AABB_EDGE_ID_111_TO_101 = 0x1,
  AABB_EDGE_ID_101_TO_001 = 0x2,
  AABB_EDGE_ID_001_TO_011 = 0x3,
  AABB_EDGE_ID_010_TO_110 = 0x4,
  AABB_EDGE_ID_110_TO_100 = 0x5,
  AABB_EDGE_ID_100_TO_000 = 0x6,
  AABB_EDGE_ID_000_TO_010 = 0x7,
  AABB_EDGE_ID_010_TO_011 = 0x8,
  AABB_EDGE_ID_110_TO_111 = 0x9,
  AABB_EDGE_ID_100_TO_101 = 0xA,
  AABB_EDGE_ID_000_TO_001 = 0xB,
  AABB_EDGE_ID_MAX = 0xC,
};

struct __attribute__((aligned(8))) MtCollisionUtil::EpaExpandEdge
{
  MtCollisionUtil::EpaFace *mpFace;
  u8 mFaceEdgeIndex;
};

struct MtCollisionEpa<MtCylinder,MtCylinder>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

struct __attribute__((aligned(8))) MtCollisionUtil::EpaFace
{
  MtPlane mFacePlane;
  MtFloat3 mNearestPos;
  f32 mFacePlaneDistanceSq;
  u8 mFlgObsolute;
  u8 mAdjacentEdgeIndex[3];
  u16 mVertexIndex[3];
  MtCollisionUtil::EpaFace *mpAdjacentFace[3];
  bool mFlgFaceReverse;
  u16 mUseFaceIndex;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCylinder,MtCylinder>
{
  const MtCylinder *mpConvexA;
  const MtCylinder *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtSimplexSolver
{
  u32 mSimplexType;
  __attribute__((aligned(16))) MtVector3 mSimplexVec[6];
  MtVector3 mSimplexPosA[6];
  MtVector3 mSimplexPosB[6];
  MtVector3 mPos1;
  MtVector3 mPos2;
  MtVector3 mVec;
  MtVector3 mLastVec;
  bool mValidClosest;
  bool mUpdate;
  f32 mAddVertexEpsilon;
};

enum MtCollisionUtil::MtSimplexSolver::SIMPLEX_TYPE : __int32
{
  TYPE_ID_NONE = 0x0,
  TYPE_ID_POINT = 0x1,
  TYPE_ID_LINESEGMENT = 0x2,
  TYPE_ID_TRIANGLE = 0x3,
  TYPE_ID_TETRAHEDRON = 0x4,
  TYPE_ID_NUM = 0x5,
};

enum MtCollision::intersect::LS_TYPE : __int32
{
  eNONE = 0x0,
  eCYLINDER_AXIS = 0x1,
  eCYLINDER_P0 = 0x2,
  eCYLINDER_P1 = 0x4,
  eLS_LINE = 0x8,
  eLS_P0 = 0x10,
  eLS_P1 = 0x20,
  eMIX_STATUS_TYPE0 = 0x12,
  eMIX_STATUS_TYPE1 = 0x14,
  eMIX_STATUS_TYPE2 = 0x11,
  eMIX_STATUS_TYPE3 = 0x22,
  eMIX_STATUS_TYPE4 = 0x24,
  eMIX_STATUS_TYPE5 = 0x21,
  eMIX_STATUS_TYPE6 = 0xA,
  eMIX_STATUS_TYPE7 = 0xC,
  eMIX_STATUS_TYPE8 = 0x9,
};

struct __cppobj MtCollisionGjk : MtObject
{
  MtCollisionUtil::MtSimplexSolver mSolver;
  u32 mIteration;
  f32 mEpsilon;
  f32 mEpaEpsilon;
  f32 mSimplexSolverEpsilon;
  MtGeomConvex *mpConvexA;
  MtGeomConvex *mpConvexB;
  MtVector3 mCachedSeparateAxis;
};

struct __cppobj MtCollisionGjk::MyDTI : MtDTI
{
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtGeomConvex,MtGeomConvex>
{
  const MtGeomConvex *mpConvexA;
  const MtGeomConvex *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCylinder,MtTriangle>
{
  const MtCylinder *mpConvexA;
  const MtTriangle *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCylinder,MtOBB>
{
  const MtCylinder *mpConvexA;
  const MtOBB *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCylinder,MtAABB>
{
  const MtCylinder *mpConvexA;
  const MtAABB *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

enum MtCollisionUtil::$6B12601FBFC7521022C383F0272272DE : __int32
{
  RECT3DXZ_L_BIT = 0x1,
  RECT3DXZ_R_BIT = 0x2,
  RECT3DXZ_T_BIT = 0x4,
  RECT3DXZ_B_BIT = 0x8,
  RECT3DXZ_INTERNAL = 0x0,
  RECT3DXZ_EDGE_L_BIT = 0x1,
  RECT3DXZ_EDGE_R_BIT = 0x2,
  RECT3DXZ_EDGE_T_BIT = 0x4,
  RECT3DXZ_EDGE_B_BIT = 0x8,
  RECT3DXZ_VERTEX_LT_BIT = 0x5,
  RECT3DXZ_VERTEX_LB_BIT = 0x9,
  RECT3DXZ_VERTEX_RT_BIT = 0x6,
  RECT3DXZ_VERTEX_RB_BIT = 0xA,
};

enum MtCollisionUtil::$CDE748F21A6C92EB831560CBD7571D13 : __int32
{
  RECT3D_L_BIT = 0x1,
  RECT3D_R_BIT = 0x2,
  RECT3D_T_BIT = 0x4,
  RECT3D_B_BIT = 0x8,
  RECT3D_INTERNAL = 0x0,
  RECT3D_EDGE_L_BIT = 0x1,
  RECT3D_EDGE_R_BIT = 0x2,
  RECT3D_EDGE_T_BIT = 0x4,
  RECT3D_EDGE_B_BIT = 0x8,
  RECT3D_VERTEX_LT_BIT = 0x5,
  RECT3D_VERTEX_LB_BIT = 0x9,
  RECT3D_VERTEX_RT_BIT = 0x6,
  RECT3D_VERTEX_RB_BIT = 0xA,
};

enum MtCollision::closestCore::SAT_TYPE : __int32
{
  INVALID_SAT_TYPE = 0x0,
  SAT_TYPE_OBB1_X = 0x1,
  SAT_TYPE_OBB1_Y = 0x2,
  SAT_TYPE_OBB1_Z = 0x3,
  SAT_TYPE_OBB2_X = 0x4,
  SAT_TYPE_OBB2_Y = 0x5,
  SAT_TYPE_OBB2_Z = 0x6,
  SAT_TYPE_CROSS_11 = 0x7,
  SAT_TYPE_CROSS_12 = 0x8,
  SAT_TYPE_CROSS_13 = 0x9,
  SAT_TYPE_CROSS_21 = 0xA,
  SAT_TYPE_CROSS_22 = 0xB,
  SAT_TYPE_CROSS_23 = 0xC,
  SAT_TYPE_CROSS_31 = 0xD,
  SAT_TYPE_CROSS_32 = 0xE,
  SAT_TYPE_CROSS_33 = 0xF,
};

enum MtCollision::closestCore::AXIS_TYPE : __int32
{
  AXIS_X = 0x0,
  AXIS_Y = 0x1,
  AXIS_Z = 0x2,
};

struct MtCollisionEpa<MtCylinder,MtTriangle>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

struct MtCollisionEpa<MtCylinder,MtOBB>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

struct MtCollisionEpa<MtCylinder,MtAABB>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

struct std::remove_reference<MtVector3 *&>
{
  __int8 gap0[1];
};

typedef MtVector3 *std::remove_reference<MtVector3 *&>::type;

struct MtCollisionEpa<MtAABB,MtTriangle>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtAABB,MtTriangle>
{
  const MtAABB *mpConvexA;
  const MtTriangle *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCapsule,MtCollisionUtil::MtRect3DC>
{
  const MtCapsule *mpConvexA;
  const MtCollisionUtil::MtRect3DC *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCapsule,MtRect3D_XZ>
{
  const MtCapsule *mpConvexA;
  const MtRect3D_XZ *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCapsule,MtTriangle>
{
  const MtCapsule *mpConvexA;
  const MtTriangle *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCapsule,MtOBB>
{
  const MtCapsule *mpConvexA;
  const MtOBB *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCapsule,MtAABB>
{
  const MtCapsule *mpConvexA;
  const MtAABB *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCapsule,MtCapsule>
{
  const MtCapsule *mpConvexA;
  const MtCapsule *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtCapsule,MtSphere>
{
  const MtCapsule *mpConvexA;
  const MtSphere *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct std::remove_reference<MtVector3 &>
{
  __int8 gap0[1];
};

typedef MtVector3 std::remove_reference<MtVector3 &>::type;

struct __cppobj MtCollisionMpr : MtObject
{
  f32 mEpsilon;
  u32 mIterator;
};

struct __cppobj MtCollisionMpr::MyDTI : MtDTI
{
};

enum MtNetCore::$5E34B56784DC5CFC43698EA568E8ABDA : __int32
{
  SOCKET_LIB_NONE = 0x0,
  SOCKET_LIB_BSD = 0x1,
  SOCKET_LIB_WINSOCK = 0x2,
  SOCKET_LIB_SNL = 0x3,
  SOCKET_LIB_PSN = 0x4,
  SOCKET_LIB_VITA_PSN = 0x5,
  SOCKET_LIB_VITA_ADHOC = 0x6,
  SOCKET_LIB_WXN = 0x7,
  SOCKET_LIB_PS4_PSN = 0x8,
};

struct SceHttpNBEvent
{
  uint32_t events;
  uint32_t eventDetail;
  int id;
  void *userArg;
};

typedef SceHttpNBEvent SceHttpNBEvent_0;

enum rSoundBank::ElementAttribute : __int32
{
  FIXED_KEY = 0x1,
  RANDOM_LEVEL = 0x2,
  RANDOM_PITCH = 0x4,
  RANDOM_PANNING = 0x8,
  AMP_ENVELOPE = 0x10,
  PITCH_ENVELOPE = 0x20,
  HISTORICAL_RANDOM = 0x40,
};

enum rSoundBank::ElementAttribute2 : __int32
{
  SECONDARY = 0x1,
  FILTER = 0x2,
  RANDOM_FILTER_FREQ = 0x4,
  BLANK = 0x10,
};

struct rSoundBank::Header
{
  s32 mMagic;
  u32 mVersion;
  u32 mProgramNum;
  u32 mElementNum;
  u32 mBusNum;
};

enum sCommonDialog::DIALOG_TYPE : __int32
{
  DIALOG_TYPE_UNKNOWN = 0x0,
  DIALOG_TYPE_USERMSG = 0x1,
  DIALOG_TYPE_SYSMSG = 0x2,
  DIALOG_TYPE_PROGRESSBAR = 0x3,
  DIALOG_TYPE_ERRORINFO = 0x4,
  DIALOG_TYPE_IME = 0x5,
};

enum sCommonDialog::IME_CALLBACK_TYPE : __int32
{
  IME_CALLBACK_TYPE_RESULT_OK = 0x0,
  IME_CALLBACK_TYPE_RESULT_USER_CANCELED = 0x1,
  IME_CALLBACK_TYPE_RESULT_ABORTED = 0x2,
  IME_CALLBACK_TYPE_PRESS_ENTER = 0x3,
  IME_CALLBACK_TYPE_UPDATE_TEXT = 0x4,
  IME_CALLBACK_TYPE_ERROR = 0x5,
};

struct __cppobj __attribute__((aligned(8))) sCommonDialog::UserMessageDialogData : sCommonDialog::CommonDialogData
{
  MT_STR message;
  s32 type;
};

struct __cppobj __attribute__((aligned(8))) sCommonDialog::ErrorMessageDialogData : sCommonDialog::CommonDialogData
{
  s32 errorcode;
};

enum sApp::LANGUAGE : __int32
{
  LANGUAGE_JAPANESE_1 = 0x0,
  LANGUAGE_ENGLISH_1 = 0x1,
  LANGUAGE_FRENCH_1 = 0x2,
  LANGUAGE_SPANISH_1 = 0x3,
  LANGUAGE_GERMAN_1 = 0x4,
  LANGUAGE_ITALIAN_1 = 0x5,
  LANGUAGE_KOREAN_1 = 0x9,
  LANGUAGE_CHINESE_T_1 = 0xA,
  LANGUAGE_CHINESE_S_1 = 0xB,
  LANGUAGE_PORTUGUESE_1 = 0x7,
  LANGUAGE_RUSSIAN_1 = 0x8,
  LANGUAGE_POLISH_1 = 0x10,
  LANGUAGE_DUTCH_1 = 0x6,
  LANGUAGE_FINNISH_1 = 0xC,
  LANGUAGE_SWEDISH_1 = 0xD,
  LANGUAGE_DANISH_1 = 0xE,
  LANGUAGE_NORWEGIAN_1 = 0xF,
  LANGUAGE_PORTUGUESE_BRA = 0x11,
  LANGUAGE_ENGLISH_GBR = 0x12,
  LANGUAGE_TURKISH = 0x13,
  LANGUAGE_SPANISH_LA = 0x14,
};

enum SceErrorDialogStatus : __int32
{
  SCE_ERROR_DIALOG_STATUS_NONE = 0x0,
  SCE_ERROR_DIALOG_STATUS_INITIALIZED = 0x1,
  SCE_ERROR_DIALOG_STATUS_RUNNING = 0x2,
  SCE_ERROR_DIALOG_STATUS_FINISHED = 0x3,
};

struct SceErrorDialogParam
{
  int32_t size;
  int32_t errorCode;
  SceUserServiceUserId userId;
  int32_t reserved;
};

struct SceImeParam
{
  SceUserServiceUserId userId;
  SceImeType_0 type;
  uint64_t supportedLanguages;
  SceImeEnterLabel_0 enterLabel;
  SceImeInputMethod_0 inputMethod;
  SceImeTextFilter filter;
  uint32_t option;
  uint32_t maxTextLength;
  wchar_t *inputTextBuffer;
  float posx;
  float posy;
  SceImeHorizontalAlignment_0 horizontalAlignment;
  SceImeVerticalAlignment_0 verticalAlignment;
  void *work;
  void *arg;
  SceImeEventHandler handler;
  int8_t reserved[8];
};

typedef SceErrorDialogParam SceErrorDialogParam_0;

typedef SceErrorDialogStatus SceErrorDialogStatus_0;

typedef SceImeParam SceImeParam_0;

struct nFile::GlobalConstructor
{
  __int8 gap0[1];
};

struct sFile::RealPath
{
  MT_CHAR mPath[1024];
  bool mNullPath;
};

struct __cppobj rHDDPrefetchList::MyDTI : MtDTI
{
};

struct __cppobj rHDDPrefetchList::cPrefetchData::MyDTI : MtDTI
{
};

struct SceGameLiveStreamingPresetSocialFeedback
{
  uint32_t commandId;
  char commandText[193];
  uint8_t reserved[31];
};

typedef SceGameLiveStreamingPresetSocialFeedback SceGameLiveStreamingPresetSocialFeedback_0;

typedef void (*nPlatformUtil::nSocialFeedback::EV_GAMELIVESTREAMING)(MtObject *, const u32, const nPlatformUtil::nSocialFeedback::FEEDBACK_MESSAGE *, const u32, const nPlatformUtil::nSocialFeedback::FEEDBACK_COMMAND *);

struct SceGameLiveStreamingSpoilerTag
{
  char tagText[193];
  uint8_t reserved[31];
};

typedef SceGameLiveStreamingSpoilerTag SceGameLiveStreamingSpoilerTag_0;

struct __cppobj __attribute__((aligned(8))) cGameLiveStream::SocialFeedbackControl : MtObject
{
  bool mEnable;
  u8 mUpdate;
  size_t mCommandCount;
  size_t mMessageCount;
  s32 mRefreshInterval;
  t64 mRefreshTimerStart;
  MtPerformance mRefreshTimer;
  MtCriticalSection mCS;
  void *mpWorkBuffer;
  nPlatformUtil::nSocialFeedback::FEEDBACK_COMMAND *mpCommandParams;
  nPlatformUtil::nSocialFeedback::FEEDBACK_MESSAGE *mpMessageParams;
  u32 mMaxCommand;
  SceGameLiveStreamingPresetSocialFeedback_0 mCommandWork[5];
  MtString mCommandDescription;
  cGameLiveStream::SocialFeedbackControl::UpdateSocialFeedbackControlThread *mpUpdateThread;
  nPlatformUtil::nSocialFeedback::EV_GAMELIVESTREAMING mEvFunction;
  _BYTE gap540[8];
  MtObject *mEvObject;
  SceGameLiveStreamingSpoilerTag_0 mSpoilerTags[16];
  u32 mRegistrySpoilerTagsCount;
};

struct __cppobj __attribute__((aligned(8))) UpdateThread<UpdateObject> : MtThread
{
  SceKernelEventFlag mEvFla;
  bool mExit;
  bool mPause;
};

struct __cppobj __attribute__((aligned(8))) cGameLiveStream::SocialFeedbackControl::UpdateSocialFeedbackControlThread : UpdateThread<UpdateObject>
{
};

struct __cppobj cGameLiveStream::SocialFeedbackControl::MyDTI : MtDTI
{
};

struct __cppobj cGameLiveStream::SocialFeedbackControl::UpdateSocialFeedbackControlThread::MyDTI : MtDTI
{
};

typedef cGameLiveStream::SocialFeedbackControl cGameLiveStream::SocialFeedbackControl::UpdateObject;

enum cGameLiveStream::SocialFeedbackControl::TYPE : __int32
{
  TYPE_MESSAGE = 0x1,
  TYPE_COMMAND = 0x2,
  TYPE_ALL_0 = 0x3,
};

struct __cppobj cGameLiveStream::LiveControl : MtObject
{
  bool mOnAir;
  bool mOnAirTemp;
  bool mOnAirForceUpdate;
  bool mPermit;
  bool mEnable;
  bool mRecording;
  u32 mCameraPosType;
  f32 mCameraAlpha;
  cGameLiveStream::LiveControl::UpdateStatusThread *mpUpdateThread;
};

struct __cppobj __attribute__((aligned(8))) cGameLiveStream::LiveControl::UpdateStatusThread : UpdateThread<UpdateObject>
{
};

struct __cppobj cGameLiveStream::LiveControl::MyDTI : MtDTI
{
};

struct __cppobj cGameLiveStream::LiveControl::UpdateStatusThread::MyDTI : MtDTI
{
};

typedef cGameLiveStream::LiveControl cGameLiveStream::LiveControl::UpdateObject;

typedef s32 nPlatformUtil::UserID;

struct cGameLiveStream::LIVESTATUS
{
  bool onair;
  u32 spectator_counts;
  nPlatformUtil::UserID user_id;
};

typedef u32 nPlatformUtil::nSystemService::HANDLE;

typedef nPlatformUtil::nSystemService::EVENT_TYPE::DummyName nPlatformUtil::nSystemService::EVENT_TYPE::TYPE;

typedef void (*nPlatformUtil::nSystemService::OBJECTEVENT)(MtObject *, const char *, const u32, const u8 *, nPlatformUtil::nSystemService::CALL_TYPE::TYPE);

typedef void (*nPlatformUtil::nSystemService::EVENT)(const char *, const u32, const u8 *, nPlatformUtil::nSystemService::CALL_TYPE::TYPE);

typedef nPlatformUtil::nGameLiveStram::POSTYPE::DummyName nPlatformUtil::nGameLiveStram::POSTYPE::TYPE;

typedef nPlatformUtil::nSharePlay::STATUS::DummyName nPlatformUtil::nSharePlay::STATUS::TYPE;

typedef nPlatformUtil::nSharePlay::CONTROLLER_MODE::DummyName nPlatformUtil::nSharePlay::CONTROLLER_MODE::TYPE;

typedef SceNpOnlineId_0 nPlatformUtil::nSharePlay::OnlineId;

struct __cppobj UpdateThread<UpdateObject>::MyDTI : MtDTI
{
};

enum SceGameLiveStreamingSocialFeedbackServiceType : __int32
{
  SCE_GAME_LIVE_STREAMING_SOCIAL_FEEDBACK_SERVICE_TYPE_FAKE = 0x10000000,
  SCE_GAME_LIVE_STREAMING_SOCIAL_FEEDBACK_SERVICE_TYPE_LIVE = 0x1,
};

enum SceGameLiveStreamingSocialFeedbackFlag : __int32
{
  SCE_GAME_LIVE_STREAMING_SOCIAL_FEEDBACK_FLAG_SPOILER_TAG = 0x1,
  SCE_GAME_LIVE_STREAMING_SOCIAL_FEEDBACK_FLAG_POSTED_BY_BROADCASTER = 0x2,
};

typedef SceGameLiveStreamingSocialFeedbackServiceType SceGameLiveStreamingSocialFeedbackServiceType_0;

typedef SceGameLiveStreamingSocialFeedbackFlag SceGameLiveStreamingSocialFeedbackFlag_0;

struct SceGameLiveStreamingSocialFeedback
{
  time_t timestamp;
  SceGameLiveStreamingSocialFeedbackServiceType_0 serviceType;
  uint32_t commandId;
  char from[553];
  char body[841];
  SceGameLiveStreamingSocialFeedbackFlag_0 optionFlag;
  uint8_t reserved[32];
};

enum sSavedata::$7AF4F9D70DB05963769BF468DB6873D8 : __int32
{
  OPMODE_NONE = 0x0,
  OPMODE_DELETE = 0x1,
  OPMODE_SAVE = 0x2,
  OPMODE_LOAD = 0x3,
  OPMODE_BASE = 0x4,
};

enum sSavedata::TYPE : __int32
{
  TYPE_UNDEFINED_0 = 0x0,
  TYPE_BOOLEAN = 0x1,
  TYPE_U8_0 = 0x2,
  TYPE_U16_0 = 0x3,
  TYPE_U32_0 = 0x4,
  TYPE_U64_0 = 0x5,
  TYPE_S8_0 = 0x6,
  TYPE_S16_0 = 0x7,
  TYPE_S32_0 = 0x8,
  TYPE_S64_0 = 0x9,
  TYPE_F32_0 = 0xA,
  TYPE_F64_0 = 0xB,
  TYPE_BINARY = 0xC,
};

union sSavedata::DATA_HEADER::$4384BAE9EF08C0089D6F7378EBCAA543
{
  u32 size;
  bool bdata;
  u8 u8data;
  s8 s8data;
  u16 u16data;
  s16 s16data;
  u32 u32data;
  s32 s32data;
  u64 u64data;
  s64 s64data;
  f32 f32data;
  f64 f64data;
};

struct sSavedata::DATA_HEADER
{
  u32 hash;
  s32 type;
  sSavedata::DATA_HEADER::$4384BAE9EF08C0089D6F7378EBCAA543 _anon_0;
};

struct sSavedata::LessKey
{
  __int8 gap0[1];
};

typedef SceSaveDataDirNameSearchResult SceSaveDataDirNameSearchResult_0;

typedef int32_t SceSaveDataDialogType;

typedef int32_t SceSaveDataDialogSystemMessageType;

typedef SceSaveDataDialogResult SceSaveDataDialogResult_0;

struct std::iterator_traits<sSavedata::KEYTABLE *>
{
  __int8 gap0[1];
};

typedef ptrdiff_t std::iterator_traits<sSavedata::KEYTABLE *>::difference_type;

typedef std::random_access_iterator_tag std::iterator_traits<sSavedata::KEYTABLE *>::iterator_category;

typedef int32_t SceSaveDataDialogAnimation;

struct SceSaveDataDialogCloseParam
{
  SceSaveDataDialogAnimation anim;
  uint8_t reserved[32];
};

typedef uint32_t SceSaveDataMountMode;

struct __attribute__((aligned(8))) SceSaveDataMount
{
  SceUserServiceUserId userId;
  const SceSaveDataTitleId_0 *titleId;
  const SceSaveDataDirName_0 *dirName;
  const SceSaveDataFingerprint_0 *fingerprint;
  SceSaveDataBlocks blocks;
  SceSaveDataMountMode mountMode;
  uint8_t reserved[32];
};

struct SceSaveDataMountPoint
{
  char data[16];
};

typedef SceSaveDataMountPoint SceSaveDataMountPoint_0;

struct __attribute__((aligned(8))) SceSaveDataMountResult
{
  SceSaveDataMountPoint_0 mountPoint;
  SceSaveDataBlocks requiredBlocks;
  uint32_t progress;
  uint8_t reserved[32];
};

struct SceSaveDataDirNameSearchCond
{
  SceUserServiceUserId userId;
  const SceSaveDataTitleId_0 *titleId;
  const SceSaveDataDirName_0 *dirName;
  SceSaveDataSortKey key;
  SceSaveDataSortOrder order;
  uint8_t reserved[32];
};

struct __attribute__((aligned(8))) SceSaveDataDelete
{
  SceUserServiceUserId userId;
  const SceSaveDataTitleId_0 *titleId;
  const SceSaveDataDirName_0 *dirName;
  uint32_t progress;
  uint8_t reserved[32];
};

typedef SceSaveDataDialogAnimationParam SceSaveDataDialogAnimationParam_0;

typedef SceSaveDataDialogItems SceSaveDataDialogItems_0;

typedef SceSaveDataDialogUserMessageParam SceSaveDataDialogUserMessageParam_0;

typedef SceSaveDataDialogSystemMessageParam SceSaveDataDialogSystemMessageParam_0;

typedef SceSaveDataDialogErrorCodeParam SceSaveDataDialogErrorCodeParam_0;

typedef SceSaveDataDialogProgressBarParam SceSaveDataDialogProgressBarParam_0;

typedef SceSaveDataDialogOptionParam SceSaveDataDialogOptionParam_0;

struct SceSaveDataDialogParam
{
  SceCommonDialogBaseParam_0 baseParam;
  int32_t size;
  SceSaveDataDialogMode mode;
  SceSaveDataDialogType dispType;
  SceSaveDataDialogAnimationParam_0 *animParam;
  SceSaveDataDialogItems_0 *items;
  SceSaveDataDialogUserMessageParam_0 *userMsgParam;
  SceSaveDataDialogSystemMessageParam_0 *sysMsgParam;
  SceSaveDataDialogErrorCodeParam_0 *errorCodeParam;
  SceSaveDataDialogProgressBarParam_0 *progBarParam;
  void *userData;
  SceSaveDataDialogOptionParam_0 *optionParam;
  uint8_t reserved[24];
};

struct SceSaveDataDialogAnimationParam
{
  SceSaveDataDialogAnimation userOK;
  SceSaveDataDialogAnimation userCancel;
  uint8_t reserved[32];
};

typedef SceSaveDataDialogNewItem SceSaveDataDialogNewItem_0;

typedef int32_t SceSaveDataDialogFocusPos;

typedef int32_t SceSaveDataDialogItemStyle;

struct __attribute__((aligned(8))) SceSaveDataDialogItems
{
  SceUserServiceUserId userId;
  const SceSaveDataTitleId_0 *titleId;
  const SceSaveDataDirName_0 *dirName;
  uint32_t dirNameNum;
  const SceSaveDataDialogNewItem_0 *newItem;
  SceSaveDataDialogFocusPos focusPos;
  const SceSaveDataDirName_0 *focusPosDirName;
  SceSaveDataDialogItemStyle itemStyle;
  uint8_t reserved[32];
};

typedef int32_t SceSaveDataDialogButtonType;

typedef int32_t SceSaveDataDialogUserMessageType;

struct SceSaveDataDialogUserMessageParam
{
  SceSaveDataDialogButtonType buttonType;
  SceSaveDataDialogUserMessageType msgType;
  const char *msg;
  uint8_t reserved[32];
};

struct SceSaveDataDialogSystemMessageParam
{
  SceSaveDataDialogSystemMessageType sysMsgType;
  uint64_t value;
  uint8_t reserved[32];
};

struct SceSaveDataDialogErrorCodeParam
{
  int32_t errorCode;
  uint8_t reserved[32];
};

typedef int32_t SceSaveDataDialogProgressBarType;

typedef int32_t SceSaveDataDialogProgressSystemMessageType;

struct SceSaveDataDialogProgressBarParam
{
  SceSaveDataDialogProgressBarType barType;
  const char *msg;
  SceSaveDataDialogProgressSystemMessageType sysMsgType;
  uint8_t reserved[28];
};

typedef int32_t SceSaveDataDialogOptionBack;

struct SceSaveDataDialogOptionParam
{
  SceSaveDataDialogOptionBack back;
  uint8_t reserved[32];
};

struct SceSaveDataDialogNewItem
{
  const char *title;
  void *iconBuf;
  size_t iconSize;
  uint8_t reserved[32];
};

typedef SceSaveDataDelete SceSaveDataDelete_0;

typedef SceSaveDataDialogParam SceSaveDataDialogParam_0;

typedef SceSaveDataDirNameSearchCond SceSaveDataDirNameSearchCond_0;

typedef SceSaveDataMount SceSaveDataMount_0;

typedef SceSaveDataMountResult SceSaveDataMountResult_0;

typedef SceSaveDataDialogCloseParam SceSaveDataDialogCloseParam_0;

typedef D3D11_INPUT_ELEMENT_DESC D3D11_INPUT_ELEMENT_DESC_0;

typedef D3D11_INPUT_ELEMENT_DESC_0 nDraw::GPUINPUT_ELEMENT_0;

struct __cppobj __attribute__((aligned(8))) nDraw::InputLayout_0 : nDraw::Resource
{
  nDraw::GPUINPUT_ELEMENT_0 *mGPUElements;
  u32 mGPUElementNum;
  nDraw::INPUT_ELEMENT *mElements;
  u32 mElementNum;
  u32 mStride;
  bool mIsInstanceData;
};

typedef char CHAR;

typedef const CHAR *LPCSTR;

enum DXGI_FORMAT : __int32
{
  DXGI_FORMAT_UNKNOWN_0 = 0x0,
  DXGI_FORMAT_R32G32B32A32_TYPELESS_0 = 0x1,
  DXGI_FORMAT_R32G32B32A32_FLOAT_0 = 0x2,
  DXGI_FORMAT_R32G32B32A32_UINT_0 = 0x3,
  DXGI_FORMAT_R32G32B32A32_SINT_0 = 0x4,
  DXGI_FORMAT_R32G32B32_TYPELESS_0 = 0x5,
  DXGI_FORMAT_R32G32B32_FLOAT_0 = 0x6,
  DXGI_FORMAT_R32G32B32_UINT_0 = 0x7,
  DXGI_FORMAT_R32G32B32_SINT_0 = 0x8,
  DXGI_FORMAT_R16G16B16A16_TYPELESS_0 = 0x9,
  DXGI_FORMAT_R16G16B16A16_FLOAT_0 = 0xA,
  DXGI_FORMAT_R16G16B16A16_UNORM_0 = 0xB,
  DXGI_FORMAT_R16G16B16A16_UINT_0 = 0xC,
  DXGI_FORMAT_R16G16B16A16_SNORM_0 = 0xD,
  DXGI_FORMAT_R16G16B16A16_SINT_0 = 0xE,
  DXGI_FORMAT_R32G32_TYPELESS_0 = 0xF,
  DXGI_FORMAT_R32G32_FLOAT_0 = 0x10,
  DXGI_FORMAT_R32G32_UINT_0 = 0x11,
  DXGI_FORMAT_R32G32_SINT_0 = 0x12,
  DXGI_FORMAT_R32G8X24_TYPELESS_0 = 0x13,
  DXGI_FORMAT_D32_FLOAT_S8X24_UINT_0 = 0x14,
  DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS_0 = 0x15,
  DXGI_FORMAT_X32_TYPELESS_G8X24_UINT_0 = 0x16,
  DXGI_FORMAT_R10G10B10A2_TYPELESS_0 = 0x17,
  DXGI_FORMAT_R10G10B10A2_UNORM_0 = 0x18,
  DXGI_FORMAT_R10G10B10A2_UINT_0 = 0x19,
  DXGI_FORMAT_R11G11B10_FLOAT_0 = 0x1A,
  DXGI_FORMAT_R8G8B8A8_TYPELESS_0 = 0x1B,
  DXGI_FORMAT_R8G8B8A8_UNORM_0 = 0x1C,
  DXGI_FORMAT_R8G8B8A8_UNORM_SRGB_0 = 0x1D,
  DXGI_FORMAT_R8G8B8A8_UINT_0 = 0x1E,
  DXGI_FORMAT_R8G8B8A8_SNORM_0 = 0x1F,
  DXGI_FORMAT_R8G8B8A8_SINT_0 = 0x20,
  DXGI_FORMAT_R16G16_TYPELESS_0 = 0x21,
  DXGI_FORMAT_R16G16_FLOAT_0 = 0x22,
  DXGI_FORMAT_R16G16_UNORM_0 = 0x23,
  DXGI_FORMAT_R16G16_UINT_0 = 0x24,
  DXGI_FORMAT_R16G16_SNORM_0 = 0x25,
  DXGI_FORMAT_R16G16_SINT_0 = 0x26,
  DXGI_FORMAT_R32_TYPELESS_0 = 0x27,
  DXGI_FORMAT_D32_FLOAT_0 = 0x28,
  DXGI_FORMAT_R32_FLOAT_0 = 0x29,
  DXGI_FORMAT_R32_UINT_0 = 0x2A,
  DXGI_FORMAT_R32_SINT_0 = 0x2B,
  DXGI_FORMAT_R24G8_TYPELESS_0 = 0x2C,
  DXGI_FORMAT_D24_UNORM_S8_UINT_0 = 0x2D,
  DXGI_FORMAT_R24_UNORM_X8_TYPELESS_0 = 0x2E,
  DXGI_FORMAT_X24_TYPELESS_G8_UINT_0 = 0x2F,
  DXGI_FORMAT_R8G8_TYPELESS_0 = 0x30,
  DXGI_FORMAT_R8G8_UNORM_0 = 0x31,
  DXGI_FORMAT_R8G8_UINT_0 = 0x32,
  DXGI_FORMAT_R8G8_SNORM_0 = 0x33,
  DXGI_FORMAT_R8G8_SINT_0 = 0x34,
  DXGI_FORMAT_R16_TYPELESS_0 = 0x35,
  DXGI_FORMAT_R16_FLOAT_0 = 0x36,
  DXGI_FORMAT_D16_UNORM_0 = 0x37,
  DXGI_FORMAT_R16_UNORM_0 = 0x38,
  DXGI_FORMAT_R16_UINT_0 = 0x39,
  DXGI_FORMAT_R16_SNORM_0 = 0x3A,
  DXGI_FORMAT_R16_SINT_0 = 0x3B,
  DXGI_FORMAT_R8_TYPELESS_0 = 0x3C,
  DXGI_FORMAT_R8_UNORM_0 = 0x3D,
  DXGI_FORMAT_R8_UINT_0 = 0x3E,
  DXGI_FORMAT_R8_SNORM_0 = 0x3F,
  DXGI_FORMAT_R8_SINT_0 = 0x40,
  DXGI_FORMAT_A8_UNORM_0 = 0x41,
  DXGI_FORMAT_R1_UNORM_0 = 0x42,
  DXGI_FORMAT_R9G9B9E5_SHAREDEXP_0 = 0x43,
  DXGI_FORMAT_R8G8_B8G8_UNORM_0 = 0x44,
  DXGI_FORMAT_G8R8_G8B8_UNORM_0 = 0x45,
  DXGI_FORMAT_BC1_TYPELESS_0 = 0x46,
  DXGI_FORMAT_BC1_UNORM_0 = 0x47,
  DXGI_FORMAT_BC1_UNORM_SRGB_0 = 0x48,
  DXGI_FORMAT_BC2_TYPELESS_0 = 0x49,
  DXGI_FORMAT_BC2_UNORM_0 = 0x4A,
  DXGI_FORMAT_BC2_UNORM_SRGB_0 = 0x4B,
  DXGI_FORMAT_BC3_TYPELESS_0 = 0x4C,
  DXGI_FORMAT_BC3_UNORM_0 = 0x4D,
  DXGI_FORMAT_BC3_UNORM_SRGB_0 = 0x4E,
  DXGI_FORMAT_BC4_TYPELESS_0 = 0x4F,
  DXGI_FORMAT_BC4_UNORM_0 = 0x50,
  DXGI_FORMAT_BC4_SNORM_0 = 0x51,
  DXGI_FORMAT_BC5_TYPELESS_0 = 0x52,
  DXGI_FORMAT_BC5_UNORM_0 = 0x53,
  DXGI_FORMAT_BC5_SNORM_0 = 0x54,
  DXGI_FORMAT_B5G6R5_UNORM_0 = 0x55,
  DXGI_FORMAT_B5G5R5A1_UNORM_0 = 0x56,
  DXGI_FORMAT_B8G8R8A8_UNORM_0 = 0x57,
  DXGI_FORMAT_B8G8R8X8_UNORM_0 = 0x58,
  DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM_0 = 0x59,
  DXGI_FORMAT_B8G8R8A8_TYPELESS_0 = 0x5A,
  DXGI_FORMAT_B8G8R8A8_UNORM_SRGB_0 = 0x5B,
  DXGI_FORMAT_B8G8R8X8_TYPELESS_0 = 0x5C,
  DXGI_FORMAT_B8G8R8X8_UNORM_SRGB_0 = 0x5D,
  DXGI_FORMAT_BC6H_TYPELESS_0 = 0x5E,
  DXGI_FORMAT_BC6H_UF16_0 = 0x5F,
  DXGI_FORMAT_BC6H_SF16_0 = 0x60,
  DXGI_FORMAT_BC7_TYPELESS_0 = 0x61,
  DXGI_FORMAT_BC7_UNORM_0 = 0x62,
  DXGI_FORMAT_BC7_UNORM_SRGB_0 = 0x63,
  DXGI_FORMAT_FORCE_UINT_0 = 0xFFFFFFFF,
};

typedef DXGI_FORMAT DXGI_FORMAT_0;

enum D3D11_INPUT_CLASSIFICATION : __int32
{
  D3D11_INPUT_PER_VERTEX_DATA_0 = 0x0,
  D3D11_INPUT_PER_INSTANCE_DATA_0 = 0x1,
};

typedef D3D11_INPUT_CLASSIFICATION D3D11_INPUT_CLASSIFICATION_0;

struct D3D11_INPUT_ELEMENT_DESC
{
  LPCSTR SemanticName;
  UINT SemanticIndex;
  DXGI_FORMAT_0 Format;
  UINT InputSlot;
  UINT AlignedByteOffset;
  D3D11_INPUT_CLASSIFICATION_0 InputSlotClass;
  UINT InstanceDataStepRate;
};

struct __cppobj nDraw::InputLayout_0::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) nDraw::InputLayout_0::INPUT_SEMANTIC
{
  MT_CTSTR sname;
  u32 sindex;
};

struct nDraw::InputLayout_0::FETCH_INFO
{
  unsigned __int32 enable : 1;
  unsigned __int32 index : 8;
  unsigned __int32 slot : 8;
  unsigned __int32 decoder : 15;
};

enum cDraw::CMD::TYPE : __int32
{
  T_DRAW = 0x0,
  T_DRAW_INDEXED = 0x1,
  T_DRAW_INSTANCED = 0x2,
  T_DRAW_INDEXED_INSTANCED = 0x3,
  T_CLEAR = 0x4,
  T_RESOLVE = 0x5,
  T_BRANCH = 0x6,
  T_QUERY = 0x7,
  T_MARKER = 0x8,
  T_SYNC = 0x9,
  T_NOP = 0xA,
  T_FLUSH = 0xB,
  T_DRAW_INDEXED_TESSELLATE = 0xC,
  T_CALLBACK = 0xD,
};

struct __cppobj cDraw::CMD_QUERY : cDraw::CMD
{
  u32 mode;
  nDraw::Query *pquery;
};

enum cDraw::CMD_QUERY::MODE : __int32
{
  MODE_BEGIN = 0x0,
  MODE_END = 0x1,
};

struct __cppobj cDraw::CMD_DRAW_BASE : cDraw::CMD
{
  cDraw::TARGET_STATE *ptstate;
  cDraw::DRAW_STATE *pdstate;
  cDraw::SHADER_STATE *psstate;
  cDraw::GEOM_STATE *pgstate;
};

struct __cppobj cDraw::CMD_NOP : cDraw::CMD
{
};

struct __cppobj cDraw::CMD_RESOLVE : cDraw::CMD
{
  nDraw::Texture *ptarget;
  u32 subresource;
  u32 flags;
  MtRect src;
  MtPoint dest;
  cDraw::CMD_DRAW *pdraw;
};

struct __cppobj cDraw::CMD_DRAW : cDraw::CMD_DRAW_BASE
{
  u32 vertex_count;
  u32 vertex_start;
};

struct __cppobj cDraw::CMD_CLEAR : cDraw::CMD
{
  u32 flags;
  f32 depth;
  u32 stencil;
  f32 color[4];
  cDraw::CMD_DRAW *pdraw;
};

struct __cppobj __attribute__((aligned(8))) cDraw::CMD_DRAW_INDEXED : cDraw::CMD_DRAW_BASE
{
  u32 index_count;
  u32 index_start;
  u32 index_offset;
};

struct __cppobj nDraw::CommandCache::MyDTI : MtDTI
{
};

struct nDraw::CommandCache::INDEX_STACK
{
  u32 index;
  nDraw::CommandCache::LIST_STACK *plist;
};

struct nDraw::CommandCache::LIST_STACK
{
  void *padr;
  void *pcb;
  nDraw::CommandCache::LIST_STACK *pnext;
};

enum nDraw::CLEAR_FLAG : __int32
{
  CLEAR_TARGET0 = 0x1,
  CLEAR_TARGET1 = 0x2,
  CLEAR_TARGET2 = 0x4,
  CLEAR_TARGET3 = 0x8,
  CLEAR_TARGET = 0xF,
  CLEAR_DEPTH = 0x10,
  CLEAR_STENCIL = 0x20,
  CLEAR_DEPTHSTENCIL = 0x30,
};

enum nDraw::RESOLVE_FLAG : __int32
{
  RESOLVE_TARGET0 = 0x0,
  RESOLVE_TARGET1 = 0x1,
  RESOLVE_TARGET2 = 0x2,
  RESOLVE_TARGET3 = 0x3,
  RESOLVE_DEPTHSTENCIL = 0x4,
  RESOLVE_FRAGMENT0 = 0x8,
  RESOLVE_FRAGMENT1 = 0x10,
  RESOLVE_FRAGMENT2 = 0x20,
  RESOLVE_FRAGMENT3 = 0x40,
};

enum nDraw::TSystem : __int32
{
  TSystem_Copy = 0x0,
  TSystem_Clear = 0x1,
  TSystem_DownSample4 = 0x2,
  TSystem_DownSample16 = 0x3,
  TSystem_ToneMap = 0x4,
  TSystem_DepthCopy = 0x5,
  TSystem_MiniDepthCopy = 0x6,
  TSystem_AACopy = 0x7,
  TSystem_ToneMapDepth = 0x8,
  TSystem_OcclusionZConv = 0x9,
  TSystem_PS3AACopy = 0xA,
  TSystem_PS3AADepthCopy = 0xB,
  TSystem_PS3DepthCopy = 0xC,
  TSystem_PS3ZcullReload = 0xD,
  TSystem_ClearMRT2 = 0xE,
  TSystem_ClearMRT3 = 0xF,
  TSystem_ClearMRT4 = 0x10,
  TSystem_DepthToAlpha = 0x11,
  TSystem_DepthToAlphaAA = 0x12,
  TSystem_DepthDownSample = 0x13,
  TSystem_DepthHMax = 0x14,
  TSystem_DepthVMax = 0x15,
  TSystem_DownSample4Emphansis = 0x16,
  TSystem_DownSample4HDR = 0x17,
  TSystem_ClearStencilRouting = 0x18,
  TSystem_FillStencilRouting = 0x19,
};

enum nDraw::GLOBAL_CBUFFER : __int32
{
  GCB_VIEWPROJECTION = 0x0,
  GCB_VIEWFRUSTUM = 0x1,
  GCB_SCREEN = 0x2,
  GCB_WORLD = 0x3,
  GCB_HDRFACTOR = 0x4,
  GCB_ROPTEST = 0x5,
  MAX_GLOBAL_CBUFFER = 0x6,
};

enum nDraw::RTARGET_FLAG : __int32
{
  RTARGET_ZPREPASS = 0x1,
  RTARGET_ZPOSTPASS = 0x2,
  RTARGET_ZSHARED = 0x4,
  RTARGET_SUBPIXEL_OFFSET = 0x8,
  RTARGET_DIRECT_DEPTH = 0x10,
  RTARGET_REDUCTION = 0x20,
  RTARGET_BACKFACE_ZPASS = 0x40,
  RTARGET_FLIP_SYNC = 0x80,
};

enum nDraw::MISC_ENCODE_MODE : __int32
{
  MISC_ENCODE_NONE = 0x0,
  MISC_ENCODE_RC_RGB = 0x100000,
  MISC_ENCODE_RR_RGBI = 0x200000,
  MISC_ENCODE_RR_RGB = 0x300000,
  MISC_ENCODE_RGBI = 0x400000,
  MISC_ENCODE_SRGB = 0x500000,
  MISC_ENCODE_SRGB_RC_RGB = 0x600000,
  MISC_ENCODE_SRGB_RR_RGBI = 0x700000,
  MISC_ENCODE_SRGB_RR_RGB = 0x800000,
  MISC_ENCODE_SRGB_RGBI = 0x900000,
  MISC_ENCODE_DEPTH24 = 0xA00000,
  MISC_ENCODE_NORMAL = 0xB00000,
  MISC_ENCODE_VARIANCE = 0xC00000,
  MISC_ENCODE_ZERO = 0xD00000,
};

enum nDraw::MISC_FLAG : __int32
{
  MISC_KEEP_STATE = 0x1,
  MISC_AUTO_RESIZE = 0x2,
  MISC_GENERATE_MIPS = 0x4,
  MISC_TEXTURECUBE = 0x8,
  MISC_LINEAR_FORMAT = 0x10,
  MISC_ROP_ALPHATEST = 0x20,
  MISC_DEPTHSTENCIL_COLOR_TARGET = 0x40,
  MISC_SHADER_RESOURCE = 0x80,
};

struct nDraw::BLENDSTATE_CONVERT
{
  unsigned __int32 dindex : 16;
  unsigned __int32 sindex : 16;
};

struct cDraw::clear::VERTEX
{
  MtFloat3 pos;
  MtFloat4 color;
};

enum sScene::TEX : __int32
{
  TEX_NULLWHITE = 0x0,
  TEX_NULLNORMAL = 0x1,
  TEX_NULLBLACK = 0x2,
  TEX_FONT = 0x3,
  TEX_NOISE = 0x4,
  TEX_NULLCUBE = 0x5,
  TEX_COMPARE = 0x6,
  TEX_SPHEREMAP = 0x7,
  TEX_DITHER = 0x8,
  TEX_CUBE_FACE_SELECT = 0x9,
  TEX_CUBE_FACE_OFFSET = 0xA,
  TEX_CUBE_INDIRECTION = 0xB,
  TEX_HIGH_DETAIL_FONT = 0xC,
  TEX_NUM = 0xD,
};

enum sMain::JOB_FUNCTYPE : __int32
{
  JOB_FUNCTYPE_32 = 0x0,
  JOB_FUNCTYPE_32X2 = 0x1,
  JOB_FUNCTYPE_64 = 0x2,
  JOB_FUNCTYPE_64X2 = 0x3,
};

struct cDraw::resolve::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
};

struct __cppobj cResource::XmlHandler : MtXmlReader::Handler
{
  t64 mBaseTime;
};

enum cUnit::DRAW_VIEW : __int32
{
  VIEW_0_0 = 0x1,
  VIEW_1_0 = 0x2,
  VIEW_2_0 = 0x4,
  VIEW_3_0 = 0x8,
  VIEW_4_0 = 0x10,
  VIEW_5_0 = 0x20,
  VIEW_6_0 = 0x40,
  VIEW_7_0 = 0x80,
  VIEW_OVERLAY_0 = 0x100,
  VIEW_COMMON_0 = 0x200,
};

enum nDraw::UNIT_TYPE : __int32
{
  UNIT_RANGE_LIGHT = 0x0,
  UNIT_GLOBAL_LIGHT = 0x1,
  UNIT_SHADOW_REGION = 0x2,
  UNIT_AMBIENT = 0x3,
  UNIT_SHADOW = 0x4,
  UNIT_FOG = 0x5,
  UNIT_TONEMAP = 0x6,
  UNIT_RANGE_WIND = 0x7,
  UNIT_GLOBAL_WIND = 0x8,
  UNIT_DISABLE = 0x9,
  MAX_UNIT_TYPE = 0xA,
};

struct __cppobj std::_Tree_val<_Val_types>_3 : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr_0 _Myhead;
  std::_Tree_val<_Val_types>::size_type _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > >_0 : std::_Tree_val<_Val_types>_3
{
};

struct __cppobj std::_Tree_buy<value_type,allocator_type>_3 : std::_Tree_alloc<false,std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > >_0
{
};

struct __cppobj std::_Tree_comp<false,std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0 : std::_Tree_buy<value_type,allocator_type>_3
{
};

struct __cppobj std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0 : std::_Tree_comp<false,std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0
{
};

struct __cppobj std::set<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *> >_0 : std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0
{
};

struct __cppobj MtStlSet<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >_0 : std::set<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *> >_0
{
};

typedef MtStlSet<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >_0 sUserManager::EventListenerSet_0;

struct __cppobj __attribute__((aligned(8))) sUserManager_0 : cSystem:160
{
  s32 mUserNum;
  sUserManager::EventListenerSet_0 mListener;
  SceUserServiceUserId mInitialUserId;
  SceUserServiceLoginUserIdList_0 mUserIdList;
  sUserManager::GamepadInfo mPadTVRemote;
  sUserManager::UserInfo mUser[4];
};

struct __cppobj sUserManager_0::MyDTI : MtDTI
{
};

typedef std::pair<iterator,bool> std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::_Pairib;

typedef std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::_Pairib std::set<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *> >_0::_Pairib;

typedef cUserManagerListener *std::_Simple_types<cUserManagerListener *>::value_type;

typedef std::_Simple_types<cUserManagerListener *>::value_type std::_Tree_val<_Val_types>_3::value_type;

typedef std::_Tree_val<_Val_types>_3::value_type std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::value_type;

typedef std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::value_type std::set<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *> >_0::value_type;

typedef std::_Tree_const_iterator<_Myt>_0 std::_If<true,const_iterator,iterator>::type;

typedef std::_If<true,const_iterator,iterator>::type std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::iterator;

typedef std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::iterator std::set<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *> >_0::iterator;

typedef std::less<cUserManagerListener *> std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false>::key_compare;

typedef std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false>::key_compare std::_Tree_comp<false,std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::key_compare;

typedef std::_Tree_comp<false,std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::key_compare std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::key_compare;

typedef MtStlAllocator<cUserManagerListener *> std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false>::allocator_type;

typedef std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false>::allocator_type std::_Tree_comp<false,std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::allocator_type;

typedef std::_Tree_comp<false,std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::allocator_type std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::allocator_type;

typedef std::_Tree_val<_Val_types>::size_type std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::size_type;

typedef std::_Tree_const_iterator<_Myt>_0 std::_Tree_val<_Val_types>_3::const_iterator;

typedef std::_Tree_val<_Val_types>_3::const_iterator std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::const_iterator;

typedef cUserManagerListener *std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false>::key_type;

typedef std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false>::key_type std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::key_type;

typedef std::pair<iterator,iterator> std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::_Pairii;

typedef std::_Tree_node<value_type,_Voidptr>_0 std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type_0;

typedef std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type_0 std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type_0;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type_0 *std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer_0;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer_0 MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer_0;

typedef MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer_0 std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type_0;

typedef std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type_0 std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_0;

typedef std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_0 std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_0;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_0 std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >::_Nodeptr;

typedef std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >::_Nodeptr std::_Tree_alloc<false,std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > >_0::_Nodeptr;

typedef std::_Tree_alloc<false,std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > >_0::_Nodeptr std::_Tree_buy<value_type,allocator_type>_3::_Nodeptr;

typedef std::_Tree_buy<value_type,allocator_type>_3::_Nodeptr std::_Tree<std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false> >_0::_Nodeptr;

typedef MtStlAllocator<cUserManagerListener *> std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >::_Alloc;

typedef std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >::_Alloc std::_Tree_alloc<false,std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > >_0::_Alloc;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::other std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >::_Alnod_type;

typedef std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> >::_Alnod_type std::_Tree_alloc<false,std::_Tree_base_types<cUserManagerListener *,MtStlAllocator<cUserManagerListener *> > >_0::_Alty;

typedef std::_Tree_val<_Val_types>::_Nodeptr_0 *std::_Tree_val<_Val_types>_3::_Nodepref;

typedef std::_Simple_types<cUserManagerListener *>::value_type *std::_Simple_types<cUserManagerListener *>::reference;

typedef std::_Simple_types<cUserManagerListener *>::reference std::_Tree_val<_Val_types>_3::reference;

typedef const std::_Simple_types<cUserManagerListener *>::value_type *std::_Simple_types<cUserManagerListener *>::const_reference;

typedef std::_Simple_types<cUserManagerListener *>::const_reference std::_Tree_val<_Val_types>_3::const_reference;

typedef cUserManagerListener *std::_Tset_traits<cUserManagerListener *,std::less<cUserManagerListener *>,MtStlAllocator<cUserManagerListener *>,false>::value_type;

typedef std::_Tree_val<_Val_types>::_Nodeptr_0 std::_Tree_const_iterator<_Myt>_0::_Nodeptr;

typedef std::_Tree_val<_Val_types>_3::const_reference std::_Tree_const_iterator<_Myt>_0::reference;

typedef std::_Tree_const_iterator<_Myt>_0 std::_Tree_const_iterator<_Myt>_0::_Myiter;

typedef std::bidirectional_iterator_tag std::_Tree_const_iterator<_Myt>_0::iterator_category;

typedef std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_0 std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_0::_Myiter;

struct std::_Alloc_destroy
{
  __int8 gap0[1];
};

struct std::remove_reference<char &>
{
  __int8 gap0[1];
};

typedef char std::remove_reference<char &>::type;

struct std::iterator_traits<std::_Tree_const_iterator<_Myt> >
{
  __int8 gap0[1];
};

typedef std::_Tree_const_iterator<_Myt>_0::iterator_category std::iterator_traits<std::_Tree_const_iterator<_Myt> >::iterator_category;

struct std::remove_reference<std::_Tree_const_iterator<_Myt> >
{
  __int8 gap0[1];
};

typedef std::_Tree_const_iterator<_Myt>_0 std::remove_reference<std::_Tree_const_iterator<_Myt> >::type;

struct std::remove_reference<std::_Tree_const_iterator<_Myt> &>
{
  __int8 gap0[1];
};

typedef std::_Tree_const_iterator<_Myt>_0 std::remove_reference<std::_Tree_const_iterator<_Myt> &>::type;

struct std::remove_reference<bool>
{
  __int8 gap0[1];
};

typedef bool std::remove_reference<bool>::type;

struct std::remove_reference<cUserManagerListener *const &>
{
  __int8 gap0[1];
};

typedef cUserManagerListener *const std::remove_reference<cUserManagerListener *const &>::type;

struct std::_Alloc_construct
{
  __int8 gap0[1];
};

struct std::remove_reference<std::_Tree_node<value_type,_Voidptr> *&>
{
  __int8 gap0[1];
};

typedef std::_Tree_node<value_type,_Voidptr>_0 *std::remove_reference<std::_Tree_node<value_type,_Voidptr> *&>::type;

struct std::_Alloc_max_size
{
  __int8 gap0[1];
};

enum SceUserServiceEventType : __int32
{
  SCE_USER_SERVICE_EVENT_TYPE_LOGIN = 0x0,
  SCE_USER_SERVICE_EVENT_TYPE_LOGOUT = 0x1,
};

enum ScePadDeviceClass : __int32
{
  SCE_PAD_DEVICE_CLASS_INVALID = 0xFFFFFFFF,
  SCE_PAD_DEVICE_CLASS_STANDARD = 0x0,
  SCE_PAD_DEVICE_CLASS_GUITAR = 0x1,
  SCE_PAD_DEVICE_CLASS_DRUM = 0x2,
  SCE_PAD_DEVICE_CLASS_DJ_TURNTABLE = 0x3,
  SCE_PAD_DEVICE_CLASS_DANCEMAT = 0x4,
  SCE_PAD_DEVICE_CLASS_NAVIGATION = 0x5,
  SCE_PAD_DEVICE_CLASS_STEERING_WHEEL = 0x6,
  SCE_PAD_DEVICE_CLASS_STICK = 0x7,
};

typedef SceUserServiceEventType SceUserServiceEventType_0;

struct SceUserServiceEvent
{
  SceUserServiceEventType_0 eventType;
  SceUserServiceUserId userId;
};

struct ScePadTouchPadInformation::$B4685E51B538B969BBE115DA2A79086A
{
  uint16_t x;
  uint16_t y;
};

struct ScePadTouchPadInformation
{
  float pixelDensity;
  ScePadTouchPadInformation::$B4685E51B538B969BBE115DA2A79086A resolution;
};

typedef ScePadTouchPadInformation ScePadTouchPadInformation_0;

struct ScePadStickInformation
{
  uint8_t deadZoneLeft;
  uint8_t deadZoneRight;
};

typedef ScePadStickInformation ScePadStickInformation_0;

struct ScePadControllerInformation
{
  ScePadTouchPadInformation_0 touchPadInfo;
  ScePadStickInformation_0 stickInfo;
  uint8_t connectionType;
  uint8_t connectedCount;
  bool connected;
  ScePadDeviceClass deviceClass;
  uint8_t reserve[8];
};

typedef SceUserServiceEvent SceUserServiceEvent_0;

typedef ScePadControllerInformation ScePadControllerInformation_0;

struct __cppobj uAdhesion : cUnit
{
  uAdhesion::ADHESION_INFO *mpAdhesionInfoArray;
  uAdhesion::ADHESION_INFO **mpAdhesionInfoStack;
  uAdhesion::ADHESION_INFO **mpAdhesionInfoStackPtr;
  uAdhesion::ADHESION_NODE *mpAdhesionTriangleNodeArray;
  uAdhesion::ADHESION_NODE **mpAdhesionTriangleStack;
  uAdhesion::ADHESION_NODE **mpAdhesionTriangleStackPtr;
  uAdhesion::ADHESION_NODE *mpAdhesionTriangleList;
  u32 mAdhesionNumber;
  u32 mAdhesionTriangleNumber;
  u32 mLightGroup;
  bool mLevelCorrectionFlag;
  s32 mLevelCorrectionAttenuation;
  f32 mLevelCorrectionLevelMin;
  f32 mLevelCorrectionLevelMax;
  MtFloat3 mLevelCorrectionColor;
};

struct uAdhesion::ADHESION_INFO
{
  MtMatrix projection;
  MtVector3 dir;
  MtVector3 tangent;
  rTexture *texture;
  rTexture *ntexture;
  rTexture *mtexture;
  MtColor col;
  MtFloat2 uv_lt;
  MtFloat2 uv_rb;
  f32 envmap_intensity;
  u32 specular_pow;
  f32 fresnel_scale;
  f32 fresnel_bias;
  f32 fresnel_exponent;
  u32 light_group;
  u32 sbc_handle;
  u32 parts_id;
  unsigned __int32 envmap_factor : 4;
  unsigned __int32 uvclamp : 1;
  unsigned __int32 binormal_flag : 1;
  unsigned __int32 tangent_flag : 1;
  unsigned __int32 padding01a0 : 1;
  unsigned __int32 prim_volume : 8;
  unsigned __int32 prim_intensity : 16;
  s32 prim_zofs;
  u64 prim_material;
  MtVector4 uvclamp_range;
};

struct uAdhesion::ADHESION_NODE
{
  uAdhesion::ADHESION_NODE *previous;
  uAdhesion::ADHESION_NODE *next;
  uAdhesion::ADHESION_INFO *adhesion_info;
  __attribute__((aligned(16))) MtVector3 vertices[3];
  MtFloat3 normal;
  MtFloat3 tangent;
};

struct __cppobj uAdhesion::MyDTI : MtDTI
{
};

struct uAdhesion::ADHESION_OPTIMIZED_TRIANGLE_INFO
{
  MtFloat3 vertex;
  u32 right_forward_vertex_cnt;
};

enum nPrim::Material::AttributeType : __int32
{
  ATTR_REFRACT = 0x1,
  ATTR_NOREDUCTION = 0x2,
  ATTR_POINTFILTER = 0x4,
  ATTR_NOZTEST = 0x8,
  ATTR_ZWRITE = 0x10,
  ATTR_OCCLUSION = 0x20,
  ATTR_NOALPHAWRITE = 0x40,
  ATTR_LIGHTING = 0x80,
  ATTR_DEPTHBLEND = 0x100,
  ATTR_VOLUME = 0x200,
  ATTR_DEPTHVOLUME = 0x400,
  ATTR_PARALLAX = 0x800,
  ATTR_NOFOG = 0x1000,
  ATTR_STEST = 0x2000,
  ATTR_FRESNEL = 0x10000,
  ATTR_CULLING = 0x20000,
  ATTR_NOTONEMAP = 0x40000,
  ATTR_UVCLAMP = 0x80000,
  ATTR_EXVOLUME = 0x100000,
  ATTR_BLUR = 0x200000,
  ATTR_TEXELCOORD = 0x400000,
  ATTR_SHADING = 0x800000,
  ATTR_ZBLUR = 0x1000000,
  ATTR_ZBLUREX = 0x2000000,
  ATTR_DEPTHCOMPARE = 0x4000000,
  ATTR_CLOUD = 0x10000000,
  ATTR_LV_CORRECTION = 0x20000000,
  ATTR_ALPHA_CORRECTION = 0x40000000,
  ATTR_LENS_FLARE = 0x80000000,
  ATTR_REFRACT_ALPHA = 0x1000000,
  ATTR_REFRACT_UV = 0x2000000,
  ATTR_SYMMETRY = 0x20,
  ATTR_METADATA = 0xF08900A0,
  ATTR_DISTORTION = 0x200001,
};

enum nPrim::Material::PrimType : __int32
{
  TYPE_POINT_0 = 0x0,
  TYPE_LINE_1 = 0x1,
  TYPE_POLYLINE = 0x2,
  TYPE_POLYGON = 0x3,
  TYPE_PARTICLE = 0x4,
  TYPE_SPRITE = 0x5,
  TYPE_LINE_S = 0x6,
  TYPE_POLYLINE_S = 0x7,
  TYPE_2D_POINT = 0x8,
  TYPE_2D_LINE = 0x9,
  TYPE_2D_POLYLINE = 0xA,
  TYPE_2D_POLYGON = 0xB,
  TYPE_2D_PARTICLE = 0xC,
  TYPE_2D_SPRITE = 0xD,
  TYPE_2D_LINE_S = 0xE,
  TYPE_2D_POLYLINE_S = 0xF,
  TYPE_MODEL = 0x10,
  TYPE_CLOUD_BILLBOARD = 0x11,
  TYPE_CLOUD = 0x12,
  PRIM_TYPE_MAX = 0x13,
};

enum nPrim::Texture::TextureFlags : __int32
{
  RESOURCE_TEXBASE = 0x1,
  RESOURCE_TEXTURE = 0x2,
  RESOURCE_NORMAL = 0x4,
  RESOURCE_MASK = 0x8,
  RESOURCE_ALPHA = 0x10,
};

enum nPrim::eErrorStatus : __int32
{
  PRIM_ERR_NONE = 0x0,
  PRIM_ERR_CRITICAL = 0x1,
  PRIM_ERR_UNINIT = 0x2,
  PRIM_ERR_NO_VB = 0x3,
  PRIM_ERR_VB_MAX = 0x4,
  PRIM_ERR_VB_TEMP_ERR = 0x5,
  PRIM_ERR_NO_IB = 0x6,
  PRIM_ERR_IB_MAX = 0x7,
  PRIM_ERR_IB_TEMP_ERR = 0x8,
  PRIM_ERR_STACK_OVERFLOW = 0x9,
  PRIM_ERR_STACK_EMPTY = 0xA,
  PRIM_ERR_UNSUPORTED = 0xB,
  PRIM_TAG_ERR_MAX = 0xC,
  PRIM_DRAW_ERR_V_COUNT = 0xD,
  PRIM_DRAW_ERR_DEPTH = 0xE,
  PRIM_MD_NO_TRANS = 0xF,
  PRIM_MD_ALLOC_FAILED = 0x10,
  PRIM_ERR_COUNT = 0x11,
};

enum nPrim::eMetaDataType : __int32
{
  METADATA_LIGHT = 0x0,
  METADATA_OCCLUSION = 0x1,
  METADATA_FRESNEL = 0x2,
  METADATA_UVCLAMP = 0x3,
  METADATA_SHADE = 0x4,
  METADATA_CLOUD = 0x5,
  METADATA_LV_CORRECTION = 0x6,
  METADATA_LENS_FLARE = 0x7,
  MAX_METADATA = 0x8,
};

struct nPrim::MetaDataFresnel
{
  f32 factor;
  f32 bias;
  f32 refl_coef;
  u32 pad01;
};

struct nPrim::MetaDataLight
{
  MtFloat3 wpos;
  u32 group;
};

struct nPrim::MetaDataLvCorrection
{
  f32 lv_min;
  f32 lv_max;
  s32 atten;
  MtFloat3 color_const;
};

struct __cppobj __attribute__((aligned(16))) uAmbientShadow : cUnit
{
  MtVector3 mPos;
  MtVector3 mDir;
  uCoord *mpParent;
  s32 mParentNo;
  __attribute__((aligned(8))) MtVector3 mWPos;
  MtVector3 mWDir;
  u32 mProjectionType;
  u32 mAmbientMaskGroup;
  u32 mBlendType;
  u32 mPriority;
  rTexture *mpTexture;
  f32 mSize;
  f32 mFov;
  f32 mStart;
  f32 mEnd;
  f32 mStartDecay;
  f32 mEndDecay;
  f32 mSpread;
  f32 mIntensity;
};

struct __cppobj uAmbientShadow::MyDTI : MtDTI
{
};

enum uAmbientShadow::ProjectionType : __int32
{
  PT_GROUND = 0x0,
  PT_PERSPECTIVE = 0x1,
};

enum uAmbientShadow::BlendType : __int32
{
  BT_MAX = 0x0,
  BT_ALPHA = 0x1,
};

enum nDraw::TAmbientShadow : __int32
{
  TAmbientShadow_Default = 0x0,
  TAmbientShadow_Alpha = 0x1,
};

struct std::_Ignore
{
  __int8 gap0[1];
};

struct std::exception
{
  int (**_vptr$exception)(void);
};

struct __cppobj std::bad_function_call : std::exception
{
};

struct std::_Pair_base<uBaseModel::CACHE *,uBaseModel::CACHE *>
{
  uBaseModel::CACHE *first;
  uBaseModel::CACHE *second;
};

struct __cppobj std::pair<uBaseModel::CACHE *,uBaseModel::CACHE *> : std::_Pair_base<uBaseModel::CACHE *,uBaseModel::CACHE *>
{
};

struct std::iterator_traits<uBaseModel::CACHE *>
{
  __int8 gap0[1];
};

typedef uBaseModel::CACHE std::iterator_traits<uBaseModel::CACHE *>::value_type;

typedef ptrdiff_t std::iterator_traits<uBaseModel::CACHE *>::difference_type;

struct std::_Nonscalar_ptr_iterator_tag
{
  __int8 gap0[1];
};

struct std::conditional<true,std::_Nonscalar_ptr_iterator_tag,std::_Scalar_ptr_iterator_tag>
{
  __int8 gap0[1];
};

typedef std::_Nonscalar_ptr_iterator_tag std::conditional<true,std::_Nonscalar_ptr_iterator_tag,std::_Scalar_ptr_iterator_tag>::type;

struct std::_Scalar_ptr_iterator_tag
{
  __int8 gap0[1];
};

struct std::remove_reference<uBaseModel::CACHE &>
{
  __int8 gap0[1];
};

typedef uBaseModel::CACHE std::remove_reference<uBaseModel::CACHE &>::type;

struct std::remove_reference<uBaseModel::CACHE *>
{
  __int8 gap0[1];
};

typedef uBaseModel::CACHE *std::remove_reference<uBaseModel::CACHE *>::type;

struct std::remove_reference<uBaseModel::CACHE *&>
{
  __int8 gap0[1];
};

typedef uBaseModel::CACHE *std::remove_reference<uBaseModel::CACHE *&>::type;

enum uBaseModel::LIGHT_ATTR : __int32
{
  LIGHT_PARTS_CULLING = 0x1,
  LIGHT_PARENT_RECIVER = 0x2,
  LIGHT_SHADOW_REGION = 0x4,
};

struct uBaseModel::CACHE_OP
{
  __int8 gap0[1];
};

enum rModel::PRIMITIVE_INFO::LOD : __int32
{
  LOD_HIGH_0 = 0x1,
  LOD_MID = 0x2,
  LOD_LOW_0 = 0x4,
};

enum sScene::AMBIENT_TYPE : __int32
{
  AMBIENT_SH = 0x1,
  AMBIENT_SHADOW_REGION = 0x2,
  AMBIENT_ENVCUBE = 0x4,
};

struct __cppobj __attribute__((aligned(8))) uJointAnimator : cUnit
{
  uModel *mpTargetModel;
  uModel *mpTargetModelOld;
  f32 mBlendRatio;
  nJointAnimator::JA_JOINT_BUFF *mpCloneBuff;
  nJointAnimator::JA_JOINT_BUFF *mpWBBuff;
  u32 mJointNum;
  u8 *mpJointNoTag;
  MtMatrix *mpJointBaseMatrix;
  MtMatrix *mpJointInvBaseMatrix;
  bool mAvailable;
  bool mForcedInvalid;
};

struct nChain::chainParam
{
  u32 mChainInfoNum;
  u32 mColInfoNum;
  f32 mBaseDelta;
  f32 mSolveDelta;
  f32 mGravity;
  f32 mSpeedDump;
  u32 mSolve;
  bool mTransApplyWorld;
  bool mExforceFlag;
  bool mExforceApplyWorld;
  bool mRandomDumpingFlag;
  f32 mMotionBlendRatio;
  __attribute__((aligned(16))) MtVector3 mRandomExforce;
  MtVector3 mConstantExforce;
  f32 mRandomForceStep;
  f32 mRandomForceTheta;
  f32 mRandomCtr;
  f32 mTimeScale;
  f32 mLooseRange;
  f32 mBendRegistRatio;
  u32 mStabilizeCtr;
  __attribute__((aligned(8))) MtVector3 mOldWorldPos;
  MtVector3 mTransDiffVector;
  MtMatrix mRotMat;
  MtGeomConvex *mpColliderGeoms[8];
  u32 mIntersectedColliderNum;
};

struct __cppobj cpChain : CoprocessorObject
{
  u32 mPhase;
  bool mActiveColEnable;
  bool mStaticColEnable;
  s32 mHitCollisionID;
  s32 mJointNum;
  u32 mIntersectedColliderNum;
  nChain::chainParam *mpCP;
  nChain::ChainInfo *mpChainInfo;
  nChain::JointWork *mpJointWork;
  u8 *mpJointNoTag;
  nJointAnimator::JA_JOINT_BUFF *mpCloneBuff;
  nJointAnimator::JA_JOINT_BUFF *mpWBBuff;
  nChain::ColInfo *mpColInfo;
  nChain::CollisionWork *mpCollisionWork;
  MtGeomConvex **mpGeomConvex;
};

struct __cppobj uChain : uJointAnimator
{
  rChain *mpChain;
  u32 mChainTimeStamp;
  nChain::JointWork **mpJointWork;
  nChain::chainParam mCP;
  bool mScrCollision;
  bool mColliderCollision;
  u32 mSbcType;
  u32 mSbcFilter;
  sCollision::PreTraverseInfo mPreTraverseInfo;
  u32 mColliderType;
  u32 mColliderFilter;
  uModel *mpColModel;
  uModel *mpColModelOld;
  rChainCol *mpCollision;
  u32 mColTimeStamp;
  nChain::CollisionWork *mpCollisionWork;
  bool mStaticColEnable;
  s32 mHitCollisionID;
  __attribute__((aligned(16))) MtGeomAABB mBoundingAABB;
  MtMatrix *mpColJointWMat;
  u8 mpColJointNoTag[256];
  sCollision::Node *mpColliderNode;
  MtGeomConvex *mpColliderGeoms[8];
  u32 mIntersectedColliderNum;
  __attribute__((aligned(16))) cpChain mChainJob;
};

struct nJointAnimator::JA_JOINT_BUFF
{
  MtMatrix joint_wmat;
  MtVector3 joint_scale;
  MtQuaternion joint_quat;
  MtVector3 joint_trans;
};

struct rChain::Header
{
  u32 magic;
  u32 version;
  u32 data_size;
  u8 chain_info_num;
  u8 reserve[3];
};

struct __cppobj __attribute__((aligned(8))) rChain : cResource
{
  rChain::Header mHeader;
  nChain::ChainInfo *mpChainInfo;
  u32 mTimeStamp;
};

struct nChain::JointWork
{
  MtMatrix mWorldMat;
  MtQuaternion mQuat;
  MtVector3 mSpeed;
  MtVector3 mPos;
  MtVector3 mOldPos;
  MtVector3 mForce;
  MtVector3 mExForce;
  MtVector3 mRandomExForce;
  MtVector3 mJointVec[4];
  f32 mLength[4];
  f32 mOrgLength[4];
  u32 mNodeJointWorkIdx[4];
  u32 mNodeAttr[4];
  u32 mJointAttr;
  u32 mRefJointNo;
  u32 padding[2];
};

struct rChainCol::Header
{
  u32 magic;
  u32 version;
  u32 colinfo_num;
  u32 data_size;
};

struct __cppobj __attribute__((aligned(8))) rChainCol : cResource
{
  rChainCol::Header mHeader;
  nChain::ColInfo *mpColInfo;
  u32 mTimeStamp;
};

struct nChain::CollisionWork
{
  u32 mAttr;
  u32 mShape;
  __attribute__((aligned(16))) MtVector3 mScale;
  MtMatrix mMat;
  MtMatrix mFinalMat;
  MtQuaternion mTargetQuat;
  MtQuaternion mQuat;
  MtQuaternion mBaseQuat;
  MtVector3 mTargetPos;
  MtVector3 mPos;
  MtVector3 mBasePos;
  f32 mSolveCtr;
  f32 mSolveDelta;
  __attribute__((aligned(16))) MtVector3 mDeltaSpeed;
  MtGeomConvex *mpGeomConvex;
};

struct nChain::ChainInfo
{
  u8 joint_info_num;
  u8 chain_type;
  u16 reserve;
  u32 joint_info_offset;
  u32 reserve1[2];
  f32 grav_scaler;
  f32 time_scaler;
  f32 dump_scaler;
  f32 freserve;
};

struct nChain::ColInfo
{
  u32 attr;
  u16 ref_joint_no;
  u16 pair_joint_no;
  u8 shape;
  u8 reserve[3];
  f32 reserve1;
  MtFloat3 position;
  u32 id;
  MtFloat3 extent;
  f32 radius;
  MtFloat3 angle;
  f32 reserve2;
};

struct __cppobj uChain::MyDTI : MtDTI
{
};

struct __cppobj uJointAnimator::MyDTI : MtDTI
{
};

enum uModel::MODEL_STATUS : __int32
{
  S_JOINT_READY = 0x1,
};

struct cTrans;

struct __cppobj rChain::MyDTI : MtDTI
{
};

enum nChain::JointWork::$1514691D4CE2AD9586621AB159F25B8C : __int32
{
  JOINT_ROOT = 0x1,
  JOINT_LEAF = 0x2,
  NODE_PARENT = 0x4,
  NODE_NEIGHBOR = 0x8,
  NODE_CHILD = 0x10,
};

enum nChain::ColInfo::COLLISION_SHAPE : __int32
{
  SHAPE_SPHERE = 0x0,
  SHAPE_CAPSULE = 0x1,
  SHAPE_AABB = 0x2,
  SHAPE_OBB = 0x3,
};

enum nChain::ColInfo::COLLISION_ATTRIBUTE : __int32
{
  COL_ATTR_ATTACHED = 0x1,
};

enum nChain::ColInfo::$5554C2FC92006C8105D81820F531AA4C : __int32
{
  NO_REF_PAIRJOINT = 0xFFF,
};

struct nChain::JointInfo
{
  u32 attr;
  u16 ref_joint_no;
  u8 node_num;
  u8 reserve0;
  u32 reserve1[2];
  MtFloat3 min_angle;
  f32 spring_coef;
  MtFloat3 max_angle;
  f32 dumping_coef;
  f32 mass;
  u8 restrict_flag;
  u8 col_shape;
  u8 reserve2[2];
  f32 col_radius;
  f32 air_regist;
  u8 node_joint_no[4];
  f32 friction;
  f32 soft_coef;
  f32 bend_regist;
  u32 reserve[3];
};

enum nChain::JointInfo::JOINT_ATTRIBUTE : __int32
{
  JOINT_ATTR_CONSTRAINT = 0x1,
  JOINT_ATTR_ATTACHED = 0x2,
  JOINT_ATTR_NOROTATE = 0x4,
};

enum nChain::JointInfo::JOINT_COL_SHAPE : __int32
{
  JOINT_COL_SPHERE = 0x1,
  JOINT_COL_CAPSULE = 0x2,
};

enum nChain::$43BEEA27E20383EEEDF698867A22A515 : __int32
{
  MAX_COLLIDER_NUM = 0x8,
};

enum sCollision::FILTER : __int32
{
  FILTER_EXTRA_0 = 0x1,
  FILTER_EXTRA_1 = 0x2,
  FILTER_EXTRA_2 = 0x4,
  FILTER_EXTRA_3 = 0x8,
  FILTER_EXTRA_4 = 0x10,
  FILTER_EXTRA_5 = 0x20,
  FILTER_EXTRA_6 = 0x40,
  FILTER_EXTRA_7 = 0x80,
  FILTER_00 = 0x100,
  FILTER_01 = 0x200,
  FILTER_02 = 0x400,
  FILTER_03 = 0x800,
  FILTER_04 = 0x1000,
  FILTER_05 = 0x2000,
  FILTER_06 = 0x4000,
  FILTER_07 = 0x8000,
  FILTER_08 = 0x10000,
  FILTER_09 = 0x20000,
  FILTER_10 = 0x40000,
  FILTER_11 = 0x80000,
  FILTER_12 = 0x100000,
  FILTER_13 = 0x200000,
  FILTER_14 = 0x400000,
  FILTER_15 = 0x800000,
  FILTER_16 = 0x1000000,
  FILTER_17 = 0x2000000,
  FILTER_18 = 0x4000000,
  FILTER_19 = 0x8000000,
  FILTER_20 = 0x10000000,
  FILTER_21 = 0x20000000,
  FILTER_SLOPE = 0x80000000,
  FILTER_CANCEL = 0x40000000,
  FILTER_ALL = 0x3FFFFFFF,
};

enum sCollision::TYPE : __int32
{
  TYPE_00_1 = 0x1,
  TYPE_01_1 = 0x2,
  TYPE_02_1 = 0x4,
  TYPE_03_1 = 0x8,
  TYPE_04_1 = 0x10,
  TYPE_05_1 = 0x20,
  TYPE_06_1 = 0x40,
  TYPE_07_1 = 0x80,
  TYPE_08_1 = 0x100,
  TYPE_09_1 = 0x200,
  TYPE_10_0 = 0x400,
  TYPE_11_0 = 0x800,
  TYPE_12_0 = 0x1000,
  TYPE_13_0 = 0x2000,
  TYPE_14_0 = 0x4000,
  TYPE_15_0 = 0x8000,
  TYPE_16_0 = 0x10000,
  TYPE_17_0 = 0x20000,
  TYPE_18_0 = 0x40000,
  TYPE_19_0 = 0x80000,
  TYPE_20_0 = 0x100000,
  TYPE_21_0 = 0x200000,
  TYPE_22_0 = 0x400000,
  TYPE_23_0 = 0x800000,
  TYPE_24_0 = 0x1000000,
  TYPE_25_0 = 0x2000000,
  TYPE_26_0 = 0x4000000,
  TYPE_27_0 = 0x8000000,
  TYPE_28_0 = 0x10000000,
  TYPE_29_0 = 0x20000000,
  TYPE_30_0 = 0x40000000,
  TYPE_PHYSICS = 0x40000000,
  TYPE_SCR = 0x80000000,
  TYPE_DEFAULT_1 = 0x1,
  TYPE_ALL_1 = 0x7FFFFFFF,
};

struct __cppobj rChainCol::MyDTI : MtDTI
{
};

enum CoprocessorObject::BehaviorFlag : __int32
{
  CB_EXECUTE_ON_CPU = 0x1,
  CB_EXECUTE_ON_CoPU = 0x2,
  CB_EXECUTE_ON_OPTM = 0x4,
  CB_EXECUTE_ON_MASK = 0xF,
  CB_DEFAULT = 0x4,
};

struct __cppobj __attribute__((aligned(4))) uCloud : uCoord
{
  uCloudControl *mpControl;
  rCloud *mpResource;
  uCloud::Particle *mpParticleArray;
  MtRandom mRandom;
  u32 mParticleNum;
  u32 mDissipationCount;
  f32 mTimer;
  u32 mDissipationPeriod;
  f32 mBoundaryRadius;
  bool mStandBy;
};

struct __cppobj uCloudControl : cUnit
{
  u32 mMode;
  __attribute__((aligned(16))) MtVector3 mCenter;
  f32 mInnerRadius;
  f32 mOuterRadius;
  f32 mAxis0;
  f32 mAxis1;
  f32 mAxisAngle;
  f32 mThickness;
  f32 mScale;
  f32 mFreq;
  MtVector3 mWind;
  MtVector3 mSunDirection;
  MtVector3 mSunColor;
  MtColor mAmbientColor;
  rCloud *mpResourceArray[4];
  f32 mAppearanceRatio[4];
  u32 mCloudLine;
  bool mGenerate;
  f32 mTimer;
  f32 mPlaybackSpeed;
  f32 mMaxCloudRadius;
  f32 mFar;
  u32 mPresetNum;
  u32 mPresetSkip;
};

struct __cppobj rCloud : cResource
{
  s16 mRandomSeed;
  u8 mBaseFps;
  u8 mParticleNum;
  u8 mParticleType;
  u8 mAttribute;
  __attribute__((aligned(16))) MtVector3 mGeneratePoint[16];
  MtVector3 mGenerateVelocity[16];
  f32 mGenerateSize[16];
  u16 mWaitTime[16];
  u16 mTexcoord[64];
  MtVector3 mRot[16];
  u32 mRotOrder[16];
  f32 mAspectRatio[16];
  f32 mPointFluctuation;
  f32 mVelocityFluctuation;
  f32 mSizeFluctuation;
  u16 mWaitTimeFluctuation;
  MtVector3 mRotFluctuation;
  f32 mAlphaIncreaseRate;
  f32 mAlphaDecreaseRate;
  f32 mSizeIncreaseRate;
  u32 mPeriod;
  f32 mTop;
  f32 mBottom;
  f32 mHighColorScale;
  f32 mMediumColorScale;
  f32 mDarkColorScale;
  MtColor mTopAmbientColor;
  MtColor mBottomAmbientColor;
  rTexture *mpTexture;
};

struct uCloud::Particle
{
  MtVector3 mPos;
  MtVector3 mVelocity;
  u32 mPhase;
  f32 mSize;
  f32 mAspect;
  f32 mAlpha;
  u32 mWaitTime;
  u16 mTexcoord[4];
  __attribute__((aligned(8))) MtMatrix mWmat;
};

struct __cppobj uCloud::MyDTI : MtDTI
{
};

enum uCloud::PHASE : __int32
{
  WAIT = 0x0,
  FORMATION = 0x1,
  HOLD = 0x2,
  DISSIPATION = 0x3,
  END_0 = 0x4,
};

struct __cppobj uCloudControl::MyDTI : MtDTI
{
};

enum uCloudControl::CreationType : __int32
{
  CT_CYLINDER = 0x0,
  CT_RECTANGULAR = 0x1,
};

struct __cppobj rCloud::MyDTI : MtDTI
{
};

enum rCloud::Attribute : __int32
{
  RANDOM_HFLIP = 0x1,
  RANDOM_VFLIP = 0x2,
};

struct nPrim::CloudBillboardVertexFormat
{
  MtFloat3 gen_pos;
  s16 asp;
  s16 alpha;
  s16 u;
  s16 v;
  f32 size;
  s16 pos_x;
  s16 pos_y;
  s16 pos_z;
  s16 pos_scale;
};

struct nPrim::CloudVertexFormat
{
  MtFloat3 gen_pos;
  MtFloat3 pos;
  f32 alpha;
  s16 u;
  s16 v;
};

struct nPrim::MetaDataCloud
{
  MtFloat3 sun_dir;
  MtFloat2 h_range;
  MtColor height_c0;
  MtColor height_c1;
  __attribute__((aligned(8))) MtColorF dir_cmin;
  MtColorF dir_cmed;
  MtColorF dir_cmax;
};

struct __cppobj uCnsLookAt : uConstraint
{
  uModel *mpTargetModel;
  __attribute__((aligned(16))) MtVector3 mTargetPos;
  MtVector3 mTargetWPos;
  rCnsLookAt *mpCnsLookAtRes;
  unsigned __int32 mDir : 8;
  unsigned __int32 mUp : 8;
  unsigned __int32 mJoint : 8;
  unsigned __int32 mTargetJointNo : 8;
  u32 mType;
};

struct __cppobj uCnsRotateLimit : uConstraint
{
  rCnsRotateLimit *mpResource;
  __attribute__((aligned(16))) MtVector3 mRotMax;
  MtVector3 mRotMin;
  unsigned __int32 mJointNo : 8;
  unsigned __int32 mOrder : 4;
  unsigned __int32 mAxis : 4;
  unsigned __int32 mReserved : 16;
};

struct __cppobj __attribute__((aligned(8))) uCnsLookAtEyeball : uConstraint
{
  rCnsLookAtEyeball *mpResource;
  uModel *mpTargetModel;
  MtVector3 mTargetPos;
  MtVector3 mTargetWPos;
  uCnsLookAt mREyeCns;
  uCnsLookAt mLEyeCns;
  uCnsRotateLimit mREyeLimit;
  uCnsRotateLimit mLEyeLimit;
  u32 mREyeJointNo;
  u32 mLEyeJointNo;
  u32 mTargetJointNo;
  f32 mRotLimitInside;
  f32 mRotLimitOutside;
  f32 mRotLimitUp;
  f32 mRotLimitDown;
};

struct rConstraint::$0B267C43E002933C51D1396DF06EF144::$06A513E496678B56ADE4D4A6B7F97237
{
  u32 mID;
  u32 mPri;
};

union rConstraint::$0B267C43E002933C51D1396DF06EF144
{
  u32 mConstraintData[2];
  rConstraint::$0B267C43E002933C51D1396DF06EF144::$06A513E496678B56ADE4D4A6B7F97237 _anon_0;
};

struct __cppobj rConstraint : cResource
{
  rConstraint::$0B267C43E002933C51D1396DF06EF144 _anon_0;
};

struct __cppobj rCnsLookAtEyeball : rConstraint
{
  MtFloat3 mTargetPos;
  u32 mTargetJointNo;
  u32 mREyeJointNo;
  u32 mLEyeJointNo;
  f32 mRotLimitInside;
  f32 mRotLimitOutside;
  f32 mRotLimitUp;
  f32 mRotLimitDown;
};

struct rCnsLookAt::Data
{
  u8 dir;
  u8 up;
  u8 jointNo;
  u8 targetJointNo;
  MtFloat3 targetPos;
};

struct __cppobj rCnsLookAt : rConstraint
{
  rCnsLookAt::Data mData;
};

struct rCnsRotateLimit::Data
{
  u8 jointNo;
  u8 order;
  u8 axis;
  u8 reserved;
  MtFloat3 rotMax;
  MtFloat3 rotMin;
};

struct __cppobj __attribute__((aligned(8))) rCnsRotateLimit : rConstraint
{
  rCnsRotateLimit::Data mData;
};

struct __cppobj uCnsLookAtEyeball::MyDTI : MtDTI
{
};

enum uConstraint::DIRECTION : __int32
{
  X = 0x0,
  Y = 0x1,
  Z = 0x2,
  NX = 0x3,
  NY = 0x4,
  NZ = 0x5,
};

struct __cppobj rCnsLookAtEyeball::MyDTI : MtDTI
{
};

struct __cppobj rConstraint::MyDTI : MtDTI
{
};

struct __cppobj uCnsLookAt::MyDTI : MtDTI
{
};

enum uCnsLookAt::TYPE : __int32
{
  T_UP = 0xF,
  T_DIR = 0xF0,
  T_UP_IDX = 0xF00,
  T_UP_X = 0x1,
  T_UP_Y = 0x2,
  T_UP_Z = 0x4,
  T_UP_N = 0x8,
  T_DIR_X = 0x10,
  T_DIR_Y = 0x20,
  T_DIR_Z = 0x40,
  T_DIR_N = 0x80,
};

struct __cppobj rCnsLookAt::MyDTI : MtDTI
{
};

struct __cppobj uCnsRotateLimit::MyDTI : MtDTI
{
};

struct __cppobj rCnsRotateLimit::MyDTI : MtDTI
{
};

enum uCoord::ORDER : __int32
{
  ORDER_XYZ = 0x0,
  ORDER_XZY = 0x1,
  ORDER_YXZ = 0x2,
  ORDER_YZX = 0x3,
  ORDER_ZXY = 0x4,
  ORDER_ZYX = 0x5,
};

enum uCoord::PARENT_FLAG : __int32
{
  PARENT_ANGLE = 0x1,
  PARENT_SCALE = 0x2,
};

struct __cppobj uDPEnvMap : cUnit
{
  rRenderTargetTexture *mpCubeMap;
  nDraw::Texture *mpParaboloidMap[2];
  nDraw::Texture *mpTempMap;
  nDraw::Texture *mpDepthStencil;
  __attribute__((aligned(16))) MtVector3 mCenterPos;
  MtVector3 mCurrentPos;
  uCamera *mpCamera;
  f32 mNear;
  f32 mFar;
  u32 mMSAA;
  bool mFogEnable;
  uCoord *mpParent;
  u32 mParentNo;
  u32 mParaboloidMapSize;
  nDraw::Scene *mpScene;
  bool mSceneEnable;
};

struct __cppobj uDPEnvMap::MyDTI : MtDTI
{
};

struct uDPEnvMap::CUBIC_VERTEX
{
  f32 x;
  f32 y;
  f32 tx;
  f32 ty;
  f32 tz;
};

enum nDraw::TDualParaboloid : __int32
{
  TDualParaboloid_Default = 0x0,
};

struct __cppobj rRenderTargetTexture::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uEnvMap : cUnit
{
  rRenderTargetTexture *mpCubeMap;
  nDraw::Texture *mpCubeMapSource[3];
  nDraw::Texture *mpCubeMapFace;
  nDraw::Texture *mpCubeMapDepth;
  MtVector3 mCenterPos;
  MtVector3 mCurrentPos;
  f32 mNear;
  f32 mFar;
  MtColor mBkColor;
  u32 mMSAA;
  bool mCameraTarget;
  bool mTimeSharedRendering;
  f32 mCubicBlurPow;
  u32 mUpdateInterval;
  u32 mInnerUpdateInterval;
  u32 mUpdateCount[2];
  u32 mCurrentTexture;
  u32 mCrossfadeTime;
  u32 mCrossfadeCount;
  u32 mCurrentFace[2];
  u32 mCurrentMipLevel[2];
  uCoord *mpParent;
  u32 mParentNo;
  bool mFogEnable;
  bool mFirstTime;
  nDraw::Scene *mpScene;
  bool mSceneEnable;
};

struct __cppobj uEnvMap::MyDTI : MtDTI
{
};

struct uEnvMap::CUBIC_BLUR_VERTEX
{
  f32 x;
  f32 y;
  f32 tx;
  f32 ty;
  f32 tz;
};

enum uEnvMap::MSAA : __int32
{
  MSAA_NONE = 0x0,
  MSAA_2X = 0x1,
  MSAA_4X = 0x2,
};

enum nDraw::TCubeMapFilter : __int32
{
  TCubeMapFilter_Blur = 0x0,
  TCubeMapFilter_Blend = 0x1,
};

struct __cppobj uFacial : cUnit
{
  uModel *mpModel;
  rFacialPattern *mpPattern;
  rFacialAnimation *mpAnimation;
  uFacial::JointInfo *mpJointInfo;
  u32 mJointInfoNum;
  f32 mFrame;
  f32 mSpeed;
  bool mLoop;
  bool mPause;
  s32 *mpNowTrackKeyIndexArray;
};

struct __cppobj rFacialPattern : cResource
{
  rFacialPattern::FACIAL_HDR *mpHdr;
};

struct rFacialAnimation::Header
{
  u32 Magic;
  u32 Version;
  u32 TrackNum;
  u32 FrameNum;
  s32 EyeJointNoRight;
  s32 EyeJointNoLeft;
  bool FlgEnableExtendEye;
  s32 ExtendEyeTrackNo[8];
};

struct __cppobj rFacialAnimation : cResource
{
  rFacialAnimation::Header mHeader;
  rFacialAnimation::TrackParam *mpTrackParam;
};

struct uFacial::JointInfo
{
  MtQuaternion quat_base;
  MtVector4 trans_base;
  MtVector3 scale_base;
};

struct FACIAL_PARAM
{
  u8 type;
  u8 usage;
  u8 jnt_type;
  u8 jnt_no;
  f32 weight;
  u32 param_size;
  void *pparam;
};

struct rFacialPattern::FACIAL_HDR
{
  u32 magic;
  u16 version;
  u16 param_num;
  u32 frame_num;
  f32 base_trans_x;
  f32 base_trans_y;
  f32 base_trans_z;
  FACIAL_PARAM param[1];
};

struct rFacialAnimation::TrackParam
{
  u32 FCurveDescKeyNum;
  f32 FCurveDefaultValue;
  MtFCurve::DescKey *pFCurveDescKey;
};

struct MtFCurve::DescKey
{
  s32 frame;
  u32 interpolation;
  f32 value;
  f32 rtany;
  f32 ltany;
  f32 right;
  f32 left;
  f32 rtanx;
  f32 ltanx;
};

struct __cppobj uFacial::MyDTI : MtDTI
{
};

enum uModel::UPDATE_WORLD_MATRIX_MODE : __int32
{
  UPDWM_DEFAULT = 0x0,
  UPDWM_PRE_UPDATE = 0x1,
  UPDWM_DISABLE_CONSTRAINT = 0x2,
  UPDWM_NULL_MATRIX = 0x4,
  UPDWM_ENABLE_SCALE = 0x0,
};

struct __cppobj rFacialPattern::MyDTI : MtDTI
{
};

enum FACIAL_PARAM::TYPE : __int32
{
  T_UNKNOWN = 0x0,
  T_VECTOR3 = 0x1,
  T_VECTOR3_CONST = 0x2,
  T_QUATERNION = 0x3,
  T_QUATERNION_CONST = 0x4,
};

struct __cppobj rFacialAnimation::MyDTI : MtDTI
{
};

enum rFacialAnimation::EYE_DEFAULT_TRACK : __int32
{
  EYE_DEFAULT_TRACK_RY = 0x0,
  EYE_DEFAULT_TRACK_RX = 0x1,
  EYE_DEFAULT_TRACK_LY = 0x2,
  EYE_DEFAULT_TRACK_LX = 0x3,
  EYE_DEFAULT_TRACK_NUM = 0x4,
  EYE_DEFAULT_TRACK_NUM_SUB1 = 0x3,
};

struct __cppobj MtFCurve : MtObject
{
  f32 mDefaultValue;
  MtArray mKeys;
};

struct __cppobj MtFCurve::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) MtFCurve::Key : MtObject
{
  s32 frame;
  u32 interpolation;
  f32 value;
  f32 rtany;
  f32 ltany;
  f32 right;
  f32 left;
  f32 rtanx;
  f32 ltanx;
};

struct __cppobj MtFCurve::Key::MyDTI : MtDTI
{
};

enum MtFCurve::INTERPOLATION_TYPE : __int32
{
  INTERPOLATION_DEFAULT = 0x0,
  INTERPOLATION_CONSTANT = 0x1,
  INTERPOLATION_LINEAR = 0x2,
  INTERPOLATION_CUBIC = 0x3,
  INTERPOLATION_HERMITE = 0x4,
};

struct FPARAM_QUATERNION
{
  f32 x;
  f32 y;
  f32 z;
  f32 w;
};

struct FPARAM_VECTOR3
{
  f32 x;
  f32 y;
  f32 z;
};

enum uFilter::BS_TYPE : __int32
{
  BS_DISABLE = 0x0,
  BS_BLENDALPHA = 0x1,
  BS_BLENDADD = 0x2,
  BS_BLENDSUB = 0x3,
  BS_ADD = 0x4,
  BS_SUB = 0x5,
  BS_MAX = 0x6,
  BS_MIN = 0x7,
  BS_BLENDINVALPHA = 0x8,
  BS_BLENDADDINV = 0x9,
  BS_BLENDSUBINV = 0xA,
};

struct __cppobj cDraw::CMD_DRAW_INSTANCED : cDraw::CMD_DRAW_BASE
{
  u32 vertex_count;
  u32 vertex_start;
  u32 instance_count;
  u32 instance_start;
};

enum nDraw::BLEND_TYPE : __int32
{
  BLEND_ZERO = 0x0,
  BLEND_ONE = 0x1,
  BLEND_SRC_COLOR = 0x2,
  BLEND_INV_SRC_COLOR = 0x3,
  BLEND_SRC_ALPHA = 0x4,
  BLEND_INV_SRC_ALPHA = 0x5,
  BLEND_DEST_ALPHA = 0x6,
  BLEND_INV_DEST_ALPHA = 0x7,
  BLEND_DEST_COLOR = 0x8,
  BLEND_INV_DEST_COLOR = 0x9,
  BLEND_SRC_ALPHA_SAT = 0xA,
  BLEND_BLEND_FACTOR = 0xB,
  BLEND_INV_BLEND_FACTOR = 0xC,
  BLEND_SRC1_COLOR = 0xD,
  BLEND_INV_SRC1_COLOR = 0xE,
  BLEND_SRC1_ALPHA = 0xF,
  BLEND_INV_SRC1_ALPHA = 0x10,
};

enum nDraw::BLEND_OP_TYPE : __int32
{
  BLEND_OP_ADD = 0x0,
  BLEND_OP_SUBTRACT = 0x1,
  BLEND_OP_REV_SUBTRACT = 0x2,
  BLEND_OP_MIN = 0x3,
  BLEND_OP_MAX = 0x4,
};

enum nDraw::TFilter : __int32
{
  TFilter_Default = 0x0,
  TFilter_DepthOut = 0x1,
};

enum nDraw::TGSDOFFilter : __int32
{
  TGSDOFFilter_DrawAccBuffer = 0x0,
};

enum nDraw::TTVNoiseFilter : __int32
{
  TTVNoiseFilter_Default = 0x0,
};

enum nDraw::TImagePlaneFilter : __int32
{
  TImagePlaneFilter_Base = 0x0,
  TImagePlaneFilter_Cube = 0x1,
  TImagePlaneFilter_BaseEx = 0x2,
  TImagePlaneFilter_CubeEx = 0x3,
};

enum nDraw::TRadialBlurFilter : __int32
{
  TRadialBlurFilter_NoBlend = 0x0,
  TRadialBlurFilter_Blend = 0x1,
};

enum nDraw::TBloomFilter : __int32
{
  TBloomFilter_FinalOut = 0x0,
  TBloomFilter_Extraction = 0x1,
  TBloomFilter_DownSample4 = 0x2,
  TBloomFilter_GaussBlur = 0x3,
  TBloomFilter_ConeBlur = 0x4,
  TBloomFilter_Gather = 0x5,
  TBloomFilter_ExtractionCTR = 0x6,
};

enum nDraw::TLogAverage : __int32
{
  TLogAverage_Init = 0x0,
  TLogAverage_DownSample16 = 0x1,
  TLogAverage_Final = 0x2,
  TLogAverage_Count = 0x3,
};

enum nDraw::TTangentFilter : __int32
{
  TTangentFilter_Blur4 = 0x0,
  TTangentFilter_Blur8 = 0x1,
};

struct __cppobj uDOFFilter : uFilter:608
{
  u32 mBlurCount;
  u32 mType;
  u32 mBlurType;
  bool mSimple;
  bool mbGSDOF;
  __attribute__((aligned(8))) MtVector3 mGradateColor;
  f32 mBlurSize;
  nDraw::Texture *mpTempTexture[2];
  f32 mAperture;
  f32 mFocalLength;
  f32 mLowCoCScale;
  f32 mCoCScale;
  f32 mCoCBias;
  f32 mFarBlurLimit;
  f32 mNearBlurLimit;
  f32 mNear;
  f32 mFar;
  f32 mFocal;
  nDraw::Texture *mpTempAccTexture;
  nDraw::BlendState *mpGSDOFBlendState;
  nDraw::DepthStencilState *mpGSDOFDepthState;
  rTexture *mpDiaphragm;
};

struct __cppobj uDOFFilter::MyDTI : MtDTI
{
};

enum uDOFFilter::DOF_TYPE : __int32
{
  DOF_DETAIL = 0x0,
  DOF_SIMPLE = 0x1,
  DOF_SIMPLE2 = 0x2,
};

enum uDOFFilter::BLUR_TYPE : __int32
{
  BLUR_POINTSAMPLE = 0x0,
  BLUR_LINEARSAMPLE = 0x1,
  BLUR_OLD = 0x2,
};

struct __cppobj __attribute__((aligned(16))) uTVNoiseFilter : uFilter
{
  __attribute__((aligned(8))) MtVector3 mNoisyUVOffset;
  bool mRandomUVOffset;
  f32 mNoisePower;
  f32 mNoisePowerCroma;
  f32 mScaleY;
  f32 mScaleCrCb;
  u32 mScanlineSize;
  f32 mScanlineAlpha;
  rTexture *mpTVNoiseTexture;
  rTexture *mpTVMaskTexture;
  bool mEnableBlankScan;
  f32 mBlankOfs_y;
  f32 mBlankSpeed;
  u8 mBlankAlpha;
  f32 mBlankSize;
  f32 mShockNoiseFreq;
  f32 mHSyncNoiseAmplitude;
  f32 mVSyncNoiseAmplitude;
  f32 mShockDetailReduction;
  f32 mHSyncBlankWidth;
  f32 mVSyncBlankWidth;
  __attribute__((aligned(8))) MtVector4 mVSyncBlankColor;
  u32 mShockNoiseTime;
  f32 mHSyncNoiseValue;
  f32 mVSyncNoiseValue;
  f32 mHSyncLag;
  f32 mVSyncLag;
  f32 mDetailReduction;
  f32 mHSyncNoiseOffset;
  nDraw::Texture *mpTempTexture;
};

struct __cppobj uTVNoiseFilter::MyDTI : MtDTI
{
};

enum uImagePlaneFilter::BLEND_TYPE : __int32
{
  BLEND_NONE_0 = 0x0,
  BLEND_ALPHA = 0x1,
  BLEND_ADD = 0x2,
  BLEND_SUB = 0x3,
  BLEND_MODULATE = 0x4,
  BLEND_MIN = 0x5,
  BLEND_MAX_0 = 0x6,
  BLEND_SCREEN = 0x7,
  BLEND_OVERLAY = 0x8,
  BLEND_SOFTLIGHT = 0x9,
  BLEND_HARDLIGHT = 0xA,
  BLEND_DODGE = 0xB,
  BLEND_BURN = 0xC,
  BLEND_DARKEN = 0xD,
  BLEND_LIGHTEN = 0xE,
  BLEND_DIFFERENCE = 0xF,
  BLEND_EXCLUSION = 0x10,
  __BLEND_TYPE__U32 = 0xFFFFFFFF,
};

struct __cppobj uImagePlaneFilter : uFilter
{
  __attribute__((aligned(8))) MtVector4 mColor;
  rTexture *mpTexture;
  MtFloat2 mPos;
  MtFloat2 mScale;
  f32 mAngle;
  uImagePlaneFilter::BLEND_TYPE mBlendType;
};

struct __cppobj uImagePlaneFilter::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uCrossFadeFilter : uFilter:608
{
  f32 mBlend;
  bool mCached;
};

struct __cppobj uCrossFadeFilter::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uVolumeNoiseFilter : uFilter
{
  __attribute__((aligned(8))) MtVector4 mColor;
  MtVector3 mUVWOffset;
  MtVector4 mDirection;
  MtVector3 mCameraPosPrev;
  MtVector3 mCameraPos;
  f32 mSpeed;
  f32 mTexScale;
  f32 mBias;
  f32 mMoveScale;
  MtEaseCurve mEaseCurve;
  f32 mDepthCenter;
  bool mHeight;
  f32 mHeightStart;
  f32 mHeightEnd;
  u32 mBlendStateType;
  rTexture *mpVolumeNoiseTexture;
};

struct __cppobj uVolumeNoiseFilter::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uNoiseFogFilter : uFilter
{
  __attribute__((aligned(8))) MtVector4 mColor;
  MtVector3 mUVWOffset;
  MtVector4 mDirection;
  MtVector3 mCameraPosPrev;
  MtVector3 mCameraPos;
  f32 mSpeed;
  f32 mTexScale;
  f32 mBias;
  f32 mMoveScale;
  f32 mDepthStart;
  f32 mDepthEnd;
  f32 mHeightStart;
  f32 mHeightEnd;
  rTexture *mpVolumeNoiseTexture;
};

struct __cppobj uNoiseFogFilter::MyDTI : MtDTI
{
};

struct uRadialBlurFilter::RadialBlurParam
{
  MtVector4 mCenter;
  MtVector3 mPos;
  MtVector4 mColor;
  MtVector4 mMaskRectUV;
  unsigned __int32 mMode : 8;
  unsigned __int32 mSamples : 8;
  unsigned __int32 mBlendStateType : 8;
  unsigned __int32 mMaskRectEnable : 8;
  f32 mBlurStart;
  f32 mBlurWidth;
  f32 mBrightThreshold;
  f32 mStartZ;
  f32 mEndZ;
  f32 mStartH;
  f32 mEndH;
  f32 mStartW;
  f32 mEndW;
  f32 mMaskScale;
  rTexture *mpMaskTexture;
  __attribute__((aligned(16))) MtVector3 mCullingDir;
  f32 mCullingAngleStart;
  f32 mCullingAngleEnd;
  f32 mCullingRate;
  unsigned __int32 mCullingEnable : 8;
  unsigned __int32 mCullingBothDir : 8;
  unsigned __int32 mCullingOverlap : 8;
  unsigned __int32 mScreenAttenuateFlag : 1;
  unsigned __int32 mOcclusionBlurWidthEnable : 1;
  unsigned __int32 mOcclusionAlphaEnable : 1;
  unsigned __int32 padding058f : 5;
  f32 mScreenAttenuateDist;
  f32 mScreenAttenuateRate;
  nDraw::Texture *mpOcclusionFactor;
  f32 mOcclusionSphereRadius;
  f32 mOcclusionBlurWidthOffset;
  f32 mOcclusionBlurWidthScale;
  nDraw::Texture *mpLinearRTexture;
};

struct __cppobj uRadialBlurFilter : uFilter
{
  uRadialBlurFilter::RadialBlurParam mParam;
};

struct __cppobj uRadialBlurFilter::MyDTI : MtDTI
{
};

enum uRadialBlurFilter::MODE : __int32
{
  MODE_2D = 0x0,
  MODE_3D = 0x1,
  MODE_3DZ = 0x2,
  MODE_2D_NORMAL = 0x3,
  MODE_3D_NORMAL = 0x4,
  MODE_3DZ_NORMAL = 0x5,
};

enum uMotionBlurFilter::SAMPLE_LEVEL : __int32
{
  SAMPLE_4 = 0x0,
  SAMPLE_8 = 0x1,
  __SAMPLE_LEVEL__U32 = 0xFFFFFFFF,
};

enum uMotionBlurFilter::RESOLUTION : __int32
{
  RESOLUTION_FULL = 0x0,
  RESOLUTION_THREE_QUARTER = 0x1,
  RESOLUTION_TWO_THIRD = 0x2,
  RESOLUTION_HALF = 0x3,
  __RESOLUTION__U32 = 0xFFFFFFFF,
};

enum uMotionBlurFilter::VRESOLUTION : __int32
{
  VRESOLUTION_FULL = 0x0,
  VRESOLUTION_HALF = 0x1,
  VRESOLUTION_ONE_THIRD = 0x2,
  VRESOLUTION_ONE_QUARTER = 0x3,
  __VRESOLUTION__U32 = 0xFFFFFFFF,
};

struct __cppobj __attribute__((aligned(8))) uMotionBlurFilter : uFilter
{
  nDraw::Texture *mpTempTexture;
  nDraw::Texture *mpBlurTempTexture;
  nDraw::Texture *mpVelocityMap;
  nDraw::Texture *mpVelocityDepthMap;
  nDraw::Texture *mpTileMax;
  nDraw::Texture *mpNeighborMax;
  f32 mDepthLimit;
  f32 mFBLimit;
  f32 mFBScale;
  f32 mFBDepthBias;
  bool mStretchBlur;
  bool mCameraBlur;
  bool mMedianBlur;
  bool mReconstructBlur;
  u32 mFeedbackNum;
  uMotionBlurFilter::SAMPLE_LEVEL mSampleLevel;
  uMotionBlurFilter::RESOLUTION mResolution;
  uMotionBlurFilter::RESOLUTION mPrevFrameResolution;
  uMotionBlurFilter::VRESOLUTION mVelocityResolution;
  uMotionBlurFilter::VRESOLUTION mPrevFrameVelocityResolution;
  f32 mOBLimit;
  f32 mSBScale;
  f32 mSBDepthBias;
  f32 mRBScale;
};

struct __cppobj uMotionBlurFilter::MyDTI : MtDTI
{
};

struct __cppobj uHazeFilter : uFilter
{
  __attribute__((aligned(8))) MtVector3 mUVWOffset;
  MtVector4 mDirection;
  MtVector3 mCameraPosPrev;
  MtVector3 mCameraPos;
  f32 mSpeed;
  f32 mNoiseTexScale;
  f32 mMoveScale;
  f32 mHazeScale;
  rTexture *mpVolumeNoiseTexture;
  rTexture *mpHazeSrc;
  bool mInvSrc;
  bool mSrcZ;
  f32 mDepthStart;
  f32 mDepthEnd;
  f32 mHeightStart;
  f32 mHeightEnd;
  nDraw::Texture *mpTempTexture;
};

struct __cppobj uHazeFilter::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uFishEyeFilter : uFilter
{
  nDraw::Texture *mpTempTexture;
  f32 mCurvature;
};

struct __cppobj uFishEyeFilter::MyDTI : MtDTI
{
};

struct __cppobj uColorFogFilter : uFilter:608
{
  u32 mType;
  MtVector4 mColor;
  MtEaseCurve mEaseCurve;
  f32 mDensity;
  f32 mDepthStart;
  f32 mDepthEnd;
  f32 mHeightStart;
  f32 mHeightEnd;
  u32 mBlendStateType;
};

struct __cppobj uColorFogFilter::MyDTI : MtDTI
{
};

enum uColorFogFilter::FOG_TYPE : __int32
{
  FOG_LINEAR = 0x0,
  FOG_EASE = 0x1,
  FOG_EXP = 0x2,
  FOG_EXP2 = 0x3,
  FOG_LINEAR_H = 0x4,
  FOG_EASE_H = 0x5,
  FOG_EXP_H = 0x6,
  FOG_EXP2_H = 0x7,
};

enum uBlurFilter::BLUR_TYPE : __int32
{
  BLUR_GAUSSIAN = 0x1,
  BLUR_MASKGAUSSIAN = 0x2,
};

struct uColorCorrectFilter::Params
{
  bool mEnable;
  u32 mType;
  __attribute__((aligned(16))) MtVector3 mFactor;
  MtVector3 mFactor2;
};

struct __cppobj uColorCorrectFilter::Corrector : MtObject
{
  uColorCorrectFilter::Params mParams;
};

struct uColorCorrectFilter::ColorCorrectParam
{
  uColorCorrectFilter::Params mParams[16];
  MtVector3 mPos;
  MtMatrix mMatrix;
  MtHermiteCurve mToneCurveR;
  MtHermiteCurve mToneCurveG;
  MtHermiteCurve mToneCurveB;
  MtVector3 mGamma;
  nDraw::Texture *mpToneMap;
  f32 mStartZ;
  f32 mEndZ;
  u32 mAttenuationEnable;
  __attribute__((aligned(16))) MtVector3 mCullingDir;
  f32 mCullingAngleStart;
  f32 mCullingAngleEnd;
  f32 mCullingRate;
  bool mCullingEnable;
  bool mCullingBothDir;
  bool mCullingOverlap;
  bool mScreenAttenuateFlag;
  f32 mScreenAttenuateDist;
  f32 mScreenAttenuateRate;
  u32 mVolumeInterpolateQuality;
  rTexture *mpVolumeColorCorrect;
};

struct __cppobj uColorCorrectFilter : uFilter
{
  uColorCorrectFilter::Corrector mCorrector[16];
  uColorCorrectFilter::ColorCorrectParam mParam;
};

struct __cppobj uColorCorrectFilter::MyDTI : MtDTI
{
};

struct __cppobj uColorCorrectFilter::Corrector::MyDTI : MtDTI
{
};

enum uColorCorrectFilter::Corrector::TYPE : __int32
{
  TYPE_UNUSED = 0x0,
  TYPE_HUE = 0x1,
  TYPE_CONTRAST = 0x2,
  TYPE_CONTRAST2 = 0x3,
  TYPE_CHROMA = 0x4,
  TYPE_CHROMA2 = 0x5,
  TYPE_BRIGHTNESS = 0x6,
  TYPE_BRIGHTNESS2 = 0x7,
  TYPE_SCALE = 0x8,
  TYPE_SCALE2 = 0x9,
  TYPE_INPUTLEVEL = 0xA,
  TYPE_INPUTLEVEL2 = 0xB,
  TYPE_OUTPUTLEVEL = 0xC,
  TYPE_OUTPUTLEVEL2 = 0xD,
  TYPE_SEPIA = 0xE,
  TYPE_SEPIA2 = 0xF,
  TYPE_NEGA = 0x10,
  TYPE_NEGA2 = 0x11,
  TYPE_GRAYSCALE = 0x12,
  TYPE_RREPLACE = 0x13,
  TYPE_GREPLACE = 0x14,
  TYPE_BREPLACE = 0x15,
  TYPE_ADD = 0x16,
  TYPE_SUB = 0x17,
};

struct __cppobj __attribute__((aligned(16))) uLightScatteringFilter : uFilter
{
  __attribute__((aligned(8))) MtVector3 mMeiScattering;
  MtVector3 mRaylieghScattering;
  MtVector3 mSunColor;
  MtVector3 mSunDir;
  f32 mMeiDirective;
  f32 mBlendFactor;
};

struct __cppobj uLightScatteringFilter::MyDTI : MtDTI
{
};

struct __attribute__((aligned(2))) uBloomFilter::BloomParam
{
  nDraw::Texture *mpRTGlareTemp[4];
  nDraw::Texture *mpRTBloom[4];
  MtVector3 mBloomColor;
  f32 mBloomDispersion;
  f32 mBloomThreshold;
  f32 mStartZ;
  f32 mEndZ;
  MtVector3 mPos;
  MtVector3 mCullingDir;
  f32 mCullingAngleStart;
  f32 mCullingAngleEnd;
  f32 mCullingRate;
  f32 mScreenAttenuateDist;
  f32 mScreenAttenuateRate;
  s32 mStencilID;
  bool mAttenuationEnable;
  bool mCullingEnable;
  bool mCullingBothDir;
  bool mCullingOverlap;
  bool mScreenAttenuateFlag;
  bool mConeFilter;
  bool mLegacy;
};

struct __cppobj uBloomFilter : uFilter
{
  uBloomFilter::BloomParam mParam;
};

struct __cppobj uBloomFilter::MyDTI : MtDTI
{
};

struct __cppobj uToneMapControl : uFilter
{
  nDraw::Texture *mpLogScene;
  nDraw::Texture *mpLogScene64;
  nDraw::Texture *mpLogScene16;
  nDraw::Texture *mpLogScene4;
  nDraw::Texture *mpLogScene4C;
  u32 mToneMapType;
  f32 mAvgLuminance[10];
  f32 mCurLuminance[10];
  f32 mToneMapFactor[10];
  f32 mMidGray;
  f32 mMinLuminance;
  f32 mMaxLuminance;
  f32 mBtSensitivity;
  f32 mDkSensitivity;
  f32 mDelayTime;
  MtHermiteCurve mAdjustCurve;
  f32 mCenterRegion;
  f32 mCenterWeight;
  f32 mCompressRange;
  nDraw::Texture *mpAvgLuminance[4];
};

struct __cppobj uToneMapControl::MyDTI : MtDTI
{
};

enum uToneMapControl::TONEMAP_TYPE : __int32
{
  TONEMAP_NONE = 0x0,
  TONEMAP_LINEAR = 0x1,
  TONEMAP_EXPOSURE = 0x2,
  TONEMAP_EXPOSUREEX = 0x3,
  TONEMAP_REINHARD = 0x4,
};

enum uOutlineFilter::OUTLINE_TYPE : __int32
{
  OUTLINE_NONE = 0x0,
  OUTLINE_GEOMETRY = 0x1,
  OUTLINE_STENCILID = 0x2,
  OUTLINE_COMPLEX_1 = 0x3,
  OUTLINE_COMPLEX_4 = 0x4,
  OUTLINE_COMPLEX_12 = 0x5,
  __OUTLINE_TYPE__S32 = 0x80000001,
};

enum uOutlineFilter::FILTER_TYPE : __int32
{
  FILTER_NONE = 0x0,
  FILTER_THICK = 0x1,
  FILTER_BLUR = 0x2,
  FILTER_BLUR2 = 0x3,
  FILTER_BLOOM = 0x4,
  __FILTER_TYPE__S32 = 0x80000001,
};

enum uOutlineFilter::Detector::TYPE : __int32
{
  TYPE_NONE_0 = 0x0,
  TYPE_ID = 0x1,
  TYPE_DEPTH = 0x2,
  TYPE_DEPTH_WRAP = 0x3,
  TYPE_GEOMETRY = 0x4,
  __FORCE_U32__ = 0xFFFFFFFF,
};

struct __cppobj uOutlineFilter::Detector : MtObject
{
  uOutlineFilter::Detector::TYPE mType;
  u32 mIDStart;
  u32 mIDEnd;
  f32 mDepthStart;
  f32 mDepthEnd;
  f32 mDepthBias;
};

enum uOutlineFilter::COMPOSITE_TYPE : __int32
{
  COMPOSITE_MODULATE = 0x0,
  COMPOSITE_BLEND = 0x1,
  COMPOSITE_ADD = 0x2,
  __COMPOSITE_TYPE__S32 = 0x80000001,
};

struct __cppobj uOutlineFilter : uFilter:608
{
  uOutlineFilter::OUTLINE_TYPE mOutlineType;
  uOutlineFilter::FILTER_TYPE mFilterType;
  uOutlineFilter::Detector mDetector[4];
  uOutlineFilter::COMPOSITE_TYPE mCompositeType;
  u32 mFilterLevel;
  bool mMultiColor;
  __attribute__((aligned(16))) MtVector4 mColor[4];
  bool mFadeEnable;
  f32 mFadeStart;
  f32 mFadeEnd;
  f32 mFadeLimite;
  f32 mGeometryThick;
  bool mGeometryIDTest;
  f32 mOutlineDarkness;
  nDraw::Texture *mpTempTexture;
  nDraw::Texture *mpTempTexture2;
  nDraw::Texture *mpMiniTexture;
  nDraw::Texture *mpMiniTexture2;
  rTexture *mpMaskTexture[4];
};

struct __cppobj uOutlineFilter::MyDTI : MtDTI
{
};

struct __cppobj uOutlineFilter::Detector::MyDTI : MtDTI
{
};

struct uOutlineFilter::OUTLINE_DETECTOR
{
  f32 idstart;
  f32 idend;
  f32 zstart;
  f32 zinvrange;
};

struct __cppobj uBokehFilter : uDOFFilter
{
  u32 mPattern;
  u32 mTapCount;
  MtFloat2 mTapPattern[25];
  nDraw::Texture *mpSmallZ;
  nDraw::Texture *mpInflateZ;
  nDraw::Texture *mpNearTexture;
  nDraw::Texture *mpFarTexture;
  f32 mScale;
  f32 mScaleNear;
  f32 mScaleFar;
  f32 mAlphaScale;
  f32 mMipScale;
  f32 mMipScaleNear;
  f32 mMipScaleFar;
  f32 mMipBias;
  f32 mRangeCompression;
  bool mUseFarReduction;
  bool mCorrectReductionNoise;
  bool mCorrectColorBleeding;
  bool mDisableNear;
  bool mDisableFar;
  bool mFast;
  bool mFP16;
  bool mDithering;
  u32 mPreset;
};

struct __cppobj uBokehFilter::MyDTI : MtDTI
{
};

struct uBokehFilter::PatternTemplate
{
  u32 count;
  MtFloat2 pattern[25];
};

enum uBokehFilter::PATTERN_TEMPLATE : __int32
{
  PT_CIRCLE = 0x0,
  PT_SQUARE = 0x1,
  PT_HEXAGON = 0x2,
  PT_MAX = 0x3,
  PT_CUSTOM = 0xFFFFFFFF,
};

struct __cppobj __attribute__((aligned(8))) uEdgeAntiAliasingFilter : uFilter:608
{
  u32 mEdgeDetectionType;
  u32 mAntiAliasingType;
  f32 mDepthFactor;
  f32 mDepthMinimum;
  f32 mSamplingFactor;
  nDraw::Texture *mpTempTexture;
  bool mEnableTransparent;
  bool mCheckEdgeWeight;
};

struct __cppobj uEdgeAntiAliasingFilter::MyDTI : MtDTI
{
};

enum uEdgeAntiAliasingFilter::DETECTION_TYPE : __int32
{
  DETECTION_DEPTH = 0x0,
  DETECTION_DEPTH_FAST = 0x1,
};

struct __attribute__((aligned(16))) uGodRaysFilter::GodRaysParam
{
  MtVector4 mColor;
  MtVector3 mDirection;
  MtVector3 mPoint;
  unsigned __int32 mMode : 4;
  unsigned __int32 mQuality : 4;
  unsigned __int32 mIterativeNum : 8;
  unsigned __int32 mUsePoint : 1;
  unsigned __int32 mUseLDR : 1;
  unsigned __int32 mCutoff : 1;
  unsigned __int32 mShadow : 1;
  unsigned __int32 mGray : 1;
  unsigned __int32 mPadding0332 : 3;
  unsigned __int32 mCullingEnable : 1;
  unsigned __int32 mCullingBothDir : 1;
  unsigned __int32 mCullingOverlap : 1;
  unsigned __int32 mScreenAttenuateFlag : 1;
  unsigned __int32 mOcclusionAlphaEnable : 1;
  unsigned __int32 mOcclusionBlurWidthEnable : 1;
  unsigned __int32 mPadding0233 : 2;
  f32 mMaskRadius;
  f32 mMaskWeight;
  f32 mDecay;
  f32 mThreshold;
  f32 mGamma;
  f32 mDirectionLength;
  nDraw::Texture *mpBlur[5];
  nDraw::Texture *mpFinal;
  nDraw::Texture *mpTempTexture;
  f32 mStartZ;
  f32 mEndZ;
  MtVector3 mCullingDir;
  f32 mCullingAngleStart;
  f32 mCullingAngleEnd;
  f32 mCullingRate;
  f32 mShadowFactor;
  f32 mScale;
  f32 mShadowThreshold;
  f32 mScreenAttenuateDist;
  f32 mScreenAttenuateRate;
  nDraw::Texture *mpOcclusionFactor;
  f32 mOcclusionSphereRadius;
  f32 mOcclusionBlurWidthOffset;
  f32 mOcclusionBlurWidthScale;
};

struct __cppobj __attribute__((aligned(16))) uGodRaysFilter : uFilter
{
  uGodRaysFilter::GodRaysParam mParam;
  bool mUpdate;
};

struct __cppobj uGodRaysFilter::MyDTI : MtDTI
{
};

enum uGodRaysFilter::MODE : __int32
{
  MODE_POLAR = 0x0,
  MODE_ORTHONORMAL = 0x1,
  MODE_ORTHONORMAL_FAST = 0x2,
  MODE_TK_VERSION = 0x3,
};

enum uGodRaysFilter::QUALITY_LEVEL : __int32
{
  QUALITY_HIGH_0 = 0x0,
  QUALITY_NORMAL_0 = 0x1,
  QUALITY_FAST = 0x2,
};

struct __cppobj uChromaticAberrationFilter : uFilter:608
{
  f32 mDistortion;
  f32 mSoftness;
  f32 mScaler;
  f32 mFocusBegin;
  f32 mFocusEnd;
  bool mUseMask;
  rTexture *mpDistortionTexture;
  bool mToneCurve;
  u32 mSampleCount;
  MtHermiteCurve mToneCurveR;
  MtHermiteCurve mToneCurveG;
  MtHermiteCurve mToneCurveB;
  nDraw::Texture *mpToneMap;
  nDraw::Texture *mpTexture;
  nDraw::Texture *mpTempTexture[4];
};

struct __cppobj uChromaticAberrationFilter::MyDTI : MtDTI
{
};

struct __cppobj uTangentBlurFilter : uFilter:608
{
  u32 mBlurType;
  f32 mVelocityScale;
  nDraw::Texture *mpTexture;
};

struct __cppobj uTangentBlurFilter::MyDTI : MtDTI
{
};

enum uTangentBlurFilter::BLUR_TYPE : __int32
{
  BLUR_4POINT = 0x0,
  BLUR_8POINT = 0x1,
};

enum sRender::CAPS::RT_FORMAT : __int32
{
  RT_A8R8G8B8 = 0x1,
  RT_A16B16G16R16F = 0x2,
  RT_A2B10G10R10 = 0x4,
  RT_B10G11R11F = 0x8,
};

struct uFilter::drawImage::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
  MtFloat2 uv1;
  MtColor col;
};

struct uFilter::drawRegion::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
};

struct uTVNoiseFilter::draw::VERTEX
{
  MtFloat2 pos;
  MtColor col;
};

struct uColorCorrectFilter::drawColorCorrect::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
  MtColor col;
};

struct uChromaticAberrationFilter::draw::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
  MtColor col;
};

enum uFog::RENDER_TYPE : __int32
{
  RENDER_INTEGRATE = 0x0,
  RENDER_HYBRID = 0x1,
  RENDER_POSTPROCESS = 0x2,
  __RENDER_TYPE__U32 = 0xFFFFFFFF,
};

struct uFog::FOG_PARAM
{
  MtFloat3 FogColor;
  f32 FogDensity;
  f32 FogHStart;
  f32 FogHInvRange;
  f32 FogStart;
  f32 FogInvRange;
  MtFloat3 FogHColor;
  f32 FogHDensity;
  f32 FogUVScale;
  f32 FogHSlopeBias;
  MtFloat2 FogUVOffset;
  f32 FogDiffuseBlend;
  f32 FogLinearRate;
  f32 FogWorldYRate;
  f32 FogDistanceRate;
  f32 FogDistanceEstRate;
  f32 FogDistanceNmlRate;
  f32 FogDistanceTblRate;
  f32 FogDistanceColTblRate;
};

enum uFog::HEIGHT_TYPE : __int32
{
  HEIGHT_NONE = 0x0,
  HEIGHT_WORLD_Y = 0x1,
  HEIGHT_DISTANCE = 0x2,
  HEIGHT_VOLUME = 0x3,
  __HEIGHT_TYPE__U32 = 0xFFFFFFFF,
};

struct __cppobj uFog : cUnit
{
  uFog::RENDER_TYPE mRenderType;
  SO_HANDLE mFogFunction;
  SO_HANDLE mFogVTFFunction;
  SO_HANDLE mHeightFunction;
  SO_HANDLE mHeightVTFFunction;
  __attribute__((aligned(16))) uFog::FOG_PARAM mFogParam;
  uFog::HEIGHT_TYPE mHeightType;
  u32 mGroup;
  f32 mHeightStart;
  f32 mHeightEnd;
  f32 mHeightDensity;
  __attribute__((aligned(16))) MtVector3 mHeightColor;
  MtFloat2 mUVOffset;
  f32 mUVScale;
  f32 mHeightSlopeBias;
  rTexture *mpHeightMap;
  __attribute__((aligned(16))) MtVector3 mPos;
  MtQuaternion mQuat;
  MtVector3 mScale;
  MtMatrix mWmat;
  rModel *mpModel;
  rImplicitSurface *mpImplicitSurface;
  nDraw::Texture *mpFogFrontDepth;
  nDraw::Texture *mpFogBackDepth;
  nDraw::Texture *mpDummy;
  nDraw::Texture *mpFogFrontDepthSmall;
  nDraw::Texture *mpFogBackDepthSmall;
  bool mUseHighPrecisionModel;
  bool mLegacyMode;
};

struct __cppobj rImplicitSurface : cResource
{
  nDraw::VertexBuffer *mpVB;
  nDraw::IndexBuffer *mpIB;
  u32 mPrimitiveInfoNum;
  rImplicitSurface::PRIMITIVE_INFO *mpPrimitiveInfo;
};

struct __attribute__((aligned(16))) rImplicitSurface::PRIMITIVE_INFO
{
  u32 vertex_stride;
  u32 vertex_base;
  u32 index_base;
  u32 index_count;
  MtAABB aabb;
  SO_HANDLE inputlayout;
};

struct __cppobj uFog::MyDTI : MtDTI
{
};

enum uFog::GROUP_TYPE : __int32
{
  GROUP_0 = 0x1,
};

enum nDraw::TModelFog : __int32
{
  TModelFog_Default = 0x0,
};

enum nDraw::TMaterialStd : __int32
{
  TMaterialStd_Default = 0x0,
  TMaterialStd_GBufferPass = 0x1,
  TMaterialStd_GBufferPassMRT = 0x2,
  TMaterialStd_RSM = 0x3,
};

struct __cppobj rImplicitSurface::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uFog:3552 : cUnit
{
  uFog::RENDER_TYPE mRenderType;
  SO_HANDLE mFogFunction;
  SO_HANDLE mFogVTFFunction;
  SO_HANDLE mHeightFunction;
  SO_HANDLE mHeightVTFFunction;
  _BYTE gap54[12];
  uFog::FOG_PARAM mFogParam;
  uFog::HEIGHT_TYPE mHeightType;
  u32 mGroup;
  f32 mHeightStart;
  f32 mHeightEnd;
  f32 mHeightDensity;
  _BYTE gapD4[12];
  MtVector3 mHeightColor;
  MtFloat2 mUVOffset;
  f32 mUVScale;
  f32 mHeightSlopeBias;
  rTexture *mpHeightMap;
  _BYTE gap108[8];
  MtVector3 mPos;
  MtQuaternion mQuat;
  MtVector3 mScale;
  MtMatrix mWmat;
  rModel *mpModel;
  rImplicitSurface *mpImplicitSurface;
  nDraw::Texture *mpFogFrontDepth;
  nDraw::Texture *mpFogBackDepth;
  nDraw::Texture *mpDummy;
  nDraw::Texture *mpFogFrontDepthSmall;
  nDraw::Texture *mpFogBackDepthSmall;
  bool mUseHighPrecisionModel;
  bool mLegacyMode;
};

enum uColorFog::DISTANCE_TYPE : __int32
{
  DISTANCE_NONE = 0x0,
  DISTANCE_LINEAR = 0x1,
  DISTANCE_EXP = 0x2,
  DISTANCE_EXP2 = 0x3,
  DISTANCE_TABLE = 0x4,
  DISTANCE_REVEXP = 0x5,
  DISTANCE_REVEXP2 = 0x6,
  __DISTANCE_TYPE_DWORD__ = 0x7FFFFFFF,
};

enum uColorFog::COLOR_TYPE : __int32
{
  COLOR_CONSTANT = 0x0,
  COLOR_TABLE = 0x1,
  __COLOR_TYPE_DWORD__ = 0x7FFFFFFF,
};

struct __cppobj uColorFog : uFog:3552
{
  uColorFog::DISTANCE_TYPE mDistanceType;
  uColorFog::COLOR_TYPE mFogColorType;
  f32 mStart;
  f32 mEnd;
  f32 mExponentDensity;
  f32 mDensity;
  __attribute__((aligned(16))) MtVector3 mColor;
  bool mRangeBase;
  bool mDiffuseBlend;
  f32 mDiffuseBlendFactor;
  nDraw::Texture *mpFogTable;
  SO_HANDLE mDistanceFunction;
  MtHermiteCurve mCurve;
  MtHermiteCurve mRCurve;
  MtHermiteCurve mGCurve;
  MtHermiteCurve mBCurve;
};

struct __cppobj uColorFog::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) uLightScatteringFog::LS_PARAM
{
  MtFloat4 LSFactor0;
  MtFloat4 LSFactor1;
  MtFloat4 LSFactor2;
  MtFloat4 LSSunColor;
  MtFloat3 LSSunDir;
};

struct __cppobj uLightScatteringFog : uFog
{
  __attribute__((aligned(8))) MtVector3 mMeiScattering;
  MtVector3 mRaylieghScattering;
  MtVector3 mSunColor;
  MtVector3 mSunDir;
  f32 mMeiDirective;
  f32 mDensity;
  __attribute__((aligned(16))) uLightScatteringFog::LS_PARAM mLSParam;
};

struct __cppobj uLightScatteringFog::MyDTI : MtDTI
{
};

struct uFog::copyRegion::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
};

struct uColorFog::draw::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
  MtColor col;
};

struct __cppobj __attribute__((aligned(16))) uFullbodyIKHuman2::Node : MtObject
{
  f32 mBlend;
  __attribute__((aligned(8))) MtMatrix mEff;
  MtMatrix mWMat;
  MtMatrix mOrgMat;
  MtVector3 mEffOffset;
  uModel *mpEffTgtModel;
  u32 mEffTgtJntNo;
  f32 mResist;
  bool mActive;
  bool mRotate;
  bool mEffTgtAlign;
  bool mAssigned;
  u32 mJntNo;
  u32 mFBIKJntNo;
  uModel *mpModel;
};

union uCnsIK::$F003B6642B582D5B6893EB08F114A488
{
  uConstraint::DIRECTION mDir;
  s32 mDirProp;
};

union uCnsIK::$6F34A7AE4C6FD22A73EDBE3CBC92EF8E
{
  uConstraint::DIRECTION mUp;
  s32 mUpProp;
};

struct __cppobj __attribute__((aligned(8))) uCnsIK::uCnsJoint : uConstraint
{
  uCnsIK *mpCnsIK;
  uCnsIK::JointInfo *mpJointInfo;
  bool mIsEffector;
};

struct __cppobj uCnsIK::JointInfo : MtObject
{
  __attribute__((aligned(16))) MtMatrix mWMat;
  MtMatrix mIKWMat;
  MtMatrix mMat;
  MtMatrix mLMat;
  MtMatrix mRotMat;
  MtMatrix mCnvMat;
  MtVector3 mScl;
  f32 mSclDir;
  f32 mOffset;
  f32 mScaleOffset;
  s32 mJntNo;
  uCnsIK::uCnsJoint mCnsJoint;
  uModel::Joint *mpJoint;
  uCnsIK *mpCnsIK;
  __attribute__((aligned(16))) MtVector3 mLastV;
  s32 mIdx;
  f32 mLen;
  bool mIsEffector;
  bool mIsLimit;
  f32 mRotMin;
  f32 mRotMax;
  bool mReverse;
};

enum uCnsIK::LIMIT_MODE : __int32
{
  LIMIT_MODE_LAST_POSE = 0x0,
  LIMIT_MODE_CLOSER_ANGLE = 0x1,
};

union uCnsIK::$6CF346E39644BF4E51D59E094A4E84B0
{
  uCnsIK::LIMIT_MODE mEffLimitMode;
  s32 mEffLimitModeProp;
};

union uCnsIK::$20DB4C4F38E8FB714AC6120AE9561DC5
{
  uCnsIK::LIMIT_MODE mJointLimitMode;
  s32 mJointLimitModeProp;
};

enum uCnsIK::COLLISION_MODE : __int32
{
  COLLISION_MODE_FOOT = 0x0,
};

union uCnsIK::$41F308985AA68C227CDD026E141486DA
{
  uCnsIK::COLLISION_MODE mCollisionMode;
  s32 mCollisionModeProp;
};

enum uCnsIK::EFFECTOR_BEHAVIOR : __int32
{
  EFFECTOR_BEHAVIOR_CHILD = 0x0,
  EFFECTOR_BEHAVIOR_KEEP_ORIGINAL_ANGLE = 0x1,
};

union uCnsIK::$DB9781FDFE331C3D45AB857933E41516
{
  uCnsIK::EFFECTOR_BEHAVIOR mEffectorBehavior;
  s32 mEffectorBehaviorProp;
};

enum uCnsIK::LIMIT_COORDINATE : __int32
{
  LIMIT_COORDINATE_MOTION = 0x0,
  LIMIT_COORDINATE_BASE_POSE = 0x1,
};

union uCnsIK::$C07C644BDA47C153BB4A1B5E9B4FAD73
{
  uCnsIK::LIMIT_COORDINATE mLimitCoord;
  s32 mLimitCoordProp;
};

struct __cppobj uCnsIK : uConstraint
{
  __attribute__((aligned(8))) MtMatrix mEffectorMat;
  MtVector3 mLastVBase;
  rCnsIK *mpCnsIKRes;
  u32 mStatus;
  s32 mJointNum;
  s32 mEffNo;
  u32 mFindIntersectionResult;
  sCollision::TriangleInfo mTriInfo;
  bool mIsLimitBase;
  uCnsIK::$F003B6642B582D5B6893EB08F114A488 _anon_0;
  uCnsIK::$6F34A7AE4C6FD22A73EDBE3CBC92EF8E _anon_1;
  s32 mFitUp;
  s32 mFitDir;
  uCnsIK::JointInfo mJointInfo[4];
  bool mEffectorLimitEnable;
  f32 mEffPitchMin;
  f32 mEffPitchMax;
  f32 mEffDistMin;
  f32 mEffDistMax;
  f32 mEffRotMin;
  f32 mEffRotMax;
  bool mJointLimitEnable;
  bool mCollisionEnable;
  f32 mHeelOffset;
  f32 mHeelHeight;
  bool mFit;
  bool mGroundDistAdapt;
  f32 mCheckGroundLengthUpper;
  f32 mCheckGroundLengthLower;
  __attribute__((aligned(16))) MtVector3 mGroundNormal;
  f32 mGroundDistance;
  f32 mGroundLevel;
  u32 mCollisionType;
  u32 mCollisionFilter;
  uCnsIK::$6CF346E39644BF4E51D59E094A4E84B0 _anon_2;
  uCnsIK::$20DB4C4F38E8FB714AC6120AE9561DC5 _anon_3;
  uCnsIK::$41F308985AA68C227CDD026E141486DA _anon_4;
  uCnsIK::$DB9781FDFE331C3D45AB857933E41516 _anon_5;
  uCnsIK::$C07C644BDA47C153BB4A1B5E9B4FAD73 _anon_6;
  __attribute__((aligned(16))) MtVector3 mLimitCoordOffset;
  u32 mEffectorControl;
  __attribute__((aligned(16))) MtMatrix mOffsetMat;
  MtVector3 mTransScale;
  MtVector3 mCenterPosOffset;
  s32 mCenterRefJntNo;
  sCollision::Param mCollisionParam;
  f32 mEffRelWeightNear;
  f32 mEffRelWeightFar;
  f32 mEffRelWeightNearDist;
  f32 mEffRelWeightFarDist;
  f32 mMotionFitDist;
  bool mMotionFitDisable;
  __attribute__((aligned(16))) MtVector3 mEffectorPos;
  MtVector3 mUpVectorPos;
  uModel *mpEffectorTargetModel;
  u32 mEffectorTargetJointNo;
  uModel *mpUpVectorTargetModel;
  u32 mUpVectorTargetJointNo;
  f32 mLastGroundHeight;
  bool mLastGroundHit;
  bool mEffectorPosEnable;
  bool mEffectorRotEnable;
  bool mUpVectorPosEnable;
  bool mEffectorTargetModelEnable;
  bool mUpVectorTargetModelEnable;
  bool mUseScale;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uConstraint:1120 : cUnit
{
  uConstraint::cConstraint mConstraint;
  uConstraint *mpPrevCns;
  uConstraint *mpNextCns;
  uModel::Joint *mpParentJnt;
  f32 mBlendWeight;
  u32 mID;
  s32 mOrder;
  u32 mPri;
  uModel *mpModel;
  f32 mBlendSpeed;
  f32 mBlend;
  bool mIgnoreRate;
  bool mEnable;
};

struct __cppobj __attribute__((aligned(8))) uFullbodyIKHuman2::uCnsUpVectorCalc : uConstraint:1120
{
  u32 mJoint;
  uFullbodyIKHuman2 *mpFBIKModel;
  uCnsIK *mpCnsIK;
  u32 mIKType;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(2))) uConstraint:1104 : cUnit
{
  uConstraint::cConstraint mConstraint;
  uConstraint *mpPrevCns;
  uConstraint *mpNextCns;
  uModel::Joint *mpParentJnt;
  f32 mBlendWeight;
  u32 mID;
  s32 mOrder;
  u32 mPri;
  uModel *mpModel;
  f32 mBlendSpeed;
  f32 mBlend;
  bool mIgnoreRate;
  bool mEnable;
};

struct __cppobj uCnsMatrix : uConstraint:1104
{
  bool mPos;
  bool mRot;
  rCnsMatrix *mpCnsMatrixRes;
  s32 mJoint;
  __attribute__((aligned(8))) MtMatrix mMat;
};

struct __cppobj __attribute__((aligned(8))) uFullbodyIKHuman2::uCnsFBIKMatrix : uConstraint:1104
{
  bool mPos;
  bool mRot;
  u32 mJoint;
  MtMatrix mMat;
  MtVector3 mScl;
  uModel *mpFBIKModel;
  u32 mFBIKJntNo;
};

struct __cppobj uFullbodyIKHuman2 : uModel
{
  uFullbodyIKHuman2::Node mNode[27];
  uCnsIK mRArm;
  uCnsIK mLArm;
  uCnsIK mRLeg;
  uCnsIK mLLeg;
  uFullbodyIKHuman2::uCnsUpVectorCalc mRArmUpVectorCalc;
  uFullbodyIKHuman2::uCnsUpVectorCalc mLArmUpVectorCalc;
  uFullbodyIKHuman2::uCnsUpVectorCalc mRLegUpVectorCalc;
  uFullbodyIKHuman2::uCnsUpVectorCalc mLLegUpVectorCalc;
  uCnsMatrix mChest;
  uCnsMatrix mCenter;
  uCnsMatrix mUpperBody;
  uCnsMatrix mLowerBody;
  uCnsMatrix mSpine0;
  uCnsMatrix mSpine1;
  uCnsMatrix mSpine2;
  uCnsMatrix mSpine3;
  uCnsMatrix mSpine4;
  uCnsMatrix mRHand;
  uCnsMatrix mLHand;
  uCnsMatrix mRFoot;
  uCnsMatrix mLFoot;
  uCnsMatrix mRCollar;
  uCnsMatrix mLCollar;
  uCnsLookAt mLookAt;
  u32 mPri;
  u32 mIteration;
  f32 mSpineHandleLength;
  f32 mUpperBodyRotRate;
  f32 mUpperBodyTransRate;
  f32 mUpperBodySyncRate;
  f32 mLowerBodyRotRate;
  f32 mLowerBodyTransRate;
  f32 mLowerBodySyncRate;
  f32 mHeadLookAtRate;
  f32 mUpperBodyLookAtRate;
  f32 mLowerBodyLookAtRate;
  f32 mWaistHeightLimit;
  uModel *mpTargetModel;
  rFullbodyIKHuman2 *mpResource;
  __attribute__((aligned(16))) MtMatrix mUpperBodyMat;
  MtMatrix mLowerBodyMat;
  MtMatrix mCenterMat;
  MtMatrix mNeckOffset;
  MtMatrix mChestOffset;
  MtMatrix mRCollarOffset;
  MtMatrix mLCollarOffset;
  MtMatrix mUpperBodyOffset;
  MtMatrix mLowerBodyOffset;
  MtMatrix mSpine0Offset;
  MtMatrix mSpine1Offset;
  MtMatrix mSpine2Offset;
  MtMatrix mSpine3Offset;
  MtMatrix mSpine4Offset;
  MtMatrix mRHandNullOffset;
  MtMatrix mLHandNullOffset;
  MtMatrix mRFootNullOffset;
  MtMatrix mLFootNullOffset;
  bool mTrunkDebugDisplay;
  f32 mRCollarRotBlend;
  f32 mLCollarRotBlend;
  f32 mRCollarUpBlend;
  f32 mRCollarDownBlend;
  f32 mRCollarFrontBlend;
  f32 mRCollarBackBlend;
  f32 mLCollarUpBlend;
  f32 mLCollarDownBlend;
  f32 mLCollarFrontBlend;
  f32 mLCollarBackBlend;
  bool mUseSpineRot;
  f32 mSpineUpperRotRate;
  f32 mSpine0RotRate;
  f32 mSpine1RotRate;
  f32 mSpine2RotRate;
  f32 mSpine3RotRate;
  f32 mSpine4RotRate;
  bool mLookAtWorldCoordRot;
  uFullbodyIKHuman2::uCnsFBIKMatrix mCnsFBIKMatrix[27];
  u32 mState;
  bool mUpdateTargetModel;
};

struct __cppobj __attribute__((aligned(4))) rCnsIK::JointInfo : MtObject
{
  s32 mJntNo;
  f32 mRotMin;
  f32 mRotMax;
  f32 mOffset;
  f32 mScaleOffset;
  bool mReverse;
};

struct __cppobj rCnsIK : rConstraint
{
  rCnsIK::JointInfo mJoint[16];
  s32 mJointNum;
  s32 mDir;
  s32 mUp;
  s32 mFitDir;
  s32 mFitUp;
  bool mEffectorLimitEnable;
  f32 mEffPitchMin;
  f32 mEffPitchMax;
  f32 mEffRotMin;
  f32 mEffRotMax;
  f32 mEffDistMin;
  f32 mEffDistMax;
  bool mJointLimitEnable;
  bool mCollisionEnable;
  f32 mHeelOffset;
  f32 mHeelHeight;
  bool mFit;
  f32 mCheckGroundLengthUpper;
  f32 mCheckGroundLengthLower;
  f32 mGroundLevel;
  s32 mCollisionMode;
  bool mGroundDistAdapt;
  s32 mEffLimitMode;
  s32 mJointLimitMode;
  s32 mEffectorBehavior;
  f32 mMotionFitDist;
  bool mMotionFitDisable;
  s32 mLimitCoord;
  __attribute__((aligned(16))) MtVector3 mLimitCoordOffset;
  bool mEffectorTargetModel;
  u32 mEffectorTargetJointNo;
  bool mEffectorTargetModelEnable;
  bool mUpVectorTargetModel;
  u32 mUpVectorTargetJointNo;
  bool mUpVectorTargetModelEnable;
  u32 mEffectorControl;
  __attribute__((aligned(16))) MtMatrix mOffsetMat;
  MtFloat3 mTransScale;
  MtFloat3 mCenterPosOffset;
  s32 mCenterRefJntNo;
  bool mUseScale;
};

struct __cppobj rCnsMatrix : rConstraint
{
  u32 mJoint;
  __attribute__((aligned(8))) MtMatrix mMat;
};

struct __cppobj __attribute__((aligned(16))) rFullbodyIKHuman2::JointAssign : MtObject
{
  u32 mFBIKJntNo;
  u32 mTargetJntNo;
  MtVector3 mEffOffset;
  bool mRotate;
};

struct __cppobj rFullbodyIKHuman2 : cResource
{
  u32 mPri;
  u32 mIteration;
  f32 mUpperBodyRotRate;
  f32 mUpperBodyTransRate;
  f32 mUpperBodySyncRate;
  f32 mLowerBodyRotRate;
  f32 mLowerBodyTransRate;
  f32 mLowerBodySyncRate;
  f32 mHeadLookAtRate;
  f32 mUpperBodyLookAtRate;
  f32 mLowerBodyLookAtRate;
  f32 mWaistHeightLimit;
  rFullbodyIKHuman2::JointAssign mJointAssign[27];
  f32 mRCollarRotBlend;
  f32 mLCollarRotBlend;
  f32 mRCollarUpBlend;
  f32 mRCollarDownBlend;
  f32 mRCollarFrontBlend;
  f32 mRCollarBackBlend;
  f32 mLCollarUpBlend;
  f32 mLCollarDownBlend;
  f32 mLCollarFrontBlend;
  f32 mLCollarBackBlend;
  f32 mSpineUpperRotRate;
  f32 mSpine0RotRate;
  f32 mSpine1RotRate;
  f32 mSpine2RotRate;
  f32 mSpine3RotRate;
  f32 mSpine4RotRate;
};

struct __cppobj uFullbodyIKHuman2::MyDTI : MtDTI
{
};

struct __cppobj uFullbodyIKHuman2::Node::MyDTI : MtDTI
{
};

struct __cppobj uFullbodyIKHuman2::uCnsUpVectorCalc::MyDTI : MtDTI
{
};

struct __cppobj uFullbodyIKHuman2::uCnsFBIKMatrix::MyDTI : MtDTI
{
};

enum uFullbodyIKHuman2::FBIK_JOINT : __int32
{
  JT_CENTER = 0x0,
  JT_RIGHT_SHOULDER = 0xB,
  JT_RIGHT_ELBOW = 0xC,
  JT_RIGHT_HAND = 0xD,
  JT_LEFT_SHOULDER = 0x15,
  JT_LEFT_ELBOW = 0x16,
  JT_LEFT_HAND = 0x17,
  JT_RIGHT_THIGH = 0x1E,
  JT_RIGHT_KNEE = 0x1F,
  JT_RIGHT_FOOT = 0x20,
  JT_LEFT_THIGH = 0x28,
  JT_LEFT_KNEE = 0x29,
  JT_LEFT_FOOT = 0x2A,
  JT_HEAD = 0x33,
  JT_NECK = 0x32,
  JT_RIGHT_COLLAR = 0xA,
  JT_LEFT_COLLAR = 0x14,
  JT_SPINE0 = 0x3C,
  JT_SPINE1 = 0x3D,
  JT_SPINE2 = 0x3E,
  JT_SPINE3 = 0x3F,
  JT_SPINE4 = 0x40,
  JT_UPPER_BODY = 0x1,
  JT_LOWER_BODY = 0x3,
  JT_CHEST = 0x2,
  JT_LOOK_AT = 0x46,
  JT_NULL = 0xFF,
};

enum uFullbodyIKHuman2::FBIK_JOINT_IDX : __int32
{
  IDX_CENTER = 0x0,
  IDX_RIGHT_SHOULDER = 0x1,
  IDX_RIGHT_ELBOW = 0x2,
  IDX_RIGHT_HAND = 0x3,
  IDX_LEFT_SHOULDER = 0x4,
  IDX_LEFT_ELBOW = 0x5,
  IDX_LEFT_HAND = 0x6,
  IDX_RIGHT_THIGH = 0x7,
  IDX_RIGHT_KNEE = 0x8,
  IDX_RIGHT_FOOT = 0x9,
  IDX_LEFT_THIGH = 0xA,
  IDX_LEFT_KNEE = 0xB,
  IDX_LEFT_FOOT = 0xC,
  IDX_HEAD = 0xD,
  IDX_NECK = 0xE,
  IDX_RIGHT_COLLAR = 0xF,
  IDX_LEFT_COLLAR = 0x10,
  IDX_SPINE0 = 0x11,
  IDX_SPINE1 = 0x12,
  IDX_SPINE2 = 0x13,
  IDX_SPINE3 = 0x14,
  IDX_SPINE4 = 0x15,
  IDX_UPPER_BODY = 0x16,
  IDX_LOWER_BODY = 0x17,
  IDX_CHEST = 0x18,
  IDX_LOOK_AT = 0x19,
  IDX_NULL = 0x1A,
  IDX_FBIK_JOINT_MAX = 0x1B,
  IDX_FBIK_INVALID = 0xFFFFFFFF,
};

enum uFullbodyIKHuman2::STATE : __int32
{
  S_RIGHT_HAND_PULLBODY = 0x1,
  S_LEFT_HAND_PULLBODY = 0x2,
  S_RIGHT_FOOT_PULLBODY = 0x4,
  S_LEFT_FOOT_PULLBODY = 0x8,
  S_WAIST_HEIGHT_LIMIT = 0x10,
};

struct __cppobj uCnsIK::MyDTI : MtDTI
{
};

struct __cppobj uCnsIK::JointInfo::MyDTI : MtDTI
{
};

struct __cppobj uCnsIK::uCnsJoint::MyDTI : MtDTI
{
};

struct __cppobj rCnsIK::MyDTI : MtDTI
{
};

struct __cppobj rCnsIK::JointInfo::MyDTI : MtDTI
{
};

struct __cppobj uCnsMatrix::MyDTI : MtDTI
{
};

struct __cppobj rCnsMatrix::MyDTI : MtDTI
{
};

struct __cppobj rFullbodyIKHuman2::MyDTI : MtDTI
{
};

struct __cppobj rFullbodyIKHuman2::JointAssign::MyDTI : MtDTI
{
};

struct __cppobj uGraphPatch : cUnit
{
  rGraphPatch *mpResource;
  u32 mPass;
  u32 mPriority;
};

struct __attribute__((aligned(8))) nGraphComponent::List
{
  nGraphComponent::Base *mpFirst;
  nGraphComponent::Base *mpLast;
  nGraphComponent::Base *mpOutput;
  u32 mNumOfComponent;
};

struct __cppobj rGraphPatch : cResource
{
  nGraphComponent::List mComponentList;
};

struct nGraphComponent::PortList
{
  nGraphComponent::Port *mpFirst;
  nGraphComponent::Port *mpLast;
};

struct nGraphComponent::Base::ListAttr
{
  nGraphComponent::Base *mpPrev;
  nGraphComponent::Base *mpNext;
  nGraphComponent::List *mpList;
};

struct __cppobj __attribute__((aligned(8))) nGraphComponent::Base : MtObject
{
  bool mEnable;
  u32 mType;
  nGraphComponent::PortList mPortList;
  nGraphComponent::Base::ListAttr mListAttr;
  u32 mObjectListID;
};

struct nGraphComponent::Port
{
  u32 mType;
  MtString mName;
  u32 mID;
  nGraphComponent::Edge *mpEdge;
  nGraphComponent::Port *mpNext;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) nGraphComponent::Base:480 : MtObject
{
  bool mEnable;
  __attribute__((aligned(4))) u32 mType;
  nGraphComponent::PortList mPortList;
  nGraphComponent::Base::ListAttr mListAttr;
  u32 mObjectListID;
};

struct __cppobj nGraphComponent::Edge : nGraphComponent::Base:480
{
  MtVariable mResult;
  nGraphComponent::Base *mpObject0;
  nGraphComponent::Port *mpPort0;
  nGraphComponent::Base *mpObject1;
  nGraphComponent::Port *mpPort1;
};

struct __cppobj uGraphPatch::MyDTI : MtDTI
{
};

struct __cppobj rGraphPatch::MyDTI : MtDTI
{
};

struct __cppobj nGraphComponent::Base::MyDTI : MtDTI
{
};

enum nGraphComponent::Base::Type : __int32
{
  UNKNOWN = 0x0,
  NODE_0 = 0x1,
  OUTPUT = 0x2,
  OPERATOR = 0x3,
  VALUE = 0x4,
  EDGE = 0x5,
  FUNCTION = 0x6,
};

enum nGraphComponent::Port::PortType : __int32
{
  UNKNOWN_0 = 0x0,
  INPUT = 0x1,
  OUTPUT_0 = 0x2,
};

struct __cppobj nGraphComponent::Edge::MyDTI : MtDTI
{
};

typedef void nGraphComponent::UIEntity;

struct rGrass2::Cell::Set
{
  u32 offset;
  u32 count;
};

struct __attribute__((aligned(16))) rGrass2::Cell
{
  MtAABB aabb;
  rGrass2::Cell::Set set[3];
};

struct rGrass2::Grass
{
  int (**_vptr$Grass)(void);
  u32 checked_vertex_count;
  u32 vertex_count;
  u32 vertex_group_count[3];
  bool finished;
  u32 wait;
  rGrass2::Cell cell[5][5];
  rGrass2::VertexFormat *p_vertex;
  nDraw::VertexBuffer *p_vb;
};

struct __attribute__((aligned(8))) uGrass2::CacheManager<rGrass2::Cluster,rGrass2::Grass>::Cache
{
  rGrass2::Grass DATA;
  rGrass2::Cluster *KEY;
  u32 LRU;
};

struct uGrass2::CacheManager<rGrass2::Cluster,rGrass2::Grass>
{
  u32 mCountDown;
  u32 mCounter;
  uGrass2::CacheManager<rGrass2::Cluster,rGrass2::Grass>::Cache mCache[24];
  uGrass2::CacheManager<rGrass2::Cluster,rGrass2::Grass>::Cache *mpIndex[24];
};

struct __cppobj uGrass2 : cUnit
{
  u32 mOneFrameTrial;
  f32 mCacheBeginDistance;
  bool mDebug;
  bool mPopping;
  bool mUsingPointLightMask;
  bool mForcedFade;
  bool mSH;
  bool mBillboardMode;
  bool mZPrepassEnable;
  f32 mFadeBeginDistance;
  f32 mFadeEndDistance;
  u32 mMaxLightNum;
  u32 mLightGroup;
  u32 mWindGroup;
  u32 mTextureQuality;
  f32 mVisiblePercent;
  f32 mNearClipDistance;
  MtVector4 mAmbientOcclusion;
  MtVector4 mFadeParam;
  MtVector4 mColorTweak;
  MtHermiteCurve mFadeCurve;
  u32 mRenderMode;
  u32 mPCFType;
  rGrass2 *mpGrass;
  MtVector3 mOffset;
  uGrass2::CacheManager<rGrass2::Cluster,rGrass2::Grass> mCache;
  nDraw::ConstantTable *mpGrassMaterials[3][8];
};

struct rGrass2::Header
{
  u32 MAGIC;
  u16 DATA_VERSION;
  u8 MAX_PARTITION;
  u8 MAX_CHANNEL;
};

struct __cppobj __attribute__((aligned(16))) rGrass2 : cResource
{
  rGrass2::Header mHeader;
  bool mFragmentMode;
  bool mOnlineMode;
  bool mVertexOnNative;
  u32 mChannelMask;
  f32 mAxisBlend;
  f32 mAxisOffset;
  f32 mMinThreshold;
  f32 mMaxThreshold;
  f32 mMinScale;
  f32 mMaxScale;
  u32 mClusterNum;
  rGrass2::Cluster *mpCluster;
  f32 mClusterSize;
  f32 mDensity;
  MtAABB mAABB;
  rGrass2Setting *mpSetting[3];
};

struct rGrass2::VertexFormat::$443089B2D7F330F310B64A531F1F4F20::$A6CDBEC93A78297A8882B75D0F5BD72B
{
  unsigned __int32 px : 8;
  unsigned __int32 py : 8;
  unsigned __int32 pz : 8;
  unsigned __int32 cb : 4;
  unsigned __int32 vert : 4;
};

union rGrass2::VertexFormat::$443089B2D7F330F310B64A531F1F4F20
{
  rGrass2::VertexFormat::$443089B2D7F330F310B64A531F1F4F20::$A6CDBEC93A78297A8882B75D0F5BD72B _anon_0;
  u32 px_py_pz_vert_cb;
};

struct rGrass2::VertexFormat::$6802F85C6390BEDA8A0F29DDA4267633::$20B687DD74C7753535C086467537AF17
{
  unsigned __int32 angle : 8;
  unsigned __int32 lm : 8;
  unsigned __int32 scaling : 8;
  unsigned __int32 ambocc : 8;
};

union rGrass2::VertexFormat::$6802F85C6390BEDA8A0F29DDA4267633
{
  rGrass2::VertexFormat::$6802F85C6390BEDA8A0F29DDA4267633::$20B687DD74C7753535C086467537AF17 _anon_0;
  u32 angle_lm_scaling_ambocc_fade;
};

struct rGrass2::VertexFormat
{
  rGrass2::VertexFormat::$443089B2D7F330F310B64A531F1F4F20 _anon_0;
  rGrass2::VertexFormat::$6802F85C6390BEDA8A0F29DDA4267633 _anon_1;
};

struct rGrass2::XOrShift
{
  u32 mRandom[4];
};

struct __attribute__((aligned(16))) rGrass2::Cluster
{
  rGrass2::XOrShift rg;
  MtAABB aabb;
  rGrass2::Triangle *p_triangle;
  u32 triangle_count;
  u32 valid_count[3];
  f64 sum_rate;
  rGrass2::Cell cell[5][5];
  rGrass2::Grass *p_grass;
};

struct rGrass2Setting::Header
{
  u32 MAGIC;
  u16 DATA_VERSION;
  u8 MAX_PARTITION;
  u8 MAX_CHANNEL;
};

struct __cppobj rGrass::cChainGrass : MtObject
{
  f32 mPower;
  f32 mTheta;
  MtVector3 mDirection;
};

struct rGrass::cSetting::CBGrassChain
{
  MtVector4 chain[16];
  MtVector3 normal[16];
  MtVector3 tangent[16];
  MtVector4 uv[16];
};

struct __cppobj rGrass::cSetting : MtObject
{
  f32 mRatio;
  f32 mCurveBeginValue;
  f32 mCurveEndValue;
  __attribute__((aligned(16))) rGrass::cChainGrass mChainGrassParams[2];
  MtVector4 mGlobalWindParam;
  MtVector4 mColorOffset;
  MtVector4 mColorScale;
  rGrass::cSetting::CBGrassChain mChain;
  MtVector4 *mChainGrass;
  MtVector3 *mChainGrassNormal;
  MtVector3 *mChainGrassTangent;
  MtHermiteCurve mWeightCurve;
  rTexture *mpAlbedoMap;
  rTexture *mpMaskMap;
  rTexture *mpNormalMap;
  f32 mSpecularPower;
  f32 mTranslucent;
  f32 mScale;
  f32 mAspect;
  f32 mBegin;
  f32 mWidth;
  MtColor mColorOne;
  MtColor mColorTwo;
};

struct __cppobj rGrass2Setting : cResource
{
  rGrass2Setting::Header mHeader;
  rGrass::cSetting mSettingList[8];
};

struct __attribute__((aligned(8))) rGrass2::Triangle
{
  MtFloat3 vertex[3];
  f64 rate;
  u8 channel[3][3];
  u8 density[3];
  u8 irradiance[3];
  u8 ambient[3];
  f32 texcoord_u[3];
  f32 texcoord_v[3];
  u32 tex_lm_id;
  u32 tex_om_id;
};

struct __cppobj uGrass2::MyDTI : MtDTI
{
};

enum uGrass2::TEXTUREQUALITY : __int32
{
  TQ_BILINEAR = 0x0,
  TQ_TRILINEAR = 0x1,
  TQ_ANISOTROPIC = 0x2,
  TQ_MAX = 0x3,
};

enum uGrass2::PCF_FILTER : __int32
{
  PCF_DEFAULT = 0x0,
  PCF_BILINEAR_2x2 = 0x1,
  PCF_BILINEAR_3x3 = 0x2,
  PCF_BILINEAR_4x4 = 0x3,
  PCF_BILINEAR_6x6 = 0x4,
  PCF_BILINEAR_8x8 = 0x5,
};

struct uGrass2::Entry
{
  unsigned __int32 geom_lod : 2;
  unsigned __int32 dummy : 30;
  f32 lod;
  u32 pri;
  const rGrass2::Cell *p_cell;
  nDraw::VertexBuffer *p_vb;
};

enum uGrass2::QUALITYLEVEL : __int32
{
  QL_DIFFUSE_ONLY = 0x1,
  QL_PER_PIXEL_LIGHTING = 0x2,
  QL_PER_PIXEL_SHADOW = 0x4,
  QL_REQUIRE_VTF = 0x8,
  QL_DEFERRED_RENDERING = 0x10,
  QL_FAST = 0x9,
  QL_GOOD = 0x8,
  QL_BETTER = 0x2,
  QL_BEST = 0x6,
  QL_DR = 0x10,
};

enum nDraw::TGrass : __int32
{
  TGrass_Default = 0x0,
  TGrass_FinalCombiner = 0x1,
  TGrass_DefaultLowest = 0x2,
  TGrass_AlphaMask0 = 0x3,
  TGrass_AlphaMask1 = 0x4,
  TGrass_ZPrePass = 0x5,
  TGrass_PointShadow0 = 0x6,
  TGrass_PointShadow1 = 0x7,
  TGrass_TransitionDynamicEditMap = 0x8,
  TGrass_UpdateDynamicEditMap = 0x9,
  TGrass_GABuffer = 0xA,
};

struct __cppobj rGrass2::MyDTI : MtDTI
{
};

struct __cppobj rGrass2Setting::MyDTI : MtDTI
{
};

struct rGrass::HEADER
{
  u32 magic;
  u16 version;
  u16 dummy;
};

struct cTree<rGrass::cCluster>
{
  int (**_vptr$cTree)(void);
  u32 mParamNum;
  cTree<rGrass::cCluster>::cNode *mpRoot;
  MtArray mParams;
};

struct __cppobj rGrass : cResource
{
  rGrass::HEADER mHeader;
  cTree<rGrass::cCluster> mCluster;
  MtArray mParams;
  MtArray mClusters;
  rGrass::cCluster *mpNativeClusters;
  bool mUseComp;
  u32 mVertexCount;
  u32 mVertexStride;
  u32 mGrassType;
  f32 mMaxLength;
  nDraw::VertexBuffer *mpVertexBuffer;
  rGrass::cSetting mSettingList[8];
};

struct cTree<rGrass::cCluster>::cNode
{
  int (**_vptr$cNode)(void);
  cNodeParam<rGrass::cCluster> *mpParam;
  cTree<rGrass::cCluster>::cNode *mpRight;
  cTree<rGrass::cCluster>::cNode *mpLeft;
};

struct __cppobj rGrass::cCluster : MtObject
{
  u32 mIndexCount;
  u32 mVertexCount;
  f32 mDistance;
  __attribute__((aligned(16))) MtVector4 mDequantizationCoordScale;
  MtVector4 mDequantizationCoordOffset;
  MtVector4 mWindDirection[2][8];
  u8 mGlobalRing;
  s32 mVertexBase;
  u32 mVertexStride;
};

struct __cppobj __attribute__((aligned(16))) cNodeParam<rGrass::cCluster> : MtObject
{
  rGrass::cCluster *mpData;
  MtAABB mAABB;
  u8 mMode;
};

struct __cppobj rGrass::MyDTI : MtDTI
{
};

struct __cppobj rGrass::cCluster::MyDTI : MtDTI
{
};

struct __cppobj rGrass::cSetting::MyDTI : MtDTI
{
};

struct __cppobj rGrass::cChainGrass::MyDTI : MtDTI
{
};

enum uLight::GROUP : __int32
{
  GROUP_0_0 = 0x1,
  GROUP_1 = 0x2,
  GROUP_2 = 0x4,
  GROUP_3 = 0x8,
  GROUP_4 = 0x10,
  GROUP_5 = 0x20,
  GROUP_6 = 0x40,
  GROUP_7 = 0x80,
  GROUP_8 = 0x100,
  GROUP_9 = 0x200,
  GROUP_10 = 0x400,
  GROUP_11 = 0x800,
  GROUP_12 = 0x1000,
  GROUP_13 = 0x2000,
  GROUP_14 = 0x4000,
  GROUP_15 = 0x8000,
  GROUP_16 = 0x10000,
  GROUP_17 = 0x20000,
  GROUP_18 = 0x40000,
  GROUP_19 = 0x80000,
  GROUP_20 = 0x100000,
  GROUP_21 = 0x200000,
  GROUP_22 = 0x400000,
  GROUP_23 = 0x800000,
  GROUP_24 = 0x1000000,
  GROUP_25 = 0x2000000,
  GROUP_26 = 0x4000000,
  GROUP_27 = 0x8000000,
  GROUP_28 = 0x10000000,
  GROUP_29 = 0x20000000,
  GROUP_30 = 0x40000000,
  GROUP_31 = 0x80000000,
  GROUP_ALL = 0xFFFFFFFF,
};

enum uGrassWind::GRPUP : __int32
{
  GROUP_0_1 = 0x1,
  GROUP_1_0 = 0x2,
  GROUP_2_0 = 0x4,
  GROUP_3_0 = 0x8,
  GROUP_4_0 = 0x10,
  GROUP_5_0 = 0x20,
  GROUP_6_0 = 0x40,
  GROUP_7_0 = 0x80,
  FORCEDWORD = 0xFFFFFFFF,
};

struct cOperator<rGrass::cCluster>;

struct __cppobj __attribute__((aligned(8))) uGrassMark : uGrassEffect:31648
{
  u32 mType;
  f32 mMark;
  f32 mFreeze;
  f32 mColorTeak;
};

struct __cppobj uGrassMark::MyDTI : MtDTI
{
};

enum uGrassMark::GRASSMARKTYPE : __int32
{
  GMT_UNKNOWN = 0x10,
  GMT_DIRECTION = 0x11,
  GMT_POINT = 0x12,
  GMT_LINE = 0x14,
};

struct __cppobj uGrassMarkPoint : uGrassMark
{
  __attribute__((aligned(16))) MtAABB mAABB;
  MtVector3 mWorldPos;
  MtVector3 mPoint;
  f32 mAttenuation;
  uCoord *mpParent;
  s32 mParentNo;
};

struct __cppobj uGrassMarkPoint::MyDTI : MtDTI
{
};

struct __cppobj uGrassMarkLine : uGrassMark
{
  __attribute__((aligned(16))) MtAABB mAABB;
  MtVector3 mOrigin;
  MtVector3 mAxis;
  MtVector3 mHeadPoint;
  MtVector3 mTailPoint;
  f32 mHeadAttenuation;
  f32 mTailAttenuation;
  uCoord *mpParent;
  s32 mHeadParentNo;
  s32 mTailParentNo;
};

struct __cppobj uGrassMarkLine::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uGrassReceiver : cUnit
{
  bool mUsingPointMap;
};

struct __cppobj uGrassReceiver::MyDTI : MtDTI
{
};

struct __cppobj uGrass : cUnit
{
  rGrass *mpGrass;
  f32 mFadeBeginDistance;
  f32 mFadeEndDistance;
  f32 mNearClipDistance;
  f32 mVisiblePercent;
  MtHermiteCurve mHorizontalReduction;
  u32 mMaxLightNum;
  u32 mLightGroup;
  u32 mWindGroup;
  __attribute__((aligned(16))) MtVector4 mFadeParam;
  MtVector4 mAmbientOcclusionFactor;
  MtVector4 mGlobalWindParam;
  uWind *mpWind;
  f32 mPhase;
  f32 mElapsedTime;
  f32 mWindUpdateTime;
  bool mAlphaTestEnable;
  bool mFixedBillboardEnable;
  bool mBillboardSwingEnable;
  bool mVTFShadow;
  bool mOldPointMap;
  bool mUsePointMap;
  bool mUseNormal;
  bool mUseVertexFog;
  bool mForcedFade;
  bool mPoppingGrass;
  bool mSH;
  bool mUVSwitchEnable;
  f32 mAlphaTestThreshold;
  rTexture *mpDetailNormalMap;
  f32 mDetailNormalFactor;
  f32 mDetailNormalWrap;
  u32 mPCFType;
  __attribute__((aligned(8))) MtMatrix mPointViewProj;
  u32 mCurveMode;
  u32 mShaderMode;
  u32 mBillboardPattern;
  __attribute__((aligned(8))) MtVector3 mOffset;
  f32 mFadeBeginDistanceOriginal;
  f32 mFadeEndDistanceOriginal;
  f32 mNearClipDistanceOriginal;
  f32 mVisiblePercentOriginal;
  u32 mShaderModeOriginal;
};

struct __cppobj uWind::WindGenerator : MtObject
{
  uWind *mpParent;
  bool mBeFlag;
  u32 mGeneratorType;
  f32 mMaxForce;
  f32 mForceRandomRatio;
  f32 mForceBiasRatio;
  f32 mLogisticCoef;
  u32 mLogisticTime;
  __attribute__((aligned(8))) MtPlane mLocalPlane;
  MtSphere mLocalSphere;
  f32 mLogisticVal;
  f32 mCurrentForce;
  u32 mLogisticCtr;
  __attribute__((aligned(8))) MtPlane mPlane;
  MtSphere mSphere;
};

struct __cppobj uWind : cUnit
{
  MtVector3 *mpVectorBuff[3];
  MtVector3 *mpCurrentVectorBuff;
  MtVector3 *mpNextVectorBuff;
  MtVector3 *mpNextNextVectorBuff;
  f32 mDeltaTime;
  u32 mIteratorX;
  u32 mIteratorZ;
  f32 mGridPitch;
  f32 mDumpingCoef;
  bool mRecoveriable;
  f32 mUpdateInterval;
  f32 mUpdateCtr;
  MtVector3 mBasePos;
  f32 mBaseScale;
  __attribute__((aligned(16))) MtAABB mAABB;
  u32 mGeneratorNum;
  __attribute__((aligned(16))) uWind::WindGenerator mWindGenerator[4];
};

struct __cppobj uGrass::MyDTI : MtDTI
{
};

struct uGrass::cRenderOperatorCDRAW<rGrass::cCluster>
{
  int (**_vptr$cRenderOperatorCDRAW)(void);
  cDraw *mpDraw;
  cNodeParam<rGrass::cCluster> *mpObject[1024];
  f32 mMaxLength;
  f32 mMinLength;
  f32 mBeginDistance;
  f32 mEndDistance;
  f32 mVisiblePercent;
  u32 mObjectNum;
  bool mPoppingEnable;
  bool mGlobalWindEnable;
  __attribute__((aligned(8))) MtVector3 mCameraPos;
  MtVector3 mCameraDir;
  u32 mVertexOffset;
  u32 mIndexOffset;
  u32 mMaxIndex;
  u32 mMaxVertex;
  u32 mMaxWind;
  __attribute__((aligned(16))) MtVector3 mOffset;
};

struct __cppobj uWind::MyDTI : MtDTI
{
};

struct __cppobj uWind::WindGenerator::MyDTI : MtDTI
{
};

struct __cppobj uGrassWind::cSwingParameters : MtObject
{
  __attribute__((aligned(16))) MtMatrix mWindMatrix;
  bool mUseLogistic;
  bool mUseInterpolateSpeed;
  f32 mInterpolateSpeed;
  MtLogisticMap mDirectionalLogistic;
  MtLogisticMap mTurblanceLogistic;
  f32 mUpdateInterval;
  f32 mModelAmp;
  f32 mModelPhaseCoeff;
  f32 mElapsed;
  f32 mElapsed2;
  f32 mElapsed3;
  f32 mElapsed4;
  f32 mCurrentPhaseSpeed;
  f32 mCurrentPhaseSpeed2;
  f32 mBasePhaseSpeed;
  f32 mBasePhaseSpeed2;
  f32 mPhaseSpeed;
  f32 mPhaseSpeed2;
  f32 mNoiseRate;
  f32 mNoiseRate2;
  f32 mBias;
};

struct __cppobj uGrassWind::cSwingParameters::MyDTI : MtDTI
{
};

enum uGrassWind::GRASSWINDTYPE : __int32
{
  GWT_UNKNOWN = 0x0,
  GWT_DIRECTION = 0x1,
  GWT_POINT = 0x2,
  GWT_LINE = 0x4,
};

struct __cppobj uGrassWind:31840 : uGrassEffect:31648
{
  u32 mType;
  f32 mAmplification;
  f32 mFrequency;
  f32 mPhase;
  f32 mElapsedPhase;
  u32 mWindGroup;
};

struct __cppobj uGrassWindDirection : uGrassWind:31840
{
  MtFloat3 mDirection;
  uGrassWind::cSwingParameters mParam;
};

struct __cppobj uGrassWindDirection::MyDTI : MtDTI
{
};

struct __cppobj uGrassWindPoint : uGrassWind
{
  __attribute__((aligned(8))) MtAABB mAABB;
  MtVector3 mWorldPos;
  MtVector3 mPoint;
  f32 mAttenuation;
  uCoord *mpParent;
  s32 mParentNo;
  uGrassWind::cSwingParameters mParam;
  sScene::Node mNode;
};

struct __cppobj uGrassWindPoint::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uGrassWindLine : uGrassWind
{
  __attribute__((aligned(8))) MtAABB mAABB;
  MtVector3 mOrigin;
  MtVector3 mAxis;
  MtVector3 mHeadPoint;
  MtVector3 mTailPoint;
  f32 mHeadAttenuation;
  f32 mTailAttenuation;
  uCoord *mpParent;
  s32 mHeadParentNo;
  s32 mTailParentNo;
  sScene::Node mNode;
};

struct __cppobj uGrassWindLine::MyDTI : MtDTI
{
};

struct __cppobj uGrassWindGlobal : uGrassWind
{
  uWind *mpWind;
  f32 mStiffness;
  f32 mDamper;
  f32 mPhaseCoefficient;
  f32 mPhaseAttenuation;
};

struct __cppobj uGrassWindGlobal::MyDTI : MtDTI
{
};

enum nGUI::Draw::STENCIL_STATE : __int32
{
  STENCIL_STATE_NONE = 0x0,
  STENCIL_STATE_WRITE = 0x1,
  STENCIL_STATE_APPLY = 0x2,
  STENCIL_STATE_APPLY_REVERSE = 0x3,
  STENCIL_STATE_UPDATE = 0x4,
  STENCIL_STATE_NUM = 0x5,
};

enum nGUI::BILLBOARD : __int32
{
  BILLBOARD_NONE = 0x0,
  BILLBOARD_XYZ = 0x1,
  BILLBOARD_Y = 0x2,
  BILLBOARD_NUM = 0x3,
};

enum nGUI::BASE_Z : __int32
{
  BASE_Z_ORIGIN = 0x0,
  BASE_Z_PARALLAX_ZERO = 0x1,
  BASE_Z_NEAR_CLIP = 0x2,
  BASE_Z_NUM = 0x3,
};

enum nGUI::FLOW_TYPE : __int32
{
  FLOW_TYPE_START = 0x0,
  FLOW_TYPE_END = 0x1,
  FLOW_TYPE_PROCESS = 0x2,
  FLOW_TYPE_INPUT = 0x3,
  FLOW_TYPE_SWITCH = 0x4,
  FLOW_TYPE_FUNCTION = 0x5,
  FLOW_TYPE_NUM = 0x6,
};

typedef std::_Simple_types<value_type>::value_type_0 *std::_Simple_types<value_type>::reference_0;

typedef std::_Simple_types<value_type>::reference_0 std::_Vector_val<_Val_types>::reference;

typedef std::_Vector_val<_Val_types>::reference std::vector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::reference;

typedef std::_Simple_types<value_type>::value_type_0 std::_Vector_val<_Val_types>::value_type;

typedef std::_Vector_val<_Val_types>::value_type std::vector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::value_type;

typedef std::_Vector_val<_Val_types>::pointer std::vector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::pointer;

typedef std::_Wrap_alloc<_Alloc>_0 std::_Wrap_alloc<_Alloc>::other_1;

typedef std::_Wrap_alloc<_Alloc>::other_1 std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::_Alty;

typedef std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::_Alty std::_Vector_alloc<false,std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > >::_Alty std::vector<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::_Alty;

typedef MtStlAllocator<uGUI::DuplicateBuffer> std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::_Alloc;

typedef std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> >::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<uGUI::DuplicateBuffer,MtStlAllocator<uGUI::DuplicateBuffer> > >::_Alloc;

typedef uGUI::DuplicateBuffer std::_Allocator_base<uGUI::DuplicateBuffer>::value_type;

typedef std::_Allocator_base<uGUI::DuplicateBuffer>::value_type std::allocator<uGUI::DuplicateBuffer>::value_type;

typedef std::allocator<uGUI::DuplicateBuffer>::value_type *std::allocator<uGUI::DuplicateBuffer>::pointer;

typedef size_t std::allocator<uGUI::DuplicateBuffer>::size_type;

typedef std::allocator<uGUI::DuplicateBuffer>::pointer MtStlAllocator<uGUI::DuplicateBuffer>::pointer;

typedef MtStlAllocator<uGUI::DuplicateBuffer>::pointer std::_Get_pointer_type<MtStlAllocator<uGUI::DuplicateBuffer> >::type;

typedef std::_Get_pointer_type<MtStlAllocator<uGUI::DuplicateBuffer> >::type std::allocator_traits<MtStlAllocator<uGUI::DuplicateBuffer> >::pointer;

typedef std::allocator_traits<MtStlAllocator<uGUI::DuplicateBuffer> >::pointer std::_Wrap_alloc<_Alloc>_0::pointer;

typedef std::allocator<uGUI::DuplicateBuffer>::size_type MtStlAllocator<uGUI::DuplicateBuffer>::size_type;

typedef MtStlAllocator<uGUI::DuplicateBuffer>::size_type std::_Get_size_type<MtStlAllocator<uGUI::DuplicateBuffer> >::type;

typedef std::_Get_size_type<MtStlAllocator<uGUI::DuplicateBuffer> >::type std::allocator_traits<MtStlAllocator<uGUI::DuplicateBuffer> >::size_type;

typedef std::allocator_traits<MtStlAllocator<uGUI::DuplicateBuffer> >::size_type std::_Wrap_alloc<_Alloc>_0::size_type;

typedef std::_Vector_val<_Val_types>::size_type std::vector<unsigned int,MtStlAllocator<unsigned int> >::size_type;

typedef std::_Vector_iterator<_Myt> std::_Vector_val<_Val_types>::iterator;

typedef std::_Vector_val<_Val_types>::iterator std::vector<unsigned int,MtStlAllocator<unsigned int> >::iterator;

typedef std::_Simple_types<value_type>::value_type_1 *std::_Simple_types<value_type>::reference_1;

typedef std::_Simple_types<value_type>::reference_1 std::_Vector_val<_Val_types>::reference_0;

typedef std::_Vector_val<_Val_types>::reference_0 std::vector<unsigned int,MtStlAllocator<unsigned int> >::reference;

typedef std::_Simple_types<value_type>::value_type_1 std::_Vector_val<_Val_types>::value_type_0;

typedef std::_Vector_val<_Val_types>::value_type_0 std::vector<unsigned int,MtStlAllocator<unsigned int> >::value_type;

typedef std::_Vector_val<_Val_types>::pointer std::vector<unsigned int,MtStlAllocator<unsigned int> >::pointer;

typedef std::_Wrap_alloc<_Alloc>_1 std::_Wrap_alloc<_Alloc>::other_2;

typedef std::_Wrap_alloc<_Alloc>::other_2 std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> >::_Alty;

typedef std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> >::_Alty std::_Vector_alloc<false,std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> > >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> > >::_Alty std::vector<unsigned int,MtStlAllocator<unsigned int> >::_Alty;

typedef MtStlAllocator<unsigned int> std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> >::_Alloc;

typedef std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> >::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<unsigned int,MtStlAllocator<unsigned int> > >::_Alloc;

typedef const std::_Simple_types<value_type>::value_type_1 *std::_Simple_types<value_type>::const_reference_1;

typedef std::_Simple_types<value_type>::const_reference_1 std::_Vector_val<_Val_types>::const_reference_0;

typedef std::_Simple_types<value_type>::difference_type std::_Vector_val<_Val_types>::difference_type;

typedef unsigned int std::_Allocator_base<unsigned int>::value_type;

typedef std::_Allocator_base<unsigned int>::value_type std::allocator<unsigned int>::value_type;

typedef std::allocator<unsigned int>::value_type *std::allocator<unsigned int>::pointer;

typedef size_t std::allocator<unsigned int>::size_type;

typedef std::allocator<unsigned int>::pointer MtStlAllocator<unsigned int>::pointer;

typedef MtStlAllocator<unsigned int>::pointer std::_Get_pointer_type<MtStlAllocator<unsigned int> >::type;

typedef std::_Get_pointer_type<MtStlAllocator<unsigned int> >::type std::allocator_traits<MtStlAllocator<unsigned int> >::pointer;

typedef std::allocator_traits<MtStlAllocator<unsigned int> >::pointer std::_Wrap_alloc<_Alloc>_1::pointer;

typedef std::allocator<unsigned int>::size_type MtStlAllocator<unsigned int>::size_type;

typedef MtStlAllocator<unsigned int>::size_type std::_Get_size_type<MtStlAllocator<unsigned int> >::type;

typedef std::_Get_size_type<MtStlAllocator<unsigned int> >::type std::allocator_traits<MtStlAllocator<unsigned int> >::size_type;

typedef std::allocator_traits<MtStlAllocator<unsigned int> >::size_type std::_Wrap_alloc<_Alloc>_1::size_type;

typedef std::_Vector_val<_Val_types>::pointer std::_Vector_iterator<_Myt>::pointer;

typedef std::_Vector_val<_Val_types>::reference_0 std::_Vector_iterator<_Myt>::reference;

typedef std::_Vector_iterator<_Myt> std::_Vector_iterator<_Myt>::_Myiter;

typedef std::_Vector_val<_Val_types>::difference_type std::_Vector_iterator<_Myt>::difference_type;

typedef std::_Vector_val<_Val_types>::const_reference_0 std::_Vector_const_iterator<_Myt>::reference;

typedef std::_Vector_const_iterator<_Myt> std::_Vector_const_iterator<_Myt>::_Myiter;

typedef std::_Vector_val<_Val_types>::difference_type std::_Vector_const_iterator<_Myt>::difference_type;

struct std::remove_reference<const unsigned int &>
{
  __int8 gap0[1];
};

typedef const unsigned int std::remove_reference<const unsigned int &>::type;

struct std::remove_reference<unsigned int &>
{
  __int8 gap0[1];
};

typedef unsigned int std::remove_reference<unsigned int &>::type;

struct std::iterator_traits<unsigned int *>
{
  __int8 gap0[1];
};

typedef unsigned int std::iterator_traits<unsigned int *>::value_type;

struct std::remove_reference<unsigned int>
{
  __int8 gap0[1];
};

typedef unsigned int std::remove_reference<unsigned int>::type;

struct std::remove_reference<const uGUI::DuplicateBuffer &>
{
  __int8 gap0[1];
};

typedef const uGUI::DuplicateBuffer std::remove_reference<const uGUI::DuplicateBuffer &>::type;

struct std::remove_reference<uGUI::DuplicateBuffer &>
{
  __int8 gap0[1];
};

typedef uGUI::DuplicateBuffer std::remove_reference<uGUI::DuplicateBuffer &>::type;

struct std::iterator_traits<uGUI::DuplicateBuffer *>
{
  __int8 gap0[1];
};

typedef uGUI::DuplicateBuffer std::iterator_traits<uGUI::DuplicateBuffer *>::value_type;

struct std::remove_reference<uGUI::DuplicateBuffer>
{
  __int8 gap0[1];
};

typedef uGUI::DuplicateBuffer std::remove_reference<uGUI::DuplicateBuffer>::type;

struct __cppobj uGUIScheduler : uGUI
{
};

struct __cppobj uGUIScheduler::MyDTI : MtDTI
{
};

struct __cppobj uGUISubtitles::Subtitles : MtObject
{
  u32 mLanguageFlag;
  u32 mMessageIndex;
  bool mVisible;
  MT_CHAR mIndexName[64];
  uGUISubtitles *mpUnit;
};

struct __cppobj __attribute__((aligned(16))) uGUISubtitles : uGUI:8512
{
  rGUIMessage *mpMsgResource;
  u32 mMsgInstanceId;
  uGUISubtitles::Subtitles mSubtitlesArray[22];
  MT_CHAR mMsgResourcePath[64];
};

struct __cppobj uGUISubtitles::MyDTI : MtDTI
{
};

struct __cppobj uGUISubtitles::Subtitles::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(8))) cGUIInstMessage:3776 : cGUIInstNull
{
  nGUI::MTAG *mpMTag;
  nGUI::MTAG *mpDrawMTag;
  f32 mMsgWidth;
  f32 mMsgHeight;
  u32 mError;
  MtColor mColor;
  MtSize mFontSize;
  MtFloat2 mSize;
  nGUI::BufferObject mVertexObject;
  nGUI::BufferObject mIndexObject;
  u32 mMsgAttr;
  u32 mFontSlot;
  unsigned __int32 mLayout : 8;
  unsigned __int32 mLetterHAlign : 2;
  unsigned __int32 mLetterVAlign : 2;
  unsigned __int32 mSamplerState : 4;
  unsigned __int32 mIconColorType : 2;
  unsigned __int32 mAutoWrap : 2;
  unsigned __int32 mBillboard : 4;
  unsigned __int32 padding : 8;
  __int32 mLineSpace : 16;
  __int32 mLetterSpace : 16;
  u32 mMessageId;
  __attribute__((aligned(8))) MT_CTSTR mpMessageIndexName;
  u32 mFontFilterId[2];
  nGUI::BufferObject mFFVertexObject[2];
  nGUI::BufferObject mFFIndexObject[2];
  nGUI::MTAG *mpFFDrawMTag[2];
};

struct __cppobj cGUIInstText : cGUIInstMessage:3776
{
  u32 mTextAttr;
  f32 mTypingSpeed;
  u32 mCondition;
  f32 mTextCurrentFrame;
  f32 mNowTypingSpeed;
  u32 mDrawCharNum;
  nGUI::MTAG *mpStartMTag;
  nGUI::MTAG *mpNowMTag;
};

struct __cppobj cGUIInstText::MyDTI : MtDTI
{
};

struct __cppobj cGUIInstMessage::MyDTI : MtDTI
{
};

struct __cppobj uISC::ISC : MtObject
{
  u32 mClusterDisp[16];
  u32 IscID;
  u32 joint;
  bool enableBack;
  __attribute__((aligned(16))) MtOBB cam;
  MtMatrix jointInvMat;
};

struct __cppobj uISC : cUnit
{
  uISC::ISC mIsc;
  nDraw::Texture *mpTexDepthNorm;
  nDraw::Texture *mpDepthStencil;
  MtMatrix mVP;
  MtVector3 mViewVecInv;
  MtMatrix mVP2;
  MtVector3 mViewVecInv2;
  rISC *mpResISC;
  MtString mPath;
  uModel *mpCamTargetUnit;
  uBaseModel *mpDrawTargetUnit[5];
};

struct __cppobj rISC : cResource
{
  u32 mClusterDisp[16];
  u32 mIscID;
  u32 mJoint;
  bool mEnableBack;
  __attribute__((aligned(8))) MtOBB mCam;
  MtMatrix mJointInvMat;
};

struct __cppobj uISC::MyDTI : MtDTI
{
};

struct __cppobj uISC::ISC::MyDTI : MtDTI
{
};

enum nDraw::TSoftBody : __int32
{
  TSoftBody_CreateDepthNormFront = 0x0,
  TSoftBody_CreateDepthNormBack = 0x1,
  TSoftBody_FilterDepthNorm = 0x2,
  TSoftBody_PsSkinning = 0x3,
  TSoftBody_PsSkinning_XBOX = 0x4,
  TSoftBody_PsSkinningAddPos = 0x5,
  TSoftBody_PsSkinningAddPos_XBOX = 0x6,
  TSoftBody_ApplyWorldOffset = 0x7,
  TSoftBody_ApplyWorldOffset_XBOX = 0x8,
  TSoftBody_ToLocalSpace = 0x9,
  TSoftBody_ToLocalSpace_XBOX = 0xA,
  TSoftBody_InitPosition = 0xB,
  TSoftBody_InitPosition_XBOX = 0xC,
  TSoftBody_LodTrans = 0xD,
  TSoftBody_LodTrans_XBOX = 0xE,
  TSoftBody_SolveEdgeConst2 = 0xF,
  TSoftBody_SolveEdgeConst2_XBOX = 0x10,
  TSoftBody_SolveConstIsc = 0x11,
  TSoftBody_SolveConstIsc_XBOX = 0x12,
  TSoftBody_SolveConst = 0x13,
  TSoftBody_SolveConst_XBOX = 0x14,
  TSoftBody_Integrate = 0x15,
  TSoftBody_Integrate_XBOX = 0x16,
};

struct __cppobj rISC::MyDTI : MtDTI
{
};

enum uModel::Motion::ATTRIBUTE : __int32
{
  A_NULL_TRANS_OFF = 0x1,
  A_FIRST_TRANS_ON = 0x2,
  A_LOOP_OFF = 0x4,
  A_ADD_TRANS_OFF = 0x8,
  A_STOP = 0x10,
  A_NULL_TRANS_FIX = 0x20,
  A_ENABLE_SCALE = 0x40,
  A_NULL_ANGLE_FIX = 0x80,
  A_SYMMETRY = 0x100,
  A_NULL_ONLY = 0x200,
  A_PREV_TRANS_ON = 0x400,
  A_INTEGER_FRAME = 0x800,
  A_ADD_ROT_OFF = 0x1000,
  A_NULL_TRANS_FIX_SCALE = 0x2000,
  A_SCALE_INHERIT_OFF = 0x4000,
  A_NULL_SYMMETRY = 0x8000,
  A_CONTINUE_TRANS = 0x10000,
  A_CONTINUE_FRAME = 0x20000,
  A_ADD_BLEND = 0x40000,
  A_BASE_MOT = 0x80000,
  A_SCALE_INHERIT_WDIR = 0x100000,
  A_DISABLE_SEQ_NEXTEND = 0x200000,
  A_CONTINUE = 0x30000,
  A_AUTO_CLEAR_FLAG = 0x104040,
  A_SCALE_FLAGS = 0x104040,
  A_MODE_FLAG_MASK = 0xFF000000,
  A_MODE_CONSTRAINT = 0x1000000,
  A_MODE_BUILTINIK = 0x2000000,
  A_MODE_NOSCALE = 0x4000000,
  A_MODE_DISABLE_CALCJWM = 0x8000000,
  A_MODE_JOINT_IDENTITY = 0x10000000,
  A_MODE_SET_MOTION = 0x20000000,
  A_MODE_EX = 0x80000000,
  A_MOTEX_FLAGS = 0x82004140,
};

enum uLight::TYPE : __int32
{
  TYPE_NONE_1 = 0x0,
  TYPE_INFINITE = 0x1,
  TYPE_POINT_1 = 0x2,
  TYPE_SPOT = 0x3,
  TYPE_AMBIENT = 0x4,
  TYPE_CAPSULE_1 = 0x5,
  TYPE_CUBOID = 0x6,
  MAX_TYPE_1 = 0x7,
};

enum uLight::ATTR : __int32
{
  ATTR_FADEOUT = 0x1,
  ATTR_SH = 0x2,
  ATTR_SUBTRACT = 0x4,
  ATTR_PERPIXEL = 0x8,
  ATTR_VIEWCOORD = 0x10,
  ATTR_DISP = 0x20,
  ATTR_RANGE = 0x40,
  ATTR_OBB_RANGE = 0x80,
};

struct __cppobj uInfiniteLight : uLight
{
  __attribute__((aligned(8))) MtVector3 mDir;
};

struct __cppobj uInfiniteLight::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(2))) uLight:7904 : cUnit
{
  unsigned __int32 mAttr : 8;
  unsigned __int32 mType : 6;
  unsigned __int32 mBound : 1;
  unsigned __int32 mWbFlag : 1;
  unsigned __int32 mApproximateDisable : 1;
  unsigned __int32 mPriority : 15;
  u32 mGroup;
  f32 mBalance;
  MtFloat2 mShadowAtten;
  u32 mMode;
  _BYTE gap58[8];
  MtVector3 mColor;
  uLight::DYNAMIC_LIGHT_PARAM mLightParam[2];
  uLight::DYNAMIC_LIGHT_PARAM mApproxLightParam[2];
  SO_HANDLE mLightFunction;
  SO_HANDLE mApproxLightFunction;
  _BYTE gap378[8];
  MtAABB mBoundingBox;
  MtSphere mBoundingSphere;
  rTexture *mpProjectionTexture;
  cLightVolume *mplightVolume;
  uLight::KEY mDefault;
  uLight::KEY mApproximate;
  sScene::Node mNode;
  bool mIsPS3Disable;
  bool mIsPS4Disable;
  bool mIsPCDisable;
};

struct __cppobj uAmbientLight : uLight:7904
{
  f32 mLightMapAtten;
  f32 mEnvMapAtten;
  rTexture *mpEnvCubeTexture;
};

struct __cppobj uAmbientLight::MyDTI : MtDTI
{
};

struct __cppobj uPointLight : uLight
{
  __attribute__((aligned(8))) MtVector3 mPos;
  MtVector3 mWPos;
  MtVector3 mProjectionAngle;
  f32 mStart;
  f32 mEnd;
  uCoord *mpParent;
  s32 mParentNo;
  __attribute__((aligned(16))) MtOBB mRangeOBB;
};

struct __cppobj uPointLight::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uCapsuleLight : uLight
{
  __attribute__((aligned(8))) MtVector3 mPos0;
  MtVector3 mPos1;
  MtVector3 mWPos0;
  MtVector3 mWPos1;
  f32 mStart;
  f32 mEnd;
  uCoord *mpParent;
  s32 mParentNo;
};

struct __cppobj uCapsuleLight::MyDTI : MtDTI
{
};

struct __cppobj uSpotLight : uLight
{
  __attribute__((aligned(8))) MtVector3 mPos;
  MtVector3 mDir;
  MtVector3 mTargetPos;
  MtVector3 mWPos;
  MtVector3 mWDir;
  f32 mStart;
  f32 mEnd;
  f32 mCone;
  f32 mSpread;
  bool mTargetMode;
  uCoord *mpParent;
  uCoord *mpTarget;
  s32 mParentNo;
  s32 mTargetNo;
  f32 mProjectionWrap;
  f32 mFalloff;
  __attribute__((aligned(16))) MtOBB mRangeOBB;
};

struct __cppobj uSpotLight::MyDTI : MtDTI
{
};

struct __cppobj uCuboidLight : uLight
{
  __attribute__((aligned(8))) MtVector3 mPos;
  MtVector3 mDir;
  MtVector3 mUpDir;
  MtMatrix mWmat;
  f32 mWidth;
  f32 mHeight;
  f32 mIncreaseStart;
  f32 mIncreaseEnd;
  f32 mDecreaseStart;
  f32 mDecreaseEnd;
  f32 mSpread;
  f32 mProjectionWrap;
};

struct __cppobj uCuboidLight::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uCubeMapLight : uLight
{
  __attribute__((aligned(8))) uLight::SHFACTOR mFactor;
  rTexture *mpCubeMap;
};

struct __cppobj uCubeMapLight::MyDTI : MtDTI
{
};

struct __cppobj uPointCubeMapLight : uCubeMapLight
{
  __attribute__((aligned(16))) MtVector3 mPos;
  f32 mStart;
  f32 mEnd;
};

struct __cppobj uPointCubeMapLight::MyDTI : MtDTI
{
};

struct __cppobj uCapsuleCubeMapLight : uCubeMapLight
{
  __attribute__((aligned(16))) MtVector3 mPosA;
  MtVector3 mPosB;
  f32 mStart;
  f32 mEnd;
};

struct __cppobj uCapsuleCubeMapLight::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(8))) uCubeMapLight:9152 : uLight
{
  __attribute__((aligned(8))) uLight::SHFACTOR mFactor;
  rTexture *mpCubeMap;
};

struct __cppobj uCuboidCubeMapLight : uCubeMapLight:9152
{
  f32 mTopFace;
  f32 mBottomFace;
  f32 mFrontFace;
  f32 mBackFace;
  f32 mLeftFace;
  f32 mRightFace;
  MtVector3 mCenter;
  MtQuaternion mQuat;
  MtMatrix mWmat;
  MtMatrix mGlobalMat;
  MtMatrix mIWmat;
  MtVector3 mDecayStart;
  MtVector3 mInvDecay;
};

struct __cppobj uCuboidCubeMapLight::MyDTI : MtDTI
{
};

struct __cppobj uBackLight : uLight
{
  __attribute__((aligned(8))) uLight::SHFACTOR mFactor;
};

struct __cppobj uBackLight::MyDTI : MtDTI
{
};

struct __cppobj uLightShaft : cUnit
{
  u32 mNumPlane;
  __attribute__((aligned(16))) MtVector3 mPosition;
  MtVector3 mLookAt;
  MtVector4 *mpVertexBuffer;
  f32 mLSNear;
  f32 mLSFar;
  f32 mLSFov;
  f32 mLSAspect;
  rTexture *mpCookieTexture;
  uCoord *mpShadowTargetModel;
  uCoord *mpPositionParent;
  s32 mPositionParentNo;
  uCoord *mpLookAtParent;
  s32 mLookAtParentNo;
  f32 mDecayStart;
  __attribute__((aligned(16))) MtVector4 mColor;
  MtVector4 mRegion;
};

struct __cppobj uLightShaft::MyDTI : MtDTI
{
};

struct uLightShaft::CLIP_DATA
{
  u32 clip_vertex[8];
  u32 clip_num;
  __attribute__((aligned(16))) MtVector3 cut_point[6];
  u32 cut_connection[6];
  u32 cut_num;
};

struct uLightShaft::VERTEX
{
  MtFloat3 pos;
};

enum nDraw::TLightShaft : __int32
{
  TLightShaft_Default = 0x0,
};

struct __cppobj uMaterialControl::Controller : MtObject
{
  uMaterialControl *mpParent;
  s32 mControlID;
  MtString mAnimation;
  f32 mFrame;
  u32 mSlot;
};

struct __cppobj uMaterialControl : cUnit
{
  uBaseModel *mpTarget;
  bool mControlAllSlot;
  uMaterialControl::Controller mController[32];
};

struct __cppobj uMaterialControl::MyDTI : MtDTI
{
};

struct __cppobj uMaterialControl::Controller::MyDTI : MtDTI
{
};

struct __cppobj uMetaSet : cUnit
{
  rMetaSet *mpResource;
  MtArray mObjectArray;
  MtArray mObjectPool;
};

struct __cppobj rMetaSet : cResource
{
  void *mpRawData;
  u32 mObjectNum;
  u32 mDataSize;
};

struct __cppobj uMetaSet::MyDTI : MtDTI
{
};

struct __cppobj uMetaSet::ObjectData : MtObject
{
  MtObject *mpObject;
  u32 mObjectType;
  u32 mManagementNo;
};

enum uMetaSet::ObjectData::TYPE : __int32
{
  TYPE_UNIT = 0x0,
  TYPE_OTHER = 0x1,
};

struct __cppobj rMetaSet::MyDTI : MtDTI
{
};

union rMetaSet::NativeObjectData::$3593011A7C6E41F4175C369B139105F4
{
  u32 mAutoCreation;
  u32 mClassName;
};

struct rMetaSet::NativeObjectData
{
  rMetaSet::NativeObjectData::$3593011A7C6E41F4175C369B139105F4 _anon_0;
  u32 mID;
  u32 mGroup;
  u32 mDTI;
  u32 mMoveLine;
  u32 mPropertyNum;
  u32 mInnerClassNum;
};

struct rMetaSet::NativePropertyData
{
  u32 mNameHashCode;
  u32 mType;
  u32 mCount;
  u32 mDataSize;
};

struct __cppobj rMetaSetXml : rMetaSet
{
  u32 mObjectDataCount;
  MtArray mObjectArray;
  MtArray mObjectList;
  MtArray *mpObjectPool;
};

struct __cppobj rMetaSetXml::MyDTI : MtDTI
{
};

struct __cppobj rMetaSetXml::ObjectData : MtObject
{
  u32 mManagementNo;
  bool mAutoCreation;
  u32 mID;
  u32 mGroup;
  u32 mDTI;
  u32 mMoveLine;
  MtArray mInitPropertyList;
  MtString mComment;
  MtObject *mpObject;
  MtArray *mpObjectPool;
  MtArray mInnerClass;
  MtString mClassName;
  u32 mClassIndex;
  MtArray mPropertyID;
};

struct __cppobj rMetaSetXml::ObjectData::MyDTI : MtDTI
{
};

enum uMirage::eRefractionMapQuality : __int32
{
  HI_QUALITY = 0x0,
  MID_QUALITY = 0x1,
  LO_QUALITY = 0x2,
  MAX_QUALITY = 0x3,
};

enum uMirage::eRefractionMapType : __int32
{
  NONE_2 = 0x0,
  NORMAL = 0x1,
  BLURRED = 0x2,
  HEAT_DEPTH = 0x3,
  MAX_TYPE_2 = 0x4,
};

struct __cppobj uMirage : cUnit
{
  f32 mNear;
  f32 mFar;
  f32 mMinAltitude;
  f32 mMinThresholdAltitude;
  f32 mMaxThresholdAltitude;
  f32 mMaxAltitude;
  bool mNoise;
  rTexture *mpNoiseTexture;
  __attribute__((aligned(16))) MtVector3 mNoiseOffset;
  MtVector4 mNoiseDir;
  MtVector3 mCurrentOffset;
  f32 mNoiseSpeed;
  f32 mNoiseScale;
  f32 mBias;
  f32 mBlurDispersion;
  bool mRefraction;
  f32 mRefractConst;
  nDraw::Texture *mpRefractionMap;
  nDraw::Texture *mpRefractionDepthMap;
  nDraw::Texture *mpSectioningDepthMap;
  nDraw::Texture *mpBlurTemp;
  uMirage::eRefractionMapQuality mQuality;
  uMirage::eRefractionMapType mType;
  bool mDepthBlend;
  f32 mDepth;
  nDraw::Texture *mpHeatDepth;
  rModel *mpHeatModel;
  float mHeatHeight;
  __attribute__((aligned(8))) MtVector3 mHeatModelScl;
  MtVector3 mHeatModelRot;
  MtVector3 mHeatModelPos;
  bool mDebug;
};

struct __cppobj uMirage::MyDTI : MtDTI
{
};

struct uMirage::MirageVertex
{
  MtFloat3 position;
  MtFloat2 texcoord0;
};

enum nDraw::TMirage : __int32
{
  TMirage_Default = 0x0,
  TMirage_Sectioning = 0x1,
  TMirage_HeatDepth = 0x2,
};

struct uMirage::drawBlur::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
  MtColor col;
};

struct __cppobj __attribute__((aligned(16))) uMirror : cUnit
{
  uCoord *mpParent;
  s32 mParentNo;
  __attribute__((aligned(8))) MtVector3 mPos;
  MtVector3 mWPos;
  MtQuaternion mQuat;
  MtVector3 mScale;
  MtMatrix mWmat;
  MtPlane mPlane;
  MtMatrix mReflection;
  MtFloat2 mRectSize;
  f32 mFar;
  MtColor mClearColor;
  u32 mMSAA;
  f32 mDrawDist;
  nDraw::INPUT_ELEMENT mIE;
  rRenderTargetTexture *mpRTTex;
  nDraw::Texture *mpRTarget;
  nDraw::Texture *mpTempTex;
  bool mUpdate;
  nDraw::Texture *mpDepthStencil;
  f32 mBlur;
  bool mInit;
  bool mDisp;
};

struct __cppobj uMirror::MyDTI : MtDTI
{
};

enum uMirror::MSAA : __int32
{
  MSAA_NONE_0 = 0x0,
  MSAA_2X_0 = 0x1,
  MSAA_4X_0 = 0x2,
};

enum nDraw::TMirror : __int32
{
  TMirror_Default = 0x0,
};

struct MtHalf
{
  s16 value;
};

union MtHalf::MT_UF
{
  u32 u;
  f32 f;
};

struct uMirror::drawMirror::IA_NONSKIN_B
{
  MtFloat3 position;
  u32 normal;
  MtHalf2 texcoord0;
};

enum uModel::Motion::STATE : __int32
{
  S_MOTION_NEXT_END = 0x1,
  S_SETUP = 0x2,
  S_MOTION_END = 0x4,
  S_INTERPOLATE = 0x100,
  S_PROTECT_STATE = 0xFF02,
};

enum nDraw::TReCalcNormal : __int32
{
  TReCalcNormal_VO = 0x0,
  TReCalcNormal_VO_3T = 0x1,
  TReCalcNormal_MN = 0x2,
  TReCalcNormal_MNS = 0x3,
};

enum JOINT_TYPE : __int32
{
  JOINT_TYPE_FK = 0x0,
  JOINT_TYPE_WORLD = 0x1,
  JOINT_TYPE_IK = 0x2,
  JOINT_TYPE_RF = 0x3,
  JOINT_TYPE_LF = 0x4,
  JOINT_TYPE_RH = 0x5,
  JOINT_TYPE_LH = 0x6,
  JOINT_TYPE_RF2 = 0x7,
  JOINT_TYPE_LF2 = 0x8,
  JOINT_TYPE_RF4 = 0x9,
  JOINT_TYPE_LF4 = 0xA,
  JOINT_TYPE_RF7 = 0xB,
  JOINT_TYPE_LF7 = 0xC,
  JOINT_TYPE_RF8 = 0xD,
  JOINT_TYPE_LF8 = 0xE,
  JOINT_TYPE_RH2 = 0xF,
  JOINT_TYPE_LH2 = 0x10,
  JOINT_TYPE_RH7 = 0x11,
  JOINT_TYPE_LH7 = 0x12,
  JOINT_TYPE_IKF = 0x13,
  JOINT_TYPE_IKH = 0x14,
  JOINT_TYPE_RH1 = 0x15,
  JOINT_TYPE_LH1 = 0x16,
  JOINT_TYPE_IF = 0x17,
  JOINT_TYPE_IB = 0x18,
  JOINT_TYPE_IU = 0x19,
  JOINT_TYPE_ID = 0x1A,
  JOINT_TYPE_IL = 0x1B,
  JOINT_TYPE_IR = 0x1C,
  JOINT_TYPE_IF2 = 0x1D,
  JOINT_TYPE_IB2 = 0x1E,
  JOINT_TYPE_IU2 = 0x1F,
  JOINT_TYPE_ID2 = 0x20,
  JOINT_TYPE_IL2 = 0x21,
  JOINT_TYPE_IR2 = 0x22,
  JOINT_TYPE_IF_NOGND = 0x23,
  JOINT_TYPE_IB_NOGND = 0x24,
  JOINT_TYPE_IU_NOGND = 0x25,
  JOINT_TYPE_ID_NOGND = 0x26,
  JOINT_TYPE_IL_NOGND = 0x27,
  JOINT_TYPE_IR_NOGND = 0x28,
  JOINT_TYPE_FIK = 0x29,
  JOINT_TYPE_LIK = 0x2A,
  JOINT_TYPE_RIK = 0x2B,
  JOINT_TYPE_RHU = 0x2C,
  JOINT_TYPE_LHU = 0x2D,
  JOINT_TYPE_RH1U = 0x2E,
  JOINT_TYPE_LH1U = 0x2F,
  JOINT_TYPE_RH2U = 0x30,
  JOINT_TYPE_LH2U = 0x31,
  JOINT_TYPE_RH7U = 0x32,
  JOINT_TYPE_LH7U = 0x33,
};

enum uModel::Joint::ATTRIBUTE : __int32
{
  A_DISABLE_MOTION = 0x1,
  A_IK_CORRECT = 0x2,
  A_IK_TRIGGER = 0x4,
  A_INVERSE_ROTATE = 0x8,
  A_SKIN = 0x10,
  A_DISABLE_CALC_WMAT = 0x20,
  A_DISABLE_INTERPOLATE = 0x40,
};

enum sCollision::CONTACT_TYPE : __int32
{
  CONTACT_NONE = 0x0,
  CONTACT_GROUND = 0x1,
  CONTACT_SLOPE = 0x2,
  CONTACT_WALL = 0x4,
  CONTACT_CEILING = 0x8,
  CONTACT_EMULATEOFF = 0x10,
  CONTACT_OBJECT = 0x20,
  CONTACT_RESERVED = 0x40,
  CONTACT_FORCEGROUND = 0x80,
  CONTACT_FORCESLOPE = 0x100,
  CONTACT_FORCEWALL = 0x200,
  CONTACT_RE_AXIS_LS_NOT_HIT = 0x400,
  CONTACT_AXIS_GROUND = 0x100000,
  CONTACT_AXIS_SLOPE = 0x200000,
  CONTACT_AXIS_WALL = 0x400000,
  CONTACT_AXIS_CEILING = 0x800000,
  CONTACT_AXIS_SHIFT = 0x14,
  CONTACT_AXIS_ALL = 0xF00000,
  CONTACT_SYSTEM_AXIS_GROUND = 0x1000000,
  CONTACT_SYSTEM_AXIS_SLOPE = 0x2000000,
  CONTACT_SYSTEM_AXIS_WALL = 0x4000000,
  CONTACT_SYSTEM_AXIS_CEILING = 0x8000000,
  CONTACT_SYSTEM_AXIS_SHIFT = 0x18,
  CONTACT_SYSTEM_AXIS_ALL = 0xF000000,
  CONTACT_REPAIR_SBC_LOCK_ENABLE = 0x80000000,
  CONTACT_ALL = 0x800003BF,
};

struct __cppobj uActorModel::Constraint : uModel::Constraint
{
  uModel *mpModel;
  u32 mParentJntNo;
  u32 mJntNo;
};

struct __cppobj uActorModel : uModel
{
  uActorModel::Constraint mConstraint[64];
  rModelMontage *mpMontage;
  u32 mMontageNo;
  __attribute__((aligned(8))) MtVector3 mOffsetPos;
  MtVector3 mOffsetAngle;
};

struct __cppobj rModelMontage : cResource
{
  rModelMontage::HEADER *mpHeader;
};

struct rModelMontage::HEADER
{
  u32 magic;
  u32 version;
  u32 parts_num;
  u32 montage_num;
  rModelMontage::PARTS *parts;
  rModelMontage::MONTAGE *montage;
};

struct rModelMontage::PARTS
{
  unsigned __int32 no : 16;
  unsigned __int32 type : 16;
  u32 group;
};

struct rModelMontage::MONTAGE
{
  u32 kind[4];
  f32 scale;
};

struct __cppobj uActorModel::MyDTI : MtDTI
{
};

struct __cppobj uActorModel::Constraint::MyDTI : MtDTI
{
};

struct __cppobj rModelMontage::MyDTI : MtDTI
{
};

struct __cppobj uBaseModel:36032 : uCoord
{
  bool mbFilpShadowCast;
  s32 mIgnoreFilpShadowPartNo;
  rModel *mpModel;
  rMaterial *mpMaterialData;
  nDraw::Material **mpMaterials;
  u32 mMaterialNum;
  u32 mLightGroup;
  unsigned __int32 mLightAttr : 4;
  unsigned __int32 mMultiShadowReceive : 1;
  unsigned __int32 mMaxNumGroup0MultiShadowReceive : 2;
  unsigned __int32 mMaxNumGroup1MultiShadowReceive : 2;
  unsigned __int32 mVtxDisplacementWaveEnable : 1;
  unsigned __int32 mVtxDisplacementExpEnable : 1;
  unsigned __int32 mReserved : 20;
  unsigned __int32 mFlatTransparency : 1;
  __int32 mVFCullLevel : 6;
  unsigned __int32 mVFCullScale : 1;
  unsigned __int32 mVFCullRotate : 1;
  unsigned __int32 mVFCullTranslate : 1;
  __int32 mLODType : 4;
  __int32 mDebugFlags : 8;
  __int32 mShaderQuality : 4;
  unsigned __int32 mMaxLightNum : 4;
  unsigned __int32 mShaderAttributes : 1;
  unsigned __int32 mDissolveEnable : 1;
  unsigned __int32 mFixPosition : 1;
  u32 mDrawPriority;
  u32 mPartsDisp[16];
  s32 mZPrepassDist;
  s32 mPriorityBias;
  f32 mTransparency;
  f32 mLODLowDist;
  f32 mLODMidDist;
  u32 mMaterialAnimationFlag;
  unsigned __int32 mViewDraw : 16;
  unsigned __int32 mViewDrawNew : 16;
  unsigned __int32 mViewDrawUpdate : 1;
  unsigned __int32 mMatrixPalletEnable : 1;
  unsigned __int32 mViewDrawReserved : 30;
  nDraw::Material *mpMaterialStack[4];
  _BYTE gap1B8[8];
  MtSphere mBoundingSphere;
  MtOBB mBoundingBox;
  MtSphere mLightReciver;
  MtVector4 mAmbientMask;
  u32 mCacheMode;
  u32 mPrevPartsDisp[16];
  u32 mPartsDispMax;
  uBaseModel::CACHE mCache[96];
  s32 mTailCacheNum;
  u32 mMaterialCBuffer;
  bool mCommandCacheOffOld;
  bool mCommandCacheOffNow;
  bool mIsRCNEnable;
  bool mIsFromTextureCalcTangent;
  bool mMaterialIndexDirect;
};

struct __cppobj __attribute__((aligned(16))) uModelSky : uBaseModel:36032
{
  rTexture *mpBaseMap[2];
  f32 mLerp;
  f32 mFogMulRate;
  f32 mFogAddRate;
};

struct __cppobj uModelSky::MyDTI : MtDTI
{
};

struct __cppobj uModelPlaneClip : uModel
{
  bool mEnableClip;
  __attribute__((aligned(16))) MtVector3 mPlaneOffset;
  MtVector4 mPlaneVector;
};

struct __cppobj uModelPlaneClip::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uModelSymmetry : uBaseModel
{
};

struct __cppobj uModelSymmetry::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(4))) uModel::JointDAGNode : MtObject
{
  MtArray mLink;
  uModel::Joint *mpJnt;
  u32 mDepth;
  bool mVisit;
};

struct __cppobj uModel::JointDAGNode::MyDTI : MtDTI
{
};

typedef void (*uModel::CalcWMatFunction)(uModel *, uModel::Joint *);

enum uModel::INTER_STATE : __int32
{
  IS_SKIP_QUAT = 0x1,
  IS_SKIP_TRANS = 0x2,
  IS_SKIP_SCALE = 0x4,
  IS_SET = 0x8,
  IS_SETTED = 0x10,
  IS_SKIP_MASK = 0x7,
  IS_DISABLE = 0x20,
  IS_KEEP_FLAG = 0x20,
  SHIFT_PEAK_TO_SKIP = 0x4,
  SHFIT_USE_TO_SKIP = 0x0,
};

enum uModel::MJOINT_STATE : __int32
{
  MJS_USE_QUAT = 0x1,
  MJS_USE_TRANS = 0x2,
  MJS_USE_SCALE = 0x4,
  MJS_USE_BIK = 0x8,
  MJS_PEAK_QUAT = 0x10,
  MJS_PEAK_TRANS = 0x20,
  MJS_PEAK_SCALE = 0x40,
  MJS_USE_MASK = 0xF,
  MJS_PEAK_MASK = 0x70,
};

enum nMotion::MOTION_INFO::MOTION_ATTRIBUTE : __int32
{
  A_SCALE_GLOBAL = 0x1,
  A_SCALE_INHERIT_WDIR_0 = 0x2,
  A_DIFF_MOTION = 0x4,
  A_NON_COMPRESS = 0x80,
};

struct __attribute__((aligned(8))) nMotion::CPARAM_WORK
{
  const nMotion::CURVE_PARAM *pparam;
  f32 cur_frame;
  void *pcur_param;
  f32 weight;
};

struct __cppobj __attribute__((aligned(16))) uMotionCamera : uCamera
{
  MtVector3 mOffsetPos;
  MtVector3 mTrackPos;
  MtVector3 mTrackTarget;
  f32 mZoom;
  f32 mRoll;
  u32 mCut;
  f32 mFrame;
  f32 mSpeed;
  u32 mFovType;
  bool mTrackLink;
  bool mRepeat;
  bool mCutRepeat;
  bool mShowPath;
  bool mShowLineOfSight;
  rCameraList *mpCameraList;
  uCoord *mpParent;
  s32 mParentNo;
  u32 mPrevCut;
  nMotion::MPARAM_WORK mMot_work_pos;
  nMotion::MPARAM_WORK mMot_work_target;
  nMotion::MPARAM_WORK mMot_work_quat;
  nMotion::CPARAM_WORK mMot_work_fov;
};

struct __cppobj rCameraList : cResource
{
  rCameraList::CAMERA_LIST_HDR *mpHdr;
};

struct nMotion::CURVE_PARAM::$3457AB0A14F3D662EA58256DB4014683::$9D707EDAD78285F79CEDA3B29669F3D9
{
  unsigned __int32 type : 8;
  unsigned __int32 usage : 8;
  unsigned __int32 curve_type : 8;
  unsigned __int32 curve_no : 8;
};

union nMotion::CURVE_PARAM::$3457AB0A14F3D662EA58256DB4014683
{
  nMotion::CURVE_PARAM::$3457AB0A14F3D662EA58256DB4014683::$9D707EDAD78285F79CEDA3B29669F3D9 _anon_0;
  u32 header;
};

struct nMotion::CURVE_PARAM
{
  nMotion::CURVE_PARAM::$3457AB0A14F3D662EA58256DB4014683 _anon_0;
  u32 param_size;
  f32 fbottom;
  f32 frange;
  void *pparam;
};

struct rCameraList::CAMERA_LIST_HDR
{
  u32 magic;
  u16 version;
  u16 camera_num;
  rCameraList::CAMERA_INFO *pcamera[1];
};

struct rCameraList::CAMERA_INFO
{
  s32 userdata[8];
  u32 frame_num;
  u32 fovtype;
  f32 aspect;
  u32 padding;
  nMotion::MOTION_PARAM mot_pos;
  nMotion::MOTION_PARAM mot_target;
  nMotion::MOTION_PARAM mot_quat;
  nMotion::CURVE_PARAM mot_fov;
};

struct __cppobj uMotionCamera::MyDTI : MtDTI
{
};

enum uMotionCamera::FOV_TYPE : __int32
{
  FOV_VERT = 0x0,
  FOV_HORZ = 0x1,
};

struct __cppobj rCameraList::MyDTI : MtDTI
{
};

enum uMovie::STATUS : __int32
{
  EMPTY = 0x0,
  INITIALIZING = 0x1,
  INITIALIZED = 0x2,
  BUFFERING = 0x3,
  IDLE = 0x4,
  PLAYING = 0x5,
  PAUSED = 0x6,
  RESUME = 0x7,
  STOPPED = 0x8,
  TERMINATING = 0x9,
  TERMINATED_0 = 0xA,
};

typedef void *SceAvPlayerHandle;

struct __cppobj __attribute__((aligned(8))) uMovie : cUnit
{
  uMovie::STATUS mStatus;
  SceAvPlayerHandle mPlayer;
  rMovie *mpMovie;
  rMovie *mpNextMovie;
  rRenderTargetTexture *mpMovieTexture;
  u32 mDrawFrame;
  MtSize mMovieSize;
  u32 mMovieDuration;
  bool mIsLoop;
  bool mIsVideoBufferingOver;
  bool mIsPlayable;
  bool mClear;
  u32 mDrawIndex;
  u32 mDecodeIndex;
  u8 *mDecodeVideoMemoryPtr;
  nDraw::Texture *mDecodeTextureLuma[20];
  nDraw::Texture *mDecodeTextureChroma[20];
  bool mIsHaveAudioStream;
  bool mAudioEnable;
  u32 mAudioChannels;
  u32 mAudioSampleRate;
  u32 mVolume;
  u32 mCategory;
  bool mAudioRestricted;
  uMovie::soundDecode *mSoundThread;
  u32 mPresentMode;
  t64 mMoviePlayTime;
  t64 mMovieStartTime;
  t64 mMoviePausedTime;
  u64 mMovieTimeStamp[20];
  t64 mKeepPreviousFrameTime;
  bool mIsDebug;
};

struct __cppobj rMovie : cResource
{
};

enum uMovie::soundDecode::STATE : __int32
{
  NONE_3 = 0x0,
  BUFFERING_0 = 0x1,
  PLAYABLE = 0x2,
  PLAYING_0 = 0x3,
  END_1 = 0x4,
};

struct uMovie::soundDecode
{
  int (**_vptr$soundDecode)(void);
  SceAvPlayerHandle mPlayer;
  ScePthread mThread;
  uintptr mSoundID;
  uMovie::soundDecode::STATE mState;
  t64 mVideoLatestFrameTimeStamp;
  t64 mSoundLatestFrameTimeStamp;
};

struct __cppobj uMovie::MyDTI : MtDTI
{
};

enum uMovie::PRESENTATION_MODE : __int32
{
  FRAME_BASE = 0x0,
  TIME_BASE = 0x1,
};

struct __cppobj rMovie::MyDTI : MtDTI
{
};

typedef SceAvPlayerFrameInfoEx SceAvPlayerFrameInfoEx_0;

struct SceAvPlayerAudioEx
{
  uint16_t channelCount;
  uint8_t reserved[2];
  uint32_t sampleRate;
  uint32_t size;
  uint8_t languageCode[4];
  uint8_t reserved1[64];
};

typedef SceAvPlayerAudioEx SceAvPlayerAudioEx_0;

struct SceAvPlayerVideoEx
{
  uint32_t width;
  uint32_t height;
  float aspectRatio;
  uint8_t languageCode[4];
  uint32_t framerate;
  uint32_t cropLeftOffset;
  uint32_t cropRightOffset;
  uint32_t cropTopOffset;
  uint32_t cropBottomOffset;
  uint32_t pitch;
  uint8_t reserved1[40];
};

typedef SceAvPlayerVideoEx SceAvPlayerVideoEx_0;

struct SceAvPlayerTimedTextEx
{
  uint8_t languageCode[4];
  uint8_t reserved[12];
  uint8_t reserved1[64];
};

typedef SceAvPlayerTimedTextEx SceAvPlayerTimedTextEx_0;

union SceAvPlayerStreamDetailsEx
{
  SceAvPlayerAudioEx_0 audio;
  SceAvPlayerVideoEx_0 video;
  SceAvPlayerTimedTextEx_0 subs;
  uint8_t reserved1[80];
};

typedef SceAvPlayerStreamDetailsEx SceAvPlayerStreamDetailsEx_0;

struct SceAvPlayerFrameInfoEx
{
  void *pData;
  uint8_t reserved[4];
  uint64_t timeStamp;
  SceAvPlayerStreamDetailsEx_0 details;
};

enum sSound::VOICE_CATEGORY : __int32
{
  VOICE_CATEGORY_SE = 0x0,
  VOICE_CATEGORY_BGM = 0x1,
  VOICE_CATEGORY_ENV = 0x2,
  VOICE_CATEGORY_VOICE = 0x3,
  VOICE_CATEGORY_SYSTEM = 0x4,
  VOICE_CATEGORY_EVENT = 0x5,
};

enum SceAvPlayerDebuglevels : __int32
{
  SCE_AVPLAYER_DBG_NONE = 0x0,
  SCE_AVPLAYER_DBG_INFO = 0x1,
  SCE_AVPLAYER_DBG_WARNINGS = 0x2,
  SCE_AVPLAYER_DBG_ALL = 0x3,
};

enum SceAvPlayerVideoDecoderType : __int32
{
  SCE_AVPLAYER_VIDEO_DECODER_TYPE_DEFAULT = 0x0,
  SCE_AVPLAYER_VIDEO_DECODER_TYPE_RESERVED1 = 0x1,
  SCE_AVPLAYER_VIDEO_DECODER_TYPE_SOFTWARE = 0x2,
  SCE_AVPLAYER_VIDEO_DECODER_TYPE_SOFTWARE2 = 0x3,
};

enum SceAvPlayerAudioDecoderType : __int32
{
  SCE_AVPLAYER_AUDIO_DECODER_TYPE_DEFAULT = 0x0,
  SCE_AVPLAYER_AUDIO_DECODER_TYPE_RESERVED1 = 0x1,
  SCE_AVPLAYER_AUDIO_DECODER_TYPE_RESERVED2 = 0x2,
};

enum SceAvPlayerStreamType : __int32
{
  SCE_AVPLAYER_VIDEO = 0x0,
  SCE_AVPLAYER_AUDIO = 0x1,
  SCE_AVPLAYER_TIMEDTEXT = 0x2,
  SCE_AVPLAYER_UNKNOWN = 0x3,
};

typedef void *(*SceAvPlayerAllocate)(void *, uint32_t, uint32_t);

typedef void (*SceAvPlayerDeallocate)(void *, void *);

typedef void *(*SceAvPlayerAllocateTexture)(void *, uint32_t, uint32_t);

typedef void (*SceAvPlayerDeallocateTexture)(void *, void *);

struct SceAvPlayerMemAllocator
{
  void *objectPointer;
  SceAvPlayerAllocate allocate;
  SceAvPlayerDeallocate deallocate;
  SceAvPlayerAllocateTexture allocateTexture;
  SceAvPlayerDeallocateTexture deallocateTexture;
};

typedef SceAvPlayerMemAllocator SceAvPlayerMemAllocator_0;

typedef int (*SceAvPlayerOpenFile)(void *, const char *);

typedef int (*SceAvPlayerCloseFile)(void *);

typedef int (*SceAvPlayerReadOffsetFile)(void *, uint8_t *, uint64_t, uint32_t);

typedef uint64_t (*SceAvPlayerSizeFile)(void *);

struct SceAvPlayerFileReplacement
{
  void *objectPointer;
  SceAvPlayerOpenFile open;
  SceAvPlayerCloseFile close;
  SceAvPlayerReadOffsetFile readOffset;
  SceAvPlayerSizeFile size;
};

typedef SceAvPlayerFileReplacement SceAvPlayerFileReplacement_0;

typedef void (*SceAvPlayerEventCallback)(void *, int32_t, int32_t, void *);

struct SceAvPlayerEventReplacement
{
  void *objectPointer;
  SceAvPlayerEventCallback eventCallback;
};

typedef SceAvPlayerEventReplacement SceAvPlayerEventReplacement_0;

typedef SceAvPlayerDebuglevels SceAvPlayerDebuglevels_0;

struct SceAvPlayerInitData
{
  SceAvPlayerMemAllocator_0 memoryReplacement;
  SceAvPlayerFileReplacement_0 fileReplacement;
  SceAvPlayerEventReplacement_0 eventReplacement;
  SceAvPlayerDebuglevels_0 debugLevel;
  uint32_t basePriority;
  int32_t numOutputVideoFrameBuffers;
  bool autoStart;
  uint8_t reserved[3];
  const char *defaultLanguage;
};

typedef SceAvPlayerVideoDecoderType SceAvPlayerVideoDecoderType_0;

typedef SceAvPlayerAudioDecoderType SceAvPlayerAudioDecoderType_0;

union SceAvPlayerDecoderInit::$52BD328A5C2094B294F1BE7A1C0BD4E4
{
  SceAvPlayerVideoDecoderType_0 videoType;
  SceAvPlayerAudioDecoderType_0 audioType;
  uint8_t reserved[4];
};

struct SceAvPlayerDecoderInit::$B620F53F529CD4824D4745C9B2A11937::$8E447AE00D92E2D61F35316D2B7C8391
{
  int32_t cpuAffinityMask;
  int32_t cpuThreadPriority;
  uint8_t decodePipelineDepth;
  uint8_t computePipeId;
  uint8_t computeQueueId;
  uint8_t enableInterlaced;
  uint8_t reserved[16];
};

union SceAvPlayerDecoderInit::$B620F53F529CD4824D4745C9B2A11937
{
  SceAvPlayerDecoderInit::$B620F53F529CD4824D4745C9B2A11937::$8E447AE00D92E2D61F35316D2B7C8391 avcSw2;
  uint8_t reserved[28];
};

struct SceAvPlayerDecoderInit
{
  SceAvPlayerDecoderInit::$52BD328A5C2094B294F1BE7A1C0BD4E4 decoderType;
  SceAvPlayerDecoderInit::$B620F53F529CD4824D4745C9B2A11937 decoderParams;
};

typedef SceAvPlayerDecoderInit SceAvPlayerDecoderInit_0;

struct SceAvPlayerPostInitData
{
  uint32_t demuxVideoBufferSize;
  SceAvPlayerDecoderInit_0 videoDecoderInit;
  SceAvPlayerDecoderInit_0 audioDecoderInit;
  uint8_t reserved[64];
};

struct SceAvPlayerAudio
{
  uint16_t channelCount;
  uint8_t reserved1[2];
  uint32_t sampleRate;
  uint32_t size;
  uint8_t languageCode[4];
};

typedef SceAvPlayerAudio SceAvPlayerAudio_0;

struct SceAvPlayerVideo
{
  uint32_t width;
  uint32_t height;
  float aspectRatio;
  uint8_t languageCode[4];
};

typedef SceAvPlayerVideo SceAvPlayerVideo_0;

struct SceAvPlayerTextPosition
{
  uint16_t top;
  uint16_t left;
  uint16_t bottom;
  uint16_t right;
};

typedef SceAvPlayerTextPosition SceAvPlayerTextPosition_0;

struct SceAvPlayerTimedText
{
  uint8_t languageCode[4];
  uint16_t textSize;
  uint16_t fontSize;
  SceAvPlayerTextPosition_0 position;
};

typedef SceAvPlayerTimedText SceAvPlayerTimedText_0;

union SceAvPlayerStreamDetails
{
  uint8_t reserved[16];
  SceAvPlayerAudio_0 audio;
  SceAvPlayerVideo_0 video;
  SceAvPlayerTimedText_0 subs;
};

typedef SceAvPlayerStreamDetails SceAvPlayerStreamDetails_0;

struct SceAvPlayerStreamInfo
{
  uint32_t type;
  uint8_t reserved[4];
  SceAvPlayerStreamDetails_0 details;
  uint64_t duration;
  uint64_t startTime;
};

struct SceAvPlayerFrameInfo
{
  uint8_t *pData;
  uint8_t reserved[4];
  uint64_t timeStamp;
  SceAvPlayerStreamDetails_0 details;
};

struct uMovie::draw::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
};

typedef SceAvPlayerInitData SceAvPlayerInitData_0;

typedef SceAvPlayerPostInitData SceAvPlayerPostInitData_0;

typedef SceAvPlayerStreamInfo SceAvPlayerStreamInfo_0;

typedef SceAvPlayerFrameInfo SceAvPlayerFrameInfo_0;

struct __cppobj uNetStorage : cUnit
{
  MtNetStorage *mpStorage;
  MtNetStorage::Result mResult;
  s32 mState;
};

struct __cppobj uNetStorage::MyDTI : MtDTI
{
};

enum uNetStorage::$0DDA759CCAEBF33429F0F7503B160E86 : __int32
{
  STATE_CLOSED = 0x0,
  STATE_OPEN = 0x1,
  STATE_WRITE = 0x2,
  STATE_READ = 0x3,
  STATE_ENUM = 0x4,
  STATE_UNLINK = 0x5,
  STATE_FATAL = 0x6,
  STATE_NUM_1 = 0x7,
};

struct __cppobj uOccluder : cUnit
{
  MtVector3 mQuad[4];
};

struct __cppobj uOccluder::MyDTI : MtDTI
{
};

struct __cppobj uOccluderMover : uCoord
{
};

struct __cppobj uOccluderMover::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uOrthoCamera : uCamera
{
  f32 mViewHeight;
  f32 mScale;
};

struct __cppobj uOrthoCamera::MyDTI : MtDTI
{
};

struct __cppobj uProjectionTexture:1728 : cUnit
{
  rTexture *mpTexture;
  _BYTE gap48[8];
  MtVector4 mColor;
  u32 mDrawPass;
  u32 mBlendMode;
  u32 mProjectionMode;
  f32 mNear;
  f32 mFar;
  f32 mWidth;
  f32 mHeight;
  f32 mFov;
  f32 mAspectRatio;
  f32 mFadeInEnd;
  f32 mFadeOutStart;
  f32 mUVWrap;
  MtFloat2 mUVOffset;
  _BYTE gap98[8];
  MtVector3 mCameraPos;
  MtVector3 mCameraDir;
  MtVector3 mUpVector;
  uCamera *mpCamera;
};

struct __cppobj uProjectionShadow : uProjectionTexture:1728
{
  u32 mShadowGroup;
  u32 mChannel;
  f32 mIntensity;
  nDraw::BlendState *mpBSMax[4];
  uLight *mpLight;
};

struct __cppobj uProjectionTexture : cUnit
{
  rTexture *mpTexture;
  __attribute__((aligned(16))) MtVector4 mColor;
  u32 mDrawPass;
  u32 mBlendMode;
  u32 mProjectionMode;
  f32 mNear;
  f32 mFar;
  f32 mWidth;
  f32 mHeight;
  f32 mFov;
  f32 mAspectRatio;
  f32 mFadeInEnd;
  f32 mFadeOutStart;
  f32 mUVWrap;
  MtFloat2 mUVOffset;
  __attribute__((aligned(16))) MtVector3 mCameraPos;
  MtVector3 mCameraDir;
  MtVector3 mUpVector;
  uCamera *mpCamera;
};

struct __cppobj uProjectionShadow::MyDTI : MtDTI
{
};

struct __cppobj uProjectionTexture::MyDTI : MtDTI
{
};

enum uProjectionTexture::ProjectionMode : __int32
{
  PM_ORTHO = 0x0,
  PM_PROJECTION = 0x1,
};

enum nDraw::COLOR_WRITE_MASK : __int32
{
  MASK_RED = 0x1,
  MASK_GREEN = 0x2,
  MASK_BLUE = 0x4,
  MASK_ALPHA = 0x8,
  MASK_ALL = 0xF,
};

enum uProjectionTexture::BlendMode : __int32
{
  BM_MODULATE = 0x0,
  BM_ADD = 0x1,
};

struct __attribute__((aligned(8))) uProjectionTexture::draw::VERTEX
{
  MtFloat2 xy;
  MtColor color;
};

struct __cppobj uReflectionMap : cUnit
{
  rRenderTargetTexture *mpReflectionMap;
  nDraw::Texture *mpDepthStencil;
  nDraw::Texture *mpTempTexture;
  __attribute__((aligned(16))) MtVector3 mPos;
  MtVector3 mNormal;
  u32 mBlurTap;
  f32 mBlurDispersion;
};

struct __cppobj uReflectionMap::MyDTI : MtDTI
{
};

struct uReflectionMap::drawBlur::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
  MtColor col;
};

struct `anonymous namespace'::VERTEX
{
  MtFloat3 pos;
};

struct __cppobj uReflectiveShadowMap : cUnit
{
  nDraw::Texture *mRSMBuffer0;
  nDraw::Texture *mRSMBuffer1;
  nDraw::Texture *mDepthStencil;
  nDraw::Texture *mGBufferReduction;
  nDraw::Texture *mDiffuseBufferReduction;
  nDraw::Texture *mTempBuffer;
  f32 mViewDistance;
  f32 mBackwardViewDistance;
  u32 mMapSize;
  __attribute__((aligned(8))) MtVector3 mLightDir;
  MtVector3 mLightColor;
  uLight *mpTargetLight;
  bool mTargetLightEnable;
  bool mIndirectLighting;
  u32 mReductionRatio;
  f32 mGatherSize;
  f32 mGatherStep;
  u32 mGatherType;
  f32 mDistanceBias;
  f32 mLightingIntensity;
  f32 mBlurFactorDepth;
  f32 mBlurFactorNormal;
  u32 mBlurSize;
  f32 mUpsamplingFactorDepth;
  f32 mUpsamplingFactorNormal;
  u32 mUpsamplingType;
  f32 mUpsamplingSize;
};

struct __cppobj uReflectiveShadowMap::MyDTI : MtDTI
{
};

struct uReflectiveShadowMap::Context
{
  MtMatrix view;
  MtMatrix proj;
  MtRect viewport;
};

enum uReflectiveShadowMap::REDUCTION_RATIO : __int32
{
  REDUCTION_RATIO_4 = 0x0,
  REDUCTION_RATIO_5 = 0x1,
  REDUCTION_RATIO_6 = 0x2,
  REDUCTION_RATIO_8 = 0x3,
};

enum uReflectiveShadowMap::GATHER_TYPE : __int32
{
  GATHER_TYPE_FIXED = 0x0,
  GATHER_TYPE_FIXED_LARGE_SIZE = 0x1,
  GATHER_TYPE_FIXED_HIGH_QUALITY = 0x2,
  GATHER_TYPE_VARIABLE = 0x3,
  GATHER_TYPE_MAX = 0x4,
};

enum uReflectiveShadowMap::BLUR_SIZE : __int32
{
  BLUR_SIZE_8 = 0x0,
  BLUR_SIZE_12 = 0x1,
  BLUR_SIZE_16 = 0x2,
  BLUR_SIZE_MAX = 0x3,
};

enum uReflectiveShadowMap::UPSAMPLING_TYPE : __int32
{
  UPSAMPLING_TYPE_BILATERAL = 0x0,
  UPSAMPLING_TYPE_BILINEAR = 0x1,
};

enum nDraw::TReflectiveShadowMap : __int32
{
  TReflectiveShadowMap_IndirectLighting = 0x0,
  TReflectiveShadowMap_GBufferReduction = 0x1,
  TReflectiveShadowMap_BilateralBlurHSize8 = 0x2,
  TReflectiveShadowMap_BilateralBlurHSize12 = 0x3,
  TReflectiveShadowMap_BilateralBlurHSize16 = 0x4,
  TReflectiveShadowMap_BilateralBlurVSize8 = 0x5,
  TReflectiveShadowMap_BilateralBlurVSize12 = 0x6,
  TReflectiveShadowMap_BilateralBlurVSize16 = 0x7,
  TReflectiveShadowMap_BilateralUpsampling = 0x8,
  TReflectiveShadowMap_BilinearUpsampling = 0x9,
};

enum rScheduler::TRACK::TYPE : __int32
{
  TYPE_UNKNOWN_2 = 0x0,
  TYPE_ROOT = 0x1,
  TYPE_UNIT_0 = 0x2,
  TYPE_SYSTEM = 0x3,
  TYPE_SCHEDULER = 0x4,
  TYPE_OBJECT = 0x5,
  TYPE_INT_0 = 0x6,
  TYPE_INT64 = 0x7,
  TYPE_VECTOR = 0x8,
  TYPE_FLOAT_0 = 0x9,
  TYPE_FLOAT64 = 0xA,
  TYPE_BOOL_1 = 0xB,
  TYPE_REF = 0xC,
  TYPE_RESOURCE = 0xD,
  TYPE_STRING_0 = 0xE,
  TYPE_EVENT_0 = 0xF,
  TYPE_MATRIX_0 = 0x10,
};

enum rScheduler::KEY::MODE : __int32
{
  MODE_CONSTANT = 0x0,
  MODE_OFFSET = 0x1,
  MODE_TRIGGER = 0x2,
  MODE_LINEAR = 0x3,
  MODE_OFFSET_F = 0x4,
  MODE_HERMITE = 0x5,
};

struct __cppobj uSchedulerEdit : uScheduler
{
};

struct __cppobj uSchedulerEdit::MyDTI : MtDTI
{
};

struct __cppobj uScreenMap : cUnit
{
  rRenderTargetTexture *mpScreenMap;
  u16 mPass;
  s32 mPriority;
};

struct __cppobj uScreenMap::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) nPrim::PrimVertex : MtObject
{
  MtFloat3 pos;
  MtColor col;
  f32 scale;
  u32 hdr_intensity;
  u32 binormal;
  u32 reserved;
  f32 tex_u;
  f32 tex_v;
  MtVector3 normal;
  MtVector3 tangent;
  u32 attr;
};

struct __cppobj uScreenSpace : cUnit
{
  rRenderTargetTexture *mpRenderTarget;
  nDraw::Texture *mpColorTarget;
  nDraw::Texture *mpDepthTarget;
  nDraw::Texture *mpTempColorTarget;
  nDraw::Texture *mpDistortionTex;
  MtFloat2 mTexCoordLT;
  MtFloat2 mTexCoordRB;
  MtRect mDrawPos;
  __attribute__((aligned(16))) MtVector3 mCameraPos;
  MtVector3 mCameraUp;
  MtVector3 mCameraTarget;
  f32 mNearPlane;
  f32 mFarPlane;
  f32 mFOV;
  u32 mSceneDrawMode;
  u32 mSceneView;
  MtColor mClearColor;
  u32 mTextureSize;
  bool mDraw2D;
  bool mFXAA;
  nPrim::PrimVertex mVertices[4];
  u32 mAttribute;
  s32 mDepth;
  MtArray mPointTable;
  uCamera *mpCamera;
  u32 mPass;
  u32 mPriority;
  u32 mLayer;
  bool mDepthToAlpha;
  bool mDistortionEnabled;
};

struct __cppobj uScreenSpace::MyDTI : MtDTI
{
};

enum uScreenSpace::eTexSize : __int32
{
  E_TEX_SIZE_128x128 = 0x0,
  E_TEX_SIZE_256x256 = 0x1,
  E_TEX_SIZE_512x512 = 0x2,
  E_TEX_SIZE_1024x1024 = 0x3,
  E_TEX_SIZE_2048x2048 = 0x4,
  E_TEX_SIZE_NONE = 0x5,
  E_TEX_SIZE_MAX = 0x6,
};

enum nDraw::TAntialiasing : __int32
{
  TAntialiasing_FXAA = 0x0,
  TAntialiasing_FXAA3 = 0x1,
  TAntialiasing_FXAA3HQ = 0x2,
};

struct __cppobj nPrim::PrimVertex::MyDTI : MtDTI
{
};

enum nPrim::PrimVertex::AvailableAttr : __int32
{
  ENABLE_POS = 0x1,
  ENABLE_COL = 0x2,
  ENABLE_SCALE = 0x4,
  ENABLE_HDRI = 0x8,
  ENABLE_BINORM = 0x10,
  ENABLE_UV = 0x20,
  ENABLE_NORM = 0x40,
  ENABLE_TANGENT = 0x80,
  ENABLE_ALL = 0xFFFFFFFF,
};

struct uScreenSpace::drawScene::SysVtx
{
  MtFloat2 pos;
  MtFloat2 uv;
};

enum uShadow::SHADOW_MAP_TYPE : __int32
{
  SHADOW_DEPTH_MAP = 0x0,
  SHADOW_VARIANCE_MAP = 0x1,
};

enum uShadow::PCF_FILTER : __int32
{
  PCF_BILINEAR_2x2_0 = 0x0,
  PCF_BILINEAR_3x3_0 = 0x1,
  PCF_BILINEAR_4x4_0 = 0x2,
};

enum uShadow::VSM_BLUR_TYPE : __int32
{
  VSM_BLUR_GAUS_5x5 = 0x0,
  VSM_BLUR_GAUS_7x7 = 0x1,
  VSM_BLUR_GAUS_9x9 = 0x2,
  VSM_BLUR_GAUS_11x11 = 0x3,
  VSM_BLUR_BOX_5x5 = 0x4,
  VSM_BLUR_BOX_9x9 = 0x5,
  VSM_BLUR_BOX_13x13 = 0x6,
};

enum uShadow::MANAGED_TYPE : __int32
{
  MANAGED_TYPE_DISABLE = 0x0,
  MANAGED_TYPE_CULLING = 0x1,
  MANAGED_TYPE_ALLOCATION_CULLING = 0x2,
};

enum uShadow::SHADOW_TYPE : __int32
{
  SHADOW_TYPE_LSM = 0x0,
  SHADOW_TYPE_SSM = 0x1,
  SHADOW_TYPE_UNIFORM = 0x2,
  SHADOW_TYPE_SPOT = 0x3,
  SHADOW_TYPE_POINT = 0x4,
};

enum nDraw::FILL_MODE : __int32
{
  FILL_WIREFRAME = 0x0,
  FILL_SOLID = 0x1,
};

enum nDraw::TVarianceFilter : __int32
{
  TVarianceFilter_Default = 0x0,
  TVarianceFilter_CubeMap = 0x1,
};

enum nDraw::TShadowReceive : __int32
{
  TShadowReceive_Solid0 = 0x0,
  TShadowReceive_Solid1 = 0x1,
  TShadowReceive_AlphaMask0 = 0x2,
  TShadowReceive_AlphaMask1 = 0x3,
  TShadowReceive_Transparent0 = 0x4,
  TShadowReceive_Transparent1 = 0x5,
  TShadowReceive_DeferredRectangle = 0x6,
};

struct __cppobj uLightSpaceShadow : uShadow
{
  MtVector3 mLightDir;
  bool mCascadeEnable;
  bool mSmoothCascade;
  f32 mThreshold0;
  f32 mThreshold1;
  f32 mLSMMaxReduction;
  bool mAdjustNearPlane;
  f32 mNearPlaneDistance;
  MtEaseCurve mLSMReductionCurve;
};

struct __cppobj uLightSpaceShadow::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uStableShadow : uShadow
{
  MtVector3 mLightDir;
  bool mCascadeEnable;
  u32 mCascadeMode;
  bool mSmoothCascade;
  f32 mShadowDistribution;
  bool mCascadeSplitCustomizeEnable;
  f32 mThreshold0;
  f32 mThreshold1;
};

struct __cppobj uStableShadow::MyDTI : MtDTI
{
};

enum uStableShadow::CASCADE_MODE : __int32
{
  CASCADE_3WAY = 0x3,
  CASCADE_2WAY = 0x2,
  FORCE_DWORD = 0xFFFFFFFF,
};

struct __cppobj uUniformShadow : uShadow
{
  MtVector3 mLightDir;
};

struct __cppobj uUniformShadow::MyDTI : MtDTI
{
};

struct __cppobj cConeVolume : cConvexBoundingVolume
{
  __attribute__((aligned(16))) MtMatrix mMat;
  MtFrustum mFrustum;
};

struct uSpotShadow::DynamicState
{
  MtVector3 mLightPos;
  MtVector3 mLightDir;
  f32 mLightCone;
  f32 mLightSpread;
  __attribute__((aligned(16))) MtOBB mRangeOBB;
};

struct __cppobj uSpotShadow : uShadow
{
  MtVector3 mLightPos;
  MtVector3 mLightDir;
  f32 mLightCone;
  f32 mLightSpread;
  __attribute__((aligned(16))) MtOBB mRangeOBB;
  cConeVolume mVolume;
  uSpotShadow::DynamicState mStateCache;
  sShadow::SharedTexture mSharedTexture;
};

struct __cppobj uSpotShadow::MyDTI : MtDTI
{
};

struct __cppobj cSphereVolume : cConvexBoundingVolume
{
  __attribute__((aligned(16))) MtMatrix mMat;
  MtSphere mSphere;
};

struct __cppobj uPointShadow : uShadow
{
  MtVector3 mLightPos;
  MtOBB mRangeOBB;
  cSphereVolume mVolume;
  f32 mShadowDistanceBias;
  __attribute__((aligned(16))) MtVector3 mLightPosCache;
  MtOBB mRangeOBBCache;
  sShadow::SharedTexture mSharedTexture;
};

struct __cppobj uPointShadow::MyDTI : MtDTI
{
};

struct uPointShadow::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
};

struct uShadow::makeMipMapSubLevel::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
};

struct uPointShadow::fillMargin::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
};

struct uPointShadow::makeMipSubLevel::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
};

struct __cppobj uShadowRegion : cUnit
{
  unsigned __int32 mAttr : 16;
  unsigned __int32 mGroup : 16;
  f32 mIntensity;
  uCoord *mpParent;
  s32 mParentNo;
  __attribute__((aligned(16))) MtAABB mBoundingBox;
  MtSphere mBoundingSphere;
};

struct __cppobj uShadowRegion::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uPointShadowRegion : uShadowRegion
{
  MtVector3 mPos;
  MtVector3 mWPos;
  f32 mStart;
  f32 mEnd;
};

struct __cppobj uPointShadowRegion::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uSpotShadowRegion : uShadowRegion
{
  MtVector3 mPos;
  MtVector3 mTargetPos;
  MtVector3 mDir;
  MtVector3 mWPos;
  MtVector3 mWDir;
  f32 mStart;
  f32 mEnd;
  f32 mCone;
  f32 mSpread;
  bool mTargetMode;
  uCoord *mpTarget;
  s32 mTargetNo;
};

struct __cppobj uSpotShadowRegion::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uCapsuleShadowRegion : uShadowRegion
{
  MtVector3 mPosA;
  MtVector3 mPosB;
  MtVector3 mWPosA;
  MtVector3 mWPosB;
  f32 mStart;
  f32 mEnd;
};

struct __cppobj uCapsuleShadowRegion::MyDTI : MtDTI
{
};

struct __cppobj uCuboidShadowRegion : uShadowRegion
{
  f32 mTopFace;
  f32 mBottomFace;
  f32 mFrontFace;
  f32 mBackFace;
  f32 mLeftFace;
  f32 mRightFace;
  __attribute__((aligned(16))) MtVector3 mCenter;
  MtQuaternion mQuat;
  MtMatrix mWmat;
  MtMatrix mGlobalMat;
  MtMatrix mIWmat;
  MtVector3 mDecayStart;
  MtVector3 mInvDecay;
};

struct __cppobj uCuboidShadowRegion::MyDTI : MtDTI
{
};

struct uSimSoftBody::SoftBodyLWMatrix
{
  MtFloat3x4 LWMatrix;
  MtFloat3x4 DiffMatrix;
  MtFloat3x4 DiffMatrixInv;
  MtFloat3x4 LWMatrixInv;
};

struct __cppobj uSimSoftBody : cUnit
{
  MtVector3 mWorldOffset;
  bool mIsApplyWorldOffset;
  u32 mNumParticles;
  MtVector3 *mpSwapX[3];
  u32 mSwapPrev;
  u32 mSwapCurr;
  u32 mSwapNext;
  MtVector3 *mpA;
  u32 mSimTriListNum;
  u32 mConstraintsTail;
  u32 mSwapPrevCpu;
  u32 mSwapCurrCpu;
  u32 mSwapNextCpu;
  u32 mVtxListNum;
  MtVector3 *mpSkinX;
  rDeformWeightMap *mpResWeightMap;
  u32 mTriListNum;
  u32 mVbufNo;
  u32 mVbufNoCpuQuat;
  u32 mFrameCount;
  u32 mFrameCountCpuQuat;
  u32 mTblListNum;
  u32 mSkinListTail;
  bool mCallCreateApproxScrCollisionGPU;
  f32 mAlpha;
  f32 mBeta;
  __attribute__((aligned(16))) MtVector3 mGravity;
  f32 mTimeStep;
  f32 mTimeStep2;
  f32 mTimeStepSq;
  f32 mOldTimeStep;
  f32 mDelta;
  f32 mWeightOffset;
  u32 mNumIterate;
  u32 mMaxIterate;
  f32 mMaxStretch;
  __attribute__((aligned(16))) MtVector3 mBlowSpPos;
  f32 mBlowSpRad;
  f32 mMaxForce;
  f32 mSphereFriction;
  bool mWeightDisp;
  bool mCentroidConst;
  bool mSimON;
  bool mResetRestart;
  bool mSimCulling;
  bool mIterateControlON;
  bool mColTest;
  bool mColMode;
  bool mResUpdate;
  bool mRecalcNormal;
  bool mIsDbDisp;
  f32 mSoundThreashold;
  bool mEditSoundID;
  bool mSoundTrace;
  u32 mSoundID;
  rSoundPhysicsSoftBody *mpResSPS;
  cSoundPhysicsSoftBody *mpSound;
  __attribute__((aligned(16))) MtVector3 mPrevPos;
  bool mSoundSkip;
  u32 mDevelopDrawOffset;
  f32 mDevelopDrawScale;
  MtFloat4 *mpSoundBuffer;
  f32 mTimeAcc;
  f32 mTimeAcc2;
  u32 mVfrIterate;
  u32 mVfrIterate2;
  u32 mSwapCurrDraw;
  bool mEnableVTF;
  bool mEnableR2VB;
  nDraw::Texture *mpTexPosFlagLink[3];
  nDraw::Texture *mpTexFaceNormal;
  nDraw::Texture *mpTexVtxNormal;
  nDraw::Texture *mpTexVtxNormalBlend;
  nDraw::Texture *mpTexOrgQuat;
  nDraw::Texture *mpTexQuat;
  nDraw::Texture *mpTexVtxNormalFlag;
  uSimSoftBody::LOCAL_PRIMITIVE_INFO *mpLocalPrimInfo;
  nDraw::VertexBuffer *mpSoftBodyVB[3];
  u32 mSoftBodyVBstride;
  u32 mPriority;
  MtVector3 **mpPrimVtxPt[3];
  u32 mPrimVtxNum;
  nDraw::Texture *mpTexCpuQuat[3];
  u32 mPrimTriNum;
  u32 mCalcNormalInit;
  bool mCreatedSBBase;
  u32 mSimState;
  s32 mCullmask[4];
  MtGeomConvex *mpCullGeom;
  MtVector4 *mpSkinningBuffer;
  MtVector4 *mpRebuildSkinningBuffer;
  uModel *mpTargetUnit;
  u32 mCallDrawCount;
  bool mFlagPushCtx;
  bool mApproxScrCollision;
  bool mScrCollision;
  bool mColliderCollision;
  bool mGrassWind;
  bool mDetailedWind;
  bool mPseudoWind;
  __attribute__((aligned(16))) MtVector3 mDetailWindHeading;
  f32 mDetailWindStrength;
  u32 mWindGroupMask;
  __attribute__((aligned(16))) MtVector3 mSbRayDirection0;
  MtVector3 mSbRayStartPos0;
  f32 mSbRayRadius0;
  f32 mSbRayAttenuator0;
  f32 mSbRayPower0;
  __attribute__((aligned(8))) MtVector3 mSbRayDirection1;
  MtVector3 mSbRayStartPos1;
  f32 mSbRayRadius1;
  f32 mSbRayAttenuator1;
  f32 mSbRayPower1;
  u32 mSbcType;
  u32 mSbcFilter;
  u32 mColliderType;
  u32 mColliderFilter;
  sCollision::Node *mpColliderNode;
  MtGeomConvex *mpColliderGeoms[24];
  u32 mIntersectedColliderNum;
  __attribute__((aligned(8))) MtGeomSphere mBounding;
  f32 mWindScalePoint;
  f32 mWindScaleDirection;
  __attribute__((aligned(16))) MtVector4 mDirectGrassWind[8];
  f32 mDirectGrassWindStrength[8];
  nDraw::Texture *mpTexColSphere[3];
  u32 mColSphereListSize;
  nDraw::Texture *mpTexColTriangle[3];
  u32 mColTriangleListSize;
  nDraw::Texture *mpTexColBox[3];
  u32 mColBoxListSize;
  nDraw::Texture *mpTexColEllipsoid[3];
  u32 mColEllipsoidListSize;
  nDraw::Texture *mpTexColCapsule[3];
  u32 mColCapsuleListSize;
  f32 mTerrainXMin;
  f32 mTerrainXUnit;
  f32 mTerrainZMin;
  f32 mTerrainZUnit;
  u32 mTerrainNumSlices;
  nDraw::Texture *mpTexColTerrain[3];
  u32 mColTerrainListSize;
  bool mImageSpaceCollision;
  MtMatrix mVP[8];
  MtVector3 mViewVecInv[8];
  MtMatrix mVP2[8];
  MtVector3 mViewVecInv2[8];
  nDraw::Texture *mpTexColN[2];
  bool mNCollision;
  f32 mNCGlobalWeight;
  f32 mVtxColSize;
  f32 mAvoidZFight;
  bool mGHasTerrainTex;
  nDraw::Texture *mpTexSwapX[2][4];
  nDraw::Texture *mpTexConstDiff;
  nDraw::Texture *mpTexAccmDiff;
  nDraw::Texture *mpTexSkin[3];
  nDraw::Texture *mpTexSkin2[2][2];
  nDraw::Texture *mpTexDepthNorm[8];
  nDraw::Texture *mpTexFilterDepthNorm;
  nDraw::Texture *mpDepthStencil;
  u32 mSkinCurr;
  f32 mExtrapolation;
  f32 mExtraCoeff;
  __attribute__((aligned(8))) uSimSoftBody::SoftBodyLWMatrix mLWMatrix;
  MtMatrix mPrevMat;
  MtVector3 mPrevTrans;
  MtQuaternion mPrevQuat;
  bool mLocalOnly;
  uISC *mpISC;
  uSimSoftBody::LOD *mpLOD;
  u8 mNumLOD;
  uSimSoftBody::MtHalf4x2 *mpSpuFixPrimVtxNormal;
  MtFloat4 *mpSpuFixJoint;
  MtFloat4 *mpSpuFixWeight;
  uSimSoftBody::MtHalf4x2 *mpRebuildSpuFixPrimVtxNormal;
  MtFloat4 *mpRebuildSpuFixJoint;
  MtFloat4 *mpRebuildSpuFixWeight;
  uSimSoftBody::LOCAL_PRIMITIVE_INFO *mpRebuildLocalPrimInfo;
  u32 mRebuildJointNum;
  __attribute__((aligned(8))) MtMatrix mRebuildPrevMat;
  u32 mOldJointNum;
  bool mUseLOD;
  bool mUse16bit;
  bool mUse8Weight;
  u32 mCurrLOD;
  u32 mPrevLodIdx;
  f32 mWorldCoeffTrans;
  f32 mWorldCoeffRot;
  s32 mBaseJointNo;
  u32 mRelaxationIterations;
  u32 mInitOk;
  MtVector4 *mpFixedOrgX;
  bool mIsDeforming;
  __attribute__((aligned(16))) MtVector3 mWindData;
  MtMatrix mApproxScrPj;
  MtVector3 mApproxScrPos;
  MtVector3 mApproxScrTgt;
  MtVector3 mApproxScrUp;
  MtVector3 mApproxScrExtent;
  u32 mBuildState;
};

struct __attribute__((aligned(4))) rDeformWeightMap::HEADER
{
  u32 magic;
  u8 version;
};

struct __cppobj rDeformWeightMap : cResource
{
  rDeformWeightMap::LOD *mpLOD;
  nDraw::VertexBuffer *mpQuadVB;
  u32 mNumLOD;
  u32 *mpVertexBase;
  u32 mVertexBaseNum;
  u32 mSoftBodyVBstride;
  s32 *mpIsSimPerPrim;
  u32 *mpReductionVertexBase;
  u32 mPrimNum;
  rDeformWeightMap::HEADER mHeader;
  bool mGrassWind;
  bool mDetailedWind;
  bool mPseudoWind;
  f32 mWindScalePoint;
  f32 mWindScaleDirection;
  bool mNCollision;
  f32 mNCGlobalWeight;
  bool mImageSpaceCollision;
  bool mApproxScrCollision;
  bool mScrCollision;
  u32 mSbcType;
  u32 mSbcFilter;
  bool mColliderCollision;
  u32 mColliderType;
  u32 mColliderFilter;
  f32 mVtxColSize;
  f32 mAvoidZFight;
  bool mResetRestart;
  bool mSimCulling;
  f32 mAlpha;
  u32 mMaxIterate;
  __attribute__((aligned(16))) MtVector3 mGravity;
  f32 mWeightOffset;
  f32 mWorldCoeffTrans;
  f32 mWorldCoeffRot;
  s32 mBaseJointNo;
  u32 mWindGroupMask;
  f32 mSoundThreashold;
  bool mLocalOnly;
};

struct __cppobj MtTypedArray<rSoundPhysicsSoftBody::cSoundPhysicsRequestData> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) rSoundPhysicsSoftBody : cResource
{
  MtTypedArray<rSoundPhysicsSoftBody::cSoundPhysicsRequestData> mSoundPhysicsDataArray;
  s32 mIndexTable[64];
  u32 mIdConvTbl[64];
  f32 mMinDistance;
};

struct cSoundPhysicsSoftBody
{
  int (**_vptr$cSoundPhysicsSoftBody)(void);
  rSoundPhysicsSoftBody *mpRes;
};

struct uSimSoftBody::LOCAL_PRIMITIVE_INFO
{
  bool mIsCpuSkinning;
  u32 mVertexBase;
};

struct uSimSoftBody::LOD
{
  u32 mInitOk;
  u32 mSwapPrev;
  u32 mSwapCurr;
  u32 mSwapNext;
  u32 mSwapCurrDraw;
  nDraw::Texture *mpTexSkin[2];
  nDraw::Texture *mpTexColN[2];
  nDraw::Texture *mpTexSwapX[2][4];
  nDraw::Texture *mpTexFixPrimVtx;
  nDraw::Texture *mpTexFixJoint;
  nDraw::Texture *mpTexFixWeight;
  nDraw::Texture *mpTexFixNormal;
};

struct uSimSoftBody::MtHalf4x2
{
  MtHalf4 v0;
  MtHalf4 v1;
};

struct rDeformWeightMap::LOD
{
  u32 mNumParticles;
  u32 mVtxTexH;
  u32 mWindBarycentricIdx;
  nDraw::Texture *mpTexInit;
  nDraw::Texture *mpTexBatchVtx[8];
  nDraw::Texture *mpTexFixPrimVtx;
  nDraw::Texture *mpTexFixJoint;
  nDraw::Texture *mpTexFixWeight;
  nDraw::Texture *mpTexFixNormal;
  nDraw::Texture *mpTexWindNormal;
  nDraw::Texture *mpTexPseudoWind;
  nDraw::VertexBuffer *mpSoftBodyVB;
  u32 *mVbByteIdx;
  u32 *mVbPrimIdx;
};

struct __cppobj uSimSoftBody::MyDTI : MtDTI
{
};

enum uSimSoftBody::SIMSTATE : __int32
{
  SIM_STOP = 0x0,
  SIM_RUN = 0x1,
  SIM_RESTART = 0x2,
};

enum uSimSoftBody::REBUILD_STATES : __int32
{
  REBUILD_NONE = 0x1,
  REBUILD_PROCESSING = 0x2,
  REBUILD_FINISH = 0x4,
  REBUIDL_FORCE_DWORD = 0xFFFFFFFF,
};

struct __cppobj rDeformWeightMap::MyDTI : MtDTI
{
};

struct __cppobj rSoundPhysicsSoftBody::MyDTI : MtDTI
{
};

struct rSoundPhysicsSoftBody::cSoundPhysicsRequestData::REQUEST_LIST
{
  u32 Id;
  f32 Distance;
  u32 ReqNo;
};

struct __cppobj rSoundPhysicsSoftBody::cSoundPhysicsRequestData : MtObject
{
  rSoundPhysicsSoftBody::cSoundPhysicsRequestData::REQUEST_LIST mData;
  rSoundRequest *mpSoundRequest;
};

struct __cppobj rSoundPhysicsSoftBody::cSoundPhysicsRequestData::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uSkyFog : uFog
{
  uSky *mpSkyUnit;
};

struct uSky::SKY_CBUFFER
{
  MtFloat3 mRayleighScatteringK;
  f32 mAtmosphereHeight;
  MtFloat3 mRayleighScatteringPhaseK;
  f32 mAtmosphereAverageDensityHeight;
  MtFloat3 mMieScatteringK;
  f32 mAerosolHeight;
  MtFloat3 mMieScatteringPhaseK;
  f32 mAerosolAverageDensityHeight;
  MtFloat3 mRayleighSecondaryScatteringK;
  f32 mEarthRadius;
  MtFloat3 mMieSecondaryScatteringK;
  f32 mOpticalDepthMapSize;
  MtFloat3 mSunColor;
  f32 mStarrySkyIntensity;
  MtFloat3 mSunDirection;
  f32 mStarrySkyBlendFactor;
  MtFloat2 mScatterMapSize;
  MtFloat2 mEccentricity;
  MtFloat2 mCloudEccentricity;
  f32 mCloudHeightMax;
  f32 mCloudHeightMin;
  f32 mCloudScatteringK;
  f32 mCloudScatteringPhaseK;
  f32 mCloudSecondaryScatteringK;
  f32 mHeightOffset;
};

struct __attribute__((aligned(16))) uSky::SKYFOG_CBUFFER
{
  MtFloat3 mSunColor;
  f32 padding0;
  MtFloat3 mSunDirection;
  f32 padding1;
  MtFloat3 mCombinedScatteringK;
  f32 padding2;
  MtFloat3 mInverseCombinedScatteringK;
  f32 padding3;
  MtFloat3 mRayleighScatteringPhaseK;
  f32 padding4;
  MtFloat3 mMieScatteringPhaseK;
  f32 padding5;
  MtFloat2 mEccentricity;
};

struct __cppobj uSky : cUnit
{
  uSky::SKY_CBUFFER mConstantBuffer[2];
  uSky::SKYFOG_CBUFFER mFogConstantBuffer[2];
  rSky *mpResource;
  nDraw::Texture *mpRayleighDepthMap;
  nDraw::Texture *mpMieDepthMap;
  nDraw::Texture *mpRayleighScatterMap;
  nDraw::Texture *mpMieScatterMap;
  nDraw::Texture *mpCloudScatterMap;
  nDraw::Texture *mpCloudScatterTempMap;
  nDraw::VertexBuffer *mpVertex;
  nDraw::IndexBuffer *mpIndex;
  bool mUpdateMap;
  __attribute__((aligned(8))) MtMatrix mRotMat;
  MtVector3 mSunDirection;
  MtMatrix mSunRotMat;
  MtVector3 mAmbientColor;
  MtVector3 mMieScattering;
  f32 mMieDensity;
  f32 mEccentricity;
  f32 mCloudScattering;
  f32 mCloudEccentricity;
  f32 mCloudiness;
  f32 mCloudThickness;
  f32 mCloudHeight;
  f32 mHeightOffset;
  MtVector3 mRayleighScatteringK;
  MtVector3 mMieScatteringK;
  f32 mCloudScatteringK;
  f32 mLastEarthRadius;
  f32 mLastAtmosphereHeight;
  f32 mLastAtmosphereAverageDensityHeight;
  f32 mLastAerosolHeight;
  f32 mLastAerosolAverageDensityHeight;
  u32 mLoopCount;
  u32 mPreComputeLoopCount;
  u32 mLightLine;
  u32 mFogLine;
  u32 mNorthAxis;
  u32 mTime;
  bool mUseFog;
  uSkyFog *mpFogUnit;
  u32 mFogUnitLine;
  __attribute__((aligned(16))) MtVector3 mFogSunColorScale;
  f32 mFogRayleighScale;
  f32 mFogMieScale;
  u32 mConstantBufferFlag;
  u32 mSubScenePriority;
  u32 mStarRandomSeed;
  u32 mStarNum;
  nDraw::VertexBuffer *mpStarVertexBuffer;
  nDraw::IndexBuffer *mpStarIndexBuffer;
  rTexture *mpStarTexture;
  f32 mStarSize;
  f32 mStarIntensity;
  rStarCatalog *mpStarCatalog;
  nDraw::Texture *mpStarrySkyColorTexture;
  f32 mStarrySkyIntensity;
  f32 mTwinkleAmplitude;
  bool mMoonEnable;
  __attribute__((aligned(16))) MtVector3 mMoonDirection;
  MtVector3 mMoonColor;
  MtMatrix mMoonRotMat;
  u32 mDivX;
  u32 mDivY;
  bool mCorrectHorizon;
};

struct __cppobj rSky : cResource
{
  MtVector3 mSunColor;
  MtVector3 mStarryAmbientColor;
  MtVector3 mRamda;
  f32 mRayleighScatteringBase;
  f32 mObliquity;
  u32 mSpinDirection;
  u32 mEclipticLongitude;
  f32 mLatitude;
  f32 mSunMultiplier;
  f32 mEarthRadius;
  f32 mAtmosphereHeight;
  f32 mAtmosphereAverageDensityHeight;
  f32 mAerosolHeight;
  f32 mAerosolAverageDensityHeight;
  f32 mSecondaryScattering;
  rTexture *mpSunTexture;
  f32 mSunBodySize;
  f32 mSunRadius;
  f32 mSunDistance;
  __attribute__((aligned(16))) MtVector3 mStarrySkyColor[4];
  f32 mStarrySkyColorT1;
  f32 mStarrySkyColorT2;
  f32 mMoonAge;
  f32 mMoonFluctuationAmplitude;
  f32 mMoonFluctuationPhase;
  f32 mMoonBodySize;
  f32 mMoonRadius;
  f32 mMoonDistance;
  f32 mMoonMultiplier;
  rTexture *mpMoonTexture;
  MtVector3 mMoonColor;
  f32 mEarthShine;
};

struct __cppobj rStarCatalog : cResource
{
  u32 mStarNum;
  rStarCatalog::StarData *mpStarCatalog;
};

struct rStarCatalog::StarData
{
  f32 mRightAscension;
  f32 mDeclination;
  f32 mTemperature;
  f32 mIntensity;
};

struct __cppobj uSkyFog::MyDTI : MtDTI
{
};

enum nDraw::TSky : __int32
{
  TSky_PASS0 = 0x0,
  TSky_PASS1 = 0x1,
  TSky_SunBody = 0x2,
  TSky_MoonBody = 0x3,
  TSky_Star = 0x4,
  TSky_StarrySkyColor = 0x5,
};

struct __cppobj uSky::MyDTI : MtDTI
{
};

enum uSky::NORTH_AXIS : __int32
{
  NA_PLUS_Z = 0x0,
  NA_MINUS_Z = 0x1,
  NA_PLUS_X = 0x2,
  NA_MINUS_X = 0x3,
};

struct uSky::StarVertex
{
  MtFloat3 pos;
  MtFloat3 color;
  MtFloat2 offset;
};

struct __cppobj rSky::MyDTI : MtDTI
{
};

struct __cppobj rStarCatalog::MyDTI : MtDTI
{
};

struct uSky::drawSun::VERTEX
{
  MtFloat3 pos;
  MtFloat2 uv;
};

struct uSky::drawMoon::VERTEX
{
  MtFloat3 pos;
  MtFloat2 uv;
};

struct __cppobj __attribute__((aligned(8))) uSoftBody : uModel
{
  uSimSoftBody *mpSimSoftBody;
  rDeformWeightMap *mpDWM;
  MtVector3 mBlowSpPos;
  f32 mBlowSpRad;
  bool mColMode;
  bool mColTest;
  f32 mMaxForce;
};

struct __cppobj uSoftBody::MyDTI : MtDTI
{
};

struct __cppobj cSwing : MtObject
{
  u32 mWindMask;
  u32 mWindGroup;
  f32 mFrequencyFactor;
  f32 mWeight;
};

struct __cppobj cSwingModel : cSwing
{
  f32 mShadowDepthBias;
  rSwingModel *mpSwing;
  rSwingModel *mpAfterSwing;
  rTexture *mpDepthBiasTexture;
};

struct __cppobj uSwingModel : uBaseModel:36032
{
  cSwingModel mSwing;
};

struct __cppobj __attribute__((aligned(8))) rSwingModel : cResource
{
  rSwingModel::PRIMITIVE_QUANT_INFO *mpPrimQuantInfo;
  nDraw::VertexBuffer *mpVertexBuffer;
  bool mHighPrecisionMode;
  bool mAdjustPosition;
  bool mAdjustNormalTangent;
  bool mUseWorldPosition;
  u32 mSwingMode;
  f32 mFrequencyFactor;
};

struct rSwingModel::PRIMITIVE_QUANT_INFO
{
  MtVector3 quant_scale;
  u32 vertex_base;
  __attribute__((aligned(16))) MtVector3 quant_offset;
  unsigned __int32 vertex_num : 16;
  unsigned __int32 vertex_stride : 8;
  unsigned __int32 no_wind : 1;
  unsigned __int32 billboard_flag : 1;
  unsigned __int32 billboard_rotate : 1;
  unsigned __int32 billboard_fix_axis : 1;
  unsigned __int32 reserved : 3;
};

struct __cppobj uSwingModel::MyDTI : MtDTI
{
};

struct __cppobj cSwingModel::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) cSwingModel::SWING_CONTEXT::VERTEX_STATE
{
  nDraw::VertexBuffer *p_vb;
  const rSwingModel::PRIMITIVE_QUANT_INFO *p_quant;
  const rSwingModel::PRIMITIVE_QUANT_INFO *p_current_quant;
  u32 current_base;
  u32 current_stride;
  bool use_high_precision;
};

struct cSwingModel::SWING_CONTEXT
{
  cSwingModel::SWING_CONTEXT::VERTEX_STATE state[2];
  nDraw::Texture *p_depth_bias_texture;
};

struct __cppobj cSwing::MyDTI : MtDTI
{
};

struct __cppobj rSwingModel::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uSwingJointModel : uModel
{
  cSwingModel mSwing;
};

struct __cppobj uSwingJointModel::MyDTI : MtDTI
{
};

struct __cppobj uTextureBlend : cUnit
{
  rRenderTargetTexture *mpDestTex;
  rTexture *mpSrcTex0;
  rTexture *mpSrcTex1;
  u32 mBlendMode;
  f32 mBlendFactor;
};

struct __cppobj uTextureBlend::MyDTI : MtDTI
{
};

struct uTextureBlend::CUBIC_VERTEX
{
  f32 x;
  f32 y;
  f32 tx;
  f32 ty;
  f32 tz;
};

enum uTextureBlend::BLEND_MODE : __int32
{
  RGBA = 0x0,
  RGBI = 0x1,
  RGBN = 0x2,
};

enum nDraw::TTextureBlend : __int32
{
  TTextureBlend_Blend2D = 0x0,
  TTextureBlend_BlendCube = 0x1,
};

struct uTextureBlend::draw::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
  MtFloat3 view;
};

struct __cppobj uVtxDisplacementCtrl : cUnit
{
  rRenderTargetTexture *mpRTTexture;
  nDraw::Texture *mpCPUTexture[2];
  MtHermiteCurve mCurve;
  MtHermiteCurve mCurve2;
  MtString mPath;
};

struct __cppobj uVtxDisplacementCtrl::MyDTI : MtDTI
{
};

struct __cppobj uWater : cUnit
{
  rModel *mpModel;
  rTexture *mpDetailMap;
  rTexture *mpDetailMap2;
  rTexture *mpEnvMap;
  rTexture *mpCausticsTexture;
  rTexture *mpRippleAnimationTexture;
  rTexture *mpBubbleTexture;
  rTexture *mpBubbleTexture2;
  rTexture *mpBubbleMaskTexture;
  nDraw::Texture *mpWavePosition;
  nDraw::Texture *mpWaveNormal;
  nDraw::Texture *mpReflectionMap;
  nDraw::Texture *mpRefractionMap;
  nDraw::Texture *mpRippleMap;
  nDraw::Texture *mpRippleHeightMap;
  nDraw::Texture *mpRippleTempMap;
  nDraw::Texture *mpShadowMap;
  nDraw::Texture *mpShadowDepthMap;
  nDraw::Texture *mpTempShadowMap;
  nDraw::Texture *mpTempCascadeShadowMap;
  nDraw::Texture *mpTempShadowCopyMap;
  rEffectAnim *mpTestAnimation;
  nDraw::Texture *mpFilterTempMap;
  nDraw::Texture *mpDepthStencil;
  nDraw::Texture *mpWaterDepth;
  __attribute__((aligned(16))) MtMatrix mWmat;
  MtVector3 mPos;
  MtVector3 mAngle;
  MtVector3 mScale;
  MtAABB mBoundingBox;
  MtVector4 mWaveDir;
  MtVector4 mWaveHeight;
  MtVector4 mWaveSpeed;
  MtVector4 mWavePhase;
  MtVector4 mWaveScale;
  MtFloat2 mDetailSpeed;
  MtFloat2 mDetailPhase;
  f32 mDetailHeight;
  f32 mDetailScale;
  MtFloat2 mDetailSpeed2;
  MtFloat2 mDetailPhase2;
  f32 mDetailHeight2;
  f32 mDetailScale2;
  MtVector3 mRippleCenter;
  u32 mDetailCoordinate;
  f32 mRippleHeight;
  f32 mRippleDetailScale;
  f32 mRippleScale;
  u32 mBubbleMode;
  u32 mBubbleCoordinate;
  f32 mBubbleStart;
  f32 mBubbleEnd;
  MtFloat2 mBubbleScale;
  MtFloat2 mBubblePhase;
  MtVector4 mBubbleOffset;
  MtVector4 mBubbleOffsetSpeed;
  MtFloat2 mBubbleMaskThresholdParam;
  f32 mBubbleMaskScale;
  f32 mBubbleMaskOffset;
  MtVector3 mBubbleDir;
  f32 mBubbleMaskThreshold;
  f32 mBubbleMaskBlendFactor;
  f32 mReflectionClipOffset;
  f32 mRefractionClipOffset;
  u32 mPlace;
  bool mAutoFog;
  bool mDynamicReflectionEnable;
  bool mDynamicRefractionEnable;
  bool mRippleEnable;
  bool mBubbleEnable;
  bool mShadowReceiveEnable;
  bool mOceanWaveEnable;
  bool mWaterMaskEnable;
  f32 mOceanWaveFactor;
  bool mBubbleMapEnable;
  bool mVolumeBlendEnable;
  u32 mResolution;
  bool mBlurEnable;
  f32 mBlurDispersion;
  u32 mRippleMapSize;
  MtColor mReflectionColor;
  MtColor mWaterFogColor;
  f32 mWaterFogStart;
  f32 mWaterFogEnd;
  MtColor mAirFogColor;
  f32 mAirFogStart;
  f32 mAirFogEnd;
  MtColor mShadowFogColor;
  f32 mFluctuationStart;
  f32 mFluctuationEnd;
  f32 mFluctuationBase;
  f32 mAboveFresnelExp;
  f32 mAboveFresnelBias;
  f32 mAboveFresnelFactor;
  f32 mBelowFresnelExp;
  f32 mBelowFresnelBias;
  f32 mBelowFresnelFactor;
  f32 mReflectionScale;
  f32 mRefractionScale;
  bool mAboveCausticsEnable;
  __attribute__((aligned(16))) MtVector4 mAboveCausticsColor;
  MtVector3 mAboveCausticsDir;
  f32 mAboveCausticsRange;
  f32 mAboveCausticsScale;
  f32 mAboveCausticsIncStart;
  f32 mAboveCausticsIncEnd;
  f32 mAboveCausticsDecStart;
  f32 mAboveCausticsDecEnd;
  bool mBelowCausticsEnable;
  __attribute__((aligned(8))) MtVector4 mBelowCausticsColor;
  MtVector3 mBelowCausticsDir;
  f32 mBelowCausticsRange;
  f32 mBelowCausticsScale;
  f32 mBelowCausticsIncStart;
  f32 mBelowCausticsIncEnd;
  f32 mBelowCausticsDecStart;
  f32 mBelowCausticsDecEnd;
  bool mLightingEnable;
  u32 mMaxLightNum;
  u32 mLightGroup;
  f32 mLightSpecularShininess;
  u32 mFilterPriority;
  u32 mRippleNum;
  u32 mRippleProjectionMode;
  uWater::Animation *mpRippleList;
  void *mpRippleVertexBuffer;
  u16 *mpRippleIndexBuffer;
  nDraw::VertexBuffer *mpMeshVertex;
  nDraw::IndexBuffer *mpMeshIndex;
  u32 mMeshDivX;
  u32 mMeshDivZ;
  bool mWindEnable;
  cSwing mSwing;
  u32 mMaxWindNum;
  bool mInitialized;
  unsigned __int32 mWaveSurfaceSwap : 1;
  unsigned __int32 mReserved : 31;
  nDraw::Texture *mpWaveSurface[2];
};

struct uWater::Animation
{
  cEffectAnim mAnim;
  MtFloat2 mPos;
  MtFloat2 mVelocity;
  MtFloat3 mSize;
  MtFloat3 mScaling;
  f32 mPatternSpeed;
  rEffectAnim *mpAnimation;
};

struct __cppobj uWater::MyDTI : MtDTI
{
};

struct uWater::Animation::Initializer
{
  rEffectAnim *mpAnimation;
  u32 mSequenceNumber;
  f32 mPatternSpeed;
  MtVector3 mPos;
  MtVector3 mSize;
  MtVector3 mVelocity;
  MtVector3 mScaling;
};

enum uWater::PLACEMENT : __int32
{
  ABOVE = 0x0,
  BELOW = 0x1,
};

struct __attribute__((aligned(16))) uWater::WAVE_PARAM
{
  MtVector4 winds[8];
  MtVector4 params[8];
  u32 counter;
  f32 wave_factor;
};

enum uWater::DETAIL_COORDINATE : __int32
{
  DC_WORLD = 0x0,
  DC_UV = 0x1,
};

enum uWater::BUBBLE_MODE : __int32
{
  BM_DEPTH = 0x0,
  BM_HEIGHT = 0x1,
  BM_NORMAL = 0x2,
};

enum uWater::BUBBLE_COORDINATE : __int32
{
  BC_WORLD = 0x0,
  BC_UV = 0x1,
};

enum uWater::RESOLUTION : __int32
{
  LOW = 0x0,
  NORMAL_0 = 0x1,
  HIGH = 0x2,
};

enum uWater::RIPPLE_PROJECTION_MODE : __int32
{
  RP_XZ_PLANE = 0x0,
  RP_FRUSTUM = 0x1,
};

struct uWater::RippleVertexDecl
{
  f32 x;
  f32 y;
  f32 z;
  f32 h;
  f32 u;
  f32 v;
};

enum nDraw::TWater : __int32
{
  TWater_Default = 0x0,
  TWater_Mask = 0x1,
  TWater_ShadowMap = 0x2,
  TWater_Ripple = 0x3,
  TWater_WorldPositionBubble = 0x4,
};

enum rEffectAnim::ANIM_FLAG : __int32
{
  ANIM_FLAG_MOVE = 0x1,
  ANIM_FLAG_LOOP = 0x2,
  ANIM_FLAG_REVERSE = 0x4,
  ANIM_FLAG_FINISH = 0x8,
  ANIM_FLAG_BASE = 0xF,
  ANIM_FLAG_REVERSE_RAND = 0x10,
  ANIM_FLAG_HFLIP = 0x100,
  ANIM_FLAG_VFLIP = 0x200,
  ANIM_FLAG_HFLIP_RAND = 0x400,
  ANIM_FLAG_VFLIP_RAND = 0x800,
  ANIM_FLAG_ROT = 0x1000,
  ANIM_FLAG_NO_INP = 0x2000,
  ANIM_FLAG_EXTEND = 0x3F10,
  ANIM_FLAG_MODEL_EXCL = 0x1F10,
  ANIM_FLAG_KEYFRAME = 0x8000,
};

struct uWater::createMesh::vertex_data
{
  MtFloat3 pos;
  s16 u;
  s16 v;
};

struct uWater::draw::VERTEX
{
  MtFloat3 pos;
  MtFloat4 color;
};

struct uWater::drawBlur::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
  MtColor col;
};

struct __cppobj __attribute__((aligned(16))) uWeather : cUnit
{
  uSky mSkyUnit;
  uCloudControl mCloudUnit[4];
  uInfiniteLight *mpInfiniteLight;
  uHemiSphereLight *mpHemiSphereLight;
  f32 mInfiniteLightScale;
  f32 mHemiSphereLightScale;
  f32 mCloudSunColorScale;
  f32 mCloudAmbientColorScale;
  u32 mLightUnitLine;
  bool mStandBy;
};

struct __cppobj uWeather::MyDTI : MtDTI
{
};

enum uWind::WindGenerator::$4C3E26176B7A528ECBE500256D0899BE : __int32
{
  WGEN_TYPE_PLANE = 0x0,
  WGEN_TYPE_P_SPHERE = 0x1,
};

enum uWind::$F0067F2090EE3BD85B5420FF942DD99C : __int32
{
  WIND_GENERATOR_MAX = 0x4,
};

struct __cppobj __attribute__((aligned(16))) uShallowWind : uWind
{
  f32 *mpSurfaceHeight;
  f32 *mpGroundHeight;
  f32 *mpWaterDepth;
  f32 *mpAdvectX;
  f32 *mpAdvectZ;
  f32 *mpWaterDepthDash;
  f32 *mpAdvectXDash;
  f32 *mpAdvectZDash;
  f32 mStableHeight;
  f32 mTimeStep;
  f32 mGravity;
  f32 mDxInv;
  f32 mGlobalDX;
  f32 mGlobalDZ;
};

struct __cppobj uShallowWind::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uEffect:4640 : uBaseEffect
{
  MtVector3 mParticle3DScale;
  f32 mParticleScale;
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mLifeFrame : 16;
  unsigned __int32 mWaitFrame : 16;
  unsigned __int32 mLightPriority : 8;
  unsigned __int32 mChildUnitLevel : 8;
  f32 mGravityCoef;
  u32 mDrawBuffSize;
  s32 mSetNo;
  u32 mGroupFlag;
  u32 mMaterialFlag;
  uEffect *mpParentGenerator;
  u32 mParentGeneratorId;
  unsigned __int32 mChildUnitMoveNum : 16;
  unsigned __int32 mChildLoopFrame : 16;
  unsigned __int32 mChildLifeFrame : 16;
  unsigned __int32 mChildWaitFrame : 16;
  unsigned __int32 mGeneratorNum : 16;
  unsigned __int32 mGeneratorMoveNum : 16;
  unsigned __int32 mJointNum : 16;
  unsigned __int32 mJointMoveNum : 16;
  u32 mUnitNo;
  u32 mGeneratorBuffSize;
  _BYTE gap214[4];
  cParticleManager *mpManager;
  cEffectJoint *mJoint;
  u8 *mpChildUnitBuff;
  f32 mWaitFrameCoef;
  f32 mBoundaryRadius;
  unsigned __int32 mChildSetRate : 12;
  unsigned __int32 mSerialEffectType : 4;
  unsigned __int32 mSerialEffectWaitTimer : 16;
  s32 mDrawDepthBias;
  unsigned __int32 mLoopCtr : 16;
  unsigned __int32 mRandCtr : 16;
};

struct __cppobj __attribute__((aligned(16))) uCameraEffect : uEffect:4640
{
  bool mRepeatFlag;
  bool mYAngleFlag;
};

struct __cppobj uCameraEffect::MyDTI : MtDTI
{
};

enum uEffect::STATUS : __int32
{
  STATUS_RESERVED_0 = 0x1000,
  STATUS_RESERVED_1 = 0x2000,
  STATUS_JOINT_FIX = 0x4000,
  STATUS_JOINT_UPDATE = 0x8000,
  STATUS_CHAIN_RESET = 0x10000,
  STATUS_UG_INVALID = 0x20000,
  STATUS_CONST_UPDATE = 0x40000,
  STATUS_UNIT_GENERATOR = 0x80000,
  STATUS_CHILD_UNIT_INIT = 0x100000,
  STATUS_CHILD_UNIT_MOVE = 0x200000,
  STATUS_SE_STOP = 0x400000,
  STATUS_PARENT_SYMMETRY = 0x800000,
  STATUS_CLEAR_MOVE_AFTER = 0x18000,
  STATUS_CLEAR_RESOURCE_SET = 0x4000,
};

enum uBaseEffect::BASE_STATUS : __int32
{
  STATUS_INIT = 0x1,
  STATUS_SLEEP = 0x2,
  STATUS_SCHEDULER = 0x4,
  STATUS_EVENT = 0x8,
  STATUS_RESTART = 0x10,
  STATUS_FINISH = 0x20,
  STATUS_TIMER_CONTROL = 0x40,
  STATUS_TEX_OMIT = 0x80,
  STATUS_VB_INVALID = 0x100,
  STATUS_NO_FOG = 0x200,
  STATUS_BASE_RESERVED_1 = 0x400,
  STATUS_BASE_RESERVED_2 = 0x800,
  STATUS_SUBCLASS_RESERVED = 0xFFF000,
  STATUS_NO_RESOURCE = 0x1000000,
  STATUS_MALLOC_ERROR = 0x2000000,
  STATUS_IMPROPER_RESOURCE = 0x4000000,
  STATUS_GPU_MALLOC_ERROR = 0x8000000,
  STATUS_DRAW_BUFFER_OVER = 0x10000000,
  STATUS_ERROR = 0x1F000000,
};

enum cParticleManager::MAN_STATUS : __int32
{
  MAN_STATUS_MOVE = 0x1,
  MAN_STATUS_DRAW = 0x2,
  MAN_STATUS_PARTICLE_MOVE = 0x4,
  MAN_STATUS_REQUEST_VIB = 0x10,
  MAN_STATUS_REQUEST_VIB_STOP = 0x20,
  MAN_STATUS_REQUEST_SE = 0x40,
  MAN_STATUS_KEYFRAME_RESERVED01 = 0x100,
  MAN_STATUS_KEYFRAME_SET_NUM = 0x200,
  MAN_STATUS_KEYFRAME_RANGE = 0x400,
  MAN_STATUS_KEYFRAME_RESERVED8 = 0x800,
  MAN_STATUS_KEYFRAME_RESERVE10 = 0x1000,
  MAN_STATUS_KEYFRAME_SHADE_LIGHT_OFS = 0x2000,
  MAN_STATUS_KEYFRAME_SHADE_LIGHT_COLOR = 0x4000,
  MAN_STATUS_KEYFRAME_SHADE_LIGHT_RANGE = 0x8000,
  MAN_STATUS_KEYFRAME = 0xFF00,
  MAN_STATUS_SETUP = 0x10000,
  MAN_STATUS_SETUP_WORLD_MATRIX = 0x20000,
  MAN_STATUS_VANISH = 0x20000000,
  MAN_STATUS_CHILD_KEEP_HOLD_OFF = 0x40000000,
  MAN_STATUS_FINISH = 0x80000000,
  MAN_STATUS_ACTIVE = 0x7,
  MAN_STATUS_REQUEST = 0x70,
  MAN_STATUS_CLEAR_AFTER = 0x60000000,
  MAN_STATUS_KEYFRAME_SHADE_LIGHT = 0xE000,
};

enum rEffectList::SERIAL_EFC_TYPE : __int32
{
  SERIAL_EFC_TYPE_NONE = 0x0,
  SERIAL_EFC_TYPE_FINISH = 0x1,
  SERIAL_EFC_TYPE_KEEP_HOLD_OFF = 0x2,
  SERIAL_EFC_TYPE_WAIT_FRAME = 0x3,
  SERIAL_EFC_TYPE_NUM = 0x4,
};

enum rEffectList::PARTICLE_TYPE : __int32
{
  PARTICLE_TYPE_BILLBOARD = 0x0,
  PARTICLE_TYPE_POLYLINE = 0x1,
  PARTICLE_TYPE_POLYGON = 0x2,
  PARTICLE_TYPE_TEXLINE = 0x3,
  PARTICLE_TYPE_LINE = 0x4,
  PARTICLE_TYPE_MODEL = 0x5,
  PARTICLE_TYPE_PRIM_MODEL = 0x6,
  PARTICLE_TYPE_LENS_FLARE = 0x7,
  PARTICLE_TYPE_MASS_BILLBOARD = 0x8,
  PARTICLE_TYPE_FILTER = 0x9,
  PARTICLE_TYPE_LIGHT = 0xA,
  PARTICLE_TYPE_HIT = 0xB,
  PARTICLE_TYPE_CLOTH_POLYLINE = 0xC,
  PARTICLE_TYPE_CLOTH_TEXLINE = 0xD,
  PARTICLE_TYPE_CLOTH_LINE = 0xE,
  PARTICLE_TYPE_POLYGON_STRIP = 0xF,
  PARTICLE_TYPE_CUSTOM = 0x10,
  PARTICLE_TYPE_CLOTH_POLYGON = 0x11,
  PARTICLE_TYPE_ADHESION = 0x12,
  PARTICLE_TYPE_BILLBOARD_STRIP = 0x13,
  PARTICLE_TYPE_SIZE_BILLBOARD = 0x14,
  PARTICLE_TYPE_LIGHT_SHAFT = 0x15,
  PARTICLE_TYPE_POINT = 0x16,
  PARTICLE_TYPE_AXIS_POLYGON = 0x17,
  PARTICLE_TYPE_FORCE = 0x18,
  PARTICLE_TYPE_NODE_BILLBOARD = 0x19,
  PARTICLE_TYPE_TRAIL = 0x1A,
  PARTICLE_TYPE_NUM = 0x1B,
};

enum rEffectList::RELATION_TYPE : __int32
{
  RELATION_TYPE_FULL = 0x0,
  RELATION_TYPE_ROT = 0x1,
  RELATION_TYPE_POS = 0x2,
  RELATION_TYPE_NONE = 0x3,
  RELATION_TYPE_FULL_NO_WMAT_SCALE = 0x4,
  RELATION_TYPE_ROT_NO_WMAT_SCALE = 0x5,
  RELATION_TYPE_POS_NO_WMAT_SCALE = 0x6,
  RELATION_TYPE_INVALID = 0x7,
  RELATION_TYPE_NUM = 0x8,
};

enum rEffectList::SE_OPTION_FLAG : __int32
{
  SE_OPTION_FLAG_FOLLOW_OFF = 0x1,
  SE_OPTION_FLAG_SYNCHRO_KEY_OFF = 0x2,
};

enum rEffectList::GENERATOR_TYPE : __int32
{
  GENERATOR_TYPE_NONE = 0x0,
  GENERATOR_TYPE_SINGLE = 0x1,
  GENERATOR_TYPE_LOOP = 0x2,
  GENERATOR_TYPE_NUM = 0x3,
};

enum rEffectList::UNIT_OPTION_FLAG : __int32
{
  UNIT_OPTION_FLAG_DRAW_VIEW = 0x1,
  UNIT_OPTION_FLAG_BOUNDARY_TYPE = 0x2,
  UNIT_OPTION_FLAG_BOUNDARY = 0x4,
  UNIT_OPTION_FLAG_JOINT_FIX = 0x8,
  UNIT_OPTION_FLAG_COLOR_CONTROL = 0x10,
  UNIT_OPTION_FLAG_BOUNDARY_LOCAL_SCALE = 0x20,
  UNIT_OPTION_FLAG_PARAM_ENABLE = 0x3F,
};

enum rEffectList::SERIAL_EFC_OPTION_FLAG : __int32
{
  SERIAL_EFC_OPTION_FLAG_PARENT_CANCEL = 0x1,
};

typedef rEffectList::EFL_PARTICLE_CLOTH_POLYGON rEffectList::EFL_PARTICLE_CLOTH_POLYGON_0;

struct __cppobj rEffectList::EFL_PARTICLE_CLOTH_POLYGON : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 ClothPolygon041a1 : 4;
  unsigned __int32 ChainNum : 8;
  unsigned __int32 ChainVertexNum : 8;
  f32 ChainForceAttenuateRate;
  unsigned __int32 WaveFlag : 8;
  unsigned __int32 FoldInterval : 8;
  unsigned __int32 ClothPolygon081aa : 8;
  unsigned __int32 ClothPolygon081ab : 8;
  f32 RotAddCoef;
  MtRangeF ChainWaveForce;
  MtRangeF ChainWaveSpeed;
  MtRangeF VertexWaveForce;
  MtRangeF VertexWaveSpeed;
  MtRangeF FoldDist;
  u32 KeyframeRotParamOffset;
  u32 KeyframeWidthParamOffset;
  MtRangeF Width;
  MtRangeF WidthAdd;
  rEffectList::EFL_PARAM_CHAIN_0 ChainParam;
};

typedef rEffectList::EFL_PARTICLE_POLYGON rEffectList::EFL_PARTICLE_POLYGON_0;

struct __cppobj rEffectList::EFL_PARTICLE_POLYGON : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 RotResetFlag : 4;
  unsigned __int32 PolygonFixType : 4;
  unsigned __int32 PolygonBillboardType : 4;
  unsigned __int32 PolygonDivideNum : 4;
  unsigned __int32 PolygonBillboardOrder : 1;
  unsigned __int32 PolygonBillboardLookAt : 1;
  unsigned __int32 PPolygon021a3 : 2;
  f32 RotAddCoef;
  u32 TexScrollParamOffset;
  u32 KeyframeRotParamOffset;
  u32 KeyframeWidthParamOffset;
  u32 KeyframeHeightParamOffset;
  u32 PolygonDivideDist;
  u32 KeyframeModelScaleParamOffset;
  MtRangeF Width;
  MtRangeF Height;
  MtRangeF WidthAdd;
  MtRangeF HeightAdd;
  f32 DistortRate[4];
};

typedef rEffectList::EFL_PARAM_TEX_SCROLL rEffectList::EFL_PARAM_TEX_SCROLL_0;

typedef rEffectList::EFL_PARTICLE_TRAIL rEffectList::EFL_PARTICLE_TRAIL_0;

struct __cppobj rEffectList::EFL_PARTICLE_TRAIL : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  unsigned __int32 TrailMaxOfsNum : 16;
  unsigned __int32 TrailDivideNum : 4;
  unsigned __int32 TrailExtensionNum : 4;
  unsigned __int32 TrailVtxEnableFlag : 1;
  unsigned __int32 TrailVtxSizeStopFlag : 1;
  unsigned __int32 TrailVtxLifeStopFlag : 1;
  unsigned __int32 TrailFollowTailPosFlag : 1;
  unsigned __int32 PTrail04173 : 4;
  unsigned __int32 SamplingInterval : 16;
  unsigned __int32 TexScrollParamOffset : 16;
  u32 PTrail32178;
  u32 PTrail3217c;
  u32 PTrail32180;
  f32 TrailZigzagScale;
  MtRangeF PatRepeatCoef;
  MtRangeF TrailSize;
  MtRangeF TrailVtxSizeAdd;
  MtRangeU16 TrailVtxSizeWaitFrame;
  MtRangeU16 TrailVtxAppearFrame;
  MtRangeU16 TrailVtxKeepFrame;
  MtRangeU16 TrailVtxVanishFrame;
};

enum nEffect::EFC_AXIS_TYPE : __int32
{
  EFC_AXIS_TYPE_X_PLUS = 0x0,
  EFC_AXIS_TYPE_X_MINUS = 0x1,
  EFC_AXIS_TYPE_Y_PLUS = 0x2,
  EFC_AXIS_TYPE_Y_MINUS = 0x3,
  EFC_AXIS_TYPE_Z_PLUS = 0x4,
  EFC_AXIS_TYPE_Z_MINUS = 0x5,
  EFC_AXIS_TYPE_NONE = 0x6,
};

enum nEffect::ENTRY_TYPE : __int32
{
  ENTRY_TYPE_WORLD = 0x0,
  ENTRY_TYPE_SCREEN = 0x1,
  ENTRY_TYPE_REDUCTION = 0x2,
  ENTRY_TYPE_OVERLAP = 0x3,
  ENTRY_TYPE_ACCUMULATION = 0x4,
  ENTRY_TYPE_NONE = 0x5,
  ENTRY_TYPE_MIX = 0x6,
  ENTRY_TYPE_NUM = 0x7,
};

enum nEffect::EFC_VIEW : __int32
{
  EFC_VIEW_0 = 0x0,
  EFC_VIEW_1 = 0x1,
  EFC_VIEW_2 = 0x2,
  EFC_VIEW_3 = 0x3,
  EFC_VIEW_4 = 0x4,
  EFC_VIEW_5 = 0x5,
  EFC_VIEW_6 = 0x6,
  EFC_VIEW_7 = 0x7,
  EFC_VIEW_NUM = 0x8,
};

enum cEffectJoint::JNT_STATUS : __int32
{
  JNT_STATUS_MOVE = 0x1,
  JNT_STATUS_CONST = 0x2,
  JNT_STATUS_KEYFRAME_SCALE = 0x10,
  JNT_STATUS_KEYFRAME_OFS = 0x20,
  JNT_STATUS_KEYFRAME_ANGLE = 0x40,
  JNT_STATUS_KEYFRAME = 0xF0,
  JNT_STATUS_KEYFRAME_CONST = 0x70,
};

enum cEffectJoint::JNT_RNO_TBL : __int32
{
  JNT_RNO_INIT = 0x0,
  JNT_RNO_WAIT = 0x1,
  JNT_RNO_MOVE = 0x2,
};

enum cParticle::PTCL_FLAG : __int32
{
  PTCL_FLAG_KILL = 0x1,
  PTCL_FLAG_KEEP_HOLD_OFF = 0x2,
  PTCL_FLAG_STOP_ANIM = 0x4,
  PTCL_FLAG_STOP_ROT = 0x8,
  PTCL_FLAG_HIT = 0x10,
  PTCL_FLAG_BOUNCE = 0x20,
  PTCL_FLAG_UPDATE_LIFE = 0x40,
  PTCL_FLAG_CALC_DIR = 0x80,
  PTCL_FLAG_CALC_WORLD_DIR = 0x100,
  PTCL_FLAG_MOVE_ROT_LOCAL = 0x200,
  PTCL_FLAG_PATH_END = 0x400,
  PTCL_FLAG_CONST_UPDATE = 0x800,
  PTCL_FLAG_UPDATE_SIZE = 0x1000,
  PTCL_FLAG_ATTENUATE_ROT = 0x2000,
  PTCL_FLAG_DEPEND_DIR = 0x4000,
  PTCL_FLAG_RESERVED = 0x8000,
};

struct __cppobj __attribute__((aligned(16))) cHitParticle : cParticle:960
{
  f32 mHitRadius[2];
  f32 mSrcHitRadius;
  f32 mSrcHitRadiusAdd;
  f32 mSrcHitRadiusMax;
  u32 mHit3274;
  u32 mHit3278;
  u32 mHit327c;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) cParticleGenerator:4448 : cParticleManager
{
  cParticle *mpMoveTopParticle;
  cParticle *mpMoveBotParticle;
  cParticle *mpStockTopParticle;
  cParticle *mpStockBotParticle;
  u32 mParticleStatus;
  u32 mParticleLifeOffset;
  u32 mParticleMoveOffset;
  u32 mParticleCullingOffset;
  unsigned __int32 mParticleNum : 16;
  unsigned __int32 mParticleMoveNum : 16;
  unsigned __int32 mParticleSize : 16;
  unsigned __int32 mParticlePosSize : 16;
  unsigned __int32 mParticleLifeSize : 16;
  unsigned __int32 mParticleMoveSize : 16;
  unsigned __int32 mParticleCullingSize : 16;
  unsigned __int32 mParticleFlagBase : 16;
  unsigned __int32 mStripParentNo : 16;
  unsigned __int32 mSetTimer : 16;
  unsigned __int32 mRangeDivideNum : 16;
  unsigned __int32 mRangeType : 8;
  unsigned __int32 mRangeDirType : 8;
  unsigned __int32 mRangeDisperseType : 8;
  unsigned __int32 mLODType : 4;
  unsigned __int32 mAxisType : 4;
  unsigned __int32 mParticleRotOrder : 4;
  unsigned __int32 mParticleRotAxisType : 4;
  unsigned __int32 mParticleDirAxisType : 4;
  unsigned __int32 mGenerator043b : 4;
  unsigned __int32 mMoveRotOrder : 4;
  unsigned __int32 mMoveRotAxisType : 4;
  unsigned __int32 mCurDataIndex : 1;
  unsigned __int32 mOldDataIndex : 1;
  unsigned __int32 mSynchroUnitFlag : 1;
  unsigned __int32 mRotInitFlag : 1;
  unsigned __int32 mRotLocalFlag : 1;
  unsigned __int32 mModelScaleAfterFlag : 1;
  unsigned __int32 mPathInitFlag : 1;
  unsigned __int32 mPatRotFlag : 1;
  unsigned __int32 mVolumeBlendRate : 8;
  unsigned __int32 mVolumeBlendRateRange : 8;
  rEffectList::EFL_PARAM_COLL_0 *mpCollParam;
  u32 mPrimAttribute;
  f32 mParticleScaleBase;
  f32 mParticleScale;
  _BYTE gap134[12];
  MtMatrix mParticleScaleWmat;
  MtVector3 mParticle3DScale;
  MtVector3 mForceVec;
  MtVector3 mRangeScale;
  MtColor mColor[2];
  MtColor mPlaceColor[2];
  MtColor *mpOrgColor;
  MtColor *mpOrgPlaceColor;
  MtRangeF mIntensity;
  MtRangeF *mpOrgIntensity;
  unsigned __int32 mColorFlag : 8;
  unsigned __int32 mDecreaseWaitTimer : 8;
  unsigned __int32 mDecreaseModNum : 8;
  unsigned __int32 mSetNumCorrectFlag : 1;
  unsigned __int32 mEachFrameMode : 1;
  unsigned __int32 mClothChainFlag : 1;
  unsigned __int32 mLiteParticleFlag : 1;
  unsigned __int32 mSynchroUnitLimitFlag : 1;
  unsigned __int32 mGenerator03e7 : 3;
  u32 mSetParticleTotal;
  u32 mSetFrameTotal;
  f32 mSetFrameOfs;
  f32 mIntervalFrameOfs;
  unsigned __int32 mSetNumKeyframeRandom : 16;
  unsigned __int32 mLoopCtr : 16;
  f32 mSubPosDistCoef;
  _BYTE gap1FC[4];
  u8 *mpExtendedBuff;
  cEffectCulling *mpCulling;
  cEffectPath *mpPath;
  cEffectShadeLight *mpShadeLight;
  cClothVertex *mpClothVertex;
  bool mStencilTest;
};

struct __cppobj __attribute__((aligned(4))) cParticleGeneratorPolygon:4448 : cParticleGenerator:4448
{
};

struct __cppobj cParticleGeneratorAdhesion : cParticleGeneratorPolygon:4448
{
  u32 mAdhesionDivideMax;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorPolygon : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorAdhesion::MyDTI : MtDTI
{
};

struct __cppobj cParticleGeneratorPolygon::MyDTI : MtDTI
{
};

struct cPolygon::CLOTH_POLYGON_PARAM
{
  unsigned __int32 ChainNum : 8;
  unsigned __int32 VertexNum : 8;
  unsigned __int32 Offset : 16;
};

typedef cPolygon::CLOTH_POLYGON_PARAM cPolygon::CLOTH_POLYGON_PARAM_0;

struct cPolygon::ADHESION_PARAM
{
  unsigned __int32 InfoNum : 16;
  unsigned __int32 UpdateFlag : 8;
  unsigned __int32 Param0803 : 8;
};

typedef cPolygon::ADHESION_PARAM cPolygon::ADHESION_PARAM_0;

union cPolygon::$8094E8274D3F6D0CDE70EE625BBF56D7
{
  cPolygon::CLOTH_POLYGON_PARAM_0 mClothPolygonParam;
  cPolygon::ADHESION_PARAM_0 mAdhesionParam;
};

struct __cppobj cPolygon : cMatrixParticle
{
  cEffectAnim mAnim;
  f32 mWidth[2];
  f32 mHeight[2];
  MtColor mColor[2];
  f32 mPatNoRate[2];
  f32 mTangentCoef;
  unsigned __int32 mBinormalFlag : 8;
  unsigned __int32 mTangentFlag : 8;
  unsigned __int32 mTexScrollWorkOffset : 16;
  cPolygon::$8094E8274D3F6D0CDE70EE625BBF56D7 _anon_0;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mPolygon16ee : 16;
  MtColor mSrcColor;
  f32 mWidthAdd;
  f32 mHeightAdd;
  f32 mPatNoKeyframeRate;
};

struct __attribute__((aligned(4))) cClothPolygonDrawParam
{
  MtColor mColor;
  s32 mOtDepth;
  s32 mZofs;
  f32 mInpRate;
  s32 mIntInpRate;
  bool mLightingFlag;
};

struct __attribute__((aligned(8))) cPolygonDrawParam
{
  f32 mDistortRate[4];
  MtPoint mPatCenter;
  unsigned __int32 mBillboardType : 4;
  unsigned __int32 mFixType : 4;
  unsigned __int32 mDivideNum : 4;
  unsigned __int32 mDrawParam0421 : 4;
  unsigned __int32 mBillboardOrder : 1;
  unsigned __int32 mBillboardLookAt : 1;
  unsigned __int32 mDrawParam0622 : 6;
  unsigned __int32 mDrawParam0823 : 8;
  u32 mDivideDist;
  MtColor mColor;
};

struct __cppobj __attribute__((aligned(16))) uSynchroAdhesion : uAdhesion
{
  cSynchronization mSynchronization;
  cEffectTransparency mTransparencyParam;
  bool mLimitFlag;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorTrail : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorTrail::MyDTI : MtDTI
{
};

struct __cppobj cTrail : cParticle:960
{
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  f32 mSize[2];
  MtColor mColor[2];
  MtColor mSrcColor;
  f32 mPatNoKeyframeRate;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mTexScrollWorkOffset : 16;
  unsigned __int32 mTrailMaxOfsNum : 16;
  unsigned __int32 mTrailSamplingUpdate : 1;
  unsigned __int32 mTrailKeepHold : 1;
  unsigned __int32 mTrailVtxEnable : 1;
  unsigned __int32 mTrailVtxSizeStop : 1;
  unsigned __int32 mTrailVtxLifeStop : 1;
  unsigned __int32 mTrailFollowTailPos : 1;
  unsigned __int32 mTrail0296 : 2;
  unsigned __int32 mTrail0897 : 8;
  u32 mTrail3298;
  u32 mTrail329c;
  unsigned __int32 mSamplingInterval : 16;
  unsigned __int32 mSamplingTimer : 16;
  unsigned __int32 mSizeWaitFrame : 16;
  unsigned __int32 mAppearFrame : 16;
  unsigned __int32 mKeepFrame : 16;
  unsigned __int32 mVanishFrame : 16;
  f32 mVanishLength;
  f32 mRepeatCoef;
  f32 mSrcSize;
  f32 mSrcVtxSizeAdd;
  f32 mZigzagScale;
  __attribute__((aligned(16))) MtVector3 mZigzagVector;
};

struct __cppobj uMultiFilter::MyDTI : MtDTI
{
};

struct __cppobj uProjectionEffect : uEffect
{
  __attribute__((aligned(16))) MtVector3 mViewPos;
  MtVector3 mViewOfs;
  MtVector3 mViewDir;
  MtVector3 mViewUpVec;
  f32 mViewWidth;
  f32 mViewHeight;
  f32 mViewNear;
  f32 mViewFar;
  rRenderTargetTexture *mpRTTexture;
  nDraw::Texture *mpTempTexture;
  f32 mViewDirDist;
  unsigned __int32 mDrawEffect : 1;
  unsigned __int32 mDrawProjection : 1;
  unsigned __int32 mCalcViewPos : 1;
  unsigned __int32 mProjectionEffect055c : 5;
  unsigned __int32 mDrawPass : 8;
  unsigned __int32 mBlendMode : 8;
  unsigned __int32 mProjectionMode : 8;
  uProjectionTexture *mpProjectionTexture;
  f32 mFov;
  f32 mAspectRatio;
  f32 mUVWrap;
  __attribute__((aligned(8))) MtVector4 mColor;
  f32 mFadeInEnd;
  f32 mFadeOutStart;
  u32 mProjectionEffect3288;
  u32 mProjectionEffect328c;
};

struct __cppobj uProjectionEffect::MyDTI : MtDTI
{
};

struct __cppobj uCnsChain : uConstraint
{
  uModel *mpModelOld;
  f32 mBlendRatio;
  nJointAnimator::JA_JOINT_BUFF *mpCloneBuff;
  nJointAnimator::JA_JOINT_BUFF *mpWBBuff;
  u32 mJointNum;
  u8 *mpJointNoTag;
  MtMatrix *mpJointBaseMatrix;
  MtMatrix *mpJointInvBaseMatrix;
  bool mAvailable;
  bool mForcedInvalid;
  rChain *mpChain;
  u32 mChainTimeStamp;
  nChain::JointWork **mpJointWork;
  nChain::chainParam mCP;
  bool mScrCollision;
  bool mColliderCollision;
  u32 mSbcType;
  u32 mSbcFilter;
  sCollision::PreTraverseInfo mPreTraverseInfo;
  u32 mColliderType;
  u32 mColliderFilter;
  uModel *mpColModel;
  uModel *mpColModelOld;
  rChainCol *mpCollision;
  u32 mColTimeStamp;
  nChain::CollisionWork *mpCollisionWork;
  bool mStaticColEnable;
  s32 mHitCollisionID;
  __attribute__((aligned(16))) MtGeomAABB mBoundingAABB;
  MtMatrix *mpColJointWMat;
  u8 mpColJointNoTag[256];
  sCollision::Node *mpColliderNode;
  MtGeomConvex *mpColliderGeoms[8];
  u32 mIntersectedColliderNum;
  __attribute__((aligned(16))) cpChain mChainJob;
  uCnsChain::cCnsChild **mppCnsChildlen;
  bool mAdjustFirst;
  u32 mCnsNum;
  u8 *mpDependJoints;
  u32 mDependJointNum;
  bool mCalcJoints[256];
};

struct __cppobj uCnsChain::cCnsChild : uConstraint
{
  uCnsChain *mpChain;
  u32 mIndex;
  u32 mAttr;
};

struct __cppobj uCnsChain::MyDTI : MtDTI
{
};

struct __cppobj uCnsChain::cCnsChild::MyDTI : MtDTI
{
};

enum uCnsChain::cCnsChild::ATTR : __int32
{
  ATTR_NOROTATE = 0x1,
};

enum uCnsIK::EFF_CTRL : __int32
{
  EC_TRANS_OFFSET = 0x1,
  EC_ROT_OFFSET = 0x2,
  EC_TRANS_SCALE = 0x4,
  EC_ORIGIN_MOT = 0x8,
};

enum uCnsIK::IK_STATUS : __int32
{
  IK_STATUS_EFF_TOUCH_GROUND = 0x1,
  IK_STATUS_EFF_OVERSTRETCH = 0x2,
  IK_STATUS_EFF_CLOSE_GROUND = 0x4,
  IK_STATUS_EFF_ROT_LERP = 0x8,
};

union uCnsJointOffset::$99AC9B3BCEE16830CBAC54B0C7F1500A
{
  u32 mOrderProp;
  uCoord::ORDER mOrder;
};

struct __cppobj __attribute__((aligned(16))) uCnsJointOffset : uConstraint
{
  __attribute__((aligned(8))) MtVector3 mRot;
  MtVector3 mScl;
  MtVector3 mTrans;
  uCnsJointOffset::$99AC9B3BCEE16830CBAC54B0C7F1500A _anon_0;
  rCnsJointOffset *mpCnsJointOffsetRes;
  u32 mJoint;
};

struct __cppobj __attribute__((aligned(16))) rCnsJointOffset : rConstraint
{
  u32 mOrder;
  __attribute__((aligned(8))) MtVector3 mRot;
  MtVector3 mScl;
  MtVector3 mTrans;
  u32 mJoint;
};

struct __cppobj uCnsJointOffset::MyDTI : MtDTI
{
};

struct __cppobj rCnsJointOffset::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uCnsParent : uConstraint
{
  rCnsParent *mpCnsParentRes;
  uModel *mpParentModel;
  unsigned __int32 mAttr : 16;
  unsigned __int32 mJoint : 8;
  unsigned __int32 mParentJointNo : 8;
};

struct rCnsParent::Data
{
  u16 attr;
  u8 jointNo;
  u8 parentNo;
};

struct __cppobj __attribute__((aligned(8))) rCnsParent : rConstraint
{
  rCnsParent::Data mData;
};

struct __cppobj uCnsParent::MyDTI : MtDTI
{
};

struct __cppobj rCnsParent::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uCnsSkeleton : uConstraint:1120
{
  u32 mNodeNum;
  uCnsSkeleton::cCnsChild *mpCnsChild;
  uCnsSkeleton::cNode **mppNodes;
  bool mIsReady;
};

struct __cppobj __attribute__((aligned(8))) uCnsParentN : uCnsSkeleton
{
  rCnsParentN *mpResource;
  uModel *mpParentModel;
  uCnsParentN::cParentNode **mppParentNodes;
  u32 mAttr;
};

struct __cppobj __attribute__((aligned(8))) uCnsSkeleton::cCnsChild : uConstraint
{
  uCnsSkeleton *mpCnsSkeleton;
  u32 mIndex;
};

struct __cppobj __attribute__((aligned(8))) uCnsSkeleton::cNode : MtObject
{
  u32 mJointNo;
};

struct rCnsParentN::Data
{
  u32 jointNum;
  u32 attr;
};

struct __cppobj rCnsParentN : rConstraint
{
  rCnsParentN::Data mData;
  u8 *mpJointNo;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uCnsSkeleton::cNode:96 : MtObject
{
  u32 mJointNo;
};

struct __cppobj __attribute__((aligned(4))) uCnsParentN::cParentNode : uCnsSkeleton::cNode:96
{
  u8 mParentJointNo;
};

struct __cppobj uCnsParentN::MyDTI : MtDTI
{
};

struct __cppobj uCnsParentN::cParentNode::MyDTI : MtDTI
{
};

enum uCnsParentN::ATTR : __int32
{
  ATTR_ROTATE = 0x1,
  ATTR_TRANS = 0x2,
  ATTR_SCALE = 0x4,
  ATTR_SRT = 0x7,
};

struct __cppobj uCnsSkeleton::MyDTI : MtDTI
{
};

struct __cppobj uCnsSkeleton::cCnsChild::MyDTI : MtDTI
{
};

struct __cppobj uCnsSkeleton::cNode::MyDTI : MtDTI
{
};

struct __cppobj rCnsParentN::MyDTI : MtDTI
{
};

enum uCnsRotateLimit::ORDER : __int32
{
  ORDER_XYZ_0 = 0x0,
  ORDER_XZY_0 = 0x1,
  ORDER_YXZ_0 = 0x2,
  ORDER_YZX_0 = 0x3,
  ORDER_ZXY_0 = 0x4,
  ORDER_ZYX_0 = 0x5,
};

enum uCnsRotateLimit::AXIS : __int32
{
  AXIS_X_0 = 0x1,
  AXIS_Y_0 = 0x2,
  AXIS_Z_0 = 0x4,
  AXIS_ALL = 0x7,
};

struct __cppobj __attribute__((aligned(8))) uCnsScaleNormalize : uConstraint
{
  rCnsScaleNormalize *mpResource;
  u32 mJointNo;
};

struct __cppobj __attribute__((aligned(8))) rCnsScaleNormalize : rConstraint
{
  u32 mJointNo;
};

struct __cppobj uCnsScaleNormalize::MyDTI : MtDTI
{
};

struct __cppobj rCnsScaleNormalize::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uCnsGroup:1312 : uConstraint:1120
{
  __attribute__((aligned(4))) u32 mGroupNum;
  uCnsGroup::cGroup **mppGroups;
  cResource *mpTmpResource;
  bool mIsReady;
  bool mIsAdjustCalculated;
};

struct __cppobj uCnsTinyChain : uCnsGroup:1312
{
  u32 mAttr;
  f32 mStepTime;
  f32 mGravityScaling;
  f32 mGlobalTransForceCoef;
  f32 mGlobalDamping;
  f32 mSpringScaling;
  f32 mWindScaling;
  f32 mReflectScaling;
  u8 mSolveStrNum;
  u8 mSolveAngNum;
  u8 mSolveMdlColNum;
  u8 mSolveSelColNum;
  u8 mSolveScrColNum;
  u8 mSolveChnColNum;
  u8 mReserved[2];
  rCnsTinyChain *mpResource;
  uCnsTinyChain::cChainGroup **mppChainGroups;
  u32 mStabilizeNum;
  rChainCol *mpModelColRes;
  uModel *mpModelCol;
  f32 mModelColScale;
  uModel *mpTransParent;
  __attribute__((aligned(16))) MtMatrix mTransParentMat;
  MtMatrix mTransParentMatOld;
  f32 mTransParentBlend;
  sCollision::Param mSbcParam;
  f32 mGroundLevel;
  f32 mTimeScale;
  f32 mTimeScaleOld;
  f32 mTimeCoef;
  MtVector3 mLocalWind;
  MtVector3 mWindAmp[5];
  u32 mWindCycle[5];
  u32 mWindNum;
  u32 mCalcCounter;
  f32 mActTime;
  f32 mCalcStepTime;
  f32 mCalcStepTimeOld;
  u32 mSolveMaxNum;
  f32 mCostStr;
  f32 mCostAng;
  f32 mCostObj;
  f32 mCostSel;
  f32 mCostScr;
  f32 mCostChn;
  u32 mDependJointNum;
  u8 *mpDependJoints;
  f32 mScale;
  __attribute__((aligned(16))) MtMatrix mPrevModelNullMat;
  u8 mRestart;
  bool mAfterEnable;
  bool mPrevEnable;
  bool mIsScale;
  bool mIsNScale;
  bool mWarpFlag;
};

struct __cppobj __attribute__((aligned(8))) uCnsGroup::cGroup : MtObject
{
  uCnsGroup *mpCnsGroup;
  u32 mIndex;
  u32 mNodeNum;
  uCnsGroup::cNode **mppNodes;
  uCnsGroup::cCnsChild *mpCnsChildlen;
  bool mIsReady;
};

struct rCnsTinyChain::Header
{
  u32 magic;
  u32 version;
};

struct rCnsTinyChain::ChainData::$59FDB7A88CAB47E5EB9FF351CA4110FC::$D633D6767B04B0A861F495654979908D
{
  u8 SolveStrNum;
  u8 SolveAngNum;
  u8 SolveMdlColNum;
  u8 SolveSelColNum;
};

union rCnsTinyChain::ChainData::$59FDB7A88CAB47E5EB9FF351CA4110FC
{
  rCnsTinyChain::ChainData::$59FDB7A88CAB47E5EB9FF351CA4110FC::$D633D6767B04B0A861F495654979908D _anon_0;
  u32 calcNum0;
};

struct rCnsTinyChain::ChainData::$3784CBA41ACDEA9B81CD7ABDC18D00C4::$E7E59E86620C4E839E2E5070692B6846
{
  u8 SolveScrColNum;
  u8 SolveChnColNum;
  u8 Reserved[2];
};

union rCnsTinyChain::ChainData::$3784CBA41ACDEA9B81CD7ABDC18D00C4
{
  rCnsTinyChain::ChainData::$3784CBA41ACDEA9B81CD7ABDC18D00C4::$E7E59E86620C4E839E2E5070692B6846 _anon_0;
  u32 calcNum1;
};

struct rCnsTinyChain::ChainData
{
  u32 ChainGroupNum;
  u32 ChainNodeAllNum;
  u32 Attr;
  f32 StepTime;
  f32 GravityScaling;
  f32 GlobalDamping;
  f32 GlobalTransForceCoef;
  f32 SpringScaling;
  f32 WindScaling;
  rCnsTinyChain::ChainData::$59FDB7A88CAB47E5EB9FF351CA4110FC _anon_0;
  rCnsTinyChain::ChainData::$3784CBA41ACDEA9B81CD7ABDC18D00C4 _anon_1;
};

struct __cppobj rCnsTinyChain : rConstraint
{
  rCnsTinyChain::Header mHeader;
  rCnsTinyChain::ChainData mData;
  rCnsTinyChain::ChainGroup *mpChainGroup;
  rCnsTinyChain::ChainNode *mpChainNode;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uCnsGroup::cGroup:352 : MtObject
{
  uCnsGroup *mpCnsGroup;
  u32 mIndex;
  u32 mNodeNum;
  uCnsGroup::cNode **mppNodes;
  uCnsGroup::cCnsChild *mpCnsChildlen;
  bool mIsReady;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(16))) uCnsTinyChain::cChainGroup : uCnsGroup::cGroup:352
{
  __attribute__((aligned(4))) u32 mAttr;
  u32 mColAttribute;
  u32 mColGroup;
  u32 mColType;
  __attribute__((aligned(8))) MtVector3 mGravity;
  f32 mDamping;
  f32 mTransForceCoef;
  f32 mSpringCoef;
  f32 mWindCoef;
  f32 mFrictionCoef;
  f32 mReflectCoef;
  f32 mLimitForce;
  __attribute__((aligned(8))) uCnsTinyChain *mpCnsChain;
  uCnsTinyChain::cChainNode **mppChainNodes;
  MtVector4 mOffset;
  MtMatrix mRootMat;
  f32 mLength;
  __attribute__((aligned(16))) sCollision::Node mColNode;
  bool mResetColliderNode;
  bool mUseScale;
};

struct __cppobj __attribute__((aligned(8))) uCnsGroup : uConstraint:1120
{
  u32 mGroupNum;
  uCnsGroup::cGroup **mppGroups;
  cResource *mpTmpResource;
  bool mIsReady;
  bool mIsAdjustCalculated;
};

struct __cppobj __attribute__((aligned(8))) uCnsGroup::cNode : MtObject
{
  u32 mJointNo;
};

struct __cppobj __attribute__((aligned(8))) uCnsGroup::cCnsChild : uConstraint
{
  uCnsGroup::cGroup *mpGroup;
  u32 mIndex;
};

struct rCnsTinyChain::ChainGroup
{
  u32 NodeNum;
  u32 Attr;
  u32 ColAttribute;
  u32 ColGroup;
  u32 ColType;
  __attribute__((aligned(16))) MtVector3 Gravity;
  f32 Damping;
  f32 TransForceCoef;
  f32 SpringCoef;
  f32 WindCoef;
  f32 LimitForce;
  f32 FrictionCoef;
  f32 ReflectCoef;
};

struct rCnsTinyChain::ChainNode::$ADD4554C16DCA0C3EFE5188DA27C1F03::$15AD9D01603D39DF732F70BA8944B8F5
{
  u8 JointNo;
  u8 Attr;
  u8 Attach;
  u8 RotMode;
};

union rCnsTinyChain::ChainNode::$ADD4554C16DCA0C3EFE5188DA27C1F03
{
  rCnsTinyChain::ChainNode::$ADD4554C16DCA0C3EFE5188DA27C1F03::$15AD9D01603D39DF732F70BA8944B8F5 _anon_0;
  u32 param0;
};

struct rCnsTinyChain::ChainNode::$E5B72C56ABD77B8FA0CC25E67E2374F5::$F076E55EF645F5D423C3070CC89F2487
{
  u8 AngleMode;
  u8 RefJntNo;
  u8 ShapeObject;
  u8 ShapeScroll;
};

union rCnsTinyChain::ChainNode::$E5B72C56ABD77B8FA0CC25E67E2374F5
{
  rCnsTinyChain::ChainNode::$E5B72C56ABD77B8FA0CC25E67E2374F5::$F076E55EF645F5D423C3070CC89F2487 _anon_0;
  u32 param1;
};

struct rCnsTinyChain::ChainNode
{
  rCnsTinyChain::ChainNode::$ADD4554C16DCA0C3EFE5188DA27C1F03 _anon_0;
  rCnsTinyChain::ChainNode::$E5B72C56ABD77B8FA0CC25E67E2374F5 _anon_1;
  f32 R;
  __attribute__((aligned(8))) MtMatrix AngleAxis;
  f32 AngleLimit;
  f32 Mass;
  f32 ElasticCoef;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) uCnsGroup::cNode:96 : MtObject
{
  u32 mJointNo;
};

struct __cppobj uCnsTinyChain::cChainNode : uCnsGroup::cNode:96
{
  unsigned __int32 mResReserved : 8;
  unsigned __int32 mAttr : 8;
  unsigned __int32 mAttach : 8;
  unsigned __int32 mRotMode : 8;
  unsigned __int32 mAngleMode : 8;
  unsigned __int32 mRefJntNo : 8;
  unsigned __int32 mShapeObject : 8;
  unsigned __int32 mShapeScroll : 8;
  f32 mR;
  f32 mAngleLimit;
  __attribute__((aligned(8))) MtMatrix mAngleAxis;
  f32 mMass;
  f32 mElasticCoef;
  f32 mWindCoef;
  uCnsTinyChain::cChainGroup *mpChainGroup;
  __attribute__((aligned(16))) MtMatrix mMat;
  MtVector3 mOld;
  MtVector3 mCollAdjust;
  MtGeomCapsule mGeomCapsule;
  MtGeomSphere mGeomSphere;
  MtVector3 mPrevPos;
  MtQuaternion mQuat;
  MtVector3 mMotPos;
  MtVector3 mDir;
  f32 mLen;
  f32 mCLen;
  f32 mLimitD;
  f32 mLimitR;
  u32 mCalc;
  u32 mHit;
  __attribute__((aligned(16))) MtVector3 mJointScale;
};

struct __cppobj uCnsTinyChain::MyDTI : MtDTI
{
};

struct __cppobj uCnsTinyChain::cChainGroup::MyDTI : MtDTI
{
};

enum uCnsTinyChain::cChainGroup::ATTR : __int32
{
  ATTR_DEFAULT = 0x0,
  ATTR_COLLISION_MASK = 0xFF,
  ATTR_COLLISION_SELF = 0x1,
  ATTR_COLLISION_CHAIN = 0x2,
  ATTR_COLLISION_MODEL = 0x4,
  ATTR_COLLISION_SCROLL = 0x8,
  ATTR_COLLISION_COLLIDER = 0x10,
  ATTR_ENTRY_COLLIDER = 0x20,
  ATTR_SCROLL_TRAVERSE = 0x40,
  ATTR_FORCE_MASK = 0xFFFF00,
  ATTR_ANGLE_LIMIT = 0x100,
  ATTR_FORCE_SPRING = 0x200,
  ATTR_NO_ELASTIC = 0x400,
  ATTR_NO_FORCE = 0x800,
  ATTR_SIMPLEX = 0x1000,
  ATTR_FORCE_LIMIT = 0x2000,
  ATTR_SYMMETRY_0 = 0x4000,
  ATTR_REACT = 0x8000,
  ATTR_FORCE_SPRING2 = 0x10000,
  ATTR_STRETCH_REVERSE = 0x20000,
  ATTR_SHRIVEL = 0x40000,
};

struct __cppobj uCnsTinyChain::cChainNode::MyDTI : MtDTI
{
};

enum uCnsTinyChain::cChainNode::LIMIT_MODE : __int32
{
  LIMIT_MODE_NONE = 0x0,
  LIMIT_MODE_3D = 0x1,
  LIMIT_MODE_2D = 0x2,
};

enum uCnsTinyChain::cChainNode::ATTACH : __int32
{
  ATTACH_NONE = 0x0,
  ATTACH_CONST = 0x1,
  ATTACH_TARGET = 0x2,
  ATTACH_REFJOINT = 0x3,
};

enum uCnsTinyChain::cChainNode::CALC : __int32
{
  CALC_MATRIX = 0x1,
  CALC_MPOS = 0x2,
};

enum uCnsTinyChain::cChainNode::ROT_MODE : __int32
{
  ROT_CHILD = 0x0,
  ROT_ORIGIN = 0x1,
};

enum uCnsTinyChain::cChainNode::ATTR : __int32
{
  ATTR_SPRING_DISABLE = 0x1,
  ATTR_ANGLELIMIT_DISABLE = 0x2,
};

enum uCnsTinyChain::SHAPE : __int32
{
  SHAPE_NONE = 0x0,
  SHAPE_SPHERE_0 = 0x1,
  SHAPE_CAPSULE_0 = 0x2,
  SHAPE_OBB_0 = 0x3,
};

enum uCnsTinyChain::ATTR : __int32
{
  ATTR_DEFAULT_0 = 0x0,
  ATTR_CALC_MASK = 0xFFFF,
  ATTR_SOLVER_MVAR = 0x1,
  ATTR_FREEZE = 0x2,
  ATTR_SCROLL_TRANS = 0x4,
  ATTR_SCROLL_ROT = 0x8,
  ATTR_SOLVE_ALLFRAME = 0x10,
  ATTR_VIRTUAL_GROUND = 0x20,
  ATTR_SCENE_WIND = 0x40,
  ATTR_USE_WORLDMAT = 0x80,
  ATTR_UPPARAM_AT_DISABLE = 0x100,
  ATTR_ENABLE_TIMESCALE = 0x200,
  ATTR_SCALE_EX = 0x400,
  ATTR_ROT_EX = 0x800,
  ATTR_JOINT_SCALE = 0x1000,
  ATTR_DISABLE_MASK = 0xFF0000,
  ATTR_COLLISION_DISABLE = 0x10000,
  ATTR_COLLIDER_DISABLE = 0x20000,
  ATTR_ANGLELIMIT_DISABLE_0 = 0x40000,
  ATTR_FRICTION_DISABLE = 0x80000,
  ATTR_REFLECTION_DISABLE = 0x100000,
  ATTR_STRETCH_DISABLE = 0x200000,
  ATTR_TRANS_INTER_DISABLE = 0x400000,
  ATTR_CHAIN_DISABLE = 0x800000,
  ATTR_SYSTEM_MASK = 0xF0000000,
  ATTR_ADJUST_AFTER = 0x10000000,
};

enum uCnsTinyChain::HIT : __int32
{
  HIT_SELF = 0x1,
  HIT_OBJECT = 0x2,
  HIT_SCROLL = 0x4,
  HIT_ANGLE = 0x8,
  HIT_SCROLL_SP = 0x10,
  HIT_COLLIDER = 0x20,
};

struct __cppobj uCnsGroup::MyDTI : MtDTI
{
};

struct __cppobj uCnsGroup::cGroup::MyDTI : MtDTI
{
};

struct __cppobj uCnsGroup::cNode::MyDTI : MtDTI
{
};

struct __cppobj uCnsGroup::cCnsChild::MyDTI : MtDTI
{
};

struct __cppobj rCnsTinyChain::MyDTI : MtDTI
{
};

enum sCollision::COLLIDER_NODE_ATTR : __int32
{
  COLLIDER_NODE_ATTR_00 = 0x1,
  COLLIDER_NODE_ATTR_01 = 0x2,
  COLLIDER_NODE_ATTR_02 = 0x4,
  COLLIDER_NODE_ATTR_03 = 0x8,
  COLLIDER_NODE_ATTR_04 = 0x10,
  COLLIDER_NODE_ATTR_05 = 0x20,
  COLLIDER_NODE_ATTR_06 = 0x40,
  COLLIDER_NODE_ATTR_07 = 0x80,
  COLLIDER_NODE_ATTR_08 = 0x100,
  COLLIDER_NODE_ATTR_09 = 0x200,
  COLLIDER_NODE_ATTR_10 = 0x400,
  COLLIDER_NODE_ATTR_11 = 0x800,
  COLLIDER_NODE_ATTR_12 = 0x1000,
  COLLIDER_NODE_ATTR_13 = 0x2000,
  COLLIDER_NODE_ATTR_14 = 0x4000,
  COLLIDER_NODE_ATTR_15 = 0x8000,
  COLLIDER_NODE_ATTR_16 = 0x10000,
  COLLIDER_NODE_ATTR_17 = 0x20000,
  COLLIDER_NODE_ATTR_18 = 0x40000,
  COLLIDER_NODE_ATTR_19 = 0x80000,
  COLLIDER_NODE_ATTR_20 = 0x100000,
  COLLIDER_NODE_ATTR_21 = 0x200000,
  COLLIDER_NODE_ATTR_22 = 0x400000,
  COLLIDER_NODE_ATTR_23 = 0x800000,
  COLLIDER_NODE_ATTR_24 = 0x1000000,
  COLLIDER_NODE_ATTR_25 = 0x2000000,
  COLLIDER_NODE_ATTR_26 = 0x4000000,
  COLLIDER_NODE_ATTR_27 = 0x8000000,
  COLLIDER_NODE_ATTR_28 = 0x10000000,
  COLLIDER_NODE_ATTR_29 = 0x20000000,
  COLLIDER_NODE_ATTR_30 = 0x40000000,
  COLLIDER_NODE_ATTR_31 = 0x80000000,
  COLLIDER_NODE_ATTR_ALL = 0xFFFFFFFF,
};

enum sCollision::COLLIDER_NODE_GROUP : __int32
{
  COLLIDER_NODE_GROUP_00 = 0x1,
  COLLIDER_NODE_GROUP_01 = 0x2,
  COLLIDER_NODE_GROUP_02 = 0x4,
  COLLIDER_NODE_GROUP_03 = 0x8,
  COLLIDER_NODE_GROUP_04 = 0x10,
  COLLIDER_NODE_GROUP_05 = 0x20,
  COLLIDER_NODE_GROUP_06 = 0x40,
  COLLIDER_NODE_GROUP_07 = 0x80,
  COLLIDER_NODE_GROUP_08 = 0x100,
  COLLIDER_NODE_GROUP_09 = 0x200,
  COLLIDER_NODE_GROUP_10 = 0x400,
  COLLIDER_NODE_GROUP_11 = 0x800,
  COLLIDER_NODE_GROUP_12 = 0x1000,
  COLLIDER_NODE_GROUP_13 = 0x2000,
  COLLIDER_NODE_GROUP_14 = 0x4000,
  COLLIDER_NODE_GROUP_15 = 0x8000,
  COLLIDER_NODE_GROUP_16 = 0x10000,
  COLLIDER_NODE_GROUP_17 = 0x20000,
  COLLIDER_NODE_GROUP_18 = 0x40000,
  COLLIDER_NODE_GROUP_19 = 0x80000,
  COLLIDER_NODE_GROUP_20 = 0x100000,
  COLLIDER_NODE_GROUP_21 = 0x200000,
  COLLIDER_NODE_GROUP_22 = 0x400000,
  COLLIDER_NODE_GROUP_23 = 0x800000,
  COLLIDER_NODE_GROUP_24 = 0x1000000,
  COLLIDER_NODE_GROUP_25 = 0x2000000,
  COLLIDER_NODE_GROUP_26 = 0x4000000,
  COLLIDER_NODE_GROUP_27 = 0x8000000,
  COLLIDER_NODE_GROUP_28 = 0x10000000,
  COLLIDER_NODE_GROUP_29 = 0x20000000,
  COLLIDER_NODE_GROUP_30 = 0x40000000,
  COLLIDER_NODE_GROUP_31 = 0x80000000,
  COLLIDER_NODE_GROUP_ALL = 0xFFFFFFFF,
};

typedef void (*uCnsTinyIK::IK_APP_CALC_FUNC)(MtObject *, uCnsTinyIK *);

struct __cppobj uCnsTinyIK : uConstraint:1104
{
  unsigned __int32 mAttr : 12;
  unsigned __int32 mIKDir : 3;
  unsigned __int32 mIKUp : 3;
  unsigned __int32 mFitDir : 3;
  unsigned __int32 mFitUp : 3;
  unsigned __int32 mBlendMode : 1;
  unsigned __int32 mJntRotMode : 1;
  unsigned __int32 mEffRotMode : 2;
  unsigned __int32 mFitMode : 2;
  unsigned __int32 mFitBlendMode : 2;
  u8 mJointNo[4];
  f32 m3BonePullResist;
  f32 m3BonePushResist;
  u32 mCollisionMode;
  f32 mGroundOffset;
  f32 mGroundBlendDist;
  f32 mCheckGroundLengthUpper;
  f32 mCheckGroundLengthLower;
  sCollision::Param mCollisionParam;
  u32 mCashTargetJntNo;
  f32 mCashRange;
  __attribute__((aligned(16))) MtVector3 mEffPos;
  MtVector3 mJointPos[4];
  MtVector3 mGroundNormal;
  sCollision::PreTraverseInfo mPreTraverseInfo;
  sCollision::TriangleInfo mScrollCollisionCacheData_One;
  u32 mJointNum;
  f32 mBoneLen[3];
  f32 mGroundDistance;
  u32 mGroundState;
  f32 mGroundLevel;
  f32 mFitBlendRate;
  uCnsTinyIK *mpCashShareIK;
  rCnsTinyIK *mpResource;
  MtObject *mpCallBackObj;
  uCnsTinyIK::IK_APP_CALC_FUNC mpCallBackFunc;
  _BYTE gap360[8];
  unsigned __int32 mIKNormalAxis : 3;
  unsigned __int32 mFitNormalAxis : 3;
  unsigned __int32 mEffState : 2;
  unsigned __int32 mIsReady : 1;
  unsigned __int32 mActive : 1;
  unsigned __int32 mUpdateCash : 1;
};

struct __cppobj __attribute__((aligned(16))) rCnsTinyIK : rConstraint
{
  u32 mAttr;
  u32 mJointNo[4];
  u8 mIKDir;
  u8 mIKUp;
  u8 mFitDir;
  u8 mFitUp;
  u8 mBlendMode;
  u8 mJntRotMode;
  u8 mEffRotMode;
  u8 mFitMode;
  u8 mFitBlendMode;
  u8 mReserved[3];
  f32 m3BonePushResist;
  f32 m3BonePullResist;
  u32 mCollisionMode;
  f32 mGroundOffset;
  f32 mGroundBlendDist;
  f32 mCheckGroundLengthUpper;
  f32 mCheckGroundLengthLower;
  sCollision::Param mCollisionParam;
  s32 mCashTargetJntNo;
  f32 mCashRange;
};

struct __cppobj uCnsTinyIK::MyDTI : MtDTI
{
};

enum uCnsTinyIK::BlendMode : __int32
{
  BLEND_JNT_ROT = 0x0,
  BLEND_EFF_POS = 0x1,
};

enum uCnsTinyIK::JntRotMode : __int32
{
  JNTROT_UPVECTOR = 0x0,
  JNTROT_CHILD = 0x1,
};

enum uCnsTinyIK::EffRotMode : __int32
{
  EFFROT_ORIGINAL = 0x0,
  EFFROT_CHILD = 0x1,
  EFFROT_PARAM = 0x2,
};

enum uCnsTinyIK::FitMode : __int32
{
  FITMODE_UPVECTOR = 0x0,
  FITMODE_CHILD = 0x1,
  FITMODE_ORIGINAL = 0x2,
};

enum uCnsTinyIK::FitBlendMode : __int32
{
  FITBLEND_GROUND_DIST = 0x0,
  FITBLEND_PARAM = 0x1,
};

enum uCnsTinyIK::Ground : __int32
{
  GROUND_FAR = 0x0,
  GROUND_NEAR = 0x1,
  GROUND_TOUCH = 0x2,
};

enum uCnsTinyIK::Attribute : __int32
{
  ATTR_ENABLE_EFF_POS = 0x1,
  ATTR_UPDATE_BONE_LENGTH = 0x2,
  ATTR_REVERSE_FIRST_JNT = 0x4,
  ATTR_REVERSE_SECOND_JNT = 0x8,
  ATTR_FIX_ROT_SECOND_JNT = 0x10,
  ATTR_GROUND_CHECK = 0x100,
  ATTR_GROUND_FIT = 0x200,
};

enum uCnsTinyIK::EffState : __int32
{
  EFFSTATE_NONE = 0x0,
  EFFSTATE_PUSH = 0x1,
  EFFSTATE_PULL = 0x2,
};

enum uCnsTinyIK::CollisionMode : __int32
{
  COL_DEFAULT = 0x0,
  COL_GROUNDLEVEL = 0x1,
  COL_CASH_LAST = 0x2,
  COL_CASH_RANGE = 0x3,
};

enum uConstraint::ADIR : __int32
{
  ADIR_NEGATIVE = 0x4,
  ADIR_AXIS_MASK = 0x3,
  ADIR_X = 0x1,
  ADIR_Y = 0x2,
  ADIR_Z = 0x3,
  ADIR_NX = 0x5,
  ADIR_NY = 0x6,
  ADIR_NZ = 0x7,
  __ADIR__U32 = 0xFFFFFFFF,
};

struct __cppobj rCnsTinyIK::MyDTI : MtDTI
{
};

enum uConstraint::PRI : __int32
{
  DEFAULT_PRI = 0x3E8,
};

typedef void (*uConstraint::setRotateVector::SetRotVecFunc)(MtMatrix *, const MtVector3 *, const MtVector3 *, const MtVector4 *);

enum nDraw::TDeferredLighting : __int32
{
  TDeferredLighting_LightVolumeNoLighting = 0x0,
  TDeferredLighting_LightVolumeNoLightingMRT = 0x1,
  TDeferredLighting_LightVolumeNoLightingLightGroup = 0x2,
  TDeferredLighting_LightVolumeNoLightingLightGroupMRT = 0x3,
  TDeferredLighting_LightVolume = 0x4,
  TDeferredLighting_LightVolumeMRT = 0x5,
  TDeferredLighting_LightVolumeRectangleNoLightingLightGroup = 0x6,
  TDeferredLighting_LightVolumeRectangleNoLightingLightGroupMRT = 0x7,
  TDeferredLighting_LightVolumeRectangle = 0x8,
  TDeferredLighting_LightVolumeRectangleMRT = 0x9,
};

struct __cppobj cLightVolumePolyhedron : cLightVolume
{
  __attribute__((aligned(16))) MtOBB mNearClipOBB;
};

struct __cppobj cLightVolumeAxisAlingedBox : cLightVolumePolyhedron
{
  MtMatrix mWmat;
};

struct __cppobj cLightVolumePoint : cLightVolumePolyhedron
{
  cSphereVolume mVolume;
};

struct __cppobj cLightVolumeCapsule : cLightVolumePolyhedron
{
  MtOBB mObb;
  MtMatrix mWmat;
};

struct __cppobj cLightVolumeSpot : cLightVolumePolyhedron
{
  cConeVolume mVolume;
};

struct __cppobj cLightVolumeCuboid : cLightVolumePolyhedron
{
  MtOBB mObb;
  MtMatrix mWmat;
};

struct __cppobj cLightVolumeRectangle : cLightVolume
{
};

enum nDraw::TShadowCast : __int32
{
  TShadowCast_Default = 0x0,
  TShadowCast_Transparent = 0x1,
  TShadowCast_DefaultDepthBias = 0x2,
  TShadowCast_TransparentDepthBias = 0x3,
};

enum nChain::$4201F10EEA3F34E006B91CA2449D04B4 : __int32
{
  ID_CHAIN_PARAM = 0x0,
  ID_CAHIN_INFO = 0x1,
  ID_JOINT_NO_TAG = 0x2,
  ID_COL_INFO = 0x3,
  ID_COL_WORK = 0x4,
  ID_JOINT_WORK = 0x5,
  ID_CLONE_BUFF = 0x0,
  ID_WB_BUFF = 0x1,
};

struct cDma
{
  int (**_vptr$cDma)(void);
};

enum cDma::DMA_TAG : __int32
{
  TAG_02 = 0x2,
  TAG_03 = 0x3,
  TAG_04 = 0x4,
  TAG_05 = 0x5,
  TAG_06 = 0x6,
  TAG_07 = 0x7,
  TAG_08 = 0x8,
  TAG_09 = 0x9,
  TAG_10 = 0xA,
  TAG_11 = 0xB,
  TAG_12 = 0xC,
  TAG_13 = 0xD,
  TAG_14 = 0xE,
  TAG_15 = 0xF,
  TAG_16 = 0x10,
  TAG_17 = 0x11,
  TAG_18 = 0x12,
  TAG_19 = 0x13,
  TAG_20 = 0x14,
  TAG_21 = 0x15,
  TAG_22 = 0x16,
  TAG_23 = 0x17,
  TAG_24 = 0x18,
  TAG_25 = 0x19,
  TAG_26 = 0x1A,
  TAG_27 = 0x1B,
  TAG_28 = 0x1C,
  TAG_29 = 0x1D,
  TAG_30 = 0x1E,
  TAG_31 = 0x1F,
};

enum nGUI::DRAW_PASS : __int32
{
  DRAW_PASS_FOLLOW = 0x0,
  DRAW_PASS_SOLID = 0x1,
  DRAW_PASS_SCREEN = 0x2,
  DRAW_PASS_TRANSPARENT = 0x3,
  DRAW_PASS_NUM = 0x4,
  DRAW_PASS_USER_OFFSET = 0x10,
};

enum nGUI::DEPTH_STATE : __int32
{
  DEPTH_FOLLOW = 0x0,
  DEPTH_DISABLE = 0x1,
  DEPTH_TEST = 0x2,
  DEPTH_WRITE = 0x3,
  DEPTH_TEST_WRITE = 0x4,
  DEPTH_STATE_NUM = 0x5,
};

enum nGUI::COLOR_CONTROL : __int32
{
  COLOR_CONTROL_SCALING = 0x0,
  COLOR_CONTROL_ATTRIBUTE = 0x1,
  COLOR_CONTROL_NONE = 0x2,
  COLOR_CONTROL_NUM = 0x3,
};

enum nGUI::SCALING_TYPE : __int32
{
  SCALING_TYPE_NONE = 0x0,
  SCALING_TYPE_POSITION = 0x1,
  SCALING_TYPE_SIZE = 0x2,
  SCALING_TYPE_FULL = 0x3,
  SCALING_TYPE_NUM = 0x4,
};

enum nGUI::MASK_TYPE : __int32
{
  MASK_TYPE_NONE = 0x0,
  MASK_TYPE_ON = 0x1,
  MASK_TYPE_REVERSE = 0x2,
  MASK_TYPE_ALPHA = 0x3,
  MASK_TYPE_ON_ADD = 0x4,
  MASK_TYPE_REVERSE_ADD = 0x5,
  MASK_TYPE_ALPHA_ADD = 0x6,
  MASK_TYPE_NUM = 0x7,
};

enum nGUI::MTAG::TYPE : __int32
{
  TYPE_FONT = 0x0,
  TYPE_SIZE_0 = 0x1,
  TYPE_COLOR_0 = 0x2,
  TYPE_SPEED = 0x3,
  TYPE_CHAR = 0x4,
  TYPE_ICON = 0x5,
  TYPE_SPACE = 0x6,
  TYPE_WORDWRAP = 0x7,
  TYPE_ANIM = 0x8,
  TYPE_TIME_0 = 0x9,
  TYPE_STAY = 0xA,
  TYPE_PAGE = 0xB,
  TYPE_DISP = 0xC,
  TYPE_RUBY = 0xD,
  TYPE_RUBY_RB = 0xE,
  TYPE_RUBY_RT = 0xF,
  TYPE_CENTER_0 = 0x10,
  TYPE_LEFT_0 = 0x11,
  TYPE_RIGHT = 0x12,
  TYPE_EVENT_1 = 0x13,
  TYPE_RGB = 0x14,
  TYPE_LINE_2 = 0x15,
  TYPE_EXTEND = 0x16,
  TYPE_DRAW = 0x17,
  TYPE_FFLINE = 0x18,
  TYPE_NUM_1 = 0x19,
};

enum nGUI::Draw::TECHNIQUE_PASS : __int32
{
  TECHNIQUE_PASS_POLYGON = 0x0,
  TECHNIQUE_PASS_TEXTURE = 0x1,
  TECHNIQUE_PASS_BLEND = 0x2,
  TECHNIQUE_PASS_DEVELOP = 0x3,
  TECHNIQUE_PASS_DEVELOP_LINE = 0x4,
  TECHNIQUE_PASS_NUM = 0x5,
};

enum nGUI::LETTER_HALIGN : __int32
{
  LETTER_HALIGN_LEFT = 0x0,
  LETTER_HALIGN_CENTER = 0x1,
  LETTER_HALIGN_RIGHT = 0x2,
  LETTER_HALIGN_NUM = 0x3,
};

enum nGUI::LETTER_VALIGN : __int32
{
  LETTER_VALIGN_TOP = 0x0,
  LETTER_VALIGN_CENTER = 0x1,
  LETTER_VALIGN_BOTTOM = 0x2,
  LETTER_VALIGN_BASELINE = 0x3,
  LETTER_VALIGN_NUM = 0x4,
};

enum nGUI::ICON_COLOR_TYPE : __int32
{
  ICON_COLOR_NOINFLUENCE = 0x0,
  ICON_COLOR_ALPHA = 0x1,
  ICON_COLOR_ALL = 0x2,
  ICON_COLOR_TYPE_NUM = 0x3,
};

enum cGUIInstText::CONDITION : __int32
{
  CONDITION_STOP = 0x0,
  CONDITION_NORMAL = 0x1,
  CONDITION_TIME = 0x2,
  CONDITION_STAY = 0x3,
  CONDITION_PAGE = 0x4,
  CONDITION_DISP = 0x5,
  CONDITION_NUM = 0x6,
};

struct __cppobj cGUIMessageAnalyzer::MyDTI : MtDTI
{
};

enum cGUIMessageAnalyzer::MODE : __int32
{
  MODE_INSTANCE = 0x0,
  MODE_OBJECT = 0x1,
};

enum cGUIMessageAnalyzer::STATE : __int32
{
  STATE_NORMAL = 0x0,
  STATE_RUBY = 0x1,
  STATE_RUBY_RB = 0x2,
  STATE_RUBY_RT = 0x3,
  STATE_NUM_2 = 0x4,
};

enum nGUI::AUTOWRAP : __int32
{
  AUTOWRAP_NONE = 0x0,
  AUTOWRAP_WIDTH = 0x1,
  AUTOWRAP_POINT = 0x2,
  AUTOWRAP_NUM = 0x3,
};

enum nGUI::DRAW_LIST::TYPE : __int32
{
  TYPE_DRAW_BEGIN = 0x0,
  TYPE_DRAW_END = 0x1,
  TYPE_END_0 = 0x2,
};

enum nGUI::PARAM_TYPE : __int32
{
  PARAM_TYPE_UNKNOWN = 0x0,
  PARAM_TYPE_INT = 0x1,
  PARAM_TYPE_FLOAT = 0x2,
  PARAM_TYPE_BOOL = 0x3,
  PARAM_TYPE_VECTOR = 0x4,
  PARAM_TYPE_RESOURCE = 0x5,
  PARAM_TYPE_STRING = 0x6,
  PARAM_TYPE_TEXTURE = 0x7,
  PARAM_TYPE_FONT = 0x8,
  PARAM_TYPE_MESSAGE = 0x9,
  PARAM_TYPE_VARIABLE = 0xA,
  PARAM_TYPE_ANIMATION = 0xB,
  PARAM_TYPE_EVENT = 0xC,
  PARAM_TYPE_GUIRESOURCE = 0xD,
  PARAM_TYPE_FONT_FILTER = 0xE,
  PARAM_TYPE_ANIMEVENT = 0xF,
  PARAM_TYPE_SEQUENCE = 0x10,
  PARAM_TYPE_INIT_BOOL = 0x11,
  PARAM_TYPE_INIT_INT = 0x12,
  PARAM_TYPE_GENERALRESOURCE = 0x13,
};

enum cGUIObjText::CONDITION : __int32
{
  CONDITION_STOP_0 = 0x0,
  CONDITION_NORMAL_0 = 0x1,
  CONDITION_TIME_0 = 0x2,
  CONDITION_STAY_0 = 0x3,
  CONDITION_PAGE_0 = 0x4,
  CONDITION_DISP_0 = 0x5,
  CONDITION_NUM_0 = 0x6,
};

enum cGUIObjTexture::TILING : __int32
{
  TILING_NONE = 0x0,
  TILING_SCALE = 0x1,
  TILING_NO_SCALE = 0x2,
  TILING_NUM = 0x3,
};

enum cGUIObjPolygon::VERTEX : __int32
{
  VERTEX_LT = 0x0,
  VERTEX_RT = 0x1,
  VERTEX_LB = 0x2,
  VERTEX_RB = 0x3,
  VERTEX_NUM = 0x4,
};

enum cParticleManager::MAN_RNO_TBL : __int32
{
  MAN_RNO_INIT = 0x0,
  MAN_RNO_WAIT = 0x1,
  MAN_RNO_READY = 0x2,
  MAN_RNO_SET = 0x3,
  MAN_RNO_INTERVAL = 0x4,
  MAN_RNO_FINISH = 0x5,
  MAN_RNO_REVIVAL = 0x6,
  MAN_RNO_KILL = 0x7,
};

enum rEffectList::LIFE_TYPE : __int32
{
  LIFE_TYPE_NONE = 0x0,
  LIFE_TYPE_FRAME_ALPHA = 0x1,
  LIFE_TYPE_FRAME_COLOR = 0x2,
  LIFE_TYPE_KEYFRAME_ALPHA = 0x3,
  LIFE_TYPE_KEYFRAME_COLOR = 0x4,
  LIFE_TYPE_HIDEFRAME_ALPHA = 0x5,
  LIFE_TYPE_HIDEFRAME_COLOR = 0x6,
  LIFE_TYPE_CURVEFRAME_ALPHA = 0x7,
  LIFE_TYPE_CURVEFRAME_COLOR = 0x8,
  LIFE_TYPE_NUM = 0x9,
};

enum rEffectList::GENERATOR_OPTION_FLAG : __int32
{
  GENERATOR_OPTION_FLAG_SYNCHRO_VANISH = 0x1,
  GENERATOR_OPTION_FLAG_REVIVAL = 0x2,
  GENERATOR_OPTION_FLAG_VOLUME_FIX = 0x4,
  GENERATOR_OPTION_FLAG_DIR_BLEND = 0x8,
  GENERATOR_OPTION_FLAG_KF_SET_NUM_RESET = 0x200,
  GENERATOR_OPTION_FLAG_LIMITED_RESTART = 0x1000,
  GENERATOR_OPTION_FLAG_LIFE_CURVE = 0x8000000,
};

enum cParticleManager::DRAW_TYPE : __int32
{
  DRAW_TYPE_BILLBOARD = 0x0,
  DRAW_TYPE_POLYLINE = 0x1,
  DRAW_TYPE_POLYGON = 0x2,
  DRAW_TYPE_TEXLINE = 0x3,
  DRAW_TYPE_LINE = 0x4,
  DRAW_TYPE_MODEL = 0x5,
  DRAW_TYPE_PRIM_MODEL = 0x6,
  DRAW_TYPE_LENS_FLARE = 0x7,
  DRAW_TYPE_POLYGON_STRIP = 0x8,
  DRAW_TYPE_BILLBOARD_STRIP = 0x9,
  DRAW_TYPE_SIZE_BILLBOARD = 0xA,
  DRAW_TYPE_AXIS_POLYGON = 0xB,
  DRAW_TYPE_REPEAT_POLYLINE = 0xC,
  DRAW_TYPE_TRAIL = 0xD,
  DRAW_TYPE_LIGHT_SHAFT = 0xE,
  DRAW_TYPE_CLOTH_POLYLINE = 0xF,
  DRAW_TYPE_CLOTH_TEXLINE = 0x10,
  DRAW_TYPE_CLOTH_LINE = 0x11,
  DRAW_TYPE_CLOTH_POLYGON = 0x12,
  DRAW_TYPE_CLOTH_REPEAT_POLYLINE = 0x13,
  DRAW_TYPE_MASS_BILLBOARD = 0x14,
  DRAW_TYPE_POINT = 0x15,
  DRAW_TYPE_GPU_LINE = 0x16,
  DRAW_TYPE_GPU_BILLBOARD = 0x17,
  DRAW_TYPE_GPU_POLYLINE = 0x18,
  DRAW_TYPE_CULLING_BILLBOARD = 0x19,
  DRAW_TYPE_CULLING_POLYLINE = 0x1A,
  DRAW_TYPE_CULLING_POLYGON = 0x1B,
  DRAW_TYPE_CULLING_TEXLINE = 0x1C,
  DRAW_TYPE_CULLING_LINE = 0x1D,
  DRAW_TYPE_CULLING_MODEL = 0x1E,
  DRAW_TYPE_CULLING_PRIM_MODEL = 0x1F,
  DRAW_TYPE_CULLING_POLYGON_STRIP = 0x20,
  DRAW_TYPE_CULLING_BILLBOARD_STRIP = 0x21,
  DRAW_TYPE_CULLING_SIZE_BILLBOARD = 0x22,
  DRAW_TYPE_CULLING_AXIS_POLYGON = 0x23,
  DRAW_TYPE_CULLING_REPEAT_POLYLINE = 0x24,
  DRAW_TYPE_CULLING_TRAIL = 0x25,
  DRAW_TYPE_CULLING_LIGHT_SHAFT = 0x26,
  DRAW_TYPE_CULLING_CLOTH_POLYLINE = 0x27,
  DRAW_TYPE_CULLING_CLOTH_TEXLINE = 0x28,
  DRAW_TYPE_CULLING_CLOTH_LINE = 0x29,
  DRAW_TYPE_CULLING_CLOTH_POLYGON = 0x2A,
  DRAW_TYPE_CULLING_CLOTH_REPEAT_POLYLINE = 0x2B,
  DRAW_TYPE_CULLING_MASS_BILLBOARD = 0x2C,
  DRAW_TYPE_CULLING_POINT = 0x2D,
  DRAW_TYPE_CULLING_GPU_LINE = 0x2E,
  DRAW_TYPE_CULLING_GPU_BILLBOARD = 0x2F,
  DRAW_TYPE_CULLING_GPU_POLYLINE = 0x30,
  DRAW_TYPE_CUSTOM = 0x31,
  DRAW_TYPE_ADHESION = 0x32,
  DRAW_TYPE_NO_VOLUME_BLEND = 0x33,
  DRAW_TYPE_FILTER = 0x34,
  DRAW_TYPE_LIGHT = 0x35,
  DRAW_TYPE_HIT = 0x36,
  DRAW_TYPE_NONE = 0x37,
};

typedef rEffectList::EFL_PARAM_CLOTH_ZIGZAG rEffectList::EFL_PARAM_CLOTH_ZIGZAG_0;

typedef rEffectList::EFL_PARAM_LINE_FIX_END rEffectList::EFL_PARAM_LINE_FIX_END_0;

typedef rEffectList::EFL_PARAM_LINE_ZIGZAG rEffectList::EFL_PARAM_LINE_ZIGZAG_0;

enum rEffectList::PARTICLE_OPTION_FLAG : __int32
{
  PARTICLE_OPTION_FLAG_OT_DEPTH = 0x1,
  PARTICLE_OPTION_FLAG_OT_FIX = 0x2,
  PARTICLE_OPTION_FLAG_DEPTH_BLEND = 0x4,
  PARTICLE_OPTION_FLAG_INV_VOLUME = 0x8,
  PARTICLE_OPTION_FLAG_ALPHA_BLUR = 0x10,
  PARTICLE_OPTION_FLAG_NO_REDUCTION = 0x20,
  PARTICLE_OPTION_FLAG_NO_CLIP = 0x40,
  PARTICLE_OPTION_FLAG_NO_ZTEST = 0x80,
  PARTICLE_OPTION_FLAG_OT_UNIT = 0x100,
  PARTICLE_OPTION_FLAG_WMAT_SCALE = 0x200,
  PARTICLE_OPTION_FLAG_PARALLAX = 0x400,
  PARTICLE_OPTION_FLAG_DEPTH_VOLUME = 0x800,
  PARTICLE_OPTION_FLAG_NO_FOG = 0x1000,
  PARTICLE_OPTION_FLAG_NO_TONEMAP = 0x2000,
  PARTICLE_OPTION_FLAG_BLUR = 0x4000,
  PARTICLE_OPTION_FLAG_MODEL_ALPHATEST = 0x8000,
  PARTICLE_OPTION_FLAG_PAT_CENTER = 0x10000,
  PARTICLE_OPTION_FLAG_EXT_LINE_POS = 0x20000,
  PARTICLE_OPTION_FLAG_MDLSCL_AFTER = 0x40000,
  PARTICLE_OPTION_FLAG_EDGE_ALPHA_OFF = 0x80000,
  PARTICLE_OPTION_FLAG_ROT_LOCAL = 0x100000,
  PARTICLE_OPTION_FLAG_ROT_INIT = 0x200000,
  PARTICLE_OPTION_FLAG_BACKFACE_CULLING = 0x400000,
  PARTICLE_OPTION_FLAG_BOTHFACE_DRAW = 0x800000,
  PARTICLE_OPTION_FLAG_MODEL_REFRACT = 0x1000000,
  PARTICLE_OPTION_FLAG_MODEL_UV_REFRACT = 0x2000000,
  PARTICLE_OPTION_FLAG_ZWRITE = 0x4000000,
  PARTICLE_OPTION_FLAG_DEPTH_COMPARE = 0x8000000,
  PARTICLE_OPTION_FLAG_DISTORTION = 0x10000000,
  PARTICLE_OPTION_FLAG_ZBLUR = 0x20000000,
  PARTICLE_OPTION_FLAG_SECTION_ZBLUR = 0x40000000,
  PARTICLE_OPTION_FLAG_POINT_FILTER = 0x80000000,
  PARTICLE_OPTION_FLAG_STANDARD_MASK = 0xFC007FFF,
  PARTICLE_OPTION_FLAG_ADDITIONAL_MASK = 0x3FF8000,
  PARTICLE_OPTION_FLAG_ROT_MASK = 0x340000,
  PARTICLE_OPTION_FLAG_BILLBOARD_MASK = 0x10000,
  PARTICLE_OPTION_FLAG_LINE_MASK = 0x20000,
  PARTICLE_OPTION_FLAG_POLYGON_MASK = 0xF40000,
  PARTICLE_OPTION_FLAG_MODEL_MASK = 0x3348000,
  PARTICLE_OPTION_FLAG_PRIM_MODEL_MASK = 0xFC0000,
  PARTICLE_OPTION_FLAG_MODEL_UNIT_MASK = 0x340200,
  PARTICLE_OPTION_FLAG_MODEL_EXCL_MASK = 0x70000400,
  PARTICLE_OPTION_FLAG_NOTEX_EXCL_MASK = 0x10004C10,
  PARTICLE_OPTION_FLAG_GPU_EXCL_MASK = 0x18004C19,
  PARTICLE_OPTION_FLAG_OT_EXCL_MASK = 0x103,
  PARTICLE_OPTION_FLAG_VL_EXCL_MASK = 0x73004C18,
  PARTICLE_OPTION_FLAG_LITE_EXCL_MASK = 0x7B0C4C2C,
};

enum rEffectList::MOVE_OPTION_FLAG : __int32
{
  MOVE_OPTION_FLAG_COLLISION = 0x1,
  MOVE_OPTION_FLAG_GRAVITY_NO_SCALE = 0x2,
  MOVE_OPTION_FLAG_HIGH_ACCRACY = 0x4,
  MOVE_OPTION_FLAG_ALWAYS_CORRECT = 0x8,
  MOVE_OPTION_FLAG_ROT_LOCAL = 0x10,
  MOVE_OPTION_FLAG_ALWAYS_CORRECT_RELEASE = 0x20,
  MOVE_OPTION_FLAG_LITE_COLLISION = 0x40,
  MOVE_OPTION_FLAG_FAST = 0x1000000,
  MOVE_OPTION_FLAG_COLL_EXCL_MASK = 0x41,
  MOVE_OPTION_FLAG_AC_EXCL_MASK = 0x28,
  MOVE_OPTION_FLAG_NONE_EXCL_MASK = 0x3E,
  MOVE_OPTION_FLAG_PATH_EXCL_MASK = 0x28,
  MOVE_OPTION_FLAG_CONST_UPDATE = 0x2C,
};

enum rEffectList::RANGE_OPTION_FLAG : __int32
{
  RANGE_OPTION_FLAG_EACH_FRAME = 0x1,
  RANGE_OPTION_FLAG_COLLISION = 0x10,
  RANGE_OPTION_FLAG_COLL_NORM = 0x20,
};

enum rEffectList::RELATION_SCALE_TYPE : __int32
{
  RELATION_SCALE_TYPE_FULL = 0x0,
  RELATION_SCALE_TYPE_OFS = 0x1,
  RELATION_SCALE_TYPE_NONE = 0x2,
  RELATION_SCALE_TYPE_NUM = 0x3,
};

enum rEffectList::CULLING_FLAG : __int32
{
  CULLING_FLAG_ON = 0x1,
  CULLING_FLAG_OCCLUSION = 0x2,
  CULLING_FLAG_PARTICLE = 0x4,
  CULLING_FLAG_GENERATOR = 0x40,
  CULLING_FLAG_ANGLE = 0x80,
};

enum rEffectList::MOVE_TYPE : __int32
{
  MOVE_TYPE_NONE = 0x0,
  MOVE_TYPE_ADD = 0x1,
  MOVE_TYPE_MUL = 0x2,
  MOVE_TYPE_PATH_STRIP = 0x3,
  MOVE_TYPE_PATH_CHAIN = 0x4,
  MOVE_TYPE_PATH_KEYFRAME = 0x5,
  MOVE_TYPE_PATH_LINE = 0x6,
  MOVE_TYPE_CUSTOM = 0x7,
  MOVE_TYPE_SPIN = 0x8,
  MOVE_TYPE_NUM = 0x9,
  MOVE_TYPE_ADD_FAST = 0x9,
  MOVE_TYPE_MUL_FAST = 0xA,
  MOVE_TYPE_SPIN_FAST = 0xB,
};

enum rEffectList::RANGE_TYPE : __int32
{
  RANGE_TYPE_NONE = 0x0,
  RANGE_TYPE_X_BOX = 0x1,
  RANGE_TYPE_Y_BOX = 0x2,
  RANGE_TYPE_Z_BOX = 0x3,
  RANGE_TYPE_X_CYLINDER = 0x4,
  RANGE_TYPE_Y_CYLINDER = 0x5,
  RANGE_TYPE_Z_CYLINDER = 0x6,
  RANGE_TYPE_SPHERE = 0x7,
  RANGE_TYPE_HEMISPHERE = 0x8,
  RANGE_TYPE_NUM = 0x9,
};

enum rEffectList::RANGE_DISPERSE_TYPE : __int32
{
  RANGE_DISPERSE_TYPE_NONE = 0x0,
  RANGE_DISPERSE_TYPE_OLD = 0x1,
  RANGE_DISPERSE_TYPE_SUB = 0x2,
  RANGE_DISPERSE_TYPE_NUM = 0x3,
};

enum rEffectList::RANGE_DIR_TYPE : __int32
{
  RANGE_DIR_TYPE_NONE = 0x0,
  RANGE_DIR_TYPE_DIFFUSE = 0x1,
  RANGE_DIR_TYPE_CONVERGE = 0x2,
  RANGE_DIR_TYPE_UNIT = 0x3,
  RANGE_DIR_TYPE_NUM = 0x4,
};

enum rEffectList::BOUNDARY_FLAG : __int32
{
  BOUNDARY_SPHERE = 0x1,
  BOUNDARY_AABB = 0x2,
  BOUNDARY_DIST = 0x4,
};

enum rEffectList::CHAIN_OPTION_FLAG : __int32
{
  CHAIN_OPTION_FLAG_NO_MAT_DIR = 0x1,
  CHAIN_OPTION_FLAG_NO_MAT_BDIR = 0x2,
  CHAIN_OPTION_FLAG_REF_RANGE_DIR = 0x4,
  CHAIN_OPTION_FLAG_REF_RANGE_BDIR = 0x8,
  CHAIN_OPTION_FLAG_FORCE_BLEND = 0x10,
  CHAIN_OPTION_FLAG_MUL_MAT_BDIR = 0x20,
  CHAIN_OPTION_FLAG_STRETCH = 0x40,
  CHAIN_OPTION_FLAG_CLOTH_EXCL_MASK = 0x40,
};

enum rEffectList::PRIM_ROT_OPTION_FLAG : __int32
{
  PRIM_ROT_OPTION_FLAG_ADD_RANDOM_REVERSE = 0x1,
  PRIM_ROT_OPTION_FLAG_TURN_SUBPOS = 0x2,
  PRIM_ROT_OPTION_FLAG_ADJUST_SUBPOS_DIST = 0x4,
  PRIM_ROT_OPTION_FLAG_ADD = 0x80,
  PRIM_ROT_OPTION_FLAG_MODEL_EXCL_MASK = 0x4,
};

enum rEffectList::CLOTH_OPTION_FLAG : __int32
{
  CLOTH_OPTION_FLAG_ORD_CONST_OFF = 0x1,
  CLOTH_OPTION_FLAG_REV_CONST_OFF = 0x2,
  CLOTH_OPTION_FLAG_DIST_CONV = 0x4,
  CLOTH_OPTION_FLAG_CURVE_RATIO_MODE = 0x8,
  CLOTH_OPTION_FLAG_CONST_OFF = 0x3,
};

enum rEffectList::CLOTH_CURVE_OPTION_FLAG : __int32
{
  CLOTH_CURVE_OPTION_FLAG_LENGTH_RATIO = 0x1,
  CLOTH_CURVE_OPTION_FLAG_VAMP_CURVE = 0x100,
  CLOTH_CURVE_OPTION_FLAG_VAMP_CORRECT = 0x200,
  CLOTH_CURVE_OPTION_FLAG_VAMP_INIT = 0x400,
};

enum rEffectList::COLL_FLAG : __int32
{
  COLL_FLAG_FIN_ANIM_STOP = 0x1,
  COLL_FLAG_FIN_ROT_STOP = 0x2,
  COLL_FLAG_FIN_KEEP_HOLD_OFF = 0x4,
  COLL_FLAG_PATH_CANCEL = 0x8,
  COLL_FLAG_SPHERE_CORRECT = 0x10,
  COLL_FLAG_ROT_ATTENUATE = 0x20,
  COLL_FLAG_LITE = 0x40,
};

enum rEffectList::REACTION_TYPE : __int32
{
  REACTION_TYPE_NONE = 0x0,
  REACTION_TYPE_CUSTOM_01 = 0x1,
  REACTION_TYPE_CUSTOM_02 = 0x2,
  REACTION_TYPE_CUSTOM_03 = 0x3,
  REACTION_TYPE_CUSTOM_04 = 0x4,
  REACTION_TYPE_CUSTOM_05 = 0x5,
  REACTION_TYPE_CUSTOM_06 = 0x6,
  REACTION_TYPE_CUSTOM_07 = 0x7,
  REACTION_TYPE_CUSTOM_08 = 0x8,
  REACTION_TYPE_CUSTOM_09 = 0x9,
  REACTION_TYPE_CUSTOM_0A = 0xA,
  REACTION_TYPE_CUSTOM_0B = 0xB,
  REACTION_TYPE_CUSTOM_0C = 0xC,
  REACTION_TYPE_CUSTOM_0D = 0xD,
  REACTION_TYPE_CUSTOM_0E = 0xE,
  REACTION_TYPE_CUSTOM_0F = 0xF,
  REACTION_TYPE_NUM = 0x10,
};

enum rEffectList::PATH_RELEASE_TYPE : __int32
{
  PATH_RELEASE_TYPE_NONE = 0x0,
  PATH_RELEASE_TYPE_WORK_SPEED = 0x1,
  PATH_RELEASE_TYPE_PATH_SPEED = 0x2,
  PATH_RELEASE_TYPE_NUM = 0x3,
};

enum rEffectList::PATH_OPTION_FLAG : __int32
{
  PATH_OPTION_FLAG_RELEASE_PATH_END = 0x1,
  PATH_OPTION_FLAG_KILL_PATH_END = 0x2,
  PATH_OPTION_FLAG_KEEP_HOLD_OFF_PATH_END = 0x4,
  PATH_OPTION_FLAG_REACH = 0x8,
  PATH_OPTION_FLAG_REACH_REVERSE = 0x10,
  PATH_OPTION_FLAG_REACH_CONTROL = 0x18,
  PATH_OPTION_FLAG_PATH_END_EXCL_MASK = 0x3,
  PATH_OPTION_FLAG_REACH_EXCL_MASK = 0x18,
};

enum rEffectList::FORCE_TYPE : __int32
{
  FORCE_TYPE_NONE = 0x0,
  FORCE_TYPE_BLEND = 0x1,
  FORCE_TYPE_CUSTOM_02 = 0x2,
  FORCE_TYPE_CUSTOM_03 = 0x3,
  FORCE_TYPE_CUSTOM_04 = 0x4,
  FORCE_TYPE_CUSTOM_05 = 0x5,
  FORCE_TYPE_CUSTOM_06 = 0x6,
  FORCE_TYPE_CUSTOM_07 = 0x7,
  FORCE_TYPE_CUSTOM_08 = 0x8,
  FORCE_TYPE_CUSTOM_09 = 0x9,
  FORCE_TYPE_CUSTOM_0A = 0xA,
  FORCE_TYPE_CUSTOM_0B = 0xB,
  FORCE_TYPE_CUSTOM_0C = 0xC,
  FORCE_TYPE_CUSTOM_0D = 0xD,
  FORCE_TYPE_CUSTOM_0E = 0xE,
  FORCE_TYPE_CUSTOM_0F = 0xF,
  FORCE_TYPE_CUSTOM_10 = 0x10,
  FORCE_TYPE_CUSTOM_11 = 0x11,
  FORCE_TYPE_CUSTOM_12 = 0x12,
  FORCE_TYPE_CUSTOM_13 = 0x13,
  FORCE_TYPE_CUSTOM_14 = 0x14,
  FORCE_TYPE_CUSTOM_15 = 0x15,
  FORCE_TYPE_CUSTOM_16 = 0x16,
  FORCE_TYPE_CUSTOM_17 = 0x17,
  FORCE_TYPE_CUSTOM_18 = 0x18,
  FORCE_TYPE_CUSTOM_19 = 0x19,
  FORCE_TYPE_CUSTOM_1A = 0x1A,
  FORCE_TYPE_CUSTOM_1B = 0x1B,
  FORCE_TYPE_CUSTOM_1C = 0x1C,
  FORCE_TYPE_CUSTOM_1D = 0x1D,
  FORCE_TYPE_CUSTOM_1E = 0x1E,
  FORCE_TYPE_CUSTOM_1F = 0x1F,
  FORCE_TYPE_NUM = 0x20,
};

struct __cppobj rEffectList::EFL_MOVE_BASE : rEffectList::EFL_MOVE_COMMON_0
{
  MtRangeF Rot[3];
  MtRangeF Speed;
  MtRangeF Gravity;
  unsigned __int32 KeyframeRotParamOffset : 16;
  unsigned __int32 KeyframeSpeedParamOffset : 16;
  unsigned __int32 KeyframeFallSpeedParamOffset : 16;
  unsigned __int32 MBase163e : 16;
};

typedef rEffectList::EFL_MOVE_BASE rEffectList::EFL_MOVE_BASE_0;

struct __cppobj rEffectList::EFL_MOVE_PATH_COMMON : rEffectList::EFL_MOVE_BASE_0
{
  unsigned __int32 ReleaseType : 8;
  unsigned __int32 OptionFlag : 8;
  unsigned __int32 KeyframeReleaseFrameParamOffset : 16;
  MtRangeU16 ReleaseFrame;
  MtRangeF Acceleration;
  MtRangeF Path3DScaleX;
  MtRangeF Path3DScaleY;
  MtRangeF Path3DScaleZ;
  MtRangeF PathLengthScale;
};

typedef rEffectList::EFL_MOVE_PATH_COMMON rEffectList::EFL_MOVE_PATH_COMMON_0;

struct __cppobj rEffectList::EFL_MOVE_PATH_STRIP : rEffectList::EFL_MOVE_PATH_COMMON_0
{
  MtRangeF Distance;
  unsigned __int32 PathStripType : 8;
  unsigned __int32 PathStripFlag : 8;
  unsigned __int32 PathStripPartsNo : 16;
  u32 PathCurveDivideNum;
  MT_CHAR PathStripPath[64];
  MtEaseCurve ReachCurve;
  MtRangeU16 ReachFrame;
  u32 MPathStrip32cc;
};

struct __cppobj rEffectList::EFL_MOVE_PATH_CHAIN : rEffectList::EFL_MOVE_PATH_COMMON_0
{
  MtRangeF Distance;
  unsigned __int32 ChainPosNum : 8;
  unsigned __int32 MPathChain0879 : 8;
  unsigned __int32 MPathChain087a : 8;
  unsigned __int32 MPathChain087b : 8;
  u32 MPathChain327c;
  rEffectList::EFL_PARAM_CHAIN_0 ChainParam;
};

struct __cppobj rEffectList::EFL_MOVE_PATH_KEYFRAME : rEffectList::EFL_MOVE_PATH_COMMON_0
{
  u32 KeyframeOfsParamOffset;
  u32 MPathKeyframe3274;
  u32 MPathKeyframe3278;
  u32 MPathKeyframe327c;
};

typedef rEffectList::EFL_PARTICLE_POLYGON_STRIP rEffectList::EFL_PARTICLE_POLYGON_STRIP_0;

struct __cppobj rEffectList::EFL_PARTICLE_POLYGON_STRIP : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  unsigned __int32 LineOfsNum : 8;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 LayerDivideNum : 4;
  unsigned __int32 ColorPlaceNo : 8;
  unsigned __int32 SplineDivideNum : 8;
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 PPolygonStrip04175 : 4;
  unsigned __int32 KeyframePlaceColorParamOffset : 16;
  unsigned __int32 KeyframeRotParamOffset : 16;
  unsigned __int32 KeyframeWidthParamOffset : 16;
  f32 WidthPlaceRate;
  MtColor PlaceColor[2];
  f32 RotAddCoef;
  MtRangeU16 FollowFrame;
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  MtRangeF Width;
  MtRangeF WidthAdd;
};

struct __cppobj rEffectList::EFL_MOVE_PATH_LINE : rEffectList::EFL_MOVE_PATH_COMMON_0
{
  MtRangeF Distance;
  f32 PathLength;
  u32 MPathLine327c;
};

struct __cppobj rEffectList::EFL_MOVE_ADD : rEffectList::EFL_MOVE_BASE_0
{
  MtRangeF Acceleration;
  MtRangeU16 AlwaysCorrectReleaseFrame;
  u32 MAdd324c;
};

struct __cppobj rEffectList::EFL_MOVE_MUL : rEffectList::EFL_MOVE_BASE_0
{
  MtRangeF SpeedCoef;
  MtRangeU16 AlwaysCorrectReleaseFrame;
  u32 MMul324c;
};

typedef rEffectList::EFL_MOVE_MUL rEffectList::EFL_MOVE_MUL_0;

struct __cppobj rEffectList::EFL_MOVE_SPIN : rEffectList::EFL_MOVE_MUL_0
{
  MtRangeF CircleRot[3];
  MtRangeF CircleRotAdd[3];
  MtVector3 CircleRotAddCoef;
  MtRangeF CircleRadius;
  MtRangeF CircleRadiusAdd;
  f32 CircleRadiusAddCoef;
  unsigned __int32 CircleRotAddRandomReverse : 1;
  unsigned __int32 CircleRadiusAddRandomReverse : 1;
  unsigned __int32 CircleAngleAddRandomReverse : 1;
  unsigned __int32 ApplyGeneratorRotation : 1;
  unsigned __int32 MSpin04a4 : 4;
  unsigned __int32 MSpin08a5 : 8;
  unsigned __int32 MSpin08a6 : 8;
  unsigned __int32 MSpin08a7 : 8;
  MtRangeF CircleAngle;
  MtRangeF CircleAngleAdd;
  f32 CircleAngleAddCoef;
  u32 MSpin32bc;
};

typedef rEffectList::EFL_MOVE_PATH_STRIP rEffectList::EFL_MOVE_PATH_STRIP_0;

typedef rEffectList::EFL_MOVE_PATH_CHAIN rEffectList::EFL_MOVE_PATH_CHAIN_0;

typedef rEffectList::EFL_MOVE_PATH_KEYFRAME rEffectList::EFL_MOVE_PATH_KEYFRAME_0;

typedef rEffectList::EFL_MOVE_ADD rEffectList::EFL_MOVE_ADD_0;

typedef rEffectList::EFL_MOVE_PATH_LINE rEffectList::EFL_MOVE_PATH_LINE_0;

typedef rEffectList::EFL_MOVE_SPIN rEffectList::EFL_MOVE_SPIN_0;

enum rEffectStrip::STRIP_FLAG : __int32
{
  STRIP_FLAG_ORDER = 0x1,
  STRIP_FLAG_REVERSE = 0x2,
  STRIP_FLAG_NORM_OFF = 0x4,
  STRIP_FLAG_PATH_LOOP = 0x8,
  STRIP_FLAG_CENTER_FIX = 0x10,
  STRIP_FLAG_ALL_PARTS = 0x20,
  STRIP_FLAG_SKINING = 0x40,
};

enum nEffect::KEYFRAME_INP_TYPE : __int32
{
  KEYFRAME_INP_TYPE_LINEAR = 0x0,
  KEYFRAME_INP_TYPE_HERMITE = 0x1,
  KEYFRAME_INP_TYPE_SPLINE = 0x2,
  KEYFRAME_INP_TYPE_CONSTANT = 0x3,
  KEYFRAME_INP_TYPE_NUM = 0x4,
};

enum nEffect::COLOR_FLAG : __int32
{
  COLOR_FLAG_R_BLEND = 0x1,
  COLOR_FLAG_G_BLEND = 0x2,
  COLOR_FLAG_B_BLEND = 0x4,
  COLOR_FLAG_A_BLEND = 0x8,
  COLOR_FLAG_EACH_RANDOM = 0x10,
  COLOR_FLAG_CHOICE = 0x20,
  COLOR_FLAG_BLEND = 0xF,
  COLOR_FLAG_DUAL = 0x2F,
};

enum nEffect::EFC_LOD : __int32
{
  EFC_LOD_HML = 0x0,
  EFC_LOD_HMM = 0x1,
  EFC_LOD_HHM = 0x2,
  EFC_LOD_LMH = 0x3,
  EFC_LOD_MMH = 0x4,
  EFC_LOD_MHH = 0x5,
  EFC_LOD_HHH = 0x6,
  EFC_LOD_NUM = 0x7,
  EFC_LOD_TBL_NUM = 0x6,
};

enum nEffect::KEYFRAME_STATUS : __int32
{
  KEYFRAME_STATUS_INP = 0x0,
  KEYFRAME_STATUS_KEY = 0x1,
  KEYFRAME_STATUS_TOP = 0x2,
  KEYFRAME_STATUS_END = 0x3,
};

enum cParticle::PTCL_STATUS : __int32
{
  PTCL_STATUS_UNIQUE0 = 0x1,
  PTCL_STATUS_UNIQUE1 = 0x2,
  PTCL_STATUS_UNIQUE2 = 0x4,
  PTCL_STATUS_UNIQUE3 = 0x8,
  PTCL_STATUS_UNIQUE4 = 0x10,
  PTCL_STATUS_UNIQUE5 = 0x20,
  PTCL_STATUS_UNIQUE6 = 0x40,
  PTCL_STATUS_UNIQUE7 = 0x80,
  PTCL_STATUS_CALC_SCALE = 0x100,
  PTCL_STATUS_CALC_LENGTH = 0x200,
  PTCL_STATUS_CALC_ROT = 0x400,
  PTCL_STATUS_CALC_TEX_SCRL_U = 0x800,
  PTCL_STATUS_CALC_TEX_SCRL_V = 0x1000,
  PTCL_STATUS_RESET_CLOTH = 0x2000,
  PTCL_STATUS_SYMMETRY = 0x4000,
  PTCL_STATUS_CURVE_MODEL_SCALE_ADD = 0x8000,
  PTCL_STATUS_KEYFRAME_INTENSITY = 0x10000,
  PTCL_STATUS_KEYFRAME_COLOR = 0x20000,
  PTCL_STATUS_KEYFRAME_PLACE_COLOR = 0x40000,
  PTCL_STATUS_KEYFRAME_PAT_NO = 0x80000,
  PTCL_STATUS_KEYFRAME_SCALE = 0x100000,
  PTCL_STATUS_KEYFRAME_ROT = 0x200000,
  PTCL_STATUS_KEYFRAME_LENGTH = 0x400000,
  PTCL_STATUS_KEYFRAME_MODEL_SCALE = 0x800000,
  PTCL_STATUS_KEYFRAME_UNIQUE0 = 0x1000000,
  PTCL_STATUS_KEYFRAME_UNIQUE1 = 0x2000000,
  PTCL_STATUS_KEYFRAME_UNIQUE2 = 0x4000000,
  PTCL_STATUS_KEYFRAME_UNIQUE3 = 0x8000000,
  PTCL_STATUS_KEYFRAME_LIFE_RATE = 0x10000000,
  PTCL_STATUS_KEYFRAME_TEX_SCRL_U = 0x20000000,
  PTCL_STATUS_KEYFRAME_TEX_SCRL_V = 0x40000000,
  PTCL_STATUS_KEYFRAME_FORBID = 0x80000000,
  PTCL_STATUS_UPDATE_SCALE = 0x100100,
  PTCL_STATUS_UPDATE_ROT = 0x200400,
  PTCL_STATUS_UPDATE_TEX_SCRL_U = 0x20000800,
  PTCL_STATUS_UPDATE_TEX_SCRL_V = 0x40001000,
  PTCL_STATUS_CALC_ANGLE = 0x1,
  PTCL_STATUS_CALC_WIDTH = 0x2,
  PTCL_STATUS_CALC_HEIGHT = 0x4,
  PTCL_STATUS_CALC_A_RATIO = 0x8,
  PTCL_STATUS_KEYFRAME_ANGLE = 0x1000000,
  PTCL_STATUS_KEYFRAME_WIDTH = 0x2000000,
  PTCL_STATUS_KEYFRAME_HEIGHT = 0x4000000,
  PTCL_STATUS_CALC_HEAD_SIZE = 0x1,
  PTCL_STATUS_CALC_PLACE_SIZE = 0x2,
  PTCL_STATUS_OVERFLOW_SIZE = 0x4,
  PTCL_STATUS_KEYFRAME_HEAD_SIZE = 0x1000000,
  PTCL_STATUS_KEYFRAME_PLACE_SIZE = 0x2000000,
  PTCL_STATUS_UPDATE_PARTS_NO = 0x1,
  PTCL_STATUS_UPDATE_MATERIAL = 0x2,
  PTCL_STATUS_INIT_PARTS_NO = 0x4,
  PTCL_STATUS_CALC_PARTS_NO = 0x8,
  PTCL_STATUS_CONSTANT_MODEL_UV = 0x10,
  PTCL_STATUS_KEYFRAME_PARTS_NO = 0x1000000,
  PTCL_STATUS_KEYFRAME_PARTS_SPEED = 0x2000000,
  PTCL_STATUS_KEYFRAME_UPPER_RADIUS = 0x1000000,
  PTCL_STATUS_KEYFRAME_LOWER_RADIUS = 0x2000000,
  PTCL_STATUS_KEYFRAME_UPPER_HEIGHT = 0x4000000,
  PTCL_STATUS_KEYFRAME_LOWER_HEIGHT = 0x8000000,
  PTCL_STATUS_CALC_FILTER_COLOR = 0x1,
  PTCL_STATUS_CALC_FILTER_INTENSITY = 0x2,
  PTCL_STATUS_CALC_ATT_DIST = 0x1,
  PTCL_STATUS_CALC_ATT_DIST_SPOT = 0x2,
  PTCL_STATUS_CALC_RADIUS = 0x1,
  PTCL_STATUS_FOLLOW_CANCEL = 0x1,
};

enum cParticle::PTCL_RNO_LINE_FIX_END : __int32
{
  PTCL_RNO_LINE_FIX_END_NONE = 0x0,
  PTCL_RNO_LINE_FIX_END_CHECK = 0x1,
  PTCL_RNO_LINE_FIX_END_RELEASE = 0x2,
};

enum cParticle::PTCL_COLL_STATUS : __int32
{
  PTCL_COLL_STATUS_CALC_RADIUS = 0x1,
};

enum cParticle::PTCL_MOVE_RNO_TBL : __int32
{
  PTCL_MOVE_RNO_STOP = 0x0,
  PTCL_MOVE_RNO_COLL = 0x1,
  PTCL_MOVE_RNO_MOVE = 0x2,
  PTCL_MOVE_RNO_KILL = 0x3,
};

enum cParticle::PTCL_MOVE_STATUS : __int32
{
  PTCL_MOVE_STATUS_CALC_PATH = 0x1,
  PTCL_MOVE_STATUS_CALC_ROT = 0x2,
  PTCL_MOVE_STATUS_KEYFRAME_ROT = 0x10,
  PTCL_MOVE_STATUS_KEYFRAME_FIXROT = 0x20,
  PTCL_MOVE_STATUS_KEYFRAME_SPEED = 0x40,
  PTCL_MOVE_STATUS_KEYFRAME_FALL_SPEED = 0x80,
  PTCL_MOVE_STATUS_CORRECT_INIT = 0x100,
  PTCL_MOVE_STATUS_CORRECT = 0x200,
  PTCL_MOVE_STATUS_CORRECT_RELEASE = 0x400,
  PTCL_MOVE_STATUS_CALC_PATH_REACH = 0x800,
  PTCL_MOVE_STATUS_CALC_PATH_REACH_REVERSE = 0x1000,
  PTCL_MOVE_STATUS_HIT_CANCEL = 0xC0,
  PTCL_MOVE_STATUS_CALC_PATH_REACH_CONTROL = 0x1800,
};

enum nPrim::MDShadeStype : __int32
{
  MD_SHADE_OFF = 0x0,
  MD_SHADE_MUL = 0x1,
  MD_SHADE_GRAD = 0x2,
  MD_SHADE_MAX = 0x3,
  MD_SHADE_FORCEWORD = 0xFFFFFFFF,
};

struct nPrim::MetaDataShade::$F8FB97C2F928927C449EBA2778FC832A::$C9688AD1EE607DBFB7A502B347B51A11
{
  unsigned __int32 type : 4;
  unsigned __int32 pad : 28;
};

union nPrim::MetaDataShade::$F8FB97C2F928927C449EBA2778FC832A
{
  nPrim::MetaDataShade::$F8FB97C2F928927C449EBA2778FC832A::$C9688AD1EE607DBFB7A502B347B51A11 _anon_0;
  u32 pad00;
};

struct __attribute__((aligned(8))) nPrim::MetaDataShade
{
  MtVector3 light_pos;
  MtVector3 light_col;
  f32 light_range;
  f32 light_att;
  nPrim::MetaDataShade::$F8FB97C2F928927C449EBA2778FC832A _anon_0;
};

enum cClothVertex::CLOTH_STATUS : __int32
{
  CLOTH_STATUS_UPDATE_VERTEX = 0x1,
};

enum cEffectChain::CHAIN_STATUS : __int32
{
  CHAIN_STATUS_BLEND = 0x1,
  CHAIN_STATUS_CALC_LENGTH = 0x2,
  CHAIN_STATUS_KEYFRAME_LENGTH = 0x4,
  CHAIN_STATUS_KEYFRAME_ROT = 0x8,
  CHAIN_STATUS_KEYFRAME_BLEND_ROT = 0x10,
  CHAIN_STATUS_KEYFRAME_BLEND_RATE = 0x20,
  CHAIN_STATUS_CONSTRAIN_ORD = 0x40,
  CHAIN_STATUS_CONSTRAIN_REV = 0x80,
  CHAIN_STATUS_RESET = 0x100,
  CHAIN_STATUS_STRETCH_LENGTH = 0x200,
};

enum cEffectChain::CHAIN_MODE : __int32
{
  CHAIN_MODE_PARTICLE = 0x0,
  CHAIN_MODE_PATH = 0x1,
  CHAIN_MODE_CLOTH_POLYGON = 0x2,
};

struct cPolygonStrip
{
  __int8 baseclass_0[152];
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  f32 mPatNoKeyframeRate;
  f32 mWidthPlaceRate;
  __attribute__((aligned(16))) MtVector3 mStripPos[2][2];
  MtVector3 mRot[2];
  f32 mWidth[2];
  f32 mWidthAdd;
  unsigned __int32 mStripTimer : 16;
  unsigned __int32 mFollowTimer : 16;
  MtVector3 mRotAdd;
};

struct cPrimDrawParam
{
  MtVector4 mParam;
  MtColor mColor[2];
  u32 mIntensity;
  s32 mOtDepth;
  s32 mZofs;
  u32 mDrawBuffOffset;
  u32 mSplineDivideNum;
  u32 mLayerDivideNum;
};

struct __cppobj cEffectClothPolygon : cEffectChain
{
  unsigned __int32 mChainNum : 8;
  unsigned __int32 mWaveFlag : 8;
  unsigned __int32 mVertexBuffSize : 16;
  unsigned __int32 mChainWaveParamOffset : 16;
  unsigned __int32 mVertexWaveParamOffset : 16;
  f32 mVertexMaxCoef;
  f32 mFoldDist;
  f32 mChainWaveForce;
  f32 mVertexWaveForce;
  u32 mClothPolygon3298;
  u32 mClothPolygon329c;
  MtRangeF mChainWaveSpeed;
  MtRangeF mVertexWaveSpeed;
  MtLogisticMap mChainWaveCycle;
  MtLogisticMap mVertexWaveCycle;
  MtVector3 mNorm;
};

struct cTextureScroll
{
  MtFloat2 mOffset[2];
  f32 mSpeedU;
  f32 mSpeedV;
  u32 mStatus;
  f32 mSpeedCoef;
};

struct cEffectLineFix
{
  MtVector3 mRot[2];
  MtVector3 mRotAdd;
  MtVector3 mModelScale[2];
  MtVector3 mModelScaleAdd;
};

struct cEffectLineFixEnd
{
  cEffectStrip mStrip;
  f32 mReleaseDist;
  u32 mLineFixEnd3214;
  u32 mLineFixEnd3218;
  u32 mLineFixEnd321c;
};

struct __cppobj cEffectLineZigzag : cEffectLineLength
{
  MtVector3 mModelScale[2];
  MtVector3 mModelScaleAdd;
  MtVector3 mVertexAmplitude;
  u32 mVertexRandCtr;
  u32 mVertexUpdateTimer;
  u32 mLineZigzag3288;
  u32 mLineZigzag328c;
};

struct MtSpline
{
  int (**_vptr$MtSpline)(void);
  __attribute__((aligned(16))) MtVector4 mParam[4];
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorBillboard : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorBillboard::MyDTI : MtDTI
{
};

enum rEffectList::CLOTH_TYPE : __int32
{
  CLOTH_TYPE_CHAIN = 0x0,
  CLOTH_TYPE_CURVE = 0x1,
  CLOTH_TYPE_ZIGZAG = 0x2,
  CLOTH_TYPE_STRAIGHT = 0x3,
  CLOTH_TYPE_NUM = 0x4,
};

enum rEffectList::LINE_TYPE : __int32
{
  LINE_TYPE_FOLLOW = 0x0,
  LINE_TYPE_FIX = 0x1,
  LINE_TYPE_FIX_END = 0x2,
  LINE_TYPE_CHAIN = 0x3,
  LINE_TYPE_LENGTH = 0x4,
  LINE_TYPE_CLOTH = 0x5,
  LINE_TYPE_ZIGZAG = 0x6,
  LINE_TYPE_COMMON_07 = 0x7,
  LINE_TYPE_CUSTOM_08 = 0x8,
  LINE_TYPE_CUSTOM_09 = 0x9,
  LINE_TYPE_CUSTOM_0A = 0xA,
  LINE_TYPE_CUSTOM_0B = 0xB,
  LINE_TYPE_CUSTOM_0C = 0xC,
  LINE_TYPE_CUSTOM_0D = 0xD,
  LINE_TYPE_CUSTOM_0E = 0xE,
  LINE_TYPE_CUSTOM_0F = 0xF,
  LINE_TYPE_NUM = 0x10,
};

struct __cppobj rEffectList::EFL_PARTICLE_BILLBOARD : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  MtRangeF Angle;
  MtRangeF AngleAdd;
  MtRangeF AspectRatio;
  MtRangeF AspectRatioAdd;
  f32 AngleAddCoef;
  u32 AngleAddRandomReverse;
  u32 KeyframeAngleParamOffset;
  u32 ShadeLightParamOffset;
};

typedef rEffectList::EFL_PARAM_SHADE_LIGHT rEffectList::EFL_PARAM_SHADE_LIGHT_0;

struct rEffectList::EFL_PARAM_SHADE_LIGHT
{
  MtFloat3 Ofs;
  MtColor Color;
  f32 Range;
  f32 Attenuation;
  u32 KeyframeOfsParamOffset;
  unsigned __int32 KeyframeColorParamOffset : 16;
  unsigned __int32 KeyframeRangeParamOffset : 16;
};

typedef rEffectList::EFL_PARTICLE_BILLBOARD rEffectList::EFL_PARTICLE_BILLBOARD_0;

struct __cppobj rEffectList::EFL_PARTICLE_BILLBOARD_STRIP : rEffectList::EFL_PARTICLE_BILLBOARD_0
{
  unsigned __int32 LineType : 8;
  unsigned __int32 LineOfsNum : 8;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 BillboardStrip041a2 : 4;
  unsigned __int32 ColorPlaceNo : 8;
  u32 KeyframePlaceColorParamOffset;
  MtColor PlaceColor[2];
  u32 VertexInterpolateNum;
  u32 BillboardStrip321b4;
  u32 BillboardStrip321b8;
  u32 BillboardStrip321bc;
};

typedef rEffectList::EFL_PARTICLE_BILLBOARD_STRIP rEffectList::EFL_PARTICLE_BILLBOARD_STRIP_0;

struct __cppobj rEffectList::EFL_PARTICLE_SIZE_BILLBOARD : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  MtRangeF Angle;
  MtRangeF AngleAdd;
  MtRangeF Width;
  MtRangeF WidthAdd;
  MtRangeF Height;
  MtRangeF HeightAdd;
  MtFloat2 PatCenterCoef;
  f32 AngleAddCoef;
  unsigned __int32 AngleAddRandomReverse : 1;
  unsigned __int32 PSizeBillboard071ac : 7;
  unsigned __int32 PSizeBillboard081ad : 8;
  unsigned __int32 PSizeBillboard161ae : 16;
  u32 ShadeLightParamOffset;
  u32 KeyframeAngleParamOffset;
  u32 KeyframeWidthParamOffset;
  u32 KeyframeHeightParamOffset;
};

typedef rEffectList::EFL_PARTICLE_SIZE_BILLBOARD rEffectList::EFL_PARTICLE_SIZE_BILLBOARD_0;

enum nEffect::COLOR_CORRECT_TYPE : __int32
{
  COLOR_CORRECT_TYPE_NONE = 0x0,
  COLOR_CORRECT_TYPE_CUSTOM_01 = 0x1,
  COLOR_CORRECT_TYPE_CUSTOM_02 = 0x2,
  COLOR_CORRECT_TYPE_CUSTOM_03 = 0x3,
  COLOR_CORRECT_TYPE_CUSTOM_04 = 0x4,
  COLOR_CORRECT_TYPE_CUSTOM_05 = 0x5,
  COLOR_CORRECT_TYPE_CUSTOM_06 = 0x6,
  COLOR_CORRECT_TYPE_CUSTOM_07 = 0x7,
  COLOR_CORRECT_TYPE_CUSTOM_08 = 0x8,
  COLOR_CORRECT_TYPE_CUSTOM_09 = 0x9,
  COLOR_CORRECT_TYPE_CUSTOM_0A = 0xA,
  COLOR_CORRECT_TYPE_CUSTOM_0B = 0xB,
  COLOR_CORRECT_TYPE_CUSTOM_0C = 0xC,
  COLOR_CORRECT_TYPE_CUSTOM_0D = 0xD,
  COLOR_CORRECT_TYPE_CUSTOM_0E = 0xE,
  COLOR_CORRECT_TYPE_CUSTOM_0F = 0xF,
  COLOR_CORRECT_TYPE_NUM = 0x10,
};

enum nEffect::PLACE_TYPE : __int32
{
  PLACE_TYPE_NONE = 0x0,
  PLACE_TYPE_INP_HP = 0x1,
  PLACE_TYPE_INP_HPH = 0x2,
  PLACE_TYPE_INP_HHP = 0x3,
  PLACE_TYPE_INP_HPP = 0x4,
  PLACE_TYPE_NUM = 0x5,
};

enum nPrim::Material::TransformType : __int32
{
  XFORM_HFLIP = 0x1,
  XFORM_VFLIP = 0x2,
  XFORM_LROTATE90 = 0x4,
};

struct nPrim::MetaDataOcclusion
{
  MtFloat3 wpos;
  f32 radius;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorBillboardStrip : cParticleGeneratorBillboard
{
};

struct __cppobj cParticleGeneratorBillboardStrip::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorSizeBillboard : cParticleGeneratorBillboard
{
};

struct __cppobj cParticleGeneratorSizeBillboard::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorLiteBillboard : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorLiteBillboard::MyDTI : MtDTI
{
};

struct __cppobj cBillboard : cParticle:960
{
  cEffectAnim mAnim;
  __attribute__((aligned(16))) MtVector4 mParam[2];
  MtColor mColor[2];
  MtColor mSrcColor;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mBillboard169e : 16;
  f32 mPatNoKeyframeRate;
  f32 mAngleAdd;
  f32 mAspectRatioAdd;
  u32 mBillboard32ac;
};

struct cBillboardStrip
{
  __int8 baseclass_0[152];
  cEffectAnim mAnim;
  __attribute__((aligned(16))) MtVector4 mParam[2];
  f32 mPatNoKeyframeRate;
  f32 mAngleAdd;
  f32 mAspectRatioAdd;
  unsigned __int32 mVertexInterpolateNum : 8;
  unsigned __int32 mBillboardStrip08bd : 8;
  unsigned __int32 mBillboardStrip08be : 8;
  unsigned __int32 mBillboardStrip08bf : 8;
};

struct __cppobj cSizeBillboard : cParticle:960
{
  cEffectAnim mAnim;
  __attribute__((aligned(16))) MtVector4 mParam[2];
  f32 mPatNoRate[2];
  MtColor mColor[2];
  f32 mAngle[2];
  MtColor mSrcColor;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mSizeBillboard16ae : 16;
  f32 mPatNoKeyframeRate;
  f32 mAngleAdd;
  f32 mWidthAdd;
  f32 mHeightAdd;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorCustom : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorCustom::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) cCustomParticle : cParticle:960
{
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  MtColor mColor[2];
  MtColor mSrcColor;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mCustom1686 : 16;
  f32 mSrcScale;
  f32 mPatNoKeyframeRate;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorFilter : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorFilter::MyDTI : MtDTI
{
};

enum rEffectList::CULLING_OPTION_FLAG : __int32
{
  CULLING_OPTION_FLAG_BOTH_DIR = 0x1,
  CULLING_OPTION_FLAG_ANGLE_OVERLAP = 0x1000,
  CULLING_OPTION_FLAG_DIST = 0x2000,
  CULLING_OPTION_FLAG_NEAR_CLIP = 0x4000,
  CULLING_OPTION_FLAG_FAR_CLIP = 0x8000,
};

enum rEffectList::GR_FILTER_OPTION_FLAG : __int32
{
  GR_FILTER_OPTION_FLAG_POS = 0x1,
  GR_FILTER_OPTION_FLAG_CUTOFF = 0x2,
  GR_FILTER_OPTION_FLAG_RATE_DECAY = 0x4,
  GR_FILTER_OPTION_FLAG_AFTER_GAMMA = 0x8,
  GR_FILTER_OPTION_FLAG_SHADOW = 0x10,
  GR_FILTER_OPTION_FLAG_GRAY = 0x20,
};

struct __cppobj rEffectList::EFL_PARTICLE_FILTER : rEffectList::EFL_PARTICLE_COMMON_0
{
  unsigned __int32 FilterType : 8;
  unsigned __int32 ScreenAttenuateFlag : 1;
  unsigned __int32 DistZAddFlag : 1;
  unsigned __int32 OcclusionEnable : 1;
  unsigned __int32 OcclusionWidthEnable : 1;
  unsigned __int32 PFilter0741 : 4;
  unsigned __int32 LocalPriority : 16;
  unsigned __int32 KeyframeColorParamOffset : 16;
  unsigned __int32 ScreenAttenuateDist : 16;
  f32 ScreenAttenuateRate;
  f32 OcclusionRadius;
  f32 StartZ;
  f32 EndZ;
  f32 StartZAdd;
  f32 EndZAdd;
};

typedef rEffectList::EFL_PARTICLE_RADIAL_BLUR_FILTER rEffectList::EFL_PARTICLE_RADIAL_BLUR_FILTER_0;

typedef rEffectList::EFL_PARTICLE_FILTER rEffectList::EFL_PARTICLE_FILTER_0;

struct __cppobj rEffectList::EFL_PARTICLE_RADIAL_BLUR_FILTER : rEffectList::EFL_PARTICLE_FILTER_0
{
  unsigned __int32 BlendStateType : 8;
  unsigned __int32 Samples : 8;
  unsigned __int32 FilterMode : 8;
  unsigned __int32 FilterOptionFlag : 8;
  f32 BrightThreshold;
  f32 BlurStart;
  f32 BlurWidth;
  f32 StartW;
  f32 EndW;
  f32 StartH;
  f32 EndH;
  MtVector4 FilterColor;
  MtFloat2 FilterCenter;
  f32 OcclusionOffset;
  f32 OcclusionScale;
  MT_CHAR AlphaMapPath[64];
};

typedef rEffectList::EFL_PARTICLE_COLOR_CORRECT_FILTER rEffectList::EFL_PARTICLE_COLOR_CORRECT_FILTER_0;

struct __cppobj rEffectList::EFL_PARTICLE_COLOR_CORRECT_FILTER : rEffectList::EFL_PARTICLE_FILTER_0
{
  MtVector3 Factor;
  MtVector3 Gamma;
  unsigned __int32 CCFColorCorrectType : 8;
  unsigned __int32 CCFColorCorrectScaleAlpha : 8;
  unsigned __int32 PColorCorrectFilter0882 : 8;
  unsigned __int32 PColorCorrectFilter0883 : 8;
  u32 PColorCorrectFilter3284;
  u32 PColorCorrectFilter3288;
  u32 PColorCorrectFilter328c;
};

typedef rEffectList::EFL_PARTICLE_GOD_RAYS_FILTER rEffectList::EFL_PARTICLE_GOD_RAYS_FILTER_0;

struct __cppobj rEffectList::EFL_PARTICLE_GOD_RAYS_FILTER : rEffectList::EFL_PARTICLE_FILTER_0
{
  f32 MaskRadius;
  f32 MaskWeight;
  f32 Decay;
  f32 Threshold;
  f32 Gammma;
  f32 ShadowFactor;
  f32 ShadowThreshold;
  f32 DirectionLength;
  MtVector3 Direction;
  MtVector4 FilterColor;
  unsigned __int32 GRFilterMode : 4;
  unsigned __int32 GRFilterQuality : 4;
  unsigned __int32 GRFilterOptionFlag : 8;
  unsigned __int32 GRFilterIterativeNum : 8;
  unsigned __int32 PGodRaysFilter0893 : 8;
  u32 PGodRaysFilter3294;
  f32 OcclusionOffset;
  f32 OcclusionScale;
};

typedef rEffectList::EFL_PARTICLE_BLOOM_FILTER rEffectList::EFL_PARTICLE_BLOOM_FILTER_0;

struct __cppobj rEffectList::EFL_PARTICLE_BLOOM_FILTER : rEffectList::EFL_PARTICLE_FILTER_0
{
  MtVector4 FilterColor;
  f32 BloomDispersion;
  f32 BloomThreshold;
  unsigned __int32 BloomConeFilter : 1;
  unsigned __int32 PBloomFilter0758 : 7;
  unsigned __int32 PBloomFilter2459 : 24;
  u32 PBloomFilter325c;
};

enum nEffect::EFC_VOLUME : __int32
{
  EFC_VOLUME_LOW = 0x0,
  EFC_VOLUME_MEDIUM = 0x1,
  EFC_VOLUME_HIGH = 0x2,
  EFC_VOLUME_NONE = 0x3,
  EFC_VOLUME_NUM = 0x4,
};

struct __cppobj nEffect::MultiBlurFilterParam : nEffect::FilterParam
{
  uRadialBlurFilter::RadialBlurParam mParam;
};

struct __cppobj nEffect::MultiColorCorrectFilterParam : nEffect::FilterParam
{
  uColorCorrectFilter::ColorCorrectParam mParam;
};

struct __cppobj nEffect::MultiGodRaysFilterParam : nEffect::FilterParam
{
  uGodRaysFilter::GodRaysParam mParam;
};

struct __cppobj nEffect::MultiBloomFilterParam : nEffect::FilterParam
{
  uBloomFilter::BloomParam mParam;
};

struct __cppobj cFilterParticle : cParticle
{
  MtVector4 mParam[2];
  MtVector4 mColor[2];
  f32 mLifeRate[2];
  MtColor mSrcColor;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mFilter16ae : 16;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorForce : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorForce::MyDTI : MtDTI
{
};

enum rEffectList::GRASS_WIND_TYPE : __int32
{
  GRASS_WIND_TYPE_POINT = 0x0,
  GRASS_WIND_TYPE_DIR = 0x1,
  GRASS_WIND_TYPE_LINE = 0x2,
  GRASS_WIND_TYPE_NUM = 0x3,
};

struct __cppobj rEffectList::EFL_PARTICLE_FORCE_COMMON : rEffectList::EFL_PARTICLE_COMMON_0
{
  MT_CHAR ForcePath[64];
  unsigned __int32 GrassWindType : 8;
  unsigned __int32 DelayOfsNum : 8;
  unsigned __int32 PForceCommon08a2 : 8;
  unsigned __int32 PForceCommon08a3 : 8;
  u32 GrassWindGroup;
};

typedef rEffectList::EFL_PARTICLE_FORCE_COMMON rEffectList::EFL_PARTICLE_FORCE_COMMON_0;

struct __cppobj rEffectList::EFL_PARTICLE_FORCE : rEffectList::EFL_PARTICLE_FORCE_COMMON_0
{
  u32 PForce32a8;
  u32 PForce32ac;
};

struct __cppobj rEffectList::EFL_PARTICLE_DIR_FORCE : rEffectList::EFL_PARTICLE_FORCE_COMMON_0
{
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 PDirForce04a9 : 4;
  unsigned __int32 PDirForce16aa : 16;
  u32 KeyframeRotParamOffset;
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
};

typedef rEffectList::EFL_PARTICLE_FORCE rEffectList::EFL_PARTICLE_FORCE_0;

typedef rEffectList::EFL_PARTICLE_DIR_FORCE rEffectList::EFL_PARTICLE_DIR_FORCE_0;

struct __cppobj __attribute__((aligned(16))) cForceParticle : cParticle:960
{
  unsigned __int32 mGrassWindType : 8;
  unsigned __int32 mGrassDelayOfsNum : 8;
  unsigned __int32 mForce1662 : 16;
  u32 mGrassWindGroup;
  u32 mForce3268;
  u32 mForce326c;
};

struct __cppobj uSynchroGrassWindPoint : uGrassWindPoint
{
  cSynchronization mSynchronization;
};

struct __cppobj uSynchroGrassWindPoint::MyDTI : MtDTI
{
};

struct __cppobj uSynchroGrassWindDirection : uGrassWindDirection
{
  cSynchronization mSynchronization;
};

struct __cppobj uSynchroGrassWindDirection::MyDTI : MtDTI
{
};

struct cParticleDirForce
{
  MtVector3 mDir[2];
  MtVector3 mRot[2];
  MtVector3 mRotAdd;
};

struct __cppobj uSynchroGrassWindLine : uGrassWindLine
{
  cSynchronization mSynchronization;
};

struct __cppobj uSynchroGrassWindLine::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorHit : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorHit::MyDTI : MtDTI
{
};

struct __cppobj rEffectList::EFL_PARTICLE_HIT : rEffectList::EFL_PARTICLE_COMMON_0
{
  MtRangeF HitRadius;
  f32 HitRadiusAdd;
  u32 PHit323c;
};

typedef rEffectList::EFL_PARTICLE_HIT rEffectList::EFL_PARTICLE_HIT_0;

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorLensFlare : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorLensFlare::MyDTI : MtDTI
{
};

struct __cppobj rEffectList::EFL_PARTICLE_LENS_FLARE : rEffectList::EFL_PARTICLE_COMMON_0
{
  unsigned __int32 LensFlareNum : 8;
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 ScreenAttenuateDist : 16;
  unsigned __int32 KeyframeRotParamOffset : 16;
  unsigned __int32 PLensFlare0846 : 8;
  unsigned __int32 PLensFlare0847 : 8;
  MtRangeF Rot[3];
  f32 OcclusionScale;
  f32 IntensityScaleDist;
  f32 IntensityScaleMin;
  f32 IntensityScaleMax;
  rEffectList::EFL_PARAM_CULLING_0 CullingParam;
  MT_CHAR AnimPath[64];
  MT_CHAR BaseMapPath[64];
};

typedef rEffectList::EFL_PARAM_LENS_FLARE rEffectList::EFL_PARAM_LENS_FLARE_0;

struct rEffectList::EFL_PARAM_LENS_FLARE
{
  unsigned __int32 SeqNo : 8;
  unsigned __int32 PatNo : 8;
  unsigned __int32 AnimFlag : 16;
  MtColor Color;
  unsigned __int32 PatCenterX : 16;
  unsigned __int32 PatCenterY : 16;
  unsigned __int32 OcclusionFactor : 8;
  unsigned __int32 ParamLensFlare080d : 8;
  unsigned __int32 ParamLensFlare080e : 8;
  unsigned __int32 ParamLensFlare080f : 8;
  f32 Scale;
  f32 PlaceRate;
  f32 Angle;
  f32 AngleCoef;
};

typedef rEffectList::EFL_PARTICLE_LENS_FLARE rEffectList::EFL_PARTICLE_LENS_FLARE_0;

struct nPrim::MetaDataLensFlare
{
  MtFloat3 wpos;
  f32 radius;
  f32 scl_limit;
  f32 radial_dist;
  f32 min_int;
  f32 max_int;
};

struct __cppobj cLensFlare : cParticle
{
  MtVector3 mLocalDir[2];
  MtVector3 mDir[2];
  f32 mLifeRate[2];
  MtFloat3 mRotKeyframeRate;
  u32 mLensFlare32b4;
  u32 mLensFlare32b8;
  u32 mLensFlare32bc;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorLight : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorLight::MyDTI : MtDTI
{
};

typedef rEffectList::EFL_PARTICLE_LIGHT rEffectList::EFL_PARTICLE_LIGHT_0;

struct __cppobj rEffectList::EFL_PARTICLE_LIGHT : rEffectList::EFL_PARTICLE_COMMON_0
{
  u32 LightAttribute;
  unsigned __int32 ColorFlag : 8;
  unsigned __int32 LightType : 4;
  unsigned __int32 PLight0445 : 4;
  unsigned __int32 KeyframeColorParamOffset : 16;
  MtColor Color[2];
  MtRangeF AttenuateStart;
  MtRangeF AttenuateStartAdd;
  MtRangeF AttenuateEnd;
  MtRangeF AttenuateEndAdd;
  MtFloat2 LightMask;
  f32 DiffuseFactor;
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 PLight047d : 4;
  unsigned __int32 KeyframeRotParamOffset : 16;
};

enum rEffectList::LIGHT_TYPE : __int32
{
  LIGHT_TYPE_POINT = 0x0,
  LIGHT_TYPE_SPOT = 0x1,
  LIGHT_TYPE_NUM = 0x2,
};

struct __cppobj rEffectList::EFL_PARTICLE_SPOT_LIGHT : rEffectList::EFL_PARTICLE_LIGHT_0
{
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  MtRangeF AttenuateCone;
  MtRangeF AttenuateConeAdd;
  MtRangeF AttenuateSpread;
  MtRangeF AttenuateSpreadAdd;
};

typedef rEffectList::EFL_PARTICLE_SPOT_LIGHT rEffectList::EFL_PARTICLE_SPOT_LIGHT_0;

enum nEffect::EFC_CULLING : __int32
{
  EFC_CULLING_GROUP0 = 0x0,
  EFC_CULLING_GROUP1 = 0x1,
  EFC_CULLING_GROUP2 = 0x2,
  EFC_CULLING_GROUP3 = 0x3,
  EFC_CULLING_GROUP4 = 0x4,
  EFC_CULLING_GROUP5 = 0x5,
  EFC_CULLING_GROUP6 = 0x6,
  EFC_CULLING_GROUP7 = 0x7,
  EFC_CULLING_NONE = 0x8,
  EFC_CULLING_NUM = 0x9,
  EFC_CULLING_TBL_NUM = 0x8,
};

struct __cppobj cLightParticle : cParticle
{
  MtVector3 mColor[2];
  f32 mAttenuateStart[2];
  f32 mAttenuateEnd[2];
  MtColor mSrcColor;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mLightType : 8;
  unsigned __int32 mLightMode : 8;
  u32 mLightAttribute;
  f32 mLightBalance;
  f32 mSrcAttenuateStart;
  f32 mSrcAttenuateEnd;
  f32 mSrcAttenuateStartAdd;
  f32 mSrcAttenuateEndAdd;
};

struct cParticleSpotLight
{
  MtVector3 mDir[2];
  MtVector3 mRot[2];
  MtVector3 mRotAdd;
  f32 mAttenuateCone[2];
  f32 mAttenuateConeAdd;
  u32 mSpotLight325c;
  f32 mAttenuateSpread[2];
  f32 mAttenuateSpreadAdd;
  u32 mSpotLight326c;
};

struct __cppobj uSynchroSpotLight : uSpotLight
{
  cSynchronization mSynchronization;
};

struct __cppobj uSynchroSpotLight::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uSynchroPointLight : uPointLight
{
  cSynchronization mSynchronization;
  bool mIsRevisionEffectColor;
};

struct __cppobj uSynchroPointLight::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorLightShaft : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorLightShaft::MyDTI : MtDTI
{
};

struct __cppobj rEffectList::EFL_PARTICLE_LIGHT_SHAFT : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  unsigned __int32 RotAxisType : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 RotResetFlag : 4;
  unsigned __int32 PrimNum : 8;
  unsigned __int32 PLightShaft081a3 : 8;
  f32 RotAddCoef;
  u32 KeyframeRotParamOffset;
  f32 AlphaRate;
  f32 Dist[2];
  f32 Size[2];
  MtEaseCurve PrimPlaceCurve;
  u32 PLightShaft321c8;
  u32 PLightShaft321cc;
};

typedef rEffectList::EFL_PARTICLE_LIGHT_SHAFT rEffectList::EFL_PARTICLE_LIGHT_SHAFT_0;

struct __cppobj uSynchroLightShaft : uLightShaft
{
  cSynchronization mSynchronization;
};

struct __cppobj uSynchroLightShaft::MyDTI : MtDTI
{
};

struct __cppobj cLightShaft : cMatrixParticle
{
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  MtColor mColor[2];
  MtColor mSrcColor;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mLightShaft16d6 : 16;
  f32 mPatNoKeyframeRate;
  u32 mLightShaft32dc;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorLine : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorLine::MyDTI : MtDTI
{
};

typedef rEffectList::EFL_PARTICLE_LINE rEffectList::EFL_PARTICLE_LINE_0;

struct __cppobj rEffectList::EFL_PARTICLE_LINE : rEffectList::EFL_PARTICLE_DRAW_COMMON_0
{
  unsigned __int32 LineType : 8;
  unsigned __int32 LineOfsNum : 8;
  unsigned __int32 ColorPlaceNo : 8;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 ClothType : 4;
  unsigned __int32 LineDivideNum : 4;
  unsigned __int32 PLine0454 : 4;
  unsigned __int32 PLine0855 : 8;
  unsigned __int32 KeyframePlaceColorParamOffset : 16;
  MtColor PlaceColor[2];
};

struct __cppobj sGpuParticle::ContextLine : sGpuParticle::Context
{
};

struct __cppobj __attribute__((aligned(16))) cLine : cLineParticle
{
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorMassBillboard : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorMassBillboard::MyDTI : MtDTI
{
};

struct __cppobj rEffectList::EFL_PARTICLE_MASS_BILLBOARD : rEffectList::EFL_PARTICLE_PAT_COMMON_0
{
  MT_CHAR AnimPath[64];
  MT_CHAR BaseMapPath[64];
};

typedef rEffectList::EFL_PARTICLE_MASS_BILLBOARD rEffectList::EFL_PARTICLE_MASS_BILLBOARD_0;

struct __cppobj __attribute__((aligned(16))) cMassBillboard : cParticle:960
{
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  MtColor mColor[2];
  f32 mSize[2];
  MtColor mSrcColor;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mMassBillboard168e : 16;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorModel : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorModel::MyDTI : MtDTI
{
};

enum rEffectList::MODEL_PAT_ANIM_FLAG : __int32
{
  MODEL_PAT_ANIM_TEX0 = 0x1,
  MODEL_PAT_ANIM_TEX1 = 0x2,
  MODEL_PAT_ANIM_TEX2 = 0x4,
  MODEL_PAT_ANIM_TEX3 = 0x8,
  MODEL_PAT_ANIM_KEYFRAME = 0x10,
  MODEL_PAT_ANIM_TEX_ALL = 0xF,
};

struct __cppobj rEffectList::EFL_PARTICLE_MODEL : rEffectList::EFL_PARTICLE_DRAW_COMMON_0
{
  MT_CHAR ModelPath[64];
  MtRangeF ModelScale[3];
  MtRangeF ModelScaleAdd[3];
  MtVector3 ModelScaleAddCoef;
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 ModelBillboardType : 4;
  unsigned __int32 PartsNoMin : 10;
  unsigned __int32 PartsNoRange : 10;
  f32 PartsNoMax;
  f32 AnimSpeed;
  unsigned __int32 AnimFlag : 16;
  unsigned __int32 RotResetFlag : 4;
  unsigned __int32 ShadowCastGroup : 4;
  unsigned __int32 ShadowReceiveGroup : 4;
  unsigned __int32 ModelZofsFlag : 1;
  unsigned __int32 ModelBillboardOrder : 1;
  unsigned __int32 ModelBillboardLookAt : 1;
  unsigned __int32 ModelScaleAddCoefFlag : 1;
  f32 ModelZofs;
  f32 EnvMapPower;
  f32 RotAddCoef;
  f32 SubPosDistCoef;
  s32 TransparentPriorityBias;
  f32 ModelLightBoundaryRadius;
  f32 EdgeSmoothingCoefStart;
  f32 EdgeSmoothingCoefEnd;
  unsigned __int32 KeyframeRotParamOffset : 16;
  unsigned __int32 KeyframeModelScaleParamOffset : 16;
  unsigned __int32 TexScrollParamOffset : 16;
  unsigned __int32 SubTexScrollParamOffset : 16;
  unsigned __int32 PatAnimParamOffset : 16;
  unsigned __int32 ModelPatAnimFlag : 8;
  unsigned __int32 SubTexScrollNum : 4;
  unsigned __int32 TexScrollKeyframe : 4;
  unsigned __int32 EdgeSmoothingType : 4;
  unsigned __int32 PModel0413c : 4;
  unsigned __int32 PModel0813d : 8;
  unsigned __int32 PModel0813e : 8;
  unsigned __int32 PModel0813f : 8;
};

typedef rEffectList::EFL_PARAM_PAT_ANIM rEffectList::EFL_PARAM_PAT_ANIM_0;

struct rEffectList::EFL_PARAM_PAT_ANIM
{
  MT_CHAR AnimPath[64];
  unsigned __int32 AnimFlag : 16;
  unsigned __int32 SeqNoMin : 8;
  unsigned __int32 SeqNoRange : 8;
  unsigned __int32 PatNoMin : 16;
  unsigned __int32 PatNoRange : 16;
  f32 PatSpeed;
  f32 PatNoMax;
};

typedef rEffectList::EFL_PARTICLE_MODEL rEffectList::EFL_PARTICLE_MODEL_0;

enum nEffect::MODEL_ANIM_FLAG : __int32
{
  MODEL_ANIM_FLAG_MOVE = 0x1,
  MODEL_ANIM_FLAG_LOOP = 0x2,
  MODEL_ANIM_FLAG_REVERSE = 0x4,
  MODEL_ANIM_FLAG_FINISH = 0x8,
  MODEL_ANIM_FLAG_REVERSE_RAND = 0x10,
};

enum nEffect::BILLBOARD_TYPE : __int32
{
  BILLBOARD_TYPE_NONE = 0x0,
  BILLBOARD_TYPE_FULL_FIX = 0x1,
  BILLBOARD_TYPE_X_FIX = 0x2,
  BILLBOARD_TYPE_Y_FIX = 0x3,
  BILLBOARD_TYPE_Z_FIX = 0x4,
  BILLBOARD_TYPE_FULL_FIX_AFT = 0x5,
  BILLBOARD_TYPE_X_FIX_AFT = 0x6,
  BILLBOARD_TYPE_Y_FIX_AFT = 0x7,
  BILLBOARD_TYPE_Z_FIX_AFT = 0x8,
  BILLBOARD_TYPE_FULL_FIX_LOOK = 0x9,
  BILLBOARD_TYPE_X_FIX_LOOK = 0xA,
  BILLBOARD_TYPE_Y_FIX_LOOK = 0xB,
  BILLBOARD_TYPE_Z_FIX_LOOK = 0xC,
  BILLBOARD_TYPE_NUM = 0xD,
};

struct __cppobj __attribute__((aligned(16))) uSynchroModel : uModelSymmetry
{
  cSynchronization mSynchronization;
  cEffectTransparency mTransparencyParam;
  bool mSymmetryFlag;
};

struct __cppobj uSynchroModel::MyDTI : MtDTI
{
};

struct __cppobj cModelParticle : cMatrixParticle
{
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  f32 mPatNoKeyframeRate;
  unsigned __int32 mPatAnimFlag : 8;
  unsigned __int32 mModel08cd : 8;
  unsigned __int32 mModelAnimFlag : 16;
  MtVector3 mModelScale[2];
  MtColor mColor[2];
  f32 mEnvMapPower;
  unsigned __int32 mTexScrollWorkOffset : 16;
  unsigned __int32 mSubTexScrollWorkOffset : 16;
  unsigned __int32 mPrimitiveNo : 8;
  unsigned __int32 mSubTexScrollWorkNum : 2;
  unsigned __int32 mTexScrollKeyframe : 2;
  unsigned __int32 mShadowCastGroup : 4;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  MtColor mSrcColor;
  f32 mPartsNo;
  f32 mPartsSpeed;
  MtVector3 mModelScaleAdd;
};

enum cPrim::SmoothEdge::Type : __int32
{
  NONE_4 = 0x0,
  DEFAULT_0 = 0x1,
  INVERSE = 0x2,
  VERTEX_NORMAL = 0x3,
  VERTEX_NORMAL_INVERSE = 0x4,
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorPoint : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorPoint::MyDTI : MtDTI
{
};

struct __cppobj rEffectList::EFL_PARTICLE_POINT : rEffectList::EFL_PARTICLE_DRAW_COMMON_0
{
};

typedef rEffectList::EFL_PARTICLE_POINT rEffectList::EFL_PARTICLE_POINT_0;

struct __cppobj __attribute__((aligned(16))) cPointParticle : cParticle:960
{
  MtColor mColor[2];
  MtColor mSrcColor;
  unsigned __int32 mSrcColorKeyframeRate : 16;
  unsigned __int32 mPointParticle166e : 16;
};

enum rEffectList::CLOTH_WAVE_FLAG : __int32
{
  CLOTH_WAVE_FLAG_CHAIN = 0x1,
  CLOTH_WAVE_FLAG_VERTEX = 0x2,
  CLOTH_WAVE_FLAG_ACTIVE = 0x3,
};

enum rEffectList::ADHESION_TYPE : __int32
{
  ADHESION_TYPE_EXTEND = 0x0,
  ADHESION_TYPE_BEND = 0x1,
  ADHESION_TYPE_NUM = 0x2,
};

enum rEffectList::ADHESION_OPTION_FLAG : __int32
{
  ADHESION_OPTION_FLAG_ALWAYS_UPDATE = 0x1,
};

struct __cppobj rEffectList::EFL_PARTICLE_ADHESION : rEffectList::EFL_PARTICLE_POLYGON_0
{
  unsigned __int32 AdhesionType : 8;
  unsigned __int32 AdhesionOptionFlag : 8;
  unsigned __int32 AdhesionEnvMapFactor : 8;
  unsigned __int32 AdhesionSpecularPower : 8;
  f32 AdhesionEnvMapIntensity;
  MtRangeF AdhesionProjectionDist;
};

struct __cppobj rEffectList::EFL_PARTICLE_AXIS_POLYGON : rEffectList::EFL_PARTICLE_POLYGON_0
{
  MtRangeF ModelScale[3];
  MtRangeF ModelScaleAdd[3];
};

typedef rEffectList::EFL_PARTICLE_ADHESION rEffectList::EFL_PARTICLE_ADHESION_0;

typedef rEffectList::EFL_PARTICLE_AXIS_POLYGON rEffectList::EFL_PARTICLE_AXIS_POLYGON_0;

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorClothPolygon : cParticleGeneratorPolygon
{
};

struct __cppobj cParticleGeneratorClothPolygon::MyDTI : MtDTI
{
};

struct __cppobj uSynchroAdhesion::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorAxisPolygon : cParticleGeneratorPolygon
{
};

struct __cppobj cParticleGeneratorAxisPolygon::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorLitePolygon : cParticleGeneratorPolygon
{
};

struct __cppobj cParticleGeneratorLitePolygon::MyDTI : MtDTI
{
};

enum nCollision::cScrCollisionMoveMatrix::SCROLL_MOVE_MAT_ID : __int32
{
  MAT_ID_NOW = 0x0,
  MAT_ID_HALF = 0x1,
  MAT_ID_OLD = 0x2,
  MAT_ID_NUM = 0x3,
};

struct __cppobj cAxisPolygon : cPolygon
{
  MtVector3 mModelScale[2];
  MtVector3 mModelScaleAdd;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorPolygonStrip : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorPolygonStrip::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorPolyline : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorPolyline::MyDTI : MtDTI
{
};

typedef rEffectList::EFL_PARTICLE_POLYLINE rEffectList::EFL_PARTICLE_POLYLINE_0;

struct __cppobj rEffectList::EFL_PARTICLE_POLYLINE : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  unsigned __int32 LineType : 8;
  unsigned __int32 LineOfsNum : 8;
  unsigned __int32 ColorPlaceNo : 8;
  unsigned __int32 SizePlaceNo : 8;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 SizePlaceType : 4;
  unsigned __int32 ClothType : 4;
  unsigned __int32 LineDivideNum : 4;
  unsigned __int32 PPolyline16176 : 16;
  MtColor PlaceColor[2];
  MtRangeF HeadSize;
  MtRangeF HeadSizeAdd;
  MtRangeF PlaceSize;
  MtRangeF PlaceSizeAdd;
  MtRangeF PatRepeatCoef;
  unsigned __int32 KeyframePlaceColorParamOffset : 16;
  unsigned __int32 KeyframeHeadSizeParamOffset : 16;
  unsigned __int32 KeyframePlaceSizeParamOffset : 16;
  unsigned __int32 TexScrollParamOffset : 16;
};

struct sGpuParticle::ContextPolyline::PolylineCtx
{
  u32 num_idx;
  u32 max_idx;
  u32 num_vtx;
  u32 max_vtx;
  u32 current_idx;
  sGpuParticle::Context::DrawCtx *p_ctx;
};

struct __cppobj sGpuParticle::ContextPolyline : sGpuParticle::Context
{
  sGpuParticle::ContextPolyline::PolylineCtx mPolyLineCtx[6];
};

struct __attribute__((aligned(8))) cPolyline
{
  __int8 baseclass_0[152];
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  f32 mPatNoKeyframeRate;
  unsigned __int32 mSizePlaceNo : 8;
  unsigned __int32 mSizePlaceType : 4;
  unsigned __int32 mPolyline049c : 4;
  unsigned __int32 mPolyline089d : 8;
  unsigned __int32 mTexScrollWorkOffset : 16;
  f32 mHeadSize[2];
  f32 mPlaceSize[2];
  f32 mSrcHeadSize;
  f32 mSrcHeadSizeAdd;
  f32 mSrcPlaceSize;
  f32 mSrcPlaceSizeAdd;
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorLitePolyline : cParticleGeneratorPolyline
{
};

struct __cppobj cParticleGeneratorLitePolyline::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(1))) cParticleGenerator:4424 : cParticleManager
{
  cParticle *mpMoveTopParticle;
  cParticle *mpMoveBotParticle;
  cParticle *mpStockTopParticle;
  cParticle *mpStockBotParticle;
  u32 mParticleStatus;
  u32 mParticleLifeOffset;
  u32 mParticleMoveOffset;
  u32 mParticleCullingOffset;
  unsigned __int32 mParticleNum : 16;
  unsigned __int32 mParticleMoveNum : 16;
  unsigned __int32 mParticleSize : 16;
  unsigned __int32 mParticlePosSize : 16;
  unsigned __int32 mParticleLifeSize : 16;
  unsigned __int32 mParticleMoveSize : 16;
  unsigned __int32 mParticleCullingSize : 16;
  unsigned __int32 mParticleFlagBase : 16;
  unsigned __int32 mStripParentNo : 16;
  unsigned __int32 mSetTimer : 16;
  unsigned __int32 mRangeDivideNum : 16;
  unsigned __int32 mRangeType : 8;
  unsigned __int32 mRangeDirType : 8;
  unsigned __int32 mRangeDisperseType : 8;
  unsigned __int32 mLODType : 4;
  unsigned __int32 mAxisType : 4;
  unsigned __int32 mParticleRotOrder : 4;
  unsigned __int32 mParticleRotAxisType : 4;
  unsigned __int32 mParticleDirAxisType : 4;
  unsigned __int32 mGenerator043b : 4;
  unsigned __int32 mMoveRotOrder : 4;
  unsigned __int32 mMoveRotAxisType : 4;
  unsigned __int32 mCurDataIndex : 1;
  unsigned __int32 mOldDataIndex : 1;
  unsigned __int32 mSynchroUnitFlag : 1;
  unsigned __int32 mRotInitFlag : 1;
  unsigned __int32 mRotLocalFlag : 1;
  unsigned __int32 mModelScaleAfterFlag : 1;
  unsigned __int32 mPathInitFlag : 1;
  unsigned __int32 mPatRotFlag : 1;
  unsigned __int32 mVolumeBlendRate : 8;
  unsigned __int32 mVolumeBlendRateRange : 8;
  rEffectList::EFL_PARAM_COLL_0 *mpCollParam;
  u32 mPrimAttribute;
  f32 mParticleScaleBase;
  f32 mParticleScale;
  _BYTE gap134[12];
  MtMatrix mParticleScaleWmat;
  MtVector3 mParticle3DScale;
  MtVector3 mForceVec;
  MtVector3 mRangeScale;
  MtColor mColor[2];
  MtColor mPlaceColor[2];
  MtColor *mpOrgColor;
  MtColor *mpOrgPlaceColor;
  MtRangeF mIntensity;
  MtRangeF *mpOrgIntensity;
  unsigned __int32 mColorFlag : 8;
  unsigned __int32 mDecreaseWaitTimer : 8;
  unsigned __int32 mDecreaseModNum : 8;
  unsigned __int32 mSetNumCorrectFlag : 1;
  unsigned __int32 mEachFrameMode : 1;
  unsigned __int32 mClothChainFlag : 1;
  unsigned __int32 mLiteParticleFlag : 1;
  unsigned __int32 mSynchroUnitLimitFlag : 1;
  unsigned __int32 mGenerator03e7 : 3;
  u32 mSetParticleTotal;
  u32 mSetFrameTotal;
  f32 mSetFrameOfs;
  f32 mIntervalFrameOfs;
  unsigned __int32 mSetNumKeyframeRandom : 16;
  unsigned __int32 mLoopCtr : 16;
  f32 mSubPosDistCoef;
  _BYTE gap1FC[4];
  u8 *mpExtendedBuff;
  cEffectCulling *mpCulling;
  cEffectPath *mpPath;
  cEffectShadeLight *mpShadeLight;
  cClothVertex *mpClothVertex;
  bool mStencilTest;
};

struct __cppobj cParticleGeneratorPrimModel : cParticleGenerator:4424
{
  unsigned __int32 mPrimModelType : 8;
  unsigned __int32 mProjectionType : 8;
  unsigned __int32 mGeneratorPrimModel0802 : 8;
  unsigned __int32 mGeneratorPrimModel0803 : 8;
};

struct __cppobj cParticleGeneratorPrimModel::MyDTI : MtDTI
{
};

typedef rEffectList::EFL_PARTICLE_PRIM_MODEL rEffectList::EFL_PARTICLE_PRIM_MODEL_0;

struct __cppobj rEffectList::EFL_PARTICLE_PRIM_MODEL : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  unsigned __int32 PrimModelType : 4;
  unsigned __int32 PrimModelAxis : 4;
  unsigned __int32 RotOrder : 4;
  unsigned __int32 DirAxisType : 4;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 PPrimModel04172 : 4;
  unsigned __int32 ModelBillboardType : 4;
  unsigned __int32 NormAttenuateFlag : 4;
  unsigned __int32 HoriColorPlaceNo : 16;
  unsigned __int32 RotResetFlag : 4;
  unsigned __int32 ModelBillboardOrder : 1;
  unsigned __int32 ModelBillboardLookAt : 1;
  unsigned __int32 PPrimModel02176 : 2;
  unsigned __int32 ProjectionType : 8;
  MtColor PlaceColor[2];
  unsigned __int32 RotDivNum : 16;
  unsigned __int32 RotTexDivNum : 16;
  unsigned __int32 RotDrawStart : 16;
  unsigned __int32 RotDrawEnd : 16;
  unsigned __int32 HoriDivNum : 16;
  unsigned __int32 HoriTexDivNum : 16;
  unsigned __int32 HoriDrawStart : 16;
  unsigned __int32 HoriDrawEnd : 16;
  MtRangeF ModelScale[3];
  MtRangeF ModelScaleAdd[3];
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  MtRangeF Radius[2];
  MtRangeF RadiusAdd[2];
  MtRangeF Height[2];
  MtRangeF HeightAdd[2];
  f32 NormAttenuateAngleStart;
  f32 NormAttenuateAngleEnd;
  MtEaseCurve NormAttenuateCurve;
  u32 TexScrollParamOffset;
  u32 KeyframePlaceColorParamOffset;
  u32 KeyframeRotParamOffset;
  u32 KeyframeModelScaleParamOffset;
  unsigned __int32 KeyframeUpperRadiusParamOffset : 16;
  unsigned __int32 KeyframeLowerRadiusParamOffset : 16;
  unsigned __int32 KeyframeUpperHeightParamOffset : 16;
  unsigned __int32 KeyframeLowerHeightParamOffset : 16;
  f32 RotAddCoef;
  f32 SubPosDistCoef;
};

enum rEffectList::PRIM_MODEL_TYPE : __int32
{
  PRIM_MODEL_TYPE_RING = 0x0,
  PRIM_MODEL_TYPE_TEX_RING = 0x1,
  PRIM_MODEL_TYPE_SPHERE = 0x2,
  PRIM_MODEL_TYPE_TEX_SPHERE = 0x3,
  PRIM_MODEL_TYPE_GRID = 0x4,
  PRIM_MODEL_TYPE_TEX_GRID = 0x5,
  PRIM_MODEL_TYPE_NUM = 0x6,
};

enum rEffectList::SPHERE_PROJ_TYPE : __int32
{
  SPHERE_PROJ_TYPE_SPHERE = 0x0,
  SPHERE_PROJ_TYPE_XZ_PLANE = 0x1,
  SPHERE_PROJ_TYPE_NUM = 0x2,
};

enum rEffectList::NORM_ATTENUATE_FLAG : __int32
{
  NORM_ATTENUATE_FLAG_ON = 0x1,
  NORM_ATTENUATE_FLAG_HIDDEN = 0x2,
  NORM_ATTENUATE_FLAG_REVERSE = 0x4,
};

struct __cppobj cPrimModel : cMatrixParticle
{
  cEffectAnim mAnim;
  MtVector3 mModelScale[2];
  MtVector4 mParam[2];
  MtColor mColor[2][2];
  f32 mPatNoRate[2];
  unsigned __int32 mTexScrollWorkOffset : 16;
  unsigned __int32 mColorPlaceNo : 16;
  unsigned __int32 mColorPlaceType : 4;
  unsigned __int32 mPrimModel0411c : 4;
  unsigned __int32 mPrimModel0811d : 8;
  unsigned __int32 mPrimModel0811e : 8;
  unsigned __int32 mPrimModel0811f : 8;
  MtColor mSrcHeadColor;
  MtColor mSrcPlaceColor;
  unsigned __int32 mSrcHeadColorKeyframeRate : 16;
  unsigned __int32 mSrcPlaceColorKeyframeRate : 16;
  f32 mPatNoKeyframeRate;
  MtVector3 mModelScaleAdd;
  f32 mRadiusAdd[2];
  f32 mHeightAdd[2];
};

struct __cppobj __attribute__((aligned(8))) cParticleGeneratorTexline : cParticleGenerator
{
};

struct __cppobj cParticleGeneratorTexline::MyDTI : MtDTI
{
};

typedef rEffectList::EFL_PARTICLE_TEXLINE rEffectList::EFL_PARTICLE_TEXLINE_0;

struct __cppobj rEffectList::EFL_PARTICLE_TEXLINE : rEffectList::EFL_PARTICLE_PRIM_COMMON_0
{
  unsigned __int32 LineType : 8;
  unsigned __int32 LineOfsNum : 8;
  unsigned __int32 ColorPlaceNo : 8;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 ClothType : 4;
  unsigned __int32 LineDivideNum : 4;
  unsigned __int32 PTexline04174 : 4;
  unsigned __int32 PTexline08175 : 8;
  unsigned __int32 KeyframePlaceColorParamOffset : 16;
  MtColor PlaceColor[2];
};

struct __attribute__((aligned(16))) cTexline
{
  __int8 baseclass_0[152];
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  f32 mPatNoKeyframeRate;
  u32 mTexline329c;
};

enum cParticleGeneratorTrail::draw::$9A1F3E097E67624DBB21D507AF89858F : __int32
{
  IF_NONE = 0x0,
  IF_DIVIDE = 0x1,
  IF_EXTRACT = 0x2,
  IF_BOTH = 0x3,
};

struct __cppobj __attribute__((aligned(16))) `anonymous namespace'::LocalCullingParam<true> : rEffectList::EFL_PARAM_CULLING_0
{
  MtVector3 CameraPos;
  MtVector3 InterpolatedPos;
  s32 CullingRate;
};

struct `anonymous namespace'::LocalCullingParam<false>
{
  __int8 gap0[1];
};

enum rEffectList::JOINT_OPTION_FLAG : __int32
{
  JOINT_OPTION_FLAG_NONE = 0x0,
  JOINT_OPTION_FLAG_BILLBOARD = 0x1,
  JOINT_OPTION_FLAG_BILLBOARD_LOOK = 0x2,
};

enum rEffectList::VIB_REQ_TYPE : __int32
{
  VIB_REQ_TYPE_NONE = 0x0,
  VIB_REQ_TYPE_DEFAULT = 0x1,
  VIB_REQ_TYPE_VIEWPORT_POS = 0x2,
  VIB_REQ_TYPE_VIEWPORT_PARENT = 0x3,
  VIB_REQ_TYPE_NUM = 0x4,
};

enum rEffectList::VIB_OPTION_FLAG : __int32
{
  VIB_OPTION_FLAG_SYNCHRO_STOP = 0x1,
};

struct rEffectList::EFL_LIFE_KEYFRAME
{
  MtRangeU16 VanishFrame;
  u32 KeyframeLifeRateParamOffset;
  u32 LKeyframe3208;
  u32 LKeyframe320c;
};

struct __cppobj rEffectList::EFL_LIFE_HIDEFRAME : rEffectList::EFL_LIFE_FRAME_0
{
  MtRangeU16 HideFrame;
  u32 LHideFrame3214;
  u32 LHideFrame3218;
  u32 LHideFrame321c;
};

struct rEffectList::EFL_LIFE_CURVEFRAME
{
  nEffect::SimpleCurve LifeRateCurve;
  MtRangeU16 LifeRateFrame;
  MtRangeU16 VanishFrame;
  u32 LCurveFrame3228;
  u32 LCurveFrame322c;
};

typedef rEffectList::EFL_LIFE_KEYFRAME rEffectList::EFL_LIFE_KEYFRAME_0;

typedef rEffectList::EFL_LIFE_HIDEFRAME rEffectList::EFL_LIFE_HIDEFRAME_0;

typedef rEffectList::EFL_LIFE_CURVEFRAME rEffectList::EFL_LIFE_CURVEFRAME_0;

enum nEffect::KEYFRAME_REF_TYPE : __int32
{
  KEYFRAME_REF_TYPE_PARTICLE = 0x0,
  KEYFRAME_REF_TYPE_GENERATOR = 0x1,
  KEYFRAME_REF_TYPE_UNIT = 0x2,
  KEYFRAME_REF_TYPE_GEN_UNIT = 0x3,
  KEYFRAME_REF_TYPE_SYSTEM = 0x4,
  KEYFRAME_REF_TYPE_NUM = 0x5,
};

enum nEffect::BOUNDARY_TYPE : __int32
{
  BOUNDARY_TYPE_CLIP = 0x0,
  BOUNDARY_TYPE_PAUSE = 0x1,
  BOUNDARY_TYPE_FINISH = 0x2,
  BOUNDARY_TYPE_KILL = 0x3,
  BOUNDARY_TYPE_NUM = 0x4,
  BOUNDARY_TYPE_OTHER = 0x4,
};

enum cParticle::PTCL_LIFE_RNO_TBL : __int32
{
  PTCL_LIFE_RNO_HIDE = 0x0,
  PTCL_LIFE_RNO_APPEAR = 0x1,
  PTCL_LIFE_RNO_KEEP = 0x2,
  PTCL_LIFE_RNO_VANISH = 0x3,
  PTCL_LIFE_RNO_FINISH = 0x4,
};

enum cParticleNode::NODE_DRAW_TYPE : __int32
{
  NODE_DRAW_TYPE_BEZIER = 0x0,
  NODE_DRAW_TYPE_SPLINE = 0x1,
  NODE_DRAW_TYPE_BEZIER_ANIM = 0x2,
  NODE_DRAW_TYPE_SPLINE_ANIM = 0x3,
  NODE_DRAW_TYPE_LOOP_BEZIER = 0x4,
  NODE_DRAW_TYPE_LOOP_SPLINE = 0x5,
  NODE_DRAW_TYPE_LOOP_BEZIER_ANIM = 0x6,
  NODE_DRAW_TYPE_LOOP_SPLINE_ANIM = 0x7,
  NODE_DRAW_TYPE_LOOP_OFS = 0x4,
};

enum rEffectList::NODE_RANGE_TYPE : __int32
{
  NODE_RANGE_TYPE_BOX = 0x0,
  NODE_RANGE_TYPE_SPHERE = 0x1,
  NODE_RANGE_TYPE_NUM = 0x2,
};

enum rEffectList::NODE_OPTION_FLAG : __int32
{
  NODE_OPTION_FLAG_LOOP_START = 0x1,
  NODE_OPTION_FLAG_PAT_NO_INP = 0x2,
};

enum rEffectList::NODE_INP_TYPE : __int32
{
  NODE_INP_TYPE_BEZIER = 0x0,
  NODE_INP_TYPE_SPLINE = 0x1,
  NODE_INP_TYPE_NUM = 0x2,
};

struct __cppobj rEffectList::EFL_PARTICLE_NODE_BILLBOARD : rEffectList::EFL_PARTICLE_MASS_BILLBOARD_0
{
  MtMatrix Param[4];
  unsigned __int32 NodeOptionFlag : 16;
  unsigned __int32 NodeLoopNum : 16;
  MtRangeU16 NodeFrame;
  unsigned __int32 NodeInpType : 8;
  unsigned __int32 NodeRangeType : 8;
  unsigned __int32 PNodeBillboard081ea : 8;
  unsigned __int32 PNodeBillboard081eb : 8;
  u32 PNodeBillboard321ec;
  MtRangeF Angle;
  u32 PNodeBillboard321f8;
  u32 PNodeBillboard321fc;
};

typedef rEffectList::EFL_PARTICLE_NODE_BILLBOARD rEffectList::EFL_PARTICLE_NODE_BILLBOARD_0;

enum nEffect::PTCL_NODE_KIND : __int32
{
  PTCL_NODE_KIND_OFS = 0x0,
  PTCL_NODE_KIND_RANGE = 0x1,
  PTCL_NODE_KIND_COLOR = 0x2,
  PTCL_NODE_KIND_ASPECT = 0x3,
  PTCL_NODE_KIND_NUM = 0x4,
};

enum sGpuParticle::ContextInfParticle::PATH_TYPE : __int32
{
  PATH_SPLINE = 0x0,
  PATH_BEZIER = 0x1,
};

enum sGpuParticle::ContextInfParticle::COLOR_TYPE : __int32
{
  VERTEX_COLOR = 0x0,
  CONSTANT_COLOR = 0x1,
  BLEND_CONSTANT_COLOR = 0x2,
  NODE_COLOR = 0x3,
  BLEND_NODE_COLOR = 0x4,
};

enum sGpuParticle::ContextInfParticle::PATTERN_TYPE : __int32
{
  PATTERN_CONSTANT = 0x0,
  PATTERN_PARTICLE = 0x1,
  PATTERN_ANIMATE = 0x2,
};

struct __cppobj sGpuParticle::ContextInfParticle : sGpuParticle::Context
{
  sGpuParticle::StaticBuffer *mpBuffer;
  u32 mVertexNum;
  u32 mIndexNum;
  u32 mCurrentVertexNum;
  u32 mCurrentIndexNum;
  u32 mCurrentIndex;
  f32 mLoopLength;
  f32 mCurrentLoop;
  f32 mIntensityScale;
  f32 mParticlePath[4][4];
  f32 mBoundingBox[4][4];
  f32 mNodeColor[4][4];
  f32 mWorldMatrix[4][4];
  bool mRandomizePos;
  rTexture *mpTexture;
  u32 mTextureRowNum;
  u32 mTextureColNum;
  u32 mTexturePaternNum;
  sGpuParticle::ContextInfParticle::PATH_TYPE mPathType;
  sGpuParticle::ContextInfParticle::COLOR_TYPE mColorType;
  sGpuParticle::ContextInfParticle::PATTERN_TYPE mPatternType;
  u32 mPatternConst;
  MtFloat4 mPatternRect;
  MtColor mConstantColor;
};

struct __attribute__((aligned(8))) sGpuParticle::StaticBuffer
{
  nDraw::VertexBuffer *mpVertexBuffer;
  nDraw::IndexBuffer *mpIndexBuffer;
  void *mpTempVertexBuffer;
  u32 mTempVertexBufferSize;
  void *mpTempIndexBuffer;
  u32 mTempIndexBufferSize;
};

struct __attribute__((aligned(4))) sGpuParticle::ContextInfParticle::Particle
{
  MtFloat3 pos;
  MtColor color;
  s16 size;
  u16 birth;
  u16 life;
  u16 time_shift;
  u8 tex_coord;
  u8 pattern_num;
  f32 rotation;
  u16 intensity;
};

struct __cppobj cParticleNodeInfinite : cParticleNode
{
};

struct __cppobj cParticleNodeInfinite::MyDTI : MtDTI
{
};

struct MtBezier
{
  int (**_vptr$MtBezier)(void);
  __attribute__((aligned(16))) MtVector4 mParam[4];
};

struct nEffect::KeyframeTag
{
  u32 mKeyframeNum;
  u32 mDataNo;
  u32 mLoopFlag;
  u32 mStatus;
  s32 mIntInpRate;
  f32 mInpRate;
};

struct nEffect::KEYFRAME_COMMON
{
  u32 Frame;
};

typedef nEffect::KEYFRAME_COMMON nEffect::KEYFRAME_COMMON_0;

struct __cppobj nEffect::KEYFRAME_U32 : nEffect::KEYFRAME_COMMON_0
{
  MtRangeU16 Param;
};

struct __cppobj nEffect::KEYFRAME_F32 : nEffect::KEYFRAME_COMMON_0
{
  MtRangeF Param;
};

struct __cppobj nEffect::KEYFRAME_COLOR : nEffect::KEYFRAME_COMMON_0
{
  MtColor Param[2];
};

struct __cppobj nEffect::KEYFRAME_VECTOR2 : nEffect::KEYFRAME_COMMON_0
{
  MtRangeF Param[2];
};

struct __cppobj nEffect::KEYFRAME_VECTOR3 : nEffect::KEYFRAME_COMMON_0
{
  MtRangeF Param[3];
};

struct __cppobj nEffect::KEYFRAME_FIX_ANGLE_VECTOR3 : nEffect::KEYFRAME_COMMON_0
{
  MtRange Param[3];
};

typedef nEffect::KEYFRAME_U32 nEffect::KEYFRAME_U32_0;

typedef nEffect::KEYFRAME_F32 nEffect::KEYFRAME_F32_0;

typedef nEffect::KEYFRAME_COLOR nEffect::KEYFRAME_COLOR_0;

typedef nEffect::KEYFRAME_VECTOR2 nEffect::KEYFRAME_VECTOR2_0;

typedef nEffect::KEYFRAME_VECTOR3 nEffect::KEYFRAME_VECTOR3_0;

typedef nEffect::KEYFRAME_FIX_ANGLE_VECTOR3 nEffect::KEYFRAME_FIX_ANGLE_VECTOR3_0;

typedef nEffect::SimpleCurve (*MtProperty::get<nEffect::SimpleCurve>::MT_GETTER)(MtObject *, u32);

typedef void (*MtProperty::set<nEffect::SimpleCurve>::MT_SETTER)(MtObject *, const nEffect::SimpleCurve *, u32);

typedef nMotion::CPARAM_FLOATKEY_16 nMotion::fromFloat16::T;

struct nMotion::CPARAM_FLOATKEY_16
{
  u16 v;
  u16 frame;
};

typedef nMotion::CPARAM_FLOATKEY_8 nMotion::fromFloat8::T;

struct nMotion::CPARAM_FLOATKEY_8
{
  u8 v;
  u8 frame;
};

typedef f32 (*nMotion::GetFrameFunction)(const void *);

typedef f32 (*nMotion::GetCurveFunction)(f32, const void *, f32, f32);

struct nMotion::CurveKeyFunction
{
  u32 paramSize;
  nMotion::GetFrameFunction getFrame;
  nMotion::GetCurveFunction getParam;
};

typedef MtFloat4 (*nMotion::GetParamFunction)(f32, const void *, const void *);

struct nMotion::MotionKeyFunction
{
  u32 paramSize;
  nMotion::GetFrameFunction getFrame;
  nMotion::GetParamFunction getParam;
};

enum nMotion::MOTION_PARAM::TYPE : __int32
{
  T_UNKNOWN_0 = 0x0,
  T_VECTOR3_CONST_0 = 0x1,
  T_QUATERNION3_CONST = 0x2,
  T_LINEARKEY = 0x3,
  T_LINEARKEY_16 = 0x4,
  T_LINEARKEY_8 = 0x5,
  T_POLAR3KEY = 0x6,
  T_POLAR3KEY_32 = 0x7,
  T_VECTOR3_0 = 0x8,
  T_QUATERNION4 = 0x9,
  T_POLAR3 = 0xA,
  T_QAXIS_X_32 = 0xB,
  T_QAXIS_Y_32 = 0xC,
  T_QAXIS_Z_32 = 0xD,
  T_QUATKEY_48 = 0xE,
  T_QUATKEY_40 = 0xF,
  T_HERMITE3 = 0x10,
  T_SMALLEST3 = 0x11,
  T_PARAM_TYPE_NUM = 0x12,
};

enum nMotion::CURVE_PARAM::TYPE : __int32
{
  T_UNKNOWN_1 = 0x0,
  T_FLOAT = 0x1,
  T_FLOAT_CONST = 0x2,
  T_FLOATKEY = 0x3,
  T_FLOATKEY_16 = 0x4,
  T_FLOATKEY_8 = 0x5,
  T_PARAM_TYPE_NUM_0 = 0x6,
};

struct nMotion::MPARAM_LINEARKEY
{
  f32 x;
  f32 y;
  f32 z;
  u32 frame;
};

struct nMotion::MPARAM_LINEARKEY_16
{
  u16 x;
  u16 y;
  u16 z;
  u16 frame;
};

struct nMotion::MOTION_PARAM_EX
{
  MtFloat4 vrange;
  MtFloat4 vbottom;
};

struct nMotion::MPARAM_LINEARKEY_8
{
  u8 x;
  u8 y;
  u8 z;
  u8 frame;
};

struct nMotion::MPARAM_POLAR3KEY_32::$646C45DCD650DE193E66F0A94F9022CE::$14738A7FB71074287B3D8DA112007F2A
{
  unsigned __int32 polar28 : 28;
  unsigned __int32 frame : 4;
};

union nMotion::MPARAM_POLAR3KEY_32::$646C45DCD650DE193E66F0A94F9022CE
{
  nMotion::MPARAM_POLAR3KEY_32::$646C45DCD650DE193E66F0A94F9022CE::$14738A7FB71074287B3D8DA112007F2A _anon_0;
  u32 v;
};

struct nMotion::MPARAM_POLAR3KEY_32
{
  nMotion::MPARAM_POLAR3KEY_32::$646C45DCD650DE193E66F0A94F9022CE _anon_0;
};

struct nMotion::MPARAM_POLAR3KEY::$0A978E9A1C052C7954C99909067E0C7D::$F515C0C7C8BC8FA75376F72B072A81FD
{
  unsigned __int64 polar56 : 56;
  unsigned __int64 frame : 8;
};

union nMotion::MPARAM_POLAR3KEY::$0A978E9A1C052C7954C99909067E0C7D
{
  nMotion::MPARAM_POLAR3KEY::$0A978E9A1C052C7954C99909067E0C7D::$F515C0C7C8BC8FA75376F72B072A81FD _anon_0;
  u64 v;
};

struct nMotion::MPARAM_POLAR3KEY
{
  nMotion::MPARAM_POLAR3KEY::$0A978E9A1C052C7954C99909067E0C7D _anon_0;
};

struct nMotion::MPARAM_QUNIAXIAL_32::$6F2223845D9B324D8E7696FA3D5CF686::$22A32D7596E11511C7E81201844160AB
{
  unsigned __int32 value : 14;
  unsigned __int32 w : 14;
  unsigned __int32 frame : 4;
};

union nMotion::MPARAM_QUNIAXIAL_32::$6F2223845D9B324D8E7696FA3D5CF686
{
  nMotion::MPARAM_QUNIAXIAL_32::$6F2223845D9B324D8E7696FA3D5CF686::$22A32D7596E11511C7E81201844160AB _anon_0;
  u32 v;
};

struct nMotion::MPARAM_QUNIAXIAL_32
{
  nMotion::MPARAM_QUNIAXIAL_32::$6F2223845D9B324D8E7696FA3D5CF686 _anon_0;
};

struct nMotion::MPARAM_QUATKEY_48::$B519D27B680AA79F8A2C51316E4C43E0::$861513F6DD38A7223026B82706A60C23
{
  unsigned __int16 x0 : 11;
  unsigned __int16 y0 : 5;
  unsigned __int16 y1 : 6;
  unsigned __int16 z0 : 10;
  unsigned __int16 z1 : 1;
  unsigned __int16 w0 : 11;
  unsigned __int16 frame : 4;
};

union nMotion::MPARAM_QUATKEY_48::$B519D27B680AA79F8A2C51316E4C43E0
{
  u16 v[3];
  nMotion::MPARAM_QUATKEY_48::$B519D27B680AA79F8A2C51316E4C43E0::$861513F6DD38A7223026B82706A60C23 _anon_0;
};

struct nMotion::MPARAM_QUATKEY_48
{
  nMotion::MPARAM_QUATKEY_48::$B519D27B680AA79F8A2C51316E4C43E0 _anon_0;
};

struct nMotion::MPARAM_QUATKEY_40::$9B09DF5FE2D1B5661AEFF3286FA87E5A::$E360B801D4EA42D4AEB23F0AF9AE0044
{
  u8 x0;
  unsigned __int8 x1 : 1;
  unsigned __int8 y0 : 7;
  unsigned __int8 y1 : 2;
  unsigned __int8 z0 : 6;
  unsigned __int8 z1 : 3;
  unsigned __int8 w0 : 5;
  unsigned __int8 w1 : 4;
  unsigned __int8 frame : 4;
};

union nMotion::MPARAM_QUATKEY_40::$9B09DF5FE2D1B5661AEFF3286FA87E5A
{
  u8 v[5];
  nMotion::MPARAM_QUATKEY_40::$9B09DF5FE2D1B5661AEFF3286FA87E5A::$E360B801D4EA42D4AEB23F0AF9AE0044 _anon_0;
};

struct nMotion::MPARAM_QUATKEY_40
{
  nMotion::MPARAM_QUATKEY_40::$9B09DF5FE2D1B5661AEFF3286FA87E5A _anon_0;
};

struct nMotion::MPARAM_VECTOR3
{
  f32 x;
  f32 y;
  f32 z;
};

struct nMotion::MPARAM_QUATERNION4
{
  f32 x;
  f32 y;
  f32 z;
  f32 w;
};

struct nMotion::CPARAM_FLOATKEY
{
  f32 v;
  u32 frame;
};

typedef nMotion::CPARAM_FLOATKEY nMotion::fromFloat::T;

typedef sce::Gnm::BlendMultiplier sce::Gnm::BlendMultiplier_0;

typedef sce::Gnm::BlendFunc sce::Gnm::BlendFunc_0;

typedef sce::Gnm::AlphaToMaskMode sce::Gnm::AlphaToMaskMode_0;

typedef sce::Gnm::AlphaToMaskDitherThreshold sce::Gnm::AlphaToMaskDitherThreshold_0;

typedef sce::Gnm::AlphaToMaskDitherMode sce::Gnm::AlphaToMaskDitherMode_0;

enum nDraw::VARIABLE_ATTRIBUTE : __int32
{
  VA_EXTERN = 0x1,
  VA_CONST = 0x2,
  VA_NOINTERPOLATION = 0x4,
  VA_SHARED = 0x8,
  VA_UNIFORM = 0x10,
  VA_VOLATILE = 0x20,
  VA_STATIC = 0x40,
  VA_UNORM = 0x80,
  VA_SNORM = 0x100,
  VA_IN = 0x200,
  VA_OUT = 0x400,
  VA_INOUT = 0x800,
  VA_INLINE = 0x1000,
  VA_ROW_MAJOR = 0x2000,
  VA_COLUMN_MAJOR = 0x4000,
  VA_PACKED = 0x8000,
  VA_POINT = 0x10000,
  VA_LINE = 0x20000,
  VA_TRIANGLE = 0x30000,
  VA_LINEADJ = 0x40000,
  VA_TRIANGLEADJ = 0x50000,
  VA_INSENSITIVENAME = 0x200000,
  VA_TARGET = 0x400000,
};

struct __cppobj __attribute__((aligned(8))) cDraw::CMD_DRAW_INDEXED_INSTANCED : cDraw::CMD_DRAW_BASE
{
  u32 index_count;
  u32 index_start;
  u32 index_offset;
  u32 instance_count;
  u32 instance_start;
};

typedef sce::Gnm::DepthControlZWrite sce::Gnm::DepthControlZWrite_0;

typedef sce::Gnm::CompareFunc sce::Gnm::CompareFunc_0;

typedef sce::Gnm::StencilOp sce::Gnm::StencilOp_0;

enum nDraw::InputLayout_0::FETCH_DECODER : __int32
{
  FD_DEFAULT = 0x0,
  FD_COLOR4N = 0x1,
  FD_SCMP3N = 0x2,
  FD_UCMP3N = 0x3,
  FD_U8N = 0x4,
  FD_S8N = 0x5,
  FD_U8 = 0x6,
  FD_S8 = 0x7,
  FD_U16N = 0x8,
  FD_S16N = 0x9,
  FD_U16 = 0xA,
  FD_S16 = 0xB,
  FD_U8N_TO_S8N = 0xC,
  FD_U8N_TO_S8 = 0xD,
  FD_U8N_TO_U8 = 0xE,
  FD_U8N_TO_U8NL = 0xF,
  FD_S8N_TO_U8N = 0x10,
  FD_S8N_TO_U8 = 0x11,
  FD_S8N_TO_S8 = 0x12,
  FD_S8N_TO_U8NL = 0x13,
  FD_U8_TO_S8N = 0x14,
  FD_U8_TO_S8 = 0x15,
  FD_U8_TO_U8N = 0x16,
  FD_U8_TO_U8NL = 0x17,
  FD_S8_TO_S8N = 0x18,
  FD_S8_TO_U8 = 0x19,
  FD_S8_TO_U8N = 0x1A,
  FD_S8_TO_U8NL = 0x1B,
  FD_U16N_TO_S16N = 0x1C,
  FD_U16N_TO_S16 = 0x1D,
  FD_U16N_TO_U16 = 0x1E,
  FD_S16N_TO_S16 = 0x1F,
  FD_S16N_TO_U16 = 0x20,
  FD_S16N_TO_U16N = 0x21,
  FD_U16_TO_S16N = 0x22,
  FD_U16_TO_S16 = 0x23,
  FD_U16_TO_U16N = 0x24,
  FD_S16_TO_S16N = 0x25,
  FD_S16_TO_U16 = 0x26,
  FD_S16_TO_U16N = 0x27,
};

typedef sce::Gnm::PrimitiveSetupCullFaceMode sce::Gnm::PrimitiveSetupCullFaceMode_0;

typedef sce::Gnm::PrimitiveSetupFrontFace sce::Gnm::PrimitiveSetupFrontFace_0;

typedef sce::Gnm::PrimitiveSetupPolygonMode sce::Gnm::PrimitiveSetupPolygonMode_0;

typedef sce::Gnm::PrimitiveSetupPolygonOffsetMode sce::Gnm::PrimitiveSetupPolygonOffsetMode_0;

enum nDraw::MISC_MSAA_MODE : __int32
{
  MISC_MSAA_NONE = 0x0,
  MISC_MSAA_2X = 0x100,
  MISC_MSAA_4X = 0x200,
  MISC_MSAA_8X = 0x300,
  MISC_MSAA_4X_8Q = 0x400,
  MISC_MSAA_8X_8Q = 0x500,
  MISC_MSAA_4X_16Q = 0x600,
  MISC_MSAA_8X_16Q = 0x700,
  MISC_MSAA_8X_32Q = 0x800,
};

enum nDraw::MISC_OUTPUT_MODE : __int32
{
  MISC_OUTPUT_DEFAULT = 0x0,
  MISC_OUTPUT_32R = 0x1000000,
  MISC_OUTPUT_32GR = 0x2000000,
  MISC_OUTPUT_32AR = 0x3000000,
  MISC_OUTPUT_UNORM16ABGR = 0x4000000,
  MISC_OUTPUT_SNORM16ABGR = 0x5000000,
  MISC_OUTPUT_UINT16ABGR = 0x6000000,
  MISC_OUTPUT_SINT16ABGR = 0x7000000,
  MISC_OUTPUT_32ABGR = 0x8000000,
};

enum sce::GpuAddress::SurfaceType : __int32
{
  kSurfaceTypeColorTargetDisplayable = 0x1,
  kSurfaceTypeColorTarget = 0x2,
  kSurfaceTypeDepthOnlyTarget = 0x4,
  kSurfaceTypeStencilOnlyTarget = 0x5,
  kSurfaceTypeFmaskBuffer = 0x6,
  kSurfaceTypeTextureFlat = 0x7,
  kSurfaceTypeTextureVolume = 0x8,
  kSurfaceTypeTextureCubemap = 0x9,
  kSurfaceTypeRwTextureFlat = 0xA,
  kSurfaceTypeRwTextureVolume = 0xB,
  kSurfaceTypeRwTextureCubemap = 0xC,
};

union sce::GpuAddress::TilingParameters::$14EF2A0C3F133602EFE2BD9E861C06D7
{
  uint32_t m_numFragmentsPerPixel;
  uint32_t m_numElementsPerPixel;
};

struct sce::GpuAddress::SurfaceFlags::$2AC701F262B69E333E79DA30CA02C3BD
{
  unsigned __int32 m_colorTarget : 1;
  unsigned __int32 m_depthTarget : 1;
  unsigned __int32 m_stencilTarget : 1;
  unsigned __int32 m_texture : 1;
  unsigned __int32 m_cube : 1;
  unsigned __int32 m_volume : 1;
  unsigned __int32 m_fmask : 1;
  unsigned __int32 m_cubeAsArray : 1;
  unsigned __int32 m_overlay : 1;
  unsigned __int32 m_noStencil : 1;
  unsigned __int32 m_display : 1;
  unsigned __int32 m_prt : 1;
  unsigned __int32 m_pow2Pad : 1;
  unsigned __int32 m_reserved : 19;
};

union sce::GpuAddress::SurfaceFlags
{
  sce::GpuAddress::SurfaceFlags::$2AC701F262B69E333E79DA30CA02C3BD _anon_0;
  uint32_t m_value;
};

typedef sce::GpuAddress::SurfaceFlags sce::GpuAddress::SurfaceFlags_0;

struct __attribute__((aligned(4))) sce::GpuAddress::TilingParameters
{
  sce::Gnm::TileMode_0 m_tileMode;
  sce::Gnm::DataFormat m_elemFormat;
  uint32_t m_linearWidth;
  uint32_t m_linearHeight;
  uint32_t m_linearDepth;
  sce::GpuAddress::TilingParameters::$14EF2A0C3F133602EFE2BD9E861C06D7 _anon_0;
  uint32_t m_baseTiledPitch;
  uint32_t m_mipLevel;
  uint32_t m_arraySlice;
  sce::GpuAddress::SurfaceFlags_0 m_surfaceFlags;
  uint32_t m_bitsPerFragment;
  bool m_isBlockCompressed;
};

enum nDraw::Animation::TYPE : __int32
{
  TYPE_FLOAT_1 = 0x0,
  TYPE_VECTOR_0 = 0x1,
  TYPE_INT_1 = 0x2,
  TYPE_TEX = 0x3,
  TYPE_LEGACY = 0x4,
  TYPE_SAMPLER = 0x5,
  TYPE_TEXCOORD = 0x6,
  TYPE_TEXCOORD2 = 0x7,
};

enum nDraw::Animation::IP_TYPE : __int32
{
  IP_CONSTANT = 0x0,
  IP_LINEAR = 0x1,
  IP_HERMITE = 0x2,
  IP_CTLINEAR = 0x3,
  IP_CTHERMITE = 0x4,
};

enum nDraw::Animation::LEGACY_REPEAT_TYPE : __int32
{
  LEGACY_REPEAT_DEFAULT = 0x0,
  LEGACY_REPEAT_MIRROR = 0x1,
  LEGACY_REPEAT_REVERSE = 0x2,
};

struct nDraw::Animation::KEY
{
  u32 frame;
};

struct __cppobj nDraw::Animation::KEY_TEX : nDraw::Animation::KEY
{
  u32 padding;
  nDraw::Texture *value;
};

struct __cppobj nDraw::Animation::PARAM_TEX : nDraw::Animation::PARAM
{
  nDraw::Animation::KEY_TEX keys[1];
};

struct __cppobj nDraw::Animation::KEY_SAMPLER : nDraw::Animation::KEY
{
  s32 value;
};

struct __cppobj nDraw::Animation::PARAM_SAMPLER : nDraw::Animation::PARAM
{
  nDraw::Animation::KEY_SAMPLER keys[1];
};

struct __cppobj nDraw::Animation::KEY_INT : nDraw::Animation::KEY
{
  s32 value;
};

struct __cppobj nDraw::Animation::PARAM_INT : nDraw::Animation::PARAM
{
  SV_HANDLE svhandle;
  nDraw::Animation::KEY_INT keys[1];
};

struct __cppobj nDraw::Animation::KEY_FLOAT : nDraw::Animation::KEY
{
  f32 value;
};

struct __cppobj nDraw::Animation::PARAM_FLOAT : nDraw::Animation::PARAM
{
  SV_HANDLE svhandle;
  nDraw::Animation::KEY_FLOAT keys[1];
};

struct __cppobj nDraw::Animation::KEY_VECTOR : nDraw::Animation::KEY
{
  MtFloat4 value;
};

struct __cppobj nDraw::Animation::PARAM_VECTOR : nDraw::Animation::PARAM
{
  SV_HANDLE svhandle;
  nDraw::Animation::KEY_VECTOR keys[1];
};

struct __cppobj nDraw::Animation::KEY_TEXCOORD : nDraw::Animation::KEY
{
  MtFloat4 value;
  f32 rad;
};

struct __cppobj nDraw::Animation::PARAM_TEXCOORD : nDraw::Animation::PARAM
{
  SV_HANDLE svhandle;
  nDraw::Animation::KEY_TEXCOORD keys[1];
};

struct nDraw::Animation::LEGACY_ANIMATION
{
  unsigned __int32 curve_type : 4;
  unsigned __int32 repeat_type : 4;
  unsigned __int32 frame_count : 24;
  f32 min_value;
  f32 max_value;
  f32 curve_param;
  MtHermiteCurve curve;
};

struct __cppobj nDraw::Animation::PARAM_LEGACY : nDraw::Animation::PARAM
{
  SV_HANDLE svhandle;
  nDraw::Animation::LEGACY_ANIMATION legacy[1];
};

enum nDraw::TProceduralTexture : __int32
{
  TProceduralTexture_Unorm = 0x0,
  TProceduralTexture_Snorm = 0x1,
};

enum nDraw::TMaterialOutline : __int32
{
  TMaterialOutline_Indirect = 0x0,
  TMaterialOutline_Direct = 0x1,
};

enum nDraw::TMaterialVelocity : __int32
{
  TMaterialVelocity_NoStretch = 0x0,
  TMaterialVelocity_Stretch = 0x1,
};

struct nDraw::Material::setOutlineState::OUTLINE_DETECTOR
{
  f32 idstart;
  f32 idend;
  f32 zstart;
  f32 zinvrange;
};

struct __cppobj nDraw::MaterialNull : nDraw::Material
{
};

struct __cppobj nDraw::MaterialNull::MyDTI : MtDTI
{
};

enum nPhysics::RIGID_BODY_STATUS::STATE : __int32
{
  STATE_ELASTIC = 0x4,
  STATE_SLEEP = 0x10,
  STATE_OUTSIDE_AREA = 0x20,
  STATE_GROUND = 0x40,
  STATE_INVALID_GRAVITY = 0x80,
  STATE_INVALID_DAMPING = 0x100,
  STATE_INVALID_SLEEP = 0x200,
  STATE_INVALID_FRICTION = 0x400,
  STATE_INVALID_PHYSICS = 0x800,
  STATE_INVALID_ROTATION = 0x1000,
  STATE_ACTIVE_CONSTRAINT = 0x2000,
  STATE_FREEZE = 0x4000,
  STATE_FIXED = 0x8000,
  STATE_KEY_FRAME = 0x10000,
  STATE_DESTROY = 0x100000,
  STATE_RESET = 0x200000,
  STATE_CONTACT_CACHE = 0x400000,
  STATE_DISABLE = 0x800000,
  STATE_AGGRESSIVE_SLEEP = 0x1000000,
  STATE_CCD = 0x4000000,
  STATE_SCROLL = 0x8000000,
  STATE_PARTICULAR = 0x10000000,
  STATE_STATIC = 0x1C010,
};

enum nPhysics::CONSTRAINT::STATE : __int32
{
  STATE_ENABLE = 0x0,
  STATE_BREAK = 0x1,
  STATE_OUTSIDE_AREA_0 = 0x2,
  STATE_MAX = 0x3,
};

enum nPhysics::ISLAND::STATE : __int32
{
  STATE_ACTIVE_0 = 0x1,
  STATE_SLEEP_0 = 0x2,
  STATE_STATIONARY = 0x4,
  STATE_WAKEUP = 0x8,
  STATE_MAX_0 = 0x9,
};

struct nPhysics::Constant
{
  __int8 gap0[1];
};

enum nPhysics::Constant::$9758934748B2030EFEEB7AED2CFF130A : __int32
{
  MAX_USE_TASK = 0x3,
  MAX_THREAD = 0x3,
};

struct nPhysics::Collision
{
  __int8 gap0[1];
};

typedef bool (*nPhysics::Collision::INTERSECT_TRIANGLE_FUNCTION)(const nPhysics::SHAPE *, const nPhysics::SHAPE *);

typedef bool (*nPhysics::Collision::CLOSEST_FUNCTION)(const nPhysics::SHAPE *, const nPhysics::SHAPE *, nPhysics::CONTACT_INFO *);

typedef bool (*nPhysics::Collision::CONTACT_FUNCTION)(const nPhysics::SHAPE *, const nPhysics::Math::Vector3 *, const nPhysics::SHAPE *, const nPhysics::Math::Vector3 *, nPhysics::CONTACT_INFO *);

struct nPhysics::Memory
{
  __int8 gap0[1];
};

struct __cppobj rSoundPhysicsList::MyDTI : MtDTI
{
};

struct __cppobj rSoundPhysicsRigidBody::MyDTI : MtDTI
{
};

struct rSoundPhysicsRigidBody::cSoundFirstRequestData::REQUEST_LIST
{
  s8 TargetMaterialNo;
  u32 ReqNo;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundFirstRequestData : MtObject
{
  rSoundPhysicsRigidBody::cSoundFirstRequestData::REQUEST_LIST mData;
  rSoundRequest *mpSoundRequest;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundFirstRequestData::MyDTI : MtDTI
{
};

struct rSoundPhysicsRigidBody::cSoundFinishRequestData::REQUEST_LIST
{
  s8 TargetMaterialNo;
  u32 ReqNo;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundFinishRequestData : MtObject
{
  rSoundPhysicsRigidBody::cSoundFinishRequestData::REQUEST_LIST mData;
  rSoundRequest *mpSoundRequest;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundFinishRequestData::MyDTI : MtDTI
{
};

struct rSoundPhysicsRigidBody::cSoundSlideRequestData::REQUEST_LIST
{
  s8 TargetMaterialNo;
  f32 Speed;
  u32 ReqNo;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundSlideRequestData : MtObject
{
  rSoundPhysicsRigidBody::cSoundSlideRequestData::REQUEST_LIST mData;
  rSoundRequest *mpSoundRequest;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundSlideRequestData::MyDTI : MtDTI
{
};

struct rSoundPhysicsRigidBody::cSoundRollRequestData::REQUEST_LIST
{
  s8 TargetMaterialNo;
  f32 Revolution;
  u32 ReqNo;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundRollRequestData : MtObject
{
  rSoundPhysicsRigidBody::cSoundRollRequestData::REQUEST_LIST mData;
  rSoundRequest *mpSoundRequest;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundRollRequestData::MyDTI : MtDTI
{
};

struct rSoundPhysicsRigidBody::cSoundPhysicsRequestData::REQUEST_LIST
{
  s8 TargetMaterialNo;
  f32 Force;
  u32 ReqNo;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundPhysicsRequestData : MtObject
{
  rSoundPhysicsRigidBody::cSoundPhysicsRequestData::REQUEST_LIST mData;
  rSoundRequest *mpSoundRequest;
};

struct __cppobj rSoundPhysicsRigidBody::cSoundPhysicsRequestData::MyDTI : MtDTI
{
};

enum rSoundPhysicsRigidBody::SOUND_PHYSICAL_TYPE : __int32
{
  FIRST = 0x0,
  FINISH = 0x1,
  SLIDE = 0x2,
  ROLL = 0x3,
  PHYSICS_0 = 0x4,
};

struct nPhysics::Command
{
  __int8 gap0[1];
};

enum nPhysics::Command::$63A067AB45F5D3A9F021D2F28E76D0C4 : __int32
{
  TYPE_ADD_STATE = 0x0,
  TYPE_REMOVE_STATE = 0x1,
  TYPE_SET_STATUS = 0x2,
  TYPE_SET_POSITION = 0x3,
  TYPE_SET_ROTATION = 0x4,
  TYPE_SET_LINEAR_VELOCITY = 0x5,
  TYPE_SET_ANGULAR_VELOCITY = 0x6,
  TYPE_SET_POSTURE = 0x7,
  TYPE_ADD_FORCE = 0x8,
  TYPE_ADD_TORQUE = 0x9,
  TYPE_ADD_POSITION_FORCE = 0xA,
  TYPE_SET_MAXIMUM_MOTOR_TORQUE = 0xB,
  TYPE_SET_MINIMUM_MOTOR_TORQUE = 0xC,
  TYPE_SET_MOTOR_SPEED = 0xD,
  TYPE_SET_MOTOR_AXIS = 0xE,
  TYPE_SET_ADDITIONAL_SPRING_POWER = 0xF,
  TYPE_APPLY_WORLD_OFFSET = 0x10,
};

struct nPhysics::Command::BASE_COMMAND
{
  u32 Type;
  u32 ID;
};

struct __cppobj nPhysics::Command::APPLY_WORLD_OFFSET : nPhysics::Command::BASE_COMMAND
{
  MtFloat3 Offset;
  MtFloat3 AbsoluteOffset;
};

struct nPhysics::ISLAND_FACTORY
{
  u32 *mIslandIndexOfRigidBody;
  u32 mNumIsland;
  u32 mIslandIndex;
  const u32 mMaxRigidBody;
  const u32 mMaxMaterial;
  u32 mForwardIslandLink[256];
  u32 mBackwardIslandLink[256];
};

struct std::remove_reference<unsigned int *restrict &>
{
  __int8 gap0[1];
};

typedef unsigned int *std::remove_reference<unsigned int *restrict &>::type;

struct nPhysics::Thread
{
  __int8 gap0[1];
};

struct nPhysics::Math::Constant
{
  __int8 gap0[1];
};

struct __cppobj nCollision::cMotionSequenceSupport : MtObject
{
  bool mFlgActive;
  u32 mBitCheckRule;
  u32 mTargetMotionListIndex;
  u32 mTargetMotionSequencePageNo;
  u32 mTargetSequenceBit;
  u32 mNowSequenceBit;
  u32 mTargetBeforeMotionNo;
  f32 mTargetBeforeMotionFrame;
};

struct __cppobj nCollision::cMotionSequenceSupport::MyDTI : MtDTI
{
};

enum nCollision::cMotionSequenceSupport::RULE : __int32
{
  RULE_NONE = 0x0,
  RULE_EQUAL = 0x1,
  RULE_AND = 0x2,
  RULE_NOT_EQUAL = 0x3,
  RULE_NAND = 0x4,
};

struct __cppobj __attribute__((aligned(8))) nCollision::cGeometryJoint : nCollision::cGeometry
{
  MtGeomConvex *mpAttachGeometry;
  u8 mAttachMode;
  u32 mJointNo[2];
  bool mFlgEnableScale;
  u32 mFreeParam[4];
  MtObject *mpFreeObject;
  MtVector3 mBeforeAttachPos0;
  uModel *mpAttachModel;
  u32 mUniqueID;
};

struct __cppobj nCollision::cGeometryJoint::MyDTI : MtDTI
{
};

enum nCollision::cGeometryJoint::ATTACH_TYPE : __int32
{
  ATTACH_TYPE_NULL = 0x0,
  ATTACH_TYPE_JOINT_POS = 0x1,
  ATTACH_TYPE_JOINT_LOCAL = 0x2,
  ATTACH_TYPE_JOINT_FIX = 0x3,
  ATTACH_TYPE_JOINT_FIT = 0x4,
};

enum nCollision::cGeometryJoint::JOINT : __int32
{
  JOINT_0 = 0x0,
  JOINT_1 = 0x1,
  JOINT_NUM = 0x2,
};

enum nCollision::cGeometryJoint::$55AA3A084D08562C4FE9AFB5473F1E18 : __int32
{
  FREE_PARAM_0 = 0x0,
  FREE_PARAM_1 = 0x1,
  FREE_PARAM_2 = 0x2,
  FREE_PARAM_3 = 0x3,
  FREE_PARAM_MAX = 0x4,
};

typedef void (*nCollision::OBJ_HIT_FUNC)(MtObject *, nCollision::cCollisionNode *, nCollision::cCollisionNode *, u32, u32, MtContact *, void *);

typedef bool (*nCollision::OBJ_HIT_FUNC_FILTERING_NODE)(MtObject *, nCollision::cCollisionNode *, nCollision::cCollisionNode *, void *);

typedef bool (*nCollision::OBJ_HIT_FUNC_FILTERING_GEOMETRY)(MtObject *, nCollision::cCollisionNode *, nCollision::cCollisionNode *, u32, u32, void *);

typedef void (*nCollision::OBJ_HIT_FUNC_PASSIVE)(MtObject *, nCollision::cCollisionNode *, u32, MtContact *, void *);

struct __cppobj nCollision::cGeometryJointGroup : nCollision::cCollisionNode:960
{
  u32 mFreeParam[4];
  MtObject *mpFreeObject;
  uModel *mpAttachModel;
  u32 mUniqueID;
  u32 mUniqueIDTableNum;
  u32 *mpUniqueIDTable;
  nCollision::cMotionSequenceSupport *mpMotionSequenceSupport;
  MtCollisionUtil::MtDtiObject mGeometryFreeObjectDTI;
};

struct __cppobj nCollision::cGeometryJointGroup::MyDTI : MtDTI
{
};

enum nCollision::cGeometryJointGroup::$8A2DEE3D3DCD277313E02EAF16EB0C10 : __int32
{
  FREE_PARAM_0_0 = 0x0,
  FREE_PARAM_1_0 = 0x1,
  FREE_PARAM_2_0 = 0x2,
  FREE_PARAM_3_0 = 0x3,
  FREE_PARAM_MAX_0 = 0x4,
};

struct __cppobj MtGeomLineSweptSphere : MtGeomCapsule
{
};

struct __cppobj MtGeomLineSweptSphere::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) cGeomConvexHull : MtGeomConvex
{
  MtVector3 pos;
  MtMatrix mMat;
  MtMatrix mInvMat;
  rConvexHull *mpCH;
};

struct __attribute__((aligned(4))) rConvexHull::HEADER
{
  u32 magic;
  u8 version;
};

struct __cppobj rConvexHull : cResource
{
  rConvexHull::HEADER mHeader;
  u32 mNumberOfVertex;
  MtVector3 *mpPolygonVertex;
  u32 *mpNumberOfVertexNeighbors;
  u32 mMaxNeighbors;
  u32 *mpVertexNeighbors;
  MtAABB mBoundingAABB;
  MtSphere mBoundingSphere;
};

struct __cppobj cGeomConvexHull::MyDTI : MtDTI
{
};

struct __cppobj rConvexHull::MyDTI : MtDTI
{
};

struct __cppobj MtNetCom::IAchievementOption : MtNetCom::INative
{
};

struct __cppobj MtNetCom::CAchievementOption : MtObject, MtNetCom::IAchievementOption
{
};

enum nNetwork::Session::$275F2A1AFC0B9C2620ACE487DAFA0B7A : __int32
{
  STATE_DEAD_0 = 0x0,
  STATE_OFFLINE = 0x1,
  STATE_ONLINE = 0x2,
  STATE_CREATE = 0x3,
  STATE_SEARCH = 0x4,
  STATE_JOIN = 0x5,
  STATE_FINAL = 0x6,
  STATE_START = 0x7,
  STATE_END_0 = 0x8,
  STATE_LOCK = 0x9,
  STATE_UNLOCK = 0xA,
  STATE_INVITE = 0xB,
  STATE_NUM_3 = 0xC,
};

enum nNetwork::SessionDatabase::$49A545589C92569B0CCA019C19AC16DF : __int32
{
  SESSION_ONLINE = 0x1,
  SESSION_LOCK = 0x2,
  SESSION_START = 0x4,
  SESSION_MATCH = 0x8,
  SESSION_TERMINATE = 0x10,
};

enum nNetwork::Member::$446536A62096246239D676CE1E737AD0 : __int32
{
  ATTR_NONE = 0x0,
  ATTR_SELF = 0x1,
  ATTR_ENTRY = 0x2,
  ATTR_MATCH = 0x4,
  ATTR_TERMINATE = 0x8,
  ATTR_MUTE = 0x10,
  ATTR_TALKING = 0x20,
  ATTR_RESTRICT = 0x40,
};

struct __cppobj nNetwork::Transport::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::Transport::ForwardQueue::MyDTI : MtDTI
{
};

struct nNetwork::Transport::FrameHeader
{
  s32 mReservePos;
  u32 mFlag;
  u32 mGame;
  u32 mVoice;
  u32 mSequence;
  u32 mDstKey;
  u32 mDstIdSize;
  u8 mDstIdData[64];
  u32 mSrcKey;
  u32 mSrcIdSize;
  u8 mSrcIdData[64];
  u32 mForwardNum;
  u32 mTTL;
  s32 mForward[16];
};

struct __cppobj nNetwork::Protocol::MyDTI : MtDTI
{
};

struct nNetwork::PacketBase
{
  int (**_vptr$PacketBase)(void);
  u32 mHash[5];
  u32 mHashLength;
  s32 mHashType;
  s32 mReservePos;
};

struct __cppobj nNetwork::PacketWriter : nNetwork::PacketBase
{
  u32 mLength;
  u32 mNonce;
  u32 mGamePosition;
  u32 mVoicePosition;
  MtMemoryStream mGameStream;
  MtMemoryStream mVoiceStream;
  u8 mGameBuffer[768];
  u8 mVoiceBuffer[768];
};

struct __cppobj nNetwork::PacketReader : nNetwork::PacketBase
{
  u32 mGameData;
  MtMemoryStream mGameStream;
  MtMemoryStream mVoiceStream;
};

struct __cppobj nNetwork::Connect::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::VoiceChat::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::VoiceChat::Talker::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::RpcNetSystem_LinkState : cRemoteCall:96
{
  u32 mHop[16];
  u32 mRtt[16];
  u32 mRecoveryTime[16];
  u32 mForwardNum;
  u32 mForwardKeyList[16];
  u32 mForwardInterval[16];
};

struct __cppobj nNetwork::RpcNetSystem_LinkState::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::RpcNetSystem_ReqDetour : cRemoteCall:96
{
  u8 mUniqueIdData[64];
};

struct __cppobj nNetwork::RpcNetSystem_ReqDetour::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::RpcNetSystem_AnsDetour : cRemoteCall:96
{
  u32 mForwardNum;
  s32 mForward[16];
  u32 mForwardInterval;
  u8 mUniqueIdData[64];
};

struct __cppobj nNetwork::RpcNetSystem_AnsDetour::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::RpcNetSystem_RouteKey : cRemoteCall:96
{
  u32 mRouteKey;
  u8 mInitConfig[64];
};

struct __cppobj nNetwork::RpcNetSystem_RouteKey::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::RpcNetSystem_RouteKeyAck : cRemoteCall
{
};

struct __cppobj nNetwork::RpcNetSystem_RouteKeyAck::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::RpcNetSystem_TryConnect : cRemoteCall
{
};

struct __cppobj nNetwork::RpcNetSystem_TryConnect::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::RpcNetSystem_HealthCheck : cRemoteCall:96
{
  f32 mLossRate;
};

struct __cppobj nNetwork::RpcNetSystem_HealthCheck::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(4))) nNetwork::RpcNetSystem_Config : cRemoteCall:96
{
  u8 mDiff;
  u8 mConfig[64];
};

struct __cppobj nNetwork::RpcNetSystem_Config::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::TransportQueue<nNetwork::ProtocolStandard::QHeader,128> : nNetwork::BlockQueue
{
  void *mBlockList[128];
};

struct __cppobj nNetwork::ProtocolStandard::Queue : nNetwork::TransportQueue<nNetwork::ProtocolStandard::QHeader,128>
{
  u16 mHeadSequence;
  u16 mTailSequence;
  u16 mSendSequence;
  u16 mRecvSequence;
  MtNetTime::Total mAckTime;
  u32 mCutoff;
  u32 mSmoothedSpace;
  u32 mSmoothedUnrel;
  u32 mTotal[16];
  u32 mCutoffTime;
};

struct nNetwork::ProtocolStandard::Buffer
{
  bool mFatal;
  u16 mSequence;
  u8 *mpBlock;
  u8 *mpExtra;
  u32 mLength;
  u32 mTag;
};

struct __cppobj nNetwork::ProtocolStandard : nNetwork::Protocol
{
  u32 mRedundancy;
  nNetwork::ProtocolStandard::Queue mQueue[16];
  nNetwork::ProtocolStandard::Buffer mBuffer[16];
};

struct __cppobj nNetwork::ProtocolStandard::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::ProtocolStandard::Queue::MyDTI : MtDTI
{
};

struct nNetwork::ProtocolStandard::QHeader
{
  u8 mFlag;
  u8 mCtrl;
  u8 mPrio;
  u8 mSend;
  u16 mGetElapse;
  u16 m1stElapse;
  u32 mPutTime;
};

struct __attribute__((aligned(4))) nNetwork::Decoder
{
  MtStream *mStream;
  MtMemoryStream mMemory;
  u32 mBitOffset;
  u8 mTempBuffer;
  bool mIsDrain;
};

enum sNetwork::$534B35FADC3E77973D3855B2F975F0C2 : __int32
{
  CALLBACK_MESSAGE = 0x0,
  CALLBACK_CORE = 0x1,
  CALLBACK_CONNECT = 0x2,
  CALLBACK_SESSION = 0x3,
  CALLBACK_VOICE = 0x4,
  CALLBACK_SHM_STAR = 0x5,
  CALLBACK_SHM_MESH = 0x6,
  CALLBACK_USER = 0x7,
};

enum MtNetCore::$A8BC1F653C9699C7A9CBD85AFEEC51D3 : __int32
{
  SERVICE_NONE = 0x0,
  SERVICE_LIVE = 0x1,
  SERVICE_PSN = 0x2,
  SERVICE_UDS = 0x3,
  SERVICE_NEX = 0x4,
  SERVICE_5 = 0x5,
  SERVICE_WINSOCK = 0x6,
  SERVICE_CID = 0x7,
  SERVICE_8 = 0x8,
  SERVICE_VITA_PSN = 0x9,
  SERVICE_VITA_ADHOC = 0xA,
  SERVICE_11 = 0xB,
  SERVICE_12 = 0xC,
  SERVICE_NNAC = 0xD,
  SERVICE_14 = 0xE,
  SERVICE_15 = 0xF,
  SERVICE_16 = 0x10,
  SERVICE_17 = 0x11,
  SERVICE_18 = 0x12,
  SERVICE_19 = 0x13,
  SERVICE_XBOXONE_LIVE = 0x14,
  SERVICE_PS4_PSN = 0x15,
  SERVICE_STEAM = 0x16,
};

enum nNetwork::TagChecker::$9BD0520A64C07E89AFDB9AF1253EEA24 : __int32
{
  CHECK_RESULT_UP_TO_DATE = 0x0,
  CHECK_RESULT_OUT_OF_DATE = 0x1,
  CHECK_RESULT_INCOMPLETE = 0x2,
  CHECK_RESULT_NOT_FOUND = 0x3,
};

struct __attribute__((aligned(4))) nNetwork::Coder
{
  int (**_vptr$Coder)(void);
  MtStream *mStream;
  MtMemoryStream mMemory;
  u32 mBitOffset;
  u8 mTempBuffer;
  bool mIsOverflow;
};

enum cRemoteCall::$70CF19AA123EA3D1CAB1F624813F3069 : __int32
{
  ATTR_NONE_0 = 0x0,
  ATTR_USE_SEREALIZER = 0x1,
  ATTR_USE_DEADCOPY = 0x2,
  ATTR_USE_ENCODE = 0x4,
  SYS_ATTR_SEND = 0x10000,
  SYS_ATTR_ACK = 0x20000,
};

struct nNetwork::Transport::SendEntry
{
  u32 key;
  u32 prio;
  s32 route;
  s32 forward;
};

struct nNetwork::Transport::SendEntryList
{
  nNetwork::Transport::SendEntry list[16];
};

struct __cppobj nGUI::Language : MtObject
{
};

struct __cppobj nGUI::Language::MyDTI : MtDTI
{
};

enum nGUI::TEXTURE::RTYPE : __int32
{
  RTYPE_TEXTURE = 0x0,
  RTYPE_RENDERTARGET = 0x1,
  RTYPE_NUM = 0x2,
};

enum nGUI::KEY::MODE : __int32
{
  MODE_CONSTANT_0 = 0x0,
  MODE_OFFSET_0 = 0x1,
  MODE_TRIGGER_0 = 0x2,
  MODE_LINEAR_0 = 0x3,
  MODE_OFFSET_F_0 = 0x4,
  MODE_HERMITE_0 = 0x5,
  MODE_EASEIN = 0x6,
  MODE_EASEOUT = 0x7,
  MODE_HERMITE2 = 0x8,
  MODE_NUM = 0x9,
  MODE_SUMMARY = 0xA,
  MODE_DEFAULT_1 = 0xB,
};

typedef void (*$<33589376,1>::SETTER)(MtObject *, s32);

typedef void (*$<33589510,1>::SETTER)(MtObject *, f32);

typedef void (*$<33589601,1>::SETTER)(MtObject *, bool);

typedef void (*$<33589692,1>::SETTER)(MtObject *, const MtString *);

typedef void (*nGUI::PROP_SETTER::setVector4::SETTER)(MtObject *, const MtColor *);

typedef void (*nGUI::PROP_SETTER::setU32::SETTER)(MtObject *, u32);

enum nDraw::TGUI : __int32
{
  TGUI_Polygon = 0x0,
  TGUI_Texture = 0x1,
  TGUI_Blend = 0x2,
  TGUI_Develop = 0x3,
};

typedef unsigned __int8 Byte;

typedef Byte Bytef;

typedef unsigned int uInt;

typedef unsigned __int64 uLong;

typedef void *voidpf;

typedef voidpf (*alloc_func)(voidpf, uInt, uInt);

typedef void (*free_func)(voidpf, voidpf);

struct z_stream_s
{
  Bytef *next_in;
  uInt avail_in;
  uLong total_in;
  Bytef *next_out;
  uInt avail_out;
  uLong total_out;
  char *msg;
  internal_state *state;
  alloc_func zalloc;
  free_func zfree;
  voidpf opaque;
  int data_type;
  uLong adler;
  uLong reserved;
};

typedef z_stream_s z_stream;

struct __cppobj rArchive::DecompressStream : MtStream
{
  MtStream *mpIn;
  rArchive *mpArc;
  u32 mCurOut;
  u32 mCurIn;
  u32 mCurRead;
  u32 mDataSize;
  u32 mOrgSize;
  void *mpInBuf[2];
  u32 mInBufsize[2];
  u32 mMaxLength;
  u32 mWbFlag;
  u32 mInOffset;
  z_stream mZStream;
};

typedef z_stream *z_streamp;

typedef unsigned __int64 ulg;

typedef gz_header_s gz_header;

typedef gz_header *gz_headerp;

typedef unsigned __int16 ush;

typedef ush Pos;

typedef Pos Posf;

typedef unsigned int IPos;

union ct_data_s::$6E6EA6B1B47F7F69683B41CD99E76C0A
{
  ush freq;
  ush code;
};

union ct_data_s::$4F0F685EC8FA33D55D00A49514E362B1
{
  ush dad;
  ush len;
};

struct ct_data_s
{
  ct_data_s::$6E6EA6B1B47F7F69683B41CD99E76C0A fc;
  ct_data_s::$4F0F685EC8FA33D55D00A49514E362B1 dl;
};

typedef ct_data_s ct_data;

struct static_tree_desc_s;

typedef struct static_tree_desc_s static_tree_desc;

struct tree_desc_s
{
  ct_data *dyn_tree;
  int max_code;
  static_tree_desc *stat_desc;
};

typedef unsigned __int8 uch;

typedef uch uchf;

typedef ush ushf;

struct internal_state
{
  z_streamp strm;
  int status;
  Bytef *pending_buf;
  ulg pending_buf_size;
  Bytef *pending_out;
  uInt pending;
  int wrap;
  gz_headerp gzhead;
  uInt gzindex;
  Byte method;
  int last_flush;
  uInt w_size;
  uInt w_bits;
  uInt w_mask;
  Bytef *window;
  ulg window_size;
  Posf *prev;
  Posf *head;
  uInt ins_h;
  uInt hash_size;
  uInt hash_bits;
  uInt hash_mask;
  uInt hash_shift;
  __int64 block_start;
  uInt match_length;
  IPos prev_match;
  int match_available;
  uInt strstart;
  uInt match_start;
  uInt lookahead;
  uInt prev_length;
  uInt max_chain_length;
  uInt max_lazy_match;
  int level;
  int strategy;
  uInt good_match;
  int nice_match;
  ct_data_s dyn_ltree[573];
  ct_data_s dyn_dtree[61];
  ct_data_s bl_tree[39];
  tree_desc_s l_desc;
  tree_desc_s d_desc;
  tree_desc_s bl_desc;
  ush bl_count[16];
  int heap[573];
  int heap_len;
  int heap_max;
  uch depth[573];
  uchf *l_buf;
  uInt lit_bufsize;
  uInt last_lit;
  ushf *d_buf;
  ulg opt_len;
  ulg static_len;
  uInt matches;
  uInt insert;
  ush bi_buf;
  int bi_valid;
  ulg high_water;
};

struct __attribute__((aligned(8))) gz_header_s
{
  int text;
  uLong time;
  int xflags;
  int os;
  Bytef *extra;
  uInt extra_len;
  uInt extra_max;
  Bytef *name;
  uInt name_max;
  Bytef *comment;
  uInt comm_max;
  int hcrc;
  int done;
};

struct __cppobj rArchive::DecompressStream::MyDTI : MtDTI
{
};

enum rArchive::QUALITY : __int32
{
  QUALITY_LOWEST_0 = 0x0,
  QUALITY_LOW_0 = 0x1,
  QUALITY_DEFAULT = 0x2,
  QUALITY_HIGH_1 = 0x3,
  QUALITY_HIGHEST_0 = 0x4,
};

struct __cppobj rArchive::CipherStream : MtStream
{
  MtCipher mCi;
  MtStream *mpSt;
};

struct rArchive::RESOURCE_INFO
{
  MT_CHAR path[64];
  u32 type;
  u32 datasize;
  unsigned __int32 orgsize : 29;
  unsigned __int32 quality : 3;
  u32 offset;
};

struct rGraphPatch::Hdr
{
  u32 magic;
  u32 version;
  u32 component_num;
  u32 connection_num;
};

struct rGraphPatch::Comp
{
  u32 dti;
};

struct rGraphPatch::Conn
{
  u32 t0obj;
  u32 t0port;
  u32 t1obj;
  u32 t1port;
};

struct cTempMemory
{
  void *mpMemory;
};

struct rImplicitSurface::HEADER
{
  u32 magic;
  u32 version;
};

struct rMetaSet::Header
{
  s32 mMagic;
  s32 mVersion;
  u32 mObjectNum;
};

struct __cppobj rMetaSetXml::ObjectData::PropertyID : MtObject
{
  rMetaSetXml::ObjectData *mpObjectData;
  MtProperty::TYPE mType;
  MtString mName;
};

struct __cppobj cMetaSetPropertyData : MtObject
{
  MtString mName;
  u32 mType;
  u32 mCount;
  void *mpData;
  u32 mDataSize;
  MtObject *mpObject;
  MtArray *mpObjectPool;
};

struct __cppobj cMetaSetPropertyData::MyDTI : MtDTI
{
};

struct rModel::MODEL_HDR
{
  u32 magic;
  u16 version;
  u16 jnt_num;
  u16 primitive_num;
  u16 material_num;
  u32 vertex_num;
  u32 index_num;
  u32 polygon_num;
  u32 vertexbuf_size;
  u32 texture_num;
  u32 parts_num;
  u32 padding1;
  size_t joint_info;
  size_t parts_info;
  size_t material_info;
  size_t primitive_info;
  size_t vertex_data;
  size_t index_data;
  size_t rcn_data;
  MtSphere bounding_sphere;
  MtAABB bounding_box;
  rModel::MODEL_INFO modelinfo;
};

enum nMotion::MOTION_INFO::DUPLICATE_FLAG : __int32
{
  D_MOTION = 0x1,
  D_SEQUENCE = 0x2,
  D_KEYFRAME = 0x4,
};

struct __cppobj __attribute__((aligned(8))) rMovieOnMemory : rMovie
{
  void *mpStreamBuffer;
  u32 mStreamBufferSize;
};

struct __cppobj rMovieOnMemory::MyDTI : MtDTI
{
};

struct __cppobj rMovieOnDisk : rMovie
{
  MtString mPath;
};

struct __cppobj rMovieOnDisk::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) rMovieOnMemoryInterMediate : rMovieOnMemory
{
};

struct __cppobj rMovieOnMemoryInterMediate::MyDTI : MtDTI
{
};

struct __cppobj rMovieOnDiskInterMediate : rMovieOnDisk
{
};

struct __cppobj rMovieOnDiskInterMediate::MyDTI : MtDTI
{
};

struct rOccluder::HEADER
{
  u32 magic;
  u16 version;
  u16 dummy;
};

struct rTexture::HEADER
{
  u32 magic;
  unsigned __int32 version : 16;
  unsigned __int32 attr : 8;
  unsigned __int32 prebias : 4;
  unsigned __int32 type : 4;
  unsigned __int32 level_count : 6;
  unsigned __int32 width : 13;
  unsigned __int32 height : 13;
  unsigned __int32 array_count : 8;
  unsigned __int32 format : 8;
  unsigned __int32 depth : 13;
  unsigned __int32 auto_resize : 1;
  unsigned __int32 render_target : 1;
  unsigned __int32 use_vtf : 1;
};

struct nDraw::ST_BLOCK
{
  unsigned __int32 type : 4;
  unsigned __int32 attrtype : 4;
  unsigned __int32 attrcount : 8;
  unsigned __int32 statement_num : 16;
  u32 padding1;
  nDraw::ST_BASE *statements[1];
};

struct nDraw::ST_DO
{
  unsigned __int32 type : 4;
  unsigned __int32 attrtype : 4;
  unsigned __int32 attrcount : 8;
  unsigned __int32 reserved : 16;
  u32 padding1;
  nDraw::ST_EXPRESSION *pcondition;
  nDraw::ST_BASE *pstatement;
};

struct nDraw::ST_WHILE
{
  unsigned __int32 type : 4;
  unsigned __int32 attrtype : 4;
  unsigned __int32 attrcount : 8;
  unsigned __int32 reserved : 16;
  u32 padding1;
  nDraw::ST_EXPRESSION *pcondition;
  nDraw::ST_BASE *pstatement;
};

struct nDraw::ST_FOR
{
  unsigned __int32 type : 4;
  unsigned __int32 attrtype : 4;
  unsigned __int32 attrcount : 8;
  unsigned __int32 initializer_num : 8;
  unsigned __int32 iterator_num : 8;
  u32 padding1;
  nDraw::ST_EXPRESSION *pcondition;
  nDraw::ST_BASE *pstatement;
  nDraw::ST_BASE *psubstatement[1];
};

struct nDraw::ST_IF
{
  unsigned __int32 type : 4;
  unsigned __int32 attrtype : 4;
  unsigned __int32 attrcount : 8;
  unsigned __int32 reserved : 16;
  u32 padding1;
  nDraw::ST_EXPRESSION *pcondition;
  nDraw::ST_BASE *pthen;
  nDraw::ST_BASE *pelse;
};

struct nDraw::ST_RETURN
{
  unsigned __int32 type : 4;
  unsigned __int32 reserved : 28;
  u32 padding1;
  nDraw::ST_EXPRESSION *pstatement;
};

struct nDraw::ST_DECLARATION
{
  unsigned __int32 type : 4;
  unsigned __int32 variable : 14;
  unsigned __int32 reserved : 14;
  u32 padding1;
  nDraw::ST_EXPRESSION *pinitializer;
};

struct __cppobj nDraw::INPUTLAYOUT : nDraw::OBJECT
{
  unsigned __int32 element_num : 16;
  unsigned __int32 stride : 16;
  u32 padding1;
  void *pdefaultvalues;
  nDraw::INPUT_ELEMENT elements[1];
};

struct rStarCatalog::Header
{
  s32 mMagic;
  u32 mVersion;
  u32 mStarNum;
};

struct __cppobj rTexturePNG : rTexture
{
};

struct __cppobj rTexturePNG::MyDTI : MtDTI
{
};

enum ScePngDecAttribute : __int32
{
  SCE_PNG_DEC_ATTRIBUTE_NONE = 0x0,
  SCE_PNG_DEC_ATTRIBUTE_BIT_DEPTH_16 = 0x1,
};

enum ScePngDecPixelFormat : __int32
{
  SCE_PNG_DEC_PIXEL_FORMAT_R8G8B8A8 = 0x0,
  SCE_PNG_DEC_PIXEL_FORMAT_B8G8R8A8 = 0x1,
};

struct ScePngDecParseParam
{
  const void *pngMemAddr;
  uint32_t pngMemSize;
  uint32_t reserved0;
};

struct ScePngDecImageInfo
{
  uint32_t imageWidth;
  uint32_t imageHeight;
  uint16_t colorSpace;
  uint16_t bitDepth;
  uint32_t imageFlag;
};

struct ScePngDecCreateParam
{
  uint32_t thisSize;
  uint32_t attribute;
  uint32_t maxImageWidth;
};

struct ScePngDecDecodeParam
{
  const void *pngMemAddr;
  void *imageMemAddr;
  uint32_t pngMemSize;
  uint32_t imageMemSize;
  uint16_t pixelFormat;
  uint16_t alphaValue;
  uint32_t imagePitch;
};

typedef ScePngDecParseParam ScePngDecParseParam_0;

typedef ScePngDecImageInfo ScePngDecImageInfo_0;

typedef ScePngDecCreateParam ScePngDecCreateParam_0;

typedef void *ScePngDecHandle;

typedef ScePngDecDecodeParam ScePngDecDecodeParam_0;

enum rEffectList::ResourceInfo::STATUS : __int32
{
  STATUS_TEX_CREATE_FAILED = 0x1,
  STATUS_TEX0_CREATE_FAILED = 0x1,
  STATUS_TEX1_CREATE_FAILED = 0x2,
  STATUS_TEX2_CREATE_FAILED = 0x4,
  STATUS_EAN_CREATE_FAILED = 0x8,
  STATUS_MOD_CREATE_FAILED = 0x10,
  STATUS_R_EFS_CREATE_FAILED = 0x20,
  STATUS_P_EFS_CREATE_FAILED = 0x40,
  STATUS_B_EFL_CREATE_FAILED = 0x80,
  STATUS_F_EFL_CREATE_FAILED = 0x100,
  STATUS_E_VIB_CREATE_FAILED = 0x200,
  STATUS_SRQ_CREATE_FAILED = 0x400,
  STATUS_FRC_CREATE_FAILED = 0x800,
  STATUS_NO_EAN_CREATE = 0x1000,
  STATUS_NO_MOD_CREATE = 0x2000,
  STATUS_NO_P_EFS_CREATE = 0x4000,
  STATUS_NO_FRC_CREATE = 0x8000,
  STATUS_NO_TEX_CREATE = 0x10000,
  STATUS_ERROR_0 = 0xFFFFF,
  STATUS_RTX_CREATE = 0x1000000,
  STATUS_RTX0_CREATE = 0x1000000,
  STATUS_RTX1_CREATE = 0x2000000,
  STATUS_RTX2_CREATE = 0x4000000,
  STATUS_PTX_CREATE = 0x10000000,
  STATUS_PTX0_CREATE = 0x10000000,
  STATUS_PTX1_CREATE = 0x20000000,
  STATUS_PTX2_CREATE = 0x40000000,
};

enum rEffectList::TEX : __int32
{
  TEX_BM = 0x0,
  TEX_NM = 0x1,
  TEX_MM = 0x2,
  MAX_TEX = 0x3,
};

struct rEffectList::EFL_HEADER
{
  u32 Magic;
  u32 Version;
  u32 ParamBuffSize;
  f32 BaseFps;
  unsigned __int32 ListNum : 16;
  unsigned __int32 JointNum : 16;
  unsigned __int32 UnitGeneratorType : 4;
  unsigned __int32 UnitMoveType : 4;
  unsigned __int32 JointShare : 4;
  unsigned __int32 EFLHeader0415 : 4;
  unsigned __int32 EFLHeader1616 : 16;
  u32 EFLHeader3218;
  u32 EFLHeader321c;
  u32 UnitGeneratorParamOffset;
  u32 UnitMoveParamOffset;
  u32 UnitJointParamOffset;
  u32 UnitParamOffset;
};

typedef rEffectList::EFL_HEADER rEffectList::EFL_HEADER_0;

struct __cppobj rVibration::MyDTI : MtDTI
{
};

typedef rVibration::VIB_INDEX rVibration::VIB_INDEX_0;

struct rVibration::VIB_INDEX
{
  unsigned __int32 PadVibType : 8;
  unsigned __int32 PadVibParamOffset : 24;
  unsigned __int32 CamVibType : 8;
  unsigned __int32 CamVibParamOffset : 24;
  u32 VIBIndex3208;
  u32 VIBIndex320c;
};

typedef rVibration::VIB_COMMON rVibration::VIB_COMMON_0;

struct rVibration::VIB_COMMON
{
  u32 VibOptionFlag;
  u32 VCommon3207;
  f32 VibFadeStartDist;
  f32 VibFadeEndDist;
};

enum nEffect::EFC_TRAIT : __int32
{
  EFC_TRAIT_LIGHT = 0x1,
  EFC_TRAIT_ADHESION = 0x2,
  EFC_TRAIT_PARALLAX = 0x4,
  EFC_TRAIT_COLLISION = 0x8,
  EFC_TRAIT_FORCE = 0x10,
};

typedef rEffectStrip::EFS_HEADER rEffectStrip::EFS_HEADER_0;

struct __cppobj MtTypedArray<rSoundCurveXml::Element> : MtArray
{
};

struct rSoundCurveXml::Curve::CurveParam
{
  f32 zeroDistValue;
  f32 maxDistValue;
  MtTypedArray<rSoundCurveXml::Element> points;
};

struct __cppobj rSoundCurveXml::Curve : MtObject
{
  f32 mMaxDistance;
  rSoundCurveXml::Curve::CurveParam mElements[1];
};

struct __cppobj __attribute__((aligned(8))) rSoundCurveXml : cResource
{
  rSoundCurveXml::Curve mCurve;
  bool mEnable;
};

struct __cppobj rSoundCurveXml::MyDTI : MtDTI
{
};

struct __cppobj rSoundCurveXml::Curve::MyDTI : MtDTI
{
};

struct __cppobj rSoundCurveXml::Element : MtObject
{
  f32 mDistance;
  f32 mValue;
};

struct __cppobj rSoundCurveXml::Element::MyDTI : MtDTI
{
};

struct __cppobj MtTypedArray<rSoundDirectionalCurveXml::Curve> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) rSoundDirectionalCurveXml : cResource
{
  MtTypedArray<rSoundDirectionalCurveXml::Curve> mCurves;
  u32 mCurrentTarget;
};

struct __cppobj rSoundDirectionalCurveXml::MyDTI : MtDTI
{
};

struct __cppobj MtTypedArray<rSoundDirectionalCurveXml::Element> : MtArray
{
};

struct __cppobj __attribute__((aligned(8))) rSoundDirectionalCurveXml::Curve : MtObject
{
  MtTypedArray<rSoundDirectionalCurveXml::Element> mElements;
  f32 mZeroRadianValue;
  f32 mPiRadianValue;
  bool mEnable;
};

struct __cppobj rSoundDirectionalCurveXml::Curve::MyDTI : MtDTI
{
};

struct __cppobj rSoundDirectionalCurveXml::Element : MtObject
{
  f32 mAngle;
  f32 mValue;
};

struct __cppobj rSoundDirectionalCurveXml::Element::MyDTI : MtDTI
{
};

enum rSoundDirectionalCurveXml::TargetPlatform : __int32
{
  PF_COMMON = 0x0,
  PF_XBOX360 = 0x1,
  PF_PS3 = 0x2,
  PF_WINDOWS = 0x3,
  PF_MAX_NUM = 0x4,
};

struct rSoundDirectionalSet::NATIVE_FILE_HEADER
{
  s32 Magic;
  s32 Version;
  u32 ListNum;
  u32 CurveNum;
};

struct __cppobj MtTypedArray<rSoundPhysicsJoint::cSoundJointRequestData> : MtArray
{
};

struct __cppobj rSoundPhysicsJoint : cResource
{
  MtTypedArray<rSoundPhysicsJoint::cSoundJointRequestData> mSoundJointDataArray;
  s32 mIndexTable[500];
  u32 mJointNoConvTbl[500];
};

struct __cppobj rSoundPhysicsJoint::MyDTI : MtDTI
{
};

struct rSoundPhysicsJoint::cSoundJointRequestData::REQUEST_LIST
{
  u32 JointNo;
  f32 Speed;
  s32 SoundJointNo;
  u32 ReqNo;
};

struct __cppobj rSoundPhysicsJoint::cSoundJointRequestData : MtObject
{
  rSoundPhysicsJoint::cSoundJointRequestData::REQUEST_LIST mData;
  rSoundRequest *mpSoundRequest;
};

struct __cppobj rSoundPhysicsJoint::cSoundJointRequestData::MyDTI : MtDTI
{
};

struct rSoundRequest::ReadHeader
{
  s32 Magic;
  s32 Version;
  u32 numElement;
  u32 numSpeakerSet;
  u32 numSpeaker;
  u32 numDirectionalCurve;
  u32 numDirectionalCurveElement;
  u32 padding;
  intptr FilePathOffset;
  intptr SpeakerSetOffset;
  intptr SpeakerOffset;
  intptr DirectionalCurveOffset;
  intptr DirectionalCurveElementOffset;
};

struct rSoundRequest::WriteHeader
{
  s32 Magic;
  s32 Version;
  u32 numElement;
  u32 numSpeakerSet;
  u32 numSpeaker;
  u32 numDirectionalCurve;
  u32 numDirectionalCurveElement;
  u32 padding;
};

struct __cppobj rSoundSpeakerSetXml : cResource
{
  u32 mCoordinate;
  u32 mSpeakerSetting;
  __attribute__((aligned(16))) MtVector3 mSpeakerPosition[6];
  MtVector3 mSpeakerOrientation[6];
  rSoundDirectionalCurveXml *mpDirectionalCurve[6];
};

struct __cppobj rSoundSpeakerSetXml::MyDTI : MtDTI
{
};

struct rSoundSpeakerSetXml::NativeData
{
  u32 mSpeakerSetNum;
  u32 mSpeakerNum;
  u32 mDirectionalCurveNum;
  u32 mDirectionalCurveElementNum;
  rSoundSpeakerSetXml::SpeakerSet *mpSpeakerSets;
  rSoundSpeakerSetXml::Speaker *mpSpeakers;
  rSoundSpeakerSetXml::DirectionalCurve *mpDirectionalCurves;
  rSoundSpeakerSetXml::DirectionalCurveElement *mpDirectionalCurveElements;
};

struct rSoundSpeakerSetXml::SpeakerSet
{
  u32 mCoordinate;
  u32 mSpeakerNum;
  rSoundSpeakerSetXml::Speaker *mpSpeaker;
};

struct rSoundSpeakerSetXml::Speaker
{
  MtFloat3 mPosition;
  MtFloat3 mOrientation;
  rSoundSpeakerSetXml::DirectionalCurve *mpDirectionalCurve;
};

struct rSoundSpeakerSetXml::DirectionalCurve
{
  u32 mElementNum;
  f32 mZeroRadianValue;
  f32 mPiRadianValue;
  rSoundSpeakerSetXml::DirectionalCurveElement *mpElement;
};

struct rSoundSpeakerSetXml::DirectionalCurveElement
{
  f32 mAngle;
  f32 mValue;
};

struct MtTypedArray<rSoundSpeakerSetXml>;

struct __cppobj MtTypedArray<rSoundDirectionalCurveXml> : MtArray
{
};

struct rSoundStreamRequest::ReadHeader
{
  s32 Magic;
  s32 Version;
  u32 numStream;
  u32 numElement;
  u32 numSpeakerSet;
  u32 numSpeaker;
  u32 numDirectionalCurve;
  u32 numDirectionalCurveElement;
  intptr StreamInfoOffset;
  intptr ElementOffset;
  intptr SpeakerSetOffset;
  intptr SpeakerOffset;
  intptr DirectionalCurveOffset;
  intptr DirectionalCurveElementOffset;
};

struct rSoundStreamRequest::WriteHeader
{
  s32 Magic;
  s32 Version;
  u32 numStream;
  u32 numElement;
  u32 numSpeakerSet;
  u32 numSpeaker;
  u32 numDirectionalCurve;
  u32 numDirectionalCurveElement;
};

enum rSoundSource::Format : __int32
{
  FORMAT_NONE = 0x0,
  FORAMT_PCM = 0x1,
  FORMAT_ADPCM = 0x2,
  FORMAT_UNKNOWN_0 = 0x3,
};

struct __cppobj rSoundStreamSourcePackage::MyDTI : MtDTI
{
};

struct rVibration::VIB_HEADER
{
  u32 Magic;
  u32 Version;
  u32 ParamBuffSize;
  unsigned __int32 BaseFps : 16;
  unsigned __int32 ListNum : 16;
};

typedef rVibration::VIB_HEADER rVibration::VIB_HEADER_0;

enum rCollisionHeightField::$E788BD00135C719B780B1094E6BDFD65 : __int32
{
  CELL_VERTEX_INDEX_L = 0x0,
  CELL_VERTEX_INDEX_T = 0x1,
  CELL_VERTEX_INDEX_R = 0x2,
  CELL_VERTEX_INDEX_B = 0x3,
  CELL_VERTEX_INDEX_NUM = 0x4,
};

enum rCollisionHeightField::$90AFA128518D4AC78491832278F509EE : __int32
{
  CELL_VERTEX_LT = 0x0,
  CELL_VERTEX_LB = 0x1,
  CELL_VERTEX_RT = 0x2,
  CELL_VERTEX_RB = 0x3,
  CELL_VERTEX_NUM = 0x4,
};

typedef u32 (*cGridCollision::TRAVERSE_CALLBACK)(MtObject *, u32, u32, u32, uintptr, uintptr);

struct __attribute__((aligned(8))) rCollisionHeightField::TraverseInfoForScr
{
  MtObject *pCallbackOwner;
  cGridCollision::TRAVERSE_CALLBACK pCallbackFunction;
  _BYTE gap10[8];
  u32 UserParam;
};

struct rGUI::AnimationSearch
{
  u32 InstanceIndex;
  u32 ResourceID;
  u32 AnimationID;
};

struct __attribute__((aligned(8))) rGUI::ObjectSearch
{
  u32 InstanceIndex;
  rGUI *pGUI;
  u32 AnimationID;
};

typedef rGUI::AnimationSearch std::_Simple_types<value_type>::value_type_3;

typedef std::_Simple_types<value_type>::value_type_3 *std::_Simple_types<value_type>::pointer_3;

typedef std::_Simple_types<value_type>::pointer_3 std::_Vector_val<_Val_types>::pointer_1;

struct __cppobj std::_Vector_val<_Val_types>_1 : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer_1 _Myfirst;
  std::_Vector_val<_Val_types>::pointer_1 _Mylast;
  std::_Vector_val<_Val_types>::pointer_1 _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> > > : std::_Vector_val<_Val_types>_1
{
};

struct __cppobj std::vector<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> > : std::_Vector_alloc<false,std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> > >
{
};

typedef std::_Simple_types<value_type>::size_type std::_Vector_val<_Val_types>_1::size_type;

typedef std::_Vector_val<_Val_types>_1::size_type std::vector<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::size_type;

typedef std::_Simple_types<value_type>::value_type_3 *std::_Simple_types<value_type>::reference_2;

typedef std::_Simple_types<value_type>::reference_2 std::_Vector_val<_Val_types>_1::reference;

typedef std::_Vector_val<_Val_types>_1::reference std::vector<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::reference;

typedef std::_Simple_types<value_type>::value_type_3 std::_Vector_val<_Val_types>_1::value_type;

typedef std::_Vector_val<_Val_types>_1::value_type std::vector<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::value_type;

typedef std::_Vector_val<_Val_types>::pointer_1 std::vector<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::pointer;

typedef std::_Wrap_alloc<_Alloc>_3 std::_Wrap_alloc<_Alloc>::other_3;

typedef std::_Wrap_alloc<_Alloc>::other_3 std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::_Alty;

typedef std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::_Alty std::_Vector_alloc<false,std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> > >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> > >::_Alty std::vector<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::_Alty;

struct std::_Allocator_base<rGUI::AnimationSearch>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<rGUI::AnimationSearch> : std::_Allocator_base<rGUI::AnimationSearch>
{
};

struct __cppobj MtStlAllocator<rGUI::AnimationSearch> : std::allocator<rGUI::AnimationSearch>
{
};

struct __cppobj std::_Wrap_alloc<_Alloc>_3 : MtStlAllocator<rGUI::AnimationSearch>
{
};

typedef MtStlAllocator<rGUI::AnimationSearch> std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::_Alloc;

typedef std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> > >::_Alloc;

struct std::_Vec_base_types<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >
{
  __int8 gap0[1];
};

typedef rGUI::AnimationSearch std::_Allocator_base<rGUI::AnimationSearch>::value_type;

typedef std::_Allocator_base<rGUI::AnimationSearch>::value_type std::allocator<rGUI::AnimationSearch>::value_type;

typedef std::allocator<rGUI::AnimationSearch>::value_type *std::allocator<rGUI::AnimationSearch>::pointer;

typedef size_t std::allocator<rGUI::AnimationSearch>::size_type;

typedef std::allocator<rGUI::AnimationSearch>::pointer MtStlAllocator<rGUI::AnimationSearch>::pointer;

typedef MtStlAllocator<rGUI::AnimationSearch>::pointer std::_Get_pointer_type<MtStlAllocator<rGUI::AnimationSearch> >::type;

typedef std::_Get_pointer_type<MtStlAllocator<rGUI::AnimationSearch> >::type std::allocator_traits<MtStlAllocator<rGUI::AnimationSearch> >::pointer;

typedef std::allocator_traits<MtStlAllocator<rGUI::AnimationSearch> >::pointer std::_Wrap_alloc<_Alloc>_3::pointer;

typedef std::allocator<rGUI::AnimationSearch>::size_type MtStlAllocator<rGUI::AnimationSearch>::size_type;

typedef MtStlAllocator<rGUI::AnimationSearch>::size_type std::_Get_size_type<MtStlAllocator<rGUI::AnimationSearch> >::type;

typedef std::_Get_size_type<MtStlAllocator<rGUI::AnimationSearch> >::type std::allocator_traits<MtStlAllocator<rGUI::AnimationSearch> >::size_type;

typedef std::allocator_traits<MtStlAllocator<rGUI::AnimationSearch> >::size_type std::_Wrap_alloc<_Alloc>_3::size_type;

struct std::allocator_traits<MtStlAllocator<rGUI::AnimationSearch> >
{
  __int8 gap0[1];
};

struct std::_Get_size_type<MtStlAllocator<rGUI::AnimationSearch> >
{
  __int8 gap0[1];
};

struct std::_Get_pointer_type<MtStlAllocator<rGUI::AnimationSearch> >
{
  __int8 gap0[1];
};

struct std::_Get_const_void_pointer_type<MtStlAllocator<rGUI::AnimationSearch> >
{
  __int8 gap0[1];
};

struct std::_Get_const_pointer_type<MtStlAllocator<rGUI::AnimationSearch> >
{
  __int8 gap0[1];
};

typedef rGUI::ObjectSearch std::_Simple_types<value_type>::value_type_4;

typedef std::_Simple_types<value_type>::value_type_4 *std::_Simple_types<value_type>::pointer_4;

typedef std::_Simple_types<value_type>::pointer_4 std::_Vector_val<_Val_types>::pointer_2;

struct __cppobj std::_Vector_val<_Val_types>_2 : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer_2 _Myfirst;
  std::_Vector_val<_Val_types>::pointer_2 _Mylast;
  std::_Vector_val<_Val_types>::pointer_2 _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> > > : std::_Vector_val<_Val_types>_2
{
};

struct __cppobj std::vector<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> > : std::_Vector_alloc<false,std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> > >
{
};

typedef std::_Simple_types<value_type>::size_type std::_Vector_val<_Val_types>_2::size_type;

typedef std::_Vector_val<_Val_types>_2::size_type std::vector<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::size_type;

typedef std::_Simple_types<value_type>::value_type_4 *std::_Simple_types<value_type>::reference_3;

typedef std::_Simple_types<value_type>::reference_3 std::_Vector_val<_Val_types>_2::reference;

typedef std::_Vector_val<_Val_types>_2::reference std::vector<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::reference;

typedef std::_Simple_types<value_type>::value_type_4 std::_Vector_val<_Val_types>_2::value_type;

typedef std::_Vector_val<_Val_types>_2::value_type std::vector<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::value_type;

typedef std::_Vector_val<_Val_types>::pointer_2 std::vector<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::pointer;

typedef std::_Wrap_alloc<_Alloc>_4 std::_Wrap_alloc<_Alloc>::other_4;

typedef std::_Wrap_alloc<_Alloc>::other_4 std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::_Alty;

typedef std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::_Alty std::_Vector_alloc<false,std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> > >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> > >::_Alty std::vector<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::_Alty;

struct std::_Allocator_base<rGUI::ObjectSearch>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<rGUI::ObjectSearch> : std::_Allocator_base<rGUI::ObjectSearch>
{
};

struct __cppobj MtStlAllocator<rGUI::ObjectSearch> : std::allocator<rGUI::ObjectSearch>
{
};

struct __cppobj std::_Wrap_alloc<_Alloc>_4 : MtStlAllocator<rGUI::ObjectSearch>
{
};

typedef MtStlAllocator<rGUI::ObjectSearch> std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::_Alloc;

typedef std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> > >::_Alloc;

struct std::_Vec_base_types<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >
{
  __int8 gap0[1];
};

typedef rGUI::ObjectSearch std::_Allocator_base<rGUI::ObjectSearch>::value_type;

typedef std::_Allocator_base<rGUI::ObjectSearch>::value_type std::allocator<rGUI::ObjectSearch>::value_type;

typedef std::allocator<rGUI::ObjectSearch>::value_type *std::allocator<rGUI::ObjectSearch>::pointer;

typedef size_t std::allocator<rGUI::ObjectSearch>::size_type;

typedef std::allocator<rGUI::ObjectSearch>::pointer MtStlAllocator<rGUI::ObjectSearch>::pointer;

typedef MtStlAllocator<rGUI::ObjectSearch>::pointer std::_Get_pointer_type<MtStlAllocator<rGUI::ObjectSearch> >::type;

typedef std::_Get_pointer_type<MtStlAllocator<rGUI::ObjectSearch> >::type std::allocator_traits<MtStlAllocator<rGUI::ObjectSearch> >::pointer;

typedef std::allocator_traits<MtStlAllocator<rGUI::ObjectSearch> >::pointer std::_Wrap_alloc<_Alloc>_4::pointer;

typedef std::allocator<rGUI::ObjectSearch>::size_type MtStlAllocator<rGUI::ObjectSearch>::size_type;

typedef MtStlAllocator<rGUI::ObjectSearch>::size_type std::_Get_size_type<MtStlAllocator<rGUI::ObjectSearch> >::type;

typedef std::_Get_size_type<MtStlAllocator<rGUI::ObjectSearch> >::type std::allocator_traits<MtStlAllocator<rGUI::ObjectSearch> >::size_type;

typedef std::allocator_traits<MtStlAllocator<rGUI::ObjectSearch> >::size_type std::_Wrap_alloc<_Alloc>_4::size_type;

struct std::allocator_traits<MtStlAllocator<rGUI::ObjectSearch> >
{
  __int8 gap0[1];
};

struct std::_Get_size_type<MtStlAllocator<rGUI::ObjectSearch> >
{
  __int8 gap0[1];
};

struct std::_Get_pointer_type<MtStlAllocator<rGUI::ObjectSearch> >
{
  __int8 gap0[1];
};

struct std::_Get_const_void_pointer_type<MtStlAllocator<rGUI::ObjectSearch> >
{
  __int8 gap0[1];
};

struct std::_Get_const_pointer_type<MtStlAllocator<rGUI::ObjectSearch> >
{
  __int8 gap0[1];
};

struct std::remove_reference<const rGUI::ObjectSearch &>
{
  __int8 gap0[1];
};

typedef const rGUI::ObjectSearch std::remove_reference<const rGUI::ObjectSearch &>::type;

struct std::remove_reference<rGUI::ObjectSearch &>
{
  __int8 gap0[1];
};

typedef rGUI::ObjectSearch std::remove_reference<rGUI::ObjectSearch &>::type;

struct std::iterator_traits<rGUI::ObjectSearch *>
{
  __int8 gap0[1];
};

typedef rGUI::ObjectSearch std::iterator_traits<rGUI::ObjectSearch *>::value_type;

struct std::remove_reference<rGUI::ObjectSearch>
{
  __int8 gap0[1];
};

typedef rGUI::ObjectSearch std::remove_reference<rGUI::ObjectSearch>::type;

struct std::remove_reference<const rGUI::AnimationSearch &>
{
  __int8 gap0[1];
};

typedef const rGUI::AnimationSearch std::remove_reference<const rGUI::AnimationSearch &>::type;

struct std::remove_reference<rGUI::AnimationSearch &>
{
  __int8 gap0[1];
};

typedef rGUI::AnimationSearch std::remove_reference<rGUI::AnimationSearch &>::type;

struct std::iterator_traits<rGUI::AnimationSearch *>
{
  __int8 gap0[1];
};

typedef rGUI::AnimationSearch std::iterator_traits<rGUI::AnimationSearch *>::value_type;

struct std::remove_reference<rGUI::AnimationSearch>
{
  __int8 gap0[1];
};

typedef rGUI::AnimationSearch std::remove_reference<rGUI::AnimationSearch>::type;

struct __cppobj MtStlVector<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> > : std::vector<rGUI::AnimationSearch,MtStlAllocator<rGUI::AnimationSearch> >
{
};

struct __cppobj MtStlVector<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> > : std::vector<rGUI::ObjectSearch,MtStlAllocator<rGUI::ObjectSearch> >
{
};

enum rGUIFont::TEXTURE_SIZE : __int32
{
  TEXTURE_SIZE_256_256 = 0x0,
  TEXTURE_SIZE_512_256 = 0x1,
  TEXTURE_SIZE_512_512 = 0x2,
  TEXTURE_SIZE_1024_512 = 0x3,
  TEXTURE_SIZE_1024_1024 = 0x4,
  TEXTURE_SIZE_2048_1024 = 0x5,
  TEXTURE_SIZE_2048_2048 = 0x6,
  TEXTURE_SIZE_64_64 = 0x7,
  TEXTURE_SIZE_128_64 = 0x8,
  TEXTURE_SIZE_128_128 = 0x9,
  TEXTURE_SIZE_256_128 = 0xA,
  TEXTURE_SIZE_4096_1024 = 0xB,
  TEXTURE_SIZE_4096_2048 = 0xC,
  TEXTURE_SIZE_4096_4096 = 0xD,
  TEXTURE_SIZE_NUM = 0xE,
};

enum rGUIFont::LAYOUT_STATUS : __int32
{
  LAYOUT_NONE_0 = 0x0,
  LAYOUT_LOAD_PREPARE = 0x1,
  LAYOUT_LOAD = 0x2,
  LAYOUT_WAITING = 0x3,
  LAYOUT_LAYOUTING = 0x4,
};

enum rGUIFont::FONT_TYPE : __int32
{
  FONT_TEXTURED = 0x0,
  FONT_IMAGE_BASED = 0x1,
  FONT_MARGE_TEXTURE = 0x2,
  FONT_TYPE_NUM = 0x3,
};

enum rGUIFont::SUFFIX : __int32
{
  SUFFIX_NONE = 0x0,
  SUFFIX_ID = 0x1,
  SUFFIX_HQ = 0x2,
  SUFFIX_ID_HQ = 0x3,
  SUFFIX_IDL = 0x4,
  SUFFIX_IDL_HQ = 0x5,
  SUFFIX_AM_NOMIP = 0x6,
  SUFFIX_DUMMY3 = 0x7,
  SUFFIX_NUM = 0x8,
};

enum rGUIMessage::INSERT_RESULT : __int32
{
  INSERT_SUCCESS = 0x0,
  INSERT_FAILURE_NULL_NAME = 0x1,
  INSERT_FAILURE_NULL_INSERT_PTR = 0x2,
  INSERT_FAILURE_HASH_TABLE_OVERFLOW = 0x3,
  INSERT_FAILURE_HASH_MODE_UNKNOWN = 0x4,
};

enum cAIService::ATTRIBUTE : __int32
{
  ATTR_MOVE_AFTER = 0x1,
  ATTR_PAUSE_MAIN = 0x2,
};

enum nAI::TASK_OVERLOAD_MANAGE_TYPE : __int32
{
  TASK_OLMT_DEFAULT = 0x0,
  TASK_OLMT_NEXT_FRAME = 0x1,
  TASK_OLMT_USE_DELAY_JOB = 0x2,
  TASK_OLMT_STOP = 0x3,
};

struct __cppobj rAI::MyDTI : MtDTI
{
};

struct __cppobj rAI::TaskPerformanceInfo::MyDTI : MtDTI
{
};

struct __cppobj rAI::TaskPerformanceInfo::LOD::MyDTI : MtDTI
{
};

struct __cppobj cAIResource::MyDTI : MtDTI
{
};

enum SceVideoOutBusType : __int32
{
  SCE_VIDEO_OUT_BUS_TYPE_MAIN = 0x0,
};

enum MtRegistry::STORAGE_TYPE : __int32
{
  STORAGE_XMLFILE = 0x0,
  STORAGE_INIFILE = 0x1,
  STORAGE_REGISTRY = 0x2,
};

struct __cppobj __attribute__((aligned(8))) MtRegistry : MtObject
{
  MT_CHAR mStoragePath[1024];
  MtRegistry::STORAGE_TYPE mStorageType;
};

struct __cppobj MtRegistry::MyDTI : MtDTI
{
};

enum MtRegistry::ROOT_DIR : __int32
{
  ROOT_CURRENT = 0x0,
};

struct SceAppContentInitParam
{
  char reserved[32];
};

typedef uint32_t SceAppContentBootAttribute;

struct SceAppContentBootParam
{
  char reserved1[4];
  SceAppContentBootAttribute attr;
  char reserved2[32];
};

struct __attribute__((aligned(8))) SceVideoOutResolutionStatus
{
  uint32_t fullWidth;
  uint32_t fullHeight;
  uint32_t paneWidth;
  uint32_t paneHeight;
  uint64_t refreshRate;
  float screenSizeInInch;
  uint32_t _reserved[4];
};

typedef bool (*$<38572363,1>::MT_GETTER)(MtObject *);

typedef SceAppContentInitParam SceAppContentInitParam_0;

typedef SceAppContentBootParam SceAppContentBootParam_0;

typedef SceVideoOutResolutionStatus SceVideoOutResolutionStatus_0;

typedef u32 (*sApp::Item::check::MT_GETTER)(MtObject *);

enum sCamera::INSTANCING_DISSOLVE_PRIO : __int32
{
  IDP_DEFAULT = 0x0,
  IDP_EM_LARGE = 0x1,
  IDP_EVENT = 0x2,
  IDP_MAX = 0x3,
};

struct std::remove_reference<MtRect *&>
{
  __int8 gap0[1];
};

typedef MtRect *std::remove_reference<MtRect *&>::type;

struct $<38838868,1>::IDP_TABLE
{
  f32 mStart;
  f32 mEnd;
  f32 mAlpha;
};

enum sCapture::ALPHA_TYPE : __int32
{
  ALPHA_NONE = 0x0,
  ALPHA_BLEND = 0x1,
  ALPHA_COMPOSITE = 0x2,
};

typedef MtDataWriter MtLEDataWriter;

enum nEffect::SIZE_ADJUST_TYPE : __int32
{
  SIZE_ADJUST_TYPE_NONE = 0x0,
  SIZE_ADJUST_TYPE_W = 0x1,
  SIZE_ADJUST_TYPE_H = 0x2,
  SIZE_ADJUST_TYPE_WH = 0x3,
  SIZE_ADJUST_TYPE_NUM = 0x4,
};

enum nEffect::FILTER_TYPE : __int32
{
  FILTER_TYPE_RADIAL_BLUR = 0x0,
  FILTER_TYPE_COLOR_CORRECT = 0x1,
  FILTER_TYPE_GOD_RAYS = 0x2,
  FILTER_TYPE_BLOOM = 0x3,
  FILTER_TYPE_NUM = 0x4,
  FILTER_TYPE_ERROR = 0xFF,
};

enum nEffect::FILTER_PASS : __int32
{
  FILTER_PASS_SOLID = 0x1,
  FILTER_PASS_OVERLAP = 0x2,
  FILTER_PASS_TRANSPARENT = 0x3,
  FILTER_PASS_EFFECT = 0x4,
  FILTER_PASS_FILTER = 0x5,
  FILTER_PASS_SCREEN = 0x6,
  FILTER_PASS_END = 0x7,
};

struct __cppobj uEffect2D::MyDTI : MtDTI
{
};

struct cParticle2DGenerator::ParticleParam
{
  MtFloat2 mOfs;
  MtFloat2 mDir;
};

struct __cppobj rEffect2D::MyDTI : MtDTI
{
};

typedef rEffect2D::E2D_UNIT rEffect2D::E2D_UNIT_0;

struct rEffect2D::E2D_UNIT
{
  unsigned __int32 DrawMode : 8;
  unsigned __int32 EntryType : 8;
  unsigned __int32 UnitOptionFlag : 16;
  u32 DrawPriority;
  MtColor RTBaseMapColor;
  MtColor RTNormalMapColor;
  f32 RTNormalSlope;
  f32 RTNormalMipMapScale;
  unsigned __int32 SceneW : 16;
  unsigned __int32 SceneH : 16;
  unsigned __int32 RTNormalMapConvert : 8;
  unsigned __int32 RTMaskMapAlpha : 8;
  unsigned __int32 DrawView : 16;
  unsigned __int32 ColorBlendRate : 16;
  unsigned __int32 ColorID : 8;
  unsigned __int32 UScreenAdaptedFlag : 1;
  unsigned __int32 Unit0723 : 7;
  unsigned __int32 RTBaseMapPathOffset : 16;
  unsigned __int32 RTNormalMapPathOffset : 16;
  unsigned __int32 RTMaskMapPathOffset : 16;
  unsigned __int32 BackBaseMapPathOffset : 16;
  unsigned __int32 BackNormalMapPathOffset : 16;
  unsigned __int32 BackMaskMapPathOffset : 16;
  f32 CullingDistNearStart;
  f32 CullingDistNearEnd;
  f32 CullingDistFarStart;
  f32 CullingDistFarEnd;
  MT_CHAR RTBaseMapPath[64];
  MT_CHAR RTNormalMapPath[64];
  MT_CHAR RTMaskMapPath[64];
  MT_CHAR BackBaseMapPath[64];
  MT_CHAR BackNormalMapPath[64];
  MT_CHAR BackMaskMapPath[64];
};

typedef rEffect2D::E2D_INDEX rEffect2D::E2D_INDEX_0;

struct rEffect2D::E2D_INDEX
{
  unsigned __int32 GeneratorType : 8;
  unsigned __int32 GeneratorParamOffset : 24;
  unsigned __int32 ParticleType : 8;
  unsigned __int32 ParticleParamOffset : 24;
  unsigned __int32 LifeType : 8;
  unsigned __int32 LifeParamOffset : 24;
  unsigned __int32 MoveType : 8;
  unsigned __int32 MoveParamOffset : 24;
};

typedef rEffect2D::E2D_PARAM_LEVEL_CORRECTION rEffect2D::E2D_PARAM_LEVEL_CORRECTION_0;

struct rEffect2D::E2D_PARAM_LEVEL_CORRECTION
{
  u32 Type;
  s32 Attenuation;
  f32 LevelMin;
  f32 LevelMax;
  MtFloat3 Color;
  u32 KeyframeRangeParamOffset;
};

struct rEffect2D::E2D_PARAM_LINE_FIX
{
  MtRangeF ScaleX;
  MtRangeF ScaleAddX;
  MtRangeF ScaleY;
  MtRangeF ScaleAddY;
  MtRangeF Angle;
  MtRangeF AngleAdd;
  f32 AngleAddCoef;
  u32 AngleAddRandomReverse;
  u32 KeyframeScaleXYParamOffset;
  u32 KeyframeAngleParamOffset;
};

struct rEffect2D::E2D_PARAM_LINE_LENGTH
{
  MtRangeF Angle;
  MtRangeF AngleAdd;
  MtRangeF Length;
  MtRangeF LengthAdd;
  f32 AngleAddCoef;
  u32 AngleAddRandomReverse;
  u32 KeyframeAngleParamOffset;
  u32 KeyframeLengthParamOffset;
};

typedef rEffect2D::E2D_PARTICLE_MODEL rEffect2D::E2D_PARTICLE_MODEL_0;

struct __cppobj rEffect2D::E2D_PARTICLE_MODEL : rEffect2D::E2D_PARTICLE_COMMON_0
{
  MT_CHAR ModelPath[64];
  MtRangeF ModelScale[3];
  MtRangeF ModelScaleAdd[3];
  MtRangeF Rot[3];
  MtRangeF RotAdd[3];
  unsigned __int32 RotOrder : 4;
  unsigned __int32 ZClearFlag : 1;
  unsigned __int32 RotAddEnable : 1;
  unsigned __int32 RotAddRandomReverse : 1;
  unsigned __int32 PModel01f0 : 1;
  unsigned __int32 PModel08f1 : 8;
  unsigned __int32 AnimFlag : 16;
  f32 AnimSpeed;
  f32 PartsNoMax;
  unsigned __int32 PartsNoMin : 16;
  unsigned __int32 PartsNoRange : 16;
  u32 LightGroupFlag;
  f32 EnvMapPower;
  u32 KeyframeRotParamOffset;
  u32 KeyframeModelScaleParamOffset;
  s32 DrawRectSize;
  f32 RotAddCoef;
  u32 TexScrollParamOffset;
  u32 PModel3211c;
};

typedef rEffect2D::E2D_PARAM_TEX_SCROLL rEffect2D::E2D_PARAM_TEX_SCROLL_0;

struct rEffect2D::E2D_PARAM_TEX_SCROLL
{
  MtRangeF TexScrollOffsetU;
  MtRangeF TexScrollOffsetV;
  MtRangeF TexScrollSpeedU;
  MtRangeF TexScrollSpeedV;
  f32 TexScrollSpeedCoef;
  f32 ParamTexScroll3224;
  f32 ParamTexScroll3228;
  f32 ParamTexScroll322c;
  u32 KeyframeTexScrollUParamOffset;
  u32 KeyframeTexScrollVParamOffset;
  u32 KeyframeTexScrollSpeedUParamFlag;
  u32 KeyframeTexScrollSpeedVParamFlag;
};

typedef rEffect2D::E2D_PARTICLE_POLYLINE rEffect2D::E2D_PARTICLE_POLYLINE_0;

struct __cppobj rEffect2D::E2D_PARTICLE_PAT_COMMON : rEffect2D::E2D_PARTICLE_COMMON_0
{
  unsigned __int32 SeqNoMin : 8;
  unsigned __int32 SeqNoRange : 8;
  unsigned __int32 PatNoMin : 8;
  unsigned __int32 PatNoRange : 8;
  unsigned __int32 AnimFlag : 16;
  unsigned __int32 PPatCommon1656 : 16;
  f32 PatSpeed;
  f32 PatNoMax;
};

typedef rEffect2D::E2D_PARTICLE_PAT_COMMON rEffect2D::E2D_PARTICLE_PAT_COMMON_0;

struct __cppobj rEffect2D::E2D_PARTICLE_PRIM_COMMON : rEffect2D::E2D_PARTICLE_PAT_COMMON_0
{
  MtPoint PatCenter;
  f32 PPrimCommon3268;
  f32 PPrimCommon326c;
  MT_CHAR TexturePath[3][64];
  MT_CHAR AnimPath[64];
};

typedef rEffect2D::E2D_PARTICLE_PRIM_COMMON rEffect2D::E2D_PARTICLE_PRIM_COMMON_0;

struct __cppobj rEffect2D::E2D_PARTICLE_POLYLINE : rEffect2D::E2D_PARTICLE_PRIM_COMMON_0
{
  unsigned __int32 LineType : 4;
  unsigned __int32 LineDivideNum : 4;
  unsigned __int32 LineOfsNum : 8;
  unsigned __int32 PPolyline16172 : 16;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 PPolyline04174 : 4;
  unsigned __int32 ColorPlaceNo : 8;
  unsigned __int32 SizePlaceType : 4;
  unsigned __int32 PPolyline04176 : 4;
  unsigned __int32 SizePlaceNo : 8;
  MtColor PlaceColor[2];
  MtRangeF HeadSize;
  MtRangeF HeadSizeAdd;
  MtRangeF PlaceSize;
  MtRangeF PlaceSizeAdd;
  u32 KeyframePlaceColorParamOffset;
  u32 KeyframeHeadSizeParamOffset;
  u32 KeyframePlaceSizeParamOffset;
  u32 PPolyline321ac;
};

typedef rEffect2D::E2D_PARAM_LINE_FIX rEffect2D::E2D_PARAM_LINE_FIX_0;

typedef rEffect2D::E2D_PARAM_LINE_LENGTH rEffect2D::E2D_PARAM_LINE_LENGTH_0;

typedef rEffect2D::E2D_PARTICLE_TEXLINE rEffect2D::E2D_PARTICLE_TEXLINE_0;

struct __cppobj rEffect2D::E2D_PARTICLE_TEXLINE : rEffect2D::E2D_PARTICLE_PRIM_COMMON_0
{
  unsigned __int32 LineType : 4;
  unsigned __int32 LineDivideNum : 4;
  unsigned __int32 LineOfsNum : 8;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 PTexline04172 : 4;
  unsigned __int32 ColorPlaceNo : 8;
  u32 KeyframePlaceColorParamOffset;
  MtColor PlaceColor[2];
};

typedef rEffect2D::E2D_PARTICLE_LINE rEffect2D::E2D_PARTICLE_LINE_0;

struct __cppobj rEffect2D::E2D_PARTICLE_LINE : rEffect2D::E2D_PARTICLE_COMMON_0
{
  unsigned __int32 LineType : 4;
  unsigned __int32 LineDivideNum : 4;
  unsigned __int32 LineOfsNum : 8;
  unsigned __int32 ColorPlaceType : 4;
  unsigned __int32 PLine0452 : 4;
  unsigned __int32 ColorPlaceNo : 8;
  u32 KeyframePlaceColorParamOffset;
  MtColor PlaceColor[2];
};

struct __cppobj uSimpleEffect::MyDTI : MtDTI
{
};

struct __cppobj rVertices::MyDTI : MtDTI
{
};

enum sApp::Item::GROUP : __int32
{
  GROUP_GAME = 0x1,
  GROUP_GRAPHICS = 0x2,
  GROUP_DISPLAY = 0x8,
  GROUP_ETC = 0x10,
  GROUP_DEVELOP = 0x20,
  GROUP_SOUNDS = 0x4,
  GROUP_CPU = 0x40,
  GROUP_JOYPAD = 0x80,
  GROUP_ALL_0 = 0xFFFF,
  MAX_GROUP = 0x8,
};

struct __cppobj cAnimParticle2D : cParticle2D
{
  cEffectAnim mAnim;
  f32 mPatNoRate[2];
  f32 mPatNoKeyframeRate;
  u32 mAnimParticle327c;
};

struct __cppobj cModel2D : cParticle2D
{
  __attribute__((aligned(16))) MtVector3 mRot[2];
  MtVector4 mModelScale[2];
  MtColor mColor[2];
  MtColor mBaseColor;
  unsigned __int32 mBaseColorKeyframeRate : 16;
  unsigned __int32 mTexScrollWorkOffset : 16;
  MtVector3 mRotAdd;
  MtVector3 mModelScaleAdd;
  f32 mPartsNo;
  f32 mPartsSpeed;
  unsigned __int32 mPrimitiveNo : 8;
  unsigned __int32 mRotOrder : 4;
  unsigned __int32 mModel04d9 : 4;
  unsigned __int32 mModelAnimFlag : 16;
  f32 mEnvMapPower;
};

struct __cppobj cPolyline2D : cAnimParticle2D
{
  f32 mHeadSize[2];
  f32 mPlaceSize[2];
  MtColor mColor[2][2];
  f32 mBaseHeadSize;
  f32 mBaseHeadSizeAdd;
  f32 mBasePlaceSize;
  f32 mBasePlaceSizeAdd;
  MtColor mBaseHeadColor;
  MtColor mBasePlaceColor;
  unsigned __int32 mBaseHeadColorKeyframeRate : 16;
  unsigned __int32 mBasePlaceColorKeyframeRate : 16;
  unsigned __int32 mColorPlaceNo : 8;
  unsigned __int32 mSizePlaceNo : 8;
  unsigned __int32 mColorPlaceType : 4;
  unsigned __int32 mSizePlaceType : 4;
  unsigned __int32 mPolyline04bf : 8;
};

struct __cppobj cTexline2D : cAnimParticle2D
{
  MtColor mColor[2][2];
  MtColor mBaseHeadColor;
  MtColor mBasePlaceColor;
  unsigned __int32 mBaseHeadColorKeyframeRate : 16;
  unsigned __int32 mBasePlaceColorKeyframeRate : 16;
  unsigned __int32 mColorPlaceNo : 8;
  unsigned __int32 mColorPlaceType : 4;
  unsigned __int32 mTexline049d : 4;
  unsigned __int32 mTexline089e : 8;
  unsigned __int32 mTexline089f : 8;
};

struct __cppobj cLine2D : cParticle2D
{
  MtColor mColor[2][2];
  MtColor mBaseHeadColor;
  MtColor mBasePlaceColor;
  unsigned __int32 mBaseHeadColorKeyframeRate : 16;
  unsigned __int32 mBasePlaceColorKeyframeRate : 16;
  unsigned __int32 mColorPlaceNo : 8;
  unsigned __int32 mColorPlaceType : 4;
  unsigned __int32 mLine047d : 4;
  unsigned __int32 mLine087e : 8;
  unsigned __int32 mLine087f : 8;
};

struct cParticle2DMoveCommon
{
  MtFloat2 mDir;
};

struct __cppobj cParticle2DMoveCustom : cParticle2DMoveCommon
{
  MtFloat2 mOfs;
};

struct __cppobj __attribute__((aligned(8))) uMultiBlurFilter : uMultiFilter
{
};

struct __cppobj uMultiBlurFilter::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uMultiColorCorrectFilter : uMultiFilter
{
};

struct __cppobj uMultiColorCorrectFilter::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uMultiGodRaysFilter : uMultiFilter
{
};

struct __cppobj uMultiGodRaysFilter::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uMultiBloomFilter : uMultiFilter
{
};

struct __cppobj uMultiBloomFilter::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) sGpuParticle::ContextInfParticle::Vertex
{
  s16 position[4];
  u32 color;
  s16 scale[2];
  u16 life[2];
  unsigned __int32 tex_coord : 8;
  unsigned __int32 rotation : 8;
  unsigned __int32 reserved : 8;
  unsigned __int32 pat_num : 8;
  u16 time_shift;
  u16 intensity;
};

struct __cppobj sGpuParticle::ContextParticle : sGpuParticle::Context
{
};

struct __cppobj sGpuParticle::ContextPoint : sGpuParticle::Context
{
};

enum nDraw::TGPUParticle : __int32
{
  TGPUParticle_Default = 0x0,
  TGPUParticle_Geometry = 0x1,
};

enum nDraw::TInfParticle : __int32
{
  TInfParticle_Default = 0x0,
  TInfParticle_Geometry = 0x1,
};

enum sGrass::LOD : __int32
{
  LOD_HIGH_1 = 0x0,
  LOD_MIDDLE = 0x1,
  LOD_LOW_1 = 0x2,
  LOD_AUTO_0 = 0x3,
};

struct __cppobj __attribute__((aligned(16))) cNodeParam<uGrassWind> : MtObject
{
  uGrassWind *mpData;
  MtAABB mAABB;
  u8 mMode;
};

struct cTree<uGrassWind>
{
  int (**_vptr$cTree)(void);
  u32 mParamNum;
  cTree<uGrassWind>::cNode *mpRoot;
  MtArray mParams;
};

struct cTree<uGrassWind>::cNode
{
  int (**_vptr$cNode)(void);
  cNodeParam<uGrassWind> *mpParam;
  cTree<uGrassWind>::cNode *mpRight;
  cTree<uGrassWind>::cNode *mpLeft;
};

enum uGrass::SHADER_MODE : __int32
{
  SM_FAST = 0x0,
  SM_DEFAULT = 0x1,
  SM_QUALITY_FAST = 0x2,
  SM_QUALITY = 0x3,
};

struct cOperator<uGrassWind>;

enum nGUI::HW_PLATFORM : __int32
{
  HW_PLATFORM_DEFAULT = 0x0,
  HW_PLATFORM_WINDOWS = 0x1,
  HW_PLATFORM_PS3 = 0x2,
  HW_PLATFORM_XBOX = 0x3,
  HW_PLATFORM_WIIU = 0x4,
  HW_PLATFORM_XBOXONE = 0x5,
  HW_PLATFORM_PS4 = 0x6,
  HW_PLATFORM_NUM = 0x7,
};

enum sMouse::BUTTON : __int32
{
  BUTTON_0 = 0x1,
  BUTTON_1 = 0x2,
  BUTTON_2 = 0x4,
  BUTTON_3 = 0x8,
  BUTTON_4 = 0x10,
  BUTTON_5 = 0x20,
  BUTTON_6 = 0x40,
  BUTTON_7 = 0x80,
};

enum sMain::JOBTHREAD_EVENTLAG_USEBIT : __int32
{
  JOBTHREAD_EVENTLAG_WAKEUP = 0x0,
  JOBTHREAD_EVENTLAG_SLEEP = 0x1,
  EVENTFLAG_USEBIT_NUM = 0x2,
};

enum sMain::JOB_PS4 : __int32
{
  JOB_PRIORITY = 0x2BC,
  JOB_STACK_SIZE = 0x100000,
  DELAY_JOB_PRIORITY = 0x2DA,
  DELAY_JOB_STACK_SIZE = 0x100000,
};

struct nSyncPoint::cSyncPointDefinition
{
  nSyncPoint::eSyncPoint mEsp;
};

enum sNetwork::$4C43CE8821F4B8A4CA8EC6358712BF38 : __int32
{
  INVITE_NOT_ACCEPT = 0x0,
  INVITE_IN_PROGRESS = 0x1,
  INVITE_SUCCESS = 0x2,
  INVITE_FAILURE = 0x3,
};

enum MtNetCore::$280F794F38FAF9619F357B6F786F5827 : __int32
{
  SERVICE_OPTION_DEFAULT = 0x0,
  SERVICE_OPTION_LAMM = 0x1,
  SERVICE_OPTION_STORAGE_LOCAL = 0x2,
  SERVICE_OPTION_STORAGE_COMMON = 0x4,
  SERVICE_OPTION_STORAGE_TYPE_TITLE = 0x8,
  SERVICE_OPTION_STORAGE_TYPE_USER = 0x10,
  SERVICE_OPTION_TICKET = 0x20,
};

enum nNetwork::Context::$1CFFB84B715A66EA879DFAB4040056F2 : __int32
{
  STATE_NULL = 0x0,
  STATE_BOOTUP = 0x1,
  STATE_NONE_0 = 0x2,
  STATE_USER = 0x3,
  STATE_AUTH = 0x4,
  STATE_SHUTDOWN = 0x5,
  STATE_ERROR_0 = 0x6,
};

struct __cppobj nNetwork::nRanking::Object::MyDTI : MtDTI
{
};

enum nNetwork::nSharedMemory2::Object::$F5BAB26E9EC07644C641C05CD5EA8722 : __int32
{
  TYPE_STAR = 0x0,
  TYPE_MESH = 0x1,
  TYPE_NUM_2 = 0x2,
};

struct __cppobj nNetwork::Storage::MyDTI : MtDTI
{
};

struct __cppobj cStateMachineBase::StateBase : MtObject
{
  void *mpContext;
  cStateMachineBase *mpStateMachine;
  s32 mId;
  bool mIsEnd;
  f32 mTime;
  f32 mNowRate;
  u32 mFrameIndex;
  cStateMachineBase::StateBase *mpPrev;
  cStateMachineBase::StateBase *mpNext;
};

struct IRemoteProcess
{
  __int8 gap0[1];
};

struct __cppobj cStateMachineBase::StateBase::MyDTI : MtDTI
{
};

enum sPad::Pad::REQUEST_VIB : __int32
{
  REQUEST_NONE = 0x0,
  REQUEST_STOP = 0x1,
  REQUEST_IMMEDIATESTOP = 0x2,
};

enum sPad::DECIDE_BUTTON : __int32
{
  DECIDE_Obutton = 0x2000,
  DECIDE_Xbutton = 0x4000,
};

enum sPad::CANCEL_BUTTON : __int32
{
  CANCEL_Xbutton = 0x4000,
  CANCEL_Obutton = 0x2000,
};

typedef ScePadData ScePadData_0;

enum ScePadButtonDataOffset : __int32
{
  SCE_PAD_BUTTON_L3 = 0x2,
  SCE_PAD_BUTTON_R3 = 0x4,
  SCE_PAD_BUTTON_OPTIONS = 0x8,
  SCE_PAD_BUTTON_UP = 0x10,
  SCE_PAD_BUTTON_RIGHT = 0x20,
  SCE_PAD_BUTTON_DOWN = 0x40,
  SCE_PAD_BUTTON_LEFT = 0x80,
  SCE_PAD_BUTTON_L2 = 0x100,
  SCE_PAD_BUTTON_R2 = 0x200,
  SCE_PAD_BUTTON_L1 = 0x400,
  SCE_PAD_BUTTON_R1 = 0x800,
  SCE_PAD_BUTTON_TRIANGLE = 0x1000,
  SCE_PAD_BUTTON_CIRCLE = 0x2000,
  SCE_PAD_BUTTON_CROSS = 0x4000,
  SCE_PAD_BUTTON_SQUARE = 0x8000,
  SCE_PAD_BUTTON_TOUCH_PAD = 0x100000,
  SCE_PAD_BUTTON_INTERCEPTED = 0x80000000,
};

struct ScePadVibrationParam
{
  uint8_t largeMotor;
  uint8_t smallMotor;
};

struct ScePadColor
{
  uint8_t r;
  uint8_t g;
  uint8_t b;
  uint8_t reserve[1];
};

typedef ScePadVibrationParam ScePadVibrationParam_0;

typedef ScePadColor ScePadColor_0;

typedef ScePadColor_0 ScePadLightBarParam;

enum sPrimitive::eSceneClamp : __int32
{
  SCR_UV_NONE = 0x0,
  SCR_UV_CLIP = 0x1,
  SCR_UV_SMOOTH = 0x2,
};

enum sPrimitive::FUNC_PRIM_FOG : __int32
{
  PRIM_FOG_OFF = 0x0,
  PRIM_FOG_COLOR = 0x1,
  PRIM_FOG_ALPHA = 0x2,
  PRIM_FOG_BLEND = 0x3,
  MAX_PRIM_FOG = 0x4,
};

enum sPrimitive::FUNC_PRIM_EX : __int32
{
  PRIM_EX_NONE = 0x0,
  PRIM_EX_OCCLUSION = 0x1,
  PRIM_EX_VOLUME = 0x2,
  PRIM_EX_REFRACT = 0x3,
  PRIM_EX_DEPTH_VOLUME = 0x4,
  PRIM_EX_PARALLAX = 0x5,
  PRIM_EX_OCCLUSION_NOVTF = 0x6,
  PRIM_EX_UV_CLAMP = 0x7,
  PRIM_EX_INV_VOLUME = 0x8,
  PRIM_EX_BLUR = 0x9,
  PRIM_EX_Z_REFRACT = 0xA,
  PRIM_EX_Z_REFRACT_EX = 0xB,
  PRIM_EX_DISTORTION = 0xC,
  MAX_PRIM_EX = 0xD,
};

enum nDraw::TPrimitive2D : __int32
{
  TPrimitive2D_Default = 0x0,
};

enum nDraw::TPrimitive : __int32
{
  TPrimitive_Default = 0x0,
  TPrimitive_Cloud = 0x1,
  TPrimitive_Tessellation = 0x2,
};

typedef std::_Tree_node<value_type,_Voidptr>_1 std::_Tree_simple_types<value_type>::_Node_1;

typedef std::_Tree_simple_types<value_type>::_Node_1 *std::_Tree_simple_types<value_type>::_Nodeptr_1;

typedef std::_Tree_simple_types<value_type>::_Nodeptr_1 std::_Tree_val<_Val_types>::_Nodeptr_1;

struct __cppobj std::_Tree_val<_Val_types>_5 : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr_1 _Myhead;
  std::_Tree_val<_Val_types>::size_type_0 _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > >_0 : std::_Tree_val<_Val_types>_5
{
};

struct __cppobj std::_Tree_buy<value_type,allocator_type>_4 : std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > >_0
{
};

struct __cppobj std::_Tree_comp<false,std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0 : std::_Tree_buy<value_type,allocator_type>_4
{
};

struct __cppobj std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0 : std::_Tree_comp<false,std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0
{
};

struct __cppobj std::map<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >_0 : std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0
{
};

struct __cppobj MtStlMap<RPC_ID,cRemoteProcedure *,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >_0 : std::map<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >_0
{
};

typedef MtStlMap<RPC_ID,cRemoteProcedure *,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >_0 sRemoteProcedure::DObjIDList_0;

typedef std::_Tree_node<value_type,_Voidptr>_2 std::_Tree_simple_types<value_type>::_Node_2;

typedef std::_Tree_simple_types<value_type>::_Node_2 *std::_Tree_simple_types<value_type>::_Nodeptr_2;

typedef std::_Tree_simple_types<value_type>::_Nodeptr_2 std::_Tree_val<_Val_types>::_Nodeptr_2;

struct __cppobj std::_Tree_val<_Val_types>_6 : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr_2 _Myhead;
  std::_Tree_val<_Val_types>::size_type_1 _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > >_0 : std::_Tree_val<_Val_types>_6
{
};

struct __cppobj std::_Tree_buy<value_type,allocator_type>_5 : std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > >_0
{
};

struct __cppobj std::_Tree_comp<false,std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0 : std::_Tree_buy<value_type,allocator_type>_5
{
};

struct __cppobj std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0 : std::_Tree_comp<false,std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0
{
};

struct __cppobj std::map<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >_0 : std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0
{
};

struct __cppobj MtStlMap<MtString,DParallelList,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >_0 : std::map<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >_0
{
};

typedef MtStlMap<MtString,DParallelList,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >_0 sRemoteProcedure::DGroupMap_0;

struct __cppobj __attribute__((aligned(8))) sRemoteProcedure_0 : cSystem:160
{
  RPC_ID mAutoAllocator;
  u16 mSystemAllocator;
  u16 mSynchronizerAllocator;
  u16 mHealthCheckerAllocator;
  sRemoteProcedure::DObjIDList_0 mIdMap;
  sRemoteProcedure::DGroupMap_0 mGroupMap;
  MtMap mDataTemporary;
  bool mUseTemporary;
};

typedef std::_Tree_node<value_type,_Voidptr>_1 *std::_Tree_node<value_type,_Voidptr>::_Nodeptr_1;

struct std::_Tree_node<value_type,_Voidptr>_1
{
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_1 _Left;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_1 _Parent;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_1 _Right;
  char _Color;
  char _Isnil;
  std::pair<const unsigned int,cRemoteProcedure *> _Myval;
};

typedef std::_Tree_node<value_type,_Voidptr>_2 *std::_Tree_node<value_type,_Voidptr>::_Nodeptr_2;

struct std::_Tree_node<value_type,_Voidptr>_2
{
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_2 _Left;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_2 _Parent;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_2 _Right;
  char _Color;
  char _Isnil;
  std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > _Myval;
};

typedef size_t std::_Simple_types<MtString>::size_type;

typedef std::_Simple_types<MtString>::size_type std::_Tree_val<_Val_types>::size_type_3;

struct __cppobj std::_Tree_val<_Val_types>_4 : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr_1 _Myhead;
  std::_Tree_val<_Val_types>::size_type_3 _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > > : std::_Tree_val<_Val_types>_4
{
};

typedef sRemoteProcedure::SParallelNode std::_Simple_types<value_type>::value_type_5;

typedef std::_Simple_types<value_type>::value_type_5 *std::_Simple_types<value_type>::pointer_5;

typedef std::_Simple_types<value_type>::pointer_5 std::_Vector_val<_Val_types>::pointer_3;

struct __cppobj sRemoteProcedure_0::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) sRemoteProcedure_0::SNode
{
  cRemoteProcedure *mpObj;
  u32 mNextEmpty;
};

struct __cppobj __attribute__((aligned(8))) sRemoteProcedure_0::cTemporaryRemoteCall : cRemoteCall
{
  MtObject *mpObject;
  s32 mFromId;
};

struct __cppobj sRemoteProcedure_0::cTemporaryRemoteCall::MyDTI : MtDTI
{
};

enum sRemoteProcedure_0::$86E387D8459F4EF7A274FA16B18CE4F6 : __int32
{
  ID_SYSTEM = 0x1,
  ID_SYSTEM_SESSION = 0x1,
  ID_SYSTEM_SHM = 0xB,
  ID_APPLICATION = 0x3E8,
};

typedef MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > sRemoteProcedure_0::DParallelList;

typedef std::_Tree_const_iterator<_Myt>_1 std::_Tree_val<_Val_types>_5::const_iterator;

typedef std::_Tree_val<_Val_types>_5::const_iterator std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::const_iterator;

typedef std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::const_iterator std::map<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >_0::const_iterator;

typedef std::_Tree_val<_Val_types>::_Nodeptr_1 std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr_1;

struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_1 : std::_Iterator012<std::bidirectional_iterator_tag,value_type,difference_type,const_pointer,const_reference,std::_Iterator_base0>
{
  std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr_1 _Ptr;
};

struct __cppobj std::_Tree_const_iterator<_Myt>_1 : std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_1
{
};

typedef std::_Tree_iterator<_Myt>_0 std::_If<false,const_iterator,iterator>::type_0;

typedef std::_If<false,const_iterator,iterator>::type_0 std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::iterator;

typedef std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::iterator std::map<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >_0::iterator;

struct __cppobj std::_Tree_iterator<_Myt>_0 : std::_Tree_const_iterator<_Myt>_1
{
};

typedef std::less<unsigned int> std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false>::key_compare;

typedef std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false>::key_compare std::_Tree_comp<false,std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::key_compare;

typedef std::_Tree_comp<false,std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::key_compare std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::key_compare;

typedef MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false>::allocator_type;

typedef std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false>::allocator_type std::_Tree_comp<false,std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::allocator_type;

typedef std::_Tree_comp<false,std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::allocator_type std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::allocator_type;

typedef std::_Tree_val<_Val_types>::size_type_0 std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::size_type;

typedef unsigned int std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false>::key_type;

typedef std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false>::key_type std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::key_type;

typedef std::pair<iterator,iterator>_0 std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::_Pairii;

struct std::_Pair_base<std::_Tree_iterator<_Myt>,std::_Tree_iterator<_Myt> >
{
  std::_Tree_iterator<_Myt>_0 first;
  std::_Tree_iterator<_Myt>_0 second;
};

struct __cppobj std::pair<iterator,iterator>_0 : std::_Pair_base<std::_Tree_iterator<_Myt>,std::_Tree_iterator<_Myt> >
{
};

typedef std::_Tree_node<value_type,_Voidptr>_1 std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type_1;

typedef std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type_1 std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type_1;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type_1 *std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer_1;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer_1 MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer_1;

typedef MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer_1 std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type_1;

typedef std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type_1 std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_1;

typedef std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_1 std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_1;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_1 std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >::_Nodeptr;

typedef std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >::_Nodeptr std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > >_0::_Nodeptr;

typedef std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > >_0::_Nodeptr std::_Tree_buy<value_type,allocator_type>_4::_Nodeptr;

typedef std::_Tree_buy<value_type,allocator_type>_4::_Nodeptr std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::_Nodeptr;

typedef std::pair<const unsigned int,cRemoteProcedure *> std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::value_type;

typedef std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::value_type std::_Tree_val<_Val_types>_5::value_type;

typedef std::_Tree_val<_Val_types>_5::value_type std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::value_type;

typedef std::pair<iterator,bool>_0 std::_Tree<std::_Tmap_traits<unsigned int,cRemoteProcedure *,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> >,false> >_0::_Pairib;

struct __attribute__((aligned(8))) std::_Pair_base<std::_Tree_iterator<_Myt>,bool>
{
  std::_Tree_iterator<_Myt>_0 first;
  bool second;
};

struct __cppobj std::pair<iterator,bool>_0 : std::_Pair_base<std::_Tree_iterator<_Myt>,bool>
{
};

typedef MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >::_Alloc;

typedef std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >::_Alloc std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > >_0::_Alloc;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::other std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >::_Alnod_type;

typedef std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > >::_Alnod_type std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,cRemoteProcedure *>,MtStlAllocator<std::pair<const unsigned int,cRemoteProcedure *> > > >_0::_Alty;

typedef std::_Tree_val<_Val_types>::_Nodeptr_1 *std::_Tree_val<_Val_types>_5::_Nodepref;

typedef std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::value_type *std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::reference;

typedef std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::reference std::_Tree_val<_Val_types>_5::reference;

typedef const std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::value_type *std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::const_reference;

typedef std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::const_reference std::_Tree_val<_Val_types>_5::const_reference;

typedef const std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::value_type *std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::const_pointer;

typedef std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::const_pointer std::_Tree_val<_Val_types>_5::const_pointer;

typedef std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::value_type *std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::pointer;

typedef std::_Simple_types<std::pair<const unsigned int,cRemoteProcedure *> >::pointer std::_Tree_val<_Val_types>_5::pointer;

typedef std::_Tree_const_iterator<_Myt>_1 std::_If<true,const_iterator,iterator>::type_0;

typedef std::_If<true,const_iterator,iterator>::type_0 std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::iterator;

typedef std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::iterator std::set<MtString,std::less<MtString>,MtStlAllocator<MtString> >::iterator;

typedef std::_Tree_val<_Val_types>::size_type_3 std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::size_type;

typedef std::_Tree_const_iterator<_Myt>_1 std::_Tree_val<_Val_types>_4::const_iterator;

typedef std::_Tree_val<_Val_types>_4::const_iterator std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::const_iterator;

typedef MtString std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::key_type;

typedef std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::key_type std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::key_type;

typedef std::pair<iterator,iterator>_1 std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::_Pairii;

struct std::_Pair_base<std::_Tree_const_iterator<_Myt>,std::_Tree_const_iterator<_Myt> >_0
{
  std::_Tree_const_iterator<_Myt>_1 first;
  std::_Tree_const_iterator<_Myt>_1 second;
};

struct __cppobj std::pair<iterator,iterator>_1 : std::_Pair_base<std::_Tree_const_iterator<_Myt>,std::_Tree_const_iterator<_Myt> >_0
{
};

typedef std::_Tree_node<value_type,_Voidptr>_3 std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type_2;

typedef std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type_2 std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type_2;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type_2 *std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer_2;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer_2 MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer_2;

typedef MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer_2 std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type_2;

typedef std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type_2 std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_2;

typedef std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_2 std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_2;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_2 std::_Tree_base_types<MtString,MtStlAllocator<MtString> >::_Nodeptr;

typedef std::_Tree_base_types<MtString,MtStlAllocator<MtString> >::_Nodeptr std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >::_Nodeptr;

typedef std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >::_Nodeptr std::_Tree_buy<value_type,allocator_type>::_Nodeptr;

typedef std::_Tree_buy<value_type,allocator_type>::_Nodeptr std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::_Nodeptr;

typedef std::_Tree_node<value_type,_Voidptr>_3 *std::_Tree_node<value_type,_Voidptr>::_Nodeptr_3;

struct std::_Tree_node<value_type,_Voidptr>_3
{
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_3 _Left;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_3 _Parent;
  std::_Tree_node<value_type,_Voidptr>::_Nodeptr_3 _Right;
  char _Color;
  char _Isnil;
  MtString _Myval;
};

typedef MtString std::_Simple_types<MtString>::value_type;

typedef std::_Simple_types<MtString>::value_type std::_Tree_val<_Val_types>_4::value_type;

typedef std::_Tree_val<_Val_types>_4::value_type std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::value_type;

typedef std::less<MtString> std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::key_compare;

typedef std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::key_compare std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >::key_compare;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::other std::_Tree_base_types<MtString,MtStlAllocator<MtString> >::_Alnod_type;

typedef std::_Tree_base_types<MtString,MtStlAllocator<MtString> >::_Alnod_type std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >::_Alty;

typedef std::_Tree_val<_Val_types>::_Nodeptr_1 *std::_Tree_val<_Val_types>_4::_Nodepref;

typedef std::_Simple_types<MtString>::value_type *std::_Simple_types<MtString>::reference;

typedef std::_Simple_types<MtString>::reference std::_Tree_val<_Val_types>_4::reference;

typedef const std::_Simple_types<MtString>::value_type *std::_Simple_types<MtString>::const_reference;

typedef std::_Simple_types<MtString>::const_reference std::_Tree_val<_Val_types>_4::const_reference;

struct std::_Simple_types<MtString>
{
  __int8 gap0[1];
};

struct __cppobj std::_Tree_simple_types<value_type>_3 : std::_Simple_types<MtString>
{
};

typedef std::_Tree_node<value_type,_Voidptr>_3 std::_Tree_simple_types<value_type>_3::_Node;

typedef std::_Tree_simple_types<value_type>_3::_Node *std::_Tree_simple_types<value_type>_3::_Nodeptr;

struct std::_Tree_base_types<MtString,MtStlAllocator<MtString> >
{
  __int8 gap0[1];
};

struct std::_Allocator_base<MtString>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<MtString> : std::_Allocator_base<MtString>
{
};

struct std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>
{
  __int8 gap0[1];
};

typedef MtString std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::value_type;

typedef std::_Tree_val<_Val_types>::_Nodeptr_1 std::_Tree_const_iterator<_Myt>_1::_Nodeptr;

typedef std::_Tree_val<_Val_types>_4::const_reference std::_Tree_const_iterator<_Myt>_1::reference;

typedef std::_Tree_const_iterator<_Myt>_1 std::_Tree_const_iterator<_Myt>_1::_Myiter;

typedef std::bidirectional_iterator_tag std::_Tree_const_iterator<_Myt>_1::iterator_category;

typedef std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_1 std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_1::_Myiter;

typedef std::_Tree_val<_Val_types>_5::const_reference std::_Tree_const_iterator<_Myt>_1::reference_0;

typedef std::_Tree_val<_Val_types>_5::const_pointer std::_Tree_const_iterator<_Myt>_1::pointer;

typedef std::_Tree_val<_Val_types>::_Nodeptr_1 std::_Tree_iterator<_Myt>_0::_Nodeptr;

typedef std::_Tree_val<_Val_types>_5::reference std::_Tree_iterator<_Myt>_0::reference;

typedef std::_Tree_val<_Val_types>_5::pointer std::_Tree_iterator<_Myt>_0::pointer;

typedef std::_Tree_iterator<_Myt>_0 std::_Tree_iterator<_Myt>_0::_Myiter;

typedef std::bidirectional_iterator_tag std::_Tree_iterator<_Myt>_0::iterator_category;

typedef MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > std::map<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >_0::mapped_type;

typedef MtString std::map<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >_0::key_type;

typedef std::_Tree_iterator<_Myt>_1 std::_If<false,const_iterator,iterator>::type_1;

typedef std::_If<false,const_iterator,iterator>::type_1 std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::iterator;

typedef std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::iterator std::map<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >_0::iterator;

typedef std::_Tree_val<_Val_types>::_Nodeptr_2 std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr_2;

struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_2 : std::_Iterator012<std::bidirectional_iterator_tag,value_type,difference_type,const_pointer,const_reference,std::_Iterator_base0>
{
  std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr_2 _Ptr;
};

struct __cppobj std::_Tree_const_iterator<_Myt>_2 : std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_2
{
};

struct __cppobj std::_Tree_iterator<_Myt>_1 : std::_Tree_const_iterator<_Myt>_2
{
};

typedef std::_Tree_const_iterator<_Myt>_2 std::_Tree_val<_Val_types>_6::const_iterator;

typedef std::_Tree_val<_Val_types>_6::const_iterator std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::const_iterator;

typedef std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::const_iterator std::map<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >_0::const_iterator;

typedef std::less<MtString> std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false>::key_compare;

typedef std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false>::key_compare std::_Tree_comp<false,std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::key_compare;

typedef std::_Tree_comp<false,std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::key_compare std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::key_compare;

typedef MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false>::allocator_type;

typedef std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false>::allocator_type std::_Tree_comp<false,std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::allocator_type;

typedef std::_Tree_comp<false,std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::allocator_type std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::allocator_type;

typedef std::_Tree_val<_Val_types>::size_type_1 std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::size_type;

typedef MtString std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false>::key_type;

typedef std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false>::key_type std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::key_type;

typedef std::_Tree_node<value_type,_Voidptr>_2 std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type_3;

typedef std::_Allocator_base<std::_Tree_node<value_type,_Voidptr> >::value_type_3 std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type_3;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::value_type_3 *std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer_3;

typedef std::allocator<std::_Tree_node<value_type,_Voidptr> >::pointer_3 MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer_3;

typedef MtStlAllocator<std::_Tree_node<value_type,_Voidptr> >::pointer_3 std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type_3;

typedef std::_Get_pointer_type<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::type_3 std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_3;

typedef std::allocator_traits<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_3 std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_3;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::pointer_3 std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >::_Nodeptr;

typedef std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >::_Nodeptr std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > >_0::_Nodeptr;

typedef std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > >_0::_Nodeptr std::_Tree_buy<value_type,allocator_type>_5::_Nodeptr;

typedef std::_Tree_buy<value_type,allocator_type>_5::_Nodeptr std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::_Nodeptr;

typedef std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::value_type;

typedef std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::value_type std::_Tree_val<_Val_types>_6::value_type;

typedef std::_Tree_val<_Val_types>_6::value_type std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::value_type;

typedef std::pair<iterator,bool>_1 std::_Tree<std::_Tmap_traits<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >,std::less<MtString>,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >,false> >_0::_Pairib;

struct __attribute__((aligned(8))) std::_Pair_base<std::_Tree_iterator<_Myt>,bool>_0
{
  std::_Tree_iterator<_Myt>_1 first;
  bool second;
};

struct __cppobj std::pair<iterator,bool>_1 : std::_Pair_base<std::_Tree_iterator<_Myt>,bool>_0
{
};

typedef MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >::_Alloc;

typedef std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >::_Alloc std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > >_0::_Alloc;

typedef std::_Wrap_alloc<MtStlAllocator<std::_Tree_node<value_type,_Voidptr> > >::other std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >::_Alnod_type;

typedef std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > >::_Alnod_type std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >,MtStlAllocator<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > > > >_0::_Alty;

typedef std::_Tree_val<_Val_types>::_Nodeptr_2 *std::_Tree_val<_Val_types>_6::_Nodepref;

typedef std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::value_type *std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::reference;

typedef std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::reference std::_Tree_val<_Val_types>_6::reference;

typedef const std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::value_type *std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::const_reference;

typedef std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::const_reference std::_Tree_val<_Val_types>_6::const_reference;

typedef const std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::value_type *std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::const_pointer;

typedef std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::const_pointer std::_Tree_val<_Val_types>_6::const_pointer;

typedef std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::value_type *std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::pointer;

typedef std::_Simple_types<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > >::pointer std::_Tree_val<_Val_types>_6::pointer;

typedef std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::_Myt;

typedef std::_Vector_val<_Val_types>::size_type std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::size_type;

typedef std::_Vector_iterator<_Myt>_0 std::_Vector_val<_Val_types>::iterator_0;

typedef std::_Vector_val<_Val_types>::iterator_0 std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::iterator;

typedef std::_Vector_val<_Val_types>::pointer_3 std::_Vector_const_iterator<_Myt>::_Tptr_0;

struct __cppobj std::_Vector_const_iterator<_Myt>_0 : std::_Iterator012<std::random_access_iterator_tag,value_type,difference_type,const_pointer,const_reference,_Iterator_base>
{
  std::_Vector_const_iterator<_Myt>::_Tptr_0 _Ptr;
};

struct __cppobj std::_Vector_iterator<_Myt>_0 : std::_Vector_const_iterator<_Myt>_0
{
};

typedef std::_Vector_const_iterator<_Myt>_0 std::_Vector_val<_Val_types>::const_iterator;

typedef std::_Vector_val<_Val_types>::const_iterator std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::const_iterator;

typedef const std::_Simple_types<value_type>::value_type_5 *std::_Simple_types<value_type>::const_reference_2;

typedef std::_Simple_types<value_type>::const_reference_2 std::_Vector_val<_Val_types>::const_reference_1;

typedef std::_Vector_val<_Val_types>::const_reference_1 std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::const_reference;

typedef std::_Simple_types<value_type>::value_type_5 *std::_Simple_types<value_type>::reference_4;

typedef std::_Simple_types<value_type>::reference_4 std::_Vector_val<_Val_types>::reference_1;

typedef std::_Vector_val<_Val_types>::reference_1 std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::reference;

typedef std::_Vector_val<_Val_types>::pointer_3 std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::pointer;

typedef std::_Wrap_alloc<_Alloc>_5 std::_Wrap_alloc<_Alloc>::other_5;

typedef std::_Wrap_alloc<_Alloc>::other_5 std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::_Alty;

typedef std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::_Alty std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >::_Alty std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::_Alty;

struct std::_Allocator_base<sRemoteProcedure::SParallelNode>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<sRemoteProcedure::SParallelNode> : std::_Allocator_base<sRemoteProcedure::SParallelNode>
{
};

struct __cppobj MtStlAllocator<sRemoteProcedure::SParallelNode> : std::allocator<sRemoteProcedure::SParallelNode>
{
};

struct __cppobj std::_Wrap_alloc<_Alloc>_5 : MtStlAllocator<sRemoteProcedure::SParallelNode>
{
};

typedef MtStlAllocator<sRemoteProcedure::SParallelNode> std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::_Alloc;

typedef std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >::_Alloc;

typedef const std::_Simple_types<value_type>::value_type_5 *std::_Simple_types<value_type>::const_pointer_0;

typedef std::_Simple_types<value_type>::const_pointer_0 std::_Vector_val<_Val_types>::const_pointer;

typedef std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::_Myt;

typedef sRemoteProcedure_0::SNode std::_Simple_types<value_type>::value_type_6;

typedef std::_Simple_types<value_type>::value_type_6 std::_Vector_val<_Val_types>::value_type_1;

typedef std::_Vector_val<_Val_types>::value_type_1 std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::value_type;

typedef std::_Vector_val<_Val_types>::size_type std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::size_type;

typedef std::_Vector_val<_Val_types>::iterator_0 std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::iterator;

typedef std::_Vector_val<_Val_types>::const_iterator std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::const_iterator;

typedef const std::_Simple_types<value_type>::value_type_6 *std::_Simple_types<value_type>::const_reference_3;

typedef std::_Simple_types<value_type>::const_reference_3 std::_Vector_val<_Val_types>::const_reference_2;

typedef std::_Vector_val<_Val_types>::const_reference_2 std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::const_reference;

typedef std::_Simple_types<value_type>::value_type_6 *std::_Simple_types<value_type>::reference_5;

typedef std::_Simple_types<value_type>::reference_5 std::_Vector_val<_Val_types>::reference_2;

typedef std::_Vector_val<_Val_types>::reference_2 std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::reference;

typedef std::_Vector_val<_Val_types>::pointer_3 std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::pointer_0;

typedef std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >::_Alty std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::_Alty;

typedef const std::_Simple_types<value_type>::value_type_6 *std::_Simple_types<value_type>::const_pointer_1;

typedef std::_Simple_types<value_type>::const_pointer_1 std::_Vector_val<_Val_types>::const_pointer_0;

typedef std::_Simple_types<value_type>::value_type_6 *std::_Simple_types<value_type>::pointer_6;

typedef sRemoteProcedure_0::SNode std::_Allocator_base<sRemoteProcedure::SNode>::value_type_0;

typedef std::_Allocator_base<sRemoteProcedure::SNode>::value_type_0 std::allocator<sRemoteProcedure::SNode>::value_type_0;

typedef std::allocator<sRemoteProcedure::SNode>::value_type_0 *std::allocator<sRemoteProcedure::SNode>::pointer_0;

typedef std::allocator<sRemoteProcedure::SNode>::pointer_0 MtStlAllocator<sRemoteProcedure::SNode>::pointer_0;

typedef MtStlAllocator<sRemoteProcedure::SNode>::pointer_0 std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >::type_0;

typedef std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >::type_0 std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >::pointer_0;

typedef std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >::pointer_0 std::_Wrap_alloc<_Alloc>_2::pointer_0;

typedef std::_Vector_val<_Val_types>::pointer_3 std::_Vector_iterator<_Myt>_0::pointer;

typedef std::_Vector_val<_Val_types>::reference_2 std::_Vector_iterator<_Myt>_0::reference;

typedef std::_Vector_iterator<_Myt>_0 std::_Vector_iterator<_Myt>_0::_Myiter;

typedef std::_Vector_val<_Val_types>::difference_type std::_Vector_iterator<_Myt>_0::difference_type;

typedef std::_Vector_const_iterator<_Myt>_0 std::_Vector_iterator<_Myt>_0::_Mybase;

typedef std::_Vector_val<_Val_types>::value_type_1 std::_Vector_iterator<_Myt>_0::value_type;

typedef std::random_access_iterator_tag std::_Vector_iterator<_Myt>_0::iterator_category;

typedef std::_Vector_val<_Val_types>::const_reference_2 std::_Vector_const_iterator<_Myt>_0::reference;

typedef std::_Vector_val<_Val_types>::const_pointer_0 std::_Vector_const_iterator<_Myt>_0::pointer;

typedef std::_Vector_const_iterator<_Myt>_0 std::_Vector_const_iterator<_Myt>_0::_Myiter;

typedef std::_Vector_val<_Val_types>::difference_type std::_Vector_const_iterator<_Myt>_0::difference_type;

typedef std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::_Myt;

typedef unsigned int std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::mapped_type;

typedef unsigned int std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::key_type;

typedef std::_If<false,const_iterator,iterator>::type_1 std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::iterator_0;

typedef std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::iterator_0 std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > >::iterator;

typedef std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> > std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::_Myt;

typedef std::_Tree_val<_Val_types>::size_type_2 std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::size_type;

typedef std::_Tree_const_iterator<_Myt>_2 std::_Tree_val<_Val_types>_2::const_iterator_0;

typedef std::_Tree_val<_Val_types>_2::const_iterator_0 std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::const_iterator_0;

typedef unsigned int std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false>::key_type;

typedef std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false>::key_type std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::key_type;

typedef std::pair<iterator,iterator>_2 std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::_Pairii;

struct std::_Pair_base<std::_Tree_iterator<_Myt>,std::_Tree_iterator<_Myt> >_0
{
  std::_Tree_iterator<_Myt>_1 first;
  std::_Tree_iterator<_Myt>_1 second;
};

struct __cppobj std::pair<iterator,iterator>_2 : std::_Pair_base<std::_Tree_iterator<_Myt>,std::_Tree_iterator<_Myt> >_0
{
};

typedef std::_Tree_alloc<false,std::_Tree_base_types<std::pair<const unsigned int,unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > >::_Nodeptr std::_Tree_buy<value_type,allocator_type>::_Nodeptr_0;

typedef std::_Tree_buy<value_type,allocator_type>::_Nodeptr_0 std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::_Nodeptr_0;

typedef std::_Simple_types<std::pair<const unsigned int,unsigned int> >::value_type std::_Tree_val<_Val_types>_2::value_type;

typedef std::_Tree_val<_Val_types>_2::value_type std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::value_type;

typedef std::pair<iterator,bool>_1 std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> >::_Pairib;

typedef std::_Tree_val<_Val_types>::_Nodeptr_2 *std::_Tree_val<_Val_types>_2::_Nodepref_0;

typedef const std::_Simple_types<std::pair<const unsigned int,unsigned int> >::value_type *std::_Simple_types<std::pair<const unsigned int,unsigned int> >::const_reference;

typedef std::_Simple_types<std::pair<const unsigned int,unsigned int> >::const_reference std::_Tree_val<_Val_types>_2::const_reference;

typedef std::_Simple_types<std::pair<const unsigned int,unsigned int> >::value_type *std::_Simple_types<std::pair<const unsigned int,unsigned int> >::pointer;

typedef std::_Simple_types<std::pair<const unsigned int,unsigned int> >::pointer std::_Tree_val<_Val_types>_2::pointer;

typedef std::_Tree_node<value_type,_Voidptr> std::_Tree_simple_types<value_type>_2::_Node;

typedef std::_Tree_simple_types<value_type>_2::_Node *std::_Tree_simple_types<value_type>_2::_Nodeptr;

typedef std::_Pair_base<const unsigned int,unsigned int> std::_Pair_base<const unsigned int,unsigned int>::_Myt;

typedef std::_Tree_val<_Val_types>::_Nodeptr_2 std::_Tree_const_iterator<_Myt>_2::_Nodeptr;

typedef std::_Tree_val<_Val_types>_2::const_reference std::_Tree_const_iterator<_Myt>_2::reference;

typedef std::_Tree_const_iterator<_Myt>_2 std::_Tree_const_iterator<_Myt>_2::_Myiter;

typedef std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_2 std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_2::_Myiter;

typedef std::_Tree_val<_Val_types>::_Nodeptr_2 std::_Tree_iterator<_Myt>_1::_Nodeptr;

typedef std::_Tree_val<_Val_types>_2::reference std::_Tree_iterator<_Myt>_1::reference;

typedef std::_Tree_val<_Val_types>_2::pointer std::_Tree_iterator<_Myt>_1::pointer;

typedef std::_Tree_iterator<_Myt>_1 std::_Tree_iterator<_Myt>_1::_Myiter;

typedef std::bidirectional_iterator_tag std::_Tree_iterator<_Myt>_1::iterator_category;

struct std::_Vec_base_types<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> >
{
  __int8 gap0[1];
};

typedef sRemoteProcedure::SParallelNode std::_Allocator_base<sRemoteProcedure::SParallelNode>::value_type;

typedef std::_Allocator_base<sRemoteProcedure::SParallelNode>::value_type std::allocator<sRemoteProcedure::SParallelNode>::value_type;

typedef std::allocator<sRemoteProcedure::SParallelNode>::value_type *std::allocator<sRemoteProcedure::SParallelNode>::pointer;

typedef size_t std::allocator<sRemoteProcedure::SParallelNode>::size_type;

typedef std::allocator<sRemoteProcedure::SParallelNode>::pointer MtStlAllocator<sRemoteProcedure::SParallelNode>::pointer;

typedef MtStlAllocator<sRemoteProcedure::SParallelNode>::pointer std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SParallelNode> >::type;

typedef std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SParallelNode> >::type std::allocator_traits<MtStlAllocator<sRemoteProcedure::SParallelNode> >::pointer;

typedef std::allocator_traits<MtStlAllocator<sRemoteProcedure::SParallelNode> >::pointer std::_Wrap_alloc<_Alloc>_5::pointer;

typedef std::allocator<sRemoteProcedure::SParallelNode>::size_type MtStlAllocator<sRemoteProcedure::SParallelNode>::size_type;

typedef MtStlAllocator<sRemoteProcedure::SParallelNode>::size_type std::_Get_size_type<MtStlAllocator<sRemoteProcedure::SParallelNode> >::type;

typedef std::_Get_size_type<MtStlAllocator<sRemoteProcedure::SParallelNode> >::type std::allocator_traits<MtStlAllocator<sRemoteProcedure::SParallelNode> >::size_type;

typedef std::allocator_traits<MtStlAllocator<sRemoteProcedure::SParallelNode> >::size_type std::_Wrap_alloc<_Alloc>_5::size_type;

typedef std::allocator<sRemoteProcedure::SParallelNode>::value_type std::allocator_traits<MtStlAllocator<sRemoteProcedure::SParallelNode> >::value_type;

typedef std::allocator_traits<MtStlAllocator<sRemoteProcedure::SParallelNode> >::value_type std::_Wrap_alloc<_Alloc>_5::value_type;

struct std::allocator_traits<MtStlAllocator<sRemoteProcedure::SParallelNode> >
{
  __int8 gap0[1];
};

struct std::_Get_size_type<MtStlAllocator<sRemoteProcedure::SParallelNode> >
{
  __int8 gap0[1];
};

struct std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SParallelNode> >
{
  __int8 gap0[1];
};

typedef std::_Vector_val<_Val_types>::const_reference_1 std::_Vector_const_iterator<_Myt>_0::reference_0;

typedef std::_Vector_val<_Val_types>::const_pointer std::_Vector_const_iterator<_Myt>_0::pointer_0;

typedef std::_Tree_val<_Val_types>_6::const_reference std::_Tree_const_iterator<_Myt>_2::reference_0;

typedef std::_Tree_val<_Val_types>_6::const_pointer std::_Tree_const_iterator<_Myt>_2::pointer;

typedef std::_Tree_val<_Val_types>_6::reference std::_Tree_iterator<_Myt>_1::reference_0;

typedef std::_Tree_val<_Val_types>_6::pointer std::_Tree_iterator<_Myt>_1::pointer_0;

struct std::initializer_list<value_type>_0
{
  const std::pair<const unsigned int,cRemoteProcedure *> *_First;
  const std::pair<const unsigned int,cRemoteProcedure *> *_Last;
};

struct std::initializer_list<value_type>_1
{
  const std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > *_First;
  const std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > *_Last;
};

struct std::initializer_list<value_type>_2
{
  const sRemoteProcedure_0::SNode *_First;
  const sRemoteProcedure_0::SNode *_Last;
};

struct std::initializer_list<value_type>_3
{
  const std::pair<const unsigned int,unsigned int> *_First;
  const std::pair<const unsigned int,unsigned int> *_Last;
};

struct std::_Get_const_void_pointer_type<MtStlAllocator<sRemoteProcedure::SParallelNode> >
{
  __int8 gap0[1];
};

struct std::_Get_const_pointer_type<MtStlAllocator<sRemoteProcedure::SParallelNode> >
{
  __int8 gap0[1];
};

struct std::initializer_list<value_type>_4
{
  const sRemoteProcedure::SParallelNode *_First;
  const sRemoteProcedure::SParallelNode *_Last;
};

struct std::iterator_traits<std::_Tree_iterator<_Myt> >
{
  __int8 gap0[1];
};

typedef std::_Tree_iterator<_Myt>_1::iterator_category std::iterator_traits<std::_Tree_iterator<_Myt> >::iterator_category;

struct std::remove_reference<std::_Tree_iterator<_Myt> >
{
  __int8 gap0[1];
};

typedef std::_Tree_iterator<_Myt>_1 std::remove_reference<std::_Tree_iterator<_Myt> >::type;

struct std::remove_reference<std::_Tree_iterator<_Myt> &>
{
  __int8 gap0[1];
};

typedef std::_Tree_iterator<_Myt>_1 std::remove_reference<std::_Tree_iterator<_Myt> &>::type;

typedef std::_Tree_iterator<_Myt>_0::iterator_category std::iterator_traits<std::_Tree_iterator<_Myt> >::iterator_category_0;

typedef std::_Tree_iterator<_Myt>_0 std::remove_reference<std::_Tree_iterator<_Myt> >::type_0;

typedef std::_Tree_iterator<_Myt>_0 std::remove_reference<std::_Tree_iterator<_Myt> &>::type_0;

struct std::_Pair_base<unsigned int,unsigned int>
{
  unsigned int first;
  unsigned int second;
};

struct __cppobj std::pair<type,type> : std::_Pair_base<unsigned int,unsigned int>
{
};

struct std::enable_if<true,iterator>
{
  __int8 gap0[1];
};

typedef std::_Tree_iterator<_Myt>_1 std::enable_if<true,iterator>::type;

struct std::remove_reference<std::pair<const unsigned int,unsigned int> &>
{
  __int8 gap0[1];
};

typedef std::pair<const unsigned int,unsigned int> std::remove_reference<std::pair<const unsigned int,unsigned int> &>::type;

struct std::remove_reference<std::pair<type,type> >
{
  __int8 gap0[1];
};

typedef std::pair<type,type> std::remove_reference<std::pair<type,type> >::type;

typedef std::_Tree_node<value_type,_Voidptr> *std::remove_reference<std::_Tree_node<value_type,_Voidptr> *&>::type_0;

struct std::pointer_traits<pointer>
{
  __int8 gap0[1];
};

typedef const sRemoteProcedure_0::SNode *std::pointer_traits<pointer>::pointer;

typedef const sRemoteProcedure_0::SNode *std::_If<false,char &,type>::type;

typedef std::_If<false,char &,type>::type std::pointer_traits<pointer>::_Reftype;

struct std::_If<false,char &,type>
{
  __int8 gap0[1];
};

typedef const sRemoteProcedure::SParallelNode *std::pointer_traits<pointer>::pointer_0;

typedef const sRemoteProcedure::SParallelNode *std::_If<false,char &,type>::type_0;

typedef std::_If<false,char &,type>::type_0 std::pointer_traits<pointer>::_Reftype_0;

typedef const std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > *std::pointer_traits<pointer>::pointer_1;

typedef const std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > *std::_If<false,char &,type>::type_1;

typedef std::_If<false,char &,type>::type_1 std::pointer_traits<pointer>::_Reftype_1;

typedef std::_Tree_const_iterator<_Myt>_1::iterator_category std::iterator_traits<std::_Tree_const_iterator<_Myt> >::iterator_category_0;

typedef std::_Tree_const_iterator<_Myt>_1 std::remove_reference<std::_Tree_const_iterator<_Myt> >::type_0;

typedef std::_Tree_const_iterator<_Myt>_1 std::remove_reference<std::_Tree_const_iterator<_Myt> &>::type_0;

typedef const std::pair<const unsigned int,cRemoteProcedure *> *std::pointer_traits<pointer>::pointer_2;

typedef const std::pair<const unsigned int,cRemoteProcedure *> *std::_If<false,char &,type>::type_2;

typedef std::_If<false,char &,type>::type_2 std::pointer_traits<pointer>::_Reftype_2;

struct std::remove_reference<sRemoteProcedure::SNode>
{
  __int8 gap0[1];
};

typedef sRemoteProcedure_0::SNode std::remove_reference<sRemoteProcedure::SNode>::type;

struct std::iterator_traits<sRemoteProcedure::SNode *>
{
  __int8 gap0[1];
};

typedef sRemoteProcedure_0::SNode std::iterator_traits<sRemoteProcedure::SNode *>::value_type;

typedef ptrdiff_t std::iterator_traits<sRemoteProcedure::SNode *>::difference_type;

typedef std::random_access_iterator_tag std::iterator_traits<sRemoteProcedure::SNode *>::iterator_category;

struct std::_Pair_base<unsigned int,cRemoteProcedure *>
{
  unsigned int first;
  cRemoteProcedure *second;
};

struct __cppobj std::pair<type,type>_0 : std::_Pair_base<unsigned int,cRemoteProcedure *>
{
};

struct std::remove_reference<cRemoteProcedure *>
{
  __int8 gap0[1];
};

typedef cRemoteProcedure *std::remove_reference<cRemoteProcedure *>::type;

struct std::remove_reference<cRemoteProcedure *&>
{
  __int8 gap0[1];
};

typedef cRemoteProcedure *std::remove_reference<cRemoteProcedure *&>::type;

struct std::enable_if<true,_Pairib>
{
  __int8 gap0[1];
};

typedef std::pair<iterator,bool>_1 std::enable_if<true,_Pairib>::type;

struct std::pointer_traits<type>
{
  __int8 gap0[1];
};

typedef std::pair<const unsigned int,unsigned int> *std::pointer_traits<type>::pointer;

typedef std::pair<const unsigned int,unsigned int> *std::_If<false,char &,type>::type_3;

typedef std::_If<false,char &,type>::type_3 std::pointer_traits<type>::_Reftype;

struct std::_Pair_base<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
  MtString first;
  MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > second;
};

struct __cppobj std::pair<key_type,mapped_type> : std::_Pair_base<MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
};

struct std::remove_reference<std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
  __int8 gap0[1];
};

typedef std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > std::remove_reference<std::vector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >::type;

struct std::remove_reference<MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
  __int8 gap0[1];
};

typedef MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > std::remove_reference<MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >::type;

struct std::remove_reference<const MtString &>
{
  __int8 gap0[1];
};

typedef const MtString std::remove_reference<const MtString &>::type;

struct std::remove_reference<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > &>
{
  __int8 gap0[1];
};

typedef std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > std::remove_reference<std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > &>::type;

struct std::remove_reference<std::pair<key_type,mapped_type> >
{
  __int8 gap0[1];
};

typedef std::pair<key_type,mapped_type> std::remove_reference<std::pair<key_type,mapped_type> >::type;

struct std::remove_reference<MtString>
{
  __int8 gap0[1];
};

typedef MtString std::remove_reference<MtString>::type;

typedef std::_Tree_node<value_type,_Voidptr>_2 *std::remove_reference<std::_Tree_node<value_type,_Voidptr> *&>::type_1;

typedef std::pair<const unsigned int,cRemoteProcedure *> *std::pointer_traits<type>::pointer_0;

typedef std::_If<false,char &,type>::type_2 std::pointer_traits<type>::_Reftype_0;

typedef std::pair<iterator,bool>_0 std::enable_if<true,_Pairib>::type_0;

struct std::remove_reference<std::pair<const unsigned int,cRemoteProcedure *> &>
{
  __int8 gap0[1];
};

typedef std::pair<const unsigned int,cRemoteProcedure *> std::remove_reference<std::pair<const unsigned int,cRemoteProcedure *> &>::type;

typedef std::pair<type,type>_0 std::remove_reference<std::pair<type,type> >::type_0;

typedef std::_Tree_node<value_type,_Voidptr>_1 *std::remove_reference<std::_Tree_node<value_type,_Voidptr> *&>::type_2;

struct std::iterator_traits<sRemoteProcedure::SParallelNode *>
{
  __int8 gap0[1];
};

typedef sRemoteProcedure::SParallelNode std::iterator_traits<sRemoteProcedure::SParallelNode *>::value_type;

struct std::remove_reference<sRemoteProcedure::SParallelNode>
{
  __int8 gap0[1];
};

typedef sRemoteProcedure::SParallelNode std::remove_reference<sRemoteProcedure::SParallelNode>::type;

struct std::remove_reference<std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> > >
{
  __int8 gap0[1];
};

typedef std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> > std::remove_reference<std::_Tree<std::_Tmap_traits<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> >,false> > >::type;

struct std::remove_reference<unsigned long &>
{
  __int8 gap0[1];
};

typedef unsigned __int64 std::remove_reference<unsigned long &>::type;

struct std::remove_reference<std::pair<const unsigned int,unsigned int> >
{
  __int8 gap0[1];
};

typedef std::pair<const unsigned int,unsigned int> std::remove_reference<std::pair<const unsigned int,unsigned int> >::type;

struct std::remove_reference<const unsigned int>
{
  __int8 gap0[1];
};

typedef const unsigned int std::remove_reference<const unsigned int>::type;

struct std::remove_reference<std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > &>
{
  __int8 gap0[1];
};

typedef std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > std::remove_reference<std::map<unsigned int,unsigned int,std::less<unsigned int>,MtStlAllocator<std::pair<const unsigned int,unsigned int> > > &>::type;

struct std::remove_reference<std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >
{
  __int8 gap0[1];
};

typedef std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > std::remove_reference<std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >::type;

struct std::remove_reference<sRemoteProcedure::SParallelNode &>
{
  __int8 gap0[1];
};

typedef sRemoteProcedure::SParallelNode std::remove_reference<sRemoteProcedure::SParallelNode &>::type;

typedef std::_Vector_iterator<_Myt>_0 std::move_iterator<std::_Vector_iterator<_Myt> >::iterator_type;

struct std::move_iterator<std::_Vector_iterator<_Myt> >
{
  std::move_iterator<std::_Vector_iterator<_Myt> >::iterator_type current;
};

typedef std::_Vector_iterator<_Myt>_0::value_type std::iterator_traits<std::_Vector_iterator<_Myt> >::value_type;

typedef std::iterator_traits<std::_Vector_iterator<_Myt> >::value_type std::move_iterator<std::_Vector_iterator<_Myt> >::value_type;

typedef std::move_iterator<std::_Vector_iterator<_Myt> >::value_type *std::move_iterator<std::_Vector_iterator<_Myt> >::reference;

typedef std::move_iterator<std::_Vector_iterator<_Myt> > std::move_iterator<std::_Vector_iterator<_Myt> >::_Myt;

typedef std::_Vector_iterator<_Myt>_0::iterator_category std::iterator_traits<std::_Vector_iterator<_Myt> >::iterator_category;

typedef std::iterator_traits<std::_Vector_iterator<_Myt> >::iterator_category std::move_iterator<std::_Vector_iterator<_Myt> >::iterator_category;

struct std::iterator_traits<std::_Vector_iterator<_Myt> >
{
  __int8 gap0[1];
};

typedef std::_Vector_iterator<_Myt>_0 std::enable_if<true,iterator>::type_0;

struct std::iterator_traits<std::move_iterator<std::_Vector_iterator<_Myt> > >
{
  __int8 gap0[1];
};

typedef std::move_iterator<std::_Vector_iterator<_Myt> >::iterator_category std::iterator_traits<std::move_iterator<std::_Vector_iterator<_Myt> > >::iterator_category;

struct std::remove_reference<sRemoteProcedure::SNode &>
{
  __int8 gap0[1];
};

typedef sRemoteProcedure_0::SNode std::remove_reference<sRemoteProcedure::SNode &>::type;

typedef std::pair<const MtString,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > > *std::pointer_traits<type>::pointer_1;

typedef std::_If<false,char &,type>::type_1 std::pointer_traits<type>::_Reftype_1;

struct std::_Pair_base<const char *,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
  const char *first;
  MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > second;
};

struct __cppobj std::pair<type,type>_1 : std::_Pair_base<const char *,MtStlVector<sRemoteProcedure::SParallelNode,MtStlAllocator<sRemoteProcedure::SParallelNode> > >
{
};

typedef std::pair<type,type>_1 std::remove_reference<std::pair<type,type> >::type_1;

struct std::remove_reference<const char *>
{
  __int8 gap0[1];
};

typedef const char *std::remove_reference<const char *>::type;

struct std::remove_reference<const char *&>
{
  __int8 gap0[1];
};

typedef const char *std::remove_reference<const char *&>::type;

struct __cppobj cRemoteProcedure::MyDTI : MtDTI
{
};

struct __cppobj MtStlAllocator<MtString> : std::allocator<MtString>
{
};

enum sRender::CAPS::VTF_TYPE : __int32
{
  VTF_R16F = 0x1,
  VTF_A16B16G16R16F = 0x2,
  VTF_R32F = 0x4,
  VTF_A32B32G32R32F = 0x8,
  VTF_R2VB = 0x10,
  VTF_MASK = 0xF,
};

enum sRender::ASPECT_TYPE : __int32
{
  ASPECT_DEFAULT = 0x0,
  ASPECT_4_3 = 0x1,
  ASPECT_16_9 = 0x2,
  ASPECT_16_10 = 0x3,
};

enum sRender::$8BF1BF69668604840F4CD0912678D054 : __int32
{
  CONTEXT_NUM = 0x2,
  PARALLEL_EXECUTE_MAX_NUM = 0x5,
  DISPLAY_BUFFER_NUM = 0x3,
  DCB_BUFFER_MAX_NUM = 0x2,
  DCB_BUFFER_SIZE = 0x1000000,
  RESOURCE_BUFFER_SIZE = 0x2000000,
  RING_BUFFER_SIZE = 0x400000,
};

enum sRender::INTERVAL_TYPE : __int32
{
  INTERVAL_IMMEDIATE = 0x0,
  INTERVAL_ONE = 0x1,
  INTERVAL_TWO = 0x2,
  INTERVAL_THREE = 0x3,
  MAX_INTERVAL = 0x4,
};

enum sRender::$7EBB1CB54C4E54E70353F79687D9F9A9 : __int32
{
  SCALE_MODE_LETTERBOX = 0x0,
  SCALE_MODE_FULLSCREEN = 0x1,
  SCALE_MODE_PANSCAN = 0x2,
};

enum sRender::DEVICERESET_MODE : __int32
{
  DEVICERESET_NONE = 0x0,
  DEVICERESET_CHANGEMODE = 0x1,
  DEVICERESET_REFRESHRATE = 0x2,
  DEVICERESET_RESIZE = 0x4,
  DEVICERESET_RESUME = 0x10,
  DEVICERESET_PRESENTINTERVAL = 0x20,
  DEVICERESET_HDRLEVEL = 0x40,
  DEVICERESET_MSAALEVEL = 0x80,
  DEVICERESET_SLIMODE = 0x100,
  DEVICERESET_MINIMIZE = 0x400,
  DEVICERESET_RSX_RESOLUTION = 0x800,
};

enum sRender::EXPORT_TYPE : __int32
{
  EXPORT_FILE = 0x0,
  EXPORT_MEMORY = 0x1,
};

enum nDraw::RENDER_DETAIL : __int32
{
  RENDER_DETAIL_0 = 0x0,
  RENDER_DETAIL_1 = 0x1,
  RENDER_DETAIL_2 = 0x2,
  RENDER_DETAIL_3 = 0x3,
  RENDER_DETAIL_4 = 0x4,
  RENDER_DETAIL_5 = 0x5,
  MAX_DETAIL_LEVEL = 0x6,
};

typedef sce::Gnm::ClipControlClipSpace sce::Gnm::ClipControlClipSpace_0;

enum sce::Gnm::WaitTargetSlot : __int32
{
  kWaitTargetSlotCb0 = 0x40,
  kWaitTargetSlotCb1 = 0x80,
  kWaitTargetSlotCb2 = 0x100,
  kWaitTargetSlotCb3 = 0x200,
  kWaitTargetSlotCb4 = 0x400,
  kWaitTargetSlotCb5 = 0x800,
  kWaitTargetSlotCb6 = 0x1000,
  kWaitTargetSlotCb7 = 0x2000,
  kWaitTargetSlotDb = 0x4000,
  kWaitTargetSlotAll = 0x7FC0,
};

enum sce::Gnm::ExtendedCacheAction : __int32
{
  kExtendedCacheActionFlushAndInvalidateCbCache = 0x2000000,
  kExtendedCacheActionFlushAndInvalidateDbCache = 0x4000000,
  kExtendedCacheActionInvalidateKCache = 0x8000000,
  kExtendedCacheActionInvalidateICache = 0x20000000,
};

struct sRender::setRenderDetailControlFramerates::DETAIL_CONTRACTION
{
  f32 upper;
  f32 downer;
};

typedef std::_String_iterator<_Myt> std::_String_iterator<_Myt>::_Myiter;

typedef std::_String_val<_Val_types>::difference_type std::_String_iterator<_Myt>::difference_type;

enum SceVideoOutPixelFormat : __int32
{
  SCE_VIDEO_OUT_PIXEL_FORMAT_A8R8G8B8_SRGB = 0x80000000,
  SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB = 0x80000000,
  SCE_VIDEO_OUT_PIXEL_FORMAT_A16R16G16B16_FLOAT = 0xC1060000,
  SCE_VIDEO_OUT_PIXEL_FORMAT_B16_G16_R16_A16_FLOAT = 0xC1060000,
  SCE_VIDEO_OUT_PIXEL_FORMAT_A8B8G8R8_SRGB = 0x80002200,
  SCE_VIDEO_OUT_PIXEL_FORMAT_R8_G8_B8_A8_SRGB = 0x80002200,
  SCE_VIDEO_OUT_PIXEL_FORMAT_A2R10G10B10 = 0x88060000,
  SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2 = 0x88060000,
  SCE_VIDEO_OUT_PIXEL_FORMAT_A2R10G10B10_SRGB = 0x88000000,
  SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2_SRGB = 0x88000000,
};

enum SceVideoOutTilingMode : __int32
{
  SCE_VIDEO_OUT_TILING_MODE_TILE = 0x0,
  SCE_VIDEO_OUT_TILING_MODE_LINEAR = 0x1,
};

enum SceVideoOutAspectRatio : __int32
{
  SCE_VIDEO_OUT_ASPECT_RATIO_16_9 = 0x0,
};

enum sApp::Item::ATTR : __int32
{
  ATTR_NOREALTIME = 0x1,
};

enum SceVideoOutFlipMode : __int32
{
  SCE_VIDEO_OUT_FLIP_MODE_VSYNC = 0x1,
  SCE_VIDEO_OUT_FLIP_MODE_HSYNC = 0x2,
  SCE_VIDEO_OUT_FLIP_MODE_WINDOW = 0x3,
  SCE_VIDEO_OUT_FLIP_MODE_VSYNC_MULTI = 0x4,
};

enum SceJpegEncAttribute : __int32
{
  SCE_JPEG_ENC_ATTRIBUTE_NONE = 0x0,
};

enum SceJpegEncPixelFormat : __int32
{
  SCE_JPEG_ENC_PIXEL_FORMAT_R8G8B8A8 = 0x0,
  SCE_JPEG_ENC_PIXEL_FORMAT_B8G8R8A8 = 0x1,
  SCE_JPEG_ENC_PIXEL_FORMAT_Y8U8Y8V8 = 0xA,
  SCE_JPEG_ENC_PIXEL_FORMAT_Y8 = 0xB,
};

enum SceJpegEncEncodeMode : __int32
{
  SCE_JPEG_ENC_ENCODE_MODE_NORMAL = 0x0,
  SCE_JPEG_ENC_ENCODE_MODE_MJPEG = 0x1,
};

enum SceJpegEncColorSpace : __int32
{
  SCE_JPEG_ENC_COLOR_SPACE_YCC = 0x1,
  SCE_JPEG_ENC_COLOR_SPACE_GRAYSCALE = 0x2,
};

enum SceJpegEncSamplingType : __int32
{
  SCE_JPEG_ENC_SAMPLING_TYPE_FULL = 0x0,
  SCE_JPEG_ENC_SAMPLING_TYPE_422 = 0x1,
  SCE_JPEG_ENC_SAMPLING_TYPE_420 = 0x2,
};

struct SceVideoOutBufferAttribute
{
  int32_t pixelFormat;
  int32_t tilingMode;
  int32_t aspectRatio;
  uint32_t width;
  uint32_t height;
  uint32_t pitchInPixel;
  uint32_t option;
  uint32_t _reserved0;
  uint64_t _reserved1;
};

struct SceVideoOutColorSettings
{
  float gamma[3];
  uint32_t option;
};

struct SceContentExportParam
{
  char title[257];
  char comment[257];
  char contenttype[65];
};

typedef void *(*sceContentExportMalloc)(size_t, void *);

typedef void (*sceContentExportFree)(void *, void *);

struct SceContentExportInitParam
{
  sceContentExportMalloc mallocfunc;
  sceContentExportFree freefunc;
  void *userdata;
};

struct SceJpegEncCreateParam
{
  uint32_t thisSize;
  uint32_t attribute;
};

struct SceJpegEncEncodeParam
{
  const void *imageMemAddr;
  void *jpegMemAddr;
  uint32_t imageMemSize;
  uint32_t jpegMemSize;
  uint32_t imageWidth;
  uint32_t imageHeight;
  uint32_t imagePitch;
  uint16_t pixelFormat;
  uint16_t encodeMode;
  uint16_t colorSpace;
  uint8_t samplingType;
  uint8_t compressionRatio;
  int32_t restartInterval;
};

struct SceJpegEncOutputInfo
{
  uint32_t dataSize;
  uint32_t processedHeight;
};

typedef SceContentExportInitParam SceContentExportInitParam_0;

typedef SceVideoOutColorSettings SceVideoOutColorSettings_0;

struct sRender::copyRegion::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv;
};

struct sRender::makeMipMapSubLevel::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
};

typedef SceContentExportParam SceContentExportParam_0;

typedef SceVideoOutBufferAttribute SceVideoOutBufferAttribute_0;

typedef SceJpegEncCreateParam SceJpegEncCreateParam_0;

typedef void *SceJpegEncHandle;

typedef SceJpegEncEncodeParam SceJpegEncEncodeParam_0;

typedef SceJpegEncOutputInfo SceJpegEncOutputInfo_0;

enum sResource::ResourceInfo::FileType : __int32
{
  FT_INTERMEDIATE = 0x0,
  FT_NATIVE = 0x1,
  FT_TEMP = 0x2,
};

struct z_stream_s_0
{
  Bytef *next_in;
  uInt avail_in;
  uLong total_in;
  Bytef *next_out;
  uInt avail_out;
  uLong total_out;
  char *msg;
  internal_state_0 *state;
  alloc_func zalloc;
  free_func zfree;
  voidpf opaque;
  int data_type;
  uLong adler;
  uLong reserved;
};

typedef z_stream_s_0 z_stream_0;

struct __cppobj sResource::DecompressStream : MtStream
{
  sResource::DECODEWORK *mpDecodeWork;
  sResource::RESOURCEWORK *mpResourceWork;
  u32 mCurOut;
  u32 mOrgSize;
  z_stream_0 mZStream;
};

struct internal_state_0
{
  int dummy;
};

struct __cppobj sResource::DecompressStream::MyDTI : MtDTI
{
};

typedef char *std::_Simple_types<value_type>::value_type_7;

typedef std::_Simple_types<value_type>::value_type_7 *std::_Simple_types<value_type>::pointer_7;

typedef std::_Simple_types<value_type>::pointer_7 std::_Vector_val<_Val_types>::pointer_4;

struct __cppobj std::_Vector_val<_Val_types>_3 : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer_4 _Myfirst;
  std::_Vector_val<_Val_types>::pointer_4 _Mylast;
  std::_Vector_val<_Val_types>::pointer_4 _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<char *> > : std::_Vector_val<_Val_types>_3
{
};

struct __cppobj std::vector<MT_CHAR *> : std::_Vector_alloc<false,std::_Vec_base_types<char *> >
{
};

typedef MtString *std::_Simple_types<value_type>::value_type_8;

typedef std::_Simple_types<value_type>::value_type_8 *std::_Simple_types<value_type>::pointer_8;

typedef std::_Simple_types<value_type>::pointer_8 std::_Vector_val<_Val_types>::pointer_5;

struct __cppobj std::_Vector_val<_Val_types>_4 : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer_5 _Myfirst;
  std::_Vector_val<_Val_types>::pointer_5 _Mylast;
  std::_Vector_val<_Val_types>::pointer_5 _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<MtString *> > : std::_Vector_val<_Val_types>_4
{
};

struct __cppobj std::vector<MtString *> : std::_Vector_alloc<false,std::_Vec_base_types<MtString *> >
{
};

typedef unsigned int *std::_Simple_types<value_type>::value_type_9;

typedef std::_Simple_types<value_type>::value_type_9 *std::_Simple_types<value_type>::pointer_9;

typedef std::_Simple_types<value_type>::pointer_9 std::_Vector_val<_Val_types>::pointer_6;

struct __cppobj std::_Vector_val<_Val_types>_5 : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer_6 _Myfirst;
  std::_Vector_val<_Val_types>::pointer_6 _Mylast;
  std::_Vector_val<_Val_types>::pointer_6 _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<unsigned int *> > : std::_Vector_val<_Val_types>_5
{
};

struct __cppobj std::vector<u32 *> : std::_Vector_alloc<false,std::_Vec_base_types<unsigned int *> >
{
};

typedef float *std::_Simple_types<value_type>::value_type_10;

typedef std::_Simple_types<value_type>::value_type_10 *std::_Simple_types<value_type>::pointer_10;

typedef std::_Simple_types<value_type>::pointer_10 std::_Vector_val<_Val_types>::pointer_7;

struct __cppobj std::_Vector_val<_Val_types>_6 : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer_7 _Myfirst;
  std::_Vector_val<_Val_types>::pointer_7 _Mylast;
  std::_Vector_val<_Val_types>::pointer_7 _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<float *> > : std::_Vector_val<_Val_types>_6
{
};

struct __cppobj std::vector<f32 *> : std::_Vector_alloc<false,std::_Vec_base_types<float *> >
{
};

struct __cppobj rIniLocal : cResource
{
  MtPropertyList mValueList;
  std::vector<MT_CHAR *> mKeyStr;
  std::vector<MtString *> mString;
  std::vector<u32 *> mU32;
  std::vector<f32 *> mF32;
};

struct __cppobj rIniLocal::MyDTI : MtDTI
{
};

typedef std::_Simple_types<value_type>::size_type std::_Vector_val<_Val_types>_3::size_type;

typedef std::_Vector_val<_Val_types>_3::size_type std::vector<MT_CHAR *>::size_type;

typedef std::_Vector_iterator<_Myt>_1 std::_Vector_val<_Val_types>_3::iterator;

typedef std::_Vector_val<_Val_types>_3::iterator std::vector<MT_CHAR *>::iterator;

typedef std::_Vector_val<_Val_types>::pointer_4 std::_Vector_const_iterator<_Myt>::_Tptr_1;

struct __cppobj std::_Vector_const_iterator<_Myt>_1 : std::_Iterator012<std::random_access_iterator_tag,value_type,difference_type,const_pointer,const_reference,_Iterator_base>
{
  std::_Vector_const_iterator<_Myt>::_Tptr_1 _Ptr;
};

struct __cppobj std::_Vector_iterator<_Myt>_1 : std::_Vector_const_iterator<_Myt>_1
{
};

typedef std::_Simple_types<value_type>::value_type_7 std::_Vector_val<_Val_types>_3::value_type;

typedef std::_Vector_val<_Val_types>_3::value_type std::vector<MT_CHAR *>::value_type;

typedef std::_Vector_val<_Val_types>::pointer_4 std::vector<MT_CHAR *>::pointer;

typedef std::_Wrap_alloc<std::allocator<char *> > std::_Wrap_alloc<std::allocator<char *> >::other;

typedef std::_Wrap_alloc<std::allocator<char *> >::other std::_Vec_base_types<char *>::_Alty;

typedef std::_Vec_base_types<char *>::_Alty std::_Vector_alloc<false,std::_Vec_base_types<char *> >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<char *> >::_Alty std::vector<MT_CHAR *>::_Alty;

struct std::_Allocator_base<char *>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<char *> : std::_Allocator_base<char *>
{
};

struct __cppobj std::_Wrap_alloc<std::allocator<char *> > : std::allocator<char *>
{
};

typedef std::allocator<char *> std::_Vec_base_types<char *>::_Alloc;

typedef std::_Vec_base_types<char *>::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<char *> >::_Alloc;

typedef const std::_Simple_types<value_type>::value_type_7 *std::_Simple_types<value_type>::const_reference_4;

typedef std::_Simple_types<value_type>::const_reference_4 std::_Vector_val<_Val_types>_3::const_reference;

typedef std::_Simple_types<value_type>::value_type_7 *std::_Simple_types<value_type>::reference_6;

typedef std::_Simple_types<value_type>::reference_6 std::_Vector_val<_Val_types>_3::reference;

struct std::_Vec_base_types<char *>
{
  __int8 gap0[1];
};

typedef char *std::_Allocator_base<char *>::value_type;

typedef std::_Allocator_base<char *>::value_type std::allocator<char *>::value_type;

typedef std::allocator<char *>::value_type *std::allocator<char *>::pointer;

typedef std::allocator<char *>::value_type std::allocator_traits<std::allocator<char *> >::value_type;

typedef std::allocator_traits<std::allocator<char *> >::value_type *std::allocator_traits<std::allocator<char *> >::pointer;

typedef std::allocator_traits<std::allocator<char *> >::pointer std::_Wrap_alloc<std::allocator<char *> >::pointer;

typedef size_t std::allocator_traits<std::allocator<char *> >::size_type;

typedef std::allocator_traits<std::allocator<char *> >::size_type std::_Wrap_alloc<std::allocator<char *> >::size_type;

struct std::allocator_traits<std::allocator<char *> >
{
  __int8 gap0[1];
};

typedef std::allocator<char *> std::allocator_traits<std::allocator<char *> >::_Alloc;

typedef std::_Vector_val<_Val_types>::pointer_4 std::_Vector_iterator<_Myt>_1::pointer;

typedef std::_Vector_val<_Val_types>_3::reference std::_Vector_iterator<_Myt>_1::reference;

typedef std::_Vector_iterator<_Myt>_1 std::_Vector_iterator<_Myt>_1::_Myiter;

typedef std::_Vector_val<_Val_types>_3::const_reference std::_Vector_const_iterator<_Myt>_1::reference;

typedef std::_Vector_const_iterator<_Myt>_1 std::_Vector_const_iterator<_Myt>_1::_Myiter;

typedef std::_Simple_types<value_type>::size_type std::_Vector_val<_Val_types>_4::size_type;

typedef std::_Vector_val<_Val_types>_4::size_type std::vector<MtString *>::size_type;

typedef std::_Vector_iterator<_Myt>_2 std::_Vector_val<_Val_types>_4::iterator;

typedef std::_Vector_val<_Val_types>_4::iterator std::vector<MtString *>::iterator;

typedef std::_Vector_val<_Val_types>::pointer_5 std::_Vector_const_iterator<_Myt>::_Tptr_2;

struct __cppobj std::_Vector_const_iterator<_Myt>_2 : std::_Iterator012<std::random_access_iterator_tag,value_type,difference_type,const_pointer,const_reference,_Iterator_base>
{
  std::_Vector_const_iterator<_Myt>::_Tptr_2 _Ptr;
};

struct __cppobj std::_Vector_iterator<_Myt>_2 : std::_Vector_const_iterator<_Myt>_2
{
};

typedef std::_Simple_types<value_type>::value_type_8 std::_Vector_val<_Val_types>_4::value_type;

typedef std::_Vector_val<_Val_types>_4::value_type std::vector<MtString *>::value_type;

typedef std::_Vector_val<_Val_types>::pointer_5 std::vector<MtString *>::pointer;

typedef std::_Wrap_alloc<_Alloc>_6 std::_Wrap_alloc<_Alloc>::other_6;

typedef std::_Wrap_alloc<_Alloc>::other_6 std::_Vec_base_types<MtString *>::_Alty;

typedef std::_Vec_base_types<MtString *>::_Alty std::_Vector_alloc<false,std::_Vec_base_types<MtString *> >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<MtString *> >::_Alty std::vector<MtString *>::_Alty;

struct std::_Allocator_base<MtString *>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<MtString *> : std::_Allocator_base<MtString *>
{
};

struct __cppobj std::_Wrap_alloc<_Alloc>_6 : std::allocator<MtString *>
{
};

typedef std::allocator<MtString *> std::_Vec_base_types<MtString *>::_Alloc;

typedef std::_Vec_base_types<MtString *>::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<MtString *> >::_Alloc;

typedef const std::_Simple_types<value_type>::value_type_8 *std::_Simple_types<value_type>::const_reference_5;

typedef std::_Simple_types<value_type>::const_reference_5 std::_Vector_val<_Val_types>_4::const_reference;

typedef std::_Simple_types<value_type>::value_type_8 *std::_Simple_types<value_type>::reference_7;

typedef std::_Simple_types<value_type>::reference_7 std::_Vector_val<_Val_types>_4::reference;

struct std::_Vec_base_types<MtString *>
{
  __int8 gap0[1];
};

typedef MtString *std::_Allocator_base<MtString *>::value_type;

typedef std::_Allocator_base<MtString *>::value_type std::allocator<MtString *>::value_type;

typedef std::allocator<MtString *>::value_type *std::allocator<MtString *>::pointer;

typedef std::allocator<MtString *>::value_type std::allocator_traits<std::allocator<MtString *> >::value_type;

typedef std::allocator_traits<std::allocator<MtString *> >::value_type *std::allocator_traits<std::allocator<MtString *> >::pointer;

typedef std::allocator_traits<std::allocator<MtString *> >::pointer std::_Wrap_alloc<_Alloc>_6::pointer;

typedef size_t std::allocator_traits<std::allocator<MtString *> >::size_type;

typedef std::allocator_traits<std::allocator<MtString *> >::size_type std::_Wrap_alloc<_Alloc>_6::size_type;

struct std::allocator_traits<std::allocator<MtString *> >
{
  __int8 gap0[1];
};

typedef std::allocator<MtString *> std::allocator_traits<std::allocator<MtString *> >::_Alloc;

typedef std::_Vector_val<_Val_types>::pointer_5 std::_Vector_iterator<_Myt>_2::pointer;

typedef std::_Vector_val<_Val_types>_4::reference std::_Vector_iterator<_Myt>_2::reference;

typedef std::_Vector_iterator<_Myt>_2 std::_Vector_iterator<_Myt>_2::_Myiter;

typedef std::_Vector_val<_Val_types>_4::const_reference std::_Vector_const_iterator<_Myt>_2::reference;

typedef std::_Vector_const_iterator<_Myt>_2 std::_Vector_const_iterator<_Myt>_2::_Myiter;

typedef std::_Simple_types<value_type>::value_type_9 std::_Vector_val<_Val_types>_5::value_type;

typedef std::_Vector_val<_Val_types>_5::value_type std::vector<u32 *>::value_type;

typedef std::_Simple_types<value_type>::size_type std::_Vector_val<_Val_types>_5::size_type;

typedef std::_Vector_val<_Val_types>_5::size_type std::vector<u32 *>::size_type;

typedef std::_Vector_iterator<_Myt>_3 std::_Vector_val<_Val_types>_5::iterator;

typedef std::_Vector_val<_Val_types>_5::iterator std::vector<u32 *>::iterator;

typedef std::_Vector_val<_Val_types>::pointer_6 std::_Vector_const_iterator<_Myt>::_Tptr_3;

struct __cppobj std::_Vector_const_iterator<_Myt>_3 : std::_Iterator012<std::random_access_iterator_tag,value_type,difference_type,const_pointer,const_reference,_Iterator_base>
{
  std::_Vector_const_iterator<_Myt>::_Tptr_3 _Ptr;
};

struct __cppobj std::_Vector_iterator<_Myt>_3 : std::_Vector_const_iterator<_Myt>_3
{
};

typedef std::_Vector_val<_Val_types>::pointer_6 std::vector<u32 *>::pointer;

typedef std::_Wrap_alloc<_Alloc>_7 std::_Wrap_alloc<_Alloc>::other_7;

typedef std::_Wrap_alloc<_Alloc>::other_7 std::_Vec_base_types<unsigned int *>::_Alty;

typedef std::_Vec_base_types<unsigned int *>::_Alty std::_Vector_alloc<false,std::_Vec_base_types<unsigned int *> >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<unsigned int *> >::_Alty std::vector<u32 *>::_Alty;

struct std::_Allocator_base<unsigned int *>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<unsigned int *> : std::_Allocator_base<unsigned int *>
{
};

struct __cppobj std::_Wrap_alloc<_Alloc>_7 : std::allocator<unsigned int *>
{
};

typedef std::allocator<unsigned int *> std::_Vec_base_types<unsigned int *>::_Alloc;

typedef std::_Vec_base_types<unsigned int *>::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<unsigned int *> >::_Alloc;

typedef const std::_Simple_types<value_type>::value_type_9 *std::_Simple_types<value_type>::const_reference_6;

typedef std::_Simple_types<value_type>::const_reference_6 std::_Vector_val<_Val_types>_5::const_reference;

typedef std::_Simple_types<value_type>::value_type_9 *std::_Simple_types<value_type>::reference_8;

typedef std::_Simple_types<value_type>::reference_8 std::_Vector_val<_Val_types>_5::reference;

struct std::_Vec_base_types<unsigned int *>
{
  __int8 gap0[1];
};

typedef unsigned int *std::_Allocator_base<unsigned int *>::value_type;

typedef std::_Allocator_base<unsigned int *>::value_type std::allocator<unsigned int *>::value_type;

typedef std::allocator<unsigned int *>::value_type *std::allocator<unsigned int *>::pointer;

typedef std::allocator<unsigned int *>::value_type std::allocator_traits<std::allocator<unsigned int *> >::value_type;

typedef std::allocator_traits<std::allocator<unsigned int *> >::value_type *std::allocator_traits<std::allocator<unsigned int *> >::pointer;

typedef std::allocator_traits<std::allocator<unsigned int *> >::pointer std::_Wrap_alloc<_Alloc>_7::pointer;

typedef size_t std::allocator_traits<std::allocator<unsigned int *> >::size_type;

typedef std::allocator_traits<std::allocator<unsigned int *> >::size_type std::_Wrap_alloc<_Alloc>_7::size_type;

struct std::allocator_traits<std::allocator<unsigned int *> >
{
  __int8 gap0[1];
};

typedef std::allocator<unsigned int *> std::allocator_traits<std::allocator<unsigned int *> >::_Alloc;

typedef std::_Vector_val<_Val_types>::pointer_6 std::_Vector_iterator<_Myt>_3::pointer;

typedef std::_Vector_val<_Val_types>_5::reference std::_Vector_iterator<_Myt>_3::reference;

typedef std::_Vector_iterator<_Myt>_3 std::_Vector_iterator<_Myt>_3::_Myiter;

typedef std::_Vector_val<_Val_types>_5::const_reference std::_Vector_const_iterator<_Myt>_3::reference;

typedef std::_Vector_const_iterator<_Myt>_3 std::_Vector_const_iterator<_Myt>_3::_Myiter;

typedef std::_Simple_types<value_type>::size_type std::_Vector_val<_Val_types>_6::size_type;

typedef std::_Vector_val<_Val_types>_6::size_type std::vector<f32 *>::size_type;

typedef std::_Vector_iterator<_Myt>_4 std::_Vector_val<_Val_types>_6::iterator;

typedef std::_Vector_val<_Val_types>_6::iterator std::vector<f32 *>::iterator;

typedef std::_Vector_val<_Val_types>::pointer_7 std::_Vector_const_iterator<_Myt>::_Tptr_4;

struct __cppobj std::_Vector_const_iterator<_Myt>_4 : std::_Iterator012<std::random_access_iterator_tag,value_type,difference_type,const_pointer,const_reference,_Iterator_base>
{
  std::_Vector_const_iterator<_Myt>::_Tptr_4 _Ptr;
};

struct __cppobj std::_Vector_iterator<_Myt>_4 : std::_Vector_const_iterator<_Myt>_4
{
};

typedef std::_Simple_types<value_type>::value_type_10 std::_Vector_val<_Val_types>_6::value_type;

typedef std::_Vector_val<_Val_types>_6::value_type std::vector<f32 *>::value_type;

typedef std::_Vector_val<_Val_types>::pointer_7 std::vector<f32 *>::pointer;

typedef std::_Wrap_alloc<_Alloc>_8 std::_Wrap_alloc<_Alloc>::other_8;

typedef std::_Wrap_alloc<_Alloc>::other_8 std::_Vec_base_types<float *>::_Alty;

typedef std::_Vec_base_types<float *>::_Alty std::_Vector_alloc<false,std::_Vec_base_types<float *> >::_Alty;

typedef std::_Vector_alloc<false,std::_Vec_base_types<float *> >::_Alty std::vector<f32 *>::_Alty;

struct std::_Allocator_base<float *>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<float *> : std::_Allocator_base<float *>
{
};

struct __cppobj std::_Wrap_alloc<_Alloc>_8 : std::allocator<float *>
{
};

typedef std::allocator<float *> std::_Vec_base_types<float *>::_Alloc;

typedef std::_Vec_base_types<float *>::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<float *> >::_Alloc;

typedef const std::_Simple_types<value_type>::value_type_10 *std::_Simple_types<value_type>::const_reference_7;

typedef std::_Simple_types<value_type>::const_reference_7 std::_Vector_val<_Val_types>_6::const_reference;

typedef std::_Simple_types<value_type>::value_type_10 *std::_Simple_types<value_type>::reference_9;

typedef std::_Simple_types<value_type>::reference_9 std::_Vector_val<_Val_types>_6::reference;

struct std::_Vec_base_types<float *>
{
  __int8 gap0[1];
};

typedef float *std::_Allocator_base<float *>::value_type;

typedef std::_Allocator_base<float *>::value_type std::allocator<float *>::value_type;

typedef std::allocator<float *>::value_type *std::allocator<float *>::pointer;

typedef std::allocator<float *>::value_type std::allocator_traits<std::allocator<float *> >::value_type;

typedef std::allocator_traits<std::allocator<float *> >::value_type *std::allocator_traits<std::allocator<float *> >::pointer;

typedef std::allocator_traits<std::allocator<float *> >::pointer std::_Wrap_alloc<_Alloc>_8::pointer;

typedef size_t std::allocator_traits<std::allocator<float *> >::size_type;

typedef std::allocator_traits<std::allocator<float *> >::size_type std::_Wrap_alloc<_Alloc>_8::size_type;

struct std::allocator_traits<std::allocator<float *> >
{
  __int8 gap0[1];
};

typedef std::allocator<float *> std::allocator_traits<std::allocator<float *> >::_Alloc;

typedef std::_Vector_val<_Val_types>::pointer_7 std::_Vector_iterator<_Myt>_4::pointer;

typedef std::_Vector_val<_Val_types>_6::reference std::_Vector_iterator<_Myt>_4::reference;

typedef std::_Vector_iterator<_Myt>_4 std::_Vector_iterator<_Myt>_4::_Myiter;

typedef std::_Vector_val<_Val_types>_6::const_reference std::_Vector_const_iterator<_Myt>_4::reference;

typedef std::_Vector_const_iterator<_Myt>_4 std::_Vector_const_iterator<_Myt>_4::_Myiter;

struct std::remove_reference<char *const &>
{
  __int8 gap0[1];
};

typedef char *const std::remove_reference<char *const &>::type;

struct std::conditional<false,std::_Nonscalar_ptr_iterator_tag,std::_Scalar_ptr_iterator_tag>
{
  __int8 gap0[1];
};

typedef std::_Scalar_ptr_iterator_tag std::conditional<false,std::_Nonscalar_ptr_iterator_tag,std::_Scalar_ptr_iterator_tag>::type;

struct std::iterator_traits<char **>
{
  __int8 gap0[1];
};

typedef char *std::iterator_traits<char **>::value_type;

struct std::remove_reference<unsigned int *>
{
  __int8 gap0[1];
};

typedef unsigned int *std::remove_reference<unsigned int *>::type;

struct std::iterator_traits<unsigned int **>
{
  __int8 gap0[1];
};

typedef unsigned int *std::iterator_traits<unsigned int **>::value_type;

struct std::remove_reference<float *const &>
{
  __int8 gap0[1];
};

typedef float *const std::remove_reference<float *const &>::type;

struct std::remove_reference<float *&>
{
  __int8 gap0[1];
};

typedef float *std::remove_reference<float *&>::type;

struct std::iterator_traits<float **>
{
  __int8 gap0[1];
};

typedef float *std::iterator_traits<float **>::value_type;

struct std::remove_reference<unsigned int *const &>
{
  __int8 gap0[1];
};

typedef unsigned int *const std::remove_reference<unsigned int *const &>::type;

struct std::remove_reference<unsigned int *&>
{
  __int8 gap0[1];
};

typedef unsigned int *std::remove_reference<unsigned int *&>::type;

struct std::remove_reference<MtString *const &>
{
  __int8 gap0[1];
};

typedef MtString *const std::remove_reference<MtString *const &>::type;

struct std::remove_reference<MtString *&>
{
  __int8 gap0[1];
};

typedef MtString *std::remove_reference<MtString *&>::type;

struct std::iterator_traits<MtString **>
{
  __int8 gap0[1];
};

typedef MtString *std::iterator_traits<MtString **>::value_type;

enum sScene::TEXDETAIL_TYPE : __int32
{
  TEXDETAIL_HIGHEST = 0x0,
  TEXDETAIL_HIGH = 0x1,
  TEXDETAIL_MEDIUM = 0x2,
  TEXDETAIL_LOW = 0x3,
  TEXDETAIL_LOWEST = 0x4,
};

enum sScene::DEVICE_TEX : __int32
{
  DEVTEX_HARDWARE = 0x0,
  DEVTEX_NUM = 0x1,
};

enum sScene::BVH_TYPE : __int32
{
  BVH_RANGE_LIGHT = 0x0,
  BVH_RANGE_WIND = 0x1,
  MAX_BVH_TYPE = 0x2,
};

struct sScene::ENVELOPE_HANDLE::$87E63AE0DD1B18B03FC91812716BEE48::$9DA819C30824C3DCA2BF338FD3B52E60
{
  unsigned __int32 line : 12;
  unsigned __int32 ofs : 12;
  unsigned __int32 block : 8;
};

union sScene::ENVELOPE_HANDLE::$87E63AE0DD1B18B03FC91812716BEE48
{
  sScene::ENVELOPE_HANDLE::$87E63AE0DD1B18B03FC91812716BEE48::$9DA819C30824C3DCA2BF338FD3B52E60 _anon_0;
  u32 handle;
};

struct sScene::ENVELOPE_HANDLE
{
  sScene::ENVELOPE_HANDLE::$87E63AE0DD1B18B03FC91812716BEE48 _anon_0;
};

typedef u32 (*cDynamicBVHCollision::TRAVERSE_CALLBACK)(MtObject *, MtGeometry *, MtObject *, void *);

struct std::remove_reference<uLight *&>
{
  __int8 gap0[1];
};

typedef uLight *std::remove_reference<uLight *&>::type;

struct $<41557283,1>::VERTEX_FILTER
{
  MtFloat3 pos;
  MtColor color;
  MtFloat2 uv;
};

struct `anonymous namespace'::SHLightEnumerationContext
{
  u32 light_group;
  u32 view;
  bool sh_enable;
  cDraw *pdraw;
  uLight::SHFACTOR *pshfactor;
};

struct `anonymous namespace'::LightEnumerationContext
{
  u32 light_group;
  u32 view;
  u32 max_dynamic_light;
  u32 light_num;
  uLight **plights;
};

struct `anonymous namespace'::WindEnumerationContext
{
  u32 max_wind;
  u32 wind_type_mask;
  u32 wind_group_mask;
  u32 global_count;
  u32 counter;
  uGrassWind **pwinds;
};

enum sShader2::SHADER_CACHE_TYPE : __int32
{
  SHADER_CACHE_UNUSED = 0x0,
  SHADER_CACHE_VS = 0x1,
  SHADER_CACHE_PS = 0x2,
  SHADER_CACHE_GS = 0x3,
  SHADER_CACHE_IA = 0x4,
  SHADER_CACHE_SS = 0x5,
  SHADER_CACHE_HS = 0x6,
  SHADER_CACHE_DS = 0x7,
  SHADER_CACHE_CS = 0x8,
};

enum sShader2::SEMANTIC_STAGE : __int32
{
  STAGE_VS_IN = 0x1,
  STAGE_VS_OUT = 0x2,
  STAGE_PS_IN = 0x4,
  STAGE_PS_OUT = 0x8,
  STAGE_GS_IN = 0x10,
  STAGE_GS_OUT = 0x20,
  STAGE_HS_IN = 0x40,
  STAGE_HS_OUT = 0x80,
  STAGE_DS_IN = 0x100,
  STAGE_DS_OUT = 0x200,
  STAGE_CS_IN = 0x400,
  STAGE_CS_OUT = 0x800,
};

typedef nPS4::BufferObject *nDraw::HBlob;

enum nDraw::SYSTEM_VALUE : __int32
{
  SV_UNDEFINED = 0x0,
  SV_POSITION = 0x1,
  SV_CLIP_DISTANCE = 0x2,
  SV_CULL_DISTANCE = 0x3,
  SV_RENDERTARGET_INDEX = 0x4,
  SV_VIEWPORT_INDEX = 0x5,
  SV_VERTEX_ID = 0x6,
  SV_PRIMITIVE_ID = 0x7,
  SV_INSTANCE_ID = 0x8,
  SV_IS_FRONT_FACE = 0x9,
  SV_TARGET = 0xA,
  SV_DEPTH = 0xB,
  SV_DOMAIN_LOCATION = 0xC,
  SV_TESS_FACTOR = 0xD,
  SV_INSIDE_TESS_FACTOR = 0xE,
  SV_OUTPUT_CONTROL_POINT_ID = 0xF,
  SV_DISPATCH_THREAD_ID = 0x10,
  SV_GROUP_ID = 0x11,
  SV_GROUP_INDEX = 0x12,
  SV_GROUP_THREAD_ID = 0x13,
  SV_GS_INSTANCE_ID = 0x14,
};

enum nDraw::SEQUENCE_TYPE : __int32
{
  SQT_UNDEFINED = 0x0,
  SQT_VARIABLE = 0x1,
  SQT_OPERATOR = 0x2,
  SQT_SUBSCRIPT = 0x3,
  SQT_IMMEDIATE = 0x4,
  SQT_FUNCTION = 0x5,
  SQT_MFUNCTION = 0x6,
  SQT_INTRINSIC = 0x7,
  SQT_CAST = 0x8,
  SQT_STRUCTCAST = 0x9,
  SQT_CONSTRUCT = 0xA,
  SQT_MEMBER = 0xB,
  SQT_SYSTEM = 0xC,
  SQT_DEFAULTARG = 0xD,
  SQT_IMMEDIATECONSTRUCT = 0xE,
  SQT_DAMMY_2 = 0xF,
};

enum nDraw::SYSTEM_SEQUENCE_TYPE : __int32
{
  SST_UNDEFINED = 0x0,
  SST_TEX_SAMPLER = 0x1,
  SST_TEX_FUNCTION = 0x2,
  SST_TEX_INVSIZE = 0x3,
  SST_TEX_INVSIZE1 = 0x4,
  SST_TEX_INVSIZE2 = 0x5,
  SST_TEX_INVSIZE3 = 0x6,
  SST_TEX_SIZE = 0x7,
  SST_TEX_SIZE1 = 0x8,
  SST_TEX_SIZE2 = 0x9,
  SST_TEX_SIZE3 = 0xA,
  SST_FLOAT_ONE = 0xB,
  SST_FLOAT_ZERO = 0xC,
};

enum nDraw::FUNCTION_TYPE : __int32
{
  FT_INVALID = 0x0,
  FT_USERDEFINE = 0x1,
  FT_ABS = 0x2,
  FT_ACOS = 0x3,
  FT_ALL = 0x4,
  FT_ANY = 0x5,
  FT_ASFLOAT = 0x6,
  FT_ASIN = 0x7,
  FT_ASINT = 0x8,
  FT_ASUINT = 0x9,
  FT_ATAN = 0xA,
  FT_ATAN2 = 0xB,
  FT_CEIL = 0xC,
  FT_CLAMP = 0xD,
  FT_CLIP = 0xE,
  FT_COS = 0xF,
  FT_COSH = 0x10,
  FT_CROSS = 0x11,
  FT_D3DCOLORtoUBYTE4 = 0x12,
  FT_DDX = 0x13,
  FT_DDY = 0x14,
  FT_DEGREES = 0x15,
  FT_DETERMINANT = 0x16,
  FT_DISTANCE = 0x17,
  FT_DOT = 0x18,
  FT_EXP = 0x19,
  FT_EXP2 = 0x1A,
  FT_FACEFORWARD = 0x1B,
  FT_FLOOR = 0x1C,
  FT_FMOD = 0x1D,
  FT_FRAC = 0x1E,
  FT_FREXP = 0x1F,
  FT_FWIDTH = 0x20,
  FT_GETRENDERTARGETSAMPLECOUNT = 0x21,
  FT_GETRENDERTARGETSAMPLEPOSITION = 0x22,
  FT_ISFINITE = 0x23,
  FT_ISINF = 0x24,
  FT_ISNAN = 0x25,
  FT_LDEXP = 0x26,
  FT_LENGTH = 0x27,
  FT_LERP = 0x28,
  FT_LIT = 0x29,
  FT_LOG = 0x2A,
  FT_LOG10 = 0x2B,
  FT_LOG2 = 0x2C,
  FT_MAX = 0x2D,
  FT_MIN = 0x2E,
  FT_MODF = 0x2F,
  FT_MUL = 0x30,
  FT_NOISE = 0x31,
  FT_NORMALIZE = 0x32,
  FT_POW = 0x33,
  FT_RADIANS = 0x34,
  FT_REFLECT = 0x35,
  FT_REFRACT = 0x36,
  FT_ROUND = 0x37,
  FT_RSQRT = 0x38,
  FT_SATURATE = 0x39,
  FT_SIGN = 0x3A,
  FT_SIN = 0x3B,
  FT_SINCOS = 0x3C,
  FT_SINH = 0x3D,
  FT_SMOOTHSTEP = 0x3E,
  FT_SQRT = 0x3F,
  FT_STEP = 0x40,
  FT_TAN = 0x41,
  FT_TANH = 0x42,
  FT_MIX = 0x43,
  FT_MOD = 0x44,
  FT_FRACT = 0x45,
  FT_DFDX = 0x46,
  FT_DFDY = 0x47,
  FT_INVERSESQRT = 0x48,
  FT_TEX1D = 0x49,
  FT_TEX1DBIAS = 0x4A,
  FT_TEX1DGRAD = 0x4B,
  FT_TEX1DLOD = 0x4C,
  FT_TEX1DPROJ = 0x4D,
  FT_TEX2D = 0x4E,
  FT_TEX2DBIAS = 0x4F,
  FT_TEX2DGRAD = 0x50,
  FT_TEX2DLOD = 0x51,
  FT_TEX2DPROJ = 0x52,
  FT_TEX3D = 0x53,
  FT_TEX3DBIAS = 0x54,
  FT_TEX3DGRAD = 0x55,
  FT_TEX3DLOD = 0x56,
  FT_TEX3DPROJ = 0x57,
  FT_TEXCUBE = 0x58,
  FT_TEXCUBEBIAS = 0x59,
  FT_TEXCUBEGRAD = 0x5A,
  FT_TEXCUBELOD = 0x5B,
  FT_TEXCUBEPROJ = 0x5C,
  FT_TRANSPOSE = 0x5D,
  FT_TRUNC = 0x5E,
  FT_TEXDEPTH2D = 0x5F,
  FT_SAMPLE = 0x60,
  FT_SAMPLE_BIAS = 0x61,
  FT_SAMPLE_CMP = 0x62,
  FT_SAMPLE_CMP_LEVEL_ZERO = 0x63,
  FT_SAMPLE_GRAD = 0x64,
  FT_SAMPLE_LEVEL = 0x65,
  FT_LOAD = 0x66,
  FT_GET_SAMPLE_POSITION = 0x67,
  FT_GET_DIMENSIONS = 0x68,
  FT_GATHER = 0x69,
  FT_CALCULATE_LEVEL_OF_DETAIL = 0x6A,
  FT_CALCULATE_LEVEL_OF_DETAIL_UNCLAMPED = 0x6B,
  FT_APPEND = 0x6C,
  FT_RESTART_STRIP = 0x6D,
};

enum nDraw::OPERATOR_TYPE : __int32
{
  OP_UNDEFINED = 0x0,
  OP_ADD = 0x2B,
  OP_SUB = 0x2D,
  OP_MUL = 0x2A,
  OP_DIV = 0x2F,
  OP_GT = 0x3E,
  OP_LT = 0x3C,
  OP_AND = 0x26,
  OP_OR = 0x7C,
  OP_XOR = 0x5E,
  OP_NOT = 0x7E,
  OP_BOOL_NOT = 0x21,
  OP_SUBSCRIPT = 0x2E,
  OP_COMMA = 0x2C,
  OP_SEMICOLON = 0x3B,
  OP_COLON = 0x3A,
  OP_MOD = 0x25,
  OP_SUBSTITUTION = 0x3D,
  OP_ARRAY = 0x5B,
  OP_QUESTION = 0x3F,
  OP_STRUCT = 0x7B,
  OP_DIV_EQ = 0x80,
  OP_MUL_EQ = 0x81,
  OP_SUB_EQ = 0x82,
  OP_ADD_EQ = 0x83,
  OP_AND_EQ = 0x84,
  OP_MOD_EQ = 0x85,
  OP_OR_EQ = 0x86,
  OP_XOR_EQ = 0x87,
  OP_EQ = 0x88,
  OP_NOT_EQ = 0x89,
  OP_GE = 0x8A,
  OP_LE = 0x8B,
  OP_BOOL_AND = 0x8C,
  OP_BOOL_OR = 0x8D,
  OP_DEC = 0x8E,
  OP_INC = 0x8F,
  OP_PRE_DEC = 0x90,
  OP_PRE_INC = 0x91,
  OP_LSHIFT = 0x92,
  OP_RSHIFT = 0x93,
  OP_LSHIFT_EQ = 0x94,
  OP_RSHIFT_EQ = 0x95,
  OP_SCOPE = 0x96,
  OP_PLUS = 0x97,
  OP_MINUS = 0x98,
  OP_CAST = 0x99,
  OP_FUNCTION = 0x9A,
  OP_MFUNCTION = 0x9B,
  OP_CONSTRUCT = 0x9C,
  OP_INTRINSIC = 0x9D,
  OP_SELECT = 0x9E,
};

enum nDraw::STATEMENT_TYPE : __int32
{
  STT_UNDEFINED = 0x0,
  STT_BLOCK = 0x1,
  STT_DECLARATION = 0x2,
  STT_EXPRESSION = 0x3,
  STT_IF = 0x4,
  STT_WHILE = 0x5,
  STT_FOR = 0x6,
  STT_DO = 0x7,
  STT_SWITCH = 0x8,
  STT_CASE = 0x9,
  STT_BREAK = 0xA,
  STT_RETURN = 0xB,
  STT_CONTINUE = 0xC,
  STT_DISCARD = 0xD,
};

enum nDraw::STATEMENT_ATTRIBUTE_TYPE : __int32
{
  SAT_UNDEFINED = 0x0,
  SAT_UNROLL = 0x1,
  SAT_LOOP = 0x2,
  SAT_FLATTEN = 0x3,
  SAT_BRANCH = 0x4,
  SAT_CALL = 0x5,
  SAT_FORCECASE = 0x6,
  SAT_ISOLATE = 0x7,
  SAT_MAXVERTEXCOUNT = 0x8,
  SAT_DOMAIN = 0x9,
  SAT_PARTITIONING = 0xA,
  SAT_OUTPUTTOPOLOGY = 0xB,
  SAT_PATCHCONSTANTFUNC = 0xC,
  SAT_OUTPUTCONTROLPOINTS = 0xD,
  SAT_EARLYDEPTHSTENCIL = 0xE,
  SAT_INSTANCE = 0xF,
  SAT_MAXTESSFACTOR = 0x10,
  SAT_NUMTHREADS = 0x11,
};

enum nDraw::OBJECT_ATTRIBUTE : __int32
{
  OA_EXTERN = 0x1,
  OA_CONST = 0x2,
  OA_SHARED = 0x8,
  OA_UNIFORM = 0x10,
  OA_VOLATILE = 0x20,
  OA_STATIC = 0x40,
  OA_INLINE = 0x1000,
};

struct __cppobj __attribute__((aligned(8))) nDraw::TEXTURE : nDraw::OBJECT
{
  unsigned __int32 ttype : 8;
  unsigned __int32 dtype : 8;
  unsigned __int32 row_num : 4;
  unsigned __int32 col_num : 4;
  unsigned __int32 reserved : 8;
  MtFloat4 null_value;
};

struct nDraw::SQ_FUNCTION
{
  unsigned __int32 type : 4;
  unsigned __int32 argument_num : 12;
  unsigned __int32 function : 16;
};

struct __cppobj nDraw::DEPTHSTENCIL_STATE : nDraw::OBJECT
{
  nDraw::DEPTHSTENCIL_DESC desc;
};

struct __cppobj nDraw::BLEND_STATE : nDraw::OBJECT
{
  nDraw::BLEND_DESC desc;
};

struct __cppobj nDraw::RASTERIZER_STATE : nDraw::OBJECT
{
  nDraw::RASTERIZER_DESC desc;
};

struct nDraw::SQ_VARIABLE
{
  unsigned __int32 type : 4;
  unsigned __int32 cbuffer : 16;
  unsigned __int32 variable : 12;
};

struct nDraw::SQ_OPERATOR
{
  unsigned __int32 type : 4;
  unsigned __int32 argument_num : 12;
  unsigned __int32 optype : 16;
};

struct nDraw::SQ_SUBSCRIPT
{
  unsigned __int32 type : 4;
  unsigned __int32 ss_num : 4;
  unsigned __int32 x : 4;
  unsigned __int32 y : 4;
  unsigned __int32 z : 4;
  unsigned __int32 w : 4;
  unsigned __int32 col_num : 4;
  unsigned __int32 row_num : 4;
};

struct nDraw::SQ_MEMBER
{
  unsigned __int32 type : 4;
  unsigned __int32 member : 12;
  unsigned __int32 hstruct : 16;
};

struct nDraw::SQ_IMMEDIATE::$11EB1041D828C88C0F74D5CC9A929A69::$1FEF8A11EE9061CA7F2B54BE77D65F36
{
  unsigned __int32 type : 4;
  unsigned __int32 ctype : 4;
  unsigned __int32 dtype : 4;
  unsigned __int32 col_num : 4;
  unsigned __int32 row_num : 4;
  unsigned __int32 offset : 12;
};

struct nDraw::SQ_IMMEDIATE::$11EB1041D828C88C0F74D5CC9A929A69::$7F63631B3845D0FCE25AA31EE4E79571
{
  unsigned __int32 padding : 8;
  unsigned __int32 hstruct : 12;
  unsigned __int32 padding2 : 12;
};

union nDraw::SQ_IMMEDIATE::$11EB1041D828C88C0F74D5CC9A929A69
{
  nDraw::SQ_IMMEDIATE::$11EB1041D828C88C0F74D5CC9A929A69::$1FEF8A11EE9061CA7F2B54BE77D65F36 _anon_0;
  nDraw::SQ_IMMEDIATE::$11EB1041D828C88C0F74D5CC9A929A69::$7F63631B3845D0FCE25AA31EE4E79571 _anon_1;
};

struct nDraw::SQ_IMMEDIATE
{
  nDraw::SQ_IMMEDIATE::$11EB1041D828C88C0F74D5CC9A929A69 _anon_0;
};

struct nDraw::SQ_DEFAULTARG
{
  unsigned __int32 type : 4;
  unsigned __int32 function : 16;
  unsigned __int32 arg_index : 12;
};

struct nDraw::SQ_MFUNCTION
{
  unsigned __int32 type : 4;
  unsigned __int32 argument_num : 12;
  unsigned __int32 mfunction : 16;
};

struct nDraw::SQ_INTRINSIC
{
  unsigned __int32 type : 4;
  unsigned __int32 argument_num : 12;
  unsigned __int32 intrinsic : 16;
};

struct nDraw::SQ_CAST
{
  unsigned __int32 type : 4;
  unsigned __int32 ctype : 4;
  unsigned __int32 dtype : 4;
  unsigned __int32 col_num : 4;
  unsigned __int32 row_num : 4;
  unsigned __int32 reserved : 12;
};

struct nDraw::SQ_STRUCTCAST
{
  unsigned __int32 type : 4;
  unsigned __int32 ctype : 4;
  unsigned __int32 hstruct : 16;
  unsigned __int32 reserved : 8;
};

struct nDraw::SQ_IMMEDIATECONSTRUCT::$C8E47FBB285B48F74126AD5EF6D7E0F6
{
  unsigned __int32 type : 4;
  unsigned __int32 argument_num : 4;
  unsigned __int32 array_num : 8;
  unsigned __int32 ctype : 4;
  unsigned __int32 dtype : 4;
  unsigned __int32 col_num : 4;
  unsigned __int32 row_num : 4;
};

struct nDraw::SQ_IMMEDIATECONSTRUCT::$1D2F4B5D5DF77CB4C2D68D1A80137924
{
  unsigned __int32 : 20;
  unsigned __int32 hstruct : 12;
};

union nDraw::SQ_IMMEDIATECONSTRUCT
{
  nDraw::SQ_IMMEDIATECONSTRUCT::$C8E47FBB285B48F74126AD5EF6D7E0F6 _anon_0;
  nDraw::SQ_IMMEDIATECONSTRUCT::$1D2F4B5D5DF77CB4C2D68D1A80137924 _anon_1;
};

struct nDraw::SQ_CONSTRUCT
{
  unsigned __int32 type : 4;
  unsigned __int32 argument_num : 12;
  unsigned __int32 ctype : 4;
  unsigned __int32 dtype : 4;
  unsigned __int32 col_num : 4;
  unsigned __int32 row_num : 4;
};

struct nDraw::SQ_SYSTEM
{
  unsigned __int32 type : 4;
  unsigned __int32 sstype : 8;
  unsigned __int32 hobject : 10;
  unsigned __int32 htexture : 10;
};

struct nDraw::ST_CASE
{
  unsigned __int32 type : 4;
  unsigned __int32 reserved : 27;
  unsigned __int32 bdefault : 1;
  s32 value;
};

struct nDraw::STATEMENT_ATTRIBUTE_INFO
{
  nDraw::STATEMENT_ATTRIBUTE_TYPE type;
  MT_CTSTR name;
};

struct __attribute__((aligned(8))) nPS4::ShaderDesc
{
  int (**_vptr$ShaderDesc)(void);
  nPS4::ShaderDesc::ConstantBuffer *mpConstantBuffers;
  u32 mConstantBuffersNum;
  nPS4::ShaderDesc::SamplerState *mpSamplerStates;
  u32 mSamplerStatesNum;
  nPS4::ShaderDesc::TextureBuffer *mpTextureBuffers;
  u32 mTextureBuffersNum;
  nPS4::ShaderDesc::Attribute *mpInputAttributes;
  u32 mInputAttributesNum;
};

struct __attribute__((aligned(8))) nPS4::ShaderDesc::ConstantBuffer
{
  MT_CHAR mName[64];
  u32 mResourceIndex;
  u32 mSize;
  nPS4::ShaderDesc::ConstantBuffer::Element *mpElements;
  u32 mElementsNum;
};

struct nPS4::ShaderDesc::SamplerState
{
  MT_CHAR mName[64];
  u32 mResourceIndex;
};

struct nPS4::ShaderDesc::TextureBuffer
{
  MT_CHAR mName[64];
  u32 mResourceIndex;
};

struct nPS4::ShaderDesc::Attribute
{
  u32 mResourceIndex;
};

struct nPS4::ShaderDesc::ConstantBuffer::Element
{
  MT_CHAR mName[64];
  u8 mType;
  u32 mOffset;
  u32 mSize;
};

union sce::Shader::Binary::Element::$730F294CA9661FD78347907942B90906
{
  uint32_t m_defaultValueOffset;
  uint32_t m_resourceIndex;
};

struct sce::Shader::Binary::Element
{
  uint8_t m_type;
  unsigned __int8 m_isUsed : 1;
  unsigned __int8 m_isRowMajor : 1;
  unsigned __int8 m_reserved_b10_15 : 6;
  unsigned __int8 m_isPointer : 1;
  unsigned __int8 m_reserved_b17_23 : 7;
  uint8_t m_elementType;
  uint32_t m_byteOffset;
  uint32_t m_size;
  uint32_t m_arraySize;
  sce::Shader::Binary::Element::$730F294CA9661FD78347907942B90906 _anon_0;
  uint32_t m_numElements;
  uint32_t m_elementOffset;
  uint32_t m_nameOffset;
  uint32_t m_typeNameOffset;
};

struct __cppobj rShaderCache::MyDTI : MtDTI
{
};

union sShader2::writeStatement::BUSF
{
  bool b;
  u32 u;
  s32 s;
  f32 f;
};

struct __cppobj cShadowPriorityState::MyDTI : MtDTI
{
};

enum cShadowPriorityState::MESSAGE : __int32
{
  MESSAGE_ALLOC = 0x0,
  MESSAGE_REQUEST_FADE_OUT = 0x1,
};

enum cShadowPriorityState::STATE : __int32
{
  STATE_NO_ALLOC = 0x0,
  STATE_VISIBLE_ALLOC = 0x1,
  STATE_FADEIN = 0x2,
  STATE_FADEOUT = 0x3,
};

struct __cppobj nDraw::OcclusionQuery::MyDTI : MtDTI
{
};

enum nDraw::TOcclusionQuery : __int32
{
  TOcclusionQuery_Basic = 0x0,
};

enum nSound::Listener : __int32
{
  Listener_0 = 0x0,
  Listener_1 = 0x1,
  Listener_2 = 0x2,
  Listener_3 = 0x3,
  Listener_Max = 0x4,
};

enum nSound::Channel_71ch : __int32
{
  Channel_71ch_L = 0x0,
  Channel_71ch_R = 0x1,
  Channel_71ch_C = 0x2,
  Channel_71ch_LFE = 0x3,
  Channel_71ch_Ls = 0x4,
  Channel_71ch_Rs = 0x5,
  Channel_71ch_Le = 0x6,
  Channel_71ch_Re = 0x7,
  Channel_71ch_Max = 0x8,
};

enum nSound::Channel_UpDownMixLevels : __int32
{
  Channel_UpDownMixLevels_C = 0x0,
  Channel_UpDownMixLevels_LFE = 0x1,
  Channel_UpDownMixLevels_Ls = 0x2,
  Channel_UpDownMixLevels_Rs = 0x3,
  Channel_UpDownMixLevels_Le = 0x4,
  Channel_UpDownMixLevels_Re = 0x5,
  Channel_UpDownMixLevels_Max = 0x6,
};

enum nSound::Channel_2ch : __int32
{
  Channel_2ch_L = 0x0,
  Channel_2ch_R = 0x1,
  Channel_2ch_Max = 0x2,
};

enum nSound::Channel_51ch : __int32
{
  Channel_51ch_L = 0x0,
  Channel_51ch_R = 0x1,
  Channel_51ch_C = 0x2,
  Channel_51ch_LFE = 0x3,
  Channel_51ch_Ls = 0x4,
  Channel_51ch_Rs = 0x5,
  Channel_51ch_Max = 0x6,
};

typedef void (*sSound::ENTRY_CALLBACK_FUNC)(void *);

struct __cppobj __attribute__((aligned(8))) sSound::NativeSystemPS4::ReverbResourceWorkPS4 : sSound::ReverbResource::ReverbResourceWork
{
  sSound::REVERB_PARAMETER mReverbParamSet;
  bool mIsParamSet;
};

struct __cppobj __attribute__((aligned(4))) sSound::NativeSystemPS4::EQResourceWorkPS4 : sSound::EQResource::EQResourceWork
{
  sSound::EQ_PARAMETER mEQParamSet;
  bool mIsParamSet;
};

enum sSound::AudioOut::AUDIO_OUT_PORT_TYPE : __int32
{
  AUDIO_OUT_PORT_TYPE_MAIN = 0x0,
  AUDIO_OUT_PORT_TYPE_BGM = 0x1,
  AUDIO_OUT_PORT_TYPE_PAD_SPEAKER = 0x2,
};

enum sSound::AudioOut::AUDIO_OUT_PORT : __int32
{
  AUDIO_OUT_PORT_MAIN = 0x0,
  AUDIO_OUT_PORT_BGM = 0x1,
  AUDIO_OUT_PORT_PAD_SPEAKER0 = 0x2,
  AUDIO_OUT_PORT_PAD_SPEAKER1 = 0x3,
  AUDIO_OUT_PORT_PAD_SPEAKER2 = 0x4,
  AUDIO_OUT_PORT_PAD_SPEAKER3 = 0x5,
  AUDIO_OUT_PORT_RESTRICTED = 0x6,
  AUDIO_OUT_PORT_MAX = 0x7,
};

enum sSound::PAUSE_STATUS : __int32
{
  PAUSE_STATUS_INIT = 0x0,
  PAUSE_STATUS_NORMAL = 0x1,
  PAUSE_STATUS_DELAYTIMER = 0x2,
  PAUSE_STATUS_ALL = 0x4,
  PAUSE_STATUS_SYSTEM = 0x8,
};

enum sSound::SoundPlatform : __int32
{
  SOUND_PF_UNKNOWN = 0x0,
  SOUND_PF_PS4 = 0x200,
  SOUND_PF_ALL = 0xFFFF,
};

enum sSound::VOLUME_MODE : __int32
{
  VOLUME_MODE_FLOAT = 0x0,
  VOLUME_MODE_DECIBEL = 0x1,
};

enum sSound::CONTROL_TYPE : __int32
{
  CONTROL_TYPE_POSITION = 0x0,
  CONTROL_TYPE_FADEIN = 0x1,
  CONTROL_TYPE_VOLUME_ABS = 0x2,
  CONTROL_TYPE_VOLUME_REL = 0x3,
  CONTROL_TYPE_VOLUME_RATIO = 0x4,
  CONTROL_TYPE_EFFECT_VOLUME_ABS = 0x5,
  CONTROL_TYPE_EFFECT_VOLUME_REL = 0x6,
  CONTROL_TYPE_EFFECT_VOLUME_RATIO = 0x7,
  CONTROL_TYPE_PAN_ABS = 0x8,
  CONTROL_TYPE_PAN_REL = 0x9,
  CONTROL_TYPE_PITCH_ABS = 0xA,
  CONTROL_TYPE_PITCH_REL = 0xB,
  CONTROL_TYPE_LISTENING = 0xC,
  CONTROL_TYPE_UPDATE_VOLUME_ONCE = 0xD,
  CONTROL_TYPE_MULTI_LISTENING = 0xE,
  CONTROL_TYPE_WORK_AREA = 0xF,
  CONTROL_TYPE_DELAYTIMER = 0x10,
  CONTROL_TYPE_EXTERNAL_VOLUME = 0x11,
  CONTROL_TYPE_EXTERNAL_EFFECT_VOLUME = 0x12,
  CONTROL_TYPE_PRIORITY = 0x13,
  CONTROL_TYPE_PRIORITY_MODE = 0x14,
  CONTROL_TYPE_EXTRACT_PARAM = 0x15,
  CONTROL_TYPE_CENTERVOLUME = 0x16,
  CONTROL_TYPE_SE_PROGRAM_NO = 0x17,
  CONTROL_TYPE_QUATERNION = 0x18,
  CONTROL_TYPE_COORD = 0x19,
  CONTROL_TYPE_PLAY_POSITION = 0x1A,
  CONTROL_TYPE_PLAY_MARKER = 0x1B,
  CONTROL_TYPE_REVERB_SEND_ABS = 0x1C,
  CONTROL_TYPE_FILTER_FREQ_ABS = 0x1D,
  CONTROL_TYPE_POSITION_OFFSET = 0x1E,
  CONTROL_TYPE_VOLUMECURVEID = 0x1F,
  CONTROL_TYPE_EFFECTCURVEID = 0x20,
  CONTROL_TYPE_DIRECTIONALCURVEID = 0x21,
  CONTROL_TYPE_EFFECT = 0x22,
  CONTROL_TYPE_EQ = 0x23,
  CONTROL_TYPE_SET_VOLUME_ABS = 0x24,
  CONTROL_TYPE_SET_VOLUME_REL = 0x25,
  CONTROL_TYPE_SET_VOLUME_RATIO = 0x26,
  CONTROL_TYPE_VSURROUND_BYPASS = 0x27,
  CONTROL_TYPE_LFE_VOLUME_ABS = 0x28,
  CONTROL_TYPE_LFE_VOLUME_REL = 0x29,
  CONTROL_TYPE_LFE_VOLUME_RATIO = 0x2A,
  CONTROL_TYPE_LFECURVEID = 0x2B,
  CONTROL_TYPE_EQ_EFFECT = 0x2C,
  CONTROL_TYPE_DOPPLERSCALER = 0x2D,
  CONTROL_TYPE_INTERLEAVED_DATA_VOLUME = 0x2E,
  CONTROL_TYPE_PICOLA_PITCHSHIFT = 0x2F,
  CONTROL_TYPE_STREAM_SILENT_DETECT = 0x30,
  CONTROL_TYPE_NAITVEPARAM = 0x31,
};

enum sSound::BANK_REQUEST_TYPE : __int32
{
  BANK_REQUEST_TYPE_PROGRAM = 0x0,
  BANK_REQUEST_TYPE_ELEMENT = 0x1,
};

enum sSound::FADE_TYPE : __int32
{
  FADE_TYPE_FADEIN = 0x0,
  FADE_TYPE_MOVEVOL_ABS = 0x1,
  FADE_TYPE_MOVEVOL_REL = 0x2,
  FADE_TYPE_MOVEVOL_RAT = 0x3,
  FADE_TYPE_FADEOUT = 0x4,
};

enum sSound::MARKER_PLAY_TYPE : __int32
{
  MARKER_PLAY_TYPE_ID = 0x0,
  MARKER_PLAY_TYPE_SAMPLE = 0x1,
  MARKER_PLAY_TYPE_INDEX = 0x2,
};

enum sSound::EQ_CATEGORY : __int32
{
  EQC_CATEGORY0 = 0x0,
  EQC_CATEGORY1 = 0x1,
  EQC_CATEGORY2 = 0x2,
  EQC_CATEGORY3 = 0x3,
  EQC_CATEGORY_R0 = 0x4,
  EQC_CATEGORY_R1 = 0x5,
  EQC_CATEGORY_R2 = 0x6,
  EQC_CATEGORY_R3 = 0x7,
  EQC_MASTER = 0x8,
  EQC_MAX = 0x9,
};

enum sSound::EQ_ENABLE_SW : __int32
{
  EQES_NONE = 0x0,
  EQES_LOW = 0x1,
  EQES_MIDLOW = 0x2,
  EQES_MIDHIGH = 0x4,
  EQES_HIGH = 0x8,
  EQES_ALL = 0xF,
};

enum sSound::EQ_FILTER_TYPE : __int32
{
  EQFT_PEQ = 0x0,
  EQFT_LSF = 0x1,
  EQFT_HPF = 0x2,
  EQFT_HSF = 0x3,
  EQFT_LPF = 0x4,
};

struct __cppobj sSound::SeVoiceAccessor : sSound::VoiceAccessor
{
};

struct __cppobj sSound::StreamVoiceAccessor : sSound::VoiceAccessor
{
};

struct SceNgs2WaveformFormat
{
  uint32_t waveformType;
  uint32_t numChannels;
  uint32_t sampleRate;
  uint32_t configData;
  uint32_t frameOffset;
  uint32_t frameMargin;
};

typedef SceNgs2WaveformFormat SceNgs2WaveformFormat_0;

struct SceNgs2WaveformBlock
{
  uint32_t dataOffset;
  uint32_t dataSize;
  uint32_t numRepeats;
  uint32_t numSkipSamples;
  uint32_t numSamples;
  uint32_t reserved;
  uintptr_t userData;
};

typedef SceNgs2WaveformBlock SceNgs2WaveformBlock_0;

struct SceNgs2WaveformInfo
{
  SceNgs2WaveformFormat_0 format;
  uint32_t dataOffset;
  uint32_t dataSize;
  uint32_t loopBeginPosition;
  uint32_t loopEndPosition;
  uint32_t numSamples;
  uint32_t audioUnitSize;
  uint32_t numAudioUnitSamples;
  uint32_t numAudioUnitPerFrame;
  uint32_t audioFrameSize;
  uint32_t numAudioFrameSamples;
  uint32_t numDelaySamples;
  uint32_t numBlocks;
  SceNgs2WaveformBlock_0 aBlock[4];
};

typedef SceNgs2WaveformInfo SceNgs2WaveformInfo_0;

typedef s32 (*sSound::USER_FX_FUNC)(f32 **, const u32, const u32, void *);

struct __cppobj sSound::NGS2VoiceSampler : sSound::NGS2Voice
{
  SceNgs2WaveformInfo_0 mWaveformInfo;
  sSound::USER_FX_FUNC mpUserFxFunc;
};

struct __cppobj __attribute__((aligned(8))) sSound::NGS2VoiceSubmixer : sSound::NGS2Voice
{
  sSound::USER_FX_FUNC mpUserFxFunc;
  u32 mRefCount;
};

struct SceNgs2ReverbI3DL2Param
{
  float wet;
  float dry;
  int32_t room;
  int32_t roomHF;
  uint32_t reflectionPattern;
  float decayTime;
  float decayHFRatio;
  int32_t reflections;
  float reflectionsDelay;
  int32_t reverb;
  float reverbDelay;
  float diffusion;
  float density;
  float HFReference;
  uint32_t reserve[8];
};

typedef SceNgs2ReverbI3DL2Param SceNgs2ReverbI3DL2Param_0;

struct __cppobj __attribute__((aligned(8))) sSound::NGS2VoiceReverb : sSound::NGS2Voice
{
  SceNgs2ReverbI3DL2Param_0 mReverbI3DL2Param;
  u32 mRefCount;
};

struct __cppobj sSound::NGS2RackSubmixer : sSound::NGS2Rack
{
};

struct __cppobj sSound::NGS2RackReverb : sSound::NGS2Rack
{
};

enum cSoundMultiBandEQ::EQ_FILTER_TYPE : __int32
{
  EQFT_PEQ_0 = 0x0,
  EQFT_LSF_0 = 0x1,
  EQFT_HPF_0 = 0x2,
  EQFT_HSF_0 = 0x3,
  EQFT_LPF_0 = 0x4,
};

struct __cppobj cSoundMultiBandEQ : MtObject
{
  __attribute__((aligned(16))) MtVector4 mCoefficient[5];
  MtVector4 mPastData[8][4];
  MtVector4 mFreq;
  MtVector4 mGain;
  MtVector4 mQ;
  u32 mChannelNum;
  bool mBypass;
  bool mEnable;
  u32 mUnitEnable;
  cSoundMultiBandEQ::EQ_FILTER_TYPE mLowType;
  cSoundMultiBandEQ::EQ_FILTER_TYPE mHighType;
};

struct __cppobj sSound::NGS2VoiceSubmixerEQ : sSound::NGS2VoiceSubmixer
{
  cSoundMultiBandEQ mMultiBandEQ;
};

struct __cppobj sSound::NGS2VoiceSubmixerCompLimitter : sSound::NGS2VoiceSubmixer
{
  cSoundCompressor mCompressor;
  cSoundLimitter mLimitter;
  f32 *mpInterleaveBuffer;
};

struct cSoundSilentDetectFilter
{
  int (**_vptr$cSoundSilentDetectFilter)(void);
  bool mEnable;
  bool mIsInitialize;
  u32 mChannelNum;
  cSoundMeterRms *mpRms300;
};

struct __cppobj sSound::NGS2VoiceSubmixerSilentDetectFilter : sSound::NGS2VoiceSubmixer
{
  cSoundSilentDetectFilter mSilentDetectFilter;
  f32 mSilentThreshold;
  f32 *mpMixBuffer;
};

struct cSoundMeterRms::Volume
{
  f32 v;
};

struct cSoundMeterRms::VolumeStereo
{
  f32 l;
  f32 r;
};

struct cSoundMeterRms::VolumeSurround51
{
  f32 l;
  f32 r;
  f32 c;
  f32 lf;
  f32 ls;
  f32 rs;
};

struct cSoundMeterRms
{
  int (**_vptr$cSoundMeterRms)(void);
  u8 mChannels;
  size_t mIndexUpdating;
  size_t mFramesResidual;
  f32 mBlocks[186];
  f32 mSummation[6];
  f32 mRms[6];
  cSoundMeterRms::Volume mRmsMono;
  cSoundMeterRms::VolumeStereo mRmsStereo;
  cSoundMeterRms::VolumeSurround51 mRmsSurround51;
  MtCriticalSection mMutex;
};

struct __cppobj sSound::NGS2RoutingNoEffect : sSound::NGS2Routing
{
};

struct __cppobj sSound::NGS2RoutingReverbEQ : sSound::NGS2Routing
{
  sSound::NGS2RackSubmixer mRackCompLimitter;
  sSound::NGS2VoiceSubmixerCompLimitter mVoiceCompLimitter;
  sSound::NGS2RackSubmixer mRackMasterEQ;
  sSound::NGS2VoiceSubmixerEQ mVoiceMasterEQ;
  sSound::NGS2RackSubmixer mRackReverbSilentDetectFilter;
  sSound::NGS2VoiceSubmixerSilentDetectFilter mVoiceReverbSilentDetectFilter[4];
  sSound::NGS2RackReverb mRackReverb;
  sSound::NGS2VoiceReverb mVoiceReverb[4];
  sSound::NGS2RackSubmixer mRackEQ;
  sSound::NGS2VoiceSubmixerEQ mVoiceEQ[4];
  sSound::NGS2RackSubmixer mRackEQReverb;
  sSound::NGS2VoiceSubmixerEQ mVoiceEQReverb[4][4];
  f32 mReverbOutputLevel[8];
};

struct sSound::NGS2RoutingReverbEQ::REFERENCE_COUNT_PARAM
{
  s32 mEQIndex;
  s32 mReverbIndex;
  s32 mEQReverbIndex;
};

struct sSound::NGS2RoutingReverbEQ::DST_PARAM_DRY
{
  s32 mEQIndex;
};

struct sSound::NGS2RoutingReverbEQ::DST_PARAM_WET
{
  s32 mReverbIndex;
  s32 mEQReverbIndex;
};

struct __cppobj __attribute__((aligned(8))) sSound::NativeVoicePS4 : sSound::NativeVoice
{
  sSound::NGS2VoiceSampler mVoiceSampler;
  f32 mMatrixLevels[64];
  f32 mEffectSendLevel;
  u32 mChannelNum;
  f32 mPitch;
  u32 mIndex;
  sSound::Voice *mpVoice;
  sSound::AudioOut::AUDIO_OUT_PORT mAudioOutPort;
};

struct __cppobj __attribute__((aligned(8))) sSound::NativeVoiceSePS4 : sSound::NativeVoicePS4
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) sSound::NativeVoicePS4:4128 : sSound::NativeVoice
{
  sSound::NGS2VoiceSampler mVoiceSampler;
  f32 mMatrixLevels[64];
  f32 mEffectSendLevel;
  u32 mChannelNum;
  f32 mPitch;
  u32 mIndex;
  sSound::Voice *mpVoice;
  sSound::AudioOut::AUDIO_OUT_PORT mAudioOutPort;
};

struct __cppobj sSound::NativeVoiceStreamPS4 : sSound::NativeVoicePS4:4128
{
  const u32 STREAM_BUFFER_SIZE;
  const u32 STREAM_BUFFER_LOWER_SIZE;
  const u32 STREAM_INTERLEAVE_BUFFER_SIZE;
  u8 *mpBuffer;
  f32 *mpInterleaveBuffer;
  u32 mLoadWaveformBlockIndex;
  u32 mUpdateWaveformBlockIndex;
  u32 mLoadBlockFileOffset;
  u32 mUpdateBlockFileOffset;
  u32 mReadPosition;
  u32 mWritePosition;
  u32 mReserveSize;
  u32 mDecodedDataSize;
  volatile u32 mRemainSize;
  MtCriticalSection mLoadUpdateSection;
  rSoundSourceStreamAT9 *mpSource;
  u32 mSourceID;
  bool mIsPrepared;
  s32 mPicolaPitchShiftNo;
  u32 mDecodedSamples;
  cSoundSilentDetectFilter mSilentDetectFilter;
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) rSoundSource:2528 : cResource
{
  rSoundSource::Descriptor mDescriptor;
  u32 mFilePosition;
  _BYTE gapB4[4];
  void *mpBuffer;
  u32 mBufferLength;
  u32 mGlobalID;
  MtCriticalSection mCS;
  rSoundSource::SoundFile *mpFile;
  s32 mOpenCtr;
  bool mSelfAllocation;
  __attribute__((aligned(2))) rSoundSource::TIMESTAMP mTimeStamp;
  __attribute__((aligned(4))) u32 mVersion;
  _BYTE gapEC[4];
  MtDTI mDTIChild;
  rSoundSource::MARKER *mpMarker;
  u16 *mpMarkerIDToIndexTbl;
  u16 mMarkerIDToIndexTblNum;
};

struct __cppobj rSoundSourceAT9 : rSoundSource:2528
{
  u32 mEncodeParam;
};

struct __cppobj rSoundSourceStreamAT9 : rSoundSourceAT9
{
  u32 mPackageFileOffset;
  rSoundStreamSourcePackage *mpStreamSourcePackage;
};

struct __cppobj sSound::NativeVoiceExternalPS4 : sSound::NativeVoicePS4:4128
{
  u32 EXTERNAL_BUFFER_SIZE;
  u32 EXTERNAL_BUFFER_LOWER_SIZE;
  u32 EXTERNAL_ADD_BLOCK_SIZE;
  sSound::Voice *mpVoice;
  void *mpBuffer;
  u32 mWritePosition;
  u32 mReadPosition;
  u32 mRemainSize;
  u32 mDecodedDataSize;
  u32 mDecodedDataSizeBlock;
  bool mIsRestricted;
  MtCriticalSection mRemainSection;
};

struct __cppobj sSound::NativeVoicePoolPS4 : sSound::NativeVoicePool
{
};

enum rSoundStreamRequest::SOUND_STREAM_REQUEST_COMMAND : __int32
{
  SOUND_COMMAND_BLANK = 0x0,
  SOUND_COMMAND_STREAM_PLAY = 0x1,
  SOUND_COMMAND_STREAM_STOP = 0x2,
  SOUND_COMMAND_STREAM_PAUSE = 0x3,
  SOUND_COMMAND_STREAM_BLANK = 0x4,
  SOUND_COMMAND_STREAM_FADE_IN = 0x5,
  SOUND_COMMAND_STREAM_FADE_OUT = 0x6,
  SOUND_COMMAND_STREAM_MOVE_VOL_ABS = 0x7,
  SOUND_COMMAND_STREAM_MOVE_VOL_REL = 0x8,
  SOUND_COMMAND_STREAM_MOVE_VOL_RAT = 0x9,
  SOUND_COMMAND_STREAM_PREPARE = 0xA,
  SOUND_COMMAND_STREAM_RESUME = 0xB,
};

enum rSoundStreamRequest::SOUND_STREAM_REQUEST_CATEGORY : __int32
{
  SOUND_STREAM_REQUEST_SE = 0x0,
  SOUND_STREAM_REQUEST_BGM = 0x1,
  SOUND_STREAM_REQUEST_ENV = 0x2,
  SOUND_STREAM_REQUEST_VOICE = 0x3,
  SOUND_STREAM_REQUEST_SYSTEM = 0x4,
  SOUND_STREAM_REQUEST_EVENT = 0x5,
  SOUND_STREAM_REQUEST_CATEGORY_NUM = 0x6,
};

enum rSoundBank::OscillatorType : __int32
{
  OT_WAVE = 0x0,
  OT_SINE = 0x1,
  OT_SQUARE = 0x2,
  OT_SQUARE_1_3 = 0x3,
  OT_SQUARE_1_7 = 0x4,
  OT_SAW = 0x5,
  OT_TRIANGLE = 0x6,
  OT_SAMPLE_HOLD = 0x7,
};

enum rSoundRequest::SOUND_REQUEST_CATEGORY : __int32
{
  SOUND_REQUEST_SE = 0x0,
  SOUND_REQUEST_ENV = 0x1,
  SOUND_REQUEST_VOICE = 0x2,
  SOUND_REQUEST_SYSTEM = 0x3,
  SOUND_REQUEST_CATEGORY_NUM = 0x4,
};

struct __cppobj rSoundCurveSet::MyDTI : MtDTI
{
};

struct __cppobj rSoundReverb::MyDTI : MtDTI
{
};

struct __cppobj rSoundReverb::cSoundReverbData : MtObject
{
  u32 mId;
  sSound::ReverbParameter mReverbData;
  f32 mOutputLevel;
};

struct __cppobj rSoundReverb::cSoundReverbData::MyDTI : MtDTI
{
};

struct __cppobj rSoundEQ::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) rSoundEQ::cEQData : MtObject
{
  u32 mId;
  u32 mCategory;
  sSound::EQParameter mEQData;
};

struct __cppobj rSoundEQ::cEQData::MyDTI : MtDTI
{
};

struct SceAudioOutPortState
{
  uint16_t output;
  uint8_t channel;
  uint8_t reserved8_1[1];
  int16_t volume;
  uint16_t rerouteCounter;
  uint64_t flag;
  uint64_t reserved64[2];
};

typedef SceNgs2RackOption SceNgs2RackOption_0;

typedef SceNgs2ContextBufferInfo SceNgs2ContextBufferInfo_0;

typedef SceNgs2SamplerRackOption SceNgs2SamplerRackOption_0;

struct __attribute__((aligned(8))) SceNgs2SamplerRackOption
{
  SceNgs2RackOption_0 rackOption;
  uint32_t maxChannelWorks;
  uint32_t maxCodecCaches;
  uint32_t maxWaveformBlocks;
  uint32_t maxEnvelopePoints;
  uint32_t maxFilters;
  uint32_t maxAtrac9Decoders;
  uint32_t maxAtrac9ChannelWorks;
  uint32_t maxAjmAtrac9Decoders;
  uint32_t numPeakMeterBlocks;
};

typedef SceNgs2SystemOption SceNgs2SystemOption_0;

struct SceNgs2SystemOption
{
  size_t size;
  char name[16];
  uint32_t flags;
  uint32_t maxGrainSamples;
  uint32_t numGrainSamples;
  uint32_t sampleRate;
  uint32_t aReserved[6];
};

typedef SceNgs2ReverbRackOption SceNgs2ReverbRackOption_0;

struct SceNgs2ReverbRackOption
{
  SceNgs2RackOption_0 rackOption;
  uint32_t maxChannels;
  uint32_t reverbSize;
};

typedef SceNgs2SubmixerRackOption SceNgs2SubmixerRackOption_0;

struct __attribute__((aligned(8))) SceNgs2SubmixerRackOption
{
  SceNgs2RackOption_0 rackOption;
  uint32_t maxChannels;
  uint32_t maxEnvelopePoints;
  uint32_t maxFilters;
  uint32_t maxInputs;
  uint32_t numPeakMeterBlocks;
};

typedef SceNgs2MasteringRackOption SceNgs2MasteringRackOption_0;

struct SceNgs2MasteringRackOption
{
  SceNgs2RackOption_0 rackOption;
  uint32_t maxChannels;
  uint32_t numPeakMeterBlocks;
};

enum rSoundSpeakerSetXml::COORDINATE : __int32
{
  C_LISTENER = 0x0,
  C_WORLD = 0x1,
  C_LOCAL = 0x2,
  C_FIXED_ORIENTATION = 0x3,
};

struct __cppobj cSoundMultiBandEQ::MyDTI : MtDTI
{
};

struct SceNgs2RenderBufferInfo
{
  void *buffer;
  size_t bufferSize;
  uint32_t waveformType;
  uint32_t numChannels;
};

typedef SceNgs2SamplerVoiceState SceNgs2SamplerVoiceState_0;

struct SceNgs2VoiceState
{
  uint32_t stateFlags;
};

typedef SceNgs2VoiceState SceNgs2VoiceState_0;

struct SceNgs2SamplerVoiceState
{
  SceNgs2VoiceState_0 voiceState;
  float envelopeHeight;
  float peakHeight;
  uint32_t reserved;
  uint64_t numDecodedSamples;
  uint64_t decodedDataSize;
  uint64_t userData;
  const void *waveformData;
};

typedef SceNgs2UserFxProcessContext SceNgs2UserFxProcessContext_0;

struct SceNgs2UserFxProcessContext
{
  float **aChannelData;
  uintptr_t userData0;
  uintptr_t userData1;
  uintptr_t userData2;
  uint32_t flags;
  uint32_t numChannels;
  uint32_t numGrainSamples;
  uint32_t sampleRate;
};

typedef int32_t (*SceNgs2BufferAllocHandler)(SceNgs2ContextBufferInfo_0 *);

typedef int32_t (*SceNgs2BufferFreeHandler)(SceNgs2ContextBufferInfo_0 *);

struct SceNgs2BufferAllocator
{
  SceNgs2BufferAllocHandler allocHandler;
  SceNgs2BufferFreeHandler freeHandler;
  uintptr_t userData;
};

struct __cppobj rSoundSourceStreamAT9::MyDTI : MtDTI
{
};

struct __cppobj rSoundSourceAT9::MyDTI : MtDTI
{
};

struct SceNgs2VoiceParamHeader
{
  uint16_t size;
  int16_t next;
  uint32_t id;
};

typedef SceNgs2VoiceParamHeader SceNgs2VoiceParamHeader_0;

struct SceNgs2MasteringVoiceOutputParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t outputId;
  uint32_t reserved;
};

struct SceNgs2MasteringVoiceSetupParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t numInputChannels;
  uint32_t flags;
};

struct SceNgs2ReverbVoiceI3DL2Param
{
  SceNgs2VoiceParamHeader_0 header;
  SceNgs2ReverbI3DL2Param_0 i3dl2;
};

struct SceNgs2ReverbVoiceSetupParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t numInputChannels;
  uint32_t numOutputChannels;
  uint32_t flags;
  uint32_t reserved;
};

typedef int32_t (*SceNgs2UserFxProcessHandler)(SceNgs2UserFxProcessContext_0 *);

struct SceNgs2SubmixerVoiceUserFxParam
{
  SceNgs2VoiceParamHeader_0 header;
  SceNgs2UserFxProcessHandler handler;
  uintptr_t userData0;
  uintptr_t userData1;
  uintptr_t userData2;
};

struct SceNgs2SubmixerVoiceSetupParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t numIoChannels;
  uint32_t flags;
};

struct SceNgs2SamplerVoiceUserFxParam
{
  SceNgs2VoiceParamHeader_0 header;
  SceNgs2UserFxProcessHandler handler;
  uintptr_t userData0;
  uintptr_t userData1;
  uintptr_t userData2;
};

struct SceNgs2SamplerVoiceWaveformBlocksParam
{
  SceNgs2VoiceParamHeader_0 header;
  const void *data;
  uint32_t flags;
  uint32_t numBlocks;
  const SceNgs2WaveformBlock_0 *aBlock;
};

struct SceNgs2SamplerVoiceSetupParam
{
  SceNgs2VoiceParamHeader_0 header;
  SceNgs2WaveformFormat_0 format;
  uint32_t flags;
  uint32_t reserved;
};

struct SceNgs2SamplerVoicePitchParam
{
  SceNgs2VoiceParamHeader_0 header;
  float ratio;
  uint32_t reserved;
};

struct SceNgs2VoicePortMatrixParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t port;
  int32_t matrixId;
};

struct SceNgs2VoiceMatrixLevelsParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t matrixId;
  uint32_t numLevels;
  const float *aLevel;
};

struct SceNgs2VoicePortVolumeParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t port;
  float level;
};

struct SceNgs2VoicePatchParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t port;
  uint32_t destInputId;
  SceNgs2Handle destHandle;
};

struct SceNgs2VoiceEventParam
{
  SceNgs2VoiceParamHeader_0 header;
  uint32_t eventId;
};

typedef SceNgs2VoiceEventParam SceNgs2VoiceEventParam_0;

typedef SceNgs2VoicePatchParam SceNgs2VoicePatchParam_0;

typedef SceNgs2VoicePortVolumeParam SceNgs2VoicePortVolumeParam_0;

typedef SceNgs2VoiceMatrixLevelsParam SceNgs2VoiceMatrixLevelsParam_0;

typedef SceNgs2VoicePortMatrixParam SceNgs2VoicePortMatrixParam_0;

typedef SceNgs2SamplerVoicePitchParam SceNgs2SamplerVoicePitchParam_0;

typedef SceNgs2SamplerVoiceSetupParam SceNgs2SamplerVoiceSetupParam_0;

typedef SceNgs2SamplerVoiceWaveformBlocksParam SceNgs2SamplerVoiceWaveformBlocksParam_0;

typedef SceNgs2SamplerVoiceUserFxParam SceNgs2SamplerVoiceUserFxParam_0;

typedef SceNgs2SubmixerVoiceSetupParam SceNgs2SubmixerVoiceSetupParam_0;

typedef SceNgs2SubmixerVoiceUserFxParam SceNgs2SubmixerVoiceUserFxParam_0;

typedef SceNgs2ReverbVoiceSetupParam SceNgs2ReverbVoiceSetupParam_0;

typedef SceNgs2ReverbVoiceI3DL2Param SceNgs2ReverbVoiceI3DL2Param_0;

typedef SceNgs2MasteringVoiceSetupParam SceNgs2MasteringVoiceSetupParam_0;

typedef SceNgs2MasteringVoiceOutputParam SceNgs2MasteringVoiceOutputParam_0;

typedef SceNgs2RenderBufferInfo SceNgs2RenderBufferInfo_0;

typedef SceNgs2BufferAllocator SceNgs2BufferAllocator_0;

enum SYSTEM_GROUP : __int32
{
  SYSTEM_GROUP_FILTER = 0x0,
  SYSTEM_GROUP_SHADOW = 0x1,
  SYSTEM_GROUP_LIGHT = 0x2,
  SYSTEM_GROUP_FOG = 0x3,
  SYSTEM_GROUP_EFFECT = 0x4,
  SYSTEM_GROUP_BASEMODEL = 0x5,
  SYSTEM_GROUP_6 = 0x6,
  SYSTEM_GROUP_7 = 0x7,
  SYSTEM_GROUP_8 = 0x8,
  SYSTEM_GROUP_9 = 0x9,
  SYSTEM_GROUP_10 = 0xA,
  SYSTEM_GROUP_11 = 0xB,
  SYSTEM_GROUP_12 = 0xC,
  SYSTEM_GROUP_13 = 0xD,
  SYSTEM_GROUP_14 = 0xE,
  SYSTEM_GROUP_15 = 0xF,
};

enum sVibration::VibControl::VIB_RNO : __int32
{
  VIB_RNO_WAIT = 0x0,
  VIB_RNO_MOVE = 0x1,
  VIB_RNO_KILL = 0x2,
};

enum sVibration::VibControl::ENABLE_FLAG : __int32
{
  ENABLE_FLAG_PADVIB = 0x1,
  ENABLE_FLAG_CAMVIB = 0x2,
};

enum sVibration::VIB_REQ_TYPE : __int32
{
  VIB_REQ_TYPE_DEFAULT_0 = 0x0,
  VIB_REQ_TYPE_POS = 0x1,
  VIB_REQ_TYPE_UNIT = 0x2,
};

enum sVibration::FADE_TYPE : __int32
{
  FADE_TYPE_NONE = 0x0,
  FADE_TYPE_VIEWPORT = 0x1,
  FADE_TYPE_POS = 0x2,
  FADE_TYPE_UNIT = 0x3,
};

enum rVibration::VIB_TYPE : __int32
{
  VIB_TYPE_NONE = 0x0,
  VIB_TYPE_SINGLE = 0x1,
  VIB_TYPE_NUM = 0x2,
};

enum rVibration::VIB_OPTION_FLAG : __int32
{
  VIB_OPTION_FLAG_RESERVED0 = 0x1,
  VIB_OPTION_FLAG_RESERVED1 = 0x2,
  VIB_OPTION_FLAG_RESERVED2 = 0x4,
  VIB_OPTION_FLAG_RESERVED3 = 0x8,
  VIB_OPTION_FLAG_FADE = 0x80000000,
};

struct __cppobj rVibration::VIB_PAD_SINGLE : rVibration::VIB_COMMON_0
{
  f32 HighVibStartRate;
  f32 HighVibEndRate;
  u32 HighVibTime;
  u32 VPSingle321c;
  f32 LowVibStartRate;
  f32 LowVibEndRate;
  u32 LowVibTime;
  u32 VPSingle322c;
};

struct __cppobj rVibration::VIB_CAM_SINGLE : rVibration::VIB_COMMON_0
{
  MtFloat3 VibVec;
  f32 VibTargetScale;
  u32 VibCycle;
  u32 VibTime;
  u32 VibAttenuateTime;
  u32 VCSingle322c;
};

typedef rVibration::VIB_PAD_SINGLE rVibration::VIB_PAD_SINGLE_0;

typedef rVibration::VIB_CAM_SINGLE rVibration::VIB_CAM_SINGLE_0;

enum sZone::$7CA702092D911DA586D154D71F7EAA83 : __int32
{
  COLLISION_TYPE_POINT = 0x0,
  COLLISION_TYPE_LINESEGMENT = 0x1,
  COLLISION_TYPE_CONVEX = 0x2,
};

enum sZone::$7082B6F9007800F8617D4EC5094FE66F : __int32
{
  CHECK_PRIORITY_NONE = 0x0,
  CHECK_PRIORITY_SKIP = 0x1,
  CHECK_PRIORITY_ARRAY_CLEAR = 0x2,
};

enum sZone::DEBUG_DRAW_TYPE : __int32
{
  DEBUG_DRAW_POINT = 0x0,
  DEBUG_DRAW_LINESEGMENT = 0x1,
  DEBUG_DRAW_MAX = 0x2,
};

enum nZone::BROAD_PHASE_SEARCH_MODE : __int32
{
  BROAD_PHASE_SEARCH_NONE = 0x0,
  BROAD_PHASE_SEARCH_GRID_GROUP = 0x1,
  BROAD_PHASE_SEARCH_GRID_ALL = 0x2,
  BROAD_PHASE_SEARCH_MAX = 0x3,
};

typedef u32 (*nCollision::TRAVERSE_CALLBACK)(MtObject *, uintptr, u32, uintptr);

struct __cppobj cZoneContents::MyDTI : MtDTI
{
};

struct __attribute__((aligned(8))) cZoneContents::stContentsDrawInfo
{
  nZone::cLayoutElement *mpOwnerLayoutElement;
  bool mIsToolSelected;
  bool mIsZTest;
};

struct __cppobj cZoneListener::MyDTI : MtDTI
{
};

enum cZoneListener::PRIORITY_RULE : __int32
{
  PRIORITY_RULE_GROUP_ENABLE = 0x0,
  PRIORITY_RULE_ALL_ENABLE = 0x1,
  PRIORITY_RULE_DISABLE = 0x2,
  PRIORITY_RULE_NUM = 0x3,
  PRIORITY_RULE_DEFAULT = 0x1,
};

enum sCollision::CONTACT_MODE : __int32
{
  MODE_AUTO = 0x0,
  MODE_FORCEGROUND = 0x1,
  MODE_FORCESLOPE = 0x2,
  MODE_FORCEWALL = 0x3,
  MODE_EMULATEOFF = 0x4,
  MODE_SLOPEFORCEWALL = 0x5,
  MODE_MASK = 0xFFFF,
  MODE_ADJPOS_FALL_SPD_KEEP = 0x10000000,
  MODE_ANTI_VIBRATE = 0x20000000,
  MODE_CHARA_JUMP = 0x40000000,
  MODE_CHARA = 0x80000000,
};

typedef u32 (*cDynamicBVHCollision::TRAVERSE_CALLBACK_CONST)(MtObject *, const MtGeometry *, MtObject *, const void *);

struct __cppobj uScrollCollisionGeometry::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) uScrollCollisionGeometry::cGeometryInfo : MtObject
{
  uScrollCollisionGeometry *mpOwner;
  u32 mElementIndex;
  MtGeomConvex *mpGeomConvex;
  MtAABB mBoundingAABB;
  rCollision::MaterialInfo mGeomMaterialInfo;
  bool mFlgActive;
};

struct __cppobj uScrollCollisionGeometry::cGeometryInfo::MyDTI : MtDTI
{
};

struct __cppobj uScrollCollision::MyDTI : MtDTI
{
};

struct __cppobj uDynamicSbc::MyDTI : MtDTI
{
};

struct __cppobj rDynamicSbc::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) rCollisionObj : cResource
{
  u32 mMagic;
  u32 mVersion;
  rCollisionObj::cPartsData *mpPartsData;
  u32 mPartsNum;
  rCollision::MaterialInfo *mpMaterial;
  u32 mMaterialNum;
};

struct __cppobj __attribute__((aligned(16))) rCollisionObj::cPartsData : MtObject
{
  u32 mConnectPartsID;
  __attribute__((aligned(8))) MtAABB mAABB;
  MtArray mConvexArray;
  u32 *mpMaterialID;
  MtAABB *mpConvexAABB;
  MtVector3 *mpConvexGCenter;
};

struct __cppobj rCollisionObj::MyDTI : MtDTI
{
};

struct __cppobj rCollisionObj::cPartsData::MyDTI : MtDTI
{
};

struct __cppobj rGeometry2 : cResource
{
  u32 mMagic;
  u32 mVersion;
  rGeometry2::cGeometryArray *mpGeometry;
  rGeometry2Group *mpParentResource;
};

struct __cppobj __attribute__((aligned(16))) rGeometry2::cGeometryArray : nCollision::cCollisionNode:960
{
  MtObject *mpAddonObject;
  uModel *mpAttachModel;
  bool mFlgEnableSequence;
  u8 mMotionListIndex;
  u8 mSequenceIndex;
  u8 mTargetSequenceBitIndex;
  u32 mBeforeSequenceMotionNo;
  s32 mBeforeSequenceFrameIndex;
};

struct __cppobj rGeometry2Group : cResource
{
  u32 mMagic;
  u32 mVersion;
  MtArray mGeometryResourceArray;
};

struct __cppobj rGeometry2::MyDTI : MtDTI
{
};

struct __cppobj rGeometry2::cGeometryArray::MyDTI : MtDTI
{
};

struct __cppobj rGeometry2::cGeometry : nCollision::cGeometry
{
  MtGeomConvex *mpAttachGeometry;
  u8 mAttachMode;
  u8 mJointNo0;
  u8 mJointNo1;
  bool mFlgEnableScale;
  MtObject *mpAddonObject;
  uModel *mpAttachModel;
  MtVector3 mBeforeAttachPos0;
};

struct __cppobj rGeometry2::cGeometry::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(4))) rGeometry3 : cResource
{
  MtArray mGroupArray;
  u32 *mpUniqueIDTable;
  u32 mUniqueIDNum;
  bool mFlgEnableMotionSequence;
};

struct sCollision::applyWorldOffset::PartsWork
{
  MtMatrix MatrixNow;
  MtMatrix MatrixOld;
};

enum sCollision::Collider::$C6AF6E3A56619BDF4459919EC86F8750 : __int32
{
  MULTITHREAD_STAGE_SETUP = 0x0,
  MULTITHREAD_STAGE_CONTACT = 0x1,
  MULTITHREAD_STAGE_CONTACT_END = 0x2,
  MULTITHREAD_STAGE_NUM = 0x3,
};

struct sCollision::ColliderEnumContactDirectInfo
{
  const MtGeomConvex *pHitCheckConvex;
  MtObject *pCallbackOwner;
  sCollision::OBJ_FUNC_OUTSIDE pContactCallback;
  __attribute__((aligned(16))) nCollision::OBJ_FILTER_FUNC_NODE_PASSIVE pNodeFilteringCallback;
  __attribute__((aligned(16))) nCollision::OBJ_FILTER_FUNC_GEOMETRY_PASSIVE pGeometryFilteringCallback;
  __attribute__((aligned(16))) void *pUserParam;
  u32 TargetGroup;
  u32 TargetAttribute;
  u32 ContactType;
  const MtVector3 *pMoveVector;
};

struct __attribute__((aligned(8))) MtCollisionUtil::MtDataPtr32
{
  void *ptr;
  u32 param;
};

enum sCollision::Param::SKIP_TARGET : __int32
{
  SKIP_TARGET_NONE = 0x0,
  SKIP_TARGET_SBC = 0x1,
  SKIP_TARGET_BASIC_SCR = 0x2,
  SKIP_TARGET_DYNAMIC_SBC = 0x3,
  SKIP_TARGET_HEIGHT_FIELD = 0x4,
  SKIP_TARGET_NUM = 0x5,
};

enum sCollision::Param::ADJPOS_AXIS_CHECK_MODE : __int32
{
  ADJPOS_AXIS_CHECK_NONE = 0x0,
  ADJPOS_AXIS_CHECK_LINESEGMENT = 0x1,
  ADJPOS_AXIS_CHECK_MOVESPERE = 0x2,
};

enum sCollision::HIT_TARGET : __int32
{
  HIT_TARGET_ID_MOVE = 0x1,
  HIT_TARGET_ID_STOP = 0x2,
  HIT_TARGET_ID_SCR = 0x4,
  HIT_TARGET_ID_OBJ = 0x8,
  HIT_TARGET_ID_STOPONLY = 0xE,
  HIT_TARGET_ID_MOVEONLY = 0xD,
  HIT_TARGET_ID_ALL = 0xF,
};

struct __cppobj sCollision::cSbcArrayBP::cDBVTMaster : MtObject
{
  nCollision::cScrCommonFilter mScrFilter;
  cDynamicBVHCollision mDBVTStopSbc;
  cDynamicBVHCollision mDBVTMoveAllSbc;
  cDynamicBVHCollision mDBVTStopAllSbc;
  cDynamicBVHCollision mDBVTStopSbcParts;
  cDynamicBVHCollision mDBVTMoveSbcParts;
};

struct __cppobj sCollision::cSbcArrayBP::cDBVTMaster::MyDTI : MtDTI
{
};

enum nCollision::cScrCollisionMoveMatrix::MOVING_SCR_PARAM : __int32
{
  MOVING_SCR_ID_NONE = 0x0,
  MOVING_SCR_ID_NONE_REGIST = 0x1,
  MOVING_SCR_ID_NONE_UNREGIST = 0x2,
  MOVING_SCR_ID_NUM_ADD_REGIST = 0x3,
  MOVING_SCR_ID_NUM_SUB_UNREGIST = 0x4,
  MOVING_SCR_ID_NUM_ADD_NOREGIST = 0x5,
  MOVING_SCR_ID_NUM_SUB_NOUNREGIST = 0x6,
  MOVING_SCR_ID_NOT_ACTIVE = 0x7,
};

struct __attribute__((aligned(16))) sCollision::SbcLockInfoLight
{
  MtFloat3 mOffset;
  sCollision::SBC_HANDLE_HALF mHitSbcHandle;
  u16 mHitSbcPartsNo;
  MtQuaternion mOffsetQt;
  uScrollCollisionGeometry *mpHitBasicConvexScr;
  const uDynamicSbc *mpHitDynamicSbc;
  u16 mHitBasicConvexScrGeomIndex;
  u16 mHitDynamicSbcBvhID;
  u16 mHitDynamicSbcTriIndex;
  bool mFlgEnable;
};

struct __cppobj sCollision::ScrCollisionInfoGetAreaPoly : sCollision::ScrCollisionInfo
{
  sCollision::GetTriangleInfo *TriArrayInfo;
  MtTriangle *TriArray;
  u32 ArraySize;
  u32 NextSetId;
  bool FlgCullingEnable;
  __attribute__((aligned(8))) MtVector3 CullingNormal;
  f32 CullingArea;
  __attribute__((aligned(16))) MtGeomOBB ObbForCaseAABB;
};

struct __cppobj sCollision::ScrCollisionInfoGetAreaPoly::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) sCollision::ScrCollisionInfoPreTraverse : sCollision::ScrCollisionInfo
{
  sCollision::PreTraverseInfo *pTraverseInfo;
  u32 TraverseInfoNum;
};

struct __cppobj sCollision::ScrCollisionInfoPreTraverse::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(16))) sCollision::ScrCollisionInfoFind4 : sCollision::ScrCollisionInfo
{
  MtCollisionUtil::MtSoaVector3 lsDir4;
  MtCollisionUtil::MtSoaVector3 lsDirN4;
  MtCollisionUtil::MtSoaVector1 lsLen4;
  MtCollisionUtil::MtSoaVector1 NearestToi4;
  sCollision::TriangleInfo *aTriangleInfo;
};

struct __cppobj sCollision::ScrCollisionInfoFind4::MyDTI : MtDTI
{
};

enum sCollision::INFO_WORK_USE_ID : __int32
{
  WORK_ID_LS_VEC_DIR_ORG = 0x0,
  WORK_ID_LS_VEC_DIR_TRANS = 0x1,
  WORK_ID_LS_VEC_DIR_NORMALIZE_ORG = 0x2,
  WORK_ID_LS_VEC_DIR_NORMALIZE_TRANS = 0x3,
  WORK_ID_LS_VEC_DIR_LEN_ORG = 0x4,
  WORK_ID_LS_VEC_DIR_LEN_TRANS = 0x5,
  WORK_ID_LS_VEC_USE_DIR = 0x0,
  WORK_ID_LS_VEC_USE_DIR_NORMALIZE = 0x1,
  WORK_ID_LS_VEC_USE_DIR_LEN = 0x2,
  WORK_ID_SPHERE_VEC_MOVEDPOS = 0x0,
  WORK_ID_SPHERE_VEC_FIXOFFSET_AABB_MIN = 0x1,
  WORK_ID_SPHERE_VEC_FIXOFFSET_AABB_MAX = 0x2,
  WORK_ID_SPHERE_VEC_R4 = 0x3,
  SCR_INFO_WORK_BUF_NUM = 0x6,
};

struct __cppobj MtGeomLineSegment4 : MtGeometry
{
  __attribute__((aligned(8))) MtLineSegment4 mLineSegment4;
};

struct __cppobj MtGeomLineSegment4::MyDTI : MtDTI
{
};

struct __cppobj rGeometry2Group::MyDTI : MtDTI
{
};

typedef u32 (*sCollision::CONTACT_CALLBACK_ENUM)(MtObject *, MtGeometry *, sCollision::TraverseInfo *);

typedef bool (*sCollision::ENUMNODECONTACTCOMMON_CALLBACK)(MtObject *, sCollision::TraverseInfo *, sCollision::SbcInfo *, const MtGeomConvex *, sCollision::ScrCollisionInfoBase *, uScrollCollisionGeometry *, u32);

enum sCollision::DEBUG_DISP_TYPE : __int32
{
  DEBUG_DISP_INTERSECT = 0x0,
  DEBUG_DISP_FIND_INTERSECTION = 0x1,
  DEBUG_DISP_CAST_CONVEX = 0x2,
  DEBUG_DISP_ADJUST_POSITION = 0x3,
  DEBUG_DISP_ADJUST_CONVEX = 0x4,
  DEBUG_DISP_GET_AREA_POLYGON = 0x5,
  DEBUG_DISP_CORRECT_TRAVERSE = 0x6,
  DEBUG_DISP_ORIGINAL_COLLISION = 0x7,
  DEBUG_DISP_NUM = 0x8,
};

enum sCollision::UPDATE_SPD_ADJPOS_RET_ID : __int32
{
  UPDATE_SPD_ADJPOS_RET_ID_CONTINUE = 0x0,
  UPDATE_SPD_ADJPOS_RET_ID_END = 0x1,
  UPDATE_SPD_ADJPOS_RET_ID_END_UNDO = 0x2,
  UPDATE_SPD_ADJPOS_RET_ID_END_UNDO_Y = 0x3,
  UPDATE_SPD_ADJPOS_RET_ID_CONTINUE_UNDO = 0x4,
  UPDATE_SPD_ADJPOS_RET_ID_NEXT_END = 0x5,
};

struct MtCollisionEpa<MtOBB,MtTriangle>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<MtOBB,MtTriangle>
{
  const MtOBB *mpConvexA;
  const MtTriangle *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

enum sCollision::GEOM_BUF_ID : __int32
{
  GEOM_BUF_ID_ENUMCONTACTPOLYGON_CORE = 0x0,
  GEOM_BUF_ID_RAY_WITH_CONVEX = 0x1,
  GEOM_BUF_ID_TEMP = 0x1,
  GEOM_BUF_ID_GET_AREA_POLYGONS = 0x2,
  GEOM_BUF_ID_OBJ_CONTACT_MAIN = 0x3,
  GEOM_BUF_ID_OBJ_CONTACT_TARGET = 0x4,
  GEOM_BUF_ID_ENUMPARTSCONTACT = 0x5,
  GEOM_BUF_ID_NUM = 0x6,
};

enum rCollision::ADJACENT_TYPE : __int32
{
  ADJACENT_TYPE_NONE = 0x0,
  ADJACENT_TYPE_ENABLE_FLAT = 0x1,
  ADJACENT_TYPE_ENABLE_CONVEX = 0x2,
  ADJACENT_TYPE_ENABLE_CONCAVE = 0x4,
};

struct __cppobj MtGeomRayY : MtGeometry
{
  __attribute__((aligned(8))) MtRayY mRayY;
};

struct __cppobj MtGeomRayY::MyDTI : MtDTI
{
};

enum sCollision::$FAF2E8F02068F65F977D2AEACBE484F2 : __int32
{
  ORIGINAL_SCR_FIND_WORKVEC_SPEED_ORIGINAL_NORMALIZE = 0x0,
  ORIGINAL_SCR_FIND_WORKVEC_SPEED_NORMALIZE = 0x1,
};

enum sCollision::LEAF_CONTACTBIT : __int32
{
  LEAF_CONTACTBIT_NONE = 0x0,
  LEAF_CONTACTBIT_ONE = 0x1,
  LEAF_CONTACTBIT_TWO = 0x2,
  LEAF_CONTACTBIT_ALL = 0x3,
  LEAF_CONTACTBIT_DUMMY = 0xFFFFFFFF,
};

enum cBVHCollision::TraverseStack::EREGIST_NODE_ID : __int32
{
  eNODE_ID_COMMON = 0x0,
  eNODE_ID_NUM = 0x1,
};

enum cBVHCollision::$F328E38BCBECC01080EEFF9D6848E550 : __int32
{
  CHILD_ID_LEFT = 0x0,
  CHILD_ID_RIGHT = 0x1,
  CHILD_ID_NUM = 0x2,
  CHILD_ID_OPT_LEFT_L = 0x0,
  CHILD_ID_OPT_LEFT_R = 0x1,
  CHILD_ID_OPT_RIGHT_L = 0x2,
  CHILD_ID_OPT_RIGHT_R = 0x3,
  CHILD_ID_OPT_NUM = 0x4,
};

typedef sce::Vectormath::Simd::Aos::Vector4 cSoundEffect::SoundVector;

struct _sce_vectormath_const1_epu32<2147483648>
{
  __int8 gap0[1];
};

union __attribute__((aligned(16))) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

union __attribute__((aligned(8))) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

union __attribute__((aligned(16))) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

struct __m128d
{
  double m128d_f64[2];
};

union __attribute__((aligned(32))) __m256
{
  float m256_f32[8];
};

union __attribute__((aligned(32))) __m256d
{
  double m256d_f64[4];
};

union __attribute__((aligned(32))) __m256i
{
  __int8 m256i_i8[32];
  __int16 m256i_i16[16];
  __int32 m256i_i32[8];
  __int64 m256i_i64[4];
  unsigned __int8 m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned __int32 m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

union __attribute__((aligned(64))) __m512
{
  float m512_f32[16];
};

union __attribute__((aligned(64))) __m512d
{
  double m512d_f64[8];
};

union __attribute__((aligned(64))) __m512i
{
  __int8 m512i_i8[64];
  __int16 m512i_i16[32];
  __int32 m512i_i32[16];
  __int64 m512i_i64[8];
  unsigned __int8 m512i_u8[64];
  unsigned __int16 m512i_u16[32];
  unsigned __int32 m512i_u32[16];
  unsigned __int64 m512i_u64[8];
};

typedef __m128i __m128i_0;

enum cSoundMultiBandEQ::EQUnit : __int32
{
  LOW_0 = 0x0,
  MIDLOW = 0x1,
  MIDHIGH = 0x2,
  HIGH_0 = 0x3,
};

enum nSound::Channel_7ch : __int32
{
  Channel_7ch_L = 0x0,
  Channel_7ch_R = 0x1,
  Channel_7ch_C = 0x2,
  Channel_7ch_Ls = 0x3,
  Channel_7ch_Rs = 0x4,
  Channel_7ch_Le = 0x5,
  Channel_7ch_Re = 0x6,
  Channel_7ch_Max = 0x7,
};

enum nSound::Channel_5ch : __int32
{
  Channel_5ch_L = 0x0,
  Channel_5ch_R = 0x1,
  Channel_5ch_C = 0x2,
  Channel_5ch_Ls = 0x3,
  Channel_5ch_Rs = 0x4,
  Channel_5ch_Max = 0x5,
};

enum nSound::Channel_4ch : __int32
{
  Channel_4ch_L = 0x0,
  Channel_4ch_R = 0x1,
  Channel_4ch_Ls = 0x2,
  Channel_4ch_Rs = 0x3,
  Channel_4ch_Max = 0x4,
};

enum cSoundMeterRms::SamplesRMS : __int32
{
  SamplesRMS_10 = 0x100,
  SamplesRMS_100 = 0xA00,
  SamplesRMS_300 = 0x1E00,
};

enum MtNetSession::$DCA138E13A626A0F181D6B5FD73638C6 : __int32
{
  SEARCH_OPTION_NONE = 0x0,
  SEARCH_OPTION_GET_BINARY = 0x1,
  SEARCH_OPTION_GET_PING = 0x2,
};

enum nNetwork::nSharedMemory2::Object::$1FDDAC3101160FDB5A73A143CE96A7EC : __int32
{
  MSG_KIND_REQ_LOCK = 0x0,
  MSG_KIND_REQ_UNLOCK = 0x1,
  MSG_KIND_REQ_READ = 0x2,
  MSG_KIND_REQ_WRITE = 0x3,
  MSG_KIND_REQ_MIRROR = 0x4,
  MSG_KIND_REQ_SUCCESS = 0x5,
  MSG_KIND_REQ_FAILD = 0x6,
  MSG_KIND_RES_READ = 0x7,
  MSG_KIND_NUM = 0x8,
};

enum nNetwork::nSharedMemory2::Object::$49F8F34589529B05E1EF2183673C3909 : __int32
{
  LOCK_ATTR_NORMAL = 0x0,
  LOCK_ATTR_LIGHT = 0x1,
  LOCK_ATTR_FORCE = 0x2,
  LOCK_ATTR_NUM = 0x3,
};

typedef std::_List_iterator<_Myt> std::_List_val<_Val_types>::iterator;

typedef std::_List_val<_Val_types>::iterator std::list<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::iterator;

typedef std::_List_unchecked_iterator<_Myt> std::_List_val<_Val_types>::_Unchecked_iterator;

typedef std::_List_val<_Val_types>::_Unchecked_iterator std::list<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Unchecked_iterator;

typedef std::_List_const_iterator<_Myt> std::_List_val<_Val_types>::const_iterator;

typedef std::_List_val<_Val_types>::const_iterator std::list<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::const_iterator;

typedef std::_List_val<_Val_types>::size_type std::list<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::size_type;

typedef std::_List_node<value_type,_Voidptr> std::_Allocator_base<std::_List_node<value_type,_Voidptr> >::value_type;

typedef std::_Allocator_base<std::_List_node<value_type,_Voidptr> >::value_type std::allocator<std::_List_node<value_type,_Voidptr> >::value_type;

typedef std::allocator<std::_List_node<value_type,_Voidptr> >::value_type *std::allocator<std::_List_node<value_type,_Voidptr> >::pointer;

typedef std::allocator<std::_List_node<value_type,_Voidptr> >::pointer MtStlAllocator<std::_List_node<value_type,_Voidptr> >::pointer;

typedef MtStlAllocator<std::_List_node<value_type,_Voidptr> >::pointer std::_Get_pointer_type<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::type;

typedef std::_Get_pointer_type<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::type std::allocator_traits<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::pointer;

typedef std::allocator_traits<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::pointer std::_Wrap_alloc<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::pointer;

typedef std::_Wrap_alloc<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::pointer std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Nodeptr;

typedef std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Nodeptr std::_List_alloc<false,std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > >::_Nodeptr;

typedef std::_List_alloc<false,std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > >::_Nodeptr std::_List_buy<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Nodeptr;

typedef std::_List_buy<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Nodeptr std::list<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Nodeptr;

typedef std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0> std::_List_val<_Val_types>::_Unchecked_const_iterator;

typedef std::_List_val<_Val_types>::_Unchecked_const_iterator std::list<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Unchecked_const_iterator;

typedef MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Alloc;

typedef std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Alloc std::_List_alloc<false,std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > >::_Alloc;

typedef std::_Wrap_alloc<MtStlAllocator<std::_List_node<value_type,_Voidptr> > > std::_Wrap_alloc<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::other;

typedef std::_Wrap_alloc<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::other std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Alnod_type;

typedef std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> >::_Alnod_type std::_List_alloc<false,std::_List_base_types<nNetwork::nSharedMemory2::Object::ReqLock,MtStlAllocator<nNetwork::nSharedMemory2::Object::ReqLock> > >::_Alty;

typedef std::_List_val<_Val_types>::_Nodeptr *std::_List_val<_Val_types>::_Nodepref;

typedef nNetwork::nSharedMemory2::Object::ReqLock std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::value_type;

typedef std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::value_type *std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::reference;

typedef std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::reference std::_List_val<_Val_types>::reference;

typedef const std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::value_type *std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::const_reference;

typedef std::_Simple_types<nNetwork::nSharedMemory2::Object::ReqLock>::const_reference std::_List_val<_Val_types>::const_reference;

typedef size_t std::allocator<std::_List_node<value_type,_Voidptr> >::size_type;

typedef std::allocator<std::_List_node<value_type,_Voidptr> >::size_type MtStlAllocator<std::_List_node<value_type,_Voidptr> >::size_type;

typedef MtStlAllocator<std::_List_node<value_type,_Voidptr> >::size_type std::_Get_size_type<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::type;

typedef std::_Get_size_type<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::type std::allocator_traits<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::size_type;

typedef std::allocator_traits<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::size_type std::_Wrap_alloc<MtStlAllocator<std::_List_node<value_type,_Voidptr> > >::size_type;

typedef std::_List_val<_Val_types>::_Nodeptr std::_List_iterator<_Myt>::_Nodeptr;

typedef std::_List_val<_Val_types>::reference std::_List_iterator<_Myt>::reference;

typedef std::_List_iterator<_Myt> std::_List_iterator<_Myt>::_Myiter;

typedef std::_List_val<_Val_types>::_Nodeptr std::_List_const_iterator<_Myt>::_Nodeptr;

typedef std::_List_val<_Val_types>::const_reference std::_List_const_iterator<_Myt>::reference;

typedef std::_List_const_iterator<_Myt> std::_List_const_iterator<_Myt>::_Myiter;

typedef std::_List_val<_Val_types>::_Nodeptr std::_List_unchecked_iterator<_Myt>::_Nodeptr;

struct std::remove_reference<const nNetwork::nSharedMemory2::Object::ReqLock &>
{
  __int8 gap0[1];
};

typedef const nNetwork::nSharedMemory2::Object::ReqLock std::remove_reference<const nNetwork::nSharedMemory2::Object::ReqLock &>::type;

struct std::remove_reference<std::_List_node<value_type,_Voidptr> *&>
{
  __int8 gap0[1];
};

typedef std::_List_node<value_type,_Voidptr> *std::remove_reference<std::_List_node<value_type,_Voidptr> *&>::type;

enum nNetwork::Storage::$0FF56B036BC15F9FF03CDE562772B76F : __int32
{
  STATE_CLOSED_0 = 0x0,
  STATE_OPEN_0 = 0x1,
  STATE_WRITE_0 = 0x2,
  STATE_READ_0 = 0x3,
  STATE_LIST = 0x4,
  STATE_UNLINK_0 = 0x5,
  STATE_NUM_4 = 0x6,
};

struct __cppobj rSoundStreamSourcePackage::PackageFile : rSoundSource::SoundFile
{
  u32 mLength;
  u32 mOffset;
};

struct __cppobj rSoundStreamSourcePackage::PackageFile::MyDTI : MtDTI
{
};

struct rSoundStreamSourcePackage::HEADER
{
  u32 tag;
  u32 ver;
  u32 sourceNum;
  u32 padding;
};

struct rSoundStreamSourcePackage::OFFSET_TABLE
{
  u32 filePathOffset;
  u32 sourceOffset;
  u32 filePathLength;
  u32 sourceLength;
};

enum uGrass::CURVE_MODE : __int32
{
  CM_DEFAULT = 0x0,
  CM_TRIANGLE = 0x1,
};

enum rGrass::GRASSTYPE : __int32
{
  GT_QUAD = 0x0,
  GT_CHAIN = 0x1,
  GT_MAX = 0x2,
};

struct __cppobj __attribute__((aligned(16))) cNodeParam<MtTriangle> : MtObject
{
  MtTriangle *mpData;
  MtAABB mAABB;
  u8 mMode;
};

struct cTree<MtTriangle>
{
  int (**_vptr$cTree)(void);
  u32 mParamNum;
  cTree<MtTriangle>::cNode *mpRoot;
  MtArray mParams;
};

struct cTree<MtTriangle>::cNode
{
  int (**_vptr$cNode)(void);
  cNodeParam<MtTriangle> *mpParam;
  cTree<MtTriangle>::cNode *mpRight;
  cTree<MtTriangle>::cNode *mpLeft;
};

struct cOperator<MtTriangle>;

enum nEffect::LVC_TYPE : __int32
{
  LVC_TYPE_NONE = 0x0,
  LVC_TYPE_COLOR = 0x1,
  LVC_TYPE_ALPHA = 0x2,
  LVC_TYPE_NUM = 0x3,
};

enum nEffect::END_TYPE : __int32
{
  END_TYPE_FINISH = 0x0,
  END_TYPE_KILL = 0x1,
  END_TYPE_KEEP_HOLD_OFF = 0x2,
  END_TYPE_NONE = 0x3,
  END_TYPE_NUM = 0x4,
};

enum uEffect2D::STATUS : __int32
{
  STATUS_INIT_0 = 0x1,
  STATUS_SLEEP_0 = 0x2,
  STATUS_SCHEDULER_0 = 0x4,
  STATUS_EVENT_0 = 0x8,
  STATUS_RESTART_0 = 0x10,
  STATUS_FINISH_0 = 0x20,
  STATUS_TIMER_CONTROL_0 = 0x100,
  STATUS_WORLD_POS = 0x200,
  STATUS_NO_RESOURCE_0 = 0x1000,
  STATUS_MALLOC_ERROR_0 = 0x2000,
  STATUS_IMPROPER_RESOURCE_0 = 0x4000,
  STATUS_ERROR_1 = 0x7000,
};

enum cParticle2DGenerator::GEN_STATUS : __int32
{
  GEN_STATUS_MOVE = 0x1,
  GEN_STATUS_DRAW = 0x2,
  GEN_STATUS_PARTICLE_MOVE = 0x4,
  GEN_STATUS_KEYFRAME_SET_NUM = 0x10,
  GEN_STATUS_KEYFRAME_RANGE = 0x20,
  GEN_STATUS_FINISH = 0x8000,
  GEN_STATUS_ACTIVE = 0x7,
  GEN_STATUS_KEYFRAME = 0x30,
};

enum rEffect2D::UNIT_OPTION_FLAG : __int32
{
  UNIT_OPTION_FLAG_CULLING = 0x1,
  UNIT_OPTION_FLAG_DRAW_VIEW_0 = 0x2,
  UNIT_OPTION_FLAG_COLOR_CONTROL_0 = 0x4,
  UNIT_OPTION_FLAG_CULLING_NEAR_CLIP = 0x400,
  UNIT_OPTION_FLAG_CULLING_FAR_CLIP = 0x800,
};

enum rEffect2D::RT_NM_CONVERT : __int32
{
  RT_NM_CONVERT_NONE = 0x0,
  RT_NM_CONVERT_HM_TO_NM = 0x1,
  RT_NM_CONVERT_HM_TO_PM = 0x2,
  RT_NM_CONVERT_RHM_TO_NM = 0x3,
  RT_NM_CONVERT_RHM_TO_PM = 0x4,
  RT_NM_CONVERT_BM_TO_NM = 0x5,
};

enum rEffect2D::LINE_TYPE : __int32
{
  LINE_TYPE_FOLLOW_0 = 0x0,
  LINE_TYPE_FIX_0 = 0x1,
  LINE_TYPE_LENGTH_0 = 0x2,
  LINE_TYPE_NUM_0 = 0x3,
};

struct __cppobj uEffectEmitter : cUnit
{
  bool mEmitFlag;
  bool mEventMode;
  bool mSyncUpdateMode;
  bool mTimerControlMode;
  bool mUGInvalidMode;
  bool mEffectTrans;
  bool mChainResetFlag;
  bool mShowMatrix;
  u32 mControlFlag;
  unsigned __int32 mKillNo : 16;
  unsigned __int32 mEffectMoveLine : 16;
  rEffectList *mpEffectList;
  u32 mGroupFlag;
  u32 mMaterialFlag;
  uCoord *mpParent;
  uCamera *mpCamera;
  unsigned __int32 mParentConstType : 8;
  unsigned __int32 mCameraConstType : 8;
  unsigned __int32 mEffectDrawMode : 8;
  unsigned __int32 mEffectEmitter0827 : 8;
  uEffect *mpEffect;
  f32 mShowSize;
  s32 mParentNo;
  unsigned __int32 mOrder : 8;
  unsigned __int32 mAxisType : 8;
  unsigned __int32 mRelationType : 8;
  unsigned __int32 mEndType : 8;
  unsigned __int32 mLoopFrame : 16;
  unsigned __int32 mLifeFrame : 16;
  unsigned __int32 mWaitFrame : 16;
  unsigned __int32 mChildLoopFrame : 16;
  unsigned __int32 mChildLifeFrame : 16;
  unsigned __int32 mChildWaitFrame : 16;
  f32 mPlaySpeed;
  u32 mTimer;
  f32 mParticleScale;
  __attribute__((aligned(16))) MtVector3 mParticle3DScale;
  MtVector3 mGeneratorScale;
  MtVector3 mPos;
  MtVector3 mOfs;
  MtQuaternion mQuat;
  MtVector3 mDir;
};

struct __cppobj uEffectEmitter::MyDTI : MtDTI
{
};

enum uEffectEmitter::PARENT_CONST_TYPE : __int32
{
  PARENT_CONST_TYPE_RELATE = 0x0,
  PARENT_CONST_TYPE_MAT = 0x1,
  PARENT_CONST_TYPE_POS = 0x2,
};

enum uEffectEmitter::CAMERA_CONST_TYPE : __int32
{
  CAMERA_CONST_TYPE_NONE = 0x0,
  CAMERA_CONST_TYPE_ROT_XZ = 0x1,
  CAMERA_CONST_TYPE_FULL = 0x2,
};

enum uEffectEmitter::CONTROL_FLAG : __int32
{
  CONTROL_FLAG_FINISH = 0x1,
  CONTROL_FLAG_CHAIN_RESET = 0x2,
  CONTROL_FLAG_TRANS = 0x4,
  CONTROL_FLAG_TRANS_MODE = 0x8,
  CONTROL_FLAG_PARENT_NO = 0x10,
  CONTROL_FLAG_CHILD_LOOP_FRAME = 0x20,
  CONTROL_FLAG_CHILD_LIFE_FRAME = 0x40,
  CONTROL_FLAG_CHILD_WAIT_FRAME = 0x80,
  CONTROL_FLAG_PLAY_SPEED = 0x100,
  CONTROL_FLAG_TIMER = 0x200,
  CONTROL_FLAG_PARTICLE_SCALE = 0x400,
  CONTROL_FLAG_GENERATOR_SCALE = 0x800,
  CONTROL_FLAG_MATRIX = 0x1000,
};

struct nEffect::FilterOrder::Element
{
  s32 mEntryNo;
  u32 mPriority;
  u32 mRemainderFrame;
  s32 mOrder;
  u32 mSubPriority[3];
  f32 mTransparency;
};

struct nEffect::FilterOrder
{
  nEffect::FilterOrder::Element mElement[4];
};

enum uSimpleEffect::DRAW_TYPE : __int32
{
  DRAW_TYPE_BILLBOARD_0 = 0x0,
  DRAW_TYPE_BILLBOARD_CENTER = 0x1,
  DRAW_TYPE_POLYGON_0 = 0x2,
  DRAW_TYPE_POLYGON_FIX = 0x3,
  DRAW_TYPE_SIZE_BILLBOARD_0 = 0x4,
  DRAW_TYPE_SIZE_BILLBOARD_CENTER = 0x5,
  DRAW_TYPE_CULLING_OFFSET = 0x6,
  DRAW_TYPE_CULLING_BILLBOARD_0 = 0x6,
  DRAW_TYPE_CULLING_BILLBOARD_CENTER = 0x7,
  DRAW_TYPE_CULLING_POLYGON_0 = 0x8,
  DRAW_TYPE_CULLING_POLYGON_FIX = 0x9,
  DRAW_TYPE_CULLING_SIZE_BILLBOARD_0 = 0xA,
  DRAW_TYPE_CULLING_SIZE_BILLBOARD_CENTER = 0xB,
  DRAW_TYPE_NUM = 0xC,
};

struct MtCollisionUtil::MtU32_U16Two::$F7CDF1700236BD5B9C7599AE273F9A56::$33351A7B52E3D0D58D8F30A5E0AB200C
{
  u16 high;
  u16 low;
};

union MtCollisionUtil::MtU32_U16Two::$F7CDF1700236BD5B9C7599AE273F9A56
{
  MtCollisionUtil::MtU32_U16Two::$F7CDF1700236BD5B9C7599AE273F9A56::$33351A7B52E3D0D58D8F30A5E0AB200C _anon_0;
  u32 param;
};

struct MtCollisionUtil::MtU32_U16Two
{
  MtCollisionUtil::MtU32_U16Two::$F7CDF1700236BD5B9C7599AE273F9A56 _anon_0;
};

struct __cppobj nCollision::cScrGeometryParam : MtObject
{
  __attribute__((aligned(16))) rCollision::MaterialInfo mScrMaterialInfo;
};

struct __cppobj nCollision::cScrGeometryParam::MyDTI : MtDTI
{
};

struct __cppobj nCollision::cScrGeometryGroupParam : MtObject
{
  nCollision::cScrCommonFilter mScrCommonFilter;
};

struct __cppobj nCollision::cScrGeometryGroupParam::MyDTI : MtDTI
{
};

struct __cppobj rGeometry3::MyDTI : MtDTI
{
};

struct __cppobj uScrollCollisionGeometryGroupModel : uScrollCollision
{
  rGeometry2Group *mpRGeometryGroup;
  uGeometry2Group *mpGeometryGroupUnit_Inside;
  MtCollisionUtil::MtArrayEx mGeometryUnitArray;
  bool mFlgOwnerRegist;
  uModel *mpOwnerModel;
};

struct __cppobj uGeometry2Base : cUnit
{
};

struct __cppobj __attribute__((aligned(8))) nCollisionUtil::cOwnerSystem : MtObject
{
  MtObject *mpOwner;
  bool mFlgRegistedOwner;
  bool mFlgOwnerIsUnit;
};

struct __cppobj MtDtiSelecter : MtObject
{
  const MtDTI *mpUseDTI;
};

struct __cppobj MtCollisionUtil::MtDtiSelecterIntermediate : MtDtiSelecter
{
};

struct __cppobj MtCollisionUtil::MtDtiSelecter : MtCollisionUtil::MtDtiSelecterIntermediate
{
};

struct __cppobj uGeometry2Group : uGeometry2Base
{
  nCollisionUtil::cOwnerSystem mOwnerSystem;
  MtCollisionUtil::MtArrayEx mGeometryGroupArray;
  rGeometry2Group *mpRGeometryGroup;
  MtCollisionUtil::MtDtiSelecter mGeometryDTI;
  JOBHANDLE *mpDelayJobHandle;
  bool mFlgMultiThread;
  u32 mMultiThreadGroupNumMin;
};

struct __cppobj uScrollCollisionGeometryGroupModel::MyDTI : MtDTI
{
};

struct __cppobj MtCollisionUtil::MtDtiSelecter::MyDTI : MtDTI
{
};

struct __cppobj MtCollisionUtil::MtDtiSelecterIntermediate::MyDTI : MtDTI
{
};

struct __cppobj uGeometry2Group::MyDTI : MtDTI
{
};

struct __cppobj uGeometry2Base::MyDTI : MtDTI
{
};

struct __cppobj nCollisionUtil::cOwnerSystem::MyDTI : MtDTI
{
};

struct __cppobj MtDtiSelecter::MyDTI : MtDTI
{
};

struct __cppobj uGeometry2 : uGeometry2Base
{
  nCollisionUtil::cOwnerSystem mOwnerSystem;
  rGeometry2::cGeometryArray mGeometryArray;
  rGeometry2 *mpRGeometry2;
  uGeometry2Group *mpGeometryGroupUnit;
};

struct __cppobj uGeometry2::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) uScrollCollisionGeometryModel : uScrollCollision
{
  rGeometry2 *mpRGeometry;
  uGeometry2 *mpGeometryUnit_Inside;
  uScrollCollisionGeometry *mpScrGeometryUnit_Outside;
  bool mFlgOwnerRegist;
  uModel *mpOwnerModel;
  bool mFlgEnableSbcLockTarget;
  uScrollCollisionGeometryGroupModel *mpParentGeometryGroup;
  bool mFlgGroupMode;
};

struct __cppobj uScrollCollisionGeometryModel::MyDTI : MtDTI
{
};

struct __cppobj uScrollCollisionSbc : uScrollCollision
{
  uModel *mpOwner;
  rCollision *mpRSbc;
  sCollision::SBC_HANDLE mSbcHandle;
  __attribute__((aligned(16))) MtVector3 mConnectOffset;
  MtVector3 mBeforeOwnerPos;
  MtQuaternion mBeforeOwnerQt;
  MtMatrix mBeforeOwnerWorldMatrix;
  bool mFlgHandleRegistByOutside;
  bool mFlgEnableOwner;
  bool mFlgBeforeOwnerMove;
  bool mFlgOwnerSetPosOK;
  bool mFlgOwnerSetAngleQuatOK;
  bool mFlgBeforeResetset;
  bool mFlgBeforeActive;
  bool mFlgConnectModelJoint;
  bool mFlgConnectModelJointIndex;
  u32 mConnectModelJointIndex;
  u32 mConnectModelJointNo;
  u32 mConnectOffsetMode;
  bool mFlgConnectModelJointNo;
  bool mFlgUseWorldMatrix;
  bool mFlgUseWorldMatrixEraseScale;
  bool mFlgEnableActiveLink;
  u32 mMoveTargetLimitMode;
  u32 mMoveTargetPartsIndex;
  u32 mMoveTargetPartsID;
  bool mFlgNextForceUpdate;
  bool mFlgNextForceResetset;
};

struct __cppobj uScrollCollisionSbc::MyDTI : MtDTI
{
};

enum uScrollCollisionSbc::JOINT_CONNECT_OFFSET_MODE : __int32
{
  JOINT_CONNECT_OFFSET_NONE = 0x0,
  JOINT_CONNECT_OFFSET_ADD = 0x1,
  JOINT_CONNECT_OFFSET_ROTATE_ADD = 0x2,
};

enum uScrollCollisionSbc::MODE_MOVE_TARGET : __int32
{
  MODE_ALL = 0x0,
  MODE_TARGET_PARTS_INDEX_ONLY = 0x1,
  MODE_TARGET_PARTS_ID_ONLY = 0x2,
};

typedef void (*uGeometry2Collider::CALLBACK_COLLIDER_SETUP)(MtObject *, sCollision::Node *);

typedef void (*uGeometry2Collider::CALLBACK_COLLIDER_MOVE)(MtObject *, sCollision::Node *);

struct __cppobj __attribute__((packed)) __attribute__((aligned(16))) uGeometry2Collider : uGeometry2Base
{
  uModel *mpOwner;
  uGeometry2Collider::CALLBACK_COLLIDER_SETUP mpCallbackSetup;
  _BYTE gap50[8];
  uGeometry2Collider::CALLBACK_COLLIDER_MOVE mpCallbackMove;
  _BYTE gap60[8];
  uGeometry2 *mpAttachGeometry;
  sCollision::Node mColliderNode;
  cColliderNodeParam *mpRegistNodeParam;
  MtArray mHitNodeArrayArray;
  bool mFlgForceRegistActive;
  bool mFlgForceRegistPassive;
  bool mFlgUseResourceType;
  __attribute__((aligned(2))) u32 mDefaultType;
  bool mFlgUseResourceAttribute;
  __attribute__((aligned(4))) u32 mDefaultAttribute;
  bool mFlgUseResourceActiveUseFunctionID;
  __attribute__((aligned(4))) u32 mDefaultActiveUseFunctionID;
};

struct __cppobj __attribute__((aligned(8))) cColliderNodeParam : nCollision::cAllocaterIntermediate
{
  u32 mColliderType;
  bool mFlgUseActive;
  bool mFlgUsePassive;
  bool mFlgUsePush;
  u32 mGroup;
  u32 mAttribute;
  u32 mActiveUseFunctionID;
  MtObject *mpUserDataPtr;
  bool mFlgAutoDeleteUserDataPtr;
};

struct __cppobj uGeometry2Collider::MyDTI : MtDTI
{
};

struct __cppobj uGeometry2Collider::cContactInfo : MtObject
{
  sCollision::Node *mpHitActiveNode;
  sCollision::Node *mpHitPassiveNode;
  u32 mHitActiveNodeGeometryIndex;
  u32 mHitPassiveNodeGeometryIndex;
  MtContact mContactResult;
};

struct __cppobj uGeometry2Collider::cContactInfo::MyDTI : MtDTI
{
};

struct __cppobj uGeometry2Collider::cNodeGeometryInfo : cUnit
{
  nCollision::cGeometryExpansion *mpRegistGeometry;
  cColliderGeometryParam *mpRegistGeometryParam;
};

struct __cppobj __attribute__((aligned(8))) cColliderGeometryParam : nCollision::cAllocaterIntermediate
{
  u32 mAttribute;
};

struct __cppobj uGeometry2Collider::cNodeGeometryInfo::MyDTI : MtDTI
{
};

struct __cppobj cColliderNodeParam::MyDTI : MtDTI
{
};

struct __cppobj cColliderGeometryParam::MyDTI : MtDTI
{
};

struct __cppobj uGeometry2GroupCollider : uGeometry2Base
{
  nCollisionUtil::cOwnerSystem mOwnerSystem;
  uGeometry2Collider::CALLBACK_COLLIDER_SETUP mpCallbackSetup;
  _BYTE gap60[8];
  uGeometry2Collider::CALLBACK_COLLIDER_MOVE mpCallbackMove;
  _BYTE gap70[8];
  uGeometry2Group *mpGeometryGroupUnit;
  bool mFlgRegistCollider;
  MtCollisionUtil::MtArrayEx mNodeArray;
  MtContact mPushContactResult;
  MtContact mPushContactResultBefore;
  u32 mPushContactResultBeforeSaveFrmNum;
  f32 mPushPercent;
  __attribute__((aligned(16))) MtVector3 mPushVector;
};

struct __cppobj uGeometry2GroupCollider::MyDTI : MtDTI
{
};

struct __cppobj uGeometry3 : cUnit
{
  rGeometry3 *mpRGeometry;
  __attribute__((aligned(16))) nCollision::cGeometryJointGroup mGeometryGroup;
  sCollision::Node *mpColliderNode;
  u32 mUseGroupID;
  u32 mUseGroupIndex;
  bool mFlgUseGroupID;
  u32 mUserPtrUseMode;
};

struct __cppobj uGeometry3::MyDTI : MtDTI
{
};

enum uGeometry3::$7B877C8CE306B3D268EF4075F6E59794 : __int32
{
  USER_PTR_DEFAULT = 0x0,
  USER_PTR_NOACCESS = 0x1,
  USER_PTR_FREESPACE_OBJECT = 0x2,
};

typedef bool (*cMetaSetPropertyData::getProperty::getter)(const cMetaSetPropertyData *, u32);

typedef void (*cMetaSetPropertyData::getProperty::setter)(cMetaSetPropertyData *, bool, u32);

typedef bool (*$<52838132,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52838132,1>::setter)(cMetaSetPropertyData *, bool, u32);

typedef unsigned __int8 (*$<52838316,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52838316,1>::setter)(cMetaSetPropertyData *, unsigned __int8, u32);

typedef unsigned __int16 (*$<52838468,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52838468,1>::setter)(cMetaSetPropertyData *, unsigned __int16, u32);

typedef unsigned int (*$<52838620,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52838620,1>::setter)(cMetaSetPropertyData *, unsigned int, u32);

typedef unsigned __int64 (*$<52838772,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52838772,1>::setter)(cMetaSetPropertyData *, unsigned __int64, u32);

typedef char (*$<52838924,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52838924,1>::setter)(cMetaSetPropertyData *, char, u32);

typedef __int16 (*$<52839076,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52839076,1>::setter)(cMetaSetPropertyData *, __int16, u32);

typedef int (*$<52839228,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52839228,1>::setter)(cMetaSetPropertyData *, int, u32);

typedef __int64 (*$<52839380,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52839380,1>::setter)(cMetaSetPropertyData *, __int64, u32);

typedef float (*$<52839532,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52839532,1>::setter)(cMetaSetPropertyData *, float, u32);

typedef double (*$<52839684,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52839684,1>::setter)(cMetaSetPropertyData *, double, u32);

typedef MtColor (*$<52839836,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52839836,1>::setter)(cMetaSetPropertyData *, const MtColor *, u32);

typedef MtPoint (*$<52839988,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52839988,1>::setter)(cMetaSetPropertyData *, const MtPoint *, u32);

typedef MtSize (*$<52840140,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52840140,1>::setter)(cMetaSetPropertyData *, const MtSize *, u32);

typedef MtRect (*$<52840292,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52840292,1>::setter)(cMetaSetPropertyData *, const MtRect *, u32);

typedef MtMatrix (*$<52840444,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52840444,1>::setter)(cMetaSetPropertyData *, const MtMatrix *, u32);

typedef MtVector3 (*$<52840596,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52840596,1>::setter)(cMetaSetPropertyData *, const MtVector3 *, u32);

typedef MtVector4 (*$<52840748,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52840748,1>::setter)(cMetaSetPropertyData *, const MtVector4 *, u32);

typedef MtQuaternion (*$<52840900,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52840900,1>::setter)(cMetaSetPropertyData *, const MtQuaternion *, u32);

typedef MtTime (*$<52841052,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52841052,1>::setter)(cMetaSetPropertyData *, const MtTime *, u32);

typedef MtFloat2 (*$<52841204,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52841204,1>::setter)(cMetaSetPropertyData *, const MtFloat2 *, u32);

typedef MtFloat3 (*$<52841356,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52841356,1>::setter)(cMetaSetPropertyData *, const MtFloat3 *, u32);

typedef MtFloat4 (*$<52841508,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52841508,1>::setter)(cMetaSetPropertyData *, const MtFloat4 *, u32);

typedef MtEaseCurve (*$<52841660,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52841660,1>::setter)(cMetaSetPropertyData *, const MtEaseCurve *, u32);

typedef MtLine (*$<52841812,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52841812,1>::setter)(cMetaSetPropertyData *, const MtLine *, u32);

typedef MtLineSegment (*$<52841964,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52841964,1>::setter)(cMetaSetPropertyData *, const MtLineSegment *, u32);

typedef MtRay (*$<52842116,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52842116,1>::setter)(cMetaSetPropertyData *, const MtRay *, u32);

typedef MtPlane (*$<52842268,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52842268,1>::setter)(cMetaSetPropertyData *, const MtPlane *, u32);

typedef MtSphere (*$<52842420,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52842420,1>::setter)(cMetaSetPropertyData *, const MtSphere *, u32);

typedef MtCapsule (*$<52842572,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52842572,1>::setter)(cMetaSetPropertyData *, const MtCapsule *, u32);

typedef MtAABB (*$<52842724,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52842724,1>::setter)(cMetaSetPropertyData *, const MtAABB *, u32);

typedef MtOBB (*$<52842876,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52842876,1>::setter)(cMetaSetPropertyData *, const MtOBB *, u32);

typedef MtCylinder (*$<52843028,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52843028,1>::setter)(cMetaSetPropertyData *, const MtCylinder *, u32);

typedef MtTriangle (*$<52843180,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52843180,1>::setter)(cMetaSetPropertyData *, const MtTriangle *, u32);

typedef MtCone (*$<52843332,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52843332,1>::setter)(cMetaSetPropertyData *, const MtCone *, u32);

typedef MtTorus (*$<52843484,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52843484,1>::setter)(cMetaSetPropertyData *, const MtTorus *, u32);

typedef MtEllipsoid (*$<52843636,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52843636,1>::setter)(cMetaSetPropertyData *, const MtEllipsoid *, u32);

typedef MtRange (*$<52843788,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52843788,1>::setter)(cMetaSetPropertyData *, const MtRange *, u32);

typedef MtRangeF (*$<52843940,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52843940,1>::setter)(cMetaSetPropertyData *, const MtRangeF *, u32);

typedef MtRangeU16 (*$<52844092,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52844092,1>::setter)(cMetaSetPropertyData *, const MtRangeU16 *, u32);

typedef MtHermiteCurve (*$<52844244,1>::getter)(const cMetaSetPropertyData *, u32);

typedef void (*$<52844244,1>::setter)(cMetaSetPropertyData *, const MtHermiteCurve *, u32);

typedef std::_Tree_node<value_type,_Voidptr>_3 std::_Tree_simple_types<value_type>::_Node_3;

typedef std::_Tree_simple_types<value_type>::_Node_3 *std::_Tree_simple_types<value_type>::_Nodeptr_3;

typedef std::_Tree_simple_types<value_type>::_Nodeptr_3 std::_Tree_val<_Val_types>::_Nodeptr_3;

struct __cppobj std::_Tree_val<_Val_types>_7 : std::_Container_base
{
  std::_Tree_val<_Val_types>::_Nodeptr_3 _Myhead;
  std::_Tree_val<_Val_types>::size_type_3 _Mysize;
};

struct __cppobj std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >_0 : std::_Tree_val<_Val_types>_7
{
};

struct __cppobj std::_Tree_buy<value_type,allocator_type>_6 : std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >_0
{
};

struct __cppobj std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0 : std::_Tree_buy<value_type,allocator_type>_6
{
};

struct __cppobj std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0 : std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0
{
};

struct __cppobj std::set<MtString,std::less<MtString>,MtStlAllocator<MtString> >_0 : std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0
{
};

struct __cppobj MtStlSet<MtString,MtStlAllocator<MtString> >_0 : std::set<MtString,std::less<MtString>,MtStlAllocator<MtString> >_0
{
};

typedef MtStlSet<MtString,MtStlAllocator<MtString> >_0 cRemoteProcedure::DGroupList_0;

struct __cppobj cRemoteProcedure_0 : MtObject
{
  cRemoteProcedure::DGroupList_0 mRpcGroupList;
  bool mValid;
  bool mKill;
  MOVE_LINE mCurrentParallelLineLocal;
  MOVE_LINE mParallelLine;
  u32 mLastUpdateIndex;
  bool mIsParallelLocal;
  RPC_ID mID;
  MtString mGroup;
  MtCriticalSection mCS;
  cRemoteProcedure::PROCESS_CALLBACK mpCallback;
  _BYTE gap50[8];
  MtObject *mpParent;
};

struct __cppobj cRemoteProcedure_0::MyDTI : MtDTI
{
};

typedef bool (*IRemoteProcess::RemoteProcedureCall<ReceiverClassType,cRemoteProcedureAsync::MsgMTFN_Async>::DRpcProc)(cRemoteProcedureAsync *, cRemoteProcedureAsync::MsgMTFN_Async *, s32);

typedef void (*IRemoteProcess::RemoteProcedureCall<ReceiverClassType,cRemoteProcedureAsync::MsgMTFN_Async>::DRpcProcVoid)(cRemoteProcedureAsync *, cRemoteProcedureAsync::MsgMTFN_Async *, s32);

union __attribute__((aligned(16))) IRemoteProcess::RemoteProcedureCall<ReceiverClassType,cRemoteProcedureAsync::MsgMTFN_Async>::$2390E2E6A263F468C0B0FDF0BE9287DD
{
  IRemoteProcess::RemoteProcedureCall<ReceiverClassType,cRemoteProcedureAsync::MsgMTFN_Async>::DRpcProc mFunc;
  IRemoteProcess::RemoteProcedureCall<ReceiverClassType,cRemoteProcedureAsync::MsgMTFN_Async>::DRpcProcVoid mVoidFunc;
};

struct IRemoteProcess::RemoteProcedureCall<ReceiverClassType,cRemoteProcedureAsync::MsgMTFN_Async>
{
  IRemoteProcess::RemoteProcedureCall<ReceiverClassType,cRemoteProcedureAsync::MsgMTFN_Async>::$2390E2E6A263F468C0B0FDF0BE9287DD _anon_0;
  bool mIsVoid;
  cRemoteProcedureAsync *mpObj;
};

struct __cppobj __attribute__((aligned(4))) cRemoteProcedureAsync : cRemoteProcedure_0
{
  u32 mCheck;
  f32 mIntervalTime;
  f32 mUpdateTime;
  bool mAutoCheck;
  bool mIsActive;
};

struct __cppobj __attribute__((aligned(8))) RpcTypeSet : cRemoteCall
{
};

struct __cppobj __attribute__((aligned(8))) cRemoteProcedureAsync::MsgMTFN_Async : RpcTypeSet
{
};

typedef std::pair<iterator,bool>_2 std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::_Pairib;

typedef std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::_Pairib std::set<MtString,std::less<MtString>,MtStlAllocator<MtString> >_0::_Pairib;

typedef std::_Tree_val<_Val_types>::_Nodeptr_3 std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr_3;

struct __cppobj std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_3 : std::_Iterator012<std::bidirectional_iterator_tag,value_type,difference_type,const_pointer,const_reference,std::_Iterator_base0>
{
  std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>::_Nodeptr_3 _Ptr;
};

struct __cppobj std::_Tree_const_iterator<_Myt>_3 : std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_3
{
};

struct __attribute__((aligned(8))) std::_Pair_base<std::_Tree_const_iterator<_Myt>,bool>_0
{
  std::_Tree_const_iterator<_Myt>_3 first;
  bool second;
};

struct __cppobj std::pair<iterator,bool>_2 : std::_Pair_base<std::_Tree_const_iterator<_Myt>,bool>_0
{
};

typedef std::_Simple_types<MtString>::value_type std::_Tree_val<_Val_types>_7::value_type;

typedef std::_Tree_val<_Val_types>_7::value_type std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::value_type;

typedef std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::value_type std::set<MtString,std::less<MtString>,MtStlAllocator<MtString> >_0::value_type;

typedef std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::key_compare std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::key_compare;

typedef std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::key_compare std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::key_compare;

typedef MtStlAllocator<MtString> std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::allocator_type;

typedef std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::allocator_type std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::allocator_type;

typedef std::_Tree_comp<false,std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::allocator_type std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::allocator_type;

typedef std::_Tree_const_iterator<_Myt>_3 std::_If<true,const_iterator,iterator>::type_1;

typedef std::_If<true,const_iterator,iterator>::type_1 std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::iterator;

typedef std::_Tree_val<_Val_types>::size_type_3 std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::size_type;

typedef std::_Tree_const_iterator<_Myt>_3 std::_Tree_val<_Val_types>_7::const_iterator;

typedef std::_Tree_val<_Val_types>_7::const_iterator std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::const_iterator;

typedef std::_Tree_base_types<MtString,MtStlAllocator<MtString> >::_Nodeptr std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >_0::_Nodeptr;

typedef std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >_0::_Nodeptr std::_Tree_buy<value_type,allocator_type>_6::_Nodeptr;

typedef std::_Tree_buy<value_type,allocator_type>_6::_Nodeptr std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::_Nodeptr;

typedef std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false>::key_type std::_Tree<std::_Tset_traits<MtString,std::less<MtString>,MtStlAllocator<MtString>,false> >_0::key_type;

typedef MtStlAllocator<MtString> std::_Tree_base_types<MtString,MtStlAllocator<MtString> >::_Alloc;

typedef std::_Tree_base_types<MtString,MtStlAllocator<MtString> >::_Alloc std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >_0::_Alloc;

typedef std::_Tree_base_types<MtString,MtStlAllocator<MtString> >::_Alnod_type std::_Tree_alloc<false,std::_Tree_base_types<MtString,MtStlAllocator<MtString> > >_0::_Alty;

typedef std::_Tree_val<_Val_types>::_Nodeptr_3 *std::_Tree_val<_Val_types>_7::_Nodepref;

typedef std::_Simple_types<MtString>::reference std::_Tree_val<_Val_types>_7::reference;

typedef std::_Tree_val<_Val_types>::_Nodeptr_3 std::_Tree_const_iterator<_Myt>_3::_Nodeptr;

typedef std::_Tree_const_iterator<_Myt>_3 std::_Tree_const_iterator<_Myt>_3::_Myiter;

typedef std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_3 std::_Tree_unchecked_const_iterator<std::_Tree_val<_Val_types>,_Iterator_base>_3::_Myiter;

struct std::initializer_list<value_type>_5
{
  const MtString *_First;
  const MtString *_Last;
};

typedef std::_Tree_const_iterator<_Myt>_3 std::remove_reference<std::_Tree_const_iterator<_Myt> >::type_1;

typedef std::_Tree_const_iterator<_Myt>_3 std::remove_reference<std::_Tree_const_iterator<_Myt> &>::type_1;

typedef std::_Tree_node<value_type,_Voidptr>_3 *std::remove_reference<std::_Tree_node<value_type,_Voidptr> *&>::type_3;

typedef sRemoteProcedure::SNode_0 std::_Simple_types<value_type>::value_type_11;

typedef std::_Simple_types<value_type>::value_type_11 *std::_Simple_types<value_type>::pointer_11;

typedef std::_Simple_types<value_type>::pointer_11 std::_Vector_val<_Val_types>::pointer_8;

struct __cppobj std::_Vector_val<_Val_types>_7 : std::_Container_base
{
  std::_Vector_val<_Val_types>::pointer_8 _Myfirst;
  std::_Vector_val<_Val_types>::pointer_8 _Mylast;
  std::_Vector_val<_Val_types>::pointer_8 _Myend;
};

struct __cppobj std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >_0 : std::_Vector_val<_Val_types>_7
{
};

struct __cppobj std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >_0 : std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >_0
{
};

struct __attribute__((aligned(8))) sRemoteProcedure::SNode_0
{
  cRemoteProcedure_0 *mpObj;
  u32 mNextEmpty;
};

typedef std::_Vector_val<_Val_types>::pointer_8 std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >_0::pointer;

typedef std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::_Alloc std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >_0::_Alloc;

typedef std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >::_Alty std::_Vector_alloc<false,std::_Vec_base_types<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> > >_0::_Alty;

typedef sRemoteProcedure::SNode_0 std::_Allocator_base<sRemoteProcedure::SNode>::value_type_1;

typedef std::_Allocator_base<sRemoteProcedure::SNode>::value_type_1 std::allocator<sRemoteProcedure::SNode>::value_type_1;

typedef std::allocator<sRemoteProcedure::SNode>::value_type_1 *std::allocator<sRemoteProcedure::SNode>::pointer_1;

typedef std::allocator<sRemoteProcedure::SNode>::pointer_1 MtStlAllocator<sRemoteProcedure::SNode>::pointer_1;

typedef MtStlAllocator<sRemoteProcedure::SNode>::pointer_1 std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >::type_1;

typedef std::_Get_pointer_type<MtStlAllocator<sRemoteProcedure::SNode> >::type_1 std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >::pointer_1;

typedef std::allocator_traits<MtStlAllocator<sRemoteProcedure::SNode> >::pointer_1 std::_Wrap_alloc<_Alloc>_2::pointer_1;

struct __cppobj cRemoteProcedureAsync::MyDTI : MtDTI
{
};

struct __cppobj cRemoteProcedureAsync::MsgMTFN_Async::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) RpcTypeGet : cRemoteCall
{
};

struct __cppobj MtStlVector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >_0 : std::vector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >_0
{
};

typedef MtStlVector<sRemoteProcedure::SNode,MtStlAllocator<sRemoteProcedure::SNode> >_0 sRemoteProcedure::DObjList_0;

struct sRemoteProcedure::SParallelNode_0
{
  sRemoteProcedure::DObjList_0 mObjList;
  u32 mNextEmptyIndex;
  sRemoteProcedure::DObjIndexMap mObjMap;
};

struct __attribute__((aligned(8))) cUnitPtrHolder
{
  cUnitPtrBase *mpHead;
  cUnitPtrBase *mpTail;
  MtCriticalSection mBufferCS;
  cUnitPtrBase *mpThreadLocalHead[32];
  MtCriticalSection *mpThreadLocalCS[32];
  u32 mThreadLocalIndex;
};

struct cUnitPtrBase
{
  int (**_vptr$cUnitPtrBase)(void);
  cUnitPtrBase *mpNext;
  cUnitPtrBase *mpPrev;
};

enum cAITask::TASK_STATUS : __int32
{
  TASK_ST_IDLE = 0x0,
  TASK_ST_LAUNCH = 0x1,
  TASK_ST_WORKING = 0x2,
  TASK_ST_DONE = 0x3,
  TASK_ST_FAILED = 0x4,
};

enum cAITask::BG_JOB_TYPE : __int32
{
  BG_JOB_LOOP = 0x0,
  BG_JOB_DELAY_JOB_WATCH = 0x1,
};

enum cAITaskJobPrim::TYPE : __int32
{
  TYPE_JOB = 0x0,
  TYPE_STOP_JOB = 0x1,
};

typedef void (*$<53270867,1>::CB_FUNC)(MtObject *);

enum cPrim::SpriteAttr : __int32
{
  WRITE_NO_COLOR = 0x0,
  WRITE_RGBA = 0x1,
  WRITE_RGB = 0x2,
};

enum cGridCollision::CELL_MODE : __int32
{
  CELLMODE_U32 = 0x0,
  CELLMODE_U16 = 0x1,
  CELLMODE_NONE = 0x2,
};

struct cGridCollision::TraverseCompatibileInfo
{
  MtObject *pObject;
  nCollision::TRAVERSE_CALLBACK pCallbackFunc;
  _BYTE gap10[8];
  size_t SendParamU32;
};

struct cGridCollision::TraverseCallbackInfo
{
  MtObject *pObject;
  cGridCollision::TRAVERSE_CALLBACK pCallbackFunc;
  _BYTE gap10[8];
  size_t UserParam;
  u32 LeafID;
  size_t SystemParam;
};

struct __cppobj __attribute__((aligned(8))) cZoneListenerEx : cZoneListener
{
  MtProperty mPropMyPosition;
  const nZone::cLayoutElement **mppLayoutElementArray;
  u32 mLayoutElementArrayNum;
  u32 mLayoutElementArrayMax;
  bool mFlgAutoExpandBuffer;
};

struct __cppobj cZoneListenerEx::MyDTI : MtDTI
{
};

struct __cppobj cGUIFontFilterShadow : cGUIFontFilter
{
  _BYTE gapD[3];
  unsigned __int32 mDistance : 12;
  unsigned __int32 mRotation : 10;
  unsigned __int32 padding : 10;
  MtFloat2 mPosition;
  MtColor mColor;
};

struct __cppobj cGUIFontFilterShadow::MyDTI : MtDTI
{
};

struct __cppobj cGUIFontFilterBorder : cGUIFontFilter
{
  _BYTE gapD[3];
  unsigned __int32 mType : 4;
  __int32 mDistance : 12;
  unsigned __int32 padding : 16;
  MtColor mColor;
};

struct __cppobj cGUIFontFilterBorder::MyDTI : MtDTI
{
};

enum cGUIFontFilterBorder::TYPE : __int32
{
  TYPE_0 = 0x0,
  TYPE_1 = 0x1,
  TYPE_8WAY_GOTHIC = 0x2,
  TYPE_8WAY_ROMAN = 0x3,
  TYPE_NUM_3 = 0x4,
};

struct __cppobj __attribute__((aligned(8))) cGUIFontFilterShading : cGUIFontFilter
{
  MtColor mColor;
};

struct __cppobj cGUIFontFilterShading::MyDTI : MtDTI
{
};

struct __cppobj cGUIFontFilterGradationOverlay : cGUIFontFilter
{
  rTexture *mpTexture;
};

struct __cppobj cGUIFontFilterGradationOverlay::MyDTI : MtDTI
{
};

struct __cppobj cGUIFontFilterTextureBlend : cGUIFontFilter
{
  _BYTE gapD[3];
  unsigned __int32 mType : 4;
  unsigned __int32 padding : 28;
  rTexture *mpTexture;
};

struct __cppobj cGUIFontFilterTextureBlend::MyDTI : MtDTI
{
};

enum cGUIFontFilterTextureBlend::TYPE : __int32
{
  TYPE_LINE_3 = 0x0,
  TYPE_TEXTURE = 0x1,
  TYPE_NUM_4 = 0x2,
};

enum rEffectList::FILTER_OPTION_FLAG : __int32
{
  FILTER_OPTION_FLAG_RATE_COLOR = 0x1,
  FILTER_OPTION_FLAG_RATE_ALPHA = 0x2,
  FILTER_OPTION_FLAG_RATE_WIDTH = 0x4,
};

enum rEffectList::LIGHT_ATTR : __int32
{
  LIGHT_ATTR_SH = 0x2,
  LIGHT_ATTR_PERPIXEL = 0x8,
  LIGHT_ATTR_SIMPLE = 0x10,
  LIGHT_ATTR_ALL = 0x1A,
};

struct __attribute__((aligned(8))) cGridNormal
{
  MtVector3 *mpGridPos;
  MtVector3 *mpGridNorm;
  MtVector3 *mpMeshNorm;
  unsigned __int32 mGridNumX : 8;
  unsigned __int32 mGridNumY : 8;
  unsigned __int32 mMeshNumX : 8;
  unsigned __int32 mMeshNumY : 8;
};

enum cParticle2DGenerator::GEN_RNO_TBL : __int32
{
  GEN_RNO_INIT = 0x0,
  GEN_RNO_WAIT = 0x1,
  GEN_RNO_READY = 0x2,
  GEN_RNO_SET = 0x3,
  GEN_RNO_INTERVAL = 0x4,
  GEN_RNO_FINISH = 0x5,
};

enum rEffect2D::GENERATOR_TYPE : __int32
{
  GENERATOR_TYPE_SINGLE_0 = 0x0,
  GENERATOR_TYPE_LOOP_0 = 0x1,
  GENERATOR_TYPE_NUM_0 = 0x2,
};

enum rEffect2D::PARTICLE_TYPE : __int32
{
  PARTICLE_TYPE_SPRITE = 0x0,
  PARTICLE_TYPE_POLYLINE_0 = 0x1,
  PARTICLE_TYPE_TEXLINE_0 = 0x2,
  PARTICLE_TYPE_LINE_0 = 0x3,
  PARTICLE_TYPE_MODEL_0 = 0x4,
  PARTICLE_TYPE_NUM_0 = 0x5,
};

enum rEffect2D::LIFE_TYPE : __int32
{
  LIFE_TYPE_NONE_0 = 0x0,
  LIFE_TYPE_FRAME_ALPHA_0 = 0x1,
  LIFE_TYPE_FRAME_COLOR_0 = 0x2,
  LIFE_TYPE_KEYFRAME_ALPHA_0 = 0x3,
  LIFE_TYPE_KEYFRAME_COLOR_0 = 0x4,
  LIFE_TYPE_HIDEFRAME_ALPHA_0 = 0x5,
  LIFE_TYPE_HIDEFRAME_COLOR_0 = 0x6,
  LIFE_TYPE_CURVEFRAME_ALPHA_0 = 0x7,
  LIFE_TYPE_CURVEFRAME_COLOR_0 = 0x8,
  LIFE_TYPE_NUM_0 = 0x9,
};

enum rEffect2D::MOVE_TYPE : __int32
{
  MOVE_TYPE_NONE_0 = 0x0,
  MOVE_TYPE_ADD_0 = 0x1,
  MOVE_TYPE_MUL_0 = 0x2,
  MOVE_TYPE_CUSTOM_0 = 0x3,
  MOVE_TYPE_NUM_0 = 0x4,
};

enum rEffect2D::RANGE_OPTION_FLAG : __int32
{
  RANGE_OPTION_FLAG_EACH_FRAME_0 = 0x1,
};

enum rEffect2D::PARTICLE_OPTION_FLAG : __int32
{
  PARTICLE_OPTION_FLAG_ALPHA_WRITE = 0x1,
  PARTICLE_OPTION_FLAG_ALPHA_BLUR_0 = 0x2,
  PARTICLE_OPTION_FLAG_NO_REDUCTION_0 = 0x4,
  PARTICLE_OPTION_FLAG_NO_ZTEST_0 = 0x8,
  PARTICLE_OPTION_FLAG_DISTORTION_0 = 0x10,
  PARTICLE_OPTION_FLAG_LV_CORRECTION = 0x20,
  PARTICLE_OPTION_FLAG_POINT_FILTER_0 = 0x40,
};

enum rEffect2D::RANGE_TYPE : __int32
{
  RANGE_TYPE_NONE_0 = 0x0,
  RANGE_TYPE_X_RECT = 0x1,
  RANGE_TYPE_Y_RECT = 0x2,
  RANGE_TYPE_CIRCLE = 0x3,
  RANGE_TYPE_NUM_0 = 0x4,
};

enum rEffect2D::RANGE_DIR_TYPE : __int32
{
  RANGE_DIR_TYPE_NONE_0 = 0x0,
  RANGE_DIR_TYPE_DIFFUSE_0 = 0x1,
  RANGE_DIR_TYPE_CONVERGE_0 = 0x2,
  RANGE_DIR_TYPE_COMMON_03 = 0x3,
  RANGE_DIR_TYPE_COMMON_04 = 0x4,
  RANGE_DIR_TYPE_COMMON_05 = 0x5,
  RANGE_DIR_TYPE_COMMON_06 = 0x6,
  RANGE_DIR_TYPE_COMMON_07 = 0x7,
  RANGE_DIR_TYPE_CUSTOM_08 = 0x8,
  RANGE_DIR_TYPE_CUSTOM_09 = 0x9,
  RANGE_DIR_TYPE_CUSTOM_0A = 0xA,
  RANGE_DIR_TYPE_CUSTOM_0B = 0xB,
  RANGE_DIR_TYPE_CUSTOM_0C = 0xC,
  RANGE_DIR_TYPE_CUSTOM_0D = 0xD,
  RANGE_DIR_TYPE_CUSTOM_0E = 0xE,
  RANGE_DIR_TYPE_CUSTOM_0F = 0xF,
  RANGE_DIR_TYPE_NUM_0 = 0x10,
};

enum rEffect2D::GENERATOR_OPTION_FLAG : __int32
{
  GENERATOR_OPTION_FLAG_X_REPEAT = 0x1,
  GENERATOR_OPTION_FLAG_Y_REPEAT = 0x2,
  GENERATOR_OPTION_FLAG_REPEAT = 0x3,
};

struct rEffect2D::E2D_LIFE_KEYFRAME
{
  MtRangeU16 VanishFrame;
  u32 KeyframeLifeRateParamOffset;
  u32 LKeyframe3208;
  u32 LKeyframe320c;
};

struct __cppobj rEffect2D::E2D_LIFE_HIDEFRAME : rEffect2D::E2D_LIFE_FRAME_0
{
  MtRangeU16 HideFrame;
  u32 LHideFrame3214;
  u32 LHideFrame3218;
  u32 LHideFrame321c;
};

struct rEffect2D::E2D_LIFE_CURVEFRAME
{
  nEffect::SimpleCurve LifeRateCurve;
  MtRangeU16 LifeRateFrame;
  MtRangeU16 VanishFrame;
  u32 LCurveFrame3228;
  u32 LCurveFrame322c;
};

struct __cppobj rEffect2D::E2D_MOVE_ADD : rEffect2D::E2D_MOVE_COMMON_0
{
  MtRangeF Acceleration;
  u32 MoveAdd3238;
  u32 MoveAdd323c;
};

struct __cppobj rEffect2D::E2D_MOVE_MUL : rEffect2D::E2D_MOVE_COMMON_0
{
  MtRangeF SpeedCoef;
  u32 MoveMul3238;
  u32 MoveMul323c;
};

struct __cppobj rEffect2D::E2D_PARTICLE_SPRITE : rEffect2D::E2D_PARTICLE_PRIM_COMMON_0
{
  MtRangeF ScaleX;
  MtRangeF ScaleAddX;
  MtRangeF ScaleY;
  MtRangeF ScaleAddY;
  MtRangeF Angle;
  MtRangeF AngleAdd;
  f32 AngleAddCoef;
  u32 AngleAddRandomReverse;
  u32 KeyframeScaleXYParamOffset;
  u32 KeyframeAngleParamOffset;
};

typedef rEffect2D::E2D_PARTICLE_SPRITE rEffect2D::E2D_PARTICLE_SPRITE_0;

typedef rEffect2D::E2D_LIFE_KEYFRAME rEffect2D::E2D_LIFE_KEYFRAME_0;

typedef rEffect2D::E2D_LIFE_HIDEFRAME rEffect2D::E2D_LIFE_HIDEFRAME_0;

typedef rEffect2D::E2D_LIFE_CURVEFRAME rEffect2D::E2D_LIFE_CURVEFRAME_0;

typedef rEffect2D::E2D_MOVE_ADD rEffect2D::E2D_MOVE_ADD_0;

typedef rEffect2D::E2D_MOVE_MUL rEffect2D::E2D_MOVE_MUL_0;

enum cParticle2D::PTCL_FLAG : __int32
{
  PTCL_FLAG_KILL_0 = 0x1,
  PTCL_FLAG_KEEP_HOLD_OFF_0 = 0x2,
  PTCL_FLAG_UPDATE_LIFE_0 = 0x4,
  PTCL_FLAG_CALC_DIR_0 = 0x8,
};

enum cParticle2D::PTCL_LIFE_RNO_TBL : __int32
{
  PTCL_LIFE_RNO_HIDE_0 = 0x0,
  PTCL_LIFE_RNO_APPEAR_0 = 0x1,
  PTCL_LIFE_RNO_KEEP_0 = 0x2,
  PTCL_LIFE_RNO_VANISH_0 = 0x3,
  PTCL_LIFE_RNO_FINISH_0 = 0x4,
};

enum cParticle2D::PTCL_STATUS : __int32
{
  PTCL_STATUS_UNIQUE0_0 = 0x1,
  PTCL_STATUS_UNIQUE1_0 = 0x2,
  PTCL_STATUS_UNIQUE2_0 = 0x4,
  PTCL_STATUS_UNIQUE3_0 = 0x8,
  PTCL_STATUS_CALC_SCALE_0 = 0x10,
  PTCL_STATUS_CALC_SCALE_XY = 0x20,
  PTCL_STATUS_CALC_ANGLE_0 = 0x40,
  PTCL_STATUS_CALC_LENGTH_0 = 0x80,
  PTCL_STATUS_CALC_TEX_SCRL_U_0 = 0x100,
  PTCL_STATUS_CALC_TEX_SCRL_V_0 = 0x200,
  PTCL_STATUS_CALC_UNIQUE0 = 0x400,
  PTCL_STATUS_CALC_UNIQUE1 = 0x800,
  PTCL_STATUS_CALC_ALL = 0xFF0,
  PTCL_STATUS_KEYFRAME_INTENSITY_0 = 0x1000,
  PTCL_STATUS_KEYFRAME_COLOR_0 = 0x2000,
  PTCL_STATUS_KEYFRAME_PLACE_COLOR_0 = 0x4000,
  PTCL_STATUS_KEYFRAME_PAT_NO_0 = 0x8000,
  PTCL_STATUS_KEYFRAME_SCALE_0 = 0x10000,
  PTCL_STATUS_KEYFRAME_SCALE_XY = 0x20000,
  PTCL_STATUS_KEYFRAME_ANGLE_0 = 0x40000,
  PTCL_STATUS_KEYFRAME_LENGTH_0 = 0x80000,
  PTCL_STATUS_KEYFRAME_LIFE_RATE_0 = 0x100000,
  PTCL_STATUS_KEYFRAME_MOVE_ROT = 0x200000,
  PTCL_STATUS_KEYFRAME_MOVE_SPEED = 0x400000,
  PTCL_STATUS_KEYFRAME_MOVE_GRV_SPEED = 0x800000,
  PTCL_STATUS_KEYFRAME_TEX_SCRL_U_0 = 0x1000000,
  PTCL_STATUS_KEYFRAME_TEX_SCRL_V_0 = 0x2000000,
  PTCL_STATUS_KEYFRAME_UNIQUE0_0 = 0x4000000,
  PTCL_STATUS_KEYFRAME_UNIQUE1_0 = 0x8000000,
  PTCL_STATUS_KEYFRAME_ALL = 0xFFFF000,
  PTCL_STATUS_RESERVED0 = 0x10000000,
  PTCL_STATUS_RESERVED1 = 0x20000000,
  PTCL_STATUS_RESERVED2 = 0x40000000,
  PTCL_STATUS_RESERVED3 = 0x80000000,
  PTCL_STATUS_CALC_HEAD_SIZE_0 = 0x400,
  PTCL_STATUS_CALC_PLACE_SIZE_0 = 0x800,
  PTCL_STATUS_KEYFRAME_HEAD_SIZE_0 = 0x4000000,
  PTCL_STATUS_KEYFRAME_PLACE_SIZE_0 = 0x8000000,
  PTCL_STATUS_MODEL_ANIM_INIT = 0x1,
  PTCL_STATUS_MODEL_ANIM_MOVE = 0x2,
  PTCL_STATUS_CALC_ROT_0 = 0x400,
  PTCL_STATUS_KEYFRAME_MODEL_SCALE_0 = 0x4000000,
  PTCL_STATUS_KEYFRAME_ROT_0 = 0x8000000,
};

struct cParticle2DLifeFrame
{
  unsigned __int32 mAppearFrame : 16;
  unsigned __int32 mKeepFrame : 16;
  unsigned __int32 mVanishFrame : 16;
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mKeepHoldTimer : 16;
  unsigned __int32 mLifeRno : 8;
  unsigned __int32 mKeepHoldFlag : 1;
  unsigned __int32 mLifeFrame070b : 7;
  f32 mLifeRate;
};

struct cParticle2DLifeKeyframe
{
  f32 mLifeRate;
  f32 mLifeRateKeyframeRate;
  unsigned __int32 mVanishFrame : 16;
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mLifeRno : 8;
  unsigned __int32 mLifeKeyframe080d : 8;
  unsigned __int32 mLifeKeyframe080e : 8;
  unsigned __int32 mLifeKeyframe080f : 8;
};

struct cParticle2DLifeCurveframe
{
  f32 mLifeRate;
  unsigned __int32 mLifeTimer : 16;
  unsigned __int32 mLifeRno : 8;
  unsigned __int32 mLifeCurveframe0807 : 8;
  unsigned __int32 mLifeCurveframe1608 : 16;
  unsigned __int32 mVanishFrame : 16;
  unsigned __int32 mCurveFrame : 16;
  unsigned __int32 mCurveTimer : 16;
  nEffect::SimpleCurve mLifeRateCurve;
};

struct __cppobj cParticle2DMoveNone : cParticle2DMoveCommon
{
  MtFloat2 mOfs;
};

struct __cppobj cParticle2DMoveAdd : cParticle2DMoveCommon
{
  f32 mSpeed;
  f32 mAcceleration;
  MtFloat2 mGravity;
  MtFloat2 mSpeedVec;
  MtFloat2 mAccelerationVec;
  MtFloat2 mGravitySpeed;
  f32 mRotKeyframeRate;
  f32 mSpeedKeyframeRate;
  MtFloat2 mGravitySpeedKeyframeRate;
};

struct __cppobj cParticle2DMoveMul : cParticle2DMoveCommon
{
  f32 mSpeed;
  f32 mSpeedCoef;
  MtFloat2 mGravity;
  MtFloat2 mSpeedVec;
  MtFloat2 mGravitySpeed;
  f32 mRotKeyframeRate;
  f32 mSpeedKeyframeRate;
  MtFloat2 mGravitySpeedKeyframeRate;
  u32 mMoveMul3238;
  u32 mMoveMul323c;
};

struct __cppobj cSprite2D : cAnimParticle2D
{
  f32 mScaleX[2];
  f32 mScaleY[2];
  f32 mAngle[2];
  MtColor mColor[2];
  MtFloat2 mBaseScaleXY;
  MtFloat2 mBaseScaleXYAdd;
  MtColor mBaseColor;
  f32 mAngleAdd;
  unsigned __int32 mBaseColorKeyframeRate : 16;
  unsigned __int32 mSprite16ba : 16;
  u32 mSprite32bc;
};

struct cEffectLineFix2D
{
  MtFloat2 mBaseScaleXY;
  MtFloat2 mBaseScaleXYAdd;
  f32 mBaseAngle;
  f32 mBaseAngleAdd;
  u32 mLineFix3218;
  u32 mLineFix321c;
};

struct cEffectLineLength2D
{
  f32 mBaseLength;
  f32 mBaseLengthAdd;
  f32 mBaseAngle;
  f32 mBaseAngleAdd;
};

struct nAutomation::RespawnContext
{
  MT_CHAR mApplicationPath[1025];
  u32 mAttribute;
  u8 mSharedBuffer[512];
  u8 *mpSharedBufferPtW;
  u8 *mpSharedBufferPtR;
};

struct nAutomation::Sender
{
  MT_CHAR mServerName[128];
  nAutomation::socket_t mSocket;
  MT_CHAR mRecvBuffer[1024];
  MT_CHAR mLocalName[128];
  nAutomation::Envelope::HASH mSentHash[8];
  const nAutomation::Envelope *mpEnvelope;
  MtCriticalSection mCs;
};

enum nAutomation::eScreenShotMethod : __int32
{
  SSM_NATIVE = 0x0,
  SSM_ALTERNATIVE = 0x1,
};

struct nAutomation::nExec::Job
{
  bool mCaptureOutput;
  u32 mAttributes;
  MtString mStrWorkingDirectory;
};

typedef void (*nAutomation::nExec::Job::JOB_CB)(nAutomation::nExec::Job::JOB_PARAMETER *);

enum nAutomation::nExec::Job::eCause : __int32
{
  CAUSE_START = 0x0,
  CAUSE_EXIT = 0x1,
  CAUSE_WRITE = 0x2,
};

union nAutomation::nExec::Job::JOB_PARAMETER::$F790EA3374293A56A945374533B03494
{
  const char *szString;
  s32 exit_code;
};

struct nAutomation::nExec::Job::JOB_PARAMETER
{
  nAutomation::nExec::Job::eCause cause;
  nAutomation::nExec::Job::JOB_PARAMETER::$F790EA3374293A56A945374533B03494 _anon_0;
};

typedef void (*nAutomation::nExec::Job::JOB_CB_MFUNC)(MtObject *, nAutomation::nExec::Job::JOB_PARAMETER *);

typedef void (*nAutomation::cUploader::progressRoutine)(f32, void *);

struct nAutomation::cUploader
{
  nAutomation::cUploader::progressRoutine mpProgress;
  void *mpCbParam;
  MT_CTSTR mpLocalPrefix;
  MT_CTSTR mpRemotePrefix;
};

struct nAutomation::UPLOAD_DESC
{
  MT_CHAR szBase[1024];
  MT_CHAR szExe[1024];
  MT_CHAR szPdb[1024];
  MT_CHAR szLog[1024];
  MT_CHAR szConLog[1024];
  MT_CHAR szDmp[1024];
  MT_CHAR szBmp[1024];
};

typedef t64 nAutomation::time_type;

struct nAutomation::IdentityInfo
{
  u32 sdkVersion;
  MT_CTSTR szCompilerVersion;
  MT_CHAR szExePath[256];
  MT_CHAR szExeDate[64];
  nAutomation::time_type exeDate;
};

struct nAutomation::ReferVersion
{
  u32 ship_id;
};

typedef MT_CTSTR (*$<55394788,1>::STRGETTER)(MtObject *);

typedef MT_CTSTR (*$<55394859,1>::STRGETTER)(MtObject *);

struct __cppobj nGraphComponent::Filter : nGraphComponent::Base:480
{
  MtColor mColor;
  nGraphComponent::Port mInputColor;
  nGraphComponent::Port mFunction;
};

struct __cppobj nGraphComponent::Filter::MyDTI : MtDTI
{
};

struct __cppobj nGraphComponent::Color : nGraphComponent::Base:480
{
  MtColor mColor;
  nGraphComponent::Port mInputR;
  nGraphComponent::Port mInputG;
  nGraphComponent::Port mInputB;
  nGraphComponent::Port mInputA;
  nGraphComponent::Port mOutput;
};

struct __cppobj nGraphComponent::Color::MyDTI : MtDTI
{
};

struct __cppobj nGraphComponent::Variable : nGraphComponent::Base:480
{
  MtVariable mValue;
  nGraphComponent::Port mOutput;
};

struct __cppobj nGraphComponent::Variable::MyDTI : MtDTI
{
};

struct __cppobj nGraphComponent::Add : nGraphComponent::Base:480
{
  MtVariable mValue;
  nGraphComponent::Port mInputA;
  nGraphComponent::Port mInputB;
  nGraphComponent::Port mOutput;
};

struct __cppobj nGraphComponent::Add::MyDTI : MtDTI
{
};

struct __cppobj nGraphComponent::Sub : nGraphComponent::Base:480
{
  MtVariable mValue;
  nGraphComponent::Port mInputA;
  nGraphComponent::Port mInputB;
  nGraphComponent::Port mOutput;
};

struct __cppobj nGraphComponent::Sub::MyDTI : MtDTI
{
};

struct __cppobj nGraphComponent::Mul : nGraphComponent::Base:480
{
  MtVariable mValue;
  nGraphComponent::Port mInputA;
  nGraphComponent::Port mInputB;
  nGraphComponent::Port mOutput;
};

struct __cppobj nGraphComponent::Mul::MyDTI : MtDTI
{
};

struct __cppobj nGraphComponent::Div : nGraphComponent::Base:480
{
  MtVariable mValue;
  nGraphComponent::Port mInputA;
  nGraphComponent::Port mInputB;
  nGraphComponent::Port mOutput;
};

struct __cppobj nGraphComponent::Div::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(8))) nGraphComponent::Oscillator : nGraphComponent::Base
{
  __attribute__((aligned(8))) MtOscillator mOscillator;
  nGraphComponent::Port mOutput;
};

struct __cppobj nGraphComponent::Oscillator::MyDTI : MtDTI
{
};

struct __cppobj nGraphComponent::BaseMap : nGraphComponent::Base
{
  rTexture *mpBaseMap;
  nGraphComponent::Port mInFunc;
  nGraphComponent::Port mOutFunc;
};

struct __cppobj nGraphComponent::BaseMap::MyDTI : MtDTI
{
};

enum nDraw::TBuilder : __int32
{
  TBuilder_Default = 0x0,
};

struct nGraphComponent::Filter::draw::FilterVertices
{
  MtFloat3 position;
  u32 color;
  MtFloat2 texcoord;
  MtFloat2 reserved;
};

struct nDraw::FUNCTION_INFO
{
  nDraw::FUNCTION_TYPE type;
  MT_CTSTR name;
};

struct __attribute__((aligned(8))) nDraw::OP_INFO
{
  MT_CTSTR name;
  unsigned __int32 optype : 8;
  unsigned __int32 priority : 15;
  unsigned __int32 rightleft : 1;
  unsigned __int32 linktype : 8;
};

struct __cppobj nDraw::MaterialConstant : nDraw::Material
{
};

struct __cppobj nDraw::MaterialConstant::MyDTI : MtDTI
{
};

struct __cppobj nDraw::MaterialSSS : nDraw::Material
{
  nDraw::Texture *mpDistortionTexture;
  nDraw::Texture *mpTempTexture;
  nDraw::Texture *mpDiffuseTexture[6];
  nDraw::Texture *mpLightMaskTexture;
  u32 mMapSize;
  u32 mLayerNum;
  MtVector3 mBlendWeights[6];
};

struct __cppobj nDraw::MaterialSSS::MyDTI : MtDTI
{
};

enum nDraw::TMaterialSSS : __int32
{
  TMaterialSSS_Default = 0x0,
  TMaterialSSS_Irradiance = 0x1,
  TMaterialSSS_Distortion = 0x2,
};

struct nDraw::MaterialSSS::fillMargin::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
};

struct nDraw::MaterialSSS::blurDiffuse::VERTEX
{
  MtFloat2 pos;
  MtFloat2 uv0;
};

struct __cppobj nDraw::MaterialStd : nDraw::Material
{
};

struct __cppobj nDraw::MaterialStd::MyDTI : MtDTI
{
};

struct __cppobj nDraw::MaterialStdDM : nDraw::MaterialStd
{
};

struct __cppobj nDraw::MaterialStdDM::MyDTI : MtDTI
{
};

struct __cppobj nDraw::MaterialStdEst : nDraw::MaterialStd
{
};

struct __cppobj nDraw::MaterialStdEst::MyDTI : MtDTI
{
};

struct __cppobj nDraw::MaterialStdPN : nDraw::MaterialStd
{
};

struct __cppobj nDraw::MaterialStdPN::MyDTI : MtDTI
{
};

enum nPhysics::ENABLE_TRIANGLE : __int32
{
  RESERVE = 0x0,
  ENABLE_TRIANGLE_EDGE_0 = 0x1,
  ENABLE_TRIANGLE_EDGE_2 = 0x2,
  ENABLE_TRIANGLE_VERTEX_0 = 0x3,
  ENABLE_TRIANGLE_EDGE_1 = 0x4,
  ENABLE_TRIANGLE_VERTEX_1 = 0x5,
  ENABLE_TRIANGLE_VERTEX_2 = 0x6,
  ENABLE_TRIANGLE_VERTEX_MASK = 0x68,
  ENABLE_TRIANGLE_EDGE_MASK = 0x16,
  ENABLE_TRIANGLE_MASK = 0x7E,
};

enum MtGeomTriangle::TRI_VORONOI_ID : __int32
{
  TRI_VORONOI_INTERNAL_0 = 0x0,
  TRI_VORONOI_EDGE01_0 = 0x1,
  TRI_VORONOI_EDGE20_0 = 0x2,
  TRI_VORONOI_V0_0 = 0x3,
  TRI_VORONOI_EDGE12_0 = 0x4,
  TRI_VORONOI_V1_0 = 0x5,
  TRI_VORONOI_V2_0 = 0x6,
};

struct nPhysics::ConstraintSolver
{
  __int8 gap0[1];
};

typedef void (*nPhysics::ConstraintSolver::INITIALIZE_CONTACT)(nPhysics::CONTACT_PAIR *, const nPhysics::CURRENT_RIGID_BODY_DATA *, const nPhysics::CURRENT_RIGID_BODY_DATA *, nPhysics::DELTA_VELOCITY *, nPhysics::DELTA_VELOCITY *, const nPhysics::SOLVER_CONFIG *);

typedef void (*nPhysics::ConstraintSolver::SOLVE_CONTACT)(nPhysics::CONTACT_PAIR *, nPhysics::DELTA_VELOCITY *, nPhysics::DELTA_VELOCITY *, const nPhysics::SOLVER_CONFIG *);

typedef void (*nPhysics::ConstraintSolver::INITIALIZE_CONSTRAINT)(nPhysics::CONSTRAINT *, const nPhysics::CURRENT_RIGID_BODY_DATA *, const nPhysics::CURRENT_RIGID_BODY_DATA *, nPhysics::DELTA_VELOCITY *, nPhysics::DELTA_VELOCITY *, const nPhysics::SOLVER_CONFIG *);

typedef void (*nPhysics::ConstraintSolver::CALCULATE_AXIS_AND_ERROR)(nPhysics::CONSTRAINT *, const nPhysics::RIGID_BODY_DATA *, const nPhysics::RIGID_BODY_DATA *, MtFloat4A *, MtFloat4A *);

typedef void (*nPhysics::ConstraintSolver::SOLVE_CONSTRAINT)(nPhysics::CONSTRAINT *, nPhysics::DELTA_VELOCITY *, nPhysics::DELTA_VELOCITY *, const nPhysics::SOLVER_CONFIG *);

struct nPhysics::ISLAND_FACTORY_0
{
  u32 *mIslandIndexOfRigidBody;
  u32 mNumIsland;
  u32 mIslandIndex;
  const u32 mMaxRigidBody;
  const u32 mMaxMaterial;
  u32 mForwardIslandLink[256];
  u32 mBackwardIslandLink[256];
};

enum nPhysics::Phantom::STATE : __int32
{
  STATE_AUTO_DISABLE = 0x0,
  STATE_MAX_1 = 0x1,
};

enum nPhysics::SHAPE::TYPE : __int32
{
  TYPE_UNKNOWN_3 = 0x0,
  TYPE_SPHERE_1 = 0x1,
  TYPE_CAPSULE_2 = 0x2,
  TYPE_CYLINDER_1 = 0x3,
  TYPE_OBB_1 = 0x4,
  TYPE_TRIANGLE_1 = 0x5,
  TYPE_LINE_SEGMENT_0 = 0x6,
  TYPE_MAX_2 = 0x7,
};

struct __cppobj nPhysics::Command::SET_POSITION : nPhysics::Command::BASE_COMMAND
{
};

struct __cppobj nPhysics::Command::SET_ROTATION : nPhysics::Command::BASE_COMMAND
{
};

struct __cppobj nPhysics::Command::SET_LINEAR_VELOCITY : nPhysics::Command::BASE_COMMAND
{
};

struct __cppobj nPhysics::Command::SET_ANGULAR_VELOCITY : nPhysics::Command::BASE_COMMAND
{
};

struct __cppobj nPhysics::Command::SET_POSTURE : nPhysics::Command::BASE_COMMAND
{
};

struct __cppobj nPhysics::Command::ADD_FORCE : nPhysics::Command::BASE_COMMAND
{
  MtFloat3 Force;
  f32 Time;
};

struct __cppobj nPhysics::Command::ADD_TORQUE : nPhysics::Command::BASE_COMMAND
{
  MtFloat3 Torque;
  f32 Time;
};

struct __cppobj nPhysics::Command::ADD_POSITION_FORCE : nPhysics::Command::ADD_FORCE
{
  MtFloat3 Position;
};

struct nPhysics::Sort
{
  int (**_vptr$Sort)(void);
};

struct __cppobj nPhysics::Constraint::Axis : nPhysics::Constraint::Object
{
  nPhysics::CONSTRAINT *mAxisInstance;
};

struct __cppobj nPhysics::Constraint::Axis::MyDTI : MtDTI
{
};

struct __attribute__((aligned(4))) nPhysics::Constraint::Axis::INITIALIZER
{
  MtFloat3A Position;
  f32 MinimumLength;
  MtFloat3A Axis;
  f32 MaximumLength;
  nPhysics::RigidBody *RigidBody1;
  nPhysics::RigidBody *RigidBody2;
  f32 SpringPower;
  f32 DampingPower;
  f32 SpringConstant;
  f32 FastReboundDamping;
  f32 FastBumpDamping;
  f32 SlowReboundDamping;
  f32 SlowBumpDamping;
  bool EnableSpring;
};

struct __cppobj nPhysics::Command::SET_ADDITIONAL_SPRING_POWER : nPhysics::Command::BASE_COMMAND
{
  f32 Power;
};

struct __cppobj nPhysics::Constraint::BallJoint : nPhysics::Constraint::Object
{
  nPhysics::CONSTRAINT *mBallJointInstance;
};

struct __cppobj nPhysics::Constraint::BallJoint::MyDTI : MtDTI
{
};

struct __attribute__((aligned(16))) nPhysics::Constraint::BallJoint::INITIALIZER
{
  MtFloat3A Position;
  u32 reserve;
  nPhysics::RigidBody *RigidBody[2];
  f32 SpringPower;
  f32 DampingPower;
};

struct __cppobj nPhysics::Constraint::ConeTwist : nPhysics::Constraint::BallJoint
{
  nPhysics::CONSTRAINT *mConeTwistInstance;
};

struct __cppobj nPhysics::Constraint::ConeTwist::MyDTI : MtDTI
{
};

struct nPhysics::Constraint::ConeTwist::INITIALIZER
{
  MtFloat3A Position;
  u32 reserve;
  nPhysics::RigidBody *RigidBody[2];
  f32 SpringPower;
  f32 DampingPower;
  __attribute__((aligned(16))) MtQuaternion LocalRotation[2];
  f32 SwingLimit;
  f32 MinTwistLimit;
  f32 MaxTwistLimit;
  f32 Stiffness;
};

struct __cppobj nPhysics::Constraint::Hinge : nPhysics::Constraint::BallJoint
{
  nPhysics::CONSTRAINT *mHingeInstance;
};

struct __cppobj nPhysics::Constraint::Hinge::MyDTI : MtDTI
{
};

struct __attribute__((aligned(16))) nPhysics::Constraint::Hinge::INITIALIZER
{
  MtFloat3A Position;
  u32 reserve;
  MtFloat3A Axis;
  u32 reserve1;
  nPhysics::RigidBody *RigidBody[2];
  f32 SpringPower;
  f32 DampingPower;
  f32 MinLimit;
  f32 MaxLimit;
  f32 Stiffness;
  f32 reserve2[1];
};

struct __cppobj nPhysics::Constraint::Motor : nPhysics::Constraint::Object
{
  nPhysics::CONSTRAINT *mMotorInstance;
};

struct __cppobj nPhysics::Constraint::Motor::MyDTI : MtDTI
{
};

struct __attribute__((aligned(16))) nPhysics::Constraint::Motor::INITIALIZER
{
  MtFloat3A Axis;
  f32 MaximumTorque;
  f32 MinimumTorque;
  f32 Speed;
  nPhysics::RigidBody *RigidBody1;
  nPhysics::RigidBody *RigidBody2;
};

struct __cppobj nPhysics::Command::SET_MAXIMUM_MOTOR_TORQUE : nPhysics::Command::BASE_COMMAND
{
  f32 Torque;
};

struct __cppobj nPhysics::Command::SET_MINIMUM_MOTOR_TORQUE : nPhysics::Command::BASE_COMMAND
{
  f32 Torque;
};

struct __cppobj nPhysics::Command::SET_MOTOR_SPEED : nPhysics::Command::BASE_COMMAND
{
  f32 Speed;
};

struct __cppobj nPhysics::Command::SET_MOTOR_AXIS : nPhysics::Command::BASE_COMMAND
{
  MtFloat3 Axis;
};

struct __cppobj nPhysics::Constraint::Muscle : nPhysics::Constraint::Object
{
  nPhysics::CONSTRAINT *mMuscleInstance;
};

struct __cppobj nPhysics::Constraint::Muscle::MyDTI : MtDTI
{
};

struct nPhysics::Constraint::Muscle::INITIALIZER
{
  nPhysics::RigidBody *RigidBody[2];
  f32 SpringPower;
  f32 DampingPower;
  __attribute__((aligned(16))) MtQuaternion LocalRotation[2];
  f32 MaxSwingTorque;
  f32 MaxTwistTorque;
  f32 MaxCorrectTorque;
  f32 reserve3;
};

struct __cppobj __attribute__((aligned(16))) nCollision::uPreviewModel : uModel
{
  MtObject *mpOwner;
};

struct __cppobj nCollision::uPreviewModel::MyDTI : MtDTI
{
};

struct std::remove_reference<MtMatrix *&>
{
  __int8 gap0[1];
};

typedef MtMatrix *std::remove_reference<MtMatrix *&>::type;

enum nNetwork::PacketBase::$4301E44A3EACA9757639F74A88A9F0FE : __int32
{
  HASH_TYPE_NONE = 0x0,
  HASH_TYPE_CRC32 = 0x1,
  HASH_TYPE_SHA_1 = 0x2,
};

struct nNetwork::ProtocolStandard::FHeader
{
  u16 seq;
  u16 ack;
  u8 idle;
  u8 unit;
};

struct nNetwork::ProtocolStandard::UHeader
{
  u8 flag;
  u8 length;
};

struct nNetwork::ProtocolMinimum::Buffer
{
  u8 mFlag;
  u8 mLength;
  u8 mBuffer[255];
};

struct __cppobj nNetwork::ProtocolMinimum : nNetwork::Protocol
{
  nNetwork::ProtocolMinimum::Buffer mBuffer[16];
};

struct __cppobj nNetwork::ProtocolMinimum::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::ProtocolBroadcast : nNetwork::Protocol
{
  s32 mState;
  u32 mIndex;
  u32 mParam;
  u32 mProgress;
  u32 mSendPos;
  u32 mSendSize;
  u32 mSendSequence;
  u8 *mpSendBuffer;
  u32 mSendStart;
  u32 mRecvSize;
  u32 mSrcKey;
  u8 *mpRecvBuffer;
  u32 mLastSec;
  u32 mUnrelSize;
  u8 mUnrelBuffer[448];
  u32 mRecvSequence[16];
  u32 mRecvPos[16];
  u8 mRecvAck[16][256];
};

struct __cppobj nNetwork::ProtocolBroadcast::MyDTI : MtDTI
{
};

enum nNetwork::ProtocolBroadcast::$760BFB3FB2C96012854BE1C9ABA5FF28 : __int32
{
  STATE_NONE_1 = 0x0,
  STATE_SEND = 0x1,
  STATE_RECV = 0x2,
};

struct __cppobj TStateMachine<nNetwork::nRanking::Object>::TState : cStateMachineBase::StateBase
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nRanking::Object::StateBase : TStateMachine<nNetwork::nRanking::Object>::TState
{
  u32 mRequestSeq;
};

struct __cppobj nNetwork::nRanking::Object::StateBase::MyDTI : MtDTI
{
};

enum nNetwork::nRanking::Object::StateBase::$93C27117518B5B6DE8925D56503BDBA1 : __int32
{
  STATE_GET = 0x0,
  STATE_GET_WAIT = 0x1,
};

enum nNetwork::nRanking::Object::$1F825F653E5330F52C173A111C67EFAF : __int32
{
  STATE_DEAD_1 = 0x0,
  STATE_WAIT_1 = 0x1,
  STATE_UPLOAD = 0x2,
  STATE_RANGE = 0x3,
  STATE_UNIQ_ID = 0x4,
  STATE_FRIEND_LIST = 0x5,
  STATE_ATTACH = 0x6,
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) nNetwork::nRanking::Object::StateBase:544 : TStateMachine<nNetwork::nRanking::Object>::TState
{
  u32 mRequestSeq;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nRanking::StateUpload : nNetwork::nRanking::Object::StateBase:544
{
  s32 mPhase;
  MtNetRanking::Updater *mpUpdater;
  s32 mUpdaterNum;
};

enum nNetwork::nRanking::StateUpload::$A1618724CF5CA200435948D185C6E783 : __int32
{
  PHASE_UPLOAD = 0x0,
  PHASE_UPLOAD_WAIT = 0x1,
};

struct __cppobj nNetwork::nRanking::StateGetByFriendList : nNetwork::nRanking::Object::StateBase:544
{
  s32 mPhase;
  u32 mBoardId;
  bool mSelf;
  u32 mOffset;
  u32 mMaxNum;
  MtNetUniqueId mUniqIdTbl[2001];
};

enum nNetwork::nRanking::StateGetByFriendList::$4C276703C2E973077D749CB19DDD7EA8 : __int32
{
  PHASE_GET = 0x0,
  PHASE_GET_NEXT = 0x1,
  PHASE_GET_WAIT = 0x2,
  PHASE_FRIENDLIST_WAIT = 0x3,
  PHASE_FATAL = 0x4,
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nRanking::StateGetByRange : nNetwork::nRanking::Object::StateBase:544
{
  s32 mPhase;
  u32 mBoardId;
  u32 mTop;
  u32 mOffset;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nRanking::StateGetByUniqId : nNetwork::nRanking::Object::StateBase:544
{
  s32 mPhase;
  u32 mBoardId;
  MtNetUniqueId *mpUniqIdTbl;
  s32 mSize;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nRanking::StateGetAttach : nNetwork::nRanking::Object::StateBase:544
{
  s32 mPhase;
  u32 mBoardId;
  MtNetUniqueId *mpUniqId;
  void *mpBuf;
  s32 mBufSize;
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nRanking::StateDead : nNetwork::nRanking::Object::StateBase
{
};

struct __cppobj __attribute__((aligned(8))) nNetwork::nRanking::StateWait : nNetwork::nRanking::Object::StateBase
{
};

typedef nNetwork::nRanking::Object TStateMachine<nNetwork::nRanking::Object>::Context;

typedef s32 cStateMachineBase::StateKey;

struct __cppobj MtNetCom::IFriendList : MtNetCom::INative
{
};

struct __attribute__((aligned(8))) MtNetCom::IFriendList::FriendInfo
{
  MtNetUniqueId mUniqueId;
  MT_CHAR mDisplayName[64];
  bool mIsOmittedDisplayName;
  MT_CHAR mUserName[32];
  bool mIsOmittedUserName;
};

struct __cppobj MtNetCom::CFriendList : MtObject, MtNetCom::IFriendList
{
};

typedef const MT_WCHAR *MT_CWSTR;

struct __cppobj nNetwork::RpcNetSystem_Core : cRemoteCall:96
{
  u8 mBuffer[1024];
  u32 mSize;
};

struct __cppobj nNetwork::RpcNetSystem_Core::MyDTI : MtDTI
{
};

enum nNetwork::Context::$FA8514B39F6EC371642D82753C6961B4 : __int32
{
  INVITE_NOT_ACCEPT_0 = 0x0,
  INVITE_IN_PROGRESS_0 = 0x1,
  INVITE_SUCCESS_0 = 0x2,
  INVITE_FAILURE_0 = 0x3,
};

struct __cppobj nNetwork::ScoreOptionPtr : MtObject
{
  MtNetRanking::ScoreOption *mpScoreOption;
};

struct __cppobj nNetwork::UpdaterPtr : MtObject
{
  MtNetRanking::Updater *const mpUpdater;
  nNetwork::ScoreOptionPtr mScoreOptionPtr[8];
};

struct __cppobj nNetwork::UpdaterPtr::MyDTI : MtDTI
{
};

struct __cppobj nNetwork::ScoreOptionPtr::MyDTI : MtDTI
{
};

enum nNetwork::VoiceChat::Talker::$53A5D10AF6E63D8265B124E8FF555809 : __int32
{
  TASK_INIT = 0x1,
  TASK_FINAL = 0x2,
  TASK_LOOPBACK = 0x4,
};

enum SceVoiceAppType : __int32
{
  SCE_VOICE_APPTYPE_GAME = 0x20000000,
  SCE_VOICE_APPTYPE_GAME_V2 = 0x10000000,
};

enum SceVoiceQoSAttributeId : __int32
{
  SCE_VOICE_QOS_ATTR_MIC_VOLUME = 0x0,
  SCE_VOICE_QOS_ATTR_MIC_MUTE = 0x1,
  SCE_VOICE_QOS_ATTR_SPEAKER_VOLUME = 0x2,
  SCE_VOICE_QOS_ATTR_SPEAKER_MUTE = 0x3,
  SCE_VOICE_QOS_ATTR_DESIRED_OUT_BIT_RATE = 0x4,
  SCE_VOICE_QOS_ATTR_MIC_USABLE = 0x5,
  SCE_VOICE_QOS_ATTR_SILENT_STATE = 0x6,
  SCE_VOICE_QOS_ATTR_REMOTE_MUTE = 0x7,
};

struct __cppobj nZone::ShapeInfoArea : nZone::ShapeInfoBase
{
  f32 mHeight;
  f32 mBottom;
  u32 mConcaveStatus;
  bool mFlgConvex;
  MtVector3 mVertex[4];
  MtVector3 mConcaveCrossPos;
};

struct __cppobj nZone::ShapeInfoArea::MyDTI : MtDTI
{
};

struct nZone::ShapeInfoArea::cTrianglePillar
{
  MtTriangle mBottomTriangle;
  MtVector3 mHeightOffset;
};

enum nZone::ShapeInfoArea::CONCAVE_STATUS : __int32
{
  CONCAVE_DEFAULT = 0x0,
  CONCAVE_VERTEX_ROLL_INVERSE = 0x1,
  CONCAVE_CROSS_0312 = 0x2,
  CONCAVE_CROSS_0123 = 0x3,
};

struct __cppobj __attribute__((aligned(8))) nZone::ShapeInfoAABB : nZone::ShapeInfoBase
{
  MtAABB mAABB;
  f32 mDecayY;
  f32 mDecayZ;
  bool mIsEnableExtendedDecay;
};

struct __cppobj nZone::ShapeInfoAABB::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) nZone::ShapeInfoOBB : nZone::ShapeInfoBase
{
  MtOBB mOBB;
  f32 mDecayY;
  f32 mDecayZ;
  bool mIsEnableExtendedDecay;
};

struct __cppobj nZone::ShapeInfoOBB::MyDTI : MtDTI
{
};

struct __cppobj nZone::ShapeInfoSphere : nZone::ShapeInfoBase
{
  MtSphere mSphere;
};

struct __cppobj nZone::ShapeInfoSphere::MyDTI : MtDTI
{
};

struct __cppobj nZone::ShapeInfoCapsule : nZone::ShapeInfoBase
{
  MtCapsule mCapsule;
};

struct __cppobj nZone::ShapeInfoCapsule::MyDTI : MtDTI
{
};

struct __cppobj nZone::ShapeInfoCylinder : nZone::ShapeInfoBase
{
  MtCylinder mCylinder;
};

struct __cppobj nZone::ShapeInfoCylinder::MyDTI : MtDTI
{
};

struct __cppobj nZone::ShapeInfoCone : nZone::ShapeInfoBase
{
  f32 mHeight;
  f32 mTopRadius;
  __attribute__((aligned(16))) MtVector3 mPos;
  f32 mBottomRadius;
};

struct __cppobj nZone::ShapeInfoCone::MyDTI : MtDTI
{
};

struct __cppobj nZone::ShapeInfoPoint : nZone::ShapeInfoBase
{
  MtVector3 mPos;
};

struct __cppobj nZone::ShapeInfoPoint::MyDTI : MtDTI
{
};

struct __cppobj nZone::ShapeInfoLine : nZone::ShapeInfoBase
{
  MtLineSegment mLineSegment;
};

struct __cppobj nZone::ShapeInfoLine::MyDTI : MtDTI
{
};

struct __cppobj nZone::ShapeInfoPanel : nZone::ShapeInfoBase
{
  MtVector3 mVertex[4];
};

struct __cppobj nZone::ShapeInfoPanel::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(4))) nZone::ShapeInfoGlobal : nZone::ShapeInfoBase
{
};

struct __cppobj nZone::ShapeInfoGlobal::MyDTI : MtDTI
{
};

struct __cppobj nZone::cAllocaterIntermediate : MtObject
{
};

struct __cppobj nZone::cAllocaterIntermediate::MyDTI : MtDTI
{
};

struct MtCollisionUtil::MtMinkowskiDiffBase<nZone::ShapeInfoArea::cTrianglePillar,MtGeomConvex>
{
  const nZone::ShapeInfoArea::cTrianglePillar *mpConvexA;
  const MtGeomConvex *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionUtil::MtMinkowskiDiffBase<nZone::ShapeInfoArea,MtGeomConvex>
{
  const nZone::ShapeInfoArea *mpConvexA;
  const MtGeomConvex *mpConvexB;
  MtVector3 mLastSupportA;
  MtVector3 mLastSupportB;
};

struct MtCollisionEpa<nZone::ShapeInfoArea::cTrianglePillar,MtGeomConvex>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

struct MtCollisionEpa<nZone::ShapeInfoArea,MtGeomConvex>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

enum nZone::ShapeInfoArea::getClosest::$2A49B0CF0D250F5C32B845901A6B5930 : __int32
{
  POS_CODE_Y_UP = 0x0,
  POS_CODE_Y_INNNER = 0x1,
  POS_CODE_Y_DOWN = 0x2,
};

struct __cppobj cZoneExtendObject : nZone::cAllocaterIntermediate
{
  nZone::cLayoutElement *mpOwner;
};

struct __cppobj cZoneExtendObject::MyDTI : MtDTI
{
};

struct MtCollisionSp
{
  __int8 gap0[1];
};

struct cTree<rGrass::cCluster>::cNode::getAxisZ
{
  __int8 gap0[1];
};

struct cTree<rGrass::cCluster>::cNode::getAxisY
{
  __int8 gap0[1];
};

struct cTree<rGrass::cCluster>::cNode::getAxisX
{
  __int8 gap0[1];
};

enum cTree<rGrass::cCluster>::AXIS : __int32
{
  AXIS_X_1 = 0x0,
  AXIS_Z_1 = 0x1,
  AXIS_Y_1 = 0x2,
  AXIS_NUM = 0x3,
};

enum cNodeParam<rGrass::cCluster>::MODE : __int32
{
  MODE_NONE = 0x0,
  MODE_NODE_ALLOCATOR = 0x1,
  MODE_CLASS_ALLOCATOR = 0x2,
};

struct rGrassWind::HEADER
{
  u32 magic;
  u16 version;
  u16 dummy;
};

enum rEffect2D::ResourceInfo::STATUS : __int32
{
  STATUS_TEX_CREATE_FAILED_0 = 0x1,
  STATUS_TEX0_CREATE_FAILED_0 = 0x1,
  STATUS_TEX1_CREATE_FAILED_0 = 0x2,
  STATUS_TEX2_CREATE_FAILED_0 = 0x4,
  STATUS_EAN_CREATE_FAILED_0 = 0x8,
  STATUS_MOD_CREATE_FAILED_0 = 0x10,
  STATUS_NO_EAN_CREATE_0 = 0x1000,
  STATUS_NO_MOD_CREATE_0 = 0x2000,
  STATUS_NO_TEX_CREATE_0 = 0x4000,
  STATUS_ERROR_2 = 0xFFFF,
};

enum rEffect2D::TEX : __int32
{
  TEX_BM_0 = 0x0,
  TEX_NM_0 = 0x1,
  TEX_MM_0 = 0x2,
  MAX_TEX_0 = 0x3,
};

struct rEffect2D::E2D_HEADER
{
  u32 Magic;
  u32 Version;
  u32 ParamBuffSize;
  u32 ListNum;
  f32 BaseFps;
  u32 E2DHeader3214;
  u32 E2DHeader3218;
  u32 E2DHeader321c;
};

typedef rEffect2D::E2D_HEADER rEffect2D::E2D_HEADER_0;

struct rEffectAnim::EAN_HEADER
{
  u32 Magic;
  u32 Version;
  u32 ParamBuffSize;
  unsigned __int32 SeqNum : 24;
  unsigned __int32 OptionFlag : 8;
};

typedef rEffectAnim::EAN_HEADER rEffectAnim::EAN_HEADER_0;

struct rSoundCurveSet::NATIVE_FILE_HEADER
{
  s32 Magic;
  s32 Version;
  u32 ListNum;
  u32 CurveNum;
};

struct rSoundCurveSet::Element
{
  f32 mDistance;
  f32 mValue;
};

struct rSoundSource::RIFF_CHUNK
{
  u32 tag;
  u32 size;
  u32 id;
};

struct rSoundSource::CHUNK_HEADER
{
  u32 tag;
  u32 size;
};

struct __attribute__((aligned(4))) rSoundSource::FMT_CHUNK
{
  u16 wFormatTag;
  u16 nChannels;
  u32 nSamplesPerSec;
  u32 nAvgBytesPerSec;
  u16 nBlockAlign;
  u16 wBitsPerSample;
  u16 cbSize;
};

struct rSoundSource::SAMPLELOOP
{
  u32 dwIdentifier;
  u32 dwType;
  u32 dwStart;
  u32 dwEnd;
  u32 dwFraction;
  u32 dwPlayCount;
};

struct rSoundSource::SMPL_CHUNK
{
  u32 dwManufacturer;
  u32 dwProduct;
  u32 dwSamplePeriod;
  u32 dwMIDIUnityNote;
  u32 dwMIDIPitchFraction;
  u32 dwSMPTEFormat;
  u32 dwSMPTEOffset;
  u32 cSampleLoops;
  u32 cbSmplerData;
  rSoundSource::SAMPLELOOP Loops;
};

struct rSoundSourceAT9::FACT_CHUNK
{
  u32 TotalSamples;
  u32 InputAndOverlapDelaySamples;
  u32 EncoderDelaySamples;
};

struct __cppobj rSoundSourceSeAT9 : rSoundSourceAT9
{
};

struct __cppobj rSoundSourceSeAT9::MyDTI : MtDTI
{
};

enum rSoundSpeakerSetXml::SPEAKER_SETTING : __int32
{
  SP_NONE = 0x0,
  SP_MONARAUL = 0x1,
  SP_STEREO = 0x2,
  SP_SURROUND = 0x3,
};

struct rVertices::VTS_HEADER
{
  u32 Magic;
  u32 Version;
  u32 ParamBuffSize;
  u32 VertexNum;
};

typedef rVertices::VTS_HEADER rVertices::VTS_HEADER_0;

struct __cppobj rNulls : cResource
{
  rNulls::Null *mpNulls;
  u32 mCount;
  u32 mType;
};

struct rNulls::Null
{
  MT_CHAR name[176];
  u32 param[4];
  MtFloat3x4 t3x4;
};

struct __cppobj rNulls::MyDTI : MtDTI
{
};

enum rNulls::TYPE : __int32
{
  TYPE_FLOAT4X3 = 0x0,
  TYPE_COORD_QUAT = 0x1,
  TYPE_COORD_XYZ = 0x2,
};

struct rNulls::HEADER
{
  u32 magic;
  u16 version;
  u16 num;
  u32 type;
};

typedef void (*rCollision::COPY_FUNC)(MtObject *, rCollision *, u32, const MtMatrix *);

struct __attribute__((aligned(8))) rCollision::CopyWorkData
{
  rCollision *pSource;
  const MtMatrix *pMatrix;
  MtRange TargetRange;
  rCollision::COPY_FUNC pCopyFunc;
  _BYTE gap20[8];
};

enum rGeometry2::cGeometry::ATTACH_TYPE : __int32
{
  ATTACH_TYPE_NULL_0 = 0x0,
  ATTACH_TYPE_JOINT_POS_0 = 0x1,
  ATTACH_TYPE_JOINT_LOCAL_0 = 0x2,
};

enum cSoundMeterRms::BlocksRms : __int32
{
  BlocksRms_100 = 0xB,
  BlocksRms_300 = 0x1F,
};

typedef std::_List_node<value_type,_Voidptr>_0 std::_List_simple_types<value_type>::_Node_0;

typedef std::_List_simple_types<value_type>::_Node_0 *std::_List_simple_types<value_type>::_Nodeptr_0;

typedef std::_List_simple_types<value_type>::_Nodeptr_0 std::_List_val<_Val_types>::_Nodeptr_0;

typedef size_t_0 std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::size_type;

typedef std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::size_type std::_List_val<_Val_types>::size_type_0;

struct __cppobj std::_List_val<_Val_types>_0 : std::_Container_base
{
  std::_List_val<_Val_types>::_Nodeptr_0 _Myhead;
  std::_List_val<_Val_types>::size_type_0 _Mysize;
};

struct __cppobj std::_List_alloc<false,std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *> > : std::_List_val<_Val_types>_0
{
};

struct __cppobj std::_List_buy<SNJ_BROWSER_JSFUNC_INFO *> : std::_List_alloc<false,std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *> >
{
};

struct __cppobj std::list<SNJ_BROWSER_JSFUNC_INFO *> : std::_List_buy<SNJ_BROWSER_JSFUNC_INFO *>
{
};

typedef std::_List_node<value_type,_Voidptr>_0 *std::_List_node<value_type,_Voidptr>::_Nodeptr_0;

struct std::_List_node<value_type,_Voidptr>_0
{
  std::_List_node<value_type,_Voidptr>::_Nodeptr_0 _Next;
  std::_List_node<value_type,_Voidptr>::_Nodeptr_0 _Prev;
  SNJ_BROWSER_JSFUNC_INFO *_Myval;
};

struct SNJ_BROWSER_JSFUNC_INFO
{
  char *fncnam;
  SNJ_BROWSER_JSFUNC fnc;
  int _pad0;
  void *_pad1;
};

typedef std::_List_iterator<_Myt>_0 std::_List_val<_Val_types>_0::iterator;

typedef std::_List_val<_Val_types>_0::iterator std::list<SNJ_BROWSER_JSFUNC_INFO *>::iterator;

typedef std::_List_val<_Val_types>::_Nodeptr_0 std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0>::_Nodeptr_0;

struct __cppobj std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0>_0 : std::_Iterator012<std::bidirectional_iterator_tag,value_type,difference_type,const_pointer,const_reference,std::_Iterator_base0>
{
  std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0>::_Nodeptr_0 _Ptr;
};

struct __cppobj std::_List_const_iterator<_Myt>_0 : std::_List_unchecked_const_iterator<_Myt,std::_Iterator_base0>_0
{
};

struct __cppobj std::_List_iterator<_Myt>_0 : std::_List_const_iterator<_Myt>_0
{
};

typedef std::_List_node<value_type,_Voidptr>_0 std::_Allocator_base<std::_List_node<value_type,_Voidptr> >::value_type_0;

typedef std::_Allocator_base<std::_List_node<value_type,_Voidptr> >::value_type_0 std::allocator<std::_List_node<value_type,_Voidptr> >::value_type_0;

typedef std::allocator<std::_List_node<value_type,_Voidptr> >::value_type_0 std::allocator_traits<std::allocator<std::_List_node<value_type,_Voidptr> > >::value_type;

typedef std::allocator_traits<std::allocator<std::_List_node<value_type,_Voidptr> > >::value_type *std::allocator_traits<std::allocator<std::_List_node<value_type,_Voidptr> > >::pointer;

typedef std::allocator_traits<std::allocator<std::_List_node<value_type,_Voidptr> > >::pointer std::_Wrap_alloc<std::allocator<std::_List_node<value_type,_Voidptr> > >::pointer;

typedef std::_Wrap_alloc<std::allocator<std::_List_node<value_type,_Voidptr> > >::pointer std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *>::_Nodeptr;

typedef std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *>::_Nodeptr std::_List_alloc<false,std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *> >::_Nodeptr;

typedef std::_List_alloc<false,std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *> >::_Nodeptr std::_List_buy<SNJ_BROWSER_JSFUNC_INFO *>::_Nodeptr;

typedef std::_List_buy<SNJ_BROWSER_JSFUNC_INFO *>::_Nodeptr std::list<SNJ_BROWSER_JSFUNC_INFO *>::_Nodeptr;

typedef std::_Wrap_alloc<std::allocator<std::_List_node<value_type,_Voidptr> > > std::_Wrap_alloc<std::allocator<std::_List_node<value_type,_Voidptr> > >::other;

typedef std::_Wrap_alloc<std::allocator<std::_List_node<value_type,_Voidptr> > >::other std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *>::_Alnod_type;

typedef std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *>::_Alnod_type std::_List_alloc<false,std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *> >::_Alty;

struct __cppobj std::_Wrap_alloc<std::allocator<std::_List_node<value_type,_Voidptr> > > : std::allocator<std::_List_node<value_type,_Voidptr> >
{
};

typedef std::_List_val<_Val_types>::_Nodeptr_0 *std::_List_val<_Val_types>_0::_Nodepref;

typedef SNJ_BROWSER_JSFUNC_INFO *std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::value_type;

typedef std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::value_type *std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::reference;

typedef std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::reference std::_List_val<_Val_types>_0::reference;

typedef const std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::value_type *std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::const_reference;

typedef std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>::const_reference std::_List_val<_Val_types>_0::const_reference;

struct std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>
{
  __int8 gap0[1];
};

struct __cppobj std::_List_simple_types<value_type>_0 : std::_Simple_types<SNJ_BROWSER_JSFUNC_INFO *>
{
};

struct std::_List_base_types<SNJ_BROWSER_JSFUNC_INFO *>
{
  __int8 gap0[1];
};

struct std::_Allocator_base<SNJ_BROWSER_JSFUNC_INFO *>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<SNJ_BROWSER_JSFUNC_INFO *> : std::_Allocator_base<SNJ_BROWSER_JSFUNC_INFO *>
{
};

typedef size_t_0 std::allocator_traits<std::allocator<std::_List_node<value_type,_Voidptr> > >::size_type;

typedef std::allocator_traits<std::allocator<std::_List_node<value_type,_Voidptr> > >::size_type std::_Wrap_alloc<std::allocator<std::_List_node<value_type,_Voidptr> > >::size_type;

typedef std::allocator<std::_List_node<value_type,_Voidptr> >::value_type_0 *std::allocator<std::_List_node<value_type,_Voidptr> >::pointer_0;

struct std::allocator_traits<std::allocator<std::_List_node<value_type,_Voidptr> > >
{
  __int8 gap0[1];
};

typedef std::allocator<std::_List_node<value_type,_Voidptr> > std::allocator_traits<std::allocator<std::_List_node<value_type,_Voidptr> > >::_Alloc;

typedef std::_List_val<_Val_types>::_Nodeptr_0 std::_List_iterator<_Myt>_0::_Nodeptr;

typedef std::_List_val<_Val_types>_0::reference std::_List_iterator<_Myt>_0::reference;

typedef std::_List_iterator<_Myt>_0 std::_List_iterator<_Myt>_0::_Myiter;

typedef std::_List_val<_Val_types>::_Nodeptr_0 std::_List_const_iterator<_Myt>_0::_Nodeptr;

typedef std::_List_val<_Val_types>_0::const_reference std::_List_const_iterator<_Myt>_0::reference;

typedef std::_List_const_iterator<_Myt>_0 std::_List_const_iterator<_Myt>_0::_Myiter;

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::value_type **std::_Deque_simple_types<value_type>::_Mapptr;

typedef std::_Deque_simple_types<value_type>::_Mapptr std::_Deque_val<_Val_types>::_Mapptr;

typedef size_t_0 std::_Simple_types<SNJ_BROWSER_EVENT>::size_type;

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::size_type std::_Deque_val<_Val_types>::size_type;

struct __cppobj std::_Deque_val<_Val_types> : std::_Container_base12
{
  std::_Deque_val<_Val_types>::_Mapptr _Map;
  std::_Deque_val<_Val_types>::size_type _Mapsize;
  std::_Deque_val<_Val_types>::size_type _Myoff;
  std::_Deque_val<_Val_types>::size_type _Mysize;
};

struct __cppobj std::_Deque_alloc<false,std::_Deque_base_types<SNJ_BROWSER_EVENT> > : std::_Deque_val<_Val_types>
{
};

struct __cppobj std::deque<SNJ_BROWSER_EVENT> : std::_Deque_alloc<false,std::_Deque_base_types<SNJ_BROWSER_EVENT> >
{
};

struct std::_Simple_types<SNJ_BROWSER_EVENT>::value_type
{
  int typ;
  int x;
  int y;
  int keycod;
  int keychr;
  int mod;
  int arg;
};

typedef std::_Deque_iterator<_Myt> std::_Deque_val<_Val_types>::iterator;

typedef std::_Deque_val<_Val_types>::iterator std::deque<SNJ_BROWSER_EVENT>::iterator;

typedef std::_Deque_val<_Val_types>::size_type std::_Deque_const_iterator<_Myt>::size_type;

struct __cppobj std::_Deque_const_iterator<_Myt> : std::_Iterator_base12
{
  std::_Deque_const_iterator<_Myt>::size_type _Myoff;
};

struct __cppobj std::_Deque_iterator<_Myt> : std::_Deque_const_iterator<_Myt>
{
};

typedef std::_Deque_const_iterator<_Myt> std::_Deque_val<_Val_types>::const_iterator;

typedef std::_Deque_val<_Val_types>::const_iterator std::deque<SNJ_BROWSER_EVENT>::const_iterator;

typedef std::_Deque_val<_Val_types>::size_type std::deque<SNJ_BROWSER_EVENT>::size_type;

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::value_type *std::_Simple_types<SNJ_BROWSER_EVENT>::reference;

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::reference std::_Deque_val<_Val_types>::reference;

typedef std::_Deque_val<_Val_types>::reference std::deque<SNJ_BROWSER_EVENT>::reference;

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::value_type std::_Deque_val<_Val_types>::value_type;

typedef std::_Deque_val<_Val_types>::value_type std::deque<SNJ_BROWSER_EVENT>::value_type;

typedef std::_Wrap_alloc<std::allocator<SNJ_BROWSER_EVENT *> > std::_Wrap_alloc<std::allocator<SNJ_BROWSER_EVENT *> >::other;

typedef std::_Wrap_alloc<std::allocator<SNJ_BROWSER_EVENT *> >::other std::_Deque_base_types<SNJ_BROWSER_EVENT>::_Alpty;

typedef std::_Deque_base_types<SNJ_BROWSER_EVENT>::_Alpty std::_Deque_alloc<false,std::_Deque_base_types<SNJ_BROWSER_EVENT> >::_Alpty;

typedef std::_Deque_alloc<false,std::_Deque_base_types<SNJ_BROWSER_EVENT> >::_Alpty std::deque<SNJ_BROWSER_EVENT>::_Alpty;

struct std::_Allocator_base<SNJ_BROWSER_EVENT *>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<SNJ_BROWSER_EVENT *> : std::_Allocator_base<SNJ_BROWSER_EVENT *>
{
};

struct __cppobj std::_Wrap_alloc<std::allocator<SNJ_BROWSER_EVENT *> > : std::allocator<SNJ_BROWSER_EVENT *>
{
};

typedef std::_Deque_val<_Val_types>::_Mapptr std::deque<SNJ_BROWSER_EVENT>::_Mapptr;

typedef std::allocator<SNJ_BROWSER_EVENT> std::_Deque_base_types<SNJ_BROWSER_EVENT>::_Alloc;

typedef std::_Deque_base_types<SNJ_BROWSER_EVENT>::_Alloc std::_Deque_alloc<false,std::_Deque_base_types<SNJ_BROWSER_EVENT> >::_Alloc;

struct std::_Allocator_base<SNJ_BROWSER_EVENT>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<SNJ_BROWSER_EVENT> : std::_Allocator_base<SNJ_BROWSER_EVENT>
{
};

typedef std::_Wrap_alloc<_Alloc>_9 std::_Wrap_alloc<_Alloc>::other_9;

typedef std::_Wrap_alloc<_Alloc>::other_9 std::_Deque_base_types<SNJ_BROWSER_EVENT>::_Alty;

typedef std::_Deque_base_types<SNJ_BROWSER_EVENT>::_Alty std::_Deque_alloc<false,std::_Deque_base_types<SNJ_BROWSER_EVENT> >::_Alty;

struct __cppobj std::_Wrap_alloc<_Alloc>_9 : std::allocator<SNJ_BROWSER_EVENT>
{
};

typedef const std::_Simple_types<SNJ_BROWSER_EVENT>::value_type *std::_Simple_types<SNJ_BROWSER_EVENT>::const_reference;

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::const_reference std::_Deque_val<_Val_types>::const_reference;

typedef ptrdiff_t std::_Simple_types<SNJ_BROWSER_EVENT>::difference_type;

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::difference_type std::_Deque_val<_Val_types>::difference_type;

struct std::_Simple_types<SNJ_BROWSER_EVENT>
{
  __int8 gap0[1];
};

struct __cppobj std::_Deque_simple_types<value_type> : std::_Simple_types<SNJ_BROWSER_EVENT>
{
};

struct std::_Deque_base_types<SNJ_BROWSER_EVENT>
{
  __int8 gap0[1];
};

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::value_type std::_Allocator_base<SNJ_BROWSER_EVENT>::value_type;

typedef std::_Allocator_base<SNJ_BROWSER_EVENT>::value_type std::allocator<SNJ_BROWSER_EVENT>::value_type;

typedef std::allocator<SNJ_BROWSER_EVENT>::value_type *std::allocator<SNJ_BROWSER_EVENT>::pointer;

typedef std::allocator<SNJ_BROWSER_EVENT>::value_type std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT> >::value_type;

typedef std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT> >::value_type *std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT> >::pointer;

typedef std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT> >::pointer std::_Wrap_alloc<_Alloc>_9::pointer;

typedef size_t_0 std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT> >::size_type;

typedef std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT> >::size_type std::_Wrap_alloc<_Alloc>_9::size_type;

struct std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT> >
{
  __int8 gap0[1];
};

typedef std::allocator<SNJ_BROWSER_EVENT> std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT> >::_Alloc;

typedef std::_Deque_val<_Val_types>::size_type std::_Deque_iterator<_Myt>::size_type;

typedef std::_Deque_val<_Val_types>::reference std::_Deque_iterator<_Myt>::reference;

typedef std::_Deque_iterator<_Myt> std::_Deque_iterator<_Myt>::_Myiter;

typedef std::_Deque_val<_Val_types>::difference_type std::_Deque_iterator<_Myt>::difference_type;

typedef std::_Deque_const_iterator<_Myt> std::_Deque_iterator<_Myt>::_Mybase;

typedef std::_Deque_val<_Val_types>::const_reference std::_Deque_const_iterator<_Myt>::reference;

typedef std::_Deque_const_iterator<_Myt> std::_Deque_const_iterator<_Myt>::_Myiter;

typedef std::_Deque_val<_Val_types>::difference_type std::_Deque_const_iterator<_Myt>::difference_type;

struct std::_Deque_unchecked_const_iterator<std::_Deque_val<_Val_types> >;

struct std::_Deque_unchecked_iterator<std::_Deque_val<_Val_types> >;

struct std::initializer_list<SNJ_BROWSER_JSFUNC_INFO *>;

struct std::remove_reference<SNJ_BROWSER_EVENT &>
{
  __int8 gap0[1];
};

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::value_type std::remove_reference<SNJ_BROWSER_EVENT &>::type;

struct std::remove_reference<const SNJ_BROWSER_EVENT &>
{
  __int8 gap0[1];
};

typedef const std::_Simple_types<SNJ_BROWSER_EVENT>::value_type std::remove_reference<const SNJ_BROWSER_EVENT &>::type;

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::value_type *std::_Allocator_base<SNJ_BROWSER_EVENT *>::value_type;

typedef std::_Allocator_base<SNJ_BROWSER_EVENT *>::value_type std::allocator<SNJ_BROWSER_EVENT *>::value_type;

typedef std::allocator<SNJ_BROWSER_EVENT *>::value_type std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT *> >::value_type;

typedef std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT *> >::value_type *std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT *> >::pointer;

typedef std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT *> >::pointer std::_Wrap_alloc<std::allocator<SNJ_BROWSER_EVENT *> >::pointer;

typedef size_t_0 std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT *> >::size_type;

typedef std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT *> >::size_type std::_Wrap_alloc<std::allocator<SNJ_BROWSER_EVENT *> >::size_type;

typedef std::allocator<SNJ_BROWSER_EVENT *>::value_type *std::allocator<SNJ_BROWSER_EVENT *>::pointer;

struct std::allocator_traits<std::allocator<SNJ_BROWSER_EVENT *> >
{
  __int8 gap0[1];
};

struct std::iterator_traits<SNJ_BROWSER_EVENT **>
{
  __int8 gap0[1];
};

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::value_type *std::iterator_traits<SNJ_BROWSER_EVENT **>::value_type;

struct std::_Allocator_base<std::_Container_proxy>
{
  __int8 gap0[1];
};

struct __cppobj std::allocator<std::_Container_proxy> : std::_Allocator_base<std::_Container_proxy>
{
};

struct __cppobj std::_Wrap_alloc<std::allocator<std::_Container_proxy> > : std::allocator<std::_Container_proxy>
{
};

typedef std::_Container_proxy std::_Allocator_base<std::_Container_proxy>::value_type;

typedef std::_Allocator_base<std::_Container_proxy>::value_type std::allocator<std::_Container_proxy>::value_type;

typedef std::allocator<std::_Container_proxy>::value_type std::allocator_traits<std::allocator<std::_Container_proxy> >::value_type;

typedef std::allocator_traits<std::allocator<std::_Container_proxy> >::value_type *std::allocator_traits<std::allocator<std::_Container_proxy> >::pointer;

typedef std::allocator_traits<std::allocator<std::_Container_proxy> >::pointer std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::pointer;

typedef size_t_0 std::allocator_traits<std::allocator<std::_Container_proxy> >::size_type;

typedef std::allocator_traits<std::allocator<std::_Container_proxy> >::size_type std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::size_type;

typedef std::_Wrap_alloc<std::allocator<std::_Container_proxy> > std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::other;

typedef std::allocator<std::_Container_proxy>::value_type *std::allocator<std::_Container_proxy>::pointer;

struct std::allocator_traits<std::allocator<std::_Container_proxy> >
{
  __int8 gap0[1];
};

typedef std::allocator<std::_Container_proxy> std::allocator_traits<std::allocator<std::_Container_proxy> >::_Alloc;

struct std::remove_reference<std::_Container_proxy>
{
  __int8 gap0[1];
};

typedef std::_Container_proxy std::remove_reference<std::_Container_proxy>::type;

typedef size_t_0 size_type_1;

typedef ScePthreadMutex CRITICAL_SECTION;

struct SNJ_BROWSER_SYNC_CSC
{
  int ini;
  CRITICAL_SECTION csc;
};

struct __attribute__((aligned(8))) SNJ_BROWSER_THREAD_PARAM
{
  void *ctx;
  int reqtrm;
};

struct SNJ_BROWSER_THREAD
{
  SNJ_BROWSER_SYNC_CSC snc;
  void *hnd;
  int stt;
  SNJ_BROWSER_THREAD_PARAM prm;
  void (*exeprc)(const void *);
};

struct SNJ_BROWSER_SYNC_EVENT
{
  void *hnd;
};

struct SNJ_BROWSER_FONT
{
  unsigned __int16 *idx;
  int idxptr;
  SNJ_BROWSER_BITMAP bmpfnt[2];
};

struct SNJ_BROWSER_JSDINFO
{
  int jsddlg;
  int msgchrset;
  char *msg;
  char *msgtpl;
  int dlgtyp;
  int dlgres;
  char *dlgimpres;
};

typedef int slim_int;

struct TRect_
{
  slim_int fX;
  slim_int fY;
  slim_int fWidth;
  slim_int fHeight;
};

typedef TRect_ TRect;

struct __attribute__((aligned(8))) SNJ_BROWSER_WORK
{
  snj_browser_event_queue *eveque;
  SNJ_BROWSER_SYSINFO sysinf;
  SNJ_BROWSER_THREAD maitrd;
  SNJ_BROWSER_SYNC_CSC sncscr;
  SNJ_BROWSER_SYNC_EVENT snceve;
  SNJ_BROWSER_POINT moupos;
  SNJ_BROWSER_BITMAP offscr;
  SNJ_BROWSER_FONT fnt;
  SNJ_BROWSER_IMEINFO *imeinf;
  SNJ_BROWSER_JSDINFO jsdinf;
  TRect updrct;
  void *texcur[16];
  int curshw;
  int curw;
  int curh;
  int curact;
  char *urltmp;
  int urltmpsiz;
  char *stturl;
  char *jmpurl;
  int jmpurlsiz;
  char *errurl[8];
  int rno;
  int scknum;
  int prgper;
  int clsreq;
  unsigned int xpause;
  unsigned int srlflp;
  unsigned int btnprs;
  void *errstd;
  int errdlg;
  int errtyp;
  int errknd;
  int errcat;
  int sspnum;
  int sclidx;
  int ini;
  int appinires;
  __int16 scroll_x;
  __int16 scroll_y;
};

struct snj_browser_event_queue
{
  int (**_vptr$snj_browser_event_queue)(void);
  std::deque<SNJ_BROWSER_EVENT> m_eveque;
  SNJ_BROWSER_SYNC_CSC m_snccsc;
};

typedef std::_Simple_types<SNJ_BROWSER_EVENT>::value_type SNJ_BROWSER_EVENT;

enum $7876D6B6D730687FE7FEA24E35828409 : __int32
{
  RNO_MAIN = 0x0,
  RNO_PAU_INIT = 0x1,
  RNO_PAU = 0x2,
  RNO_ERR_INIT = 0x3,
  RNO_ERR = 0x4,
  RNO_IME_INIT = 0x5,
  RNO_IME = 0x6,
  RNO_JSD_INIT = 0x7,
  RNO_JSD = 0x8,
};

enum $787A7D2D8BAF94D994F65008B82AF9AE : __int32
{
  SNJ_BROWSER_LEFT = 0x0,
  SNJ_BROWSER_RIGHT = 0x1,
  SNJ_BROWSER_UP = 0x2,
  SNJ_BROWSER_DOWN = 0x3,
  SNJ_BROWSER_MIDDLE = 0x4,
};

enum $8F2C6EADF3B04E79E23527CCC9A1279E : __int32
{
  SLIM_EVENT_COMMAND = 0xFFFFFFFF,
  SLIM_EVENT_NIL = 0x0,
  SLIM_EVENT_KEYPRESS = 0x1,
  SLIM_EVENT_KEYRELEASE = 0x2,
  SLIM_EVENT_MOUSEDOWN = 0x3,
  SLIM_EVENT_MOUSEUP = 0x4,
  SLIM_EVENT_MOUSEMOVE = 0x5,
  SLIM_EVENT_MOUSEWHEEL = 0x6,
  SLIM_EVENT_CLICK = 0x7,
  SLIM_EVENT_DBLCLICK = 0x8,
  SLIM_EVENT_CONTEXTMENU = 0x9,
  SLIM_EVENT_PAINT = 0xA,
};

enum $7B9D00EB7697F8292C5AAED2609E7D1C : __int32
{
  APPCONTROL_START = 0x0,
  APPCONTROL_STOP = 0x1,
  APPCONTROL_SUSPEND = 0x2,
  APPCONTROL_RESUME = 0x3,
};

enum $B6A52A377E767595E729B02F499659F6 : __int32
{
  APPEVENT_APPCONTROL = 0x0,
  APPEVENT_FEP = 0x1,
};

enum $2540EE414865AC657EC8DFFD15979116 : __int32
{
  APP_ORIGINATOR_TASK = 0x0,
  APP_ORIGINATOR_MANAGER = 0x1,
  APP_ORIGINATOR_LAUNCHER = 0x2,
  APP_ORIGINATOR_BROWSER = 0x3,
  APP_ORIGINATOR_MAILER = 0x4,
  APP_ORIGINATORS = 0x5,
};

enum $7B8937E8CB0F537C024394021FD3C01E : __int32
{
  SNJ_BROWSER_ERRORCATEGORY_CRITICAL = 0x0,
  SNJ_BROWSER_ERRORCATEGORY_MEMORY = 0x1,
  SNJ_BROWSER_ERRORCATEGORY_SERVERDOWN = 0x2,
  SNJ_BROWSER_ERRORCATEGORY_TIMEDOUT = 0x3,
  SNJ_BROWSER_ERRORCATEGORY_SYNTAX = 0x4,
  SNJ_BROWSER_ERRORCATEGORY_LIMITOVER = 0x5,
  SNJ_BROWSER_ERRORCATEGORY_IGNORE = 0x6,
};

enum $D94BAFCEAFA6241FDC3A4DFC7A1E75AE : __int32
{
  SLIM_TKID_CHSET_US_ASCII = 0x0,
  SLIM_TKID_CHSET_Shift_JIS = 0x1,
  SLIM_TKID_CHSET_EUC_JP = 0x2,
  SLIM_TKID_CHSET_ISO_2022_JP = 0x3,
  SLIM_TKID_CHSET_ISO_8859_1 = 0x4,
  SLIM_TKID_CHSET_ISO_8859_15 = 0x5,
  SLIM_TKID_CHSET_windows_1252 = 0x6,
  SLIM_TKID_CHSET_EUC_KR = 0x7,
  SLIM_TKID_CHSET_KS_C_5601_1987 = 0x8,
  SLIM_TKID_CHSET_GB2312 = 0x9,
  SLIM_TKID_CHSET_GBK = 0xA,
  SLIM_TKID_CHSET_GB18030 = 0xB,
  SLIM_TKID_CHSET_Big5 = 0xC,
  SLIM_TKID_CHSET_Big5_HKSCS = 0xD,
  SLIM_TKID_CHSET_ISO_8859_4 = 0xE,
  SLIM_TKID_CHSET_windows_1257 = 0xF,
  SLIM_TKID_CHSET_ISO_8859_2 = 0x10,
  SLIM_TKID_CHSET_windows_1250 = 0x11,
  SLIM_TKID_CHSET_ISO_8859_5 = 0x12,
  SLIM_TKID_CHSET_windows_1251 = 0x13,
  SLIM_TKID_CHSET_koi8_r = 0x14,
  SLIM_TKID_CHSET_ISO_8859_7 = 0x15,
  SLIM_TKID_CHSET_windows_1253 = 0x16,
  SLIM_TKID_CHSET_ISO_8859_10 = 0x17,
  SLIM_TKID_CHSET_ISO_8859_3 = 0x18,
  SLIM_TKID_CHSET_windows_874 = 0x19,
  SLIM_TKID_CHSET_ISO_8859_9 = 0x1A,
  SLIM_TKID_CHSET_windows_1254 = 0x1B,
  SLIM_TKID_CHSET_ISO_8859_6 = 0x1C,
  SLIM_TKID_CHSET_windows_1256 = 0x1D,
  SLIM_TKID_CHSET_ISO_8859_8 = 0x1E,
  SLIM_TKID_CHSET_ISO_8859_8_i = 0x1F,
  SLIM_TKID_CHSET_windows_1255 = 0x20,
  SLIM_TKID_CHSET_viscii = 0x21,
  SLIM_TKID_CHSET_windows_1258 = 0x22,
  SLIM_TKID_CHSET_UTF_8 = 0x23,
  SLIM_TKID_CHSET_UTF_16BE = 0x24,
  SLIM_TKID_CHSET_UTF_16LE = 0x25,
  SLIM_TKID_CHSET_ISO_10646_UCS_2 = 0x26,
  SLIM_TKID_CHSET_ISO_10646_UCS_2_LE = 0x27,
  SLIM_TKID_CHSET_ISO_10646_UCS_4 = 0x28,
  SLIM_TKID_CHSET_ISO_10646_UCS_4_LE = 0x29,
  SLIM_TKID_CHSET_ENUMS = 0x2A,
};

enum $1E1D38BBFCEE78029633CA1799E46917 : __int32
{
  SLIM_WWWPIXMAP_TYPE_UNKNOWN = 0x0,
  SLIM_WWWPIXMAP_RGB32 = 0x1,
  SLIM_WWWPIXMAP_ARGB32 = 0x2,
  SLIM_WWWPIXMAP_RGB32MASK = 0x3,
  SLIM_WWWPIXMAP_RGB16 = 0x4,
  SLIM_WWWPIXMAP_RGB16_RE = 0x5,
  SLIM_WWWPIXMAP_ARGB16 = 0x6,
  SLIM_WWWPIXMAP_ARGB16_RE = 0x7,
  SLIM_WWWPIXMAP_RGB16MASK = 0x8,
  SLIM_WWWPIXMAP_RGB16MASK_RE = 0x9,
  SLIM_WWWPIXMAP_RGAB16 = 0xA,
  SLIM_WWWPIXMAP_RGB12 = 0xB,
  SLIM_WWWPIXMAP_ARGB12 = 0xC,
  SLIM_WWWPIXMAP_RGB12MASK = 0xD,
  SLIM_WWWPIXMAP_RGB8 = 0xE,
  SLIM_WWWPIXMAP_ARGB8 = 0xF,
  SLIM_WWWPIXMAP_RGB8MASK = 0x10,
  SLIM_WWWPIXMAP_RGB8_PAL216 = 0x11,
  SLIM_WWWPIXMAP_ARGB8_PAL216 = 0x12,
  SLIM_WWWPIXMAP_RGB8MASK_PAL216 = 0x13,
  SLIM_WWWPIXMAP_CLUTINDEX = 0x14,
  SLIM_WWWPIXMAP_INDEX8 = 0x15,
  SLIM_WWWPIXMAP_INDEX4 = 0x16,
  SLIM_WWWPIXMAP_INDEX2 = 0x17,
  SLIM_WWWPIXMAP_INDEX1 = 0x18,
  SLIM_WWWPIXMAP_SPECIAL32 = 0x19,
  SLIM_WWWPIXMAP_SPECIAL32MASK = 0x1A,
  SLIM_WWWPIXMAP_SPECIAL16 = 0x1B,
  SLIM_WWWPIXMAP_SPECIAL16MASK = 0x1C,
  SLIM_WWWPIXMAP_SPECIAL8 = 0x1D,
  SLIM_WWWPIXMAP_SPECIAL8MASK = 0x1E,
  SLIM_WWWPIXMAP_TYPES = 0x1F,
};

enum $80B7FF1AD7CAB33154929605DBCF469C : __int32
{
  SNJ_BROWSER_THREAD_SUSPENDED = 0x0,
  SNJ_BROWSER_THREAD_EXECUTING = 0x1,
  SNJ_BROWSER_THREAD_TERMINATED = 0x2,
};

typedef unsigned __int8 slim_byte;

struct slim_handle_
{
  slim_byte *fData;
};

struct SNJ_ALZ_URL
{
  char *scm;
  char *hst;
  char *prt;
  char *oth;
};

struct SNJ_BROWSER_PIXEL
{
  unsigned int r;
  unsigned int g;
  unsigned int b;
  unsigned int a;
};

struct hostent
{
  char *h_name;
  char **h_aliases;
  int h_addrtype;
  int h_length;
  char **h_addr_list;
};

struct _Lockit
{
  int _Locktype;
};

typedef slim_handle_ *slim_handle;

typedef ScePthreadMutex *LPCRITICAL_SECTION;

typedef TCertListImportInfo_ TCertListImportInfo;

typedef slim_byte slim_char;

struct __attribute__((aligned(8))) TCertListImportInfo_
{
  slim_int fStoreType;
  slim_int fCertType;
  slim_int fRecFlag;
  slim_char *fName;
  slim_byte *fDERCert;
  slim_int fDERCertLen;
  slim_byte *fDERPrKey;
  slim_int fDERPrKeyLen;
};

typedef TColorSpecInfo_ TColorSpecInfo;

typedef unsigned int slim_word;

typedef slim_word TColor;

struct TColorSpecInfo_
{
  slim_int fY;
  slim_int fHeight;
  TColor fColor;
};

typedef iTTabSelectInfo_ TTabSelectInfo;

struct iTTabSelectInfo_
{
  slim_int fBorderSize[4];
  slim_int fAdjustBottomSize;
  TColor fBorderColor;
  slim_int fSkinID[4];
};

enum $BBF38C34FB50058F08BE99DEE81E6A7F : __int32
{
  APP_BROWSER_NOTIFY_BASE = 0x8000,
  APP_BROWSER_NOTIFY_PROGRESS = 0x8001,
  APP_BROWSER_NOTIFY_CHANGESECUREZONE = 0x8002,
  APP_BROWSER_NOTIFY_SETSTATUS = 0x8003,
  APP_BROWSER_NOTIFY_MEMORYCRISIS = 0x8004,
  APP_BROWSER_NOTIFY_WINDOW_ACTIVATE = 0x8005,
  APP_BROWSER_NOTIFY_FOCUS = 0x8006,
  APP_BROWSER_NOTIFY_NORESERVE = 0x8007,
};

enum $68AD56ECF2B61BFE3A2E99D591966EE1 : __int32
{
  APPLICATIONMANAGER_AMS_SLIM = 0x0,
  APPLICATIONMANAGER_AMS_WINDOWSYSTEM = 0x1,
  APPLICATIONMANAGER_AMS_NETMANAGER = 0x2,
  APPLICATIONMANAGER_AMS_REPOSITORY = 0x3,
  APPLICATIONMANAGER_AMS_USER = 0x4,
  APPLICATIONMANAGER_AMSS = 0x5,
};

enum $AA6D7154B4DA44983636404E3F1FA118 : __int32
{
  SLIM_PREF_IMAGERESIZE_NEARESTNEIGHBOR = 0x0,
  SLIM_PREF_IMAGERESIZE_NEARESTNEIGHBORFIXEDPOINT = 0x1,
  SLIM_PREF_IMAGERESIZE_BILINEAR = 0x2,
  SLIM_PREF_IMAGERESIZES = 0x3,
};

enum $6EDBF4533CE93ED47ED7698740A4ED5D : __int32
{
  SLIM_STYLE_ENUM_100 = 0x0,
  SLIM_STYLE_ENUM_200 = 0x1,
  SLIM_STYLE_ENUM_300 = 0x2,
  SLIM_STYLE_ENUM_400 = 0x3,
  SLIM_STYLE_ENUM_500 = 0x4,
  SLIM_STYLE_ENUM_600 = 0x5,
  SLIM_STYLE_ENUM_700 = 0x6,
  SLIM_STYLE_ENUM_800 = 0x7,
  SLIM_STYLE_ENUM_900 = 0x8,
  SLIM_STYLE_ENUM_ABSOLUTE = 0x9,
  SLIM_STYLE_ENUM_ALIAS = 0xA,
  SLIM_STYLE_ENUM_ALL = 0xB,
  SLIM_STYLE_ENUM_ALL_SCROLL = 0xC,
  SLIM_STYLE_ENUM_ARMENIAN = 0xD,
  SLIM_STYLE_ENUM_AUTO = 0xE,
  SLIM_STYLE_ENUM_BASELINE = 0xF,
  SLIM_STYLE_ENUM_BIDI_OVERRIDE = 0x10,
  SLIM_STYLE_ENUM_BLOCK = 0x11,
  SLIM_STYLE_ENUM_BOLD = 0x12,
  SLIM_STYLE_ENUM_BOLDER = 0x13,
  SLIM_STYLE_ENUM_BORDER_BOX = 0x14,
  SLIM_STYLE_ENUM_BOTH = 0x15,
  SLIM_STYLE_ENUM_BOTTOM = 0x16,
  SLIM_STYLE_ENUM_CAPITALIZE = 0x17,
  SLIM_STYLE_ENUM_CELL = 0x18,
  SLIM_STYLE_ENUM_CENTER = 0x19,
  SLIM_STYLE_ENUM_CIRCLE = 0x1A,
  SLIM_STYLE_ENUM_CJK_IDEOGRAPHIC = 0x1B,
  SLIM_STYLE_ENUM_CLOSE_QUOTE = 0x1C,
  SLIM_STYLE_ENUM_COL_RESIZE = 0x1D,
  SLIM_STYLE_ENUM_COLLAPSE = 0x1E,
  SLIM_STYLE_ENUM_COLS = 0x1F,
  SLIM_STYLE_ENUM_COMPACT = 0x20,
  SLIM_STYLE_ENUM_CONDENSED = 0x21,
  SLIM_STYLE_ENUM_CONTENT_BOX = 0x22,
  SLIM_STYLE_ENUM_CONTEXT_MENU = 0x23,
  SLIM_STYLE_ENUM_COPY = 0x24,
  SLIM_STYLE_ENUM_CROSSHAIR = 0x25,
  SLIM_STYLE_ENUM_DASHED = 0x26,
  SLIM_STYLE_ENUM_DECIMAL = 0x27,
  SLIM_STYLE_ENUM_DECIMAL_LEADING_ZERO = 0x28,
  SLIM_STYLE_ENUM_DEFAULT = 0x29,
  SLIM_STYLE_ENUM_DISC = 0x2A,
  SLIM_STYLE_ENUM_DOTTED = 0x2B,
  SLIM_STYLE_ENUM_DOUBLE = 0x2C,
  SLIM_STYLE_ENUM_E_RESIZE = 0x2D,
  SLIM_STYLE_ENUM_EMBED = 0x2E,
  SLIM_STYLE_ENUM_EW_RESIZE = 0x2F,
  SLIM_STYLE_ENUM_EXPANDED = 0x30,
  SLIM_STYLE_ENUM_EXTRA_CONDENSED = 0x31,
  SLIM_STYLE_ENUM_EXTRA_EXPANDED = 0x32,
  SLIM_STYLE_ENUM_FIXED = 0x33,
  SLIM_STYLE_ENUM_FORWARD = 0x34,
  SLIM_STYLE_ENUM_GEORGIAN = 0x35,
  SLIM_STYLE_ENUM_GROOVE = 0x36,
  SLIM_STYLE_ENUM_GROUPS = 0x37,
  SLIM_STYLE_ENUM_HEBREW = 0x38,
  SLIM_STYLE_ENUM_HELP = 0x39,
  SLIM_STYLE_ENUM_HIDDEN = 0x3A,
  SLIM_STYLE_ENUM_HIDE = 0x3B,
  SLIM_STYLE_ENUM_HIRAGANA = 0x3C,
  SLIM_STYLE_ENUM_HIRAGANA_IROHA = 0x3D,
  SLIM_STYLE_ENUM_INHERIT = 0x3E,
  SLIM_STYLE_ENUM_INLINE = 0x3F,
  SLIM_STYLE_ENUM_INLINE_BLOCK = 0x40,
  SLIM_STYLE_ENUM_INLINE_TABLE = 0x41,
  SLIM_STYLE_ENUM_INSET = 0x42,
  SLIM_STYLE_ENUM_INSIDE = 0x43,
  SLIM_STYLE_ENUM_INVERT = 0x44,
  SLIM_STYLE_ENUM_ITALIC = 0x45,
  SLIM_STYLE_ENUM_JUSTIFY = 0x46,
  SLIM_STYLE_ENUM_KATAKANA = 0x47,
  SLIM_STYLE_ENUM_KATAKANA_IROHA = 0x48,
  SLIM_STYLE_ENUM_LARGE = 0x49,
  SLIM_STYLE_ENUM_LARGER = 0x4A,
  SLIM_STYLE_ENUM_LEFT = 0x4B,
  SLIM_STYLE_ENUM_LIGHTER = 0x4C,
  SLIM_STYLE_ENUM_LIST_ITEM = 0x4D,
  SLIM_STYLE_ENUM_LOWER_ALPHA = 0x4E,
  SLIM_STYLE_ENUM_LOWER_GREEK = 0x4F,
  SLIM_STYLE_ENUM_LOWER_LATIN = 0x50,
  SLIM_STYLE_ENUM_LOWER_ROMAN = 0x51,
  SLIM_STYLE_ENUM_LOWERCASE = 0x52,
  SLIM_STYLE_ENUM_LTR = 0x53,
  SLIM_STYLE_ENUM_MARKER = 0x54,
  SLIM_STYLE_ENUM_MARQUEE_BLOCK = 0x55,
  SLIM_STYLE_ENUM_MARQUEE_LINE = 0x56,
  SLIM_STYLE_ENUM_MEDIUM = 0x57,
  SLIM_STYLE_ENUM_MIDDLE = 0x58,
  SLIM_STYLE_ENUM_MOVE = 0x59,
  SLIM_STYLE_ENUM_N_RESIZE = 0x5A,
  SLIM_STYLE_ENUM_NARROWER = 0x5B,
  SLIM_STYLE_ENUM_NE_RESIZE = 0x5C,
  SLIM_STYLE_ENUM_NESW_RESIZE = 0x5D,
  SLIM_STYLE_ENUM_NO_CLOSE_QUOTE = 0x5E,
  SLIM_STYLE_ENUM_NO_DROP = 0x5F,
  SLIM_STYLE_ENUM_NO_OPEN_QUOTE = 0x60,
  SLIM_STYLE_ENUM_NO_REPEAT = 0x61,
  SLIM_STYLE_ENUM_NONE = 0x62,
  SLIM_STYLE_ENUM_NORMAL = 0x63,
  SLIM_STYLE_ENUM_NOT_ALLOWED = 0x64,
  SLIM_STYLE_ENUM_NOWRAP = 0x65,
  SLIM_STYLE_ENUM_NS_RESIZE = 0x66,
  SLIM_STYLE_ENUM_NW_RESIZE = 0x67,
  SLIM_STYLE_ENUM_NWSE_RESIZE = 0x68,
  SLIM_STYLE_ENUM_OBLIQUE = 0x69,
  SLIM_STYLE_ENUM_OPEN_QUOTE = 0x6A,
  SLIM_STYLE_ENUM_OUTSET = 0x6B,
  SLIM_STYLE_ENUM_OUTSIDE = 0x6C,
  SLIM_STYLE_ENUM_POINTER = 0x6D,
  SLIM_STYLE_ENUM_PRE = 0x6E,
  SLIM_STYLE_ENUM_PRE_LINE = 0x6F,
  SLIM_STYLE_ENUM_PRE_WRAP = 0x70,
  SLIM_STYLE_ENUM_PROGRESS = 0x71,
  SLIM_STYLE_ENUM_RELATIVE = 0x72,
  SLIM_STYLE_ENUM_REPEAT = 0x73,
  SLIM_STYLE_ENUM_REPEAT_X = 0x74,
  SLIM_STYLE_ENUM_REPEAT_Y = 0x75,
  SLIM_STYLE_ENUM_REVERSE = 0x76,
  SLIM_STYLE_ENUM_RIDGE = 0x77,
  SLIM_STYLE_ENUM_RIGHT = 0x78,
  SLIM_STYLE_ENUM_ROW_RESIZE = 0x79,
  SLIM_STYLE_ENUM_ROWS = 0x7A,
  SLIM_STYLE_ENUM_RTL = 0x7B,
  SLIM_STYLE_ENUM_RUN_IN = 0x7C,
  SLIM_STYLE_ENUM_S_RESIZE = 0x7D,
  SLIM_STYLE_ENUM_SCROLL = 0x7E,
  SLIM_STYLE_ENUM_SE_RESIZE = 0x7F,
  SLIM_STYLE_ENUM_SEMI_CONDENSED = 0x80,
  SLIM_STYLE_ENUM_SEMI_EXPANDED = 0x81,
  SLIM_STYLE_ENUM_SEPARATE = 0x82,
  SLIM_STYLE_ENUM_SHOW = 0x83,
  SLIM_STYLE_ENUM_SMALL = 0x84,
  SLIM_STYLE_ENUM_SMALL_CAPS = 0x85,
  SLIM_STYLE_ENUM_SMALLER = 0x86,
  SLIM_STYLE_ENUM_SOLID = 0x87,
  SLIM_STYLE_ENUM_SQUARE = 0x88,
  SLIM_STYLE_ENUM_STATIC = 0x89,
  SLIM_STYLE_ENUM_SUB = 0x8A,
  SLIM_STYLE_ENUM_SUPER = 0x8B,
  SLIM_STYLE_ENUM_SW_RESIZE = 0x8C,
  SLIM_STYLE_ENUM_TABLE = 0x8D,
  SLIM_STYLE_ENUM_TABLE_CAPTION = 0x8E,
  SLIM_STYLE_ENUM_TABLE_CELL = 0x8F,
  SLIM_STYLE_ENUM_TABLE_COLUMN = 0x90,
  SLIM_STYLE_ENUM_TABLE_COLUMN_GROUP = 0x91,
  SLIM_STYLE_ENUM_TABLE_FOOTER_GROUP = 0x92,
  SLIM_STYLE_ENUM_TABLE_HEADER_GROUP = 0x93,
  SLIM_STYLE_ENUM_TABLE_ROW = 0x94,
  SLIM_STYLE_ENUM_TABLE_ROW_GROUP = 0x95,
  SLIM_STYLE_ENUM_TEXT = 0x96,
  SLIM_STYLE_ENUM_TEXT_BOTTOM = 0x97,
  SLIM_STYLE_ENUM_TEXT_TOP = 0x98,
  SLIM_STYLE_ENUM_THICK = 0x99,
  SLIM_STYLE_ENUM_THIN = 0x9A,
  SLIM_STYLE_ENUM_TOP = 0x9B,
  SLIM_STYLE_ENUM_ULTRA_CONDENSED = 0x9C,
  SLIM_STYLE_ENUM_ULTRA_EXPANDED = 0x9D,
  SLIM_STYLE_ENUM_UPPER_ALPHA = 0x9E,
  SLIM_STYLE_ENUM_UPPER_LATIN = 0x9F,
  SLIM_STYLE_ENUM_UPPER_ROMAN = 0xA0,
  SLIM_STYLE_ENUM_UPPERCASE = 0xA1,
  SLIM_STYLE_ENUM_VERTICAL_TEXT = 0xA2,
  SLIM_STYLE_ENUM_VISIBLE = 0xA3,
  SLIM_STYLE_ENUM_W_RESIZE = 0xA4,
  SLIM_STYLE_ENUM_WAIT = 0xA5,
  SLIM_STYLE_ENUM_WIDER = 0xA6,
  SLIM_STYLE_ENUM_X_LARGE = 0xA7,
  SLIM_STYLE_ENUM_X_SMALL = 0xA8,
  SLIM_STYLE_ENUM_XX_LARGE = 0xA9,
  SLIM_STYLE_ENUM_XX_SMALL = 0xAA,
  SLIM_STYLE_ENUM_WAP_MARQUEE = 0xAB,
  SLIM_STYLE_ENUM_SLIDE = 0xAC,
  SLIM_STYLE_ENUM_ALTERNATE = 0xAD,
  SLIM_STYLE_ENUM_INFINITE = 0xAE,
  SLIM_STYLE_ENUM_TRUE = 0xAF,
  SLIM_STYLE_ENUM_FALSE = 0xB0,
  SLIM_STYLE_ENUM_UP = 0xB1,
  SLIM_STYLE_ENUM_DOWN = 0xB2,
  SLIM_STYLE_ENUM_FAST = 0xB3,
  SLIM_STYLE_ENUM_SLOW = 0xB4,
  SLIM_STYLE_ENUM_HAND = 0xB5,
  SLIM_STYLE_ENUM_GRAB = 0xB6,
  SLIM_STYLE_ENUM_GRABBING = 0xB7,
  SLIM_STYLE_ENUM_ZOOM_IN = 0xB8,
  SLIM_STYLE_ENUM_ZOOM_OUT = 0xB9,
  SLIM_STYLE_ENUM_X_CENTER = 0xBA,
  SLIM_STYLE_ENUM_X_LARGER = 0xBB,
  SLIM_STYLE_ENUM_X_LEFT = 0xBC,
  SLIM_STYLE_ENUM_X_RIGHT = 0xBD,
  SLIM_STYLE_ENUM_X_SMALLER = 0xBE,
  SLIM_STYLE_ENUM_X_SCROLL = 0xBF,
  SLIM_STYLE_ENUM_X_SLIDE = 0xC0,
  SLIM_STYLE_ENUM_BASIC = 0xC1,
  SLIM_STYLE_ENUM_DATA_BUTTON = 0xC2,
  SLIM_STYLE_ENUM_NUMERIC_TUNING = 0xC3,
  SLIM_STYLE_ENUM_OTHER_TUNING = 0xC4,
  SLIM_STYLE_ENUM_SPECIAL_1 = 0xC5,
  SLIM_STYLE_ENUM_SPECIAL_2 = 0xC6,
  SLIM_STYLE_ENUM_SPECIAL_3 = 0xC7,
  SLIM_STYLE_ENUM_SPECIAL_4 = 0xC8,
  SLIM_STYLE_ENUM_MISC = 0xC9,
  SLIM_STYLE_ENUM_240X160 = 0xCA,
  SLIM_STYLE_ENUM_240X320 = 0xCB,
  SLIM_STYLE_ENUM_240X480 = 0xCC,
  SLIM_STYLE_ENUM_240X640 = 0xCD,
  SLIM_STYLE_ENUM_240X800 = 0xCE,
  SLIM_STYLE_ENUM_960X540 = 0xCF,
  SLIM_STYLE_ENUM_720X480 = 0xD0,
  SLIM_STYLE_ENUM_160X120 = 0xD1,
  SLIM_STYLE_ENUM_160X240 = 0xD2,
  SLIM_STYLE_ENUMS = 0xD3,
  SLIM_STYLE_ENUM_ANON = 0xD3,
  SLIM_STYLE_ENUM_UNDEFINED = 0xD4,
};

enum $B4E1CFEDDE148B318E92CEDDA04E0439 : __int32
{
  SLIM_BRLCPRM_UNKNOWN = 0x0,
  SLIM_BRLCPRM_BROWSER_start = 0x1,
  SLIM_BRLCPRM_WINDOW_start = 0x2710,
  SLIM_BRLCPRM_PANE_start = 0x4E20,
  SLIM_BRLCPRM_DOMBIND_start = 0x7530,
  SLIM_BRLCPRM_USER_start = 0x9C40,
};

enum $D3737C19FE42EB40A84E9D7C7F39EDA8 : __int32
{
  APP_ORIGINATOR_TASK_0 = 0x0,
  APP_ORIGINATOR_MANAGER_0 = 0x1,
  APP_ORIGINATOR_LAUNCHER_0 = 0x2,
  APP_ORIGINATOR_BROWSER_0 = 0x3,
  APP_ORIGINATOR_MAILER_0 = 0x4,
  APP_ORIGINATOR_DATAFOLDER = 0x5,
  APP_ORIGINATOR_ADDRESSBOOK = 0x6,
  APP_ORIGINATOR_MEDIAPLAYER = 0x7,
  APP_ORIGINATOR_IrDA = 0x8,
  APP_ORIGINATOR_BLUETOOTH = 0x9,
  APP_ORIGINATOR_MMS = 0xA,
  APP_ORIGINATOR_MAILER_MAINMENU = 0xB,
  APP_ORIGINATOR_BROWSER_MAINMENU = 0xC,
  APP_ORIGINATOR_WAPPUSH = 0xD,
  APP_ORIGINATOR_NETMANAGER = 0xE,
  APP_ORIGINATOR_MIMEVIEWER = 0xF,
  APP_ORIGINATORS_0 = 0x10,
};

enum $1E7C6680169C3B430A83B83F90EBD3BD : __int32
{
  APP_BROWSER_PREF_ALLCHANGE = 0xFFFFFFFF,
  APP_BROWSER_PREF_DNS_PRIMARY = 0x0,
  APP_BROWSER_PREF_DNS_SECONDARY = 0x1,
  APP_BROWSER_PREF_PROXY_USE = 0x2,
  APP_BROWSER_PREF_PROXY_HTTP11 = 0x3,
  APP_BROWSER_PREF_PROXY_HOST = 0x4,
  APP_BROWSER_PREF_PROXY_PORT = 0x5,
  APP_BROWSER_PREF_PROXY_HTTPSPORT = 0x6,
  APP_BROWSER_PREF_PROXY_NOPROXY = 0x7,
  APP_BROWSER_PREF_CACHE_MODE = 0x8,
  APP_BROWSER_PREF_CACHE_L1ENTRIES = 0x9,
  APP_BROWSER_PREF_CACHE_L1CONTENT = 0xA,
  APP_BROWSER_PREF_CACHE_L1TOTAL = 0xB,
  APP_BROWSER_PREF_CACHE_L2ENTRIES = 0xC,
  APP_BROWSER_PREF_CACHE_L2CONTENT = 0xD,
  APP_BROWSER_PREF_CACHE_L2TOTAL = 0xE,
  APP_BROWSER_PREF_COOKIE_MODE = 0xF,
  APP_BROWSER_PREF_VIEW_JAVASCRIPT = 0x10,
  APP_BROWSER_PREF_VIEW_TABLE = 0x11,
  APP_BROWSER_PREF_VIEW_IMAGE = 0x12,
  APP_BROWSER_PREF_VIEW_ANIMATION = 0x13,
  APP_BROWSER_PREF_VIEW_LAYOUT = 0x14,
  APP_BROWSER_PREF_VIEW_WORDWRAP = 0x15,
  APP_BROWSER_PREF_VIEW_KINSOKU = 0x16,
  APP_BROWSER_PREF_VIEW_INCREFLOW = 0x17,
  APP_BROWSER_PREF_VIEW_CSS = 0x18,
  APP_BROWSER_PREF_VIEW_HOME = 0x19,
  APP_BROWSER_PREF_SSL_VERSION = 0x1A,
  APP_BROWSER_PREF_SSL_ALLOW_HTTPANDHTTPS = 0x1B,
  APP_BROWSER_PREF_USERAGENTNAME = 0x1C,
  APP_BROWSER_PREF_FILE_STARTPAGE = 0x1D,
  APP_BROWSER_PREF_FILE_COOKIE = 0x1E,
  APP_BROWSER_PREF_FILE_VISITLIST = 0x1F,
  APP_BROWSER_PREF_VP = 0x20,
  APP_BROWSER_PREF_AUTODETECTLANGSET = 0x21,
  APP_BROWSER_PREF_BROWSING_MODE = 0x22,
  APP_BROWSER_PREF_FONTSIZE = 0x23,
  APP_BROWSER_PREF_ZOOM = 0x24,
  APP_BROWSER_PREF_VIEW_LAST1 = 0x25,
  APP_BROWSER_PREF_SET_STARTPAGE = 0x26,
  APP_BROWSER_PREF_VIEW_LAST2 = 0x27,
  APP_BROWSER_PREF_VIEW_LAST3 = 0x28,
  APP_BROWSER_PREF_VIEW_LAST4 = 0x29,
  APP_BROWSER_PREF_VIEW_LAST5 = 0x2A,
  APP_BROWSER_PREF_VIEW_ENDWNDNUM = 0x2B,
  APP_BROWSER_PREF_VIEW_ACTIVEWNDINDEX = 0x2C,
  APP_BROWSER_PREFS = 0x2D,
};

enum $BBCD4D9170E6B52FC104C3C4D89A686D : __int32
{
  BROWSERLIB_PROPERTY_USERAGENTSTRING = 0x0,
  BROWSERLIB_PROPERTY_SETIMAGE = 0x1,
  BROWSERLIB_PROPERTY_L2CACHE_DIR = 0x2,
  BROWSERLIB_PROPERTY_FILESCHEME_PREFIX = 0x3,
  BROWSERLIB_PROPERTY_ENABLE_AUTO_SAVE_VISITLIST = 0x4,
  BROWSERLIB_PROPERTY_VISITLIST_FILENAME = 0x5,
  BROWSERLIB_PROPERTY_AUTH_FILENAME = 0x6,
  BROWSERLIB_PROPERTY_COOKIE_FILENAME = 0x7,
  BROWSERLIB_PROPERTY_MOVE_PAGE_SCROLL = 0x8,
  BROWSERLIB_PROPERTY_MOVE_SCROLL = 0x9,
  BROWSERLIB_PROPERTY_ENABLE_HTTPREQUEST_PROC = 0xA,
  BROWSERLIB_PROPERTY_MAX_REFRESH = 0xB,
  BROWSERLIB_PROPERTY_MOVE_PAGE_W_SCROLL = 0xC,
  BROWSERLIB_PROPERTY_MOVE_W_SCROLL = 0xD,
  BROWSERLIB_PROPERTY_MOVE_PAGE_H_SCROLL = 0xE,
  BROWSERLIB_PROPERTY_MOVE_H_SCROLL = 0xF,
  BROWSERLIB_PROPERTY_BROWSING_MODE = 0x10,
  BROWSERLIB_PROPERTY_HELPER_DOWNLOAD_CONSUME = 0x11,
  BROWSERLIB_PROPERTY_DOM0_SCREEN_WIDTH = 0x12,
  BROWSERLIB_PROPERTY_DOM0_SCREEN_HEIGHT = 0x13,
  BROWSERLIB_PROPERTY_DOM0_SCREEN_AVAILTOP = 0x14,
  BROWSERLIB_PROPERTY_DOM0_SCREEN_AVAILLEFT = 0x15,
  BROWSERLIB_PROPERTY_DOM0_SCREEN_AVAILWIDTH = 0x16,
  BROWSERLIB_PROPERTY_DOM0_SCREEN_AVAILHEIGHT = 0x17,
  BROWSERLIB_PROPERTY_VP_SET_CURSOR_DISTANCE = 0x18,
  BROWSERLIB_PROPERTY_VP_SET_CURSOR_MAX_SPEED_RATIO = 0x19,
  BROWSERLIB_PROPERTY_VP_SET_DISPLAY_LENGTH_FOR_CURSOR_MAX_SPEED = 0x1A,
  BROWSERLIB_PROPERTY_VP_SET_FORCUS_RANGE = 0x1B,
  BROWSERLIB_PROPERTY_VP_FRAMESET_OPERATION_MODE = 0x1C,
  BROWSERLIB_PROPERTY_VP_BEHAVIOR_VERSION = 0x1D,
  BROWSERLIB_PROPERTY_PROPERTIES = 0x1E,
};

enum $8E961CB34423D93BF28670079C16ECAB : __int32
{
  SLIM_NF_BRUIEV_KEYDOWN = 0x0,
  SLIM_NF_BRUIEV_KEYCHAR = 0x1,
  SLIM_NF_BRUIEV_KEYUP = 0x2,
  SLIM_NF_BRUIEV_MOUSEDOWN = 0x3,
  SLIM_NF_BRUIEV_MOUSEUP = 0x4,
  SLIM_NF_BRUIEV_MOUSEMOVE = 0x5,
  SLIM_NF_BRUIEV_MOUSEWHEEL = 0x6,
  SLIM_NF_BRUIEV_CLICK = 0x7,
  SLIM_NF_BRUIEV_DBLCLICK = 0x8,
  SLIM_NF_BRUIEV_CONTEXTMENU = 0x9,
  SLIM_NF_BRUIEV_EVENTS = 0xA,
};

enum $F1871A3D3538F8A656CFBEB16296DC7E : __int32
{
  SLIM_E_OK = 0x0,
  SLIM_E_GENERIC = 0xFFFFFFFF,
  SLIM_E_WOULDBLOCK = 0xFFFFFFFE,
  SLIM_E_IOSLEEP = 0xFFFFFFFD,
  SLIM_E_TIMEDOUT = 0xFFFFFFFC,
  SLIM_E_NOTFOUND = 0xFFFFFFFB,
  SLIM_E_NOMEM = 0xFFFFFFFA,
  SLIM_E_STRPIPE = 0xFFFFFFF9,
  SLIM_E_INVAL = 0xFFFFFFF8,
  SLIM_E_EOF = 0xFFFFFFF7,
  SLIM_E_NOTSUPPORTED = 0xFFFFFFF6,
  SLIM_E_FOUND = 0xFFFFFFF5,
  SLIM_E_EXCEPTION = 0xFFFFFFF4,
  SLIM_E_enum_tail = 0xFFFFFFF3,
};

enum $78D2CC00E01912CE491F84D980005D02 : __int32
{
  SLIM_NF_BRFOCUS_TYPE_SEARCH_2WAY = 0x0,
  SLIM_NF_BRFOCUS_TYPE_SEARCH_4WAY = 0x1,
  SLIM_NF_BRFOCUS_TYPE_SEARCH_DESKTOP = 0x2,
  SLIM_NF_BRFOCUS_TYPE_JUMP = 0x3,
  SLIM_NF_BRFOCUS_TYPE_SCROLL = 0x4,
  SLIM_NF_BRFOCUS_TYPE_SCROLL_DESKTOP = 0x5,
  SLIM_NF_BRFOCUS_TYPES = 0x6,
  SLIM_NF_BRFOCUS_TYPE_CUSTOM = 0x64,
};

enum $7CD9F7B6B1088B0D5B20189AFCC0D972 : __int32
{
  STANDARD_PREF_POLICY_DIALUP = 0x0,
  STANDARD_PREF_NOTIFY_SECURE_ZONE = 0x1,
  STANDARD_PREF_WEB_DATA_MANAGER = 0x2,
  STANDARD_PREF_VIEW_POPUP = 0x3,
  STNADARD_PREFS = 0x4,
};

enum $AB839606A45B94705440BCA129119CC6 : __int32
{
  SLIM_PROFILE_TYPE_INTEGER = 0x0,
  SLIM_PROFILE_TYPE_STRING = 0x1,
  SLIM_PROFILE_TYPE_BINARY = 0x2,
  SLIM_PROFILE_TYPE_MULTISTRING = 0x3,
};

enum $1B7FC6E8E014ABFCE459C7B0F114BEC7 : __int32
{
  MESSAGEBOX_TYPE_OK = 0x0,
  MESSAGEBOX_TYPE_OKCANCEL = 0x1,
  MESSAGEBOX_TYPE_OKCANCEL_OK = 0x2,
  MESSAGEBOX_TYPE_OKCANCEL_CANCEL = 0x3,
  MESSAGEBOX_TYPE_YESNO = 0x4,
  MESSAGEBOX_TYPE_YESNO_YES = 0x5,
  MESSAGEBOX_TYPE_YESNO_NO = 0x6,
  MESSAGEBOX_TYPES = 0x7,
};

enum $C24402C462C22E4AADD81CC7D2284A18 : __int32
{
  APP_ExJSDLG_ALERT = 0x0,
  APP_ExJSDLG_CONFIRM = 0x1,
  APP_ExJSDLG_PROMPT = 0x2,
};

enum $3B35D0258344D523655D6492511CA934 : __int32
{
  BROWSERLIB_HEADER_FORMAT_INT = 0x0,
  BROWSERLIB_HEADER_FORMAT_STRING = 0x1,
  BROWSERLIB_HEADER_FORMATS = 0x2,
};

enum $316C0F6BD09DB2383F47FCB602575E80 : __int32
{
  SLIM_CLIB_SPLIT_TOKEN = 0x0,
  SLIM_CLIB_SPLIT_BOTH = 0x1,
  SLIM_CLIB_SPLIT_AFTER = 0x2,
  SLIM_CLIB_SPLIT_BEFORE = 0x3,
  SLIM_CLIB_SPLIT_SPLITTYPES = 0x4,
};

enum $48FD0A3F8F8BB2B2758850AE2705A370 : __int32
{
  SLIM_HTTP_COOKIE_NOTIFY_BEFORE_SET = 0x0,
  SLIM_HTTP_COOKIE_ALWAYS_SET = 0x1,
  SLIM_HTTP_COOKIE_NEVER_SET = 0x2,
};

enum $79E0C7DDAE1E68ED28E661EC33D0945D : __int32
{
  SLIM_HTTP_METHOD_OPTIONS = 0x0,
  SLIM_HTTP_METHOD_GET = 0x1,
  SLIM_HTTP_METHOD_HEAD = 0x2,
  SLIM_HTTP_METHOD_POST = 0x3,
  SLIM_HTTP_METHOD_PUT = 0x4,
  SLIM_HTTP_METHOD_DELETE = 0x5,
  SLIM_HTTP_METHOD_TRACE = 0x6,
  SLIM_HTTP_METHOD_CONNECT = 0x7,
  SLIM_HTTP_METHODS = 0x8,
};

enum $4A7CBCE5A79C5C046594AFA757F4765E : __int32
{
  WAVE_TEXTBOXCOMPO_FORMAT_CONNECTION_DNS = 0x10002000,
  WAVE_TEXTBOXCOMPO_FORMAT_PPP_PHONE = 0x10002001,
  WAVE_TEXTBOXCOMPO_FORMAT_PPP_USER_NAME = 0x10002002,
  WAVE_TEXTBOXCOMPO_FORMAT_PPP_PASSWORD = 0x10002003,
  WAVE_TEXTBOXCOMPO_FORMAT_CLIENT_CERT_IMPORT_PASSWORD = 0x10002004,
  WAVE_TEXTBOXCOMPO_FORMAT_PROXY_SERVER = 0x10002005,
  WAVE_TEXTBOXCOMPO_FORMAT_PROXY_HTTP_PORT = 0x10002006,
  WAVE_TEXTBOXCOMPO_FORMAT_PROXY_HTTPS_PORT = 0x10002007,
  WAVE_TEXTBOXCOMPO_FORMAT_NO_PROXY_HTTPS_PORT = 0x10002008,
  WAVE_TEXTBOXCOMPO_FORMAT_HTTP_AUTHENTICATION = 0x10002009,
  WAVE_TEXTBOXCOMPO_FORMAT_RESTRICTIONS = 0x1000200A,
};

enum $08F7489A9069048D60BB9FACB20CEDF5 : __int32
{
  SLIM_HTTP_AUTH_TARGET_NONE = 0xFFFFFFFF,
  SLIM_HTTP_AUTH_TARGET_PAGE = 0x0,
  SLIM_HTTP_AUTH_TARGET_PROXY = 0x1,
  SLIM_HTTP_AUTH_TARGETS = 0x2,
};

enum $808D7545C036E0A2EDB792A917F22266 : __int32
{
  SLIM_UP = 0x0,
  SLIM_DOWN = 0x1,
  SLIM_LEFT = 0x2,
  SLIM_RIGHT = 0x3,
  SLIM_DIRECTIONS = 0x4,
};

enum $CDA39C07EEC57F3382F434218607F83C : __int32
{
  SLIM_FILEP_E_OPEN = 0xFFFFFED4,
  SLIM_FILEP_E_READ = 0xFFFFFED5,
  SLIM_FILEP_ERROR_END = 0xFFFFFED6,
};

typedef iTFixedString_ **TFixedString;

typedef TFixedString TURLString;

struct __attribute__((aligned(4))) iTFixedString_
{
  TFixedString fHashNext;
  TFixedString fHashPrev;
  slim_int fLen;
  slim_int fRefCount;
  slim_int fHashValue;
  slim_char fString[1];
};

typedef unsigned int slim_bool;

typedef iTApplication_ **TApplication;

typedef TApplication TAppBrowser;

typedef TApplicationClass_ TApplicationClass;

typedef slim_opaque_ *slim_opaque;

struct __attribute__((aligned(8))) iTApplication_
{
  TApplicationClass *fClass;
  TApplication fNext;
  slim_bool fTerminate;
  slim_opaque fUserData;
  slim_int fCriticalCondition;
};

typedef TApplicationManager_ TApplicationManager;

typedef TApplicationEvent_ TApplicationEvent;

struct TApplicationClass_
{
  TApplicationManager *fManager;
  TApplication fApplication;
  TApplication (*fNewProc)(TApplicationClass *);
  void (*fDeleteProc)(TApplication);
  slim_bool (*fClassEventProc)(TApplication, TApplicationEvent *);
  slim_bool (*fEventProc)(TApplication, TApplicationEvent *);
  void (*fEventTidyProc)(TApplicationClass *, TApplicationEvent *);
  slim_int (*fProgressProc)(TApplication, slim_int);
};

struct slim_opaque_
{
  slim_int fDummy;
};

struct TStdMemNode_
{
  slim_handle *fHandles;
  slim_int fHandleSize;
  slim_int fUsedPages;
};

typedef TStdMemNode_ TStdMemNode;

typedef TStdMemNode TMemNode;

typedef __int16 slim_short;

struct __attribute__((aligned(8))) TVarBag_
{
  TMemNode fBase;
  slim_int fItems;
  slim_short fHeaderSize;
  slim_short fAllocHint;
  slim_int fLastPage;
};

typedef TVarBag_ TVarBag;

typedef slim_pix_ *slim_pix;

struct TTree_
{
  TVarBag fBase;
  slim_pix fRoot;
};

typedef TTree_ TTree;

struct TDataArena_
{
  TTree fArenaTree;
};

typedef TDataArena_ TDataArena;

typedef TExtEvent_ TExtEvent;

struct __attribute__((aligned(8))) TApplicationManager_
{
  TDataArena fDataArena;
  void (*fGenericNotifyProc)(TApplicationManager *, slim_int);
  void (*fCustomNotifyProc)(TApplicationManager *, slim_int);
  slim_bool (*fTranslatorProc)(TApplicationManager *, TExtEvent *, TApplicationEvent *);
  slim_bool (*fExternalQueueProc)(TApplicationManager *, TApplicationEvent *, slim_opaque);
  slim_opaque fExternalQueueArg;
  slim_pix fAppClassList;
  slim_pix fProgressList;
  slim_pix fTimerList;
  slim_int fTimerSemaphore;
  slim_int fTimerLastCheckTick;
  slim_int fMinElapse;
  slim_pix fInstanceList;
  slim_pix fActiveList;
  slim_pix fDaemonList;
  slim_int fInstanceSemaphore;
  TApplication fActivateTarget;
  slim_pix fQueue;
  slim_int fStatus;
  slim_bool fQuit;
  slim_bool fStop;
  slim_bool fFirstExecution;
  TFixedString fDefaultAppName;
  slim_opaque *fAMS;
  slim_int fCriticalConditions;
  slim_int fMemoryCrisis;
  slim_handle fReserveMemory;
  slim_int fReserveSize;
};

struct TApplicationEvent_
{
  slim_int fID;
  TApplication fTarget;
  TApplication fOriginator;
  slim_int fSubType;
  slim_int fX;
  slim_int fY;
  slim_int fModifiers;
  slim_opaque fArg;
};

struct slim_pix_
{
  slim_int dummy;
};

struct TExtEvent_
{
  slim_int fAppID;
  slim_int fCtrlID;
  slim_int fSubType;
  slim_int fModifiers;
  slim_opaque fArg;
};

typedef iTStandardBrowser_ iTStandardBrowser;

typedef iTStandardBrowser **TStandardBrowser;

struct iTURLHistory_;

typedef struct iTURLHistory_ iTURLHistory;

typedef iTURLHistory **TURLHistory;

typedef TBrowser_ TBrowser;

typedef TBrowserWindow_ TBrowserWindow;

typedef TBrowserPane_ TBrowserPane;

struct __attribute__((aligned(8))) TFocusHandler_
{
  TBrowser *fBrowser;
  slim_pix (*fCustomFocusHandlerProc)(TFocusHandler_ *, TBrowserWindow *, slim_int, TBrowserPane **);
  slim_int fType;
  slim_int fFlag;
  slim_int fStateFlag;
  slim_int fBasicScrollAmount[2];
  slim_int fBasicScrollUnit[2];
  slim_int fAdjustScrollAmount[2];
  slim_int fAdjustScrollUnit[2];
};

typedef TFocusHandler_ TFocusHandler;

typedef slim_opaque TAWSPane;

typedef void (*TSupFocusHandler_GetPaneRectProc)(TAWSPane, TRect *);

struct TSupFocusHandler_
{
  TFocusHandler fBase;
  TSupFocusHandler_GetPaneRectProc fGetPaneRectProc;
};

typedef TSupFocusHandler_ TSupFocusHandler;

typedef TURLSchemeInfoClass_ TURLSchemeInfoClass;

struct TQueryFormatter_
{
  TTree fTree;
  slim_pix fPix;
  TURLSchemeInfoClass *fURLSchemeInfoClass;
  slim_bool fActionFlag;
  slim_bool fQueryFlag;
};

typedef TQueryFormatter_ TQueryFormatter;

typedef TWebDataManager_ TWebDataManager;

typedef TDialogTemplate_ TDialogTemplate;

typedef TWWWPixelMap_ TWWWPixelMap;

typedef iTToolBar_ iTToolBar;

typedef iTToolBar **TToolBar;

typedef iTBrowserMenu_ iTBrowserMenu;

typedef iTBrowserMenu **TBrowserMenu;

typedef iTTitleArea_ iTTitleArea;

typedef iTTitleArea **TTitleArea;

typedef iTBookmarkDialog_ iTBookmarkDialog;

typedef iTBookmarkDialog **TBookmarkDialog;

typedef iTURLHistoryDialog_ iTURLHistoryDialog;

typedef iTURLHistoryDialog **TURLHistoryDialog;

typedef iTPageMemoDialog_ iTPageMemoDialog;

typedef iTPageMemoDialog **TPageMemoDialog;

typedef iTBrowserCertDialog_ iTBrowserCertDialog;

typedef iTBrowserCertDialog **TBrowserCertDialog;

typedef iTClientCertDialog_ iTClientCertDialog;

typedef iTClientCertDialog **TClientCertDialog;

typedef iTCertInfoDialog_ iTCertInfoDialog;

typedef iTCertInfoDialog **TCertInfoDialog;

typedef iTClientCertSelectDialog_ iTClientCertSelectDialog;

typedef iTClientCertSelectDialog **TClientCertSelectDialog;

typedef iTVisitHistoryDialog_ iTVisitHistoryDialog;

typedef iTVisitHistoryDialog **TVisitHistoryDialog;

typedef iTEnterURLDialog_ iTEnterURLDialog;

typedef iTEnterURLDialog **TEnterURLDialog;

typedef iTTextSearchDialog_ iTTextSearchDialog;

typedef iTTextSearchDialog **TTextSearchDialog;

typedef iTWebSearchDialog_ iTWebSearchDialog;

typedef iTWebSearchDialog **TWebSearchDialog;

typedef iTTranslateDialog_ iTTranslateDialog;

typedef iTTranslateDialog **TTranslateDialog;

typedef iTDownloadDialog_ iTDownloadDialog;

typedef iTDownloadDialog **TDownloadDialog;

typedef void *slim_object;

typedef slim_object TWnd;

typedef TWWWPixelMapClassPool_ TWWWPixelMapClassPool;

typedef TWWWPixelMapClass_ TWWWPixelMapClass;

typedef slim_vhandle_ *slim_vhandle;

struct TWWWPixelMap_::$4F746A15FEDA3C02F98DC7194D49C8F7::$1B4B088680F3299ADE4F70E947C0FF01
{
  slim_vhandle fPixel;
  slim_vhandle fMask;
  slim_vhandle fPalette;
};

struct TWWWPixelMap_::$4F746A15FEDA3C02F98DC7194D49C8F7::$8E4E9018551B17A1AADEBF5A57EE6193
{
  void *fPixel;
  void *fMask;
  void *fPalette;
};

typedef void *(*slim_wwwpixmap_externalized_lockunlock_pixel_proc)(slim_opaque, void **, void **, slim_bool);

struct TWWWPixelMap_::$4F746A15FEDA3C02F98DC7194D49C8F7::$B11A03623C22B69900C5DED3F6148249
{
  slim_opaque fUserData;
  slim_wwwpixmap_externalized_lockunlock_pixel_proc fLockUnlockPixelProc;
};

union TWWWPixelMap_::$4F746A15FEDA3C02F98DC7194D49C8F7
{
  TWWWPixelMap_::$4F746A15FEDA3C02F98DC7194D49C8F7::$1B4B088680F3299ADE4F70E947C0FF01 Handle;
  TWWWPixelMap_::$4F746A15FEDA3C02F98DC7194D49C8F7::$8E4E9018551B17A1AADEBF5A57EE6193 Static;
  TWWWPixelMap_::$4F746A15FEDA3C02F98DC7194D49C8F7::$B11A03623C22B69900C5DED3F6148249 Externalized;
};

struct TWWWPixelMap_
{
  TWWWPixelMapClassPool *fPixelMapClassPool;
  TWWWPixelMapClass *fPixelMapClass;
  slim_int fPixelMapType;
  slim_int fPaletteType;
  slim_int fPixelMapFlag;
  slim_int fWidth;
  slim_int fHeight;
  slim_int fRowBytes;
  slim_int fMaskRowBytes;
  slim_int fValidLines;
  slim_int fDirtyLineStart;
  slim_int fDirtyLines;
  slim_int fDelayTime;
  TWWWPixelMap_::$4F746A15FEDA3C02F98DC7194D49C8F7 u;
};

struct iTStandardBrowser_
{
  TAppBrowser fAppBrowser;
  TURLHistory fURLHistory;
  TSupFocusHandler fFocusHandler;
  TFocusHandler fFocusHandlerForTabFocus;
  TFocusHandler fScrollHandler;
  TQueryFormatter fWebSearchFormatter;
  TQueryFormatter fTranslationFormatter;
  TWebDataManager *fWebDataManager;
  TDialogTemplate *fDialogTemplate;
  TDialogTemplate *fDmyDialogTemplate;
  TWWWPixelMap *fWebDataNewInputImage;
  TToolBar fToolBar;
  TBrowserMenu fBrowserMenu;
  TTitleArea fTitleArea;
  TBookmarkDialog fBookmarkDialog;
  TURLHistoryDialog fURLHistoryDialog;
  TPageMemoDialog fPageMemoDialog;
  TBrowserCertDialog fCertDialog;
  TClientCertDialog fClientCertDialog;
  TCertInfoDialog fCertInfoDialog;
  TClientCertSelectDialog fClientCertSelectDialog;
  TVisitHistoryDialog fVisitHistoryDialog;
  TEnterURLDialog fEnterURLDialog;
  TTextSearchDialog fTextSearchDialog;
  TWebSearchDialog fWebSearchDialog;
  TTranslateDialog fTranslateDialog;
  TDownloadDialog fDownloadDialog;
  TWnd fTabMenuButton;
  TWnd fBackButton;
  TWnd fForwardButton;
  TWnd fPageLoadButton;
  TWnd fHomeButton;
  TWnd fURLButton;
  TWnd fBookmarkButton;
  TWnd fAddBookmarkButton;
  TWnd fHistoryButton;
  TWnd fVPOnButton;
  TWnd fSearchButton;
  TWnd fMenuButton;
  TWnd fURLTextBox;
  TWnd fConnectionIcon;
  TWnd fConnectStateIcon;
  TWnd fSSLIcon;
  TWnd fToolBarIcon;
  TWnd fURLJumpIcon;
  TWnd fURLHistoryIcon;
  TWnd fScrollIndicatorLeftIcon;
  TWnd fScrollIndicatorUpIcon;
  TWnd fScrollIndicatorDownIcon;
  TWnd fScrollIndicatorRightIcon;
  TWnd fVPMenu;
  TWnd fBookmarkMenu;
  TWnd fSearchMenu;
  slim_handle fTabSelect;
  slim_bool fIsDocStarted;
  slim_bool fIsSecurePage;
  TRect fContentAreaRect;
  slim_bool fIsForDownload;
  TWWWPixelMap fTilePixelMap;
};

typedef slim_int (*Browser_PaneHandleNextContentProc)(TBrowser *, TBrowserPane *);

struct __attribute__((aligned(8))) TMIMEInfoClass_
{
  TDataArena *fDataArena;
  slim_pix fMIMETypeTree;
  slim_pix fSuffixTree;
  slim_pix fDefaultMIMETypePix;
  slim_pix fAnonPrimaryTypePix;
  slim_int fNextAllocID;
};

typedef TMIMEInfoClass_ TMIMEInfoClass;

struct __attribute__((aligned(8))) TURLSchemeInfoClass_
{
  TDataArena *fDataArena;
  slim_pix fSchemeInfoList;
  slim_int fNextID;
  slim_int fFlag;
  slim_int fHTTPDefaultPort;
  slim_int fHTTPSDefaultPort;
  slim_int fFilepCharSet;
};

typedef TContentChannelClass_ TContentChannelClass;

struct TContentChannelRecord_
{
  slim_int fSchemeID;
  TContentChannelClass *fContentChannelClass;
};

typedef TContentChannelRecord_ TContentChannelRecord;

typedef slim_opaque (*THashGetKeyProc)(void *);

typedef slim_int (*THashItemHashProc)(slim_opaque, slim_opaque);

typedef slim_int (*THashExtHashProc)(slim_opaque);

typedef slim_bool (*THashEqualProc)(slim_opaque, slim_opaque, slim_opaque, slim_int);

typedef void *(*THashLockItemProc)(slim_opaque, slim_opaque);

typedef void (*THashUnlockItemProc)(slim_opaque, slim_opaque);

struct THash_
{
  slim_short fTableOffset;
  slim_short fTableSize;
  slim_short fTableSizeMask;
  slim_short fNextOffset;
  slim_opaque fItemColl;
  slim_opaque fKeyColl;
  THashGetKeyProc fGetKeyProc;
  THashItemHashProc fItemHashProc;
  THashExtHashProc fExtHashProc;
  THashEqualProc fEqualProc1;
  THashLockItemProc fLockItemProc;
  THashUnlockItemProc fUnlockItemProc;
};

typedef THash_ THash;

struct TContentSpecList_
{
  TTree fList;
  slim_pix fRootPix;
  slim_pix fDoneSpecPix;
  slim_int fHighPriorityItems;
  THash fHash;
  slim_opaque fTable[256];
};

typedef TContentSpecList_ TContentSpecList;

typedef iTContentSpec_ **TContentSpec;

typedef void (*Content_NotifyProc)(TContentSpec, slim_int, slim_opaque);

struct TBag_
{
  TMemNode fBase;
  slim_short fHeaderSize;
  slim_short fItemSize;
  slim_short fHolderSize;
  slim_short fHoldersPerPage;
  slim_int fItems;
  slim_int fAllocHint;
};

typedef TBag_ TBag;

struct __attribute__((aligned(8))) TList_
{
  TBag fBase;
  slim_pix fFirst;
  slim_int fLength;
};

typedef TList_ TList;

struct TSpecList_
{
  TList fBase;
};

typedef TSpecList_ TSpecList;

typedef TContentDeterminerClass_ TContentDeterminerClass;

typedef iTContent_ **TContent;

typedef TDRMManager_ TDRMManager;

typedef TContentSpecFactory_ TContentSpecFactory;

typedef TURLString (*Content_RestrictRefererProc)(TContentClass_ *, TURLString, TURLString, slim_int);

struct TContentClass_
{
  TContentChannelRecord fChannelTable[8];
  TContentSpecList fContentSpecList;
  slim_int fFlag;
  slim_int fDefaultCacheMode;
  slim_int fL2CacheTiming;
  slim_bool fDeferPersistent;
  Content_NotifyProc fNotifyProc;
  slim_opaque fAux;
  TMIMEInfoClass *fMIMEInfoClass;
  TURLSchemeInfoClass *fURLSchemeInfoClass;
  TSpecList fSizeLimit;
  slim_int fMaxRedirect;
  slim_int fMaxPageAuth;
  slim_int fMaxProxyAuth;
  slim_int fPersistentMaxStayTime;
  TContentDeterminerClass *fDeterminerClass;
  TContent fDummy;
  TDRMManager *fDRMManager;
  TContentSpecFactory *fContentSpecFactory;
  Content_RestrictRefererProc fRestrictRefererProc;
};

typedef TContentClass_ TContentClass;

typedef iTContentChannel_ **TContentChannel;

typedef iTPostData_ iTPostData;

typedef iTPostData **TPostData;

struct TContentChannelClass_
{
  TContentChannel (*fNewProc)(TContentChannelClass_ *, TContentSpec, slim_int);
  void (*fDeleteProc)(TContentChannel, TContentSpec);
  slim_int (*fProgressProc)(TContentChannel, TContentSpec, slim_int *);
  void (*fAbortProc)(TContentChannel, TContentSpec);
  void (*fMakePersistentProc)(TContentChannel, slim_bool);
  void (*fSetCachePinProc)(TContentChannel, slim_bool);
  slim_int (*fDetermineRetrieverProc)(TContentChannelClass_ *, TURLString, slim_int, TPostData, slim_int, slim_int, slim_int *);
  void (*fSyncPersistentInfoProc)(TContentChannelClass_ *);
  TMIMEInfoClass *fMIMEInfoClass;
  TURLSchemeInfoClass *fURLSchemeInfoClass;
  slim_opaque fUserData;
};

typedef slim_opaque TDNS;

typedef slim_int (*TSocketOpenProc)(slim_opaque, slim_int, slim_opaque *);

typedef void (*TSocketCloseProc)(slim_opaque, slim_opaque);

typedef slim_ip_addr_ slim_ip_addr;

typedef slim_int (*TSocketConnectProc)(slim_opaque, slim_opaque, slim_ip_addr *, slim_int);

typedef slim_int (*TSocketIsConnectedProc)(slim_opaque, slim_opaque);

typedef slim_int (*TSocketReadProc)(slim_opaque, slim_opaque, slim_byte *, slim_int);

typedef slim_int (*TSocketWriteProc)(slim_opaque, slim_opaque, slim_byte *, slim_int);

typedef slim_int (*TSocketCheckReadWriteProc)(slim_opaque, slim_opaque, slim_int);

typedef slim_int (*TSocketCheckKeepAliveProc)(slim_opaque, slim_opaque);

typedef void (*TSocketShutdownProc)(slim_opaque, slim_opaque);

struct TSocketClass_
{
  slim_opaque fUserData;
  TSocketOpenProc fOpenProc;
  TSocketCloseProc fCloseProc;
  TSocketConnectProc fConnectProc;
  TSocketIsConnectedProc fIsConnectedProc;
  TSocketReadProc fReadProc;
  TSocketWriteProc fWriteProc;
  TSocketCheckReadWriteProc fCheckReadWriteProc;
  TSocketCheckKeepAliveProc fCheckKeepAliveProc;
  TSocketShutdownProc fShutdownProc;
};

typedef TSocketClass_ TSocketClass;

struct TTCPSocketClass_
{
  TSocketClass fBase;
};

typedef TTCPSocketClass_ TTCPSocketClass;

typedef slim_int (*TSocketSSLUpgradeProc)(slim_opaque, slim_opaque, slim_int, slim_char *, slim_int, slim_int);

typedef slim_int (*TSocketDoSSLHandshakeProc)(slim_opaque, slim_opaque);

typedef TSSLSocketInfo_ TSSLSocketInfo;

typedef void (*TSocketGetSSLInfoProc)(slim_opaque, slim_opaque, TSSLSocketInfo *);

struct TSSLSocketClass_
{
  TSocketClass fBase;
  TSocketSSLUpgradeProc fUpgradeProc;
  TSocketDoSSLHandshakeProc fDoHandshakeProc;
  TSocketGetSSLInfoProc fGetInfoProc;
};

typedef TSSLSocketClass_ TSSLSocketClass;

typedef iTSSL_ **TSSL;

struct TSocketDesc_
{
  slim_int fTCPDesc;
  TSSL fSSL;
};

typedef TSocketDesc_ TSocketDesc;

typedef TSSLClass_ TSSLClass;

struct TSocketDescContext_
{
  TSocketDesc fDesc[4];
  TSSLClass *fSSLClass;
};

typedef TSocketDescContext_ TSocketDescContext;

struct slim_ip_addr_
{
  slim_int fType;
  slim_byte fAddr[16];
};

struct __attribute__((aligned(4))) THTTPTCPStream_
{
  TSocketClass *fClass;
  slim_opaque fTCPDesc;
  slim_ip_addr fConnectAddr;
  slim_int fConnectPort;
  TFixedString fURLHost;
  slim_int fURLPort;
  slim_int fKeepAliveBaseTick;
  slim_int fKeepAliveTimeout;
  slim_int fKeepAliveMax;
  slim_char fBuf[2048];
  slim_int fBufOfs;
  slim_int fBufLen;
  slim_short fFlag;
  slim_short fRefCount;
  slim_int fSSLState;
  slim_short fWriterNum;
  slim_short fReaderNum;
  slim_short fServerVersion;
};

typedef THTTPTCPStream_ THTTPTCPStream;

struct THTTPStreamTimer_
{
  slim_short fSuspend;
  slim_short fEventType;
  slim_int fBaseTick;
  slim_int fSuspendTick;
};

typedef THTTPStreamTimer_ THTTPStreamTimer;

struct __attribute__((aligned(8))) THTTPStreamPoolEntry_
{
  THTTPTCPStream *fPStream;
  slim_int fFlag;
  THTTPStreamTimer fTimer;
  slim_short fOrderWrite;
  slim_short fOrderRead;
};

typedef THTTPStreamPoolEntry_ THTTPStreamPoolEntry;

struct __attribute__((aligned(8))) THTTPStreamPool_
{
  TTCPSocketClass fTCPSocketClass;
  TSSLSocketClass fSSLSocketClass;
  TSocketDescContext fSocketDesc;
  slim_int fMaxStreams;
  slim_int fMaxKeepAliveTimeout;
  slim_int fMaxRefCount;
  THTTPTCPStream fStreams[4];
  THTTPStreamPoolEntry fEntries[16];
  slim_int fFlag;
};

typedef THTTPStreamPool_ THTTPStreamPool;

typedef iTString_ **TString;

typedef THTTPAuthInfo_ THTTPAuthInfo;

typedef TString (*THTTPAuthMakeCredProc)(slim_int, THTTPAuthInfo *, slim_char *, TURLString, slim_byte *);

typedef slim_int (*THTTPAuthHashKeyProc)(slim_byte *, slim_byte *);

typedef slim_int (*THTTPAuthEncodeStringProc)(slim_byte *, slim_byte *, slim_byte *);

typedef TString (*THTTPAuthDecodeStringProc)(slim_byte *, slim_int, slim_byte *);

struct THTTPAuthCache_
{
  TTree fBase;
  slim_int fMaxEntries;
  slim_int fCurEntries;
  slim_pix fEntryHead;
  THTTPAuthMakeCredProc fMakeCredProc[2];
  THTTPAuthHashKeyProc fHashKeyProc;
  THTTPAuthEncodeStringProc fEncodeStringProc;
  THTTPAuthDecodeStringProc fDecodeStringProc;
};

typedef THTTPAuthCache_ THTTPAuthCache;

struct TDomainNameDB_
{
  THash fHashPublicDomains[3];
  slim_opaque fHashTableExactPublicDomains[227];
  slim_opaque fHashTableWildcardPublicDomains[31];
  slim_opaque fHashTableExcludedPublicDomains[41];
};

typedef TDomainNameDB_ TDomainNameDB;

typedef slim_bool (*THTTPCookiesCookieCallback)(THTTPCookies *, TURLString, slim_char *, slim_int, slim_opaque);

typedef iTHTTPCookieEntry_ **THTTPCookieEntry;

typedef slim_bool (*THTTPCookiesRemoveCandidateCallback)(THTTPCookies *, THTTPCookieEntry, THTTPCookieEntry *, THTTPCookieEntry *, THTTPCookieEntry *);

typedef THTTPCookie_ THTTPCookie;

typedef slim_time_ slim_time;

typedef slim_int (*THTTPCookies_HandleReceivedCookieProc)(THTTPCookies *, THTTPCookie *, slim_time *, slim_opaque);

struct THTTPCookies_
{
  slim_int fFlag;
  slim_int fCookieMode;
  slim_opaque fCookieAux;
  THTTPCookiesCookieCallback fCookieCallback;
  THTTPCookiesRemoveCandidateCallback fRemoveCandidateCallback;
  THTTPCookies_HandleReceivedCookieProc fHandleReceivedCookieProc;
  slim_opaque fHandleReceivedCookieAux;
  THTTPCookieEntry fHead;
  THTTPCookieEntry fTail;
  slim_int fMaxTotalCookies;
  slim_int fMaxCookiesPerDomain;
  slim_int fMaxLenPerCookie;
  slim_int fTotalCookiesLen;
  slim_int fMaxTotalCookiesLen;
  TDomainNameDB *fDomainNameDB;
};

typedef THTTPCookies_ THTTPCookies;

typedef TSpecList TDNSCache;

typedef iTHTTPStream_ iTHTTPStream;

typedef slim_int (*THTTPStream_ReqStateProc)(iTHTTPStream *, slim_int);

typedef slim_int (*THTTPStream_RspStateProc)(iTHTTPStream *, slim_int, slim_char *, slim_int, slim_int *);

typedef iTHTTPStream **THTTPStream;

typedef slim_int (*THTTPStreamCustomizeHeaderProc)(THTTPStream, slim_opaque);

struct THTTPHdrRestriction_
{
  slim_word fWords[2];
};

typedef THTTPHdrRestriction_ THTTPHdrRestriction;

struct TOpaqueList_
{
  TList fBase;
};

typedef TOpaqueList_ TOpaqueList;

typedef TOpaqueList TObjectList;

typedef void (*HTTPStreamWakeUpCallbackProc)(slim_opaque);

typedef iTCertList_ **TCertList;

typedef slim_bool (*TSSLServerCertConfirmProc)(TSSL, slim_int, TCertList, slim_opaque);

typedef iTClientCertList_ iTClientCertList;

typedef iTClientCertList **TClientCertList;

typedef slim_bool (*TSSLClientCertSelectProc)(TSSL, TClientCertList, slim_opaque);

typedef void (*TSSLDeleteCallback)(TSSL, slim_opaque);

typedef slim_bool (*TSSLPrivateKeyEncryptProc)(TSSL, slim_byte *, slim_int, slim_byte *, slim_int, slim_opaque);

typedef slim_bool (*THTTPStreamNotifyStateProc)(THTTPStream, TURLString, slim_int, slim_opaque);

struct THTTPStreamClass_
{
  TDNS fDNS;
  THTTPStreamPool fStreamPool;
  THTTPAuthCache fAuthCache;
  slim_int fFlag;
  slim_int fHTTPPort;
  slim_int fHTTPSPort;
  slim_int fMaxRequestHeader;
  slim_int fMaxReqMsgHeader;
  slim_int fMaxRequestBody;
  TFixedString fProxyHost;
  slim_ip_addr fProxyAddr;
  slim_int fProxyHTTPPort;
  slim_int fProxyHTTPSPort;
  TString fNoProxyHosts;
  TFixedString fUserAgent;
  TString fDefaultHeaders;
  TString fDefaultConnectHeaders;
  TDomainNameDB fDomainNameDB;
  THTTPCookies fCookie;
  TDNSCache fDNSCache;
  slim_int fDNSMaxCacheEntries;
  slim_int fMaxResponseHeader;
  slim_int fMax100Continue;
  THTTPStream_ReqStateProc fReqStateProc;
  THTTPStream_RspStateProc fRspStateProc;
  slim_int fTimeLimit[3];
  THTTPStreamCustomizeHeaderProc fCustomizeHeaderProc;
  slim_opaque fCustomizeHeaderAux;
  slim_int (*fTunnelingCallback)(iTHTTPStream *, slim_char *, slim_int, slim_opaque);
  slim_opaque fTunnelingAux;
  THTTPHdrRestriction fReqHdrRestriction;
  THTTPHdrRestriction fRspHdrRestriction;
  TObjectList fList;
  HTTPStreamWakeUpCallbackProc fCallbackProc;
  slim_opaque fCallbackAux;
  TSSLServerCertConfirmProc fSSLConfirmProc;
  slim_opaque fSSLConfirmAux;
  TSSLClientCertSelectProc fSSLSelectProc;
  slim_opaque fSSLSelectAux;
  TSSLDeleteCallback fSSLDeleteProc;
  slim_opaque fSSLDeleteAux;
  TSSLPrivateKeyEncryptProc fSSLEncryptProc;
  slim_opaque fSSLEncryptAux;
  THTTPStreamNotifyStateProc fNotifyStateProc;
  slim_opaque fNotifyStateAux;
};

typedef THTTPStreamClass_ THTTPStreamClass;

struct THTTPCache_
{
  TSpecList fList;
  THash fHash;
  slim_opaque fHashTable[256];
  slim_int fLimitEntries;
  slim_int fLimitTotalSize;
  slim_int fLimitContentSize;
  slim_bool fStoreHeader;
};

typedef THTTPCache_ THTTPCache;

struct THTTPL1Cache_
{
  THTTPCache fBase;
  slim_int fTotalSize;
  slim_int fTotalContentSize;
  slim_int fTotalStickedSize;
  slim_int fTotalStickedContentSize;
};

typedef THTTPL1Cache_ THTTPL1Cache;

struct __attribute__((aligned(8))) THTTPL2Cache_
{
  THTTPCache fBase;
  slim_int fRoundUpUnit;
  slim_int fFileNameLength;
  TString fFatName;
  TString fDirName;
  TString fExtName;
  slim_int fDirNameLen;
  slim_char fDelimiter;
  slim_byte fStart;
  slim_byte fNeedSyncCacheInfo;
  slim_byte fPadding;
  slim_int (*fFileOpenProc)(slim_char *, slim_int);
  void (*fFileCloseProc)(slim_int);
  slim_int (*fFileReadProc)(slim_int, void *, slim_int);
  slim_int (*fFileWriteProc)(slim_int, void *, slim_int);
  slim_int (*fFileDeleteProc)(slim_char *);
  slim_int (*fFileDeleteAllProc)(THTTPL2Cache *);
  slim_int fTotalEntrySize;
  slim_int fTotalFileSize;
  slim_int fTotalContentSize;
  slim_int fTotalStickedFileSize;
  slim_int fTotalStickedContentSize;
};

typedef THTTPL2Cache_ THTTPL2Cache;

struct THTTPRedirectURLCache_
{
  TSpecList fList;
  slim_int fLimits;
  THash fHash;
  slim_opaque fHashTable[256];
};

typedef THTTPRedirectURLCache_ THTTPRedirectURLCache;

struct THTTPContentCache_
{
  THTTPL1Cache fL1CacheInfo;
  THTTPL2Cache fL2CacheInfo;
  TBag fBag;
  THash fHash;
  slim_opaque fHashTable[256];
  THTTPRedirectURLCache fRedirectURLCache;
};

typedef THTTPContentCache_ THTTPContentCache;

typedef iTHTTPChannel_ iTHTTPChannel;

typedef iTHTTPChannel **THTTPChannel;

typedef slim_int (*THTTPChannel_ConnectCallback)(THTTPChannel, TURLString, slim_int, TPostData, slim_opaque);

typedef slim_int (*THTTPChannel_RedirectCallback)(THTTPChannel, slim_int, slim_int, slim_int, TURLString, TURLString, slim_opaque);

typedef slim_split_ss_ slim_split_ss;

typedef slim_int (*THTTPChannel_AuthCallback)(THTTPChannel, slim_int, slim_int, slim_split_ss *, slim_split_ss *, TURLString, TFixedString, slim_int, slim_opaque);

typedef slim_int (*THTTPChannel_HeaderReceivedCallback)(iTHTTPChannel *, slim_int, slim_opaque);

typedef void (*THTTPChannel_OnDeleteCallback)(THTTPChannel, slim_opaque);

typedef THTTPCacheKey_ THTTPCacheKey;

typedef slim_bool (*HTTPChannel_FindCacheProc)(THTTPChannelClass *, THTTPCacheKey *, slim_bool, slim_int *, slim_opaque *);

typedef TContentCoreSpecInfo_ TContentCoreSpecInfo;

typedef slim_bool (*HTTPChannel_GetCoreSpecInfoProc)(THTTPChannelClass *, slim_int, slim_opaque, TContentCoreSpecInfo *);

typedef void (*HTTPChannel_TidyCoreSpecInfoProc)(THTTPChannelClass *, slim_int, slim_opaque, TContentCoreSpecInfo *);

typedef slim_bool (*THTTPChannel_UseOrStickCacheProc)(iTHTTPChannel *, slim_int, slim_bool *);

typedef slim_int (*THTTPChannel_ReadCacheProc)(iTHTTPChannel *, slim_bool, slim_bool);

typedef slim_int (*THTTPChannel_DeleteCacheProc)(iTHTTPChannel *);

typedef void (*THTTPChannel_CacheMaintenanceProc)(iTHTTPChannel *);

typedef slim_int (*HTTPChannel_CacheProgressProc)(THTTPChannelClass *);

typedef slim_int (*HTTPChannel_FetchAuthInfoProc)(TURLString, slim_int *, THTTPAuthInfo *, slim_opaque);

struct THTTPChannelClass_
{
  TContentChannelClass fBase;
  TContentClass *fContentClass;
  THTTPStreamClass fStreamClass;
  THTTPContentCache fCache;
  slim_int fReadChunk;
  slim_int fVersion;
  TString fAuxHeader;
  THTTPChannel_ConnectCallback fConnectCallback;
  slim_opaque fConnectCallbackAux;
  THTTPChannel_RedirectCallback fRedirectCallback;
  slim_opaque fRedirectCallbackAux;
  THTTPChannel_AuthCallback fAuthCallback;
  slim_opaque fAuthCallbackAux;
  THTTPChannel_HeaderReceivedCallback fHeaderReceivedCallback;
  slim_opaque fHeaderReceivedCallbackAux;
  THTTPChannel_OnDeleteCallback fOnDeleteCallback;
  slim_opaque fOnDeleteCallbackArg;
  slim_int fSSLFlag;
  slim_int fFlag;
  slim_int fDefaultCacheExpirePeriod;
  slim_int fHTTPMaxStreams;
  slim_int fHTTPStreams;
  HTTPChannel_FindCacheProc fFindCacheProc;
  HTTPChannel_GetCoreSpecInfoProc fGetCoreSpecInfoProc;
  HTTPChannel_TidyCoreSpecInfoProc fTidyCoreSpecInfoProc;
  THTTPChannel_UseOrStickCacheProc fUseOrStickCacheProc;
  THTTPChannel_ReadCacheProc fReadCacheProc;
  THTTPChannel_DeleteCacheProc fDeleteCacheProc;
  THTTPChannel_CacheMaintenanceProc fCacheMaintenanceProc;
  HTTPChannel_CacheProgressProc fCacheProgressProc;
  HTTPChannel_FetchAuthInfoProc fFetchAuthInfoProc;
  slim_opaque fExternalAuthDB;
};

typedef THTTPChannelClass_ THTTPChannelClass;

typedef iTFilepChannel_ iTFilepChannel;

struct TFilepChannelClass_
{
  TContentChannelClass fBase;
  slim_int fObjectSize;
  slim_int fOpens;
  slim_int fReadChunk;
  slim_int (*fFileOpenPeer)(slim_char *, slim_int);
  void (*fFileClosePeer)(slim_int);
  slim_int (*fFileReadPeer)(slim_int, void *, slim_int);
  slim_bool (*fInit)(iTFilepChannel *, TFilepChannelClass *, TContentSpec, slim_int);
  slim_int (*fDoOpen)(iTFilepChannel *, TContentSpec, TURLString);
  slim_int (*fDoRead)(iTFilepChannel *, TContentSpec);
  void (*fDoClose)(iTFilepChannel *);
};

typedef TFilepChannelClass_ TFilepChannelClass;

typedef iTAboutChannel_ iTAboutChannel;

typedef slim_int (*AboutChannel_WriteContentProc)(iTAboutChannel *, TContentSpec, slim_split_ss *, slim_opaque, slim_int *);

struct TAboutChannelClass_
{
  TContentChannelClass fBase;
  AboutChannel_WriteContentProc fWriteContent;
};

typedef TAboutChannelClass_ TAboutChannelClass;

typedef TPictgramInfo_ TPictgramInfo;

typedef slim_bool (*PictpChannel_GetInfoProc)(TURLString, TPictgramInfo *);

typedef slim_int (*PictpChannel_ReadProc)(TPictgramInfo *, slim_int, void *, slim_int);

struct TPictpChannelClass_
{
  TContentChannelClass fBase;
  PictpChannel_GetInfoProc fGetInfoProc;
  PictpChannel_ReadProc fReadProc;
};

typedef TPictpChannelClass_ TPictpChannelClass;

struct TDatapChannelClass_
{
  TContentChannelClass fBase;
};

typedef TDatapChannelClass_ TDatapChannelClass;

struct TMultiContentChannelClass_
{
  TContentChannelClass fBase;
};

typedef TMultiContentChannelClass_ TMultiContentChannelClass;

typedef TMultiContentReviverClass_ TMultiContentReviverClass;

typedef iTMultiContent_ iTMultiContent;

typedef TContentRequest_ TContentRequest;

typedef slim_int (*MultiContent_NewContentSpecProc)(iTMultiContent *, TContentRequest *, TContentSpec *);

typedef void (*MultiContent_TidyProc)(iTMultiContent *);

typedef TMultiContentItem_ TMultiContentItem;

typedef void (*MultiContent_TidyItemProc)(iTMultiContent *, TMultiContentItem *, slim_bool);

typedef slim_int (*MultiContent_UpdateContentSpecProc)(iTMultiContent *, TContentSpec);

typedef void (*MultiContent_AbortProc)(iTMultiContent *);

typedef TMultiContentInfo_ TMultiContentInfo;

typedef slim_int (*MultiContent_GetInfoProc)(iTMultiContent *, TMultiContentInfo *);

struct TMultiContentClass_
{
  TContentClass *fContentClass;
  TDataArena *fArena;
  slim_int fClassID;
  TMultiContentChannelClass *fMultiContentChannelClass;
  TMultiContentReviverClass *fReviverClass;
  MultiContent_NewContentSpecProc fNewContentSpec;
  MultiContent_TidyProc fTidy;
  MultiContent_TidyItemProc fTidyItem;
  MultiContent_UpdateContentSpecProc fUpdateContentSpec;
  MultiContent_AbortProc fAbort;
  MultiContent_GetInfoProc fGetInfo;
};

typedef TMultiContentClass_ TMultiContentClass;

typedef TxxToken_ TxxToken;

typedef TTokenizer_ TTokenizer;

typedef TxxToken *(*Tokenizer_CurrentTokenProc)(TTokenizer *);

typedef TReaderInput_ TReaderInput;

typedef slim_int (*Tokenizer_ReadProc)(TTokenizer *, TReaderInput *);

typedef void (*Tokenizer_ResetTokenProc)(TTokenizer *, slim_int);

typedef slim_bool (*Tokenizer_InitProc)(TTokenizer *, TTokenizerClass *);

typedef void (*Tokenizer_TidyProc)(TTokenizer *);

struct TTokenizerClass_
{
  slim_int fObjectSize;
  Tokenizer_CurrentTokenProc fCurrentToken;
  Tokenizer_ReadProc fRead;
  Tokenizer_ResetTokenProc fResetToken;
  Tokenizer_InitProc fInit;
  Tokenizer_TidyProc fTidy;
};

typedef TTokenizerClass_ TTokenizerClass;

typedef TInetMsgTokenizer_ TInetMsgTokenizer;

typedef slim_bool (*InetMsgTokenizer_FindBoundaryProc)(TInetMsgTokenizer *, slim_split_ss *, slim_split_ss *);

struct TInetMsgTokenizerClass_
{
  TTokenizerClass fBase;
  slim_int fDefaultSplitFlag;
  InetMsgTokenizer_FindBoundaryProc fFindBoundary;
};

typedef TInetMsgTokenizerClass_ TInetMsgTokenizerClass;

typedef TTokenHandler_ TTokenHandler;

typedef slim_int (*TokenHandler_HandleTokenProc)(TTokenHandler *, TxxToken *, slim_opaque);

struct TTokenHandlerClass_
{
  TokenHandler_HandleTokenProc fHandleToken;
};

typedef TTokenHandlerClass_ TTokenHandlerClass;

typedef iTMultiContentReviver_ **TMultiContentReviver;

typedef slim_int (*MultiContentReviver_NewProc)(TMultiContentReviverClass *, iTMultiContent *, TMultiContentReviver *);

typedef iTMultiContentReviver_ iTMultiContentReviver;

typedef slim_bool (*MultiContentReviver_EqualProc)(iTMultiContentReviver *, iTMultiContentReviver *);

typedef iTMultiContent_ **TMultiContent;

typedef slim_int (*MultiContentReviver_ReviveProc)(iTMultiContentReviver *, TMultiContent *);

typedef void (*MultiContentReviver_TidyProc)(iTMultiContentReviver *);

struct TMultiContentReviverClass_
{
  TMultiContentClass *fMultiContentClass;
  MultiContentReviver_NewProc fNew;
  MultiContentReviver_EqualProc fEqual;
  MultiContentReviver_ReviveProc fRevive;
  MultiContentReviver_TidyProc fTidy;
};

struct TMIMEMPContentReviverClass_
{
  TMultiContentReviverClass fBase;
};

typedef TMIMEMPContentReviverClass_ TMIMEMPContentReviverClass;

struct TMIMEMPContentClass_
{
  TMultiContentClass fBase;
  slim_int fFlag;
  slim_int fMaxStayTime;
  TInetMsgTokenizerClass fTokenizerClass;
  TTokenHandlerClass fHandlerClass;
  TMIMEMPContentReviverClass fReviverClass;
};

typedef TMIMEMPContentClass_ TMIMEMPContentClass;

typedef iTUserContent_ iTUserContent;

typedef TUserContentItem_ TUserContentItem;

typedef slim_bool (*UserContent_InitItemProc)(iTUserContent *, TUserContentItem *);

struct TUserContentClass_
{
  TMultiContentClass fBase;
  slim_int fItemSize;
  UserContent_InitItemProc fInitItem;
};

typedef TUserContentClass_ TUserContentClass;

typedef TBrowserPageSaveInfo_ TBrowserPageSaveInfo;

typedef slim_int (*BrowserPageSaveInfo_DumpPaneProc)(TBrowserPageSaveInfo *, TBrowserPane *, slim_int);

typedef void (*BrowserPageSaveInfo_TidyProc)(TBrowserPageSaveInfo *);

typedef slim_bool (*BrowserPageSaveInfo_CheckContentProc)(TBrowserPageSaveInfo *, TContent, slim_int, slim_bool);

struct TBrowserPageSaveInfoClass_
{
  TURLSchemeInfoClass *fURLSchemeInfoClass;
  TMIMEInfoClass *fMIMEInfoClass;
  TDataArena *fArena;
  BrowserPageSaveInfo_DumpPaneProc fDumpPane;
  BrowserPageSaveInfo_TidyProc fTidy;
  BrowserPageSaveInfo_CheckContentProc fCheckContent;
};

typedef TBrowserPageSaveInfoClass_ TBrowserPageSaveInfoClass;

struct TPageSaveContentReviverClass_
{
  TMultiContentReviverClass fBase;
};

typedef TPageSaveContentReviverClass_ TPageSaveContentReviverClass;

typedef iTPageSaveContent_ iTPageSaveContent;

typedef slim_bool (*iTPageSaveContentAllowLoadFromExternalProc)(iTPageSaveContent *, TContentRequest *);

struct TPageSaveContentClass_
{
  TMultiContentClass fBase;
  TPageSaveContentReviverClass fReviverClass;
  TBrowserPageSaveInfoClass *fPageSaveInfoClass;
  slim_int fDefaultFlag;
  iTPageSaveContentAllowLoadFromExternalProc fAllowLoadFromExternalProc;
};

typedef TPageSaveContentClass_ TPageSaveContentClass;

typedef TSavedPageDataFeeder_ TSavedPageDataFeeder;

typedef TSSLSessionDBKey_ TSSLSessionDBKey;

typedef TSSLSessionDBRecord_ TSSLSessionDBRecord;

typedef slim_int (*TSSLSessionDBStoreProc)(slim_opaque, TSSLSessionDBKey *, TSSLSessionDBRecord *);

typedef slim_int (*TSSLSessionDBFetchProc)(slim_opaque, TSSLSessionDBKey *, TSSLSessionDBRecord *);

typedef void (*TSSLSessionDBDeleteProc)(slim_opaque, TSSLSessionDBKey *);

typedef void (*TSSLSessionDBClearProc)(slim_opaque);

typedef void (*TSSLSessionDBUnregisterProc)(slim_opaque);

struct TSSLSessionDB_
{
  slim_opaque fUserData;
  TSSLSessionDBStoreProc fStoreProc;
  TSSLSessionDBFetchProc fFetchProc;
  TSSLSessionDBDeleteProc fDeleteProc;
  TSSLSessionDBClearProc fClearProc;
  TSSLSessionDBUnregisterProc fUnregisterProc;
};

typedef TSSLSessionDB_ TSSLSessionDB;

typedef TCertDB_ TCertDB;

struct TCertDBDesc_
{
  slim_opaque fCertStoreDesc[3];
};

typedef TCertDBDesc_ TCertDBDesc;

struct TCertDBManager_
{
  slim_int fFlag;
  TCertDB *fDB;
  TCertDBDesc fDesc;
};

typedef TCertDBManager_ TCertDBManager;

struct TCryptRandom_
{
  slim_word fBytesNeeded;
  slim_byte fState[16];
  slim_word fOutputAvailable;
  slim_byte fOutput[16];
};

typedef TCryptRandom_ TCryptRandom;

typedef slim_int (*TCertStoreOpenProc)(TCertStore *, slim_int, slim_opaque *);

typedef void (*TCertStoreCloseProc)(TCertStore *, slim_opaque);

typedef TCertStoreItem_ TCertStoreItem;

typedef slim_int (*TCertStoreImportProc)(TCertStore *, slim_opaque, TCertStoreItem *, slim_opaque *);

typedef slim_int (*TCertStoreDeleteProc)(TCertStore *, slim_opaque, slim_opaque);

typedef slim_int (*TCertStoreBeginFindProc)(TCertStore *, slim_opaque, slim_opaque *);

typedef TCertFindInfo_ TCertFindInfo;

typedef slim_int (*TCertStoreFindNextProc)(TCertStore *, slim_opaque, slim_opaque, TCertFindInfo *, slim_opaque *);

typedef void (*TCertStoreEndFindProc)(TCertStore *, slim_opaque, slim_opaque);

typedef slim_int (*TCertStoreOpenItemProc)(TCertStore *, slim_opaque, slim_opaque, TCertStoreItem *);

typedef void (*TCertStoreCloseItemProc)(TCertStore *, slim_opaque, slim_opaque, TCertStoreItem *);

typedef slim_int (*TCertStoreUpdateProc)(TCertStore *, slim_opaque, slim_opaque, TCertStoreItem *, slim_int);

struct TCertStore_
{
  TCertStoreOpenProc fOpenProc;
  TCertStoreCloseProc fCloseProc;
  TCertStoreImportProc fImportProc;
  TCertStoreDeleteProc fDeleteProc;
  TCertStoreBeginFindProc fBeginFindProc;
  TCertStoreFindNextProc fFindNextProc;
  TCertStoreEndFindProc fEndFindProc;
  TCertStoreOpenItemProc fOpenItemProc;
  TCertStoreCloseItemProc fCloseItemProc;
  TCertStoreUpdateProc fUpdateProc;
};

typedef TCertStore_ TCertStore;

typedef TCertStoreDesc_ TCertStoreDesc;

struct TRomCertStore_
{
  TCertStore fBase;
  slim_handle fItemList;
  slim_int fMaxItems;
  slim_int fCurrentItems;
  TCertStoreDesc *fHeadDesc;
};

typedef TRomCertStore_ TRomCertStore;

struct TMemCertStore_
{
  TCertStore fBase;
  slim_handle fItemList;
  slim_int fMaxItems;
  slim_int fCurrentItems;
  TCertStoreDesc *fHeadDesc;
};

typedef TMemCertStore_ TMemCertStore;

struct TCertDB_
{
  TCertStore *fStore[3];
};

struct TSSLSessionCache_
{
  TSpecList fBase;
  TSSLClass *fClass;
  slim_int fLimitSessions;
  slim_bool fInitialized;
};

typedef TSSLSessionCache_ TSSLSessionCache;

typedef slim_int TSSLCipherSuite;

struct TSSLCipherSuitePref_
{
  slim_int fV2Size;
  slim_int fV3Size;
  TSSLCipherSuite fV2List[6];
  TSSLCipherSuite fV3List[13];
};

typedef TSSLCipherSuitePref_ TSSLCipherSuitePref;

typedef slim_int (*TSSLCertListVerifyProc)(TCertList, slim_opaque);

typedef slim_bool (*TSSLCurrentTimeProc)(slim_time *, slim_opaque);

typedef void (*TSSLNotifyStateProc)(TSSL, slim_int, slim_int, slim_opaque);

typedef iTSSL_ iTSSL;

typedef slim_int (*TSSLStateProc)(iTSSL *);

struct TSSLClass_
{
  TSSLSessionDB fSessionDB;
  TCertDBManager fCertDBManager;
  TCryptRandom fRandomGenerator;
  TRomCertStore fRomCertStore;
  TMemCertStore fMemCertStore;
  TCertDB fCertDB;
  TSSLSessionCache fSessionCache;
  TSSL fFirstInstance;
  TSSL fLastInstance;
  slim_int fFlag;
  slim_int fCertCheckFlag;
  slim_int fCertLimitLen;
  slim_int fCertChainLimitLen;
  slim_int fTimeLimit[5];
  TSSLCipherSuitePref fCipherSuitePref;
  TSSLCertListVerifyProc fCertListVerifyProc;
  TSSLServerCertConfirmProc fServerCertConfirmProc;
  TSSLClientCertSelectProc fClientCertSelectProc;
  TSSLPrivateKeyEncryptProc fPrivateKeyEncryptProc;
  TSSLCurrentTimeProc fCurrentTimeProc;
  TSSLDeleteCallback fDeleteCallback;
  TSSLNotifyStateProc fNotifyStateProc;
  slim_opaque fCertListVerifyAux;
  slim_opaque fServerCertConfirmAux;
  slim_opaque fClientCertSelectAux;
  slim_opaque fPrivateKeyEncryptAux;
  slim_opaque fCurrentTimeAux;
  slim_opaque fDeleteCallbackAux;
  slim_opaque fNotifyStateAux;
  slim_int (*fTCPReadPeer)(slim_int, slim_byte *, slim_int);
  slim_int (*fTCPWritePeer)(slim_int, slim_byte *, slim_int);
  TSSLStateProc fHandleStateProc;
};

typedef TxxMLSchemaStore_ TxxMLSchemaStore;

struct __attribute__((aligned(8))) TPageOutlineClass_
{
  TxxMLSchemaStore *fSchemaStore;
  slim_int fTabWidth;
};

typedef TPageOutlineClass_ TPageOutlineClass;

typedef TNetDocClass_ TNetDocClass;

struct TNetDocChainClass_
{
  TNetDocClass *fNetDocClass;
};

typedef TNetDocChainClass_ TNetDocChainClass;

typedef TNetDoc_ TNetDoc;

struct TNetDocClass_
{
  slim_int fMaxNetDocs;
  TNetDoc *fNetDoc;
  TBrowser *fBrowser;
  void *(*fAltAllocProc)(slim_int);
  void (*fAltFreeProc)(void *);
  TPageOutlineClass *fPageOutlineClass;
  TContentClass *fContentClass;
  TContentDeterminerClass *fDeterminerClass;
};

typedef slim_bool (*TNetDoc_StartProcessorProc)(TNetDoc *);

typedef TOutlineNameID_ TOutlineNameID;

typedef slim_int (*PageOutline_ItemSizeProc)(slim_int, TOutlineNameID *, slim_int);

struct TNetDocProcessorClass_
{
  TNetDoc_StartProcessorProc fStartProc;
  PageOutline_ItemSizeProc fItemSizeProc;
};

typedef TNetDocProcessorClass_ TNetDocProcessorClass;

typedef TDOMMethodInfo_ TDOMMethodInfo;

typedef TJSCCodeInfo_ TJSCCodeInfo;

typedef TDOMMethodInfo *(*TDOMMethodFindProc)(TDOMModuleEntry *, slim_char *, slim_int, TJSCCodeInfo **, slim_split_ss *);

typedef iTJSThread_ **TJSThread;

typedef iTJSObject_ **TJSObject;

typedef TJSRegArray_ TJSRegArray;

typedef void (*slim_jsccode_precheck_proc)(TJSThread, TJSObject, TJSObject, TJSRegArray *, slim_opaque);

typedef TDOMAttrInfo_ TDOMAttrInfo;

typedef TDOMBind_ TDOMBind;

typedef TJSValue_ TJSValue;

typedef slim_bool (*TDOMAttrProc)(TJSThread, TDOMBind *, TJSObject, slim_int, TDOMAttrInfo *, TJSValue *, slim_bool);

typedef TDOMAttrInfo *(*TDOMAttrFindProc)(TDOMModuleEntry *, slim_char *, slim_int, TDOMAttrProc *, slim_split_ss *);

typedef slim_bool (*TDOMCheckIFProc)(slim_int *, slim_int);

typedef TDOMIFInfo_ TDOMIFInfo;

struct TDOMModuleEntry_
{
  TDOMMethodFindProc fMethodFind;
  slim_jsccode_precheck_proc fPreCheck;
  TDOMAttrFindProc fAttrFind;
  TDOMCheckIFProc fCheckIF;
  TDOMIFInfo *fInfo;
  slim_int fItemSize;
  slim_char **fIFNameTable;
  TJSCCodeInfo *fMethodProcTable;
  TDOMAttrProc *fAttrProcTable;
};

typedef TDOMModuleEntry_ TDOMModuleEntry;

struct TDOMModules_
{
  slim_int fModules;
  TDOMModuleEntry fEntry[4];
};

typedef TDOMModules_ TDOMModules;

typedef TNSPlugin_ TNSPlugin;

typedef TJSClass_ TJSClass;

typedef slim_char *(*js_method_name)(TJSClass *, TJSObject);

typedef slim_char *(*js_method_typeof)(TJSClass *, TJSObject, slim_int *);

typedef slim_bool (*js_method_get)(TJSThread, TJSObject, TFixedString, slim_int, TJSValue *);

typedef slim_bool (*js_method_put)(TJSThread, TJSObject, TFixedString, TJSValue *, slim_int);

typedef TJSCanPutInfo_ TJSCanPutInfo;

typedef slim_int (*js_method_can_put)(TJSThread, TJSObject, TFixedString, TJSCanPutInfo *);

typedef slim_bool (*js_method_has_property)(TJSThread, TJSObject, TFixedString, slim_int);

typedef slim_bool (*js_method_delete)(TJSThread, TJSObject, TFixedString);

typedef slim_int (*js_method_default_value)(TJSThread, TJSObject, slim_int, slim_int);

typedef slim_int (*js_method_first_enum_object)(TJSThread, TJSObject, TJSObject *);

typedef TJSEnumCookie_ TJSEnumCookie;

typedef slim_int (*js_method_enum)(TJSThread, TJSObject, TJSEnumCookie *, TFixedString *);

typedef void (*js_method_finalize)(TJSClass *, TJSObject);

typedef slim_bool (*js_method_construct)(TJSThread, TJSObject, TJSObject, TJSRegArray *);

typedef slim_bool (*js_method_call)(TJSThread, TJSObject, TJSObject, TJSRegArray *);

typedef slim_bool (*js_method_has_instance)(TJSThread, TJSObject, TJSValue *);

typedef slim_int (*js_method_gc_count)(TJSClass *, TJSObject);

typedef void (*js_method_gc_mark)(TJSClass *, TJSObject);

typedef slim_int (*js_apply_operator_proc)(TJSValue *, slim_int, slim_opaque, TJSValue *);

typedef slim_int (*js_method_apply_operator)(TJSThread, TJSObject, TFixedString, js_apply_operator_proc, slim_opaque, TJSValue *);

struct iTJSDirectAccessor_;

typedef struct iTJSDirectAccessor_ **TJSDirectAccessor;

typedef TJSDirectAccessor (*js_method_peek_direct_accessor)(TJSClass *, TJSObject);

typedef slim_bool (*js_method_is_undetectable)(TJSClass *, TJSObject);

typedef slim_int (*js_method_define_getter_setter)(TJSThread, TJSObject, TFixedString, TJSObject, TJSObject);

struct TJSObjectClass_
{
  slim_int fID;
  js_method_name fNameProc;
  js_method_typeof fTypeofProc;
  js_method_get fGet;
  js_method_put fPut;
  js_method_can_put fCanPut;
  js_method_has_property fHasProperty;
  js_method_delete fDelete;
  js_method_default_value fDefaultValue;
  js_method_first_enum_object fFirstEnumObject;
  js_method_enum fEnumerate;
  js_method_finalize fFinalize;
  js_method_construct fConstruct;
  js_method_call fCall;
  js_method_has_instance fHasInstance;
  js_method_gc_count fGCCount;
  js_method_gc_mark fGCMark;
  js_method_apply_operator fApplyOperator;
  js_method_peek_direct_accessor fPeekDirectAccessor;
  js_method_is_undetectable fIsUndetectable;
  js_method_define_getter_setter fDefineGetterSetter;
  TJSObjectClass_ *fParentClass;
};

typedef TJSObjectClass_ TJSObjectClass;

typedef TJSDelayObjectBase_ TJSDelayObjectBase;

typedef slim_bool (*js_proc_new_delay_obj)(TJSThread, TJSObject, TFixedString, TJSDelayObjectBase *, TJSValue *);

typedef void (*js_ccode)(TJSThread, TJSObject, TJSObject, TJSRegArray *);

struct TJSCCodeInfo_
{
  slim_char *fFuncName;
  js_ccode fCCodeProc;
  slim_int fArgc;
  slim_jsccode_precheck_proc fPreCheckProc;
};

struct TJSDelayCCodeObject_
{
  js_proc_new_delay_obj fDelayNewProc;
  slim_char *fName;
  slim_int fLen;
  slim_int fAttr;
  TJSCCodeInfo fCCodeInfo;
};

typedef TJSDelayCCodeObject_ TJSDelayCCodeObject;

typedef slim_int (*TDOMSpecialProc)(TJSThread, TJSObject, TFixedString, TJSValue *);

typedef slim_char *(*TDOMObjCustomNameProc)(TDOMBind *, TJSObject);

typedef slim_char *(*TDOMObjCustomTypeofProc)(TDOMBind *, TJSObject, slim_int *);

typedef TToken_ TToken;

typedef slim_bool (*TDOMCheckPolicyProc)(TJSThread, TJSObject, TToken *, slim_int);

typedef slim_bool (*TDOMCheckXHRPolicyProc)(TJSThread, TURLString);

typedef slim_int (*DOMBindExternal_NotifyNewProc)(TBrowser *, TBrowserPane *, slim_opaque *);

typedef void (*DOMBindExternal_NotifyDeleteProc)(slim_opaque);

typedef void (*DOMBindExternal_AddFavoriteProc)(slim_opaque, slim_char *, slim_int, slim_char *, slim_int, slim_int);

struct TDOMBindExternalInterface_
{
  DOMBindExternal_NotifyNewProc fNotifyNewProc;
  DOMBindExternal_NotifyDeleteProc fNotifyDeleteProc;
  DOMBindExternal_AddFavoriteProc fAddFavoriteProc;
};

typedef TDOMBindExternalInterface_ TDOMBindExternalInterface;

struct TDOMBindClass_
{
  TBrowser *fBrowser;
  slim_int fFlag;
  TTree fClassTree;
  slim_pix fWindowList;
  TDOMModules fModules;
  TNSPlugin *fPlugin;
  TJSObjectClass fDOMObjClass;
  TJSObjectClass fDOMNobindingClass;
  TJSObjectClass fDOMRedirectClass;
  TJSObjectClass fDOMRedirectMethodClass;
  TJSObjectClass fDOMClassClass;
  TJSObjectClass fDOMProtoClass;
  TJSObjectClass fDOMDormantClass;
  TJSObjectClass fDOMEventObjClass;
  TJSDelayCCodeObject fDOMEventObj_MethodList[3];
  TJSCCodeInfo fDOMParserProcInfo;
  TJSCCodeInfo fXMLSerializerProcInfo;
  TJSCCodeInfo fNewImageProcInfo;
  TJSCCodeInfo fNewOptionProcInfo;
  TJSObjectClass fDOMXMLHttpReqClass;
  TJSDelayCCodeObject fXMLHttpReqObj_MethodList[6];
  TJSCCodeInfo fXMLHttpRequestProcInfo;
  TJSObjectClass fNDCObjClass;
  TJSCCodeInfo fNDCMethodProcInfo;
  TSpecList fTimerList;
  slim_int fLastTick;
  slim_int fLastID;
  TFixedString fUserAgent;
  TString fAppCodeName;
  TString fAppName;
  TString fAppVersion;
  TString fAppMinorVersion;
  TString fOSCPU;
  TString fCPUClass;
  TString fPlatform;
  TString fLanguage;
  TString fBrowserLanguage;
  TString fSystemLanguage;
  TString fUserLanguage;
  TString fVendor;
  TString fVendorSub;
  TString fProduct;
  TString fProductSub;
  TDOMSpecialProc fSpecialProc;
  void (*fInitFinNotifyProc)(TDOMBind_ *, slim_bool, slim_opaque);
  slim_opaque fInitFinNotifyAux;
  TDOMObjCustomNameProc fObjNameProc;
  TDOMObjCustomTypeofProc fObjTypeofProc;
  TDOMCheckPolicyProc fCheckPolicyProc;
  TDOMCheckXHRPolicyProc fCheckXHRPolicyProc;
  slim_bool (*fCheckOnLineProc)(TJSThread, TDOMBind_ *, TJSObject);
  slim_int (*fReadCookieProc)(TJSThread, TDOMBind_ *, TJSObject, TString *);
  slim_int (*fReadReferrerProc)(TJSThread, TDOMBind_ *, TJSObject, TURLString, TURLString *, slim_opaque);
  slim_opaque fReadReferrerAux;
  TDOMBindExternalInterface fExternalIF;
};

typedef TDOMBindClass_ TDOMBindClass;

typedef slim_bool (*TPageDepotScriptEngine_InitializeProc)(TPageDepotScriptEngineClass *, TNSPlugin *);

typedef slim_bool (*TPageDepotScriptEngine_SetNavigatorAttrProc)(TPageDepotScriptEngineClass *, slim_int, slim_opaque);

typedef void (*TPageDepotScriptEngine_NotifyFinalizeProc)(TPageDepotScriptEngineClass *);

typedef void (*TPageDepotScriptEngine_FinalizeProc)(TPageDepotScriptEngineClass *);

typedef void (*TPageDepotScriptEngine_NotifyDeletePaneProc)(TPageDepotScriptEngineClass *, TBrowserPane *, slim_bool);

typedef void (*TPageDepotScriptEngine_QueryDeleteNodeProc)(TPageDepotScriptEngineClass *, TNetDoc *, slim_pix, slim_bool *);

typedef void (*TPageDepotScriptEngine_NotifyMutationProc)(TPageDepotScriptEngineClass *, TNetDoc *, slim_pix, slim_pix);

typedef slim_int (*TPageDepotScriptEngine_PreProgressProc)(TPageDepotScriptEngineClass *);

typedef slim_int (*TPageDepotScriptEngine_PostProgressProc)(TPageDepotScriptEngineClass *);

typedef TPageDepotScriptEngine_ TPageDepotScriptEngine;

typedef TPageOutline_ TPageOutline;

typedef TContentParserStore_ TContentParserStore;

typedef slim_bool (*TPageDepotScriptEngine_NewContextProc)(TPageDepotScriptEngine *, TPageOutline *, TContentParserStore *, TBrowserPane *);

typedef TPageScriptInfo_ TPageScriptInfo;

typedef slim_opaque (*TPageDepotScriptEngine_StartThreadProc)(TPageDepotScriptEngine *, slim_char *, slim_int, TPageScriptInfo *);

typedef slim_int (*TPageDepotScriptEngine_ParseUserScriptProc)(TPageDepotScriptEngine *, slim_char *, slim_int, TPageScriptInfo *, slim_opaque *);

typedef slim_int (*TPageDepotScriptEngine_ProgressProc)(TPageDepotScriptEngine *, slim_bool);

typedef slim_int (*TPageDepotScriptEngine_ThreadProgressProc)(TPageDepotScriptEngine *, slim_opaque);

typedef void (*TPageDepotScriptEngine_StopThreadProc)(TPageDepotScriptEngine *, slim_opaque);

typedef void (*TPageDepotScriptEngine_DeleteContextProc)(TPageDepotScriptEngine *);

typedef TPageEvent_ TPageEvent;

typedef slim_opaque (*TPageDepotScriptEngine_NewEventObjProc)(TPageDepotScriptEngine *, TPageEvent *);

typedef void (*TPageDepotScriptEngine_DeleteEventObjProc)(TPageDepotScriptEngine *, slim_opaque);

typedef TPageThread_Event_ TPageThread_Event;

typedef slim_opaque (*TPageDepotScriptEngine_StartEventThreadProc)(TPageDepotScriptEngine *, slim_char *, slim_int, TPageScriptInfo *, slim_opaque, TPageThread_Event *);

typedef void (*TPageDepotScriptEngine_StopEventThreadProc)(TPageDepotScriptEngine *, slim_opaque, TPageEvent *);

typedef slim_bool (*TPageDepotScriptEngine_IsThreadRunningProc)(TPageDepotScriptEngine *, slim_opaque);

typedef void (*TPageDepotScriptEngine_DeleteFuncObjProc)(TPageDepotScriptEngine *, slim_opaque);

typedef void (*TPageDepotScriptEngine_AbortProc)(TPageDepotScriptEngine *);

struct TPageDepotScriptEngineClass_
{
  slim_int fType;
  TDOMBindClass fDOMBindClass;
  TBrowser *fBrowser;
  slim_int fMaxStayTime;
  TPageDepotScriptEngine_InitializeProc fInitialize;
  TPageDepotScriptEngine_SetNavigatorAttrProc fSetNavigatorAttr;
  TPageDepotScriptEngine_NotifyFinalizeProc fNotifyFinalize;
  TPageDepotScriptEngine_FinalizeProc fFinalize;
  TPageDepotScriptEngine_NotifyDeletePaneProc fNotifyDeletePane;
  TPageDepotScriptEngine_QueryDeleteNodeProc fQueryDeleteNode;
  TPageDepotScriptEngine_NotifyMutationProc fNotifyMutation;
  TPageDepotScriptEngine_PreProgressProc fPreProgress;
  TPageDepotScriptEngine_PostProgressProc fPostProgress;
  TPageDepotScriptEngine_NewContextProc fNewContext;
  TPageDepotScriptEngine_StartThreadProc fStartThread;
  TPageDepotScriptEngine_ParseUserScriptProc fParseUserScript;
  TPageDepotScriptEngine_ProgressProc fProgress;
  TPageDepotScriptEngine_ThreadProgressProc fThreadProgress;
  TPageDepotScriptEngine_StopThreadProc fStopThread;
  TPageDepotScriptEngine_DeleteContextProc fDeleteContext;
  TPageDepotScriptEngine_NewEventObjProc fNewEventObj;
  TPageDepotScriptEngine_DeleteEventObjProc fDeleteEventObj;
  TPageDepotScriptEngine_StartEventThreadProc fStartEventThread;
  TPageDepotScriptEngine_StopEventThreadProc fStopEventThread;
  TPageDepotScriptEngine_IsThreadRunningProc fIsThreadRunning;
  TPageDepotScriptEngine_DeleteFuncObjProc fDeleteFuncObj;
  TPageDepotScriptEngine_AbortProc fAbort;
};

typedef TPageDepotScriptEngineClass_ TPageDepotScriptEngineClass;

typedef TSpecList TJSObjectList;

struct TFastArray_
{
  TMemNode fBase;
  slim_short fItemSize;
  slim_short fSizeLog;
  slim_int fItems;
};

typedef TFastArray_ TFastArray;

struct TOpaqueArray_
{
  TFastArray fBase;
};

typedef TOpaqueArray_ TOpaqueArray;

struct __attribute__((aligned(8))) TJSMarkStack_
{
  TOpaqueArray fBase;
  slim_int fLength;
};

typedef TJSMarkStack_ TJSMarkStack;

typedef TListItemHolder_ TListItemHolder;

struct TListVisit_
{
  slim_pix fIndex;
  slim_handle fHandle;
  TListItemHolder *fItemHolder;
};

typedef TListVisit_ TListVisit;

struct TJSListVisitN_
{
  TListVisit fMain;
  TListVisit fSub;
  TJSObject fPermanentObj;
};

typedef TJSListVisitN_ TJSListVisitN;

struct TJSSingleListContainer_
{
  TList fBase;
};

typedef TJSSingleListContainer_ TJSSingleListContainer;

struct TJSBindListContainer_
{
  TJSSingleListContainer fBase;
};

typedef TJSBindListContainer_ TJSBindListContainer;

typedef THashTableNode_ THashTableNode;

struct TMultiTableHash_
{
  THashTableNode *fTableNode;
  slim_short fMaxTableLevel;
  slim_short fNextOffset;
  slim_opaque fItemColl;
  slim_opaque fKeyColl;
  THashGetKeyProc fGetKeyProc;
  THashItemHashProc fItemHashProc;
  THashExtHashProc fExtHashProc;
  THashEqualProc fEqualProc1;
  THashLockItemProc fLockItemProc;
  THashUnlockItemProc fUnlockItemProc;
};

typedef TMultiTableHash_ TMultiTableHash;

struct THashTableNode_
{
  slim_handle fHashTable;
  slim_int fTableSize;
  slim_int fTableSizeMask;
  slim_int fLevel;
  slim_int fItemCount;
};

typedef iTJSBind_ iTJSBind;

typedef void (*js_ibind_find_proc)(iTJSBind *, slim_opaque);

typedef __int64 slim_long;

struct TJSValue_Base_
{
  slim_long fType;
};

typedef TJSValue_Base_ TJSValue_Base;

struct iTJSString_;

typedef struct iTJSString_ **TJSString;

struct TJSValue_String_
{
  slim_long fType;
  TJSString fString;
};

typedef TJSValue_String_ TJSValue_String;

struct __attribute__((aligned(8))) TJSValue_Int_
{
  slim_long fType;
  slim_int fInt;
};

typedef TJSValue_Int_ TJSValue_Int;

struct __attribute__((aligned(8))) TJSValue_Bool_
{
  slim_long fType;
  slim_bool fBool;
};

typedef TJSValue_Bool_ TJSValue_Bool;

typedef double slim_double;

struct TJSValue_Double_
{
  slim_long fType;
  slim_double fDouble;
};

typedef TJSValue_Double_ TJSValue_Double;

struct TJSValue_Object_
{
  slim_long fType;
  TJSClass *fClass;
  TJSObject fObject;
};

typedef TJSValue_Object_ TJSValue_Object;

struct TJSValue_GetterSetter_
{
  slim_long fType;
  TJSClass *fClass;
  TJSObject fGetter;
  TJSObject fSetter;
};

typedef TJSValue_GetterSetter_ TJSValue_GetterSetter;

struct iTJSFunction_;

typedef struct iTJSFunction_ **TJSFunction;

struct TJSValue_Function_
{
  slim_long fType;
  TJSFunction fFunction;
  TJSObject fContextObject;
};

typedef TJSValue_Function_ TJSValue_Function;

struct TJSValue_CCode_
{
  TJSCCodeInfo *fCCodeInfo;
  slim_opaque fPreCheckData;
  TJSObject fContextObject;
};

typedef TJSValue_CCode_ TJSValue_CCode;

struct __attribute__((aligned(8))) TJSValue_ID_
{
  slim_long fType;
  slim_int fIDFlag;
  TFixedString fID;
  slim_int fLocalIndex;
};

typedef TJSValue_ID_ TJSValue_ID;

struct TJSValue_Intpair_
{
  slim_long fType;
  slim_long fInt1;
  slim_long fInt2;
  slim_long fInt3;
};

typedef TJSValue_Intpair_ TJSValue_Intpair;

struct TJSValue_UserData_
{
  slim_long fType;
  slim_opaque fUserData;
  slim_opaque fUserData2;
};

typedef TJSValue_UserData_ TJSValue_UserData;

typedef TJSAddr_ *TJSAddr;

struct __attribute__((aligned(8))) TJSValue_Addr_
{
  slim_long fType;
  TJSAddr fAddr;
  slim_int fDepth;
};

typedef TJSValue_Addr_ TJSValue_Addr;

struct TJSValue_Addrpair_
{
  slim_long fType;
  TJSAddr fAddr1;
  TJSAddr fAddr2;
};

typedef TJSValue_Addrpair_ TJSValue_Addrpair;

struct TJSValue_DelayObject_
{
  slim_long fType;
  TJSClass *fClass;
  TJSObject fContextObject;
  TJSDelayObjectBase *fDelayObjectBase;
};

typedef TJSValue_DelayObject_ TJSValue_DelayObject;

union TJSValue_
{
  TJSValue_Base uBase;
  TJSValue_String uString;
  TJSValue_Int uInt;
  TJSValue_Bool uBool;
  TJSValue_Double uDouble;
  TJSValue_Object uObject;
  TJSValue_GetterSetter uGetterSetter;
  TJSValue_Function uFunction;
  TJSValue_CCode uCCode;
  TJSValue_ID uID;
  TJSValue_Intpair uIntpair;
  TJSValue_UserData uUserData;
  TJSValue_Addr uAddr;
  TJSValue_Addrpair uAddrpair;
  TJSValue_DelayObject uDelayObject;
};

struct __attribute__((aligned(8))) iTJSBind_
{
  slim_opaque fHashNext;
  TJSObject fObject;
  TFixedString fID;
  slim_int fAttribute;
  TJSValue fValue;
  slim_int fHash;
};

struct TJSBindHit_
{
  iTJSBind fiBind;
  slim_pix fBind;
};

typedef TJSBindHit_ TJSBindHit;

struct TJSBindMiss_
{
  TJSObject fObject;
  TFixedString fID;
};

typedef TJSBindMiss_ TJSBindMiss;

typedef iTJSContext_ **TJSContext;

struct TJSOpaqueContainerList_
{
  TOpaqueList fBase;
};

typedef TJSOpaqueContainerList_ TJSOpaqueContainerList;

typedef TJSDelayCConsObject_ TJSDelayCConsObject;

typedef TJSDelayObject_ TJSDelayObject;

typedef TJSCCodeTable_ TJSCCodeTable;

typedef TJSDelayPrototype_ TJSDelayPrototype;

struct TRegExpTree_
{
  TTree fBase;
};

typedef TRegExpTree_ TRegExpTree;

struct __attribute__((aligned(8))) TArray_
{
  TMemNode fBase;
  slim_short fItemSize;
  slim_short fHolderSize;
  slim_short fHoldersPerPage;
  slim_short fPagePadding;
  slim_int fItems;
};

typedef TArray_ TArray;

struct TSpecArray_
{
  TArray fBase;
};

typedef TSpecArray_ TSpecArray;

struct __attribute__((aligned(8))) TREArray_
{
  TSpecArray fArray;
  slim_int fItems;
};

typedef TREArray_ TREArray;

struct __attribute__((aligned(8))) slim_split_ss_
{
  slim_char *s;
  slim_int len;
};

struct TRegExpClass_
{
  TRegExpTree fTree;
  TREArray fStack;
  slim_split_ss fSSbuffer;
};

typedef TRegExpClass_ TRegExpClass;

struct slim_time_
{
  slim_int day;
  slim_int msec;
};

struct TJSExactTime_
{
  slim_int fFlag;
  slim_time fTime;
  slim_int fTick;
};

typedef TJSExactTime_ TJSExactTime;

typedef TI18NConverterClass_ TI18NConverterClass;

typedef slim_bool (*js_post_timeout_dialog_proc)(slim_opaque);

typedef void (*js_zap_timeout_related_commands_proc)(slim_opaque);

struct __attribute__((aligned(8))) TJSClass_
{
  slim_int fFlag;
  TJSObjectList fObjList;
  TJSMarkStack fMark;
  TJSListVisitN fObjVisit;
  slim_int fItems;
  slim_int fRemain;
  TJSBindListContainer fBindContainer;
  TMultiTableHash fHash;
  THashTableNode fTableNode[5];
  js_ibind_find_proc fBindFindProc;
  slim_opaque fBindFindArg;
  TJSBindHit fBindHitTable[32];
  TJSBindMiss fBindMissTable[64];
  TJSContext fContextFirst;
  slim_int fUsedContext;
  TJSThread fThreadFirst;
  TJSThread fProgressThread;
  TJSOpaqueContainerList fFunctionContainer;
  TFixedString fFS_arguments;
  TFixedString fFS_toString;
  TFixedString fFS_valueOf;
  TFixedString fFS_length;
  TFixedString fFS_callee;
  TFixedString fFS_constructor;
  TFixedString fFS_prototype;
  TJSString fEmptyJSString;
  TJSObjectClass *fJSContextObjectClass;
  TJSObjectClass *fJSArrayObjectClass;
  TJSDelayCCodeObject *fJSArrayPrototype_BindDelayCCodeObj;
  slim_int fJSArrayPrototype_Size_BindDelayCCodeObj;
  TJSDelayCConsObject *fJSDelayCConsObject_Array;
  TJSObjectClass *fJSBooleanObjectClass;
  TJSDelayCCodeObject *fJSBooleanPrototype_MethodTable;
  slim_int fJSBooleanPrototype_Size_MethodTable;
  TJSDelayCConsObject *fJSDelayCConsObject_Boolean;
  TJSObjectClass *fJSDateObjectClass;
  TJSDelayCCodeObject *fJSDate_BindDelayCCodeObj;
  slim_int fJSDate_Size_BindDelayCCodeObj;
  TJSDelayCCodeObject *fJSDatePrototype_BindDelayCCodeObj;
  slim_int fJSDatePrototype_Size_BindDelayCCodeObj;
  TJSDelayCConsObject *fJSDelayCConsObject_Date;
  TJSObjectClass *fJSErrorObjectClass;
  TJSDelayCCodeObject *fJSErrorPrototype_BindDelayCCodeObj;
  slim_int fJSErrorPrototype_Size_BindDelayCCodeObj;
  TJSDelayCConsObject *fJSDelayCConsObject_Error;
  TJSDelayCConsObject *fJSDelayCConsObject_EvalError;
  TJSDelayCConsObject *fJSDelayCConsObject_RangeError;
  TJSDelayCConsObject *fJSDelayCConsObject_ReferenceError;
  TJSDelayCConsObject *fJSDelayCConsObject_SyntaxError;
  TJSDelayCConsObject *fJSDelayCConsObject_TypeError;
  TJSDelayCConsObject *fJSDelayCConsObject_URIError;
  TJSObjectClass *fJSArgumentsObjectClass;
  TJSDelayObject *fJSDelayObject_Arguments;
  TJSObjectClass *fJSLocalObjectClass;
  TJSObjectClass *fJSLocalHashObjectClass;
  TJSObjectClass *fJSFunctionObjectClass;
  TJSObjectClass *fJSCCodeObjectClass;
  TJSCCodeTable *fJSFunctionClass_InitializeTable;
  TJSDelayCCodeObject *fJSFunctionPrototype_DelayCCodeObjTable;
  slim_int fJSFunctionPrototype_Size_DelayCCodeObjTable;
  TJSCCodeInfo *fJSFunctionPrototype;
  TJSDelayCCodeObject *fJSGlobalObject_BindFunction;
  slim_int fJSGlobalObject_Size_BindFunction;
  TJSObjectClass *fJSMathObjectClass;
  TJSDelayCCodeObject *fJSMathObject_BindFunction;
  slim_int fJSMathObject_Size_BindFunction;
  TJSDelayObject *fJSDelayObject_Math;
  TJSObjectClass *fJSNumberObjectClass;
  TJSDelayCCodeObject *fJSNumberPrototype_BindMethod;
  slim_int fJSNumberPrototype_Size_BindMethod;
  TJSDelayCConsObject *fJSDelayCConsObject_Number;
  TJSObjectClass *fJSObjectObjectClass;
  TJSCCodeTable *fJSObjectClass_InitializeTable;
  TJSDelayPrototype *fJSDelayPrototype_New;
  TJSDelayCCodeObject *fJSObjectPrototype_BindMethod;
  slim_int fJSObjectPrototype_Size_BindMethod;
  TJSObjectClass *fJSRegExpObjectClass;
  TJSDelayCCodeObject *fJSRegExpPrototype_BindMethod;
  slim_int fJSRegExpPrototype_Size_BindMethod;
  TJSDelayCConsObject *fJSDelayCConsObject_RegExp;
  TJSObjectClass *fJSStringObjectClass;
  TJSDelayCCodeObject *fJSStringConstructor_BindFunction;
  slim_int fJSStringConstructor_Size_BindFunction;
  TJSDelayCCodeObject *fJSStringPrototype_BindMethod;
  slim_int fJSStringPrototype_Size_BindMethod;
  TJSDelayCConsObject *fJSDelayCConsObject_String;
  TJSObjectClass *fJSDormantObjectClass;
  TJSCCodeInfo *fJSParseScript;
  TRegExpClass fRegExpClass;
  TJSExactTime fExactTime;
  TI18NConverterClass *fI18NConverterClass;
  slim_int fExecutionTimeout;
  slim_int fMaxStayTime;
  slim_int fMaxStayParseSteps;
  js_post_timeout_dialog_proc fPostTimeoutDialogProc;
  js_zap_timeout_related_commands_proc fZapTimeoutRelatedCommandsProc;
  slim_opaque fUserData;
  slim_int fGCDelayPeriod;
  slim_int fRequestGCTime;
  slim_int fGCSweepMaxTime;
};

typedef TContentParserClass_ TContentParserClass;

struct TNetDocEvaluator_
{
  TContentParserClass *fContentParserClass;
  TNetDocProcessorClass *fNetDocProcessorClass;
};

typedef TNetDocEvaluator_ TNetDocEvaluator;

typedef TContentParser_ TContentParser;

typedef TCDATAFormatterClass_ TCDATAFormatterClass;

typedef TxxMLSchema_ TxxMLSchema;

typedef TInvokerInfo_ TInvokerInfo;

struct TContentParserClass_
{
  slim_int fFlag;
  TI18NConverterClass *fI18NConverterClass;
  TMIMEInfoClass *fMIMEInfoClass;
  TURLSchemeInfoClass *fURLSchemeInfoClass;
  slim_int *fMaxStayTime;
  slim_bool (*fStartProc)(TContentParser *, TContentParserClass *, TContent, TNetDoc *, TPageOutline *, slim_bool);
  void (*fNotifyStartProc)(TContentParser *);
  slim_int (*fParseProc)(TContentParser *, slim_char *, slim_int, slim_int, slim_bool, slim_int *);
  void (*fTidyProc)(TContentParser *);
  slim_int (*fProgressProc)(TContentParser *);
  void (*fAbortProc)(TContentParser *);
  void (*fTidyForRestartProc)(TContentParser *);
  slim_int (*fRewindProc)(TContentParser *);
  TCDATAFormatterClass *fCDATAFormatterClass;
  void (*fInitCDATAFormatter)(TContentParser *);
  TContentDeterminerClass *fContentDeterminerClass;
  TxxMLSchemaStore *fSchemaStore;
  TxxMLSchema *(*fSelectDefaultSchema)(TContentParser *, slim_int, TxxMLSchema *);
  slim_int (*fStartPartialParseProc)(TContentParser *, slim_pix, slim_bool);
  void (*fEndPartialParseProc)(TContentParser *, slim_int, slim_pix *);
  slim_int (*fCreateElementProc)(TContentParser *, slim_char *, slim_int, slim_int, slim_pix *);
  slim_int (*fInsertBeforeNodeProc)(TContentParser *, slim_pix, slim_pix, slim_pix, slim_pix);
  slim_int (*fReplaceChildNodeProc)(TContentParser *, slim_pix, slim_pix, slim_pix, slim_pix);
  slim_int (*fRemoveChildNodeProc)(TContentParser *, slim_pix, slim_pix, slim_pix);
  slim_int (*fReplaceElementProc)(TContentParser *, slim_pix, slim_int, slim_pix, slim_opaque);
  slim_int (*fInsertElementProc)(TContentParser *, slim_pix, slim_int, slim_pix, slim_pix);
  slim_int (*fQueryUnchainProc)(TContentParser *, TInvokerInfo *, slim_pix);
  slim_int (*fNotifyUnchainProc)(TContentParser *, slim_pix);
  slim_int (*fQueryModifyAttributeProc)(TContentParser *, slim_pix, TOutlineNameID *, slim_int *);
  slim_int (*fNotifyModifyAttributeProc)(TContentParser *, slim_pix, TOutlineNameID *, slim_char *, slim_int);
  slim_int (*fParseScriptProc)(TContentParser *, slim_pix, TPageDepotScriptEngine **, slim_opaque *);
};

typedef TXMLErrorHandler_ TXMLErrorHandler;

typedef void (*XMLErrorHandler_TidyProc)(TXMLErrorHandler *);

typedef TSAXParseException_ TSAXParseException;

struct TXMLErrorHandlerClass_
{
  XMLErrorHandler_TidyProc fTidy;
  slim_int (*fWarning)(TXMLErrorHandler *, TSAXParseException *);
  slim_int (*fError)(TXMLErrorHandler *, TSAXParseException *);
  slim_int (*fFatalError)(TXMLErrorHandler *, TSAXParseException *);
};

typedef TXMLErrorHandlerClass_ TXMLErrorHandlerClass;

typedef TXMLContentHandler_ TXMLContentHandler;

typedef void (*XMLContentHandler_TidyProc)(TXMLContentHandler *);

typedef TXMLAttributes_ TXMLAttributes;

typedef TXMLLocator_ TXMLLocator;

struct TXMLContentHandlerClass_
{
  XMLContentHandler_TidyProc fTidy;
  slim_int (*fStartDocument)(TXMLContentHandler *);
  slim_int (*fEndDocument)(TXMLContentHandler *);
  slim_int (*fStartElement)(TXMLContentHandler *, slim_split_ss *, slim_split_ss *, slim_split_ss *, TXMLAttributes *);
  slim_int (*fEndElement)(TXMLContentHandler *, slim_split_ss *, slim_split_ss *, slim_split_ss *);
  slim_int (*fCharacters)(TXMLContentHandler *, slim_char *, slim_int, slim_int);
  slim_int (*fIgnorableWhitespace)(TXMLContentHandler *, slim_char *, slim_int, slim_int);
  slim_int (*fProcessingInstruction)(TXMLContentHandler *, slim_split_ss *, slim_split_ss *);
  slim_int (*fSkippedEntity)(TXMLContentHandler *, slim_split_ss *);
  slim_int (*fStartPrefixMapping)(TXMLContentHandler *, slim_split_ss *, slim_split_ss *, slim_bool);
  slim_int (*fEndPrefixMapping)(TXMLContentHandler *, slim_split_ss *);
  void (*fSetDocumentLocator)(TXMLContentHandler *, TXMLLocator *);
};

typedef TXMLContentHandlerClass_ TXMLContentHandlerClass;

typedef TXMLLexicalHandler_ TXMLLexicalHandler;

typedef void (*XMLLexicalHandler_TidyProc)(TXMLLexicalHandler *);

struct TXMLLexicalHandlerClass_
{
  XMLLexicalHandler_TidyProc fTidy;
  slim_int (*fComment)(TXMLLexicalHandler *, slim_char *, slim_int, slim_int);
  slim_int (*fStartCDATA)(TXMLLexicalHandler *);
  slim_int (*fEndCDATA)(TXMLLexicalHandler *);
  slim_int (*fStartDTD)(TXMLLexicalHandler *, slim_split_ss *, slim_split_ss *, slim_split_ss *);
  slim_int (*fEndDTD)(TXMLLexicalHandler *);
  slim_int (*fStartEntity)(TXMLLexicalHandler *, slim_split_ss *);
  slim_int (*fEndEntity)(TXMLLexicalHandler *, slim_split_ss *);
};

typedef TXMLLexicalHandlerClass_ TXMLLexicalHandlerClass;

typedef TTextXMLReaderClass_ TTextXMLReaderClass;

typedef TXMLTokenizeModule_ TXMLTokenizeModule;

typedef TXMLReaderInput_ TXMLReaderInput;

typedef slim_int (*XMLTokenizeModule_HandleTokenProc)(TXMLTokenizeModule *, TxxToken *, TXMLReaderInput *);

typedef TXMLContentParser_ TXMLContentParser;

typedef slim_int (*XMLContentParser_NotifyStartElementProc)(TXMLContentParser *, slim_pix, TOutlineNameID *, slim_split_ss *, slim_split_ss *, slim_pix, slim_int);

typedef slim_int (*XMLContentParser_NotifyEndElementProc)(TXMLContentParser *, slim_pix, slim_pix);

struct TXMLContentParserClass_
{
  TContentParserClass fBase;
  TXMLErrorHandlerClass fErrorHandlerClass;
  TXMLContentHandlerClass fContentHandlerClass;
  TXMLLexicalHandlerClass fLexicalHandlerClass;
  TTextXMLReaderClass *fXMLReaderClass;
  XMLTokenizeModule_HandleTokenProc fTextXMLHandleTokenProc;
  XMLContentParser_NotifyStartElementProc fNotifyStartElementProc;
  XMLContentParser_NotifyEndElementProc fNotifyEndElementProc;
};

typedef TXMLContentParserClass_ TXMLContentParserClass;

struct TXHRParserClass_
{
  TXMLContentParserClass fBase;
};

typedef TXHRParserClass_ TXHRParserClass;

struct TXHRDocumentClass_
{
  TNetDocClass fNetDocClass;
  TNetDocChainClass fNetDocChainClass;
  TNetDocProcessorClass fNetDocProcessorClass;
  TNetDocEvaluator fNetDocEvaluator;
  TXHRParserClass fXHRParserClass;
};

typedef TXHRDocumentClass_ TXHRDocumentClass;

struct TI18NConverter_
{
  TI18NConverterClass *fClass;
  slim_int fGuessedCharSet;
  slim_short fDeterminedCharSet;
  slim_short fDeterminedLangSet;
};

typedef TI18NConverter_ TI18NConverter;

typedef slim_bool (*CDATAFormatter_ParseReferenceProc)(TCDATAFormatter *, slim_char *, slim_int, slim_bool, slim_int *, slim_int);

typedef slim_int (*CDATAFormatter_ResolveReferenceProc)(TCDATAFormatter *, slim_char *, slim_char *, slim_int, slim_bool, slim_int, slim_int);

struct TCDATAEntityResolver_
{
  TTree fTree;
  slim_pix fRoot;
  THash fHash;
  slim_opaque fHashTable[16];
};

typedef TCDATAEntityResolver_ TCDATAEntityResolver;

struct TCDATAFormatter_
{
  TCDATAFormatterClass *fClass;
  slim_int fFlags[11];
  CDATAFormatter_ParseReferenceProc fParseReference;
  CDATAFormatter_ResolveReferenceProc fResolveReference;
  slim_bool fLastCharIsSpace;
  slim_opaque fUserData;
  TCDATAEntityResolver fEntityResolver;
};

typedef TCDATAFormatter_ TCDATAFormatter;

struct TCharSetGuessParam_
{
  slim_int fRequestedCharSet;
  slim_int fAutoDetectLangSet;
};

typedef TCharSetGuessParam_ TCharSetGuessParam;

struct __attribute__((aligned(8))) TContentDeterminer_
{
  TContentDeterminerClass *fClass;
  TCharSetGuessParam fCharSetGuessParam;
  TContent fContent;
  slim_int fState;
  slim_int fFlag;
  slim_int fMaxStayTime;
  slim_int fDetectedMIMEType;
  slim_int fExpectedMIMEType;
  slim_int fGuessedMIMEType;
  slim_int fSurmisedMIMEType;
  slim_int fAdoptedMIMEType;
  slim_int fExpectedLangSet;
  slim_int fDetectedCharSet;
  slim_int fGuessedCharSet;
  slim_int fGuessedCharSetScore;
  slim_int fGuessedUniversal;
  slim_int fGuessedUniversalScore;
  slim_int fAdoptedCharSet;
  slim_int fUCSCharSet;
  slim_int fOriginalCharSet;
  slim_int fElementCharSet;
  slim_int fMaxGuessLen[7];
};

typedef TContentDeterminer_ TContentDeterminer;

typedef slim_int (*ContentReader_ProgressProc)(TContentReader *);

typedef void (*ContentReader_TidyProc)(TContentReader *);

typedef slim_int (*ContentReader_ReadProc)(TContent, void *, slim_int *, slim_int, slim_int, slim_bool, slim_opaque);

typedef slim_bool (*ContentReader_WriteProc)(TContentReader *, void *, slim_int);

typedef slim_bool (*ContentReader_RewindProc)(TContentReader *, slim_int);

struct TContentReader_
{
  slim_int fFlag;
  TContent fContent;
  slim_int fOffset;
  ContentReader_ProgressProc fProgress;
  ContentReader_TidyProc fTidy;
  ContentReader_ReadProc fRead;
  ContentReader_WriteProc fWrite;
  ContentReader_RewindProc fRewind;
  slim_opaque fUserData;
};

typedef TContentReader_ TContentReader;

struct TBinaryContentReader_
{
  TContentReader fBase;
};

typedef TBinaryContentReader_ TBinaryContentReader;

struct __attribute__((aligned(8))) TTextContentReader_
{
  TContentReader fBase;
  TI18NConverter *fI18NConverter;
  TContentDeterminer *fDeterminer;
  slim_vhandle fTextBuffer;
  slim_int fTextBufLength;
  slim_int fConvSrcLength;
  slim_int fWrittenLength;
};

typedef TTextContentReader_ TTextContentReader;

union TContentParser_::$81BE38886DDEC6E26C01EF3387A7B45E
{
  TContentReader Base;
  TBinaryContentReader Binary;
  TTextContentReader Text;
};

struct TContentParser_
{
  TContentParserClass *fClass;
  slim_int fFlag;
  TContent fContent;
  slim_int fContentType;
  TNetDoc *fNetDoc;
  TPageOutline *fPageOutline;
  TI18NConverter fI18NConverter;
  TCDATAFormatter fCDATAFormatter;
  TContentDeterminer fContentDeterminer;
  TxxMLSchema *fDefaultSchema;
  slim_int fExternalParsingContents;
  slim_char *fInternalString;
  TContentParser_::$81BE38886DDEC6E26C01EF3387A7B45E fContentReader;
};

struct TTokenizer_
{
  TTokenizerClass *fClass;
};

struct TxxToken_
{
  slim_int fType;
  slim_int fCharSet;
  slim_split_ss fWhole;
};

struct TxxMLToken_::$22BB38A89BE21F8FEC14F9E3747AFAA3::$F77A8D20C23652959F2CCB4B3BE07CA8
{
  slim_split_ss fName;
  slim_split_ss fAttrs;
};

struct TxxMLToken_::$22BB38A89BE21F8FEC14F9E3747AFAA3::$5EAFCB9007F557C9B6CABB4A79C6C652
{
  slim_split_ss fTarget;
  slim_split_ss fData;
};

struct TxxMLToken_::$22BB38A89BE21F8FEC14F9E3747AFAA3::$92AAF66832F838FAB8732BB9CC6EA006
{
  slim_split_ss fName;
  slim_split_ss fPublic;
  slim_split_ss fSystem;
  slim_split_ss fMarkupDecl;
};

union TxxMLToken_::$22BB38A89BE21F8FEC14F9E3747AFAA3
{
  TxxMLToken_::$22BB38A89BE21F8FEC14F9E3747AFAA3::$F77A8D20C23652959F2CCB4B3BE07CA8 Tag;
  TxxMLToken_::$22BB38A89BE21F8FEC14F9E3747AFAA3::$5EAFCB9007F557C9B6CABB4A79C6C652 PI;
  TxxMLToken_::$22BB38A89BE21F8FEC14F9E3747AFAA3::$92AAF66832F838FAB8732BB9CC6EA006 DTD;
  slim_split_ss Comment;
  slim_split_ss CDSect;
  slim_split_ss Ref;
  slim_split_ss Text;
};

struct TxxMLToken_
{
  TxxToken fBase;
  TxxMLToken_::$22BB38A89BE21F8FEC14F9E3747AFAA3 u;
};

typedef TxxMLToken_ TxxMLToken;

struct TxxMLTokenizer_
{
  TTokenizer fBase;
  slim_int fFlag;
  slim_int fErrorCode;
  TxxMLToken fCurrentToken;
};

typedef TxxMLTokenizer_ TxxMLTokenizer;

struct __attribute__((aligned(8))) THTMLTokenizer_
{
  TxxMLTokenizer fBase;
  slim_char *fModeTerminator;
  slim_bool fModeControl;
};

typedef THTMLTokenizer_ THTMLTokenizer;

struct TTokenHandler_
{
  TTokenHandlerClass *fClass;
};

struct THTMLTokenHandler_
{
  TTokenHandler fBase;
};

typedef THTMLTokenHandler_ THTMLTokenHandler;

struct TReader_
{
  TTokenHandler *fHandler;
  TTokenizer *fTokenizer;
  slim_opaque fUserData;
};

typedef TReader_ TReader;

typedef TIOBuffer_ TIOBuffer;

struct __attribute__((aligned(8))) TIOBuffer_
{
  slim_byte *fBuffer;
  slim_int fLength;
  slim_int fReadOff;
  slim_int fWriteOff;
};

struct __attribute__((aligned(8))) TReaderInput_
{
  TIOBuffer *fBuffer;
  TIOBuffer fDefaultBuf;
  slim_int fPrecedingLength;
  slim_bool fHasEOF;
  slim_int fEncoding;
};

typedef THTMLAttrBuilderClass_ THTMLAttrBuilderClass;

struct TSpecFastArray_
{
  TFastArray fBase;
};

typedef TSpecFastArray_ TSpecFastArray;

struct TVarLenBitFlag_
{
  slim_int fLength;
  slim_byte *fField;
};

typedef TVarLenBitFlag_ TVarLenBitFlag;

struct THTMLAttrBuilder_
{
  THTMLAttrBuilderClass *fClass;
  slim_bool fHasFSItem;
  TSpecFastArray fAttrList;
  TVarLenBitFlag fExistFlag;
  slim_byte fBitField[32];
  TxxMLSchema *fDefaultSchema;
  slim_opaque fUserData;
};

typedef THTMLAttrBuilder_ THTMLAttrBuilder;

struct __attribute__((aligned(8))) TTextHTMLParserProgressState_
{
  slim_int fFlag;
  slim_pix fWriterPix;
  slim_int fTokenizerMode;
  slim_short fModeTerminator;
  slim_short fTableNests;
  slim_short fPreNests;
  slim_pix fFormPix;
  slim_int fRewindOffset;
};

typedef TTextHTMLParserProgressState_ TTextHTMLParserProgressState;

struct TTextHTMLParser_
{
  TContentParser fBase;
  slim_int fFlag;
  slim_pix fWriterPix;
  slim_pix fPartialRoot;
  slim_short fModeTerminator;
  slim_short fTableNests;
  slim_short fPreNests;
  slim_pix fFormPix;
  THTMLTokenizer fTokenizer;
  THTMLTokenHandler fTokenHandler;
  TReader fReader;
  TReaderInput fInput;
  THTMLAttrBuilder fAttrBuilder;
  slim_int fEOLs;
  slim_int fRewindOffset;
  slim_pix fNSMapRoot;
  TxxMLSchema *fElementSchema;
  TTextHTMLParserProgressState fSaveStorage;
  slim_pix fScriptStatePix;
};

typedef TTextHTMLParser_ TTextHTMLParser;

struct __attribute__((aligned(8))) TParallelTokenizer_
{
  TTokenizer fBase;
  TTree fTree;
  slim_pix fTokenizerListRoot;
  slim_pix fPendingTokenListRoot;
  slim_pix fDeterminedTokenListRoot;
  slim_int fMaxStayEach;
  slim_int fMaxStayWhole;
  slim_int fState;
  slim_pix fNextPix;
  slim_int fNumOfTooShort;
  slim_int fMinOffset;
  slim_int fLimitLen;
};

typedef TParallelTokenizer_ TParallelTokenizer;

struct TPTextTokenizer_
{
  TParallelTokenizer fBase;
  TxxToken fCurrentToken;
};

typedef TPTextTokenizer_ TPTextTokenizer;

struct TPTextTokenHandler_
{
  TTokenHandler fBase;
};

typedef TPTextTokenHandler_ TPTextTokenHandler;

struct TPlasticTextParser_
{
  TContentParser fBase;
  slim_int fFlag;
  slim_int fMaxNumOfAnchor;
  slim_int fNumOfAnchor;
  TPTextTokenizer fTokenizer;
  TPTextTokenHandler fTokenHandler;
  TReader fReader;
  TReaderInput fInput;
  slim_pix fCurrentElementPix;
};

typedef TPlasticTextParser_ TPlasticTextParser;

struct TObjectAnyParser_
{
  TTextHTMLParser fBase;
};

typedef TObjectAnyParser_ TObjectAnyParser;

struct TViewerContentParser_
{
  TContentParser fBase;
  slim_int fFlag;
  TContentParserClass *fCurrentClass;
  TContentParser *fParserStore;
  slim_int fCurrentDataIndex;
  slim_int fCurrentTextDataIndex;
  TContent fCurrentContent;
  slim_pix fDummyRoot;
  slim_pix fCurrentDummyPix;
  slim_opaque fUserData;
};

typedef TViewerContentParser_ TViewerContentParser;

struct TAnonymousParser_
{
  TContentParser fBase;
  slim_opaque fUserData;
};

typedef TAnonymousParser_ TAnonymousParser;

typedef TXMLReaderClass_ TXMLReaderClass;

struct TXMLLocator_
{
  slim_int fLine;
  slim_int fColumn;
  TFixedString fPublicID;
  TURLString fSystemID;
};

typedef TXMLDTDHandler_ TXMLDTDHandler;

typedef TXMLDeclHandler_ TXMLDeclHandler;

struct TXMLReader_StdProperty_
{
  TXMLDeclHandler *fDeclHandler;
  TXMLLexicalHandler *fLexicalHandler;
};

typedef TXMLReader_StdProperty_ TXMLReader_StdProperty;

struct TXMLReader_StdFeature_
{
  slim_bool fStandAlone;
  slim_bool fLexHNDL_PEntity;
  slim_bool fNameSpaces;
  slim_bool fNameSpacePrefixes;
  slim_bool fValidation;
};

typedef TXMLReader_StdFeature_ TXMLReader_StdFeature;

typedef TXMLReaderCallbacks_ TXMLReaderCallbacks;

struct TXMLReader_ACSProperty_
{
  TXMLReaderCallbacks *fCallbacks;
  TCDATAFormatter *fCDATAFormatter;
};

typedef TXMLReader_ACSProperty_ TXMLReader_ACSProperty;

struct TXMLReader_ACSFeature_
{
  slim_bool fWBXML;
  slim_bool fIgnoreGrammerError;
  slim_bool fPermitInvalidReference;
  slim_bool fResolveInternalEntity;
};

typedef TXMLReader_ACSFeature_ TXMLReader_ACSFeature;

struct TXMLReader_
{
  TXMLReaderClass *fClass;
  TTree fTree;
  slim_pix fElementStackRoot;
  slim_pix fEmptyNSMap;
  slim_pix fNSMapOfxml;
  slim_opaque fUserData;
  slim_int fFlag;
  TXMLLocator fLocator;
  TSAXParseException *fException;
  TXMLContentHandler *fContentHandler;
  TXMLDTDHandler *fDTDHandler;
  TXMLErrorHandler *fErrorHandler;
  TXMLReader_StdProperty fStdProperty;
  TXMLReader_StdFeature fStdFeature;
  TXMLReader_ACSProperty fACSProperty;
  TXMLReader_ACSFeature fACSFeature;
  TCDATAFormatter fCDATAFormatter;
};

typedef TXMLReader_ TXMLReader;

struct TXMLTokenizer_
{
  TxxMLTokenizer fBase;
};

typedef TXMLTokenizer_ TXMLTokenizer;

struct TXMLTokenizeModule_
{
  slim_opaque fUserData;
  TTokenizer *fTokenizer;
  XMLTokenizeModule_HandleTokenProc fHandleToken;
  XMLTokenizeModule_HandleTokenProc fHandleInvalidToken;
};

struct TTextXMLReader_
{
  TXMLReader fBase;
  TXMLTokenizer fTokenizer;
  TXMLTokenizeModule fTokenizeModule;
};

typedef TTextXMLReader_ TTextXMLReader;

struct TXMLReaderInput_
{
  TReaderInput fBase;
  TFixedString fPublicID;
  TURLString fSystemID;
};

struct TXMLContentHandler_
{
  TXMLContentHandlerClass *fClass;
  slim_opaque fUserData;
};

struct TXMLErrorHandler_
{
  TXMLErrorHandlerClass *fClass;
  slim_opaque fUserData;
};

struct TXMLLexicalHandler_
{
  TXMLLexicalHandlerClass *fClass;
  slim_opaque fUserData;
};

struct __attribute__((aligned(8))) TXMLContentParser_
{
  TContentParser fBase;
  slim_int fFlag;
  slim_int fEntityFlag;
  TTextXMLReader fXMLReader;
  TXMLReaderInput fInput;
  TXMLContentHandler fContentHandler;
  TXMLErrorHandler fErrorHandler;
  TXMLLexicalHandler fLexicalHandler;
  TxxMLSchema *fDefaultSchema;
  slim_pix fCurrentElement;
  slim_int fElementsDepth;
  TxxToken *fToken;
  slim_int fRefChar;
  slim_int fXMLTextStartOffset;
  slim_int fXMLTextStartDepth;
};

typedef TXMLContentParser TRDFParser;

typedef TXMLContentParser TRSSParser;

struct __attribute__((aligned(8))) TTreeTraverse_
{
  slim_pix fPix;
  slim_short fDirection;
  slim_short fVisited;
};

typedef TTreeTraverse_ TTreeTraverse;

typedef TTreeTraverse TDocTreeTraverse;

typedef TDocTreeTraverse TPageOutlineTraverse;

struct __attribute__((aligned(8))) TRSSTransformer_
{
  TContentParser fBase;
  slim_int fFlag;
  slim_int fAltLinkMedia;
  TPageOutlineTraverse fTrav;
  slim_pix fDataPoolRootPix;
  slim_pix fSrcChannelPix;
  slim_pix fSrcCurItemPix;
  slim_pix fDstChannelPix;
  slim_pix fDstCurItemPix;
  slim_int fCurItemType;
};

typedef TRSSTransformer_ TRSSTransformer;

typedef TXMLContentParser TAtomParser;

struct TAtomTransformer_
{
  TContentParser fBase;
  slim_int fFlag;
  slim_int fAltLinkMedia;
  TPageOutlineTraverse fTrav;
  slim_pix fDataPoolRootPix;
  slim_pix fSrcHeadPix;
  slim_pix fSrcCurItemPix;
  slim_pix fDstHeadPix;
  slim_pix fDstCurItemPix;
  slim_int fCurItemType;
  slim_pix fSkipDescendants;
};

typedef TAtomTransformer_ TAtomTransformer;

union TContentParserStore_
{
  TContentParser uContentParser;
  TTextHTMLParser uTextHTMLParser;
  TPlasticTextParser uTextPlainParser;
  TObjectAnyParser uObjectAnyParser;
  TViewerContentParser uViewerContentParser;
  TAnonymousParser uAnonymousParser;
  TXMLContentParser uXMLContentParser;
  TRDFParser uRDFParser;
  TRSSParser uRSSParser;
  TRSSTransformer uRSSTransformer;
  TAtomParser uAtomParser;
  TAtomTransformer uAtomTransformer;
};

struct TDocTree_
{
  TTree fBase;
};

typedef TDocTree_ TDocTree;

struct TContentString_
{
  slim_vhandle fContentString;
  slim_int fContentStringLen;
  slim_int fContentStringCharSet;
  slim_int fContentStringCloseLen;
  slim_int fContentStringFreeList;
  slim_int fTabWidth;
  slim_int fFlag;
};

typedef TContentString_ TContentString;

struct TPageOutline_
{
  TDocTree fTree;
  TPageOutlineClass *fClass;
  PageOutline_ItemSizeProc fItemSizeProc;
  slim_int fFlag;
  slim_int fMIMEType;
  TFixedString fLanguage;
  TFixedString fDocTypeName;
  TFixedString fDocTypePublicID;
  TFixedString fDocTypeSystemID;
  slim_int fContentLen;
  TContentString fContentString;
  slim_int fOriginalCharSet;
  slim_pix fUnreadablePix;
  slim_int fUnreadableDir;
  slim_pix fDOMUnreadablePix;
  slim_int fDOMUnreadableDir;
  slim_int fDOMUnreadableOffset;
  slim_pix fUnchainRoot;
  slim_pix fDeleteRoot;
  slim_pix fPrefixInfoList;
  slim_pix fNamedElementTree;
  THash fNamedElemCIHash;
  slim_opaque fNamedElemCIHashTable[89];
  THash fNamedElemCSHash;
  slim_opaque fNamedElemCSHashTable[89];
  slim_pix fClassedElementTree;
  THash fClassedElemCIHash;
  slim_opaque fClassedElemCIHashTable[89];
  THash fClassedElemCSHash;
  slim_opaque fClassedElemCSHashTable[89];
};

struct __attribute__((aligned(8))) TNetDocScript_
{
  slim_pix fPageThread;
  TString fWrittenText;
  slim_int fWrittenTextLen;
};

typedef TNetDocScript_ TNetDocScript;

typedef slim_bool (*NetDoc_NotifyMetainfoPoolProc)(TNetDoc *, slim_int, slim_pix);

struct __attribute__((aligned(8))) TInvokerInfo_
{
  slim_short fInvoker;
  slim_short fOriginalInvoker;
  slim_int fInvokerExInfo;
  slim_int fOriginalInvokerExInfo;
  slim_opaque fRequester;
  slim_int fInvokerCount;
};

struct TNetDoc_
{
  TNetDocClass *fClass;
  TNetDocChain *fNetDocChain;
  slim_int fFlag;
  TContent fContent;
  TNetDocEvaluator *fEvaluator;
  TURLString fBaseURL;
  TFixedString fBaseTarget;
  TContentParserStore fContentParserStore;
  TPageOutline fPageOutline;
  TNetDoc *fNext;
  TNetDoc *fPrev;
  slim_int fScriptDepth;
  TNetDocScript fScriptStack[4];
  TString fWrittenText;
  slim_int fWrittenTextLen;
  slim_int fWrittenTextCharSet;
  slim_int fDocWriteExpired;
  TURLString fWrittenTextURL;
  slim_int fWrittenTextMIMEType;
  TString fReplaceText;
  slim_int fReplaceTextLen;
  slim_pix fReplaceElement;
  slim_opaque fReplaceRequester;
  slim_int fReplaceType;
  slim_opaque fMetainfoPool;
  NetDoc_NotifyMetainfoPoolProc fNotifyMetainfoPoolProc;
  TInvokerInfo fInvokerInfo;
};

struct TNetDocChain_
{
  TNetDocChainClass *fClass;
  TNetDoc fFirstNetDoc;
  TNetDoc *fLastNetDoc;
  TBrowserPane *fPane;
};

typedef TNetDocChain_ TNetDocChain;

struct TXHRDocument_
{
  TXHRDocumentClass fClass;
  TContent fContent;
  TNetDocChain fNetDocChain;
};

typedef TXHRDocument_ TXHRDocument;

typedef slim_int (*TUserScriptManager_OpenContentProc)(TUserScriptManager *, TURLString, slim_char *, slim_int, slim_int, TContent *);

struct TUserScriptManager_
{
  slim_int fUserScriptFlag;
  TXHRDocument fDocument;
  TContentClass *fContentClass;
  TUserScriptManager_OpenContentProc fOpenContentProc;
  slim_pix fContentEntryList;
};

typedef TUserScriptManager_ TUserScriptManager;

typedef slim_bool (*CDATAFormatter_SubstituteUnicodeProc)(slim_int, slim_int, slim_char **, slim_int *);

struct TCDATAFormatterClass_
{
  TI18NConverterClass *fConvClass;
  slim_int fDefaultFlags[11];
  CDATAFormatter_SubstituteUnicodeProc fSubstituteUnicode;
};

typedef THTMLTokenizerClass_ THTMLTokenizerClass;

typedef slim_int (*TextHTMLParser_HandleTokenProc)(TTextHTMLParser *, TxxMLToken *);

struct THTMLTokenHandlerClass_
{
  TTokenHandlerClass fBase;
  TextHTMLParser_HandleTokenProc fHandleText;
  TextHTMLParser_HandleTokenProc fHandleStartTag;
  TextHTMLParser_HandleTokenProc fHandleEndTag;
  TextHTMLParser_HandleTokenProc fHandleCDSect;
  TextHTMLParser_HandleTokenProc fHandleDTD;
  TextHTMLParser_HandleTokenProc fHandleComment;
  TextHTMLParser_HandleTokenProc fHandlePI;
  TextHTMLParser_HandleTokenProc fHandleReference;
};

typedef THTMLTokenHandlerClass_ THTMLTokenHandlerClass;

typedef THTMLElementInfo_ THTMLElementInfo;

typedef slim_int (*HTMLAttrBuilder_ReviseAttrsProc)(THTMLAttrBuilder *, THTMLElementInfo *, slim_pix);

struct THTMLAttrBuilderClass_
{
  HTMLAttrBuilder_ReviseAttrsProc fReviseAttrs;
  TxxMLSchemaStore *fSchemaStore;
};

struct TTextHTMLParserClass_
{
  TContentParserClass fBase;
  slim_int fFlag;
  THTMLTokenizerClass *fTokenizerClass;
  THTMLTokenHandlerClass fTokenHandlerClass;
  THTMLAttrBuilderClass fAttrBuilderClass;
};

typedef TTextHTMLParserClass_ TTextHTMLParserClass;

struct __attribute__((aligned(8))) TParallelTokenizerClass_
{
  TTokenizerClass fBase;
  slim_int fDefaultTokenID;
  slim_int fMaxDeterminedTokens;
  slim_int fLimitLenIncrement;
};

typedef TParallelTokenizerClass_ TParallelTokenizerClass;

struct TPTextTokenizerClass_
{
  TParallelTokenizerClass fBase;
  TSpecList fTokenizerClassList;
};

typedef TPTextTokenizerClass_ TPTextTokenizerClass;

struct TPTextTokenHandlerClass_
{
  TTokenHandlerClass fBase;
  TSpecArray fHandleTokenProcs;
};

typedef TPTextTokenHandlerClass_ TPTextTokenHandlerClass;

struct TPlasticTextParserClass_
{
  TContentParserClass fBase;
  slim_int fMaxNumOfAnchor;
  TPTextTokenizerClass fTokenizerClass;
  TPTextTokenHandlerClass fTokenHandlerClass;
};

typedef TPlasticTextParserClass_ TPlasticTextParserClass;

struct __attribute__((aligned(8))) TObjectAnyParserClass_
{
  TTextHTMLParserClass fBase;
  slim_int fFlag;
};

typedef TObjectAnyParserClass_ TObjectAnyParserClass;

struct TViewerContentParserClass_::$5D8876C92049B9973FDA79B6D6DDE969
{
  slim_int fMIMEType;
  TContentParserClass *fClass;
};

struct TViewerContentParserClass_
{
  TContentParserClass fBase;
  slim_int fParserStoreSize;
  TViewerContentParserClass_::$5D8876C92049B9973FDA79B6D6DDE969 fParserClassStore[8];
};

typedef TViewerContentParserClass_ TViewerContentParserClass;

struct TI18NConverterClass_
{
  slim_int fArchLangSet;
};

typedef TxxMLItem_ TxxMLItem;

typedef TToken *(*xxMLInfo_GetItemTokenProc)(TxxMLInfo *, TxxMLItem *, slim_split_ss *);

typedef slim_bool (*xxMLInfo_LockItemSSProc)(TxxMLInfo *, TxxMLItem *, slim_split_ss *);

typedef void (*xxMLInfo_UnlockItemSSProc)(TxxMLInfo *, TxxMLItem *);

typedef slim_int (*xxMLInfo_CheckSpecialAttrProc)(TxxMLInfo *, TxxMLItem *, TxxMLInfo *, TxxMLItem *, slim_int *);

typedef slim_int (*xxMLInfo_AttrValInfoProc)(TxxMLInfo *, TxxMLItem *, TxxMLInfo *, TxxMLItem *, slim_char *, slim_int);

struct TxxMLInfo_
{
  slim_int fxxMLID;
  slim_int fFlag;
  xxMLInfo_GetItemTokenProc fGetElementInfoProc;
  xxMLInfo_LockItemSSProc fLockElementProc;
  xxMLInfo_UnlockItemSSProc fUnlockElementProc;
  xxMLInfo_GetItemTokenProc fGetAttrInfoProc;
  xxMLInfo_LockItemSSProc fLockAttrProc;
  xxMLInfo_UnlockItemSSProc fUnlockAttrProc;
  xxMLInfo_CheckSpecialAttrProc fCheckSpecialAttrProc;
  xxMLInfo_AttrValInfoProc fAttrValInfoProc;
  TxxMLSchema *fDefaultSchema;
};

typedef TxxMLInfo_ TxxMLInfo;

typedef TxxMLElementInfo_ TxxMLElementInfo;

typedef TxxMLElementInfo *(*xxMLSchema_FindElementByXProc)(slim_char *, slim_int);

typedef TxxMLAttrInfo_ TxxMLAttrInfo;

typedef TxxMLAttrInfo *(*xxMLSchema_FindAttributeByXProc)(slim_char *, slim_int, slim_char *, slim_int);

typedef slim_int (*xxMLSchema_FindAttribute2ByXProc)(TxxMLSchema *, slim_char *, slim_int, slim_char *, slim_int, TxxMLSchema *, slim_char *, slim_int, slim_char *, slim_int, TxxMLSchema **, TxxMLAttrInfo **);

typedef slim_bool (*xxMLSchema_IsKnownXProc)(slim_char *, slim_int);

struct TxxMLSchema_
{
  slim_int fSchemaID;
  slim_int fxxMLID;
  xxMLSchema_FindElementByXProc fFindElementByX;
  xxMLSchema_FindAttributeByXProc fFindAttrByX;
  xxMLSchema_FindAttribute2ByXProc fFindAttr2ByX;
  xxMLSchema_IsKnownXProc fIsKnownNameSpaceProc;
  xxMLSchema_IsKnownXProc fIsKnownPublicIDProc;
};

struct TxxMLSchemaStore_
{
  TxxMLInfo fAnonInfo;
  TxxMLInfo fUnknownInfo;
  TxxMLInfo fInfo[24];
  TxxMLSchema fUnknownSchema;
  slim_int fSchemaLength;
  TxxMLSchema fSchema[32];
};

struct __attribute__((aligned(8))) TxxMLTokenizerClass_
{
  TTokenizerClass fBase;
  slim_int fDefaultFlag;
};

typedef TxxMLTokenizerClass_ TxxMLTokenizerClass;

struct THTMLTokenizerClass_
{
  TxxMLTokenizerClass fBase;
};

struct TXMLTokenizerClass_
{
  TxxMLTokenizerClass fBase;
};

typedef TXMLTokenizerClass_ TXMLTokenizerClass;

struct TWBXMLTokenizerClass_
{
  TTokenizerClass fBase;
};

typedef TWBXMLTokenizerClass_ TWBXMLTokenizerClass;

typedef slim_int (*XMLReader_ParseOneProc)(TXMLReader *, TXMLReaderInput *);

typedef void (*XMLReader_TidyProc)(TXMLReader *);

typedef slim_int (*XMLReader_GetFeatureProc)(TXMLReader *, slim_char *, slim_int, slim_bool *);

typedef slim_int (*XMLReader_SetFeatureProc)(TXMLReader *, slim_char *, slim_int, slim_bool);

typedef slim_int (*XMLReader_GetPropertyProc)(TXMLReader *, slim_char *, slim_int, slim_opaque *);

typedef slim_int (*XMLReader_SetProtertyProc)(TXMLReader *, slim_char *, slim_int, slim_opaque);

struct TXMLReaderClass_
{
  XMLReader_ParseOneProc fParseOne;
  XMLReader_TidyProc fTidy;
  XMLReader_GetFeatureProc fGetFeature;
  XMLReader_SetFeatureProc fSetFeature;
  XMLReader_GetPropertyProc fGetProperty;
  XMLReader_SetProtertyProc fSetProperty;
  TCDATAFormatterClass fCDATAFormatterClass;
};

struct TTextXMLReaderClass_
{
  TXMLReaderClass fBase;
  TXMLTokenizerClass *fTokenizerClass;
};

struct TBinaryXMLReaderClass_
{
  TXMLReaderClass fBase;
  TWBXMLTokenizerClass *fTokenizerClass;
};

typedef TBinaryXMLReaderClass_ TBinaryXMLReaderClass;

typedef TPageMaker_ TPageMaker;

typedef TOutlineItem_ TOutlineItem;

typedef TElementStyleInitializer_ TElementStyleInitializer;

typedef slim_bool (*PageMaker_IsValidURIProc)(TPageMaker *, slim_pix, TOutlineItem *, TURLString);

typedef slim_int (*PageMaker_DoChainNodeProc)(TPageMaker *, slim_pix, slim_pix, slim_pix);

typedef slim_int (*PageMaker_DoUnchainNodeProc)(TPageMaker *, slim_pix);

typedef slim_int (*PageMaker_DoDeleteNodeProc)(TPageMaker *, slim_pix);

typedef slim_int (*PageMaker_InsertBeforeNodeProc)(TPageMaker *, slim_pix, slim_pix, slim_pix, slim_pix, TInvokerInfo *);

typedef slim_int (*PageMaker_ReplaceChildNodeProc)(TPageMaker *, slim_pix, slim_pix, slim_pix, slim_pix, TInvokerInfo *);

typedef slim_int (*PageMaker_ReplaceElementProc)(TPageMaker *, slim_pix, slim_int, slim_pix, slim_opaque, TInvokerInfo *);

typedef slim_int (*PageMaker_InsertElementProc)(TPageMaker *, slim_pix, slim_int, slim_pix, slim_pix, TInvokerInfo *);

typedef slim_int (*PageMaker_RemoveChildNodeProc)(TPageMaker *, slim_pix, slim_pix, slim_pix, TInvokerInfo *);

typedef slim_int (*PageMaker_RequestRePagemakeProc)(TPageMaker *, slim_pix, slim_int);

typedef slim_int (*PageMaker_QueryModifyAttributeProc)(TPageMaker *, slim_pix, TOutlineNameID *, slim_int *);

typedef slim_int (*PageMaker_NotifyModifyAttributeProc)(TPageMaker *, slim_pix, TOutlineNameID *, slim_char *, slim_int, TInvokerInfo *);

typedef slim_bool (*PageMaker_IsRequestingMutationProc)(TPageMaker *, slim_opaque);

typedef slim_bool (*PageMaker_IsWaitForMutationProc)(TPageMaker *, slim_pix);

typedef slim_bool (*PageMaker_IsWaitForFormatProc)(TPageMaker *, slim_pix);

typedef slim_int (*PageMaker_NotifyCreateElementProc)(TPageMaker *, slim_pix);

struct TPageMakerClass_
{
  slim_int fPageMakerType;
  void (*fTidyProc)(TPageMaker *, slim_int);
  slim_bool (*fStartProc)(TPageMaker *, TPageMakerClass *, TNetDoc *, TBrowserPane *);
  slim_int (*fProgressProc)(TPageMaker *);
  void (*fAbortProc)(TPageMaker *);
  slim_bool (*fInitStyleProc)(TPageMaker *, slim_pix, TOutlineItem *, TElementStyleInitializer *);
  slim_int (*fNotifyChangeContentProc)(TPageMaker *, TBrowserPane *, TContentRequest *, TInvokerInfo *, slim_bool *);
  PageMaker_IsValidURIProc fIsValidURI;
  slim_int (*fRegisterStyleProc)(TPageMaker *, slim_pix, slim_pix, slim_int);
  slim_bool (*fRegisterClientPullProc)(TPageMaker *, slim_char *, slim_int, slim_int);
  PageMaker_DoChainNodeProc fDoChainNodeProc;
  PageMaker_DoUnchainNodeProc fDoUnchainNodeProc;
  PageMaker_DoDeleteNodeProc fDoDeleteNodeProc;
  PageMaker_InsertBeforeNodeProc fInsertBeforeNodeProc;
  PageMaker_ReplaceChildNodeProc fReplaceChildNodeProc;
  PageMaker_ReplaceElementProc fReplaceElementProc;
  PageMaker_InsertElementProc fInsertElementProc;
  PageMaker_RemoveChildNodeProc fRemoveChildNodeProc;
  PageMaker_RequestRePagemakeProc fRequestRePagemakeProc;
  PageMaker_QueryModifyAttributeProc fQueryModifyAttributeProc;
  PageMaker_NotifyModifyAttributeProc fNotifyModifyAttributeProc;
  PageMaker_IsRequestingMutationProc fIsRequestingMutationProc;
  PageMaker_IsWaitForMutationProc fIsWaitForMutationProc;
  PageMaker_IsWaitForFormatProc fIsWaitForFormatProc;
  PageMaker_NotifyCreateElementProc fNotifyCreateElementProc;
};

typedef TPageMakerClass_ TPageMakerClass;

struct THTMLPageMakerStylePref_
{
  slim_int fDDStartMargin;
  slim_int fDDStartMarginDenom;
  slim_int fDDStartMarginUnit;
  slim_int fDDStartPadding;
  slim_int fDDStartPaddingDenom;
  slim_int fDDStartPaddingUnit;
  slim_int fListStartMargin;
  slim_int fListStartMarginDenom;
  slim_int fListStartMarginUnit;
  slim_int fListStartPadding;
  slim_int fListStartPaddingDenom;
  slim_int fListStartPaddingUnit;
  slim_int fListTopMargin;
  slim_int fListBottomMargin;
  slim_int fListVertMarginDenom;
  slim_int fListVertMarginUnit;
  slim_int fPTopMargin;
  slim_int fPBottomMargin;
  slim_int fPVertMarginDenom;
  slim_int fPVertMarginUnit;
  slim_int fPreTopMargin;
  slim_int fPreBottomMargin;
  slim_int fPreVertMarginDenom;
  slim_int fPreVertMarginUnit;
  slim_int fBlockquoteTopMargin;
  slim_int fBlockquoteTopMarginDenom;
  slim_int fBlockquoteTopMarginUnit;
  slim_int fBlockquoteBottomMargin;
  slim_int fBlockquoteBottomMarginDenom;
  slim_int fBlockquoteBottomMarginUnit;
  slim_int fBlockquoteLeftMargin;
  slim_int fBlockquoteLeftMarginDenom;
  slim_int fBlockquoteLeftMarginUnit;
  slim_int fBlockquoteRightMargin;
  slim_int fBlockquoteRightMarginDenom;
  slim_int fBlockquoteRightMarginUnit;
  slim_int fH1TopMargin;
  slim_int fH1BottomMargin;
  slim_int fH2TopMargin;
  slim_int fH2BottomMargin;
  slim_int fH3TopMargin;
  slim_int fH3BottomMargin;
  slim_int fH4TopMargin;
  slim_int fH4BottomMargin;
  slim_int fH5TopMargin;
  slim_int fH5BottomMargin;
  slim_int fH6TopMargin;
  slim_int fH6BottomMargin;
};

typedef THTMLPageMakerStylePref_ THTMLPageMakerStylePref;

struct THTMLPageMakerCompactStylePref_
{
  slim_int fCanvasVertMargin;
  slim_int fCanvasVertMarginDenom;
  slim_int fCanvasVertMarginUnit;
  slim_int fCanvasHorzMargin;
  slim_int fCanvasHorzMarginDenom;
  slim_int fCanvasHorzMarginUnit;
  slim_int fDDStartMargin;
  slim_int fDDStartMarginDenom;
  slim_int fDDStartMarginUnit;
  slim_int fDDStartPadding;
  slim_int fDDStartPaddingDenom;
  slim_int fDDStartPaddingUnit;
  slim_int fListStartMargin;
  slim_int fListStartMarginDenom;
  slim_int fListStartMarginUnit;
  slim_int fListStartPadding;
  slim_int fListStartPaddingDenom;
  slim_int fListStartPaddingUnit;
  slim_int fListVertMargin;
  slim_int fListVertMarginDenom;
  slim_int fListVertMarginUnit;
  slim_int fPVertMargin;
  slim_int fPVertMarginDenom;
  slim_int fPVertMarginUnit;
  slim_int fPreVertMargin;
  slim_int fPreVertMarginDenom;
  slim_int fPreVertMarginUnit;
  slim_int fBlockquoteVertMargin;
  slim_int fBlockquoteVertMarginDenom;
  slim_int fBlockquoteVertMarginUnit;
  slim_int fBlockquoteLeftMargin;
  slim_int fBlockquoteLeftMarginDenom;
  slim_int fBlockquoteLeftMarginUnit;
  slim_int fBlockquoteRightMargin;
  slim_int fBlockquoteRightMarginDenom;
  slim_int fBlockquoteRightMarginUnit;
  slim_int fH1VertMargin;
  slim_int fH1VertMarginDenom;
  slim_int fH1VertMarginUnit;
  slim_int fH2VertMargin;
  slim_int fH2VertMarginDenom;
  slim_int fH2VertMarginUnit;
  slim_int fH3VertMargin;
  slim_int fH3VertMarginDenom;
  slim_int fH3VertMarginUnit;
  slim_int fH4VertMargin;
  slim_int fH4VertMarginDenom;
  slim_int fH4VertMarginUnit;
  slim_int fH5VertMargin;
  slim_int fH5VertMarginDenom;
  slim_int fH5VertMarginUnit;
  slim_int fH6VertMargin;
  slim_int fH6VertMarginDenom;
  slim_int fH6VertMarginUnit;
};

typedef THTMLPageMakerCompactStylePref_ THTMLPageMakerCompactStylePref;

typedef THTMLPageMaker_ THTMLPageMaker;

typedef THTMLBox_ THTMLBox;

typedef slim_int (*HTMLBoxHandlers_HandleProc)(THTMLPageMaker *, slim_pix, THTMLBox *);

struct THTMLBoxHandlers_::$5F12A754115885B347A6D240CB53FE7E
{
  HTMLBoxHandlers_HandleProc fOpen;
  HTMLBoxHandlers_HandleProc fClose;
};

struct THTMLBoxHandlers_
{
  THTMLBoxHandlers_::$5F12A754115885B347A6D240CB53FE7E fRoot;
  THTMLBoxHandlers_::$5F12A754115885B347A6D240CB53FE7E fText;
  THTMLBoxHandlers_::$5F12A754115885B347A6D240CB53FE7E fElement;
};

typedef THTMLBoxHandlers_ THTMLBoxHandlers;

typedef slim_bool (*HTMLPageMaker_InitStyleProc)(THTMLPageMaker *, slim_pix, THTMLBox *, TElementStyleInitializer *);

typedef slim_bool (*HTMLPageMaker_CallDefaultStyleProc)(THTMLPageMaker *, slim_pix, THTMLBox *, TElementStyleInitializer *);

typedef void (*HTMLPageMaker_NotifyDoneProc)(THTMLPageMaker *);

struct THTMLPageMakerClass_
{
  TPageMakerClass fBase;
  slim_int fFlag;
  slim_bool fEnableScriptEngine;
  THTMLPageMakerStylePref fStylePref;
  THTMLPageMakerCompactStylePref fCompactStylePref;
  THTMLBoxHandlers fPrepareHandlers;
  THTMLBoxHandlers fCheckHandlers;
  THTMLBoxHandlers fFormatHandlers;
  HTMLPageMaker_InitStyleProc *fInitElementStyleProcTable;
  slim_int fInitElementStyleProcTableSize;
  HTMLPageMaker_InitStyleProc *fInitAttrStyleProcTable;
  slim_int fInitAttrStyleProcTableSize;
  HTMLPageMaker_CallDefaultStyleProc fCallDefaultStyleProc;
  slim_int fDefaultBaseFontSize;
  HTMLPageMaker_NotifyDoneProc fNotifyDoneProc;
};

typedef THTMLPageMakerClass_ THTMLPageMakerClass;

typedef slim_int (*WWWPixelMap_DetermineResizeAlgorithmProc)(TWWWPixelMap *, slim_int, slim_int);

struct TWWWPixelMapClassGlobal_
{
  WWWPixelMap_DetermineResizeAlgorithmProc fDetermineResizeAlgorithmProc;
};

typedef TWWWPixelMapClassGlobal_ TWWWPixelMapClassGlobal;

struct TWWWPixelMapClass_
{
  slim_int fPixelMapType;
  slim_int fBytesPerPixel;
  slim_bool (*fAllocPixelsProc)(TWWWPixelMap *);
  void (*fFreePixelsProc)(TWWWPixelMap *);
  void (*fFillRectTranspProc)(TWWWPixelMap *, TRect *);
  void (*fFillRectProc)(TWWWPixelMap *, TRect *, TColor);
  void (*fCopyAllToSameTypeProc)(TWWWPixelMap *, TWWWPixelMap *);
  void (*fCopyPartialToSameTypeProc)(TWWWPixelMap *, slim_int, slim_int, TWWWPixelMap *);
  slim_bool (*fResizeProc)(TWWWPixelMap *, slim_int, slim_int, TRect *, TWWWPixelMap *);
  void (*fBitBltToSameTypeProc)(TWWWPixelMap *, slim_int, slim_int, TWWWPixelMap *, TRect *);
  slim_bool (*fOptimizeProc)(TWWWPixelMap *, slim_int);
  void (*fStretchBltToSameTypeProc)(TWWWPixelMap *, TWWWPixelMap *, TRect *, TRect *);
  void (*fCopyAreaProc)(TWWWPixelMap *, TRect *, slim_int, slim_int);
};

struct TWWWPixelMapClassPool_
{
  TWWWPixelMapClassGlobal fPixelMapClassGlobal;
  TWWWPixelMapClass fPixelMapClassARGB32;
  TWWWPixelMapClass fPixelMapClassRGB32;
  TWWWPixelMapClass fPixelMapClassRGB32MASK;
  TWWWPixelMapClass fPixelMapClassRGB16MASK;
  TWWWPixelMapClass fPixelMapClassRGB16MASK_RE;
  TWWWPixelMapClass fPixelMapClassARGB16;
  TWWWPixelMapClass fPixelMapClassRGB16;
  TWWWPixelMapClass fPixelMapClassRGB16_RE;
  TWWWPixelMapClass fPixelMapClassRGAB16;
  TWWWPixelMapClass fPixelMapClassRGB12MASK;
  TWWWPixelMapClass fPixelMapClassRGB12;
  TWWWPixelMapClass fPixelMapClassRGB8MASK;
  TWWWPixelMapClass fPixelMapClassRGB8;
  TWWWPixelMapClass fPixelMapClassCLUTINDEX;
  TWWWPixelMapClass fPixelMapClassINDEX8;
  TWWWPixelMapClass fPixelMapClassSPECIAL32MASK;
  TWWWPixelMapClass fPixelMapClassSPECIAL32;
  TWWWPixelMapClass fPixelMapClassSPECIAL16MASK;
  TWWWPixelMapClass fPixelMapClassSPECIAL16;
  TWWWPixelMapClass fPixelMapClassSPECIAL8MASK;
  TWWWPixelMapClass fPixelMapClassSPECIAL8;
};

struct TWWWImageClass_::$5D8DC77B794ED8E8A2B7617993AC4F0D
{
  slim_int fNativePixelMapType;
};

struct TWWWImageClass_
{
  TWWWImageClass_::$5D8DC77B794ED8E8A2B7617993AC4F0D fPixelMapTypeTo[31];
  slim_int fAnimationImageMaxLoops;
  TWWWPixelMapClassPool *fPixelMapClassPool;
};

typedef TWWWImageClass_ TWWWImageClass;

typedef TImageDecoderClass_ TImageDecoderClass;

struct TPageImageDecoder_
{
  slim_int fContentType;
  TImageDecoderClass *fImageDecoderClass;
};

typedef TPageImageDecoder_ TPageImageDecoder;

struct TCSSParserConvertValue_
{
  slim_short fDPI;
  slim_short fThick;
  slim_short fMedium;
  slim_short fThin;
};

typedef TCSSParserConvertValue_ TCSSParserConvertValue;

typedef TCSSPropInfo_ TCSSPropInfo;

typedef TCSSParser_ TCSSParser;

typedef TCSSPropInfo *(*TCSSParsePropertyProc)(TCSSParser *);

typedef slim_bool (*TCSSParsePropValProc)(TCSSParser *, slim_int, slim_pix *, slim_pix *);

typedef TCSSDict_ TCSSDict;

typedef TCSSRuleDecl_ TCSSRuleDecl;

typedef TCSSRuleValue_ TCSSRuleValue;

typedef slim_bool (*TCSSValueCheckProc)(TCSSDict *, TCSSRuleDecl *, TCSSRuleValue *);

typedef slim_bool (*TCSSLookUpCheckProc)(TCSSDict *, TCSSRuleDecl *, slim_int, TPageOutline *, slim_pix);

typedef slim_bool (*TCSSSelectorCheckProc)(TCSSParser *, slim_char *, slim_int);

typedef slim_bool (*TCSSPrecSelectorCheckProc)(TCSSDict *, slim_int, slim_pix);

struct TCSSParserClass_
{
  TString fDefaultStyleSheet;
  TString fUserStyleSheet;
  TCSSParserConvertValue fDefaultConvertValue;
  TCSSParsePropertyProc fParsePropertyProc;
  TCSSParsePropValProc *fParsePropValProcTable;
  slim_int fFlag;
  slim_int fStandardsRecovery;
  slim_int fQuirksRecovery;
  slim_int fPreCheckSelPrecThreshold[4];
  slim_bool fDisableDimensions[15];
  TCSSValueCheckProc fValueCheckProc;
  TCSSLookUpCheckProc fLookUpCheckProc;
  TCSSSelectorCheckProc fSelectorCheckProc;
  TCSSPrecSelectorCheckProc fPrecSelectorCheckProc;
  TColor *fSystemColorTable;
};

typedef TCSSParserClass_ TCSSParserClass;

typedef iTWWWImage_ **TWWWImage;

typedef TPageInclusion_Image_ TPageInclusion_Image;

typedef slim_bool (*PageDepot_IsValidImageProc)(TPageInclusion_Image *);

typedef TPageInclusion_NPStream_ TPageInclusion_NPStream;

typedef slim_bool (*PageDepot_IsValidPluginImageProc)(TPageInclusion_NPStream *);

typedef TPageDepot_ TPageDepot;

typedef TPageImage_ TPageImage;

typedef slim_bool (*PageDepot_GetImageAltTextProc)(TPageDepot *, slim_pix, TPageImage *, TString *, slim_int *);

typedef slim_bool (*PageDepot_NeedDrawingImageIconProc)(TPageDepot *, slim_int, slim_pix, TPageInclusion_Image *);

typedef void (*PageDepot_PrepareNeighborEventTargetProc)(TPageDepot *, slim_pix *, slim_pix *, slim_pix *, slim_pix *);

typedef void (*PageDepot_AutoSetFocusProc)(TPageDepot *);

typedef void (*PageDepot_AutoClearFocusProc)(TPageDepot *);

typedef slim_int (*PageDepot_OpenInclusionProc)(TPageDepot *, TContentRequest *, slim_int, slim_int, slim_pix, TContent *);

typedef TElementStyle_ TElementStyle;

typedef TElementStyleClass_ TElementStyleClass;

typedef TElementStylePreference_ TElementStylePreference;

typedef slim_int (*PageDepot_NotifyStartDocumentProc)(TPageDepot *);

struct __attribute__((aligned(8))) TPageDepotClass_
{
  TWWWPixelMapClassPool fWWWPixelMapClassPool;
  TWWWImageClass fWWWImageClass;
  TPageImageDecoder fImageDecoder[16];
  TCSSParserClass fCSSParserClass;
  TI18NConverterClass *fI18NConverterClass;
  slim_int fDecoders;
  slim_int fMaxImageDelayTime;
  slim_int fMinImageDelayTime;
  slim_int fMaxImageWidth;
  slim_int fMaxImageHeight;
  slim_int fMaxPixelsPerImage;
  slim_int fMaxPixelsPerDecodedPixelMap;
  slim_int fMaxActiveDecoders;
  slim_int fImageDecodeMaxStayTime;
  slim_int fActiveAnimeDecoders;
  slim_int fActiveDecoders;
  slim_int fFocusOutlineWidth[4];
  slim_int fDefaultMediaType;
  slim_int fFlag;
  TWWWImage fBuiltinImage[3];
  slim_int (*fHTTPSInclCallback)(TBrowserPane *, TURLString, TURLString);
  PageDepot_IsValidImageProc fIsValidImage;
  PageDepot_IsValidPluginImageProc fIsValidPluginImage;
  PageDepot_GetImageAltTextProc fGetImageAltText;
  PageDepot_NeedDrawingImageIconProc fNeedDrawingImageIcon;
  PageDepot_PrepareNeighborEventTargetProc fPrepareNeighborEventTarget;
  PageDepot_AutoSetFocusProc fAutoSetFocus;
  PageDepot_AutoClearFocusProc fAutoClearFocus;
  PageDepot_OpenInclusionProc fOpenInclusion;
  void (*fFinishEventHandlingCallback)(slim_opaque);
  slim_opaque fFinishEventHandlingCallbackAux;
  void (*fConvertToDOMKeyEventProc)(TBrowserPane *, TPageEvent *, slim_int *, slim_int *, slim_int *);
  slim_int fScriptEngines;
  TPageDepotScriptEngineClass *fScriptEngineTable[1];
  slim_bool fEnableScriptEngineTable[1];
  slim_bool (*fStyleEqualProc)(TElementStyle *, TElementStyle *, TElementStyleClass *);
  TElementStylePreference *fElementStylePref;
  slim_bool (*fCheckSpecialFileControlValueCallBack)(TPageDepot *, slim_char *, slim_int);
  slim_bool (*fPrepareSpecialFileQueryDataSetCallBack)(TPageDepot *, TPostData, TString, TString);
  slim_int (*fProcessStyleSheetsProc)(TPageDepot *, slim_int, slim_bool *);
  PageDepot_NotifyStartDocumentProc fNotifyStartDocumentProc;
  TString fDefaultAltInstance;
  slim_char *fDefaultAltCStr;
  slim_int fDefaultAltCharset;
};

typedef TPageDepotClass_ TPageDepotClass;

struct TPageLayoutClass_
{
  slim_int fFlag;
  slim_int fColumnRenderingAvailWidth;
};

typedef TPageLayoutClass_ TPageLayoutClass;

typedef TEditorCompactStylePref_ TEditorCompactStylePref;

typedef TPageEditor_ TPageEditor;

typedef TAWSEvent_ TAWSEvent;

typedef TElementStyleReader_ TElementStyleReader;

typedef TEditorReplacedInfo_ TEditorReplacedInfo;

struct TPageEditorClass_
{
  TNSPlugin *fNSPlugin;
  TEditorCompactStylePref *fCompactStylePref;
  slim_int fFlag;
  slim_int fMouseDragThreshold;
  void *fDefStyleEx[6];
  void (*fGetFocusColor)(TPageEditor *, slim_pix, TColor *, TColor *);
  void (*fGetSelectedTextColor)(TPageEditor *, slim_pix, TColor *, TColor *);
  slim_bool (*fComputeCurrentInputStyleProc)(TPageEditor *, slim_pix);
  slim_int (*fGetCursorContextShapeProc)(TPageEditor *, slim_pix, slim_pix, TAWSEvent *, TPageEvent *);
  void (*fContBlockSizeOfFixedProc)(TPageEditor *, slim_int *, slim_int *);
  void (*fAdjustBoxTypeStyleProc)(TPageEditor *, slim_int *, slim_int *, slim_int *, slim_int *, slim_int *, slim_int *, slim_bool);
  slim_int (*fReadElementStyleVisibilityProc)(TPageEditor *, slim_pix, TElementStyleReader *);
  void (*fPreAdjustImageSize)(TPageEditor *, TEditorReplacedInfo *);
  void (*fPostAdjustImageSize)(TPageEditor *, TEditorReplacedInfo *);
  slim_int fMaxStayTimeFG;
  slim_int fMaxStayTimeBG;
  slim_opaque fUIEventHandler;
  slim_bool (*fEventDefaultActionProc)(TPageEditor *, TPageEvent *, slim_pix, slim_pix);
  slim_int fDefaultIFrameWidth;
  slim_int fDefaultIFrameHeight;
  slim_int fDefaultEmbedWidth;
  slim_int fDefaultEmbedHeight;
  slim_int fMinTableScaleThreshold;
  slim_int fTabWidth;
  slim_int fDefaultCanvasWidth;
  slim_int fDefaultCanvasHeight;
};

typedef TPageEditorClass_ TPageEditorClass;

struct TViewerContentPageMakerClass_
{
  THTMLPageMakerClass fBase;
};

typedef TViewerContentPageMakerClass_ TViewerContentPageMakerClass;

struct TPTextParserClass_
{
  TContentParserClass fBase;
};

typedef TPTextParserClass_ TPTextParserClass;

struct TPTextPageMakerClass_
{
  TPageMakerClass fBase;
};

typedef TPTextPageMakerClass_ TPTextPageMakerClass;

struct TMetaPageMakerClass_
{
  TPageMakerClass fBase;
};

typedef TMetaPageMakerClass_ TMetaPageMakerClass;

struct TRDFParserClass_
{
  TXMLContentParserClass fBase;
};

typedef TRDFParserClass_ TRDFParserClass;

struct TRSSParserClass_
{
  TXMLContentParserClass fBase;
};

typedef TRSSParserClass_ TRSSParserClass;

struct __attribute__((aligned(8))) TRSSTransformerClass_
{
  TContentParserClass fBase;
  slim_int fAltLinkMedia;
};

typedef TRSSTransformerClass_ TRSSTransformerClass;

struct TAtomParserClass_
{
  TXMLContentParserClass fBase;
};

typedef TAtomParserClass_ TAtomParserClass;

struct THTMLStripTokenHandlerClass_
{
  TTokenHandlerClass fBase;
  TCDATAFormatterClass *fCDATAFormatterClass;
};

typedef THTMLStripTokenHandlerClass_ THTMLStripTokenHandlerClass;

struct THTMLStripParserClass_
{
  THTMLStripTokenHandlerClass fTokenHandlerClass;
  THTMLTokenizerClass fTokenizerClass;
};

typedef THTMLStripParserClass_ THTMLStripParserClass;

struct TAtomTransformerClass_
{
  TContentParserClass fBase;
  THTMLStripParserClass fHTMLStripParserClass;
  slim_int fFlag;
  slim_int fAltLinkMedia;
};

typedef TAtomTransformerClass_ TAtomTransformerClass;

typedef iTImageDecoder_ **TImageDecoder;

struct TImageDecoderClass_
{
  slim_int (*fGetSizeProc)(void *, slim_int, slim_int, slim_int, slim_int, slim_int *, slim_int *);
  TImageDecoder (*fNewProc)(void *);
  void (*fDeleteProc)(TImageDecoder);
  slim_int (*fProgressProc)(TImageDecoder, TWWWImage, slim_byte *, slim_int, slim_int, slim_int, slim_int);
  slim_int (*fSetClipRectProc)(TImageDecoder, TRect *);
  void (*fTidyFrameProc)(TImageDecoder, TWWWImage, slim_int);
};

struct TGIFDecoderClass_
{
  TImageDecoderClass fBase;
  slim_int fDelayTimeUnit;
  slim_int fDefaultDelayTime;
  slim_byte fBuffer[4096];
};

typedef TGIFDecoderClass_ TGIFDecoderClass;

struct __attribute__((aligned(8))) TIJGJPEGDecoderClass_
{
  TImageDecoderClass fBase;
  slim_int fDecodePixmapType;
  slim_int fDctMethod;
  slim_bool fDoFancyUpsampling;
};

typedef TIJGJPEGDecoderClass_ TIJGJPEGDecoderClass;

struct TLIBPNGDecoderClass_
{
  TImageDecoderClass fBase;
};

typedef TLIBPNGDecoderClass_ TLIBPNGDecoderClass;

struct TMNGDecoderClass_
{
  TImageDecoderClass fBase;
  TLIBPNGDecoderClass *fLIBPNGDecoderClass;
  TIJGJPEGDecoderClass *fIJGJPEGDecoderClass;
};

typedef TMNGDecoderClass_ TMNGDecoderClass;

struct TBMPDecoderClass_
{
  TImageDecoderClass fBase;
};

typedef TBMPDecoderClass_ TBMPDecoderClass;

typedef TBrowserPaneClass_ TBrowserPaneClass;

typedef TBrowserHistoryClass_ TBrowserHistoryClass;

typedef TBrowserVisitClass_ TBrowserVisitClass;

typedef TBrowserVisitInfo_ TBrowserVisitInfo;

typedef slim_int (*TBrowserVisit_NotifyProc)(TBrowserVisit *, slim_int, slim_pix, TBrowserVisitInfo *, slim_opaque);

typedef TSerializable_ TSerializable;

typedef void (*TBrowserVisit_GetSerializableProc)(TBrowserVisit *, TSerializable *);

typedef TDeserializable_ TDeserializable;

typedef void (*TBrowserVisit_GetDeserializableProc)(TBrowserVisit *, TDeserializable *);

struct TBrowserVisit_
{
  TBrowserVisitClass *fClass;
  TSpecList fList;
  THash fHash;
  slim_opaque fHashTable[16];
  slim_opaque fSerializationCtx;
  TBrowserVisit_NotifyProc fNotifyProc;
  slim_opaque fNotifyAux;
  TBrowserVisit_GetSerializableProc fGetSerializableProc;
  TBrowserVisit_GetDeserializableProc fGetDeserializableProc;
};

typedef TBrowserVisit_ TBrowserVisit;

typedef slim_opaque TAWSWindow;

typedef slim_opaque TAWSSplitter;

typedef slim_bool (*BrowserWindow_InitProc)(TBrowserWindow *, TBrowserWindowClass *, TBrowser *, TAWSWindow, TAWSSplitter, TAWSPane, TBrowserWindow *, slim_int);

typedef void (*BrowserWindow_TidyProc)(TBrowserWindow *);

typedef void (*BrowserWindow_AWSNotifyFocusProc)(TBrowserWindow *, TBrowserPane *, slim_pix, TBrowserPane *, slim_pix);

typedef slim_bool (*BrowserWindow_CheckTotalSizeProc)(TBrowserWindow *);

typedef TBrowserWindowProgressInfo_ TBrowserWindowProgressInfo;

typedef void (*BrowserWindow_CalcProgressInfoProc)(TBrowserWindow *, TBrowserWindowProgressInfo *);

struct TBrowserWindowClass_
{
  TBrowserPaneClass *fBrowserPaneClass;
  TBrowserHistoryClass *fBrowserHistoryClass;
  TBrowserVisit fBrowserVisit;
  TBrowserWindow *fBrowserWindow;
  slim_int fFocusScrollAmountH;
  slim_int fFocusScrollAmountV;
  slim_int fTotalContentSizeLimit;
  slim_int fObjectSize;
  BrowserWindow_InitProc fInitProc;
  BrowserWindow_TidyProc fTidyProc;
  BrowserWindow_AWSNotifyFocusProc fAWSNotifyFocus;
  BrowserWindow_CheckTotalSizeProc fCheckTotalSize;
  BrowserWindow_CalcProgressInfoProc fCalcProgressInfo;
};

typedef TBrowserWindowClass_ TBrowserWindowClass;

typedef void (*BrowserPane_SetPagePrefProc)(TBrowserPane *);

typedef void (*BrowserPane_SetRequestPagePrefProc)(TBrowserPane *);

typedef void (*BrowserPane_SetPreferredMediaTypePagePrefProc)(TBrowserPane *);

typedef void (*BrowserPane_NotifyRePageMakeStateProc)(TBrowserPane *, slim_int);

struct __attribute__((aligned(8))) TBrowserPaneClass_
{
  TBrowser *fBrowser;
  slim_int fMaxPanes;
  void *(*fAltAllocProc)(slim_int);
  void (*fAltFreeProc)(void *);
  void (*fPaneTidyCallback)(TBrowserPane_ *, slim_int);
  BrowserPane_SetPagePrefProc fSetPagePrefProc;
  BrowserPane_SetRequestPagePrefProc fSetRequestPagePrefProc;
  BrowserPane_SetPreferredMediaTypePagePrefProc fSetPreferredMediaTypePagePrefProc;
  BrowserPane_NotifyRePageMakeStateProc fNotifyRePageMakeStateProc;
  void (*fInitContentRequestProc)(TBrowserPane_ *, TContentRequest *);
  void (*fCloseNextContentProc)(TBrowserPane_ *, slim_int);
  slim_int (*fRequestContentProc)(TBrowserPane_ *, TContentRequest *, TContent *);
  slim_int (*fRequestFrameProc)(TBrowserPane_ *, TBrowserPane *, slim_int, TURLString, slim_int, slim_int, slim_int, slim_int);
  slim_bool (*fTransCoordToParentPaneProc)(TBrowserPane_ *, TRect *);
  TContentClass *fContentClass;
  TNetDocChainClass *fNetDocChainClass;
  TPageDepotClass *fPageDepotClass;
  TPageLayoutClass *fPageLayoutClass;
  TPageEditorClass *fPageEditorClass;
  TBrowserPane *fBrowserPaneStore;
  slim_int fInitialStyleGroupFlag;
};

typedef TBrowserHistory_ TBrowserHistory;

typedef slim_pix (*BrowserHistory_RemoveEntryProc)(TBrowserHistory *, slim_pix);

typedef THistoryRequestInfo_ THistoryRequestInfo;

typedef slim_bool (*BrowserHistory_DoBackForwProc)(TBrowserHistory *, slim_int, slim_int, THistoryRequestInfo *, TInvokerInfo *);

typedef void (*BrowserHistory_AddProc)(TBrowserHistory *, TBrowserPane *);

typedef void (*BrowserHistory_UpdateProc)(TBrowserHistory *, TBrowserPane *, TContentRequest *);

struct __attribute__((aligned(8))) TBrowserHistoryClass_
{
  slim_int fMaxEntries;
  slim_int fMaxInputHistoryPerPage;
  slim_int fCacheMode;
  void (*fNotifyProc)(TBrowserHistory *, slim_int);
  BrowserHistory_RemoveEntryProc fRemoveEntry;
  BrowserHistory_DoBackForwProc fDoBackForw;
  BrowserHistory_AddProc fAdd;
  BrowserHistory_UpdateProc fUpdate;
  slim_int fMaxMultiContents;
};

struct TBrowserVisitClass_
{
  slim_int fMaxEntries;
  slim_int fDaysToExpire;
  slim_bool fInhibit;
};

typedef slim_int slim_fixed_point;

struct TPagePref_
{
  slim_int fFlag;
  slim_int fDepotFlag;
  slim_fixed_point fMag;
  slim_fixed_point fTextMag;
  slim_fixed_point fImageMag;
  slim_int fMediaTypes;
  slim_int fMediaGroups;
  slim_int fTableLayout;
  slim_int fBlockHeightPolicy;
  slim_int fLineHeightPolicy;
  slim_int fCSSDPI;
  slim_int fDocTypeMode;
  slim_int fAutoLoadImageBound;
  slim_int fDeleteImageBound;
  slim_int fWaitDecodeImage;
  slim_int fQueryReqInclMask;
  slim_int fAltLinkMedia;
  slim_int fExtFlag;
  slim_int fCSSPreferredMediaType;
  slim_int fBlockWidthPolicy;
  slim_int fLuminanceThreshold;
  slim_int fPlaceHolderConfig;
  slim_int fPlaceHolderIconMargin;
  slim_int fPlaceHolderDrawMinSize;
  slim_int fMinFontSize;
  slim_int fMaxFontSize;
  slim_int fFrameWidthPolicy;
  slim_int fFrameHeightPolicy;
  slim_int fIFrameWidthPolicy;
  slim_int fIFrameHeightPolicy;
};

typedef TPagePref_ TPagePref;

typedef TPanePrefAdjuster_ TPanePrefAdjuster;

typedef TTree TDepotTree;

typedef TVarBag TCSSDictVarBag;

typedef slim_int (*slim_i18n_checkch_proc)(slim_byte *, slim_int, slim_int *);

struct TI18NCharLenInfo_
{
  slim_bool fGLIsASCII;
  slim_int *fCTypeFlags;
  slim_i18n_checkch_proc fCheckCharProc;
  slim_int fCharType;
  slim_int fCheckType;
};

typedef TI18NCharLenInfo_ TI18NCharLenInfo;

struct TI18NPatternInfo_
{
  slim_int fPatternFlag;
  slim_int fSearchFlag;
  slim_int *fBuffer;
  slim_int fBufferLen;
  slim_int *fMatchBytes;
  slim_char *fPatternStr;
  slim_int fPatternLen;
  slim_int fPatternCharSet;
  TI18NCharLenInfo fCharLenInfo;
};

typedef TI18NPatternInfo_ TI18NPatternInfo;

struct __attribute__((aligned(8))) TCSSDict_
{
  TCSSDictVarBag fVarBag;
  TCSSParser *fParser;
  slim_int fFlag;
  slim_pix fDummyEntry;
  slim_pix fResource;
  slim_vhandle fToken;
  slim_int fTokenLen;
  THash fRuleHash;
  slim_opaque fRuleEntries[89];
  THash fSelHash;
  slim_opaque fRuleSels[59];
  THash fValueHash;
  slim_opaque fRuleValues[23];
  THash fLookUpHash;
  slim_opaque fLookUpEntries[23];
  slim_int fMaxStyleEntryItems;
  slim_handle fCascade;
  slim_handle fCascadeForCache;
  slim_handle fNextIndexTable;
  slim_handle fNextIndexTableForCache;
  slim_handle fItemSortingBuf[2];
  TI18NPatternInfo fPattern;
  slim_int fMaxContainsValueLen;
};

struct TCSSParser_
{
  TCSSParserClass *fClass;
  TPageDepot *fDepot;
  TCSSParserConvertValue fConvertValue;
  TCSSDict fDict;
  slim_int fRecovery;
  TString fEscapedIdent;
  TURLString fBaseURL;
  slim_split_ss fSS;
  slim_int fCharset;
  slim_int fType;
  slim_int fFlag;
  slim_int fSerialNo;
  slim_int fCurSpecificity;
  slim_int fCurPseudo;
};

typedef TVarBag TElementStyleVarBag;

struct __attribute__((aligned(8))) TElementStyleClass_
{
  TElementStyleVarBag fVarBag;
  THash fHash;
  slim_opaque fHashTable[23];
  TCSSParser *fCSSParser;
  TElementStylePreference *fPreference;
  slim_bool (*fGetInitialStyleProc)(TElementStyleClass_ *, slim_int, void *);
  slim_int fFlag;
};

typedef TVarBag TDOMVarBag;

struct TDOMBind_
{
  slim_int fBindFlag;
  TDOMVarBag fVarBag;
  TDOMBindClass *fClass;
  TJSClass *fScriptEngineClass;
  TJSContext fScriptEngineContext;
  TBrowserPane *fSelfPane;
  TPageDepotScriptEngine *fPageDepotScriptEngine;
  slim_pix fSelfWindowPix;
  TJSString fEmptyDOMString;
  TURLString fSOPURL;
  TURLString fOriginalSOPURL;
  slim_pix fLocalParamRoot;
  slim_pix fProgressEntryList;
  slim_pix fLastProgressEntryPix;
  THash fHash;
  slim_opaque fHashTable[67];
  TJSObject fXMLHttpReqProtoObj;
  slim_handle fExtFuncsArray;
};

struct TPageDepotScriptEngine_
{
  TPageDepotScriptEngineClass *fClass;
  slim_opaque fContext;
  TDOMBind fDOMBind;
};

typedef TCSSStyleCascade_ TCSSStyleCascade;

typedef TCSSStyleCascadeItem_ TCSSStyleCascadeItem;

struct __attribute__((aligned(8))) TCSSStyleCascadeResolver_
{
  TCSSDict *fDict;
  slim_bool fCache;
  TCSSStyleCascade *fCascade;
  TCSSStyleCascadeItem *fItemSortingBuf[2];
  slim_int *fNextIndexTable;
  slim_int fStartIndex[113];
};

typedef TCSSStyleCascadeResolver_ TCSSStyleCascadeResolver;

typedef slim_opaque TAWSFont;

struct TPageDepot_
{
  TDepotTree fTree;
  TPageDepotClass *fClass;
  slim_int fFlag;
  slim_int fDepotFlag2;
  TBrowserPane *fPane;
  slim_pix fPageObjectList;
  slim_pix fPageFontList;
  slim_pix fPageInclusionList;
  slim_pix fEventTargetList;
  slim_pix fNamedMapList;
  slim_pix fPageFormList;
  slim_pix fPageEmbedList;
  slim_pix fPageFrameList;
  slim_pix fPageStandByList;
  slim_pix fPageStyleTree;
  slim_pix fUnchainPageStyleTree;
  slim_pix fImageEntryList;
  slim_pix fSelectedImageEntry;
  slim_pix fPageCanvasList;
  slim_pix fEventList;
  slim_pix fScriptList;
  slim_pix fPageTimerList;
  slim_pix fPageBlinkerList;
  slim_pix fPageMarqueeList;
  TCSSParser fCSSParser;
  TElementStyleClass fElementStyleClass;
  slim_int fClientPullStart;
  slim_int fClientPullTime;
  TURLString fClientPullURL;
  slim_pix fHeadTabbableEventTarget;
  slim_pix fTailTabbableEventTarget;
  slim_pix fAltHeadTabbableEventTarget;
  slim_pix fAltTailTabbableEventTarget;
  slim_pix fIncrementalReflowPix;
  slim_int fTabIndexTargets;
  slim_pix fNotFoundImageIncl;
  slim_pix fCorruptImageIncl;
  slim_pix fLoadingImageIncl;
  TPageDepotScriptEngine fScriptEngine[1];
  TCSSStyleCascadeResolver fInlineStyleResolver;
  slim_pix fInlineStyleCachingOutlinePix;
  slim_int fInlineStyleCachingSerialNo;
  TInvokerInfo fInvokerInfo;
  TInvokerInfo fPendInvokerInfo;
  slim_pix fDefaultPageFont;
  TAWSFont fDefaultAWSFont;
};

typedef TPageLayout_ TPageLayout;

typedef TAWSInterface_ TAWSInterface;

struct TEditorBeforeThis_
{
  slim_pix fElementPix;
  slim_pix fPartialBlockPix;
  slim_pix fBoxPix;
};

typedef TEditorBeforeThis_ TEditorBeforeThis;

struct TPageMaker_
{
  TPageMakerClass_ *fClass;
  TNetDoc *fNetDoc;
  TPageOutline *fPageOutline;
  TBrowserPane_ *fPane;
  TPageLayout *fPageLayout;
  TAWSPane fAWSPane;
  TAWSInterface *fAWSInterface;
  TPageEditor *fPageEditor;
  TEditorBeforeThis fBeforeThis;
};

typedef THTMLPageMakerProgressState_ THTMLPageMakerProgressState;

struct THTMLPageMakerProgressState_
{
  slim_int fStateFlag;
  slim_int fState;
  TPageOutlineTraverse fTraversePrepare;
  TPageOutlineTraverse fTraverseCheck;
  TPageOutlineTraverse fTraverseFormat;
  slim_pix fCheckableBoxPix;
  slim_int fCheckableBoxDir;
  slim_pix fFormatableBoxPix;
  slim_int fFormatableBoxDir;
  slim_int fStopFormatCount;
  slim_int fStopCheckCount;
  slim_int fPseudoA;
  TColor fBasefontColor;
  slim_int fBasefontSize;
  TColor fBodyColor;
  slim_pix fPartialParentPix;
  slim_pix fPartialStartPix;
  slim_pix fPartialEndPix;
  slim_pix fUnformatParentPix;
  slim_pix fUnformatStartPix;
  slim_pix fUnformatEndPix;
  slim_bool fDeleteElement;
  TPageOutlineTraverse fTraverseUnformat;
  TInvokerInfo fInvokerInfo;
};

struct THTMLMutateManager_
{
  TTree fTree;
};

typedef THTMLMutateManager_ THTMLMutateManager;

struct THTMLPageMaker_
{
  TPageMaker fBase;
  slim_int fPageMakerFlag;
  slim_int fNextFormatTime;
  THTMLPageMakerProgressState *fCurrentState;
  THTMLPageMakerProgressState fPrimaryState;
  THTMLPageMakerProgressState fPartialState;
  THTMLMutateManager fManager;
};

struct TMetaPageMaker_
{
  TPageMaker fBase;
  slim_int fFlag;
  slim_pix fElementPix;
  TPageOutlineTraverse fTrav;
};

typedef TMetaPageMaker_ TMetaPageMaker;

struct __attribute__((aligned(8))) TViewerContentPageMaker_
{
  THTMLPageMaker fBase;
  slim_int fPrepareMode;
  slim_int fCheckMode;
  slim_int fFormatMode;
};

typedef TViewerContentPageMaker_ TViewerContentPageMaker;

struct TAnonymousPageMaker_
{
  TPageMaker fBase;
  slim_opaque fUserData;
};

typedef TAnonymousPageMaker_ TAnonymousPageMaker;

union TPageMakerStore_
{
  TPageMaker uPageMaker;
  THTMLPageMaker uHTMLPageMaker;
  TMetaPageMaker uMetaPageMaker;
  TViewerContentPageMaker uViewerContentPageMaker;
  TAnonymousPageMaker uAnonymousPageMaker;
};

typedef TPageMakerStore_ TPageMakerStore;

struct TEditorTree_
{
  TTree fBase;
};

typedef TEditorTree_ TEditorTree;

struct TEditorElementPos_
{
  slim_pix fPix;
  slim_int fDir;
  slim_int fOffset;
};

typedef TEditorElementPos_ TEditorElementPos;

struct TEditorSelection_
{
  TEditorElementPos fHead;
  TEditorElementPos fTail;
};

typedef TEditorSelection_ TEditorSelection;

struct TEditorParaFormatProgress_
{
  slim_int fParaFormatProgressFlag;
  slim_int fMinLeft;
  slim_int fMaxRight;
  slim_int fMaxMarginRight;
  slim_int fRectWidth;
  slim_int fParaTop;
  slim_int fParaBottom;
  slim_int fLetterSpacing;
  slim_int fStyleWordSpacing;
  slim_int fClear;
};

typedef TEditorParaFormatProgress_ TEditorParaFormatProgress;

struct TEditorFormatCtx_
{
  slim_int fFormatFlag;
  TTreeTraverse fAppendedFormatTrav;
  slim_pix fNextPixInParagraph;
  TEditorParaFormatProgress fParaFormatProgress;
  slim_int fSizeFixedImageMinY;
  slim_pix fTopTablePix;
  TTreeTraverse fMeasureTableTrav;
  slim_int fTableImageHeightNumer;
  slim_int fTableImageHeightDenom;
  slim_int fTCellMinWidth;
  slim_pix fClmnRndrngWidthCheckedFbPix;
};

typedef TEditorFormatCtx_ TEditorFormatCtx;

typedef TVarBag TEditorStyleExVarBag;

struct TPageEditor_
{
  TEditorTree fTree;
  TPageEditorClass *fClass;
  slim_int fEditorFlag;
  TNetDoc *fNetDoc;
  TBrowserPane *fPane;
  TAWSPane fAWSPane;
  TAWSInterface *fAWSInterface;
  slim_pix fElementRoot;
  slim_pix fContextRoot;
  slim_pix fFirstScroll;
  TPageLayout_ *fPageLayout;
  TPageDepot *fPageDepot;
  slim_pix fFocusedPluginPix;
  slim_pix fNextClickEventElementPix;
  slim_pix fLastMouseDownPix;
  slim_pix fLastMouseMovePix;
  slim_pix fOmitDrawBGBoxPix;
  TEditorSelection fCurrentSelection;
  slim_pix fCursorPageInputPix;
  slim_pix fCursorPluginPix;
  slim_int fCursorContextShape;
  slim_opaque fCursorContextAux;
  slim_pix fFormattingContext;
  slim_int fDirtyContexts;
  TEditorFormatCtx fFormatCtx;
  TEditorStyleExVarBag fVarBag;
  THash fHash;
  slim_opaque fHashTable[23];
  slim_int fColumnRenderingResizedWidth;
  TContentString fContentString;
};

struct __attribute__((aligned(8))) TEditorStyle_Ex_
{
  slim_opaque fHashNext;
  slim_int fUseCount;
  slim_int fHash;
  slim_int fType;
};

typedef TEditorStyle_Ex_ TEditorStyle_Ex;

struct __attribute__((aligned(8))) TEditorStyle_BlockDisplayEx_
{
  TEditorStyle_Ex fBase;
  slim_int fBackgroundAttachment;
  slim_pix fBackgroundImage;
  slim_int fBackgroundPosition[2];
  slim_int fBackgroundPositionUnit[2];
  slim_int fBackgroundRepeat;
  TColor fBackgroundColor;
  TColor fBorderColor[4];
  slim_int fBorderStyle[4];
  slim_int fClip[4];
  slim_int fVisibility;
  TColor fOutlineColor;
  slim_int fOutlineStyle;
  slim_int fOutlineWidth;
  slim_int fOutlineOffset;
};

typedef TEditorStyle_BlockDisplayEx_ TEditorStyle_BlockDisplayEx;

struct __attribute__((aligned(8))) TPageLayout_
{
  TPageLayoutClass *fClass;
  slim_int fFlag;
  TPageEditor fPageEditor;
  slim_int fViewPortWidth;
  slim_int fViewPortHeight;
  slim_int fRootBlockWidth;
  slim_int fRootBlockHeight;
  slim_int fVScrollBarWidth;
  slim_int fHScrollBarHeight;
  slim_int fOverflowVScrollBarWidth;
  slim_int fOverflowHScrollBarHeight;
  TRect fDrawRect;
  TRect fClipRect;
  TColor fCanvasBackgroundColor;
  TEditorStyle_BlockDisplayEx fCanvasStyle;
  slim_int fReqMarginWidth;
  slim_int fReqMarginHeight;
  TBrowserPane *fPane;
  slim_int fFixedPosLayers;
  slim_int fFixedPosBGImages;
  slim_int fDocumentWidth;
  slim_int fDocumentHeight;
  slim_int fDisplayLeft;
  slim_int fDisplayTop;
  slim_int fPendingDisplayLeft;
  slim_int fPendingDisplayTop;
  slim_int fPendingFocusIndex;
  slim_int fTrackingDisplayLeft;
  slim_int fTrackingDisplayTop;
  slim_int fTrackingFocusOffset;
  slim_pix fTrackingFocusTarget;
  slim_int fColumnRenderingAvailWidth;
};

struct TBrowserPane_
{
  TBrowserPaneClass *fClass;
  slim_int fPaneFlag;
  TPagePref fPanePref;
  TContent fContent;
  slim_int fCurrentContentState;
  TInvokerInfo fCurrentContentInvokerInfo;
  TPanePrefAdjuster *fCurrentPanePrefAdjuster;
  slim_int fNextFlag;
  TContent fNextContent;
  slim_int fNextContentState;
  TPanePrefAdjuster *fNextPanePrefAdjuster;
  TInvokerInfo fNextContentInvokerInfo;
  TBrowserPane *fParent;
  TBrowserPane *fFirstChild;
  TBrowserPane *fNextSibling;
  TBrowserPane *fOpener;
  slim_int fPaneDepth;
  slim_pix fFramePix;
  slim_pix fPageFramePix;
  TNetDocChain fNetDocChain;
  TPageDepot fPageDepot;
  TPageMakerStore fPageMakerStore;
  TPageLayout fPageLayout;
  TBrowserWindow *fBrowserWindow;
  TAWSSplitter fAWSSplitter;
  TAWSPane fAWSPane;
  slim_pix fFocusedEventTarget;
  slim_pix fLastFocusedEventTarget;
  slim_int fLastMouseDownX;
  slim_int fLastMouseDownY;
  slim_int fUpdateLockCount;
  TString fTitle;
  TFixedString fNameStr;
  TURLString fSourceURL;
  slim_int fFrameSetFocusedPane;
  TFixedString fDefaultStyleGroup;
  TFixedString fSelectedStyleGroup;
  slim_int fStyleGroupFlag;
  slim_int fAutoReloadFlag;
  slim_int fAutoReloadMode;
  slim_int fAutoReloadStart;
  slim_int fAutoReloadTime;
  slim_pix fBackupFocusedTarget;
  slim_pix fNextLocalParams;
  slim_pix fCurrentLocalParams;
  slim_pix fNextHistoryEntry;
};

typedef TAWSEmbedInterface_ TAWSEmbedInterface;

struct TViewerWindowClass_
{
  TBrowserWindowClass fBase;
};

typedef TViewerWindowClass_ TViewerWindowClass;

typedef slim_bool (*ViewerContent_CompareURLProc)(TViewerContentClass *, TURLString, slim_char *, slim_int);

struct TViewerContentClass_
{
  TUserContentClass fBase;
  ViewerContent_CompareURLProc fCompareURL;
};

typedef TViewerContentClass_ TViewerContentClass;

struct TNSPluginTree_
{
  TTree fBase;
};

typedef TNSPluginTree_ TNSPluginTree;

struct TNSPlugin_
{
  TNSPluginTree fTree;
  slim_char *fUserAgent;
  TBrowser *fBrowser;
  slim_opaque fNPNFuncTable;
  slim_opaque fNPNF3FuncTable;
};

struct THelperApp_
{
  TBrowser *fBrowser;
  slim_int fFlag;
  TDataArena *fDataArena;
  slim_pix fEntryList;
};

typedef THelperApp_ THelperApp;

typedef TBRFetchedCommandHolder_ TBRFetchedCommandHolder;

typedef void (*BrowserCommand_AbortProc)(TBrowserCommand *);

struct slim_offlen_
{
  slim_int off;
  slim_int len;
};

typedef slim_offlen_ slim_offlen;

typedef iTContentAuth_ **TContentAuth;

struct TContentRequest_
{
  TContentClass *fClass;
  slim_int fMethod;
  slim_int fFlag;
  TURLString fURL;
  TString fFragment;
  slim_int fURLCharSet;
  slim_int fFragmentCharSet;
  slim_int fSchemeID;
  slim_offlen fSplit[9];
  TURLString fReferer;
  TPostData fPostData;
  TString fHTTPHeader;
  slim_int fRequestTypeFlag;
  TContent fRefererContent;
  TContentAuth fPageAuth;
  TContentAuth fProxyAuth;
};

struct TBrowserCommand_SetLocation_
{
  TBrowserPane *fBrowserPane;
  TBrowserPane *fSrcPane;
  TContentRequest fContentRequest;
  TBrowser *fBrowser;
  slim_pix fFormPix;
  slim_pix fHistoryEntryPix;
  slim_pix fCachePix;
  TInvokerInfo fInvokerInfo;
};

typedef TBrowserCommand_SetLocation_ TBrowserCommand_SetLocation;

struct TBrowserCommand_RequestInclusion_
{
  TBrowserPane *fBrowserPane;
  TContentRequest fContentRequest;
  slim_pix fInclusionPix;
  slim_int fSpecifiedMIMEType;
  TBrowser *fBrowser;
  slim_pix fCachePix;
  TInvokerInfo fInvokerInfo;
};

typedef TBrowserCommand_RequestInclusion_ TBrowserCommand_RequestInclusion;

struct TBrowserCommand_HistoryBackForw_
{
  TBrowserWindow *fBrowserWindow;
  slim_int fStep;
  slim_int fBy;
  slim_int fCacheMode;
  TInvokerInfo fInvokerInfo;
  slim_int fRequests;
  TBrowser *fBrowser;
  slim_handle fReqInfoList;
  slim_pix fCachePix;
  TURLString fBeforeURL;
  TURLString fAfterURL;
};

typedef TBrowserCommand_HistoryBackForw_ TBrowserCommand_HistoryBackForw;

struct TBrowserCommand_CookieDialog_
{
  THTTPCookies *fCookies;
  TURLString fURL;
  TString fCookieString;
};

typedef TBrowserCommand_CookieDialog_ TBrowserCommand_CookieDialog;

struct TBrowserCommand_ConnectDialog_
{
  THTTPChannel fHTTPChannel;
  TURLString fURL;
  slim_int fMethod;
  TPostData fPostData;
};

typedef TBrowserCommand_ConnectDialog_ TBrowserCommand_ConnectDialog;

struct TBrowserCommand_RedirectDialog_
{
  THTTPChannel fHTTPChannel;
  slim_int fStatusCode;
  slim_int fContentBy;
  slim_int fMethod;
  TURLString fURL;
  TURLString fNewURL;
};

typedef TBrowserCommand_RedirectDialog_ TBrowserCommand_RedirectDialog;

struct TBrowserCommand_PostDialog_
{
  THTTPChannel fHTTPChannel;
  TURLString fURL;
  TPostData fPostData;
};

typedef TBrowserCommand_PostDialog_ TBrowserCommand_PostDialog;

struct __attribute__((aligned(8))) TBrowserCommand_AuthDialog_
{
  THTTPChannel fHTTPChannel;
  slim_int fTarget;
  slim_int fType;
  TString fChallenge;
  TString fRealm;
  TString fUserName;
  TString fPassword;
  TURLString fURL;
  TFixedString fProxyHost;
  slim_int fProxyPort;
  slim_bool fKeepUserName;
  slim_bool fKeepPassword;
};

typedef TBrowserCommand_AuthDialog_ TBrowserCommand_AuthDialog;

struct TBrowserCommand_ServerCertConfirmDialog_
{
  TSSL fSSL;
  slim_int fVerifyResult;
  TCertList fCertList;
};

typedef TBrowserCommand_ServerCertConfirmDialog_ TBrowserCommand_ServerCertConfirmDialog;

struct TBrowserCommand_ClientCertSelectDialog_
{
  TSSL fSSL;
  TClientCertList fList;
};

typedef TBrowserCommand_ClientCertSelectDialog_ TBrowserCommand_ClientCertSelectDialog;

struct TBrowserCommand_StartScript_
{
  TBrowserPane *fPane;
};

typedef TBrowserCommand_StartScript_ TBrowserCommand_StartScript;

struct TBrowserCommand_JSAlertDialog_
{
  TDOMBind *fBind;
  TBrowserPane *fPane;
  TString fMessage;
  TInvokerInfo fInvokerInfo;
};

typedef TBrowserCommand_JSAlertDialog_ TBrowserCommand_JSAlertDialog;

struct TBrowserCommand_JSConfirmDialog_
{
  TDOMBind *fBind;
  TBrowserPane *fPane;
  TString fMessage;
  TString fPositiveLabel;
  TString fNegativeLabel;
  TInvokerInfo fInvokerInfo;
};

typedef TBrowserCommand_JSConfirmDialog_ TBrowserCommand_JSConfirmDialog;

struct TBrowserCommand_JSPromptDialog_
{
  TDOMBind *fBind;
  TBrowserPane *fPane;
  TString fMessage;
  TString fValue;
  TInvokerInfo fInvokerInfo;
};

typedef TBrowserCommand_JSPromptDialog_ TBrowserCommand_JSPromptDialog;

struct TBrowserCommand_JSHttpRequest_
{
  TJSClass *fEngineClass;
  TJSObject fObject;
  TBrowserPane *fSrcPane;
  TContentRequest fContentRequest;
  TInvokerInfo fInvokerInfo;
};

typedef TBrowserCommand_JSHttpRequest_ TBrowserCommand_JSHttpRequest;

struct TBrowserCommand_JSTimeoutDialog_
{
  TJSThread fThread;
  TBrowserPane *fPane;
};

typedef TBrowserCommand_JSTimeoutDialog_ TBrowserCommand_JSTimeoutDialog;

struct TBrowserCommand_OpenWindow_
{
  TBrowserPane *fSrcPane;
  TFixedString fTargetName;
  TFixedString fFeature;
  slim_int fBy;
  slim_bool fWithRequest;
  TContentRequest fContentRequest;
  TBrowser *fBrowser;
  slim_pix fFormPix;
  slim_pix fCachePix;
  TInvokerInfo fInvokerInfo;
  TDOMBind *fBind;
};

typedef TBrowserCommand_OpenWindow_ TBrowserCommand_OpenWindow;

struct TBrowserCommand_CloseWindow_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fSrcPane;
  slim_int fBy;
  TInvokerInfo fInvokerInfo;
};

typedef TBrowserCommand_CloseWindow_ TBrowserCommand_CloseWindow;

struct TBrowserCommand_StartPlugin_
{
  TNSPlugin *fNSPlugin;
  slim_pix fClassPix;
  slim_pix fInstancePix;
  TBrowserPane *fPane;
  slim_int fMIMEType;
  TString fClassID;
  TString fName;
  TString fDescription;
  TURLString fURL;
};

typedef TBrowserCommand_StartPlugin_ TBrowserCommand_StartPlugin;

struct TRenovateInfo_
{
  slim_int fReason;
  slim_int fFlag;
  slim_int fRequestCharset;
  slim_int fAutoDetectLangset;
};

typedef TRenovateInfo_ TRenovateInfo;

struct TBrowserCommand_RequestRenovate_
{
  TBrowserPane *fPane;
  TRenovateInfo fRenovateInfo;
};

typedef TBrowserCommand_RequestRenovate_ TBrowserCommand_RequestRenovate;

struct TBrowserCommand_HelperTypeAvail_
{
  slim_pix fStreamPix;
};

typedef TBrowserCommand_HelperTypeAvail_ TBrowserCommand_HelperTypeAvail;

struct TBrowserCommand_HelperDone_
{
  slim_pix fStreamPix;
};

typedef TBrowserCommand_HelperDone_ TBrowserCommand_HelperDone;

struct TBrowserCommand_HelperProgressInfo_
{
  slim_pix fStreamPix;
  slim_int fCurrentLength;
  slim_int fContentLength;
};

typedef TBrowserCommand_HelperProgressInfo_ TBrowserCommand_HelperProgressInfo;

struct TBrowserCommand_DeleteWindow_
{
  TBrowserWindow *fWindow;
};

typedef TBrowserCommand_DeleteWindow_ TBrowserCommand_DeleteWindow;

struct __attribute__((aligned(8))) TBrowserCommand_StreamState_
{
  TBrowserWindow *fWindow;
  TURLString fURL;
  slim_int fState;
};

typedef TBrowserCommand_StreamState_ TBrowserCommand_StreamState;

struct __attribute__((aligned(8))) TBrowserCommand_ContentState_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  TURLString fURL;
  slim_int fState;
};

typedef TBrowserCommand_ContentState_ TBrowserCommand_ContentState;

struct __attribute__((aligned(8))) TBrowserCommand_PaneState_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_int fState;
};

typedef TBrowserCommand_PaneState_ TBrowserCommand_PaneState;

struct __attribute__((aligned(8))) TBrowserCommand_WindowState_
{
  TBrowserWindow *fWindow;
  slim_int fState;
};

typedef TBrowserCommand_WindowState_ TBrowserCommand_WindowState;

struct TBrowserCommand_FrameSetState_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_int fState;
  TInvokerInfo fInvokerInfo;
};

typedef TBrowserCommand_FrameSetState_ TBrowserCommand_FrameSetState;

struct TBrowserWindowProgressInfo_
{
  slim_int fDoneFlag;
  slim_int fTotalRequestLength;
  slim_int fTotalRequestSent;
  slim_int fContents;
  slim_int fTotalCurrentLength;
  slim_int fTotalContentLength;
  slim_int fUnknownContents;
  slim_int fUnknownCurrentLength;
  slim_int fPercent;
};

struct __attribute__((aligned(8))) TBrowserCommand_WindowProgressInfo_
{
  TBrowserWindow *fWindow;
  TBrowserWindowProgressInfo fInfo;
};

typedef TBrowserCommand_WindowProgressInfo_ TBrowserCommand_WindowProgressInfo;

struct __attribute__((aligned(8))) TBrowserCommand_ContentError_
{
  slim_int fErrorCode;
  slim_int fStatusCode;
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  TURLString fURL;
  slim_int fBy;
  slim_bool fInclusion;
  slim_bool fNeedHistoryRecover;
};

typedef TBrowserCommand_ContentError_ TBrowserCommand_ContentError;

struct TSAXParseException_
{
  TString fExceptionID;
  slim_int fExceptionType;
  TXMLLocator fLocator;
};

struct TBrowserCommand_XMLSAXError_
{
  TSAXParseException fException;
};

typedef TBrowserCommand_XMLSAXError_ TBrowserCommand_XMLSAXError;

struct __attribute__((aligned(8))) TBrowserCommand_Error_
{
  slim_int fErrorType;
  slim_int fErrorCode;
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  TURLString fURL;
  slim_int fErrorParam;
};

typedef TBrowserCommand_Error_ TBrowserCommand_Error;

struct TBrowserCommand_InputFormatError_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  TString fFormat;
  TString fValue;
};

typedef TBrowserCommand_InputFormatError_ TBrowserCommand_InputFormatError;

struct TBrowserCommand_ViewerWindowSetLocation_
{
  TBrowserPane *fSrcPane;
  TURLString fURL;
  TFixedString fTarget;
  slim_pix fOutlinePix;
  TPostData fPostData;
  slim_int fMethod;
  slim_bool fFromSystem;
};

typedef TBrowserCommand_ViewerWindowSetLocation_ TBrowserCommand_ViewerWindowSetLocation;

struct TBrowserCommand_ViewerWindowRequestInclusion_
{
  TBrowserPane *fPane;
  TURLString fURL;
};

typedef TBrowserCommand_ViewerWindowRequestInclusion_ TBrowserCommand_ViewerWindowRequestInclusion;

struct __attribute__((aligned(8))) TBrowserCommand_BrowsingMode_
{
  TBrowserWindow *fWindow;
  slim_int fBrowsingMode;
};

typedef TBrowserCommand_BrowsingMode_ TBrowserCommand_BrowsingMode;

typedef TBrowserReply_ TBrowserReply;

typedef slim_bool (*BrowserCommand_OEM_ReplyProc)(TBrowser *, TBrowserCommand *, TBrowserReply *);

typedef void (*BrowserCommand_OEM_TidyProc)(TBrowserCommand *);

typedef TBRCmdMatchParam_ TBRCmdMatchParam;

typedef slim_bool (*BrowserCommand_OEM_IsMatchedProc)(TBrowserCommand *, TBRCmdMatchParam *);

struct TBrowserCommand_OEM_
{
  void *fCommand;
  BrowserCommand_OEM_ReplyProc fReplyProc;
  BrowserCommand_OEM_TidyProc fTidyProc;
  BrowserCommand_OEM_IsMatchedProc fIsMatchedProc;
};

typedef TBrowserCommand_OEM_ TBrowserCommand_OEM;

typedef slim_bool (*BrowserCommand_User_ReplyProc)(TBrowser *, TBrowserCommand *, TBrowserReply *);

typedef void (*BrowserCommand_User_TidyProc)(TBrowserCommand *);

typedef slim_bool (*BrowserCommand_User_IsMatchedProc)(TBrowserCommand *, TBRCmdMatchParam *);

struct TBrowserCommand_User_
{
  slim_opaque fUserData;
  BrowserCommand_User_ReplyProc fReplyProc;
  BrowserCommand_User_TidyProc fTidyProc;
  BrowserCommand_User_IsMatchedProc fIsMatchedProc;
};

typedef TBrowserCommand_User_ TBrowserCommand_User;

union TBrowserCommand_::$9FA0E20E1C84074D206AE5B0219D2CDF
{
  TBrowserCommand_SetLocation SetLocation;
  TBrowserCommand_RequestInclusion RequestInclusion;
  TBrowserCommand_HistoryBackForw HistoryBackForw;
  TBrowserCommand_CookieDialog CookieDialog;
  TBrowserCommand_ConnectDialog ConnectDialog;
  TBrowserCommand_RedirectDialog RedirectDialog;
  TBrowserCommand_PostDialog PostDialog;
  TBrowserCommand_AuthDialog AuthDialog;
  TBrowserCommand_ServerCertConfirmDialog ServerCertConfirmDialog;
  TBrowserCommand_ClientCertSelectDialog ClientCertSelectDialog;
  TBrowserCommand_StartScript StartScript;
  TBrowserCommand_JSAlertDialog JSAlertDialog;
  TBrowserCommand_JSConfirmDialog JSConfirmDialog;
  TBrowserCommand_JSPromptDialog JSPromptDialog;
  TBrowserCommand_JSHttpRequest JSHttpRequest;
  TBrowserCommand_JSTimeoutDialog JSTimeoutDialog;
  TBrowserCommand_OpenWindow OpenWindow;
  TBrowserCommand_CloseWindow CloseWindow;
  TBrowserCommand_StartPlugin StartPlugin;
  TBrowserCommand_RequestRenovate RequestRenovate;
  TBrowserCommand_HelperTypeAvail HelperTypeAvail;
  TBrowserCommand_HelperDone HelperDone;
  TBrowserCommand_HelperProgressInfo HelperProgressInfo;
  TBrowserCommand_DeleteWindow DeleteWindow;
  TBrowserCommand_StreamState StreamState;
  TBrowserCommand_ContentState ContentState;
  TBrowserCommand_PaneState PaneState;
  TBrowserCommand_WindowState WindowState;
  TBrowserCommand_FrameSetState FrameSetState;
  TBrowserCommand_WindowProgressInfo WindowProgressInfo;
  TBrowserCommand_ContentError ContentError;
  TBrowserCommand_XMLSAXError XMLSAXError;
  TBrowserCommand_Error Error;
  TBrowserCommand_InputFormatError InputFormatError;
  TBrowserCommand_ViewerWindowSetLocation ViewerWinSetLocation;
  TBrowserCommand_ViewerWindowRequestInclusion ViewerWinRequestInclusion;
  TBrowserCommand_BrowsingMode BrowsingMode;
  TBrowserCommand_OEM OEM;
  TBrowserCommand_User User;
};

struct TBrowserCommand_
{
  slim_int fCommandID;
  slim_int fSubType;
  slim_int fFlag;
  BrowserCommand_AbortProc fAbortProc;
  TBrowserCommand_::$9FA0E20E1C84074D206AE5B0219D2CDF u;
};

typedef TBrowserCommand_ TBrowserCommand;

struct TBRFetchedCommandHolder_
{
  TBRFetchedCommandHolder *fNext;
  TBrowserCommand fCommand;
};

struct TBRFetchedCommandList_
{
  TBRFetchedCommandHolder *fFirst;
  TBRFetchedCommandHolder *fLast;
  TBRFetchedCommandHolder fFixedHolder[3];
};

typedef TBRFetchedCommandList_ TBRFetchedCommandList;

struct TBrowserCommandQueue_
{
  TBrowser *fBrowser;
  TDataArena *fArena;
  slim_short fFlag;
  slim_short fLockCount;
  slim_pix fQueueRoot;
  slim_pix fPendingRoot;
  slim_pix fFreeRoot;
  slim_pix fReservedPix[2];
  TBRFetchedCommandList fHolderList;
};

typedef TBrowserCommandQueue_ TBrowserCommandQueue;

struct TBrowserPref_
{
  slim_bool fAccesskeyFocusOnlySubmitReset;
  slim_bool fAllowHTTPandHTTPS;
  slim_bool fAnimateImage;
  slim_int fAnimationImageMaxLoops;
  slim_int fAutoLoadImageBound;
  slim_bool fAutoSetFocus;
  slim_int fBlinkLimitTime;
  slim_int fBlinkOffPeriod;
  slim_int fBlinkOnPeriod;
  slim_int fBlockHeightPolicy;
  slim_int fBlockquoteMargin_bottom;
  slim_int fBlockquoteMargin_left;
  slim_int fBlockquoteMargin_right;
  slim_int fBlockquoteMargin_top;
  slim_int fCSSDisables;
  slim_int fCSSMediaTypes;
  slim_int fCacheExpirePeriod;
  slim_int fCacheMode;
  slim_int fCacheProtectInMemoryCrisis;
  slim_int fCanvasMarginHeight;
  slim_int fCanvasMarginWidth;
  slim_int fContentParserMaxStayTime;
  slim_int fContentPersistentMaxStayTime;
  slim_int fCookieMode;
  slim_int fDNSMaxCacheEntries;
  slim_int fDNSMaxRetry;
  slim_int fDNSPort;
  TString fDNSPrimary;
  slim_int fDNSRetryInterval;
  TString fDNSSecondary;
  slim_int fDOMSettings;
  slim_int fDaysToExpireVisits;
  TString fDefaultStyleSheet;
  slim_int fDeleteImageBound;
  slim_bool fDisableFilep;
  slim_bool fDisplayCompact;
  slim_bool fDisplayTable;
  slim_int fDocTypeMode;
  slim_int fDragThreshold;
  slim_int fEditorDrawDelayPeriod;
  slim_int fEditorMaxStayTimeBG;
  slim_int fEditorMaxStayTimeFG;
  slim_bool fEnableBlink;
  slim_bool fEnableCanvasElement;
  slim_bool fEnableClientPull;
  slim_bool fEnableCursor;
  slim_bool fEnableEmbed;
  slim_bool fEnableFrameSet;
  slim_bool fEnableIECompatDOM;
  slim_bool fEnableIFrame;
  slim_bool fEnableImageDefaultAlt;
  slim_bool fEnableMarquee;
  slim_bool fEnableTabIndex;
  slim_bool fEnableUserScript;
  slim_int fFilepCharSet;
  slim_bool fFitIntoPane;
  slim_int fFocusOutlineWidth;
  slim_int fFocusOutlineWidthForControl;
  slim_int fFocusOutlineWidthForIFrame;
  slim_int fFocusOutlineWidthForPlugin;
  slim_int fFrameSetThumbnail;
  slim_int fHTTPConnectTimeout;
  slim_int fHTTPKeepAliveTimeout;
  slim_int fHTTPMaxPipelineRequests;
  slim_int fHTTPMaxStreams;
  slim_int fHTTPPort;
  slim_int fHTTPReqTimeout;
  slim_int fHTTPRspTimeout;
  slim_int fHTTPSPort;
  slim_int fI18NArchLangSet;
  slim_int fI18NAutoDetectLangSet;
  slim_int fI18NRequestedCharSet;
  slim_int fImageDecodeMaxStayTime;
  slim_int fImageDisables;
  slim_fixed_point fImageMag;
  slim_bool fImageRectAlt;
  slim_int fImageResizeAlgorithm;
  slim_bool fIncrementalReflow;
  slim_bool fJavaScriptAdjustTime;
  slim_int fJavaScriptSettings;
  slim_bool fKeepResizedImage;
  slim_bool fKinsoku;
  slim_int fL1ContentSize;
  slim_int fL1Entries;
  slim_int fL1TotalSize;
  slim_int fL2ContentSize;
  slim_int fL2Entries;
  slim_int fL2TotalSize;
  slim_int fLineHeightPolicy;
  slim_int fListMarkerPadding;
  slim_bool fLoadPageAsIs;
  slim_fixed_point fMag;
  slim_int fMaxActiveDecoders;
  slim_int fMaxCookiesPerDomain;
  slim_int fMaxHistories;
  slim_int fMaxImageDelayTime;
  slim_int fMaxImageHeight;
  slim_int fMaxImageWidth;
  slim_int fMaxLenPerCookie;
  slim_int fMaxPageAuth;
  slim_int fMaxPixelsPerDecodedPixelMap;
  slim_int fMaxPixelsPerImage;
  slim_int fMaxProxyAuth;
  slim_int fMaxRedirect;
  slim_int fMaxRequestBody;
  slim_int fMaxRequestHeader;
  slim_int fMaxStreams;
  slim_int fMaxTotalContentsSize;
  slim_int fMaxTotalCookies;
  slim_int fMaxTotalCookiesLen;
  slim_int fMaxVisits;
  slim_int fMinImageDelayTime;
  slim_int fMinSleepTimeInNetworking;
  slim_bool fMobileLinkDiscovery;
  slim_int fMultipleSelectDefaultSize;
  TString fNavigatorAppCodeName;
  TString fNavigatorAppMinorVersion;
  TString fNavigatorAppName;
  TString fNavigatorAppVersion;
  TString fNavigatorBrowserLanguage;
  TString fNavigatorCPUClass;
  TString fNavigatorLanguage;
  TString fNavigatorOSCPU;
  slim_bool fNavigatorOnLine;
  TString fNavigatorPlatform;
  TString fNavigatorProduct;
  TString fNavigatorProductSub;
  TString fNavigatorSystemLanguage;
  TString fNavigatorUserAgent;
  TString fNavigatorUserLanguage;
  TString fNavigatorVendor;
  TString fNavigatorVendorSub;
  TString fNoProxyHosts;
  slim_bool fNotifyFrameSetState;
  slim_int fNotifyInclError;
  slim_int fNotifyStreamState;
  slim_int fPDConfig;
  slim_int fPageMakerMaxStayTime;
  slim_bool fPixelMapProtectInMemoryCrisis;
  slim_bool fPriorityOverMetaHTTPEquiv_cache_control;
  slim_bool fPriorityOverMetaHTTPEquiv_refresh;
  slim_bool fProgressiveOnlyDisplayed;
  slim_int fProxyHTTPPort;
  slim_int fProxyHTTPSPort;
  TFixedString fProxyHost;
  slim_int fQueryRequestInclMask;
  slim_bool fQueryStartScript;
  slim_bool fRememberFormValue;
  slim_bool fRunJavaScript;
  slim_int fSSLVersion;
  slim_int fScriptDisables;
  slim_int fScriptMaxStayTime;
  slim_int fScriptTimeout;
  slim_int fJSGCDelayPeriodOnProg;
  slim_bool fSendCookie;
  slim_bool fSendProxyKeepAlive;
  slim_bool fSendReferer;
  slim_bool fSimpleImagePlaceHolder;
  slim_int fSingleSelectDefaultSize;
  slim_int fSplitBltThreshold;
  TURLString fStartPage;
  slim_int fTabOrder;
  slim_int fTabWidth;
  slim_int fTableLayout;
  slim_fixed_point fTextMag;
  slim_int fTextareaCols;
  slim_int fTextareaRows;
  slim_bool fUTF8EncodedURL;
  slim_bool fUseHTTP11OverProxy;
  slim_bool fUseHTTP11PipeLine;
  slim_bool fUseIDN;
  slim_bool fUseProxy;
  TString fUserStyleSheet;
  slim_int fWaitDecodeImage;
  slim_bool fWaitStartMarquee;
  slim_int fWapMarqueeSpeedFast;
  slim_int fWapMarqueeSpeedNormal;
  slim_int fWapMarqueeSpeedSlow;
  slim_int fWindowInherits;
  slim_int fWindowInheritsX;
  slim_bool fWordWrap;
};

typedef TBrowserPref_ TBrowserPref;

typedef slim_int (*ContentDeterminer_GuessProc)(TContentDeterminer *, slim_byte *, slim_int, slim_bool);

typedef slim_int (*ContentDeterminer_AdoptProc)(TContentDeterminer *, slim_bool, slim_bool);

typedef slim_int (*ContentDeterminer_GuessCharSetProc)(TContentDeterminer *, slim_byte *, slim_int, slim_bool, slim_int *);

struct TContentDeterminerClass_
{
  TMIMEInfoClass *fMIMEInfoClass;
  TI18NConverterClass *fI18NConverterClass;
  TCharSetGuessParam fDefaultGuessParam;
  slim_int fMaxGuessLen[7];
  ContentDeterminer_GuessProc fGuessText;
  ContentDeterminer_GuessProc fGuessBinary;
  ContentDeterminer_AdoptProc fAdoptMIMEType;
  ContentDeterminer_GuessCharSetProc fGuessCharSet;
  ContentDeterminer_GuessProc fDetectCharSet;
  ContentDeterminer_AdoptProc fAdoptCharSet;
};

struct TContentHandlerClass_
{
  TMIMEInfoClass *fMIMEInfoClass;
  TDataArena *fDataArena;
  TBrowser *fBrowser;
  slim_pix fTextRoot;
  slim_pix fBinRoot;
  slim_pix fHandlerRoot;
  slim_pix fUnknownHolder;
};

typedef TContentHandlerClass_ TContentHandlerClass;

typedef TDummyAWSInstance_ TDummyAWSInstance;

typedef slim_int (*ContentSpecFactory_PrepareProc)(TContentSpecFactory *, TContentRequest *, TContentSpec *);

struct TContentSpecFactory_
{
  TContentClass *fContentClass;
  ContentSpecFactory_PrepareProc fPrepare;
  slim_opaque fUserData;
};

typedef TBrowserPageSaveItem_ TBrowserPageSaveItem;

struct TAliasURLDict_
{
  TURLSchemeInfoClass *fURLSchemeInfoClass;
  TDataArena *fArena;
  slim_pix fRootPix;
};

typedef TAliasURLDict_ TAliasURLDict;

struct TPageSaveItemPosInfo_
{
  slim_int fStartPos;
  slim_int fEndPos;
};

typedef TPageSaveItemPosInfo_ TPageSaveItemPosInfo;

struct TBrowserNormalPageSaveCookie_
{
  slim_int fRedirectURLLength;
};

typedef TBrowserNormalPageSaveCookie_ TBrowserNormalPageSaveCookie;

typedef slim_opaque TBrowserMHTPageSaveCookie;

union TBrowserPageSaveCookie_
{
  TBrowserNormalPageSaveCookie fNormal;
  TBrowserMHTPageSaveCookie fMHT;
};

typedef TBrowserPageSaveCookie_ TBrowserPageSaveCookie;

struct __attribute__((aligned(8))) TPageSaveSerializeCtx_
{
  slim_int fFormat;
  slim_int fTotalLen;
  slim_int fPendingLen;
  slim_int fCurItem;
  slim_int fCurOff;
  slim_int fCurState;
  slim_int fCurPos;
  slim_bool fDone;
  TPageSaveItemPosInfo fItemPosInfo;
  TBrowserPageSaveCookie fCookie;
  slim_int fSerializeType;
};

typedef TPageSaveSerializeCtx_ TPageSaveSerializeCtx;

struct TBrowserPageSaveInfo_
{
  TBrowserPageSaveInfoClass *fClass;
  slim_bool fAllocated;
  slim_bool fDoNotRealizeContent;
  slim_time fTime;
  slim_int fItems;
  TBrowserPageSaveItem *fItem;
  TAliasURLDict fAliasURLDict;
  TFixedString fFileName;
  TPageSaveSerializeCtx fCtx;
  slim_int (*fNotifyItemProc)(TBrowserPageSaveInfo *, TBrowserPageSaveItem *);
  slim_int (*fNotifyAliasProc)(TBrowserPageSaveInfo *, TURLString, TURLString, slim_int);
  slim_bool (*fNotifyFileProc)(TBrowserPageSaveInfo *, TFixedString, TFixedString);
  slim_opaque fNotificationReceiver;
  slim_opaque fUserData;
};

struct TPageSaveCacheHTTPCallbackTable_
{
  slim_int (*fDetermineRetrieverProc)(TContentChannelClass_ *, TURLString, slim_int, TPostData, slim_int, slim_int, slim_int *);
  HTTPChannel_FindCacheProc fFindCacheProc;
  HTTPChannel_GetCoreSpecInfoProc fGetCoreSpecInfoProc;
  HTTPChannel_TidyCoreSpecInfoProc fTidyCoreSpecInfoProc;
  THTTPChannel_UseOrStickCacheProc fUseOrStickCacheProc;
  THTTPChannel_ReadCacheProc fReadCacheProc;
  THTTPChannel_DeleteCacheProc fDeleteCacheProc;
};

typedef TPageSaveCacheHTTPCallbackTable_ TPageSaveCacheHTTPCallbackTable;

struct TPageSaveCache_
{
  TTree fTree;
  slim_pix fRoot;
  THash fHash;
  slim_opaque fHashTable[256];
  TBrowserPageSaveInfoClass *fPageSaveInfoClass;
  TBrowserPageSaveInfo fPageSaveInfo;
  slim_int fMode;
  TContentClass *fContentClass;
  THTTPChannelClass *fHTTPChannelClass;
  TPageSaveCacheHTTPCallbackTable fPSCCallbackTable;
  TPageSaveCacheHTTPCallbackTable fDefaultCallbackTable;
  slim_int (*fGetFileIdentifierProc)(TFixedString);
  void (*fNotifyFileIdentifierProc)(TFixedString, slim_int);
  slim_pix fPrevItemPix;
};

typedef TPageSaveCache_ TPageSaveCache;

typedef TPWSGlobalContext_ TPWSGlobalContext;

typedef slim_bool (*TBrowser_ConnectCallback)(TBrowser *, THTTPChannel, TURLString, slim_int, TPostData, slim_opaque);

struct __attribute__((aligned(8))) TBrowser_
{
  slim_int fBrowserFlag;
  Browser_PaneHandleNextContentProc fPaneHandleNextContent;
  TDataArena fDataArena;
  TMIMEInfoClass fMIMEInfoClass;
  TURLSchemeInfoClass fURLSchemeInfoClass;
  TContentClass fContentClass;
  THTTPChannelClass fHTTPChannelClass;
  TFilepChannelClass fFilepChannelClass;
  TAboutChannelClass fAboutChannelClass;
  TPictpChannelClass fPictpChannelClass;
  TDatapChannelClass fDatapChannelClass;
  TMultiContentChannelClass fMultiContentChannelClass;
  TMIMEMPContentClass fMIMEMPContentClass;
  TUserContentClass fUserContentClass;
  TBrowserPageSaveInfoClass fPageSaveInfoClass;
  TPageSaveContentClass fPageSaveContentClass;
  TSavedPageDataFeeder *fSavedPageDataFeeder;
  TSSLClass fSSLClass;
  TPageOutlineClass fPageOutlineClass;
  TNetDocChainClass fNetDocChainClass;
  TNetDocClass fNetDocClass;
  TNetDocProcessorClass fNetDocProcessorClass;
  TPageDepotScriptEngineClass fJavaScriptClass;
  TJSClass fJavaScriptCoreClass;
  TUserScriptManager fUserScriptManager;
  TCDATAFormatterClass fCDATAFormatterClass;
  TTextHTMLParserClass fTextHTMLParserClass;
  TPlasticTextParserClass fPlasticTextParserClass;
  TObjectAnyParserClass fObjectAnyParserClass;
  TViewerContentParserClass fViewerContentParserClass;
  TNetDocProcessorClass fViewerContentProcessorClass;
  TNetDoc fNetDoc[4];
  TI18NConverterClass fI18NConverterClass;
  TxxMLSchemaStore fSchemaStore;
  THTMLTokenizerClass fHTMLTokenizerClass;
  TXMLTokenizerClass fXMLTokenizerClass;
  TWBXMLTokenizerClass fWBXMLTokenizerClass;
  TTextXMLReaderClass fTextXMLReaderClass;
  TBinaryXMLReaderClass fBinaryXMLReaderClass;
  THTMLPageMakerClass fHTMLPageMakerClass;
  TPageDepotClass fPageDepotClass;
  TPageLayoutClass fPageLayoutClass;
  TPageEditorClass fPageEditorClass;
  TViewerContentPageMakerClass fViewerContentPageMakerClass;
  TPTextParserClass fPTextParserClass;
  TPTextPageMakerClass fPTextPageMakerClass;
  TNetDocProcessorClass fPTextProcessorClass;
  TNetDocProcessorClass fMetaProcessorClass;
  TMetaPageMakerClass fMetaPageMakerClass;
  TRDFParserClass fRDFParserClass;
  TRSSParserClass fRSSParserClass;
  TNetDocProcessorClass fRSSProcessorClass;
  TRSSTransformerClass fRSSTransformerClass;
  TNetDocEvaluator fRSSTransformationEvaluator;
  TAtomParserClass fAtomParserClass;
  TNetDocProcessorClass fAtomProcessorClass;
  TAtomTransformerClass fAtomTransformerClass;
  TNetDocEvaluator fAtomTransformationEvaluator;
  TGIFDecoderClass fGIFDecoderClass;
  TIJGJPEGDecoderClass fIJGJPEGDecoderClass;
  TLIBPNGDecoderClass fLIBPNGDecoderClass;
  TMNGDecoderClass fMNGDecoderClass;
  TBMPDecoderClass fBMPDecoderClass;
  TBrowserWindowClass fBrowserWindowClass;
  TBrowserPaneClass fBrowserPaneClass;
  TBrowserHistoryClass fBrowserHistoryClass;
  TBrowserVisitClass fBrowserVisitClass;
  TBrowserPane fBrowserPane[4];
  TAWSInterface *fAWSInterface[3];
  TAWSEmbedInterface *fAWSEmbedInterface[3];
  slim_int fPanes;
  TViewerWindowClass fViewerWindowClass;
  TViewerContentClass fViewerContentClass;
  TNSPlugin fNSPlugin;
  THelperApp fHelperApp;
  TBrowserCommandQueue fCommandQueue;
  TBrowserPref fPref;
  slim_handle fMemoryCrisisReserve;
  slim_int fMemoryCrisisType;
  TContentDeterminerClass fContentDeterminerClass;
  TContentHandlerClass fContentHandlerClass;
  void (*fWakeUpCallback)(slim_opaque);
  slim_opaque fWakeUpCallbackAux;
  TDummyAWSInstance *fDummyAWS;
  slim_pix fLocalParamRoot;
  slim_pix fEventParamList;
  TString fExpiredContentString;
  TContentSpecFactory fPgSvCchSpecFactory;
  TPageSaveCache fPageSaveCache;
  TPWSGlobalContext *fPlateGlobalContext;
  TBrowser_ConnectCallback fConnectCallback;
  slim_opaque fConnectCallbackAux;
  slim_bool fIsYielded;
};

struct TBrowserHistory_
{
  TBrowserHistoryClass *fClass;
  TBrowser *fBrowser;
  TBrowserWindow *fBrowserWindow;
  TVarBag fVarBag;
  slim_pix fHeadEntry;
  slim_pix fCurrentEntry;
  slim_int fLength;
  slim_int fFlag;
  slim_pix fRequestingEntry;
  slim_int fRequestingEntryDiff;
  slim_int fNumOfMultiContents;
  slim_pix fHeadMultiContentHolder;
};

typedef TPWSContext_ TPWSContext;

struct TBrowserWindow_
{
  TBrowserWindowClass *fClass;
  slim_int fWindowFlag;
  TPagePref fWindowPref;
  TAWSInterface *fAWSInterface;
  TAWSEmbedInterface *fAWSEmbedInterface;
  TAWSWindow fAWSWindow;
  slim_int fPanes;
  slim_int fMaxPanesPerWindow;
  slim_int fMaxPaneDepth;
  TBrowser *fApp;
  TBrowserWindow *fNext;
  TBrowserPane *fRootPane;
  TBrowserHistory fHistory;
  TBrowserPane *fMouseDownPane;
  TBrowserPane *fMouseMovePane;
  TBrowserPane *fCursorPane;
  TBrowserPane *fFocusedPane;
  TBrowserPane *fTextSelectionPane;
  TBrowserPane *fSelectedPane;
  TBrowserPane *fPendingSelectedPane;
  slim_int fDocumentReadingCount;
  slim_int fDocumentProgressCount;
  slim_int fTotalContentSizeLimit;
  TString fStatus;
  TString fDefaultStatus;
  slim_opaque fUserData;
  TBrowserWindowProgressInfo fProgressInfo;
  slim_pix fLocalParamRoot;
  TPWSContext *fPlateWindowContext;
};

struct TWebDataHashHolder_
{
  THash fHash;
  slim_opaque fHashTable[32];
};

typedef TWebDataHashHolder_ TWebDataHashHolder;

typedef slim_int (*TWebDataKeyEncodeProc)(slim_byte *, slim_int, slim_byte *);

typedef slim_int (*TWebDataEncodeStringProc)(slim_byte *, slim_int, slim_byte *, slim_int, slim_byte *);

typedef TString (*TWebDataDecodeStringProc)(slim_byte *, slim_int, slim_byte *, slim_int);

struct TWebDataManager_
{
  TTree fTree;
  TWebDataHashHolder fHashHolder[2];
  slim_int fDataNum;
  slim_int fMaxDataNum;
  slim_handle fMasterHash;
  TString fMasterKey;
  slim_pix fLRUFirstPix;
  slim_pix fLRULastPix;
  slim_opaque fSerializationCtx;
  TWebDataKeyEncodeProc fKeyEncodeProc;
  TWebDataEncodeStringProc fEncodeStringProc;
  TWebDataDecodeStringProc fDecodeStringProc;
};

typedef TDialogTemplateItem_ TDialogTemplateItem;

typedef TDialogTemplateItemLayout_ TDialogTemplateItemLayout;

struct __attribute__((aligned(8))) TDialogTemplate_
{
  slim_int fNumItems;
  slim_char *fTitle;
  TRect fRect;
  TDialogTemplateItem *fItems;
  TDialogTemplateItemLayout *fItemLayoutInfo;
  slim_int fSkinID;
};

typedef TToolBarInfo_ TToolBarInfo;

struct __attribute__((aligned(8))) iTToolBar_
{
  TWnd fWnd;
  TStandardBrowser fBrowser;
  TWnd fLabel;
  TWnd fLastFocusedItem;
  TWnd fActionListener;
  TToolBarInfo *fToolBarInfo;
  TDialogTemplate *fDialogTemplate;
  slim_bool fFirstShowing;
};

typedef iTTabbedMenuHandler_ iTTabbedMenuHandler;

typedef iTTabbedMenuHandler **TTabbedMenuHandler;

struct __attribute__((aligned(8))) iTBrowserMenu_
{
  TWnd fWnd;
  TTabbedMenuHandler fMenuHandler;
  TStandardBrowser fStandardBrowser;
  slim_bool fIsShowing;
};

typedef TTitleAreaInfo_ TTitleAreaInfo;

struct __attribute__((aligned(8))) iTTitleArea_
{
  TWnd fWnd;
  TWnd fView;
  TStandardBrowser fStandardBrowser;
  TAppBrowser fAppBrowser;
  TOpaqueList fTabButtonList;
  TTitleAreaInfo *fTitleAreaInfo;
  slim_int fTabNum;
  slim_int fActiveTabIndex;
  slim_int fWidth;
  slim_int fHeight;
  slim_int fActiveTabWidth;
  slim_int fNonactiveTabWidth;
  slim_bool fSelectMode;
};

typedef TBookmarkDialogInfo_ TBookmarkDialogInfo;

typedef iTListViewHandler_ iTListViewHandler;

typedef iTListViewHandler **TListViewHandler;

typedef TBookTree_ TBookTree;

typedef TBookmarkSubmenu_ TBookmarkSubmenu;

typedef iTBookmarkSubWndUserItem_ iTBookmarkSubWndUserItem;

typedef iTBookmarkSubWndUserItem **TBookmarkSubWndUserItem;

struct iTPageThumbnailCache_;

typedef struct iTPageThumbnailCache_ **TPageThumbnailCache;

struct __attribute__((aligned(8))) TPageThumbnail_
{
  slim_int fFormat;
  TWWWImage fImage;
  slim_handle fData;
  slim_int fDataSize;
};

typedef TPageThumbnail_ TPageThumbnail;

struct TPageThumbnailCacheKey_
{
  TURLString fURL;
};

typedef TPageThumbnailCacheKey_ TPageThumbnailCacheKey;

struct TTableCompoMode_
{
  slim_bool fDisableScrollBar;
  slim_bool fNoHideHScrollBar;
  slim_bool fNoHideVScrollBar;
};

typedef TTableCompoMode_ TTableCompoMode;

struct iTBookmarkDialog_
{
  TWnd fWnd;
  TWnd fTableCompo;
  TWnd fURLText;
  TBookmarkDialogInfo *fBookmarkDialogInfo;
  TListViewHandler fListViewHandler;
  TBookTree *fBookTree;
  TStandardBrowser fStandardBrowser;
  TWWWPixelMap *fBookmarkLockNormalImage;
  TWWWPixelMap *fBookmarkLockSelectedImage;
  slim_bool fIsURLList;
  TBookmarkSubmenu *fSubmenuList;
  TBookmarkSubmenu *fSubmenuVisual;
  TWnd fBookmarkEditDialog;
  TWnd fBookmarkDeleteDialog;
  TSpecList fItemboxCompoList;
  slim_int fItemboxPageNum;
  slim_int fItemboxLastPageNum;
  slim_bool fIsForcusSearch;
  slim_int fCurrentIndex;
  slim_bool fIsVisual;
  TBookmarkSubWndUserItem fItemData;
  TPageThumbnailCache fThumbCache;
  TPageThumbnail fThumb;
  TPageThumbnailCacheKey fKey;
  slim_bool fMoveCaret;
  slim_int fSelectIndex;
  slim_int fFlag;
  TTableCompoMode fTableMode;
};

typedef TURLHistoryDialogInfo_ TURLHistoryDialogInfo;

typedef TURLHistorySubmenu_ TURLHistorySubmenu;

struct __attribute__((aligned(8))) iTURLHistoryDialog_
{
  TWnd fWnd;
  TURLHistory fURLHistory;
  TURLHistoryDialogInfo *fURLHistoryDialogInfo;
  TListViewHandler fListViewHandler;
  TStandardBrowser fStandardBrowser;
  TWnd fTableCompo;
  TString *fURLStringBuffer;
  slim_int fURLStringBufferLength;
  TURLHistorySubmenu *fSubmenu;
  TWnd fDeleteDialog;
  TTableCompoMode fTableMode;
};

typedef TPageMemoDialogInfo_ TPageMemoDialogInfo;

typedef TPageMemoList_ TPageMemoList;

typedef TPageMemoSubmenu_ TPageMemoSubmenu;

struct iTPageMemoDialog_
{
  TWnd fWnd;
  TWnd fTableCompo;
  TWnd fURLText;
  TPageMemoDialogInfo *fPageMemoDialogInfo;
  TListViewHandler fListViewHandler;
  TPageMemoList *fPageMemoList;
  TStandardBrowser fStandardBrowser;
  TWWWPixelMap *fPageMemoLockNormalImage;
  TWWWPixelMap *fPageMemoLockSelectedImage;
  slim_bool fIsURLList;
  TPageMemoSubmenu *fSubmenu;
  TWnd fPageMemoEditDialog;
  TWnd fPageMemoDeleteDialog;
  TString *fURLStringBuffer;
  slim_int fURLStringBufferLength;
  TTableCompoMode fTableMode;
};

typedef TBrowserCertDialogInfo_ TBrowserCertDialogInfo;

typedef TBrowserCertSubmenu_ TBrowserCertSubmenu;

struct iTBrowserCertDialog_
{
  TWnd fWnd;
  TWnd fTableCompo;
  TBrowserCertDialogInfo *fCertDialogInfo;
  TListViewHandler fListViewHandler;
  TCertList *fCertList;
  slim_int fCertType;
  TStandardBrowser fStandardBrowser;
  TBrowserCertSubmenu *fBrowserCertSubmenu;
  TWWWPixelMap *fCertValidNormalImage;
  TWWWPixelMap *fCertValidSelctedImage;
  TString *fStringBuffer;
  slim_int fStringBufferLength;
  TTableCompoMode fTableMode;
};

typedef TClientCertDialogInfo_ TClientCertDialogInfo;

typedef TClientCertSubmenu_ TClientCertSubmenu;

struct iTClientCertDialog_
{
  TWnd fWnd;
  TWnd fTableCompo;
  TClientCertDialogInfo *fCertDialogInfo;
  TListViewHandler fListViewHandler;
  TCertList fCertList;
  TStandardBrowser fStandardBrowser;
  TClientCertSubmenu *fClientCertSubmenu;
  TWnd fDeleteDialog;
  TString *fStringBuffer;
  slim_int fStringBufferLength;
  TTableCompoMode fTableMode;
};

struct iTCertInfoDialog_
{
  TWnd fWnd;
  TWnd fInfoText;
};

struct iTClientCertSelectDialog_
{
  TWnd fWnd;
  TWnd fListCompo;
  TStandardBrowser fStandardBrowser;
};

typedef TVisitHistoryDialogInfo_ TVisitHistoryDialogInfo;

typedef TOpaqueArray TIntArray;

typedef TVisitHistorySubmenu_ TVisitHistorySubmenu;

struct __attribute__((aligned(8))) iTVisitHistoryDialog_
{
  TWnd fWnd;
  TWnd fTableCompo;
  TWnd fURLText;
  TVisitHistoryDialogInfo *fVisitHistoryDialogInfo;
  TListViewHandler fListViewHandler;
  TBrowserVisit *fVisitHistory;
  TIntArray *fVisitHistoryIndices;
  TStandardBrowser fStandardBrowser;
  slim_bool fIsURLList;
  TString *fURLStringBuffer;
  slim_int fURLStringBufferLength;
  TString *fTitleStringBuffer;
  slim_int fTitleStringBufferLength;
  TVisitHistorySubmenu *fSubmenu;
  TWnd fVisitHistoryDeleteDialog;
  TTableCompoMode fTableMode;
};

struct iTEnterURLDialog_
{
  TWnd fWnd;
  TWnd fEditWnd;
  TURLString fURL;
  TURLHistory fURLHistory;
  TURLHistoryDialog fURLHistoryDialog;
  TStandardBrowser fStandardBrowser;
};

typedef TTextSearchDialogInfo_ TTextSearchDialogInfo;

struct __attribute__((aligned(8))) iTTextSearchDialog_
{
  TWnd fWnd;
  TWnd fTextField;
  TWnd fMoveButton;
  slim_int fCharSet;
  slim_int fSearchFlag;
  slim_int fPosition;
  TStandardBrowser fStandardBrowser;
  TTextSearchDialogInfo *fInfo;
  slim_int fPosX;
  slim_int fTopPosY;
  slim_int fBottomPosY;
};

struct iTWebSearchDialog_
{
  TStandardBrowser fStandardBrowser;
  TWnd fWnd;
  TWnd fEditWnd;
};

struct iTTranslateDialog_
{
  TStandardBrowser fStandardBrowser;
  TWnd fWnd;
  TWnd fChoiceWnd;
  TURLString fURL;
};

typedef TDownloadDialogInfo_ TDownloadDialogInfo;

struct iTDownloadDialog_
{
  TStandardBrowser fStdBrowser;
  slim_time fStartTime;
  TWnd fWnd;
  TString fStatusString;
  TString fDefaultFileName;
  TString fFileName;
  slim_int fResult;
  slim_int fDesc;
  TDownloadDialogInfo *fDialogInfo;
  slim_int fContentLen;
  slim_int fCurLen;
};

struct slim_vhandle_
{
  slim_byte *fData;
};

typedef char slim_tiny;

typedef iTContentCoreSpec_ **TContentCoreSpec;

struct iTContentSpec_
{
  TContentClass *fClass;
  slim_pix fPix;
  slim_int fFlag;
  slim_opaque fHashNext;
  slim_short fRefCount;
  slim_short fAbortCount;
  slim_short fRedirectCount;
  slim_tiny fPageAuthCount;
  slim_tiny fProxyAuthCount;
  slim_int fMethod;
  TURLString fURL;
  TURLString fReferer;
  TPostData fPostData;
  TURLString fRedirectURL;
  TURLString fOriginalURL;
  TString fHTTPHeader;
  TContentChannelClass *fContentChannelClass;
  TContentChannel fContentChannel;
  slim_int fCacheType;
  slim_int fExtFlag;
  slim_int fRequestLen;
  slim_int fRequestSent;
  slim_int fChannelState;
  slim_int fStatusCode;
  slim_int fErrorCode;
  TContentCoreSpec fCoreSpec;
  slim_int fWindowSize;
  slim_int fCoreConsumedLength;
  TContentAuth fPageAuth;
  TContentAuth fProxyAuth;
};

typedef TDRMMediaObject_ TDRMMediaObject;

typedef TDRMUsageContext_ TDRMUsageContext;

struct iTContent_
{
  TContentSpec fContentSpec;
  slim_int fRequestFlag;
  TURLString fReferer;
  slim_int fURLCharSet;
  slim_int fRequestedMIMEType;
  TString fFragment;
  slim_int fFragmentCharSet;
  slim_int fForcedCharSet;
  slim_int fInstanceFlag;
  TMultiContent fMultiContent;
  slim_int fSafeDataLen;
  slim_bool fSafeDataDone;
  TDRMMediaObject *fMediaObject;
  TDRMUsageContext *fUsageContext;
};

struct TDRMManager_
{
  slim_int (*fGetMediaObject)(TDRMManager *, TContent, TDRMUsageContext *, TDRMMediaObject *);
  slim_bool (*fIsForwardLocked)(TDRMManager *, TContent);
  slim_opaque fUserData;
};

struct __attribute__((aligned(8))) iTContentChannel_
{
  TContentChannelClass *fClass;
  slim_int fState;
};

typedef slim_bool (*PostData_FetchSpecialFileProc)(slim_opaque, slim_char *, slim_int, slim_int *, slim_bool);

typedef void (*PostData_DeleteSpecialFileProc)(slim_opaque);

struct iTPostData_
{
  slim_int fFlag;
  slim_int fEncoding;
  slim_int fDataSize;
  slim_int fRefCount;
  slim_vhandle fData;
  PostData_FetchSpecialFileProc fFetchSpecialFileProc;
  PostData_DeleteSpecialFileProc fDeleteSpecialFileProc;
};

typedef unsigned __int16 slim_half;

struct TSSLVersion_
{
  slim_half fMajor;
  slim_half fMinor;
};

typedef TSSLVersion_ TSSLVersion;

struct TSSLSocketInfo_
{
  slim_int fFlag;
  TSSLVersion fVersion;
  TSSLCipherSuite fCipherSuite;
  slim_int fVerificationResults;
  TCertList fServerCertList;
};

struct __attribute__((aligned(8))) TSSLBuf_
{
  slim_int fState;
  slim_vhandle fHdl;
  slim_byte *fPtr;
  slim_int fCurLen;
  slim_int fOfs;
  slim_int fLen;
};

typedef TSSLBuf_ TSSLBuf;

struct TSSLSeqNum_
{
  slim_word fHi;
  slim_word fLo;
};

typedef TSSLSeqNum_ TSSLSeqNum;

typedef TMDCtx_ TMDCtx;

typedef void (*TMDBeginCtxProc)(TMDCtx *);

typedef void (*TMDUpdateCtxProc)(TMDCtx *, slim_byte *, slim_word);

typedef void (*TMDEndCtxProc)(TMDCtx *, slim_byte *);

struct TMD2_
{
  slim_word fXW[16];
  slim_word fCount;
};

typedef TMD2_ TMD2;

struct TMD5_
{
  slim_word fDigest[4];
  slim_word fCountLo;
  slim_word fCountHi;
  slim_word fData[16];
};

typedef TMD5_ TMD5;

struct TSHS_
{
  slim_word fDigest[5];
  slim_word fCountLo;
  slim_word fCountHi;
  slim_word fData[16];
};

typedef TSHS_ TSHS;

union TMDCtx_
{
  slim_int uNull;
  TMD2 uMD2;
  TMD5 uMD5;
  TSHS uSHA1;
};

struct __attribute__((aligned(8))) TMD_
{
  slim_int fDigestAlgo;
  slim_int fDigestSize;
  TMDBeginCtxProc fBeginCtxProc;
  TMDUpdateCtxProc fUpdateCtxProc;
  TMDEndCtxProc fEndCtxProc;
  TMDCtx fCtx;
};

typedef TMD_ TMD;

struct TSSLSessionID_
{
  slim_int fLen;
  slim_byte fData[32];
};

typedef TSSLSessionID_ TSSLSessionID;

struct TSSLRandom_
{
  slim_int fSize;
  slim_byte fData[32];
};

typedef TSSLRandom_ TSSLRandom;

struct TSSLMasterSecret_
{
  slim_byte fData[48];
};

typedef TSSLMasterSecret_ TSSLMasterSecret;

typedef slim_int TSSLCompression;

struct TSSLMACSecret_
{
  slim_int fLen;
  slim_byte fData[20];
};

typedef TSSLMACSecret_ TSSLMACSecret;

struct TSSLInitVector_
{
  slim_int fLen;
  slim_byte fData[16];
};

typedef TSSLInitVector_ TSSLInitVector;

struct TSSLCipherKey_
{
  slim_int fLen;
  slim_byte fData[32];
};

typedef TSSLCipherKey_ TSSLCipherKey;

struct TSSLSecParams_
{
  TSSLCompression fCompression;
  TSSLCipherSuite fCipherSuite;
  TSSLMACSecret fMACKey;
  TSSLInitVector fIV;
  TSSLCipherKey fCipherKey;
};

typedef TSSLSecParams_ TSSLSecParams;

typedef iTSSLCipherContext_ **TSSLCipherContext;

struct __attribute__((aligned(8))) TRSAKey_
{
  slim_int fFlag;
  slim_byte *fPtr;
  slim_int fLen;
};

typedef TRSAKey_ TRSAKey;

struct TRSAInt_
{
  slim_int fLen;
  slim_byte *fPtr;
};

typedef TRSAInt_ TRSAInt;

struct TRSAPublicKey_
{
  TRSAKey fBase;
  TRSAInt fModulus;
  TRSAInt fExponent;
};

typedef TRSAPublicKey_ TRSAPublicKey;

struct TSSLPreMasterSecret_
{
  slim_byte fData[48];
};

typedef TSSLPreMasterSecret_ TSSLPreMasterSecret;

typedef slim_int TSSLAlertDescription;

typedef slim_int (*TSSLAlertSetProc)(iTSSL *, TSSLAlertDescription, slim_int);

typedef slim_int TSSLAlertLevel;

struct TSSLAlert_
{
  slim_bool fIsSent;
  TSSLAlertLevel fLevel;
  TSSLAlertDescription fDescription;
};

typedef TSSLAlert_ TSSLAlert;

struct iTSSL_
{
  TSSLClass *fClass;
  TSSLStateProc fHandleStateProc;
  TSSL fSelf;
  TSSL fNextInstance;
  slim_int fFlag;
  slim_int fState;
  slim_int fStateFlag;
  TCertDBManager fCertDBManager;
  slim_int fFd;
  slim_int fTimerEvent;
  slim_int fStartTick;
  TString fServerName;
  slim_int fServerPort;
  TSSLBuf fReadBuf;
  TSSLBuf fWriteBuf;
  TSSLSeqNum fReadSeqNum;
  TSSLSeqNum fWriteSeqNum;
  TSSLSeqNum fPendingWriteSeqNum;
  TMD fHandshakeMessagesMD5;
  TMD fHandshakeMessagesSHA;
  TSSLVersion fVersion;
  TSSLSessionID fSessionId;
  TSSLRandom fClientRandom;
  TSSLRandom fServerRandom;
  TSSLMasterSecret fMasterSecret;
  TSSLSecParams fCurrentSWParams;
  TSSLSecParams fCurrentCWParams;
  TSSLSecParams fPendingSWParams;
  TSSLSecParams fPendingCWParams;
  TSSLCipherContext fCWCipherCtx;
  TSSLCipherContext fSWCipherCtx;
  TRSAPublicKey fServerPublicKey;
  slim_handle fCAList;
  TCertList fServerCertList;
  TCertList fClientCertList;
  TClientCertList fClientCertSelectList;
  TSSLPreMasterSecret fPreMasterSecret;
  slim_int fCertVerifResult;
  slim_int fCurCertVerifResult;
  TSSLAlertSetProc fAlertSet;
  TSSLAlert fAlert;
  slim_int fAlertEcode;
  slim_int fAlertState;
  TSSLCertListVerifyProc fCertListVerifyProc;
  slim_opaque fCertListVerifyAux;
  TSSLServerCertConfirmProc fServerCertConfirmProc;
  TSSLClientCertSelectProc fClientCertSelectProc;
  TSSLPrivateKeyEncryptProc fPrivateKeyEncryptProc;
  slim_opaque fServerCertConfirmAux;
  slim_opaque fClientCertSelectAux;
  slim_opaque fPrivateKeyEncryptAux;
  TSSLCurrentTimeProc fCurrentTimeProc;
  slim_opaque fCurrentTimeAux;
  TSSLCipherKey fMasterKey;
  TSSLSessionID fCertificateChallenge;
};

struct iTString_
{
  slim_char fString[1];
};

struct __attribute__((aligned(8))) THTTPAuthInfo_
{
  slim_int fFlag;
  TString fUser;
  TString fPass;
  TString fRealm;
  TString fChallenge;
  TString fNextNonce;
  slim_word fNC;
};

struct __attribute__((aligned(8))) iTHTTPCookieEntry_
{
  THTTPCookieEntry fPrev;
  THTTPCookieEntry fNext;
  TString fName;
  TString fValue;
  TString fDomain;
  TString fPath;
  slim_short fNameLen;
  slim_short fValueLen;
  slim_short fDomainLen;
  slim_short fPathLen;
  slim_time fExpires;
  slim_int fFlag;
};

struct THTTPCookie_
{
  slim_int fFlag;
  slim_split_ss fURLHost;
  slim_split_ss fURLPath;
  slim_split_ss fName;
  slim_split_ss fValue;
  slim_split_ss fComment;
  slim_split_ss fDomain;
  slim_time fExpires;
  slim_split_ss fPath;
};

typedef TPostDataCursor_ TPostDataCursor;

typedef THTTPStreamInflate_ THTTPStreamInflate;

struct iTHTTPStream_
{
  THTTPStreamClass *fClass;
  slim_short fState;
  slim_short fRetryCount;
  slim_int fFlag;
  TURLString fURL;
  slim_int fMethod;
  slim_short fVersion;
  slim_short fScheme;
  TFixedString fURLHost;
  slim_int fPostDataLen;
  slim_handle fPostData;
  slim_byte *fProgressivePostData;
  slim_int fProgressivePostDataLen;
  slim_int fProgressivePostDataWritten;
  TPostData fPostOnDemand;
  TPostDataCursor *fPostDataCursor;
  TString fRequest;
  slim_int fRequestLen;
  slim_int fSSLFlag;
  TString fSSLConnectRequest;
  TFixedString fConnectHost;
  slim_int fFileOfs;
  slim_int fFileLen;
  slim_int fURLPort;
  slim_int fConnectPort;
  slim_int fDnsTicket;
  slim_ip_addr fConnectAddr;
  slim_int fStreamDesc;
  slim_int fBytesSent;
  slim_int fBytesRecv;
  slim_int fChunkRemain;
  slim_vhandle fHeader;
  slim_int fHeaderBufLen;
  slim_short fServerVersion;
  slim_short fStatusCode;
  slim_int fStatusLen;
  slim_int fReasonOfs;
  slim_int fReasonLen;
  slim_int fHeaderOfs;
  slim_int fHeaderLen;
  slim_int fEntityOfs;
  slim_int fEntityLen;
  slim_int fResponseLen;
  slim_int fContentLength;
  slim_pix fPageAuthInfoPix;
  slim_pix fProxyAuthInfoPix;
  slim_int f100Continue;
  slim_int fTimeLimit[3];
  THTTPStreamInflate *fInflate;
  slim_pix fPix;
  slim_int fMaxReqMsgHeader;
  THTTPStreamNotifyStateProc fNotifyStateProc;
  slim_opaque fNotifyStateAux;
};

struct iTCertList_
{
  TSpecArray fBase;
  slim_int fType;
  TCertDBManager *fManager;
};

struct iTClientCertList_
{
  TSpecArray fBase;
};

typedef iTContentChannel_ iTContentChannel;

struct iTHTTPChannel_
{
  iTContentChannel fBase;
  THTTPChannel fSelf;
  TURLString fURL;
  slim_int fMethod;
  slim_int fPostDataLen;
  THTTPStream fStream;
  slim_int fResult;
  slim_short fFlag;
  slim_short fStatusCode;
  slim_int fLastSentState;
  TContentSpec fContentSpec;
  slim_int fCacheFlag;
  slim_int fCacheType;
  slim_opaque fCacheItemID;
  TString fValidatorStr[4];
  TString fCookieStr;
  slim_int fBytesRecv;
  slim_int fResponseLen;
  slim_opaque fUserData;
};

struct THTTPCacheKey_
{
  TURLString fURL;
  slim_int fMethod;
  TPostData fPostData;
};

struct __attribute__((aligned(8))) TContentCoreSpecInfo_
{
  slim_int fFlag;
  slim_time fTime;
  slim_int fContentLength;
  slim_int fOriginLength;
  slim_int fContentType;
  TString fValidatorETag;
  TString fValidatorDate;
  slim_time fExpires;
  slim_int fExpireType;
};

struct __attribute__((aligned(8))) iTFilepChannel_
{
  iTContentChannel fBase;
  slim_int fStream;
};

struct iTAboutChannel_
{
  iTContentChannel fBase;
};

struct TPictgramInfo_
{
  slim_opaque fID;
  slim_int fSize;
  slim_int fMIMEType;
};

struct __attribute__((aligned(8))) iTMultiContent_
{
  TMultiContentClass *fClass;
  slim_int fRefCount;
  TMultiContent fHandle;
  slim_pix fItemListPix;
  slim_int fItemListLength;
  slim_pix fPendingItemListPix;
  slim_int fPendingItemListLength;
};

struct TMultiContentItem_
{
  TContentSpec fContentSpec;
};

struct TMultiContentInfo_
{
  TURLString fURL;
  TCertList fCertList;
};

struct TInetMsgToken_::$5CF14D0A357505FB15455314F09B6EAC::$39E47D2CE0AB590430AC4FF5F0FEA2BD
{
  slim_split_ss fName;
  slim_split_ss fBody;
};

union TInetMsgToken_::$5CF14D0A357505FB15455314F09B6EAC
{
  TInetMsgToken_::$5CF14D0A357505FB15455314F09B6EAC::$39E47D2CE0AB590430AC4FF5F0FEA2BD Field;
  slim_split_ss Boundary;
};

struct TInetMsgToken_
{
  TxxToken fBase;
  TInetMsgToken_::$5CF14D0A357505FB15455314F09B6EAC u;
};

typedef TInetMsgToken_ TInetMsgToken;

struct TInetMsgTknzBStack_
{
  slim_short fSize;
  slim_short fDepth;
  TFixedString fStack[4];
  TFixedString *fExtraStack;
};

typedef TInetMsgTknzBStack_ TInetMsgTknzBStack;

struct TInetMsgTokenizer_
{
  TTokenizer fBase;
  slim_int fSplitFlag;
  slim_int fState;
  TFixedString fCurrentBoundary;
  TInetMsgToken fToken;
  TInetMsgTknzBStack fBoundaryStack;
};

struct __attribute__((aligned(8))) iTMultiContentReviver_
{
  TMultiContentReviverClass *fClass;
  slim_int fRefCount;
};

struct iTUserContent_
{
  iTMultiContent fBase;
  slim_pix fRootItem;
};

struct TUserContentItem_
{
  TMultiContentItem fBase;
};

typedef slim_opaque TSavedPageDataID;

struct TPageSaveContentDataSrc_::$DBD1DFA94CCEC9717B1D4DD80D2C8E47
{
  TSavedPageDataID fID;
  TSavedPageDataFeeder *fFeeder;
};

union TPageSaveContentDataSrc_
{
  TPageSaveContentDataSrc_::$DBD1DFA94CCEC9717B1D4DD80D2C8E47 uSPDF;
  TBrowserPageSaveInfo *uInfo;
};

typedef TPageSaveContentDataSrc_ TPageSaveContentDataSrc;

struct iTPageSaveContent_
{
  iTMultiContent fBase;
  slim_int fFlag;
  TBrowserPageSaveInfo *fInfo;
  slim_int fNextIndex;
  TPageSaveContentDataSrc fDataSrc;
};

typedef slim_bool (*SavedPageDataFeeder_IsThereProc)(TSavedPageDataFeeder *, TSavedPageDataID);

typedef slim_int (*SavedPageDataFeeder_FeedProc)(TSavedPageDataFeeder *, TSavedPageDataID, TBrowserPageSaveInfo *);

struct TSavedPageDataFeeder_
{
  slim_opaque fUserData;
  SavedPageDataFeeder_IsThereProc fIsThere;
  SavedPageDataFeeder_FeedProc fFeed;
};

struct __attribute__((aligned(8))) TSSLSessionDBKey_
{
  TString fServerName;
  slim_int fServerPort;
};

struct TSSLSessionDBRecord_::$1C2C89F3F5B85108ECD039D2C3FFA452::$FFB71ACB5719E8388B28CD51BB76C668
{
  slim_byte fMasterKey[32];
  slim_int fMasterKeyLen;
  slim_byte fKeyArg[16];
  slim_int fKeyArgLen;
};

struct TSSLSessionDBRecord_::$1C2C89F3F5B85108ECD039D2C3FFA452::$8AB292891C87FB605D7FB4C05B1CB4F7
{
  slim_byte fMasterSecret[48];
};

union TSSLSessionDBRecord_::$1C2C89F3F5B85108ECD039D2C3FFA452
{
  TSSLSessionDBRecord_::$1C2C89F3F5B85108ECD039D2C3FFA452::$FFB71ACB5719E8388B28CD51BB76C668 V2;
  TSSLSessionDBRecord_::$1C2C89F3F5B85108ECD039D2C3FFA452::$8AB292891C87FB605D7FB4C05B1CB4F7 V3;
};

struct TSSLSessionDBRecord_
{
  slim_int fMajorVersion;
  slim_int fMinorVersion;
  slim_byte fSessionID[32];
  slim_int fSessionIDLen;
  TSSLCipherSuite fCipherSuite;
  slim_handle fCertList;
  slim_int fCertListLen;
  slim_int fCertVerifyResult;
  TSSLSessionDBRecord_::$1C2C89F3F5B85108ECD039D2C3FFA452 u;
};

struct __attribute__((aligned(8))) TCertStoreItem_
{
  slim_int fFlag;
  slim_int fCertType;
  slim_int fStoreType;
  slim_byte *fName;
  slim_int fNameLen;
  slim_byte *fData;
  slim_int fDataLen;
  slim_int fSerialNumberOfs;
  slim_int fSerialNumberLen;
  slim_int fIssuerOfs;
  slim_int fIssuerLen;
  slim_int fSubjectOfs;
  slim_int fSubjectLen;
  slim_byte *fPrKey;
  slim_int fPrKeyLen;
};

typedef TCertDN_ TCertDN;

typedef TCert_ TCert;

typedef TCRL_ TCRL;

struct __attribute__((aligned(8))) TCertFindKey_::$3276C1F1D7F68A1DF3033306442E4A8D
{
  slim_byte *fPtr;
  slim_int fLen;
};

union TCertFindKey_
{
  slim_char *uName;
  TCertDN *uDN;
  TCert *uCert;
  TCRL *uCRL;
  TCertFindKey_::$3276C1F1D7F68A1DF3033306442E4A8D uDER;
};

typedef TCertFindKey_ TCertFindKey;

struct TCertFindInfo_
{
  slim_int fFrom;
  slim_int fKeyType;
  TCertFindKey fKey;
};

struct __attribute__((aligned(8))) TCertStoreDesc_
{
  TCertStoreDesc *fNext;
  slim_int fMode;
};

union TxxMLItem_::$8BCF54C37DF70D7C9CAD29AD51DF80F2
{
  TFixedString FS;
  TToken *TK;
};

struct TxxMLItem_
{
  TxxMLItem_::$8BCF54C37DF70D7C9CAD29AD51DF80F2 u;
};

struct TOutlineNameID_
{
  TxxMLInfo *fxxMLInfo;
  TxxMLItem fNameItem;
};

struct TToken_
{
  slim_int fOffset;
  slim_half fHash;
  slim_short fHashNext;
  slim_short fID;
  slim_short fLength;
};

struct TDOMMethodInfo_
{
  TToken fBase;
  slim_int fArgs;
  slim_int fFlags[1];
};

typedef iTJSContainerArray_ **TJSContainerArray;

struct __attribute__((aligned(8))) TJSCompoArray_
{
  TJSContainerArray fContainer;
  slim_int fItemSize;
  slim_int fStartIndex;
  slim_int fEndIndex;
};

typedef TJSCompoArray_ TJSCompoArray;

struct TJSRegArray_
{
  TJSCompoArray fBase;
  slim_int fArgc;
  slim_int fRet;
  slim_int fRefSize;
  slim_int fDVCookie;
};

typedef iTJSScope_ **TJSScope;

typedef void (*jsframe_userdata_delete_proc)(TJSThread, slim_opaque *);

struct TJSFlowControl_Call_
{
  slim_opaque fUserData[4];
  jsframe_userdata_delete_proc fDeleteProc;
};

typedef TJSFlowControl_Call_ TJSFlowControl_Call;

struct __attribute__((aligned(8))) TJSEnumCookie_
{
  TJSObject fCurrentObj;
  slim_pix fCurrentPix;
  slim_int fEnumData;
};

struct TJSFlowControl_Forin_
{
  TJSObject fEnumObj;
  TJSObject fBaseObj;
  TFixedString fEnumID;
  TJSEnumCookie fEnumCookie;
};

typedef TJSFlowControl_Forin_ TJSFlowControl_Forin;

typedef slim_int js_ctype;

struct __attribute__((aligned(8))) TJSFlowControl_Try_
{
  TJSAddr fCatch;
  TJSAddr fFinally;
  js_ctype fCType;
  TJSValue fCValue;
  TJSAddr fCTarget;
  slim_int fCDepth;
};

typedef TJSFlowControl_Try_ TJSFlowControl_Try;

union TJSFlowControl_
{
  TJSFlowControl_Call uCall;
  TJSFlowControl_Forin uForin;
  TJSFlowControl_Try uTry;
};

typedef TJSFlowControl_ TJSFlowControl;

struct TJSFrame_
{
  TJSRegArray fReg;
  TJSObject fLocal;
  TJSObject fThis;
  TJSScope fScope;
  TJSObject fFObj;
  TJSObject fContextObject;
  TJSFunction fTJSFunction;
  js_ccode fCCode;
  slim_int fPC;
  slim_int fInstructionState;
  slim_int fCount;
  slim_int fFrameFlag;
  slim_int fFCType;
  TJSFlowControl fFC;
  slim_opaque fDebugData;
};

typedef TJSFrame_ TJSFrame;

struct TJSFrameArray_
{
  TFastArray fBase;
};

typedef TJSFrameArray_ TJSFrameArray;

struct TArrayVisit_
{
  slim_int fIndex;
  slim_int fOffset;
  slim_handle fHandle;
  void *fItem;
};

typedef TArrayVisit_ TArrayVisit;

struct TLinearArrayVisit_
{
  slim_byte *fLockedBuffer;
};

typedef TLinearArrayVisit_ TLinearArrayVisit;

union TJSFunctionCodeVisit_::$A043B90A33176C6038CF157C5D21AB67
{
  TArrayVisit ArrayVisit;
  TLinearArrayVisit LinearArrayVisit;
};

struct TJSFunctionCodeVisit_
{
  slim_bool fLinear;
  slim_int fLength;
  void *fArray;
  TJSFunctionCodeVisit_::$A043B90A33176C6038CF157C5D21AB67 u;
};

typedef TJSFunctionCodeVisit_ TJSFunctionCodeVisit;

struct TJSCurrentThreadBuffer_
{
  TJSFunctionCodeVisit fCodeVisit;
  TJSObject fFObj;
};

typedef TJSCurrentThreadBuffer_ TJSCurrentThreadBuffer;

struct TJSInternalParameter_RequestGetter_
{
  TJSObject fThis;
  TJSObject fGetter;
};

typedef TJSInternalParameter_RequestGetter_ TJSInternalParameter_RequestGetter;

struct TJSInternalParameter_RequestSetter_
{
  TJSObject fThis;
  TJSObject fSetter;
  TJSValue fAssignValue;
};

typedef TJSInternalParameter_RequestSetter_ TJSInternalParameter_RequestSetter;

struct TJSInternalParameter_Return_
{
  TJSValue fReturnValue;
};

typedef TJSInternalParameter_Return_ TJSInternalParameter_Return;

struct TJSInternalParameter_
{
  TJSInternalParameter_RequestGetter uRequestGetter;
  TJSInternalParameter_RequestSetter uRequestSetter;
  TJSInternalParameter_Return uReturn;
};

typedef TJSInternalParameter_ TJSInternalParameter;

struct TJSStringObjectPoolItem_
{
  TJSString fJSString;
  TJSObject fJSStringObject;
};

typedef TJSStringObjectPoolItem_ TJSStringObjectPoolItem;

struct iTJSThread_
{
  TJSClass *fClass;
  TJSContext fContext;
  TJSFrame fFrame;
  TJSFrameArray fStack;
  TJSContainerArray fRegContainer;
  TJSCurrentThreadBuffer fCurrentThreadBuffer;
  slim_int fCharSet;
  slim_int fCallType;
  js_ctype fCType;
  TJSValue fCValue;
  TJSAddr fCTarget;
  slim_int fCDepth;
  slim_int fThreadFlag;
  TJSInternalParameter fInternalParameter;
  slim_opaque fUserData;
  slim_int fPooledObjects;
  TJSObject fObjectPool[16];
  TJSStringObjectPoolItem fJSStringObjectPool[4];
  slim_int fExecutionTimeout;
  slim_int fElapsedTime;
  slim_int fProgressLimitTime;
  iTJSThread_ **fNext;
};

struct TJSSingleList_
{
  TJSSingleListContainer *fContainer;
  slim_pix fFirst;
  slim_pix fLast;
};

typedef TJSSingleList_ TJSSingleList;

struct TJSBindList_
{
  TJSSingleList fBase;
};

typedef TJSBindList_ TJSBindList;

struct __attribute__((aligned(8))) iTJSObject_
{
  TJSValue fValue;
  TJSBindList fBindList;
  TJSObject fPrototype;
  TJSScope fScope;
  TJSObjectClass *fClass;
  slim_int fGCLockCount;
  slim_short fGen;
  slim_short fYoung;
  slim_short fUserData1;
  slim_char fColor;
  slim_char fObjectFlag;
};

struct TDOMAttrInfo_
{
  TToken fBase;
  slim_int fType;
  slim_int fAttrIFType;
  slim_int fFlags[1];
};

struct TDOMIFInfo_
{
  slim_int fNodeType;
  slim_int fBaseIFType;
  slim_int fChildren[1];
};

struct TJSCanPutInfo_
{
  slim_int fAttrFlag;
  TJSObject fSetterObject;
};

struct TJSDelayObjectBase_
{
  js_proc_new_delay_obj fDelayNewProc;
};

struct TPageScriptInfo_
{
  slim_int fLineNumber;
  slim_int fContentType;
  TURLString fURL;
};

typedef TPageEventType_ TPageEventType;

struct TPageEvent_Object_
{
  const TPageEventType *fEventType;
  TFixedString fEventTypeName;
  slim_pix fTarget;
  slim_int fCurrentFlag;
  slim_pix fCurrentTarget;
  slim_pix fCurrentListener;
  slim_int fEventPhase;
  slim_pix fParamHolderPix;
  TInvokerInfo fInvokerInfo;
  slim_int fX;
  slim_int fY;
  slim_int fTargetX;
  slim_int fTargetY;
  TFixedString fSubType;
};

typedef TPageEvent_Object_ TPageEvent_Object;

struct __attribute__((aligned(8))) TPageEvent_Key_
{
  const TPageEventType *fEventType;
  TFixedString fEventTypeName;
  slim_pix fTarget;
  slim_int fCurrentFlag;
  slim_pix fCurrentTarget;
  slim_pix fCurrentListener;
  slim_int fEventPhase;
  slim_pix fParamHolderPix;
  TInvokerInfo fInvokerInfo;
  slim_int fKeyCode;
  slim_int fKeyChar;
  slim_int fModifiers;
};

typedef TPageEvent_Key_ TPageEvent_Key;

struct TPageEvent_Mouse_
{
  const TPageEventType *fEventType;
  TFixedString fEventTypeName;
  slim_pix fTarget;
  slim_int fCurrentFlag;
  slim_pix fCurrentTarget;
  slim_pix fCurrentListener;
  slim_int fEventPhase;
  slim_pix fParamHolderPix;
  TInvokerInfo fInvokerInfo;
  slim_int fX;
  slim_int fY;
  slim_int fTargetX;
  slim_int fTargetY;
  slim_int fDocumentX;
  slim_int fDocumentY;
  slim_int fScreenX;
  slim_int fScreenY;
  slim_int fButton;
  slim_int fModifiers;
  slim_pix fRelatedTarget;
  slim_int fWheelDelta;
  slim_int fDetail;
};

typedef TPageEvent_Mouse_ TPageEvent_Mouse;

struct TPageEvent_Form_
{
  const TPageEventType *fEventType;
  TFixedString fEventTypeName;
  slim_pix fTarget;
  slim_int fCurrentFlag;
  slim_pix fCurrentTarget;
  slim_pix fCurrentListener;
  slim_int fEventPhase;
  slim_pix fParamHolderPix;
  TInvokerInfo fInvokerInfo;
  slim_int fX;
  slim_int fY;
  slim_int fTargetX;
  slim_int fTargetY;
  slim_pix fForm;
  slim_pix fFiredInput;
};

typedef TPageEvent_Form_ TPageEvent_Form;

struct TPageEvent_Change_
{
  const TPageEventType *fEventType;
  TFixedString fEventTypeName;
  slim_pix fTarget;
  slim_int fCurrentFlag;
  slim_pix fCurrentTarget;
  slim_pix fCurrentListener;
  slim_int fEventPhase;
  slim_pix fParamHolderPix;
  TInvokerInfo fInvokerInfo;
  slim_int fFocusFlag;
  TBrowserPane *fFocusPane;
  TBrowserPane *fBlurPane;
  slim_pix fFocusTarget;
  slim_pix fBlurTarget;
};

typedef TPageEvent_Change_ TPageEvent_Change;

struct __attribute__((aligned(8))) TPageEvent_Unload_
{
  const TPageEventType *fEventType;
  TFixedString fEventTypeName;
  slim_pix fTarget;
  slim_int fCurrentFlag;
  slim_pix fCurrentTarget;
  slim_pix fCurrentListener;
  slim_int fEventPhase;
  slim_pix fParamHolderPix;
  TInvokerInfo fInvokerInfo;
  TBrowserPane *fTargetPane;
  slim_int fDescendants;
  slim_int fFiredBy;
  slim_int fBackForw;
  TBrowserWindow *fWindow;
  slim_int fCloseBy;
};

typedef TPageEvent_Unload_ TPageEvent_Unload;

union TPageEvent_::$E1420DF38EF703C7E877B9DF235775CE
{
  TPageEvent_Object Object;
  TPageEvent_Key Key;
  TPageEvent_Mouse Mouse;
  TPageEvent_Form Form;
  TPageEvent_Change Change;
  TPageEvent_Unload Unload;
};

struct TPageEvent_
{
  TPageEvent_::$E1420DF38EF703C7E877B9DF235775CE u;
};

struct TPageThread_Event_
{
  slim_int fType;
  slim_int fThreadFlag;
  slim_int fThreadState;
  slim_opaque fThread;
  TPageDepotScriptEngine *fEngine;
  slim_pix fCurrentNode;
  slim_pix fCurrentListener;
  slim_int fEventPhase;
  slim_opaque fEventObject;
};

struct TListItemHolder_
{
  slim_pix fPrev;
  slim_pix fNext;
};

struct TJSAddr_
{
  slim_int dummy;
};

typedef TJSString (*jsdate_make_date_string_proc)(slim_bool, slim_time *, slim_int, slim_int);

struct iTJSContext_
{
  TJSObject fContextObject;
  TJSObject fPrototype[8];
  TJSObject fGlobal;
  TJSObject fParseScriptObject;
  TJSClass *fClass;
  slim_int fCharSet;
  slim_opaque fUserData;
  slim_int fBehaviorFlag;
  jsdate_make_date_string_proc fMakeDateStringProc;
  slim_int fRegexpVariableNum;
  TJSContext fNext;
};

typedef slim_bool (*js_proc_init_cons)(TJSThread, TJSObject, TJSObject);

typedef TJSObject (*js_proc_new_proto)(TJSThread, TJSObject, slim_int);

struct TJSDelayCConsObject_
{
  js_proc_new_delay_obj fDelayNewProc;
  slim_char *fName;
  slim_int fLen;
  slim_int fAttr;
  TJSCCodeInfo fCCodeInfo;
  js_proc_init_cons fConsInit;
  js_proc_new_proto fProtoNew;
};

typedef TJSObject (*js_proc_new_obj)(TJSThread, TJSObject, slim_int);

struct TJSDelayObject_
{
  js_proc_new_delay_obj fDelayNewProc;
  js_proc_new_obj fObjNew;
};

struct TJSCCodeTable_
{
  slim_char *fName;
  slim_int fLen;
  slim_int fAttr;
  TJSCCodeInfo fCCodeInfo;
};

struct TJSDelayPrototype_
{
  js_proc_new_delay_obj fDelayNewProc;
  js_proc_new_proto fProtoNew;
};

struct TXMLAttributes_
{
  TSpecFastArray fAttrList;
  TString fWholeString;
  slim_int fWholeStringLen;
  slim_char *fLockedString;
};

typedef TXMLDTDHandlerClass_ TXMLDTDHandlerClass;

struct TXMLDTDHandler_
{
  TXMLDTDHandlerClass *fClass;
  slim_opaque fUserData;
};

typedef TXMLDeclHandlerClass_ TXMLDeclHandlerClass;

struct TXMLDeclHandler_
{
  TXMLDeclHandlerClass *fClass;
  slim_opaque fUserData;
};

typedef void (*XMLReaderCallbacks_NotifyEncodingProc)(TXMLReaderCallbacks *, slim_int);

typedef slim_int (*XMLReaderCallBacks_HandleReferenceProc)(TXMLReaderCallbacks *, slim_char *, slim_char *, slim_int, slim_int, slim_int);

typedef slim_int (*XMLReaderCallBacks_HandleEntityProc)(TXMLReaderCallbacks *, slim_int);

struct TXMLReaderCallbacks_
{
  slim_opaque fUserData;
  XMLReaderCallbacks_NotifyEncodingProc fNotifyEncoding;
  XMLReaderCallBacks_HandleReferenceProc fHandleReferenceProc;
  XMLReaderCallBacks_HandleEntityProc fHandleEntityProc;
};

struct THTMLElementInfo_
{
  TToken fBase;
  slim_int fParserType;
  slim_int fFlag;
  slim_int fDOMIFType;
};

struct TxxMLElementInfo_
{
  TToken fBase;
};

struct TxxMLAttrInfo_
{
  TToken fBase;
};

typedef TOutlineItemType_ TOutlineItemType;

struct __attribute__((aligned(8))) TOutlineItem_Object_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
};

typedef TOutlineItem_Object_ TOutlineItem_Object;

struct __attribute__((aligned(8))) TOutlineItem_Root_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
};

typedef TOutlineItem_Root_ TOutlineItem_Root;

struct TOutlineItem_SimpleElement_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
  TOutlineNameID fNameID;
  slim_pix fPrefixInfo;
  slim_pix fAttrPix;
};

typedef TOutlineItem_SimpleElement_ TOutlineItem_SimpleElement;

struct __attribute__((aligned(8))) TOutlineItem_Element_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
  TOutlineNameID fNameID;
  slim_pix fPrefixInfo;
  slim_pix fAttrPix;
  slim_pix fEditorElement;
  slim_int fFlag;
};

typedef TOutlineItem_Element_ TOutlineItem_Element;

struct __attribute__((aligned(8))) TOutlineItem_CharacterData_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
  slim_int fOffset;
  slim_int fLength;
};

typedef TOutlineItem_CharacterData_ TOutlineItem_CharacterData;

struct __attribute__((aligned(8))) TOutlineItem_Text_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
  slim_int fOffset;
  slim_int fLength;
};

typedef TOutlineItem_Text_ TOutlineItem_Text;

struct __attribute__((aligned(8))) TOutlineItem_Comment_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
  slim_int fOffset;
  slim_int fLength;
};

typedef TOutlineItem_Comment_ TOutlineItem_Comment;

struct __attribute__((aligned(8))) TOutlineItem_CDATASection_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
  slim_int fOffset;
  slim_int fLength;
};

typedef TOutlineItem_CDATASection_ TOutlineItem_CDATASection;

struct TOutlineItem_PI_
{
  const TOutlineItemType *fType;
  slim_int fInputOffset;
  slim_offlen fTarget;
  slim_offlen fData;
  slim_int fTargetType;
  slim_opaque fAuxData;
};

typedef TOutlineItem_PI_ TOutlineItem_PI;

union TOutlineItem_
{
  TOutlineItem_Object uObject;
  TOutlineItem_Root uRoot;
  TOutlineItem_SimpleElement uSimpleElement;
  TOutlineItem_Element uElement;
  TOutlineItem_CharacterData uCharacterData;
  TOutlineItem_Text uText;
  TOutlineItem_Comment uComment;
  TOutlineItem_CDATASection uCDATASection;
  TOutlineItem_PI uPI;
};

typedef TElementStyleTuple_ TElementStyleTuple;

struct TElementStyleReader_
{
  TElementStyleClass *fClass;
  TElementStyle *fStyle;
  TElementStyleTuple *fStyleTuple;
  slim_pix fPageFont;
  slim_word fExistenceFlag;
  slim_byte *fBuf;
};

struct TElementStyleInitializer_
{
  TElementStyleClass *fClass;
  TElementStyle *fStyle;
  TElementStyleReader fParentStyleReader;
  slim_int fFlag;
  slim_int fPseudo;
  slim_int fStyleType;
  TElementStyleTuple *fNewStyleTuple;
};

struct THTMLBox_Object_
{
  TOutlineItem_Object fBase;
};

typedef THTMLBox_Object_ THTMLBox_Object;

struct THTMLBox_Element_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
};

typedef THTMLBox_Element_ THTMLBox_Element;

struct THTMLBox_LinkElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageStyle;
};

typedef THTMLBox_LinkElement_ THTMLBox_LinkElement;

struct THTMLBox_StyleElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageStyle;
};

typedef THTMLBox_StyleElement_ THTMLBox_StyleElement;

struct THTMLBox_ImageElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageImage;
};

typedef THTMLBox_ImageElement_ THTMLBox_ImageElement;

struct THTMLBox_FormElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageForm;
};

typedef THTMLBox_FormElement_ THTMLBox_FormElement;

struct THTMLBox_InputElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageImage;
  slim_pix fPageInput;
};

typedef THTMLBox_InputElement_ THTMLBox_InputElement;

struct __attribute__((aligned(8))) THTMLBox_ListElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_int fCounter;
};

typedef THTMLBox_ListElement_ THTMLBox_ListElement;

struct THTMLBox_FrameSetElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageFrameSet;
};

typedef THTMLBox_FrameSetElement_ THTMLBox_FrameSetElement;

struct THTMLBox_FrameElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageFrame;
};

typedef THTMLBox_FrameElement_ THTMLBox_FrameElement;

struct THTMLBox_EmbedElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageEmbed;
};

typedef THTMLBox_EmbedElement_ THTMLBox_EmbedElement;

union THTMLBox_ObjectElement_::$29EC9BE5DA63CFC4A48498A17E20A79F
{
  slim_pix fPageStandBy;
  slim_pix fPageImage;
  slim_pix fPageFrame;
  slim_pix fPageEmbed;
};

struct THTMLBox_ObjectElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_int fObjectType;
  THTMLBox_ObjectElement_::$29EC9BE5DA63CFC4A48498A17E20A79F u;
};

typedef THTMLBox_ObjectElement_ THTMLBox_ObjectElement;

struct __attribute__((aligned(8))) THTMLBox_AppletElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageEmbed;
  slim_bool fEnable;
};

typedef THTMLBox_AppletElement_ THTMLBox_AppletElement;

struct THTMLBox_BGSoundElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fInclPix;
};

typedef THTMLBox_BGSoundElement_ THTMLBox_BGSoundElement;

struct THTMLBox_ScriptElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_int fScriptFlag;
  slim_pix fStatePix;
  slim_pix fPageScript;
};

typedef THTMLBox_ScriptElement_ THTMLBox_ScriptElement;

struct THTMLBox_Text_
{
  TOutlineItem_Text fBase;
  slim_pix fEditorTextNode;
};

typedef THTMLBox_Text_ THTMLBox_Text;

struct __attribute__((aligned(8))) THTMLBox_CanvasElement_
{
  TOutlineItem_Element fBase;
  slim_pix fStyle;
  slim_pix fPageCanvas;
  slim_bool fReplaced;
};

typedef THTMLBox_CanvasElement_ THTMLBox_CanvasElement;

union THTMLBox_
{
  THTMLBox_Object uObject;
  THTMLBox_Element uElement;
  THTMLBox_LinkElement uLinkElement;
  THTMLBox_StyleElement uStyleElement;
  THTMLBox_ImageElement uImageElement;
  THTMLBox_FormElement uFormElement;
  THTMLBox_InputElement uInputElement;
  THTMLBox_ListElement uListElement;
  THTMLBox_FrameSetElement uFrameSetElement;
  THTMLBox_FrameElement uFrameElement;
  THTMLBox_EmbedElement uEmbedElement;
  THTMLBox_ObjectElement uObjectElement;
  THTMLBox_AppletElement uAppletElement;
  THTMLBox_BGSoundElement uBGSoundElement;
  THTMLBox_ScriptElement uScriptElement;
  THTMLBox_Text uText;
  THTMLBox_CanvasElement uCanvasElement;
};

struct TCSSPropInfo_
{
  TToken fBase;
  slim_int fMediaGroups;
  slim_short fStyleName;
  slim_byte fStyleType;
  slim_byte fRestrictions;
  slim_word fValueInfo[10];
};

struct TCSSRuleDecl_
{
  TCSSPropInfo *fPropId;
  slim_int fSpecificity;
  slim_short fFlag;
  slim_short fSerialNo;
  slim_pix fNextDecl;
  slim_pix fValue;
};

struct TStyleTuple_Object_
{
  slim_byte fName;
  slim_byte fType;
  slim_byte fFlag;
  slim_byte fEnum;
};

typedef TStyleTuple_Object_ TStyleTuple_Object;

struct TStyleTuple_Enum_
{
  slim_byte fName;
  slim_byte fType;
  slim_byte fFlag;
  slim_byte fEnum;
};

typedef TStyleTuple_Enum_ TStyleTuple_Enum;

typedef slim_int slim_decimal_fixed_point;

union TStyleTuple_Scalar_::$DAB771118F41A7375E78C0E52C6A425B
{
  slim_int Integer;
  slim_decimal_fixed_point Float;
  slim_word BitFlag;
  slim_pix Pix;
  TColor Color;
};

struct TStyleTuple_Scalar_
{
  slim_byte fName;
  slim_byte fType;
  slim_byte fFlag;
  slim_byte fEnum;
  TStyleTuple_Scalar_::$DAB771118F41A7375E78C0E52C6A425B u;
};

typedef TStyleTuple_Scalar_ TStyleTuple_Scalar;

union TStyleTuple_Pointer_::$7CE36089C6F8918175CAD62141392E42
{
  TFixedString String;
  TURLString URL;
};

struct TStyleTuple_Pointer_
{
  slim_byte fName;
  slim_byte fType;
  slim_byte fFlag;
  slim_byte fEnum;
  TStyleTuple_Pointer_::$7CE36089C6F8918175CAD62141392E42 u;
};

typedef TStyleTuple_Pointer_ TStyleTuple_Pointer;

union TStyleTuple_ScalarPair_::$5D4AAE723735D6F19118059D4F594EF4
{
  slim_int uInteger;
  slim_decimal_fixed_point uFloat;
};

struct TStyleTuple_ScalarPair_
{
  slim_byte fName;
  slim_byte fType;
  slim_byte fFlag;
  slim_byte fEnum;
  slim_short fFlagX;
  slim_short fFlagY;
  TStyleTuple_ScalarPair_::$5D4AAE723735D6F19118059D4F594EF4 fX;
  TStyleTuple_ScalarPair_::$5D4AAE723735D6F19118059D4F594EF4 fY;
};

typedef TStyleTuple_ScalarPair_ TStyleTuple_ScalarPair;

union TStyleTuple_ClipRect_::$5D4AAE723735D6F19118059D4F594EF4
{
  slim_int uInteger;
  slim_decimal_fixed_point uFloat;
};

struct TStyleTuple_ClipRect_
{
  slim_byte fName;
  slim_byte fType;
  slim_byte fFlag;
  slim_byte fEnum;
  slim_byte fFlags[4];
  TStyleTuple_ClipRect_::$5D4AAE723735D6F19118059D4F594EF4 fEdges[4];
};

typedef TStyleTuple_ClipRect_ TStyleTuple_ClipRect;

union TStyleTuple_
{
  TStyleTuple_Object uObject;
  TStyleTuple_Enum uEnum;
  TStyleTuple_Scalar uScalar;
  TStyleTuple_Pointer uPointer;
  TStyleTuple_ScalarPair uScalarPair;
  TStyleTuple_ClipRect uClipRect;
};

typedef TStyleTuple_ TStyleTuple;

struct TCSSRuleValue_
{
  slim_opaque fHashNext;
  slim_int fHashValue;
  slim_int fCounter;
  TStyleTuple fTuple;
};

struct iTWWWImage_
{
  TWWWImageClass *fClass;
  slim_int fFlag;
  slim_int fFrames;
  slim_int fLoops;
  slim_int fWidth;
  slim_int fHeight;
  slim_int fCurFrame;
  slim_int fNextFrameExpire;
  slim_int fCurLoop;
  TWWWPixelMap fPixelMap0;
  slim_vhandle fPixelMapArray;
};

struct __attribute__((aligned(8))) TPageInclusion_
{
  slim_short fOriginalType;
  slim_short fInclusionType;
  TURLString fRequestURL;
  TContent fContent;
  slim_int fInclFlag;
  slim_int fVirusFlag;
  slim_int fOpenFlag;
};

typedef TPageInclusion_ TPageInclusion;

struct TPageInclusion_Image_
{
  TPageInclusion fBase;
  slim_int fFlag;
  slim_int fState;
  TPageImageDecoder *fDecoderInfo;
  TImageDecoder fDecoder;
  slim_int fWidth;
  slim_int fHeight;
  slim_int fLogicalWidth;
  slim_int fLogicalHeight;
  TWWWImage fImage;
  slim_int fNextFrameExpire;
  slim_int fDecodedFrames;
  slim_int fKeepFrames;
  slim_int fTidyFrame;
};

typedef iTStreamContent_ **TStreamContent;

struct TPageInclusion_NPStream_
{
  TPageInclusion fBase;
  slim_int fStreamFlag;
  slim_int fState;
  slim_int fStreamType;
  slim_pix fNPInstancePix;
  slim_opaque fNPStream;
  slim_int fWriteLength;
  slim_opaque fNotifyData;
  slim_pix fTmpFile;
  TStreamContent fStreamContent;
  slim_pix fPageEmbed;
};

struct TPageImage_
{
  slim_int fPageImageType;
  slim_int fPageImageFlag;
  TWWWImage fImage;
  TString fAltText;
  slim_pix fImageElement;
  slim_int fDocWidth;
  slim_int fDocHeight;
};

struct TElementStyle_
{
  slim_pix fPix;
};

struct TElementStylePreference_
{
  slim_int fDisplay;
  slim_int fFloat;
  slim_int fPosition;
  slim_short fLineHeight[2];
  slim_int fVerticalAlign;
  slim_int fVerticalAlignTable;
  TColor fBackGroundColor;
  slim_int fBackGroundRepeat;
  slim_int fBackGroundAttachment;
  TColor fColor;
  slim_int fTextAlign;
  slim_int fWhiteSpace;
  TColor fBorderColor;
  slim_int fBorderStyle;
  slim_int fBorderCollapse;
  slim_int fVisibility;
  slim_int fCaptionSide;
  slim_int fTableLayout;
  slim_int fListStyleType;
  TFixedString fFontFamily;
  slim_int fFontSize;
  slim_short fLargerFontRatio[2];
  slim_short fSmallerFontRatio[2];
  slim_int fDirection;
  slim_int fMarqueePlayCount;
  slim_int fMarqueeIncrement;
};

struct TEditorCompactStylePref_
{
  slim_int fMarkerPadding;
  slim_int fNoneListItemMargin;
  slim_int fNoneListItemMarginDenom;
  slim_int fNoneListItemMarginUnit;
  slim_int fSymbolListItemMargin;
  slim_int fSymbolListItemMarginDenom;
  slim_int fSymbolListItemMarginUnit;
  slim_int fNumericListItemMargin;
  slim_int fNumericListItemMarginDenom;
  slim_int fNumericListItemMarginUnit;
};

typedef slim_opaque TAWSDrawContext;

struct TAWSEvent_
{
  slim_int fType;
  TBrowserPane *fTargetPane;
  slim_int fX;
  slim_int fY;
  slim_int fModifiers;
  slim_int fKeyCode;
  slim_int fKeyChar;
  TRect fRect;
  TAWSDrawContext fAWSDC;
  slim_pix fPageInputPix;
  slim_int fOptionIndex;
  slim_opaque fAWSOptGroup;
  slim_int fButton;
  slim_int fWheelDelta;
  slim_int fDetail;
  slim_pix fParamHolderPix;
};

struct TEditorReplacedLength_
{
  slim_int fValue;
  slim_int fUnit;
};

typedef TEditorReplacedLength_ TEditorReplacedLength;

struct TEditorReplacedInfo_
{
  TEditorReplacedLength fWidth;
  TEditorReplacedLength fHeight;
  TEditorReplacedLength fMinWidth;
  TEditorReplacedLength fMinHeight;
  TEditorReplacedLength fMaxWidth;
  TEditorReplacedLength fMaxHeight;
  slim_int fIntrinsicWidth;
  slim_int fIntrinsicHeight;
  slim_int fContainingWidth;
  slim_int fContainingHeight;
  slim_bool fSpecifiedWidthIsZero;
  slim_bool fSpecifiedHeightIsZero;
  slim_bool fKeepAspect;
};

struct iTImageDecoder_
{
  TImageDecoderClass *fClass;
};

struct TBrowserVisitInfo_
{
  slim_int fFlag;
  TURLString fURL;
  slim_int fRequestFlag;
  TURLString fReferer;
  TString fTitle;
  slim_int fTitleCharSet;
  slim_time fVisitTime;
  TContentSpec fContentSpec;
};

typedef TSerializeVersionInfo_ TSerializeVersionInfo;

typedef void (*Serializable_VersionInfoProc)(TSerializable *, TSerializeVersionInfo *);

typedef slim_int (*Serializable_NextUnitProc)(TSerializable *, slim_opaque *);

typedef void (*Serializable_CancelUnitProc)(TSerializable *, slim_opaque);

typedef TSerializeOutput_ TSerializeOutput;

typedef slim_int (*Serializable_SerializeProc)(TSerializable *, slim_opaque, TSerializeOutput *);

struct TSerializable_
{
  slim_opaque fImplement;
  Serializable_VersionInfoProc fVersionInfo;
  Serializable_NextUnitProc fNextUnit;
  Serializable_CancelUnitProc fCancelUnit;
  Serializable_SerializeProc fSerialize;
};

typedef slim_int (*Deserializable_NewUnitProc)(TDeserializable *, slim_opaque *);

typedef TDeserializeInput_ TDeserializeInput;

typedef slim_int (*Deserializable_DeserializeProc)(TDeserializable *, slim_opaque, TDeserializeInput *);

typedef void (*Deserializable_EndCancelProc)(TDeserializable *, slim_opaque, slim_int);

struct TDeserializable_
{
  slim_opaque fImplement;
  Deserializable_NewUnitProc fNewUnit;
  Deserializable_DeserializeProc fDeserialize;
  Deserializable_EndCancelProc fEndCancel;
};

struct __attribute__((aligned(8))) THistoryRequestInfo_
{
  TBrowserPane *fPane;
  slim_pix fCachePix;
  slim_int fRequestFlag;
};

struct TPanePrefAdjuster_
{
  BrowserPane_SetPagePrefProc fAdjustPagePrefProc;
  BrowserPane_SetRequestPagePrefProc fAdjustRequestPagePrefProc;
};

struct __attribute__((aligned(8))) TCSSStyleCascadeItem_
{
  slim_pix fValuePix;
  slim_int fPseudo;
  slim_int fSpecificity;
  slim_int fSerialNo;
};

struct TCSSStyleCascade_
{
  slim_int fItems;
  slim_int fPseudoAccumulator;
  TCSSStyleCascadeItem fItem[1];
};

struct __attribute__((aligned(4))) TAWSDeviceCaps_
{
  slim_int fScreenWidth;
  slim_int fScreenHeight;
  TRect fScreenAvailRect;
  slim_byte fColorDepth;
  slim_byte fPixelDepth;
};

typedef TAWSDeviceCaps_ TAWSDeviceCaps;

typedef TFontDatabase_ TFontDatabase;

typedef TFontDatabaseFont_ TFontDatabaseFont;

typedef TFontStyle_ TFontStyle;

typedef TFontMetricsInfo_ TFontMetricsInfo;

typedef TFontCharWidthInfo_ TFontCharWidthInfo;

typedef TFrameSetSchema_ TFrameSetSchema;

typedef slim_opaque TAWSControl;

typedef TAWSControlInfo_ TAWSControlInfo;

typedef TPageInputValue_ TPageInputValue;

typedef TAWSNextSelectItemInfo_ TAWSNextSelectItemInfo;

typedef TAWSCursorInfo_ TAWSCursorInfo;

struct TAWSInterface_
{
  TAWSDeviceCaps fDeviceCaps;
  TFontDatabase *fFontDatabase;
  slim_bool (*fGetButtonLabelProc)(slim_int, slim_int, slim_char **, slim_int *);
  TAWSFont (*fFindFontProc)(TAWSPane, TFontDatabaseFont *, slim_int, slim_char *, TFontStyle *, slim_int);
  void (*fForgetFontProc)(TAWSFont);
  void (*fGetFontMetricsInfoProc)(TAWSPane, TAWSFont, TFontMetricsInfo *);
  slim_bool (*fGetFontCharWidthInfoProc)(TAWSPane, TAWSFont, slim_int, TFontCharWidthInfo *);
  slim_int (*fGetCharsWidthProc)(TAWSPane, TAWSFont, slim_char *, slim_int, slim_int);
  TAWSDrawContext (*fGetDrawContextProc)(TAWSPane, TRect *);
  void (*fReleaseDrawContextProc)(TAWSPane, TAWSDrawContext);
  void (*fDrawTextProc)(TAWSPane, TAWSDrawContext, TAWSFont, slim_char *, slim_int, slim_int, slim_int, slim_int, slim_int, slim_int, TColor, slim_int);
  void (*fSetBrowserPaneProc)(TAWSPane, TBrowserPane *);
  void (*fGetPaneGeometryProc)(TAWSPane, slim_int *, slim_int *);
  void (*fGetPaneVirtualGeometryProc)(TAWSPane, slim_int *, slim_int *);
  void (*fGetPaneScrollBarSizeProc)(TAWSPane, slim_int *, slim_int *);
  slim_bool (*fGetPanePositionProc)(TAWSPane, TAWSPane, slim_int, slim_int *, slim_int *);
  void (*fFillRectProc)(TAWSPane, TAWSDrawContext, TRect *, TColor);
  void (*fBitBltProc)(TAWSPane, TAWSDrawContext, TWWWPixelMap *, TRect *, slim_int, slim_int);
  void (*fTilePixelMapProc)(TAWSPane, TAWSDrawContext, TWWWPixelMap *, TRect *, slim_int, slim_int, slim_bool, slim_bool);
  void (*fInvalRectProc)(TAWSPane, TRect *);
  void (*fUpdatePaneProc)(TAWSPane);
  TAWSWindow (*fNewWindowProc)(slim_char *, TBrowserWindow **);
  void (*fDeleteWindowProc)(TAWSWindow);
  void (*fSetPaneTitleProc)(TAWSPane, TString, slim_int);
  void (*fShowPaneScrollProc)(TAWSPane, slim_int, slim_bool);
  void (*fSetPaneScrollPosProc)(TAWSPane, slim_int, slim_int, slim_int, slim_int);
  slim_bool (*fNewSplitPaneProc)(TAWSWindow, TAWSSplitter, TAWSPane, TAWSSplitter *, TAWSPane *);
  slim_bool (*fApplyFrameSetSchemaProc)(TAWSWindow, TAWSSplitter, TAWSPane, TFrameSetSchema *, TAWSSplitter *, TAWSPane *);
  void (*fCancelFrameSetSchemaProc)(TAWSWindow, TAWSSplitter, TAWSPane);
  void (*fDeleteSplitPaneProc)(TAWSSplitter, TAWSPane);
  slim_bool (*fSelectPaneProc)(TAWSWindow, TAWSSplitter, TAWSPane, TAWSPane, TAWSSplitter, TAWSPane, slim_bool);
  slim_bool (*fNewInsidePaneProc)(TAWSWindow, TAWSSplitter, TAWSPane, TRect *, TAWSSplitter *, TAWSPane *);
  void (*fDeleteInsidePaneProc)(TAWSSplitter, TAWSPane);
  void (*fShowInsidePaneProc)(TAWSSplitter, TAWSPane, TAWSDrawContext, slim_bool);
  void (*fMoveInsidePaneToProc)(TAWSSplitter, TAWSPane, slim_int, slim_int);
  void (*fResizeInsidePaneProc)(TAWSSplitter, TAWSPane, slim_int, slim_int);
  slim_bool (*fChangeChildPaneTypeProc)(TAWSSplitter, TAWSPane, TAWSSplitter, TAWSPane, slim_bool);
  TAWSControl (*fNewControlProc)(TAWSControlInfo *);
  slim_bool (*fSetControlValueProc)(TAWSControl, TPageInputValue *);
  slim_bool (*fGetControlValueProc)(TAWSControl, TPageInputValue *);
  slim_bool (*fAddSelectItemProc)(TAWSControl, TAWSControlInfo *, TAWSNextSelectItemInfo *);
  slim_bool (*fRemoveSelectItemProc)(TAWSControl, slim_pix, slim_int);
  slim_bool (*fAddOptGroupProc)(TAWSControl, TAWSControlInfo *, TAWSNextSelectItemInfo *, slim_opaque *);
  slim_bool (*fRemoveOptGroupProc)(TAWSControl, slim_pix, slim_opaque);
  void (*fShowControlProc)(TAWSPane, TAWSDrawContext, TAWSControl, slim_int, slim_bool);
  void (*fMoveControlToProc)(TAWSPane, TAWSControl, slim_int, slim_int, slim_int);
  void (*fDeleteControlProc)(TAWSPane, TAWSControl, slim_int);
  void (*fDrawBorderProc)(TAWSPane, TAWSDrawContext, TRect *, TRect *, TColor *, slim_int *);
  void (*fGetClipRectProc)(TAWSPane, TAWSDrawContext, TRect *);
  void (*fSetClipRectProc)(TAWSPane, TAWSDrawContext, TRect *);
  void (*fSetCursorProc)(TAWSWindow, TAWSPane, TAWSCursorInfo *);
  void (*fDrawFocusOutlineProc)(TAWSPane, TAWSDrawContext, TRect *, slim_int);
  void (*fEnterControlEditProc)(TAWSPane, TAWSControl);
  void (*fNotifyFocusProc)(TAWSWindow, TAWSPane, TAWSControl, TAWSWindow, TAWSPane, TAWSControl);
  void (*fGetSymbolMarkerMetricsProc)(TAWSPane, TAWSFont, slim_int, slim_int *, slim_int *, slim_int *);
  void (*fDrawSymbolMarkerProc)(TAWSPane, TAWSDrawContext, TAWSFont, slim_int, TRect *, TColor);
  void (*fScrollPaneProc)(TAWSPane, TAWSDrawContext, TRect *, slim_int, slim_int);
  void (*fCopyAreaProc)(TAWSPane, TAWSDrawContext, TRect *, slim_int, slim_int);
  slim_bool (*fWMLDoButtonAddProc)(TAWSPane, slim_char *, slim_int, slim_int, slim_int, slim_bool, slim_pix);
  void (*fWMLDoButtonRemoveAllProc)(TAWSPane);
};

typedef slim_opaque TAWSEmbedWindow;

typedef TAWSEmbedInfo_ TAWSEmbedInfo;

struct TAWSEmbedInterface_
{
  TAWSInterface *fAWSIF;
  TFontDatabase *fFontDatabase;
  TAWSEmbedWindow (*fNewWindowProc)(TAWSPane, slim_int, slim_int, TBrowserPane *, slim_pix, TAWSEmbedInfo *);
  void (*fMoveWindowProc)(TAWSPane, TAWSEmbedWindow, slim_int, slim_int);
  void (*fShowWindowProc)(TAWSPane, TAWSDrawContext, TAWSEmbedWindow, slim_bool);
  void (*fResizeWindowProc)(TAWSPane, TAWSEmbedWindow, slim_int, slim_int);
  void (*fDeleteWindowProc)(TAWSEmbedWindow);
  void (*fRequestNativeFocusProc)(TAWSPane, TAWSEmbedWindow);
  TAWSFont (*fFindFontProc)(TAWSEmbedWindow, TFontDatabaseFont *, slim_int, slim_char *, TFontStyle *, slim_int);
  void (*fForgetFontProc)(TAWSFont);
  void (*fDrawTextProc)(TAWSEmbedWindow, TAWSDrawContext, TAWSFont, slim_char *, slim_int, slim_int, slim_int, slim_int, slim_int, slim_int, TColor);
  void (*fFillRectProc)(TAWSEmbedWindow, TAWSDrawContext, TRect *, TColor);
  void (*fBitBltProc)(TAWSEmbedWindow, TAWSDrawContext, TWWWPixelMap *, TRect *, slim_int, slim_int);
  void (*fInvalRectProc)(TAWSEmbedWindow, TRect *);
  void (*fUpdateWindowProc)(TAWSEmbedWindow);
  slim_char *(*fAllocTmpFilename)(void);
  void (*fFreeTmpFilename)(slim_char *);
};

struct __attribute__((aligned(8))) iTContentAuth_
{
  slim_int fFlag;
  slim_int fType;
  slim_int fTarget;
  TString fChallenge;
  TString fRealm;
  TString fUser;
  TString fPass;
  TFixedString fProxyHost;
  slim_int fProxyPort;
};

struct TBrowserReply_SetLocation_
{
  slim_bool fDoRequestContent;
};

typedef TBrowserReply_SetLocation_ TBrowserReply_SetLocation;

struct TBrowserReply_RequestInclusion_
{
  slim_bool fDoRequestContent;
};

typedef TBrowserReply_RequestInclusion_ TBrowserReply_RequestInclusion;

struct TBrowserReply_HistoryBackForw_
{
  slim_bool fDoHistoryBackForw;
};

typedef TBrowserReply_HistoryBackForw_ TBrowserReply_HistoryBackForw;

struct TBrowserReply_CookieDialog_
{
  slim_bool fAcceptCookie;
};

typedef TBrowserReply_CookieDialog_ TBrowserReply_CookieDialog;

struct TBrowserReply_ConnectDialog_
{
  slim_bool fDoConnect;
};

typedef TBrowserReply_ConnectDialog_ TBrowserReply_ConnectDialog;

struct TBrowserReply_RedirectDialog_
{
  slim_bool fDoRedirect;
  slim_int fMethod;
};

typedef TBrowserReply_RedirectDialog_ TBrowserReply_RedirectDialog;

struct TBrowserReply_PostDialog_
{
  slim_bool fDoPost;
};

typedef TBrowserReply_PostDialog_ TBrowserReply_PostDialog;

struct TBrowserReply_AuthDialog_
{
  slim_bool fConfirmed;
  slim_char *fUserName;
  slim_char *fPassword;
  slim_bool fKeepUserName;
  slim_bool fKeepPassword;
};

typedef TBrowserReply_AuthDialog_ TBrowserReply_AuthDialog;

struct TBrowserReply_ServerCertConfirmDialog_
{
  slim_bool fConfirmed;
};

typedef TBrowserReply_ServerCertConfirmDialog_ TBrowserReply_ServerCertConfirmDialog;

struct TBrowserReply_ClientCertSelectDialog_
{
  slim_int fIndex;
};

typedef TBrowserReply_ClientCertSelectDialog_ TBrowserReply_ClientCertSelectDialog;

struct TBrowserReply_StartScript_
{
  slim_bool fAllowStart;
};

typedef TBrowserReply_StartScript_ TBrowserReply_StartScript;

struct TBrowserReply_JSConfirmDialog_
{
  slim_bool fConfirmed;
};

typedef TBrowserReply_JSConfirmDialog_ TBrowserReply_JSConfirmDialog;

struct TBrowserReply_JSPromptDialog_
{
  slim_bool fConfirmed;
  slim_char *fValue;
};

typedef TBrowserReply_JSPromptDialog_ TBrowserReply_JSPromptDialog;

struct TBrowserReply_JSHttpRequest_
{
  slim_bool fDoRequestContent;
};

typedef TBrowserReply_JSHttpRequest_ TBrowserReply_JSHttpRequest;

struct TBrowserReply_JSTimeoutDialog_
{
  slim_int fAction;
};

typedef TBrowserReply_JSTimeoutDialog_ TBrowserReply_JSTimeoutDialog;

struct __attribute__((aligned(8))) TBrowserReply_OpenWindow_
{
  TBrowserPane *fTargetPane;
  slim_bool fDoRequestContent;
};

typedef TBrowserReply_OpenWindow_ TBrowserReply_OpenWindow;

struct TBrowserReply_CloseWindow_
{
  slim_bool fClose;
};

typedef TBrowserReply_CloseWindow_ TBrowserReply_CloseWindow;

struct TBrowserReply_StartPlugin_
{
  slim_bool fAllowStart;
};

typedef TBrowserReply_StartPlugin_ TBrowserReply_StartPlugin;

union TBrowserReply_
{
  TBrowserReply_SetLocation uSetLocation;
  TBrowserReply_RequestInclusion uRequestInclusion;
  TBrowserReply_HistoryBackForw uHistoryBackForw;
  TBrowserReply_CookieDialog uCookieDialog;
  TBrowserReply_ConnectDialog uConnectDialog;
  TBrowserReply_RedirectDialog uRedirectDialog;
  TBrowserReply_PostDialog uPostDialog;
  TBrowserReply_AuthDialog uAuthDialog;
  TBrowserReply_ServerCertConfirmDialog uServerCertConfirmDialog;
  TBrowserReply_ClientCertSelectDialog uClientCertSelectDialog;
  TBrowserReply_StartScript uStartScript;
  TBrowserReply_JSConfirmDialog uJSConfirmDialog;
  TBrowserReply_JSPromptDialog uJSPromptDialog;
  TBrowserReply_JSHttpRequest uJSHttpRequest;
  TBrowserReply_JSTimeoutDialog uJSTimeoutDialog;
  TBrowserReply_OpenWindow uOpenWindow;
  TBrowserReply_CloseWindow uCloseWindow;
  TBrowserReply_StartPlugin uStartPlugin;
};

struct __attribute__((aligned(8))) TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F::$7CE6CAEC083569DD0CC7BF9146099368
{
  TBrowserPane *fPane;
  slim_int fReason;
};

struct TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F::$0CDA2D2390E7024604C5D74C7B349FCC
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_pix fEntryPix;
};

struct TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F::$8696670000A7CEBF61EF5580F931A9B6
{
  TBrowserPane *fPane;
  slim_pix fInclusionPix;
};

typedef slim_bool (*BrowserCommand_MatchProc)(TBrowserCommand *, slim_opaque);

struct TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F::$56226CA6006878E1DCFACE58C451E3B5
{
  slim_opaque fArg;
  BrowserCommand_MatchProc fProc;
};

union TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F
{
  TBrowserWindow *Window;
  TBrowserPane *Pane;
  TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F::$7CE6CAEC083569DD0CC7BF9146099368 ZapPane;
  THTTPChannel HTTPChannel;
  TSSL SSLObj;
  TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F::$0CDA2D2390E7024604C5D74C7B349FCC HistoryEntry;
  slim_pix HelperStreamPix;
  TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F::$8696670000A7CEBF61EF5580F931A9B6 ZapInclusion;
  TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F::$56226CA6006878E1DCFACE58C451E3B5 Callback;
};

struct TBRCmdMatchParam_
{
  slim_int fType;
  TBRCmdMatchParam_::$7AD976C73E701AAF8BF1C4F4E94AEB3F u;
};

struct TFontMetricsInfo_
{
  slim_int fAscent;
  slim_int fDescent;
  slim_int fHeight;
  slim_int fXHeight;
  slim_int fLineHeight;
};

struct TFontCharWidthInfo_
{
  slim_short fCharWidth[256];
};

struct TFontDatabaseFont_
{
  slim_int fCharSet;
  slim_char *fFontFamily;
  slim_int fFontSizeMin;
  slim_int fFontSizeMax;
  slim_int fFontWeightMin;
  slim_int fFontWeightMax;
  slim_byte *fFontStretch;
  slim_int fFontStretchLen;
  slim_byte *fFontStyle;
  slim_int fFontStyleLen;
  slim_byte *fFontVariant;
  slim_int fFontVariantLen;
  TAWSFont fAWSFont;
  TFontMetricsInfo *fFontMetricsInfo;
  TFontCharWidthInfo *fFontCharWidthInfo;
  slim_opaque fFindFontArg;
};

struct __attribute__((aligned(8))) TFontDatabase_
{
  slim_int fFontDBFlag;
  slim_int fFontSizeNameToValue[9];
  TFontDatabaseFont *fI18NFontList;
  slim_int fI18NFontListLen;
  TFontDatabaseFont *fFontList;
  slim_int fFontListLen;
};

struct TDummyAWSInstance_
{
  slim_int fRefCount;
  TFontMetricsInfo fFontMetrics;
  TFontCharWidthInfo fFontCharWidthInfo;
  TFontDatabaseFont fFontDatabaseFont;
  TFontDatabase fFontDatabase;
  TAWSInterface fAWSIF;
  TAWSEmbedInterface fAWSEmbedInterface;
  slim_opaque fPWSInterface;
  slim_opaque fPWSEmbedInterface;
};

struct TBrowserPageSaveItem_
{
  slim_int fContentType;
  slim_char *fCharset;
  slim_int fURLLength;
  slim_int fHeaderLength;
  slim_int fContentLength;
  slim_int fOriginLength;
  slim_int fCertLength;
  slim_time fTime;
  TURLString fURL;
  TString fHeader;
  slim_int fCoreSpecFlag;
  slim_time fExpires;
  slim_int fExpireType;
  slim_vhandle fContent;
  slim_handle fCertListData;
  slim_int fInclusionInfo;
  slim_bool fHeaderAllocated;
};

struct TPWSGlobalContext_
{
  slim_opaque fImplementation;
};

struct TPWSContext_
{
  slim_opaque fImplementation;
};

struct __attribute__((aligned(8))) TDialogTemplateItem_
{
  slim_int fID;
  slim_int fType;
  slim_int fFlag;
  slim_opaque fParam;
  slim_char *fTitle;
  slim_int fFont;
  TRect fRect;
  slim_int fFocusMove[4];
  slim_int fSkinID;
  slim_int fRectType;
};

struct TDialogTemplateItemLayout_
{
  slim_int fLayoutFlag;
  slim_int fLayoutTarget[4];
};

struct TToolBarInfo_
{
  slim_int fDialogID;
  slim_int fLabelTextGap;
};

typedef TTabbedMenuInfo_ TTabbedMenuInfo;

typedef TTabbedMenuPageImage_ TTabbedMenuPageImage;

struct iTTabbedMenuHandler_
{
  TWnd fWnd;
  TWnd fButtonList;
  TWnd fHelpArea;
  TWnd *fTabButtonArray;
  slim_int fPageNum;
  slim_int fCurrentPage;
  slim_int fCurrentItemOfCurrentPage;
  slim_int fTextIndent;
  TTabbedMenuInfo *fMenuInfo;
  TTabbedMenuPageImage *fImageDataArray;
  slim_opaque fUserData;
};

struct TTitleAreaInfo_
{
  slim_int fMaxTabNum;
  slim_int fActiveTabWidthRatio;
  slim_int fNonactiveTabWidthRatio;
  slim_int fGapFromRightEdge;
  slim_int fDialogSkinID;
  slim_int fActiveSkinID;
  slim_int fNonactiveSkinID;
  slim_int fSelectSkinID;
  slim_int fDeactiveTabFontSize;
  slim_int fActiveTabFontSize;
  TFontStyle *fFontStyle;
};

typedef TListViewInfo_ TListViewInfo;

struct __attribute__((aligned(8))) TBookmarkDialogInfo_
{
  TListViewInfo *fListViewInfo;
  slim_int fDialogID;
  slim_int fTableID;
  slim_int fInfoTextID;
  slim_int fBookmarkLockNormalImageRscID;
  slim_int fBookmarkLockSelectedImageRscID;
  slim_char *fFileName;
  slim_bool fIsURLList;
  TTabbedMenuInfo *fListSubmenuInfo;
  TTabbedMenuInfo *fVisualSubmenuInfo;
  slim_int fEditDialogID;
  slim_int fEditDialogTitleTextID;
  slim_int fEditDialogURLTextID;
  slim_int fDeleteDialogID;
  slim_int fDeleteDialogTitleTextID;
  slim_int fDeleteDialogURLTextID;
  slim_bool fIsVisual;
};

typedef TLabelCompoMode_ TLabelCompoMode;

struct iTListViewHandler_
{
  TWnd fDialog;
  TWnd fTableCompo;
  TWnd fPrevPageButton;
  TWnd fNextPageButton;
  TWnd *fIndicatorArray;
  TWWWPixelMap *fNumKeyNormalImageArray;
  TWWWPixelMap *fNumKeySelectedImageArray;
  TWWWPixelMap *fMenuNormalImage;
  TWWWPixelMap *fMenuSelectedImage;
  TListViewInfo *fListViewInfo;
  TLabelCompoMode *fLabelCompoMode;
  slim_int fCurrentPage;
  slim_opaque fDataList;
  slim_opaque fOwner;
};

struct __attribute__((aligned(8))) TBookTree_
{
  TTree fTree;
  slim_int fMaxTitleLen;
  slim_int fMaxURLLen;
  slim_int fMaxItems;
  slim_int fMaxLevel;
  slim_bool fMultiDirectory;
};

struct __attribute__((aligned(8))) TBookmarkSubmenu_
{
  TWnd fWnd;
  TTabbedMenuHandler fMenuHandler;
  TBookmarkDialog fBookmarkDialog;
  slim_int fVindex;
};

struct iTBookmarkSubWndUserItem_
{
  TBookmarkDialog fTBookmark;
};

struct TURLHistoryDialogInfo_
{
  TListViewInfo *fListViewInfo;
  slim_int fDialogID;
  slim_int fTableID;
  slim_int fDeleteDialogID;
  slim_int fDeleteDialogURLTextID;
  TTabbedMenuInfo *fSubmenuInfo;
};

struct TURLHistorySubmenu_
{
  TWnd fWnd;
  TTabbedMenuHandler fMenuHandler;
  TURLHistoryDialog fURLHistoryDialog;
};

struct TPageMemoDialogInfo_
{
  TListViewInfo *fListViewInfo;
  slim_int fDialogID;
  slim_int fTableID;
  slim_int fInfoTextID;
  slim_int fPageMemoLockNormalImageRscID;
  slim_int fPageMemoLockSelectedImageRscID;
  slim_char *fFileName;
  slim_bool fIsURLList;
  TTabbedMenuInfo *fSubmenuInfo;
  slim_int fEditDialogID;
  slim_int fEditDialogTitleTextID;
  slim_int fEditDialogURLTextID;
  slim_int fDeleteDialogID;
  slim_int fDeleteDialogTitleTextID;
  slim_int fDeleteDialogURLTextID;
};

struct TPageMemoList_
{
  TSpecList fList;
  slim_int fMaxCapacity;
  slim_int fMaxTitleLen;
  slim_int fMaxURLLen;
  slim_int fMaxItems;
  slim_int fMaxSaveItem;
  slim_char *fFileExt;
};

struct TPageMemoSubmenu_
{
  TWnd fWnd;
  TTabbedMenuHandler fMenuHandler;
  TPageMemoDialog fPageMemoDialog;
};

struct TBrowserCertDialogInfo_
{
  TListViewInfo *fListViewInfo;
  slim_int fDialogID;
  slim_int fTableID;
  slim_int fCertValidNormalImageRscID;
  slim_int fCertValidSelectedImageRscID;
  slim_char *fFileName;
  TTabbedMenuInfo *fBrowserCertSubmenuInfo;
};

struct TBrowserCertSubmenu_
{
  TWnd fWnd;
  TTabbedMenuHandler fMenuHandler;
  TBrowserCertDialog fBrowserCertDialog;
};

struct TClientCertDialogInfo_
{
  TListViewInfo *fListViewInfo;
  slim_int fDialogID;
  slim_int fTableID;
  slim_int fCertValidNormalImageRscID;
  slim_int fCertValidSelectedImageRscID;
  slim_char *fFileName;
  TTabbedMenuInfo *fClientCertSubmenuInfo;
  slim_int fDeleteDialogID;
  slim_int fDeleteDialogSubjectNameID;
};

struct TClientCertSubmenu_
{
  TWnd fWnd;
  TTabbedMenuHandler fMenuHandler;
  TClientCertDialog fClientCertDialog;
};

struct __attribute__((aligned(8))) TVisitHistoryDialogInfo_
{
  TListViewInfo *fListViewInfo;
  slim_int fDialogID;
  slim_int fTableID;
  slim_int fInfoTextID;
  slim_bool fIsURLList;
  TTabbedMenuInfo *fSubmenuInfo;
  slim_int fDeleteDialogID;
  slim_int fDeleteDialogTitleTextID;
  slim_int fDeleteDialogURLTextID;
};

struct TVisitHistorySubmenu_
{
  TWnd fWnd;
  TTabbedMenuHandler fMenuHandler;
  TVisitHistoryDialog fVisitHistoryDialog;
};

struct TTextSearchDialogInfo_
{
  slim_int fID;
  slim_int fTextID;
  slim_int fMoveID;
  slim_int fMaxSearchTextLen;
  slim_int fDefaultSearchFlag;
  slim_int fMoveUpSkinID;
  slim_int fMoveDownSkinID;
  slim_int fPosition;
};

struct __attribute__((aligned(8))) TDownloadDialogInfo_
{
  slim_int fDialogID;
  slim_int fStatusID;
  slim_int fProgressID;
  slim_int fURLTextID;
  slim_char *fDefaultFileName;
  slim_int fConfirmDialogID;
  slim_int fSaveFileID;
  slim_int fMimeTypeID;
  slim_int fCompleteDialogID;
  slim_int fSaveToID;
};

struct __attribute__((aligned(8))) iTContentCoreSpec_
{
  slim_int fFlag;
  slim_int fRefCount;
  slim_time fTime;
  slim_vhandle fContent;
  TString fHeader;
  slim_int fCurrentLength;
  slim_int fContentLength;
  slim_int fOriginLength;
  slim_int fContentType;
  TString fValidatorETag;
  TString fValidatorDate;
  slim_time fExpires;
  slim_int fExpireType;
  TCertList fCertList;
  slim_int fCertListSize;
};

struct TDRMMediaObject_
{
  slim_int fContentType;
  TFixedString fContentID;
  slim_vhandle fContent;
  slim_int fContentLength;
  slim_int fCurrentLength;
  slim_opaque fUserData;
};

struct TDRMUsageContext_
{
  slim_int fDummy;
};

typedef TSymCipherCtx_ TSymCipherCtx;

typedef TSymCipherInfo_ TSymCipherInfo;

typedef slim_bool (*TSymCipherCtxInitializeProc)(TSymCipherCtx *, TSymCipherInfo *);

typedef slim_int (*TSymCipherCtxUpdateProc)(TSymCipherCtx *, slim_byte *, slim_int, slim_byte *);

typedef void (*TSymCipherCtxFinalizeProc)(TSymCipherCtx *);

typedef TStrmCipherCtx_ TStrmCipherCtx;

typedef void (*TStrmCipherCtxInitializeProc)(TStrmCipherCtx *, slim_byte *, slim_int);

typedef void (*TStrmCipherCtxUpdateProc)(TStrmCipherCtx *, slim_byte *, slim_int, slim_byte *);

typedef void (*TStrmCipherCtxFinalizeProc)(TStrmCipherCtx *);

struct TRC4_
{
  slim_byte fSbox[256];
  slim_int fI;
  slim_int fJ;
};

typedef TRC4_ TRC4;

union TStrmCipherCtx_
{
  slim_int uNull;
  TRC4 uRC4;
};

struct TStrmCipher_
{
  slim_int fAlgo;
  TStrmCipherCtxInitializeProc fCtxInitializeProc;
  TStrmCipherCtxUpdateProc fCtxUpdateProc;
  TStrmCipherCtxFinalizeProc fCtxFinalizeProc;
  TStrmCipherCtx fCtx;
};

typedef TStrmCipher_ TStrmCipher;

typedef TBlkCipherCtx_ TBlkCipherCtx;

typedef slim_bool (*TBlkCipherCtxInitializeProc)(TBlkCipherCtx *, TSymCipherInfo *);

typedef void (*TBlkCipherCtxUpdateProc)(TBlkCipherCtx *, slim_byte *, slim_int, slim_byte *);

typedef void (*TBlkCipherCtxFinalizeProc)(TBlkCipherCtx *);

typedef TBlkCipherBaseCtx_ TBlkCipherBaseCtx;

typedef void (*TBlkCipherBaseCtxSetKeyProc)(TBlkCipherBaseCtx *, slim_byte *, slim_int);

typedef void (*TBlkCipherBaseCtxEncryptProc)(TBlkCipherBaseCtx *, slim_byte *, slim_byte *);

typedef void (*TBlkCipherBaseCtxDecryptProc)(TBlkCipherBaseCtx *, slim_byte *, slim_byte *);

struct TRC2_
{
  slim_half fKey[64];
};

typedef TRC2_ TRC2;

struct TDES_
{
  slim_word fSubKey[32];
};

typedef TDES_ TDES;

struct T2KeyDES3_
{
  slim_word fSubKey[2][32];
};

typedef T2KeyDES3_ T2KeyDES3;

struct TDES3_
{
  slim_word fSubKey[3][32];
};

typedef TDES3_ TDES3;

struct TAES_
{
  slim_int fNr;
  slim_word fEncKey[60];
  slim_word fDecKey[60];
};

typedef TAES_ TAES;

union TBlkCipherBaseCtx_
{
  slim_int uDummy;
  TRC2 uRC2;
  TDES uDES;
  T2KeyDES3 u2KeyDES3;
  TDES3 uDES3;
  TAES uAES;
};

struct TBlkCipherBase_
{
  slim_int fAlgo;
  TBlkCipherBaseCtxSetKeyProc fSetKeyProc;
  TBlkCipherBaseCtxEncryptProc fEncryptProc;
  TBlkCipherBaseCtxDecryptProc fDecryptProc;
  TBlkCipherBaseCtx fCtx;
  slim_int fBlkSize;
};

typedef TBlkCipherBase_ TBlkCipherBase;

struct TBlkCipherCBC_
{
  TBlkCipherBase fBase;
  slim_byte fIV[16];
  slim_byte fPrevCipherBlk[16];
};

typedef TBlkCipherCBC_ TBlkCipherCBC;

union TBlkCipherCtx_
{
  slim_int uDummy;
  TBlkCipherCBC uCBC;
};

struct TBlkCipher_
{
  slim_int fMode;
  TBlkCipherCtxInitializeProc fCtxInitializeProc;
  TBlkCipherCtxUpdateProc fCtxEncryptProc;
  TBlkCipherCtxUpdateProc fCtxDecryptProc;
  TBlkCipherCtxFinalizeProc fCtxFinalizeProc;
  TBlkCipherCtx fCtx;
  slim_bool fEncrypt;
  slim_int fRemain;
  slim_byte fRemainBuf[16];
};

typedef TBlkCipher_ TBlkCipher;

union TSymCipherCtx_
{
  slim_int uDummy;
  TStrmCipher uStrmCipher;
  TBlkCipher uBlkCipher;
};

struct __attribute__((aligned(8))) TSymCipher_
{
  TSymCipherCtxInitializeProc fCtxInitializeProc;
  TSymCipherCtxUpdateProc fCtxUpdateProc;
  TSymCipherCtxFinalizeProc fCtxFinalizeProc;
  TSymCipherCtx fCtx;
  slim_bool fIsStream;
};

typedef TSymCipher_ TSymCipher;

struct TCryptHMAC_
{
  TMD fBase;
  TMDCtx fInnerCtx;
  TMDCtx fOuterCtx;
};

typedef TCryptHMAC_ TCryptHMAC;

struct TSSLv3MAC_
{
  TMD fCtx;
  TMD fInnerCtx;
  TMD fOuterCtx;
};

typedef TSSLv3MAC_ TSSLv3MAC;

struct __attribute__((aligned(8))) TSSLv2MAC_
{
  TMD fCtx;
  slim_word fKeySize;
  slim_byte fKey[24];
};

typedef TSSLv2MAC_ TSSLv2MAC;

union TSSLMAC_
{
  TCryptHMAC uTLSv1;
  TSSLv3MAC uSSLv3;
  TSSLv2MAC uSSLv2;
};

typedef TSSLMAC_ TSSLMAC;

struct iTSSLCipherContext_
{
  TSymCipher fBulkCipher;
  TSSLMAC fMAC;
};

struct __attribute__((aligned(8))) TPostDataCursor_
{
  slim_int fState;
  TPostData fPostData;
  slim_int fPostDataOff;
  slim_char *fBuffer;
  slim_int fBufferSize;
  slim_offlen fOfflen;
  TString fBoundary;
  slim_int fType;
  slim_int fFileDesc;
  slim_int fLen;
};

struct THTTPStreamInflate_
{
  slim_int fType;
  slim_bool (*fInitializeProc)(THTTPStreamInflate_ *);
  slim_int (*fSkipHeaderProc)(THTTPStreamInflate_ *, iTHTTPStream *);
  slim_int (*fReadProc)(THTTPStreamInflate_ *, iTHTTPStream *, slim_char *, slim_int, slim_int *);
  void (*fFinalizeProc)(THTTPStreamInflate_ *);
};

struct __attribute__((aligned(8))) TCertDN_
{
  slim_int fLen;
  slim_byte *fData;
  slim_int fAttr;
  slim_int fStrType;
  slim_int fPeekAttr;
  slim_byte *fPeekCur;
  slim_int fRDNLen;
};

struct TCertSerNo_
{
  slim_int fLen;
  slim_byte *fData;
};

typedef TCertSerNo_ TCertSerNo;

struct TCertAltName_
{
  slim_int fLen;
  slim_byte *fPtr;
};

typedef TCertAltName_ TCertAltName;

struct __attribute__((aligned(8))) TCertGN_
{
  slim_int fLen;
  slim_byte *fData;
  slim_int fType;
};

typedef TCertGN_ TCertGN;

union TCertCRLDistPoint_::$633A4DCDAC7085C77991E6BA851E022E
{
  TCertGN uGN;
  TCertDN uDN;
};

struct TCertCRLDistPoint_
{
  slim_int fNameType;
  TCertCRLDistPoint_::$633A4DCDAC7085C77991E6BA851E022E fPointName;
  slim_int fReasonFlags;
  TCertGN fCRLIssuer;
};

typedef TCertCRLDistPoint_ TCertCRLDistPoint;

struct TCertPolicyQualifier_::$026B9601CD462D0806B6CC5FD872E604::$6710A63BDF1DD5D022F0E46AB6840BE9
{
  slim_int fLen;
  slim_byte *fURI;
};

struct TCertPolicyQualifier_::$026B9601CD462D0806B6CC5FD872E604::$7FC865AC32DDCD9D3CCAB759DC1EB98D
{
  slim_int fOrgLen;
  slim_byte *fOrg;
  slim_int fTextLen;
  slim_byte *fText;
};

union TCertPolicyQualifier_::$026B9601CD462D0806B6CC5FD872E604
{
  TCertPolicyQualifier_::$026B9601CD462D0806B6CC5FD872E604::$6710A63BDF1DD5D022F0E46AB6840BE9 CPSURI;
  TCertPolicyQualifier_::$026B9601CD462D0806B6CC5FD872E604::$7FC865AC32DDCD9D3CCAB759DC1EB98D UNotice;
};

struct TCertPolicyQualifier_
{
  slim_int fType;
  TCertPolicyQualifier_::$026B9601CD462D0806B6CC5FD872E604 u;
};

typedef TCertPolicyQualifier_ TCertPolicyQualifier;

struct TCertPolicy_
{
  slim_int fIDLen;
  slim_byte *fID;
  slim_int fQualifierNum;
  TCertPolicyQualifier fQualifier[4];
};

typedef TCertPolicy_ TCertPolicy;

struct TCert_
{
  slim_int fListIndex;
  TCertStoreItem *fStoreItem;
  slim_int fFlag;
  slim_int fVersion;
  TCertSerNo fSerNo;
  slim_int fSignAlgo;
  TCertDN fIssuer;
  slim_time fValidityStart;
  slim_time fValidityEnd;
  TCertDN fSubject;
  TRSAPublicKey fPublicKey;
  slim_byte *fPtr;
  slim_word fLen;
  slim_byte *fInfo;
  slim_word fInfoLen;
  slim_byte *fSign;
  slim_word fSignLen;
  slim_byte *fExtensionsPtr;
  slim_int fExtensionsLen;
  slim_int fIsCA;
  slim_int fPathDepth;
  slim_word fKeyUsage;
  slim_word fExtKeyUsage;
  TCertAltName fSubjAltName;
  slim_word fNetscapeCertType;
  slim_int fCRLDPNum;
  TCertCRLDistPoint fCRLDistPoint[4];
  slim_int fPolicyNum;
  TCertPolicy fPolicy[1];
};

struct __attribute__((aligned(8))) TCRL_
{
  slim_byte *fPtr;
  slim_int fLen;
  slim_byte *fTBSCertList;
  slim_int fTBSCertListLen;
  slim_byte *fSign;
  slim_int fSignLen;
  slim_int fVersion;
  slim_int fSignAlgo;
  TCertDN fIssuer;
  slim_time fThisUpdate;
  slim_time fNextUpdate;
  slim_byte *fRevokedList;
  slim_int fRevokedListLen;
};

struct iTJSContainerArray_
{
  slim_int fItemSize;
  slim_int fBaseIndex;
  slim_int fRequestBufferSize;
};

struct __attribute__((aligned(8))) iTJSScope_
{
  TJSObject fCar;
  TJSScope fCdr;
  TJSDirectAccessor fAccessor;
  slim_int fRef;
};

struct TPageEventType_
{
  slim_int fID;
  slim_int fFlag;
};

typedef void (*XMLDTDHandler_TidyProc)(TXMLDTDHandler *);

struct TXMLDTDHandlerClass_
{
  XMLDTDHandler_TidyProc fTidy;
  slim_int (*fNotationDecl)(TXMLDTDHandler *, slim_split_ss *, slim_split_ss *, slim_split_ss *);
  slim_int (*fUnparsedEntityDecl)(TXMLDTDHandler *, slim_split_ss *, slim_split_ss *, slim_split_ss *, slim_split_ss *);
};

typedef void (*XMLDeclHandler_TidyProc)(TXMLDeclHandler *);

struct TXMLDeclHandlerClass_
{
  XMLDeclHandler_TidyProc fTidy;
  slim_int (*fAttributeDecl)(TXMLDeclHandler *, slim_split_ss *, slim_split_ss *, slim_split_ss *, slim_split_ss *, slim_split_ss *);
  slim_int (*fElementDecl)(TXMLDeclHandler *, slim_split_ss *, slim_split_ss *);
  slim_int (*fExternalEntityDecl)(TXMLDeclHandler *, slim_split_ss *, slim_split_ss *, slim_split_ss *);
  slim_int (*fInternalEntityDecl)(TXMLDeclHandler *, slim_split_ss *, slim_split_ss *);
};

struct TOutlineItemType_
{
  slim_int fID;
  slim_int fVariantFlag;
};

struct __attribute__((aligned(8))) TElementStyleTuple_
{
  slim_opaque fHashNext;
  slim_int fUseCount;
  slim_int fHash;
  slim_pix fPageFont;
  slim_word fExistenceFlag;
  slim_int fLen;
  slim_int fTuple[1];
};

struct __attribute__((aligned(8))) iTStreamContent_
{
  TContentSpec fContentSpec;
  slim_int fRequestFlag;
  TURLString fReferer;
  slim_int fURLCharSet;
  slim_int fRequestedMIMEType;
  TMultiContent fMultiContent;
  slim_int fConsumedLength;
};

struct TVersionInfo
{
  slim_char *fModule;
  slim_int fMajor;
  slim_int fMinor;
  slim_int fPatch;
  slim_char *fExtension;
};

struct __attribute__((aligned(8))) TSerializeVersionInfo_
{
  TVersionInfo fBase;
  slim_char fModuleBuf[36];
};

typedef slim_bool (*SerializeOutput_SetVersionInfoProc)(TSerializeOutput *, TVersionInfo *);

typedef slim_int (*SerializeOutput_StartEndCancelUnitProc)(TSerializeOutput *, slim_int);

typedef slim_int (*SerializeOutput_StartEndCancelWriteProc)(TSerializeOutput *, slim_int);

typedef TSerializeReadWriteVal_ TSerializeReadWriteVal;

typedef slim_int (*SerializeOutput_WriteXProc)(TSerializeOutput *, slim_int, TSerializeReadWriteVal *);

typedef slim_int (*SerializeOutput_WriteStreamProc)(TSerializeOutput *, slim_byte *, slim_int, slim_bool, slim_int *);

typedef void (*SerializeOutput_WriteEOFProc)(TSerializeOutput *);

typedef slim_int (*SerializeOutput_ProgressProc)(TSerializeOutput *);

struct TSerializeOutput_
{
  slim_opaque fImplement;
  SerializeOutput_SetVersionInfoProc fSetVersionInfo;
  SerializeOutput_StartEndCancelUnitProc fStartEndCancelUnit;
  SerializeOutput_StartEndCancelWriteProc fStartEndCancelWrite;
  SerializeOutput_WriteXProc fWriteX;
  SerializeOutput_WriteStreamProc fWriteStream;
  SerializeOutput_WriteEOFProc fWriteEOF;
  SerializeOutput_ProgressProc fProgress;
};

typedef void (*DeserializeInput_VersionInfoProc)(TDeserializeInput *, TSerializeVersionInfo *);

typedef slim_int (*DeserializeInput_NextUnitProc)(TDeserializeInput *);

typedef slim_int (*DeserializeInput_StartEndCancelReadProc)(TDeserializeInput *, slim_int);

typedef slim_int (*DeserializeInput_ReadXProc)(TDeserializeInput *, slim_int, TSerializeReadWriteVal *);

typedef slim_int (*DeserializeInput_ReadStreamProc)(TDeserializeInput *, slim_byte *, slim_int, slim_int *);

typedef slim_int (*DeserializeInput_ProgressProc)(TDeserializeInput *);

struct TDeserializeInput_
{
  slim_opaque fImplement;
  DeserializeInput_VersionInfoProc fVersionInfo;
  DeserializeInput_NextUnitProc fNextUnit;
  DeserializeInput_StartEndCancelReadProc fStartEndCancelRead;
  DeserializeInput_ReadXProc fReadX;
  DeserializeInput_ReadStreamProc fReadStream;
  DeserializeInput_ProgressProc fProgress;
};

struct TFontStyle_
{
  slim_int fFontSize;
  slim_int fFontSizeAdjust;
  slim_byte fFontStretch;
  slim_byte fFontStyle;
  slim_byte fFontVariant;
  slim_byte fFontWeight;
};

struct TFrameSchema_
{
  slim_int fAbstractSize;
  slim_int fAbstractSizeUnit;
  TColor fBorderColor;
  slim_bool fNoResize;
  slim_bool fFrameBorderStyle;
  slim_int fVirtualPixelSize;
  slim_int fPixelSize;
};

typedef TFrameSchema_ TFrameSchema;

struct TFrameSetSchema_
{
  slim_bool fUsePixelSize;
  slim_int fCols;
  slim_int fRows;
  slim_int fBorderSize;
  TFrameSchema fFrameSchema[16];
};

struct TAWSControlInfo_
{
  slim_int fInputType;
  TString fText;
  slim_int fCharset;
  TAWSPane fAWSPane;
  TAWSWindow fAWSWindow;
  TAWSFont fAWSFont;
  slim_int fSize;
  slim_int fMaxLength;
  slim_bool fChecked;
  slim_int fCols;
  slim_int fRows;
  slim_bool fMultiple;
  slim_bool fSelected;
  slim_bool fDisabled;
  slim_bool fReadonly;
  slim_pix fPageInputPix;
  slim_pix fFormPix;
  slim_pix fOptGroupPix;
  slim_opaque fAWSOptGroup;
  TString fName;
  TString fLabel;
  TString fCDATA;
  TString fAccept;
  slim_int fInputRestriction;
  TString fInputRestrictionArgs;
  slim_bool fInputRequired;
  TColor fColor;
  TColor fBackgroundColor;
  slim_bool fVertical;
  slim_int fMode;
  TString fInputModeValue;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$4FE9EEEE41A11803619E4FA43C84E03E
{
  TString fText;
  slim_int fCharset;
  slim_bool fSubmit;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$2B74D1BD9B15481ACE1F97AA2993B06D
{
  slim_bool fSelected;
  slim_int fIndex;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$B3451A7B911E25A2551CC997B3F12C21
{
  TString fText;
  slim_int fCharset;
  slim_int fIndex;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$F7A7F204093AA4A701E67AB813026DBB
{
  slim_bool fDisabled;
  slim_int fIndex;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$304255722682367C2132B2326D371755
{
  TColor fColor;
  TColor fBackgroundColor;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$52D8BD3F4F9AC0A07FF3BA1EF674BADE
{
  TAWSControlInfo *fAWSControlInfo;
  slim_int fWidth;
  slim_int fHeight;
  slim_int fBorderWidth[4];
  slim_int fPadding[4];
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$7E6EE410D4396C28F0EB14EAB0824D1E
{
  slim_int fWidth;
  slim_int fHeight;
  slim_int fBorderWidth[4];
  slim_int fPadding[4];
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$CBEF2146EB0FE0B28085FBE0B69C7C1E
{
  TString fLabel;
  slim_int fCharset;
  slim_opaque fAWSOptGroup;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$0942A843EEFFF9620D489223B4B91332
{
  slim_bool fDisabled;
  slim_opaque fAWSOptGroup;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$72A06BCA0D1E61D2516CB3DFB9A36763
{
  slim_int fOverflowX;
  slim_int fOverflowY;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$C830DBF92282304CD13BB208FADF9B13
{
  TColor f3DLight;
  TColor fArrow;
  TColor fBase;
  TColor fDarkShadow;
  TColor fFace;
  TColor fHighLight;
  TColor fShadow;
};

struct TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$02A4C020912302F4110560BDE1C1D1CB
{
  slim_int fStart;
  slim_int fLength;
  slim_int fDenom;
};

union TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB
{
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$4FE9EEEE41A11803619E4FA43C84E03E fText;
  slim_bool fChecked;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$2B74D1BD9B15481ACE1F97AA2993B06D fOption;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$B3451A7B911E25A2551CC997B3F12C21 fOptionText;
  slim_bool fDisabled;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$F7A7F204093AA4A701E67AB813026DBB fOptionDisabled;
  slim_bool fReadonly;
  slim_int fMaxLength;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$304255722682367C2132B2326D371755 fColor;
  TAWSFont fAWSFont;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$52D8BD3F4F9AC0A07FF3BA1EF674BADE fNaturalSize;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$7E6EE410D4396C28F0EB14EAB0824D1E fSize;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$CBEF2146EB0FE0B28085FBE0B69C7C1E fOptGroupLabel;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$0942A843EEFFF9620D489223B4B91332 fOptGroupDisabled;
  TString fFullPath;
  TString fMIMEType;
  TColor fBorderColor[4];
  slim_int fBorderStyle[4];
  slim_int fTextIndent;
  slim_int fTextDecoration;
  slim_int fWhiteSpace;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$72A06BCA0D1E61D2516CB3DFB9A36763 fOverflow;
  slim_int fTextAlign;
  slim_int fLineHeight;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$C830DBF92282304CD13BB208FADF9B13 fScrollBarColor;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB::$02A4C020912302F4110560BDE1C1D1CB fScrollBar;
  slim_bool fFrameBorder;
  slim_bool fNoResize;
};

struct TPageInputValue_
{
  slim_int fValueType;
  TPageInputValue_::$39C80276C88E39B234C31D06AAAAFDFB u;
};

struct TAWSNextSelectItemInfo_
{
  slim_pix fOptGroupPix;
  slim_opaque fAWSOptGroup;
  slim_pix fOptionPix;
  slim_int fOptionIndex;
  slim_bool fOptionIsDescendantOfParent;
};

struct TAWSCursorInfo_
{
  slim_int fStyleShape;
  slim_int fContextShape;
  TAWSControl fAWSControl;
  slim_int fOptionIndex;
  slim_opaque fAWSOptGroup;
  TAWSEmbedWindow fAWSEmbedWindow;
  slim_opaque fUserData;
};

struct TAWSEmbedInfo_
{
  slim_bool fFullScreen;
  slim_bool fNetscapeCompat;
  slim_opaque fCompatWindow;
  void *fWSInfo;
};

typedef TTabbedMenuPageInfo_ TTabbedMenuPageInfo;

struct TTabbedMenuInfo_
{
  TTabbedMenuPageInfo *fPageInfoArray;
  slim_int fPageNum;
  slim_int fDialogID;
  slim_int fButtonListID;
  slim_int fHelpAreaID;
  slim_int fActiveSkinID;
  slim_int fNonactiveSkinID;
  slim_int fNextPageActionID;
  slim_int fPrevPageActionID;
  slim_int fNextItemActionID;
  slim_int fPrevItemActionID;
  slim_int fCloseActionID;
  slim_int fExecuteActionID;
  slim_int *fNumKeyActionIDArray;
  slim_int fRowNum;
  slim_int fTextGap;
  slim_bool fKeepMenuItemIndex;
  void (*fHandleActionProc)(TTabbedMenuHandler, slim_int, slim_opaque);
  void (*fSetupItemProc)(TTabbedMenuHandler, TWnd, slim_int, slim_opaque);
  void (*fCloseProc)(TTabbedMenuHandler, slim_opaque);
  void (*fGetHelpStringRscIDProc)(TTabbedMenuHandler, slim_int, slim_int, slim_opaque, slim_int *);
};

struct TTabbedMenuPageImage_
{
  TWWWPixelMap *fNormalImageArray;
  TWWWPixelMap *fSelectedImageArray;
  TWWWPixelMap *fDisabledImageArray;
};

typedef TTableCompoCellInfo_ TTableCompoCellInfo;

struct TListViewInfo_
{
  slim_int *fIndicatorIDArray;
  slim_int fMaxPageNum;
  slim_int *fNumKeyActionIDArray;
  slim_int *fNumKeyNormalImageIDArray;
  slim_int *fNumKeySelectedImageIDArray;
  slim_int fItemNumPerPage;
  slim_int fActiveIndicatorSkinID;
  slim_int fNonactiveIndicatorSkinID;
  slim_int fNextPageActionID;
  slim_int fPrevPageActionID;
  slim_int fCloseActionID;
  slim_int fNextItemActionID;
  slim_int fPrevItemActionID;
  slim_int fExecuteActionID;
  slim_int fOpenMenuActionID;
  slim_int *fColumnWidthArray;
  slim_int fColumnNum;
  slim_int fRowHeight;
  slim_int fCyclicNumCount;
  slim_bool fNumKeyIsSelectOnly;
  slim_bool fClickIsSelectOnly;
  slim_bool fDisplayMenuColumn;
  slim_int fMenuColumnIndex;
  slim_int fMenuNormalImageID;
  slim_int fMenuSelectedImageID;
  slim_int fTableCompoSkinID;
  slim_int fTableCompoBehaindSkinID;
  slim_bool (*fTableCompoSetupProc)(TWnd, slim_int, slim_int, TTableCompoCellInfo *);
  void (*fExecuteAtProc)(slim_opaque, slim_opaque, slim_int);
  void (*fOpenMenuAtProc)(slim_opaque, slim_opaque, slim_int);
  void (*fUpdateInfoAtProc)(slim_opaque, slim_opaque, slim_int);
  slim_int (*fItemNumProc)(slim_opaque, slim_opaque);
  void (*fCloseProc)(slim_opaque);
  void (*fProcessEmptyListProc)(slim_opaque);
};

struct TLabelCompoMode_
{
  slim_int fHAlign;
  slim_int fVAlign;
};

struct __attribute__((aligned(8))) TSymCipherInfo_
{
  slim_int fAlgo;
  slim_bool fEncrypt;
  slim_byte *fKey;
  slim_int fKeyLen;
  slim_byte *fIV;
  slim_int fBlkSize;
};

struct __attribute__((aligned(8))) TSerializeReadWriteVal_::$C3AC012EC1C3E9CB3F3DFC6DFD2A9316
{
  slim_byte *fData;
  slim_int fLength;
};

struct TSerializeReadWriteVal_::$48C108471E6ACBDDD91BEC047FEE1AF3
{
  slim_char *fStr;
  slim_int fLength;
  slim_int fCharSet;
};

union TSerializeReadWriteVal_
{
  slim_int uInt;
  slim_bool uBool;
  TSerializeReadWriteVal_::$C3AC012EC1C3E9CB3F3DFC6DFD2A9316 uBytes;
  TSerializeReadWriteVal_::$48C108471E6ACBDDD91BEC047FEE1AF3 uSS;
};

typedef TTabbedMenuPageItemInfo_ TTabbedMenuPageItemInfo;

struct __attribute__((aligned(8))) TTabbedMenuPageInfo_
{
  slim_int fActivateActionID;
  TTabbedMenuPageItemInfo *fItemInfoArray;
  slim_int fItemNum;
};

union TTableCompoCellInfo_::$0EDD47D18573B790A862614AF412F0D7
{
  TString fTS;
  slim_char *fSS;
};

struct TTableCompoCellInfo_
{
  slim_int fIndent;
  slim_int fFlag;
  slim_int fStringLength;
  TTableCompoCellInfo_::$0EDD47D18573B790A862614AF412F0D7 fString;
  TWWWPixelMap *fImage;
  TColor fBackgroundColor;
  TColor fItemTextColor;
};

struct TTabbedMenuPageItemInfo_
{
  slim_int fNormalImageRscID;
  slim_int fSelectedImageRscID;
  slim_int fDisabledImageRscID;
  slim_int fCaptionRscID;
  slim_int fMessageRscID;
  slim_int fActionID;
};

typedef iTContent_ iTContent;

typedef TStringFormatCookie_ TStringFormatCookie;

struct TStringFormatCookie_
{
  slim_char *fBuf;
  slim_int fOffset;
  slim_int fValidBufLen;
};

typedef TFocusMoveInfo_ TFocusMoveInfo;

struct TFocusMoveInfo_
{
  TBrowserPane *fFocusedPane;
  TBrowserPane *fPane[4];
  slim_pix fFocusedEventTarget;
  slim_bool fFocusedTargetViewable;
  TRect fFocusedTargetRect;
  slim_pix fEventTarget[4];
  slim_bool fTargetViewable[4];
  TRect fTargetRect[4];
};

typedef TAppBrowserClass_ TAppBrowserClass;

typedef TRepository_ TRepository;

typedef TBrowserLib_ TBrowserLib;

typedef slim_bool (*UIEventHandler_FilterProc)(TUIEventHandler_ *, TUIEvent_ *);

typedef slim_bool (*UIEventHandler_HandleProc)(TUIEventHandler_ *, TUIEvent_ *);

struct TUIEventHandler_
{
  TBrowser *fBrowser;
  slim_int fFlag;
  UIEventHandler_FilterProc fDOMDefaultEventFilterProc[10];
  UIEventHandler_FilterProc fAppDefaultEventFilterProc[10];
  UIEventHandler_HandleProc fAppDefaultEventHandleProc[10];
  slim_pix fNextEventParamHolderPix;
};

typedef TUIEventHandler_ TUIEventHandler;

typedef slim_bool (*appbrowser_command_proc)(TAppBrowser, TBrowserCommand *);

typedef slim_opaque TAppBrowserFrame;

typedef slim_opaque TAppBrowserView;

struct TAppBrowserClass_
{
  TApplicationClass fBase;
  TBrowser *fBrowser;
  TRepository *fRepository;
  TBrowserLib *fBrowserLib;
  TUIEventHandler fUIEventHandler;
  appbrowser_command_proc fCommandProc;
  slim_int fMemoryReserveSize;
  slim_handle fMemoryCrisisReserve;
  slim_int fMemoryReserveSizeCore;
  slim_handle fMemoryCrisisReserveCore;
  slim_int fCacheScale;
  slim_int fFlag;
  slim_int fMaxWindows;
  slim_bool fMemoryCrisis;
  slim_int fDocStartCounter;
  TString fSearchTextText;
  slim_int fSearchTextCharSet;
  slim_int fSearchTextFlag;
  slim_int fAutoLoadImageBound;
  slim_int fCookieChecksum;
  slim_int fVisitListChecksum;
  TAppBrowserFrame (*fFrameWindowNew)(TAppBrowser, TRect *, slim_bool, TAppBrowserView *);
  void (*fFrameWindowDelete)(TAppBrowserFrame, TAppBrowserView);
  void (*fBrowserWindowNext)(TAppBrowserView, slim_int);
  TAWSWindow (*fBrowserWindowNew)(TAppBrowser, TAppBrowserView, slim_int);
  void (*fBrowserWindowDelete)(TAWSWindow);
  slim_int (*fBrowserWindowCount)(TAppBrowserView);
  TAWSWindow (*fGetCurrentWindow)(TAppBrowserView, slim_int *);
  TAWSWindow (*fGetWindowNth)(TAppBrowserView, slim_int);
  TBrowserWindow *(*fGetBrowserWindow)(TAWSWindow);
  TBrowserPane *(*fGetBrowserPane)(TAWSPane);
  void (*fViewWindowResize)(TAppBrowser, TAppBrowserView, TRect *);
  void (*fGetWindowMag)(TAWSWindow, slim_int *, slim_int *);
  void (*fSetWindowMag)(TAWSWindow, slim_int, slim_int);
  slim_bool (*fImageSelectMode)(TAWSWindow);
  slim_bool (*fSetImageSelectMode)(TAWSWindow, slim_bool);
  void (*fPaneSetFocus)(TAWSWindow, TAWSPane);
  void (*fSetNeedRenovate)(TAWSWindow, slim_bool);
  slim_bool (*fGetNeedRenovate)(TAWSWindow);
};

struct TMultiString_
{
  slim_int fSize;
  TString *fArray;
};

union TProfileKey_::$0EE0D537397EE57B0F24EC0A8CE8F369
{
  slim_int fInteger;
  TString fString;
  slim_vhandle fBinary;
  TMultiString_ fMultiString;
};

struct TProfileKey_
{
  TProfileKey_ *fNext;
  slim_int fType;
  TString fKeyName;
  slim_int fSize;
  TProfileKey_::$0EE0D537397EE57B0F24EC0A8CE8F369 fValue;
};

struct TProfileSection_
{
  TProfileSection_ *fParent;
  TProfileSection_ *fChildren;
  TProfileSection_ *fNext;
  TString fSectionName;
  slim_int fSize;
  slim_int fSizeToLoad;
  TProfileKey_ fKeys;
};

struct TProfile_::$FB174E08A886CC0BE95295376B0097E7
{
  TProfile_ *fProfile;
  TProfileSection_ *fCurrentSection;
};

struct TProfile_
{
  slim_int fUseCheckSum;
  slim_bool fDirtyFlag;
  TProfileSection_ fSectionList;
  TProfile_::$FB174E08A886CC0BE95295376B0097E7 fSectionRef;
  slim_opaque (*fOpenFileProc)(slim_char *, slim_int);
  void (*fCloseFileProc)(slim_opaque);
  slim_int (*fWriteFileProc)(slim_opaque, void *, slim_int);
  slim_int (*fReadFileProc)(slim_opaque, void *, slim_int);
};

typedef TProfile_ TProfile;

struct TRepository_
{
  TProfile fProfile;
  TProfile fVolatile;
  TProfile *fUserProf;
  TProfile *fVUserProf;
  TProfile fUserWork[2];
  TProfile fVUserWork[2];
  slim_int fCurrentUser;
  slim_int fMaxUsers;
  TTree fTree;
  slim_pix fCollection;
  slim_pix fSignal;
};

typedef TBrowserTimerImpl_ TBrowserTimerImpl;

typedef slim_opaque TBrowserTimer;

typedef void (*BrowserMain_RecoverMemoryProc)(TBrowserMain *, slim_int);

typedef slim_int (*BrowserMain_PreProgressProc)(TBrowserMain *);

typedef slim_int (*BrowserMain_PostProgressProc)(TBrowserMain *);

struct TBrowserMain_
{
  TBrowser *fBrowser;
  TDataArena *fArena;
  TBrowserTimerImpl *fTimerImpl;
  slim_int fFlag;
  TBrowserTimer fTimer;
  slim_pix fDefaultHandler;
  slim_opaque fUserData;
  BrowserMain_RecoverMemoryProc fRecoverMemory;
  BrowserMain_PreProgressProc fPreProgress;
  BrowserMain_PostProgressProc fPostProgress;
};

typedef TBrowserMain_ TBrowserMain;

typedef slim_int (*BrowserCommandHandler_HandleCommandProc)(TBrowserCommandHandler *, TBrowserCommand *, TBrowserReply *);

struct TBrowserCommandHandler_
{
  TBrowser *fBrowser;
  BrowserCommandHandler_HandleCommandProc fHandleCommand;
  slim_opaque fUserData;
};

typedef TBrowserCommandHandler_ TBrowserCommandHandler;

typedef void (*BrowserTimer_TimerProc)(slim_opaque);

typedef TBrowserTimer (*BrowserTimerImpl_SetTimerProc)(TBrowserTimerImpl *, slim_int, BrowserTimer_TimerProc, slim_opaque);

typedef slim_bool (*BrowserTimerImpl_KillTimerProc)(TBrowserTimerImpl *, TBrowserTimer);

struct TBrowserTimerImpl_
{
  BrowserTimerImpl_SetTimerProc fSetTimer;
  BrowserTimerImpl_KillTimerProc fKillTimer;
  slim_opaque fUserData;
};

struct TBrowserLibTimer_
{
  BrowserTimer_TimerProc fProc;
  slim_opaque fArg;
  slim_int fTimeout;
  slim_int fLast;
};

typedef TBrowserLibCallBacks_ TBrowserLibCallBacks;

typedef TBrowserLibBrCmdHandler_ TBrowserLibBrCmdHandler;

struct TBrowserLib_VisitList_
{
  TString fVisitListName;
  slim_int fVisitListChecksum;
  slim_bool fAutoSave;
};

typedef TBrowserLib_VisitList_ TBrowserLib_VisitList;

struct __attribute__((aligned(8))) TBrowserLibProperty_
{
  TString fUserAgent;
  TString fFileSchemePrefix;
  TBrowserLib_VisitList fVisitList;
  TString fAuthFileName;
  TString fCookieFileName;
  slim_int fMovePageHScroll;
  slim_int fMoveHScroll;
  slim_int fMovePageWScroll;
  slim_int fMoveWScroll;
  slim_bool fHelperDownloadConsume;
};

typedef TBrowserLibProperty_ TBrowserLibProperty;

struct TBrowserLibReplyRequestAuth_
{
  TString fPass;
  TString fUser;
};

typedef TBrowserLibReplyRequestAuth_ TBrowserLibReplyRequestAuth;

struct TBrowserLibReplyRequestJSPrompt_
{
  TString fValue;
};

typedef TBrowserLibReplyRequestJSPrompt_ TBrowserLibReplyRequestJSPrompt;

struct __attribute__((aligned(8))) TBrowserLibReplyRequestConnection_
{
  TContent *fContent;
  TBrowserWindow *fWindow;
  slim_int fPreferedContentType;
};

typedef TBrowserLibReplyRequestConnection_ TBrowserLibReplyRequestConnection;

struct TBrowserLibReplyRequestRedirect_
{
  TURLString fNewURL;
  TURLString fURL;
};

typedef TBrowserLibReplyRequestRedirect_ TBrowserLibReplyRequestRedirect;

typedef TBrowserLibRequestConnectionPaneList_ TBrowserLibRequestConnectionPaneList;

struct __attribute__((aligned(8))) TBrowserLibReplyRequestHistoryBackForw_
{
  TBrowserLibRequestConnectionPaneList *fPaneList;
  slim_int fPaneListLength;
};

typedef TBrowserLibReplyRequestHistoryBackForw_ TBrowserLibReplyRequestHistoryBackForw;

struct TBrowserLibReplyRequestOpenWindow_
{
  TFixedString fTargetname;
  TFixedString fFeature;
};

typedef TBrowserLibReplyRequestOpenWindow_ TBrowserLibReplyRequestOpenWindow;

union TBrowserLibReply_::$D53E3D8C0863653DAD4C7422D1482A30
{
  TBrowserLibReplyRequestAuth RequestAuth;
  TBrowserLibReplyRequestJSPrompt RequestJSPrompt;
  TBrowserLibReplyRequestConnection RequestConnection;
  TBrowserLibReplyRequestRedirect RequestRedirect;
  TBrowserLibReplyRequestHistoryBackForw RequestHistoryBackForw;
  TBrowserLibReplyRequestOpenWindow RequestOpenWindow;
};

struct TBrowserLibReply_
{
  TBrowserLibReply_::$D53E3D8C0863653DAD4C7422D1482A30 u;
};

typedef TBrowserLibReply_ TBrowserLibReply;

typedef TBrowserLibWindow_ TBrowserLibWindow;

typedef TBrowserLibDownloadInfo_ TBrowserLibDownloadInfo;

typedef TBrowserLibNotifyUIGuidance_ TBrowserLibNotifyUIGuidance;

typedef void (*TBrowserLib_NotifyUIGuidanceProc)(TBrowserLib *, TBrowserLibNotifyUIGuidance *);

typedef void (*TBrowserLib_WakeUpCallBackProc)(TBrowserLib *);

typedef slim_bool (*TBrowserLib_Main_InitializeProc)(TBrowserMain *, TBrowser *, TBrowserTimerImpl *, slim_opaque);

typedef TBrowserLibNotifyStateChange_ TBrowserLibNotifyStateChange;

typedef void (*TBrowserLib_NotifyStateChangeProc)(TBrowserLib *, TBrowserLibNotifyStateChange *);

struct TBrowserLibPageThumbnail_;

typedef struct TBrowserLibPageThumbnail_ TBrowserLibPageThumbnail;

typedef slim_int (*TBrowserLib_PageSaveFeedProc)(TBrowserLib *, slim_opaque, slim_int, slim_byte **, slim_int *);

typedef void (*TBrowserLib_PageSaveFeedEndProc)(TBrowserLib *, slim_opaque, slim_int);

struct iTPageThumbnailMaker_;

typedef struct iTPageThumbnailMaker_ **TPageThumbnailMaker;

struct TBrowserLib_
{
  TBrowser *fBrowser;
  TBrowserMain fBrowserMain;
  TBrowserCommandHandler fBrowserCommandHandler;
  TBrowserTimerImpl fTimerImpl;
  TBrowserLibTimer_ fTimers[34];
  TBrowserLibCallBacks *fCallBacks;
  TBrowserLibBrCmdHandler *fBrCmdHandlers;
  THTTPChannel_HeaderReceivedCallback fHTTPHeaderReceivedCallback;
  slim_opaque fHTTPHeaderReceivedCallbackAux;
  TBrowserLibProperty fProperty;
  slim_int fState;
  slim_int fSuspend;
  TBrowserCommand *fCmd;
  TBrowserReply fCmdReply;
  TContentRequest *fContentRequest;
  TURLString fRequestedURL;
  slim_int fReplyCheck;
  slim_int fReplyStatus;
  TBrowserLibReply fReply;
  TBrowserLibWindow *fLibWindow;
  TBrowserLibDownloadInfo *fDownloadInfo;
  slim_opaque fCarrier;
  TFocusHandler fDefaultFocusHandler;
  TFocusHandler *fFocusHandler;
  TBrowserLib_NotifyUIGuidanceProc fNotifyUIGuidanceProc;
  TBrowserLib_WakeUpCallBackProc fWakeUpCallBackProc;
  TBrowserLib_Main_InitializeProc fMainInitializeProc;
  TBrowserLib_NotifyStateChangeProc fStateChangeProc;
  slim_opaque fEnhancingFunc;
  slim_int fMaxRefresh;
  slim_int fCacheType;
  TUIEventHandler *fUIEventHandler;
  UIEventHandler_FilterProc fAppEventFilterProc[10];
  UIEventHandler_HandleProc fAppEventHandleProc[10];
  TBrowserLibPageThumbnail *fPageThumbnail;
  BrowserWindow_InitProc fWindowDefaultInitProc;
  BrowserWindow_TidyProc fWindowDefaultTidyProc;
  BrowserWindow_InitProc fViewerWindowDefaultInitProc;
  BrowserWindow_TidyProc fViewerWindowDefaultTidyProc;
  TSavedPageDataFeeder fSavedPageDataFeeder;
  TBrowserLib_PageSaveFeedProc fFeedProc;
  TBrowserLib_PageSaveFeedEndProc fFeedEndProc;
  BrowserHistory_UpdateProc fDefaultHistoryUpdateProc;
  slim_bool fVstPageThumbnailEnable;
  slim_opaque fVstPageThumbnailTaskID;
  TPageThumbnailCache fVstPageThumbnailCache;
  TPageThumbnailMaker fVstPageThumbnailMaker;
  slim_opaque fUserData;
};

struct TUIEvent_::$E9DC5E828EF3E2B8DDE363BDAF177351::$19BE784CE3AF89C121CED5AFCD9AE4A5
{
  slim_int fKeyCode;
  slim_int fKeyChar;
};

struct TUIEvent_::$E9DC5E828EF3E2B8DDE363BDAF177351::$90C207B6CE11F1745A9BC7A31AB62C8D
{
  slim_int fButton;
  slim_int fX;
  slim_int fY;
  slim_int fWheelDelta;
};

union TUIEvent_::$E9DC5E828EF3E2B8DDE363BDAF177351
{
  TUIEvent_::$E9DC5E828EF3E2B8DDE363BDAF177351::$19BE784CE3AF89C121CED5AFCD9AE4A5 KeyEvent;
  TUIEvent_::$E9DC5E828EF3E2B8DDE363BDAF177351::$90C207B6CE11F1745A9BC7A31AB62C8D MouseEvent;
};

struct TUIEvent_
{
  slim_int fListenerType;
  TBrowser *fBrowser;
  TBrowserWindow *fBrowserWindow;
  TBrowserPane *fBrowserPane;
  slim_pix fPix;
  slim_pix fEventTargetPix;
  slim_pix fParamHolderPix;
  slim_int fEventType;
  slim_int fEventFlag;
  slim_int fModifier;
  slim_int fDetail;
  TUIEvent_::$E9DC5E828EF3E2B8DDE363BDAF177351 u;
};

typedef TBrowserLibNotifyError_ TBrowserLibNotifyError;

typedef TBrowserLibNotifyContentError_ TBrowserLibNotifyContentError;

typedef TBrowserLibRequestConnection_ TBrowserLibRequestConnection;

typedef TBrowserLibRequestExScheme_ TBrowserLibRequestExScheme;

typedef TBrowserLibRequestAuth_ TBrowserLibRequestAuth;

typedef TBrowserLibRequestRedirectConfirm_ TBrowserLibRequestRedirectConfirm;

typedef TBrowserLibRequestCookieConfirm_ TBrowserLibRequestCookieConfirm;

typedef TBrowserLibRequestHistoryBackForwConfirm_ TBrowserLibRequestHistoryBackForwConfirm;

typedef TBrowserLibRequestServerCertConfirm_ TBrowserLibRequestServerCertConfirm;

typedef TBrowserLibRequestClientCertSelect_ TBrowserLibRequestClientCertSelect;

typedef TBrowserLibRequestStartScript_ TBrowserLibRequestStartScript;

typedef TBrowserLibHelper_ TBrowserLibHelper;

typedef TBrowserLibHelperData_ TBrowserLibHelperData;

typedef TBrowserLibHelperDone_ TBrowserLibHelperDone;

typedef TBrowserLibRequestJSAlert_ TBrowserLibRequestJSAlert;

typedef TBrowserLibRequestJSConfirm_ TBrowserLibRequestJSConfirm;

typedef TBrowserLibRequestJSPrompt_ TBrowserLibRequestJSPrompt;

typedef TBrowserLibRequestOpenWindow_ TBrowserLibRequestOpenWindow;

typedef TBrowserLibRequestCloseWindow_ TBrowserLibRequestCloseWindow;

typedef TBrowserLibRequestDeleteWindow_ TBrowserLibRequestDeleteWindow;

typedef TBrowserLibNotifyInputFormatError_ TBrowserLibNotifyInputFormatError;

typedef TBrowserLibNotifyXMLSAXError_ TBrowserLibNotifyXMLSAXError;

typedef TBrowserLibRequestRequestPost_ TBrowserLibRequestRequestPost;

typedef TBrowserLibNotifyPaneState_ TBrowserLibNotifyPaneState;

typedef TBrowserLibNotifyWindowState_ TBrowserLibNotifyWindowState;

typedef TBrowserLibNotifyFrameSetState_ TBrowserLibNotifyFrameSetState;

typedef TBrowserLibRequestSendHTTPRequest_ TBrowserLibRequestSendHTTPRequest;

typedef TBrowserLibNotifyContentState_ TBrowserLibNotifyContentState;

typedef TBrowserLibNotifyStreamState_ TBrowserLibNotifyStreamState;

typedef TBrowserLibNotifyChangeBrowsingMode_ TBrowserLibNotifyChangeBrowsingMode;

struct TBrowserLibCallBacks_
{
  void (*fNotifyErrorProc)(TBrowserLib *, TBrowserLibNotifyError *);
  void (*fNotifyContentErrorProc)(TBrowserLib *, TBrowserLibNotifyContentError *);
  void (*fRequestConnectionProc)(TBrowserLib *, TBrowserLibRequestConnection *);
  void (*fRequestExSchemeRequestProc)(TBrowserLib *, TBrowserLibRequestExScheme *);
  void (*fRequestAuthProc)(TBrowserLib *, TBrowserLibRequestAuth *);
  void (*fRequestRedirectConfirmProc)(TBrowserLib *, TBrowserLibRequestRedirectConfirm *);
  void (*fRequestCookieConfirmProc)(TBrowserLib *, TBrowserLibRequestCookieConfirm *);
  void (*fRequestHistoryBackForwConfirmProc)(TBrowserLib *, TBrowserLibRequestHistoryBackForwConfirm *);
  void (*fRequestServerCertConfirmProc)(TBrowserLib *, TBrowserLibRequestServerCertConfirm *);
  void (*fRequestClientCertSelectProc)(TBrowserLib *, TBrowserLibRequestClientCertSelect *);
  void (*fRequestStartScriptProc)(TBrowserLib *, TBrowserLibRequestStartScript *);
  void (*fHelperProc)(TBrowserLib *, TBrowserLibHelper *);
  void (*fHelperDataProc)(TBrowserLib *, TBrowserLibHelperData *);
  void (*fHelperDoneProc)(TBrowserLib *, TBrowserLibHelperDone *);
  void (*fRequestJSAlertProc)(TBrowserLib *, TBrowserLibRequestJSAlert *);
  void (*fRequestJSConfirmProc)(TBrowserLib *, TBrowserLibRequestJSConfirm *);
  void (*fRequestJSPromptProc)(TBrowserLib *, TBrowserLibRequestJSPrompt *);
  void (*fRequestOpenWindowProc)(TBrowserLib *, TBrowserLibRequestOpenWindow *);
  void (*fRequestCloseWindowProc)(TBrowserLib *, TBrowserLibRequestCloseWindow *);
  void (*fRequestDeleteWindowProc)(TBrowserLib *, TBrowserLibRequestDeleteWindow *);
  void (*fNotifyInputFormatErrorProc)(TBrowserLib *, TBrowserLibNotifyInputFormatError *);
  void (*fNotifyXMLSAXErrorProc)(TBrowserLib *, TBrowserLibNotifyXMLSAXError *);
  void (*fRequestPostProc)(TBrowserLib *, TBrowserLibRequestRequestPost *);
  void (*fNotifyPaneStateProc)(TBrowserLib *, TBrowserLibNotifyPaneState *);
  void (*fNotifyWindowStateProc)(TBrowserLib *, TBrowserLibNotifyWindowState *);
  void (*fNotifyFrameSetStateProc)(TBrowserLib *, TBrowserLibNotifyFrameSetState *);
  void (*fRequestSendHTTPRequestProc)(TBrowserLib *, TBrowserLibRequestSendHTTPRequest *);
  void (*fNotifyContentStateProc)(TBrowserLib *, TBrowserLibNotifyContentState *);
  void (*fNotifyStreamStateProc)(TBrowserLib *, TBrowserLibNotifyStreamState *);
  void (*fNotifyChangeBrowsingModeProc)(TBrowserLib *, TBrowserLibNotifyChangeBrowsingMode *);
};

struct TBrowserLibBrCmdHandler_
{
  TBrowserLibBrCmdHandler_ *fNext;
  slim_int fCode;
  slim_opaque fContext;
  slim_int (*fBrowserLibBrCmdProc)(slim_opaque, TBrowserCommand *, TBrowserReply *);
};

struct TBrowserLibRequestConnectionPaneList_
{
  TBrowserPane *fPane;
  slim_char *fURL;
  slim_char *fNextURL;
};

struct TBrowserLibWindowProperty_
{
  slim_int fMovePageHScroll;
  slim_int fMovePageWScroll;
  slim_int fMoveHScroll;
  slim_int fMoveWScroll;
};

typedef TBrowserLibWindowProperty_ TBrowserLibWindowProperty;

struct __attribute__((aligned(8))) TBrowserLibWindow_
{
  TBrowserWindow *fBrowserWindow;
  TBrowserLibWindow *fNext;
  slim_int fState;
  slim_int fStateChange;
  slim_bool fIsRootDocSecure;
  slim_int fPreferedContentType;
  TBrowserPageSaveInfo *fPageSaveInfo;
  TBrowserPageSaveInfo *fPageLoadInfo;
  slim_int fCountRefresh;
  slim_opaque fEnhancingData;
  slim_int fUIGuidance;
  slim_pix fKeepObjectElement;
  slim_bool fRenovate;
  TFocusHandler *fFocusHandler;
  slim_int fWindowStateFlag;
  TBrowserLibWindowProperty fProperty;
};

struct __attribute__((aligned(8))) TBrowserLibDownloadInfo_
{
  TBrowserLibDownloadInfo *fNext;
  slim_int fId;
  slim_int fType;
  slim_pix fHelperPix;
  slim_bool fSuspending;
  slim_bool fCache;
  slim_int fRcv;
  slim_bool fIsLockd;
  slim_int fSaved;
  slim_opaque fUserData;
  slim_bool fHelperDownloadConsume;
};

struct __attribute__((aligned(8))) TBrowserLibNotifyUIGuidance_
{
  TBrowserWindow *fWindow;
  slim_int fValue;
};

struct TBrowserLibNotifyStateChange_
{
  TBrowserWindow *fWindow;
  slim_int fType;
  slim_bool fValue;
};

struct TBrowserLibNotifyError_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_int fType;
  slim_int fCode;
  slim_char *fURL;
};

struct TBrowserLibNotifyContentError_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_int fCode;
  slim_int fStatus;
  slim_int fBy;
  slim_char *fURL;
  slim_int fMethod;
  slim_bool fInclusion;
};

struct TBrowserLibRequestConnection_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_int fBy;
  slim_char *fURL;
  slim_bool fConnect;
  slim_int fMethod;
  slim_int fEventType;
  slim_int fPaneListLength;
  TBrowserLibRequestConnectionPaneList *fPaneList;
};

struct __attribute__((aligned(8))) TBrowserLibRequestExScheme_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_char *fURL;
  slim_int fSubtype;
};

struct TBrowserLibRequestAuth_
{
  slim_char *fRealm;
  slim_char *fURL;
  slim_char *fUser;
  slim_char *fPass;
  slim_int fTarget;
  slim_int fType;
  slim_char *fChallenge;
};

struct __attribute__((aligned(8))) TBrowserLibRequestRedirectConfirm_
{
  slim_char *fURL;
  slim_char *fNewURL;
  slim_int fStatus;
  slim_bool fInclusion;
  slim_int fMethod;
};

struct TBrowserLibRequestCookieConfirm_
{
  THTTPCookies *fCookies;
  slim_char *fURL;
  slim_char *fCookieString;
};

struct TBrowserLibRequestHistoryBackForwConfirm_
{
  TBrowserWindow *fWindow;
  slim_char *fURL;
};

struct TBrowserLibRequestServerCertConfirm_
{
  slim_int fVerifyResult;
  TCertList fCertList;
};

struct TBrowserLibRequestClientCertSelect_
{
  TClientCertList fCertList;
};

struct TBrowserLibRequestStartScript_
{
  TBrowserPane *fPane;
};

struct __attribute__((aligned(8))) TBrowserLibDownloadParamInfo_
{
  slim_int fType;
  slim_char *fHTTPHeader;
  slim_char *fURL;
  slim_bool fIsChunk;
  slim_int fStatusCode;
  slim_int fMethod;
};

typedef TBrowserLibDownloadParamInfo_ TBrowserLibDownloadParamInfo;

struct TBrowserLibHelper_
{
  TBrowserLibDownloadParamInfo fDownloadInfo;
};

struct __attribute__((aligned(8))) TBrowserLibHelperData_
{
  slim_int fId;
  slim_int fLen;
  slim_byte *fData;
  slim_int fReceivedLength;
};

struct TBrowserLibHelperDone_
{
  slim_int fId;
  slim_bool fCompleted;
  slim_int fCode;
};

struct TBrowserLibRequestJSAlert_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  TDOMBind *fBind;
  slim_char *fMessage;
  TInvokerInfo fInvokerinfo;
};

struct TBrowserLibRequestJSConfirm_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  TDOMBind *fBind;
  slim_char *fMessage;
  TInvokerInfo fInvokerinfo;
};

struct TBrowserLibRequestJSPrompt_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  TDOMBind *fBind;
  slim_char *fMessage;
  slim_char *fValue;
  TInvokerInfo fInvokerinfo;
};

struct __attribute__((aligned(8))) TBrowserLibRequestOpenWindow_
{
  TBrowserPane *fSrcpane;
  slim_char *fTargetname;
  slim_char *fFeature;
  slim_int fBy;
  slim_bool fWithrequest;
  TContentRequest fContentrequest;
  TInvokerInfo fInvokerinfo;
  TDOMBind *fBind;
  slim_bool fIsUnwantedPopup;
};

struct TBrowserLibRequestCloseWindow_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fSrcpane;
  slim_int fBy;
  TInvokerInfo fInvokerinfo;
};

struct TBrowserLibRequestDeleteWindow_
{
  TAWSWindow fAwswindow;
  TBrowserWindow *fWindow;
};

struct TBrowserLibNotifyInputFormatError_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_char *fFormat;
  slim_char *fValue;
};

struct TBrowserLibNotifyXMLSAXError_
{
  TSAXParseException *fException;
};

struct TBrowserLibRequestRequestPost_
{
  slim_char *fURL;
  TPostData fPostdata;
};

struct __attribute__((aligned(8))) TBrowserLibNotifyPaneState_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_int fState;
};

struct __attribute__((aligned(8))) TBrowserLibNotifyWindowState_
{
  TBrowserWindow *fWindow;
  slim_int fState;
};

struct __attribute__((aligned(8))) TBrowserLibNotifyFrameSetState_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_int fState;
};

struct TBrowserLibRequestSendHTTPRequest_
{
  slim_char *fURL;
  slim_int fMethod;
  slim_bool fRePost;
  TPostData fPostData;
};

struct __attribute__((aligned(8))) TBrowserLibNotifyContentState_
{
  TBrowserWindow *fWindow;
  TBrowserPane *fPane;
  slim_char *fURL;
  slim_int fState;
};

struct __attribute__((aligned(8))) TBrowserLibNotifyStreamState_
{
  TBrowserWindow *fWindow;
  slim_char *fURL;
  slim_int fState;
};

struct TBrowserLibNotifyChangeBrowsingMode_
{
  TBrowserWindow *fWindow;
};

typedef TWave_ TWave;

typedef slim_int TFont;

struct TScrollBarStyle_
{
  slim_int fScrollSize;
  slim_int fSeparatorWidth;
  slim_int fButtonBorder;
  slim_int fKnobBorder;
  TColor fScrollSeparatorColor;
  TColor fScrollShaftColor;
  TColor fScrollHighlightShaftColor;
  TColor fScrollNoKnobShaftColor;
  TColor fScrollKnobColor;
  TColor fScrollButtonColor;
  TColor fScrollArrowColor;
  TColor fScrollDimArrowColor;
  TColor fScrollCrossAreaColor;
  slim_int fScrollShowButton;
  slim_int fScrollKnobMinSize;
  slim_bool fScrollAutoHideKnob;
  slim_int fScrollBarAlignment;
  slim_int fScrollRepeatInitialDelay;
  slim_int fScrollRepeatDelay;
};

typedef TScrollBarStyle_ TScrollBarStyle;

struct TGUIStyle_
{
  TColor fCompoFocusColor;
  TColor fCompoNonFocusColor;
  slim_int fFocusFrameThickness;
  TColor fDesktopColor;
  slim_int fKeyRepeatInitialDelay;
  slim_int fKeyRepeatDelay;
  TScrollBarStyle fScroll;
};

typedef TGUIStyle_ TGUIStyle;

typedef TOpaqueArray TScreenArray;

typedef TScreen_ TScreen;

typedef TWndClass_ TWndClass;

struct TWndClassHeader_
{
  slim_int fOverridedClass;
  TFixedString fClassName;
  TWndClass *fWindowClass;
};

typedef TWndClassHeader_ TWndClassHeader;

typedef slim_int TWndClassHandle;

typedef TEvent_ TEvent;

typedef slim_bool (*WndBehaviorProc)(TWnd, TEvent *);

struct TWndClass_
{
  TWndClassHandle fMyClass;
  TWndClassHandle fBaseClass;
  slim_opaque fClassStyle;
  slim_opaque fClassMode;
  slim_int fAuxDataSize;
  WndBehaviorProc fBehaviorProc;
};

struct __attribute__((aligned(8))) TWndScrollState_
{
  TWnd fWnd;
  slim_bool fDragging;
  slim_bool fHorizontal;
  slim_int fStartMinPos;
  slim_int fStartMaxPos;
  slim_int fStartPoint;
  slim_int fStartLessShaftSize;
  slim_int fShaftSize;
  slim_int fVirtualKnobSize;
  slim_int fRepeating;
  TRect fRepeatingRect;
};

typedef TWndScrollState_ TWndScrollState;

struct TWndBorderState_
{
  TWnd fWnd;
  slim_bool fDragging;
  slim_int fHit;
  slim_int fStartX;
  slim_int fStartY;
  slim_int fX;
  slim_int fY;
};

typedef TWndBorderState_ TWndBorderState;

typedef TSpecList TCursorShapeList;

struct TCursorState_
{
  slim_int fMode;
  slim_int fFlag;
  slim_int fWidth;
  slim_int fHeight;
  slim_int fShowCount;
  slim_int fCurrentShape;
  slim_int fX;
  slim_int fY;
};

typedef TCursorState_ TCursorState;

struct TCursorShape_
{
  slim_int fShape;
  slim_int fHotspotX;
  slim_int fHotspotY;
  TWWWPixelMap *fPixelMap;
  slim_opaque fData;
};

typedef TCursorShape_ TCursorShape;

typedef EventCommandProcList_ EventCommandProcList;

typedef slim_opaque TScreenContext;

typedef TFontMetrics_ TFontMetrics;

struct TWaveSystemPeerInterface_
{
  slim_int (*fGetNextEvent)(TEvent *, slim_int);
  slim_int (*fFindFont)(TScreenContext, slim_char *, TFontStyle *, slim_int);
  void (*fGetFontInfo)(TScreenContext, slim_int, TFontMetrics *);
  slim_int (*fGetTextWidth)(TScreenContext, slim_char *, slim_int, slim_int);
  void (*fGetMousePos)(TScreenContext, slim_int *, slim_int *);
  slim_int (*fGetModifiers)(TScreenContext);
  slim_opaque (*fCreateCursorShape)(TScreenContext, void *, void *, slim_int, slim_int, slim_int, slim_int);
  void (*fDisposeCursorShape)(TScreenContext, slim_opaque);
  void (*fSetCursorShape)(TScreenContext, slim_opaque);
  void (*fShowCursor)(TScreenContext, slim_bool);
  void (*fSetCursorPos)(TScreenContext, slim_int, slim_int);
};

typedef TWaveSystemPeerInterface_ TWaveSystemPeerInterface;

typedef TSpecArray TSkinCache;

struct TWave_
{
  TString fFontFamily;
  TFontStyle fFontStyle;
  TFont fFont;
  slim_int fCharset;
  TGUIStyle fGUIStyle;
  TScreenArray fScreens;
  TScreen *fPrimaryScreen;
  TWWWPixelMapClassPool fWWWPixelMapClassPool;
  TWndClassHeader fWndClasses[48];
  TWndClass fGenericWndClass;
  TWndClassHandle fGenericWndClassHandle;
  TWnd fWndTree;
  TWnd fActiveDesktopWnd;
  TWnd fActiveWnd;
  TWnd fFocusWnd;
  TWnd fCaptureWnd;
  TWnd fFrameCaptureWnd;
  slim_bool fCancelModalState;
  slim_opaque fCancelModalStateResult;
  TWndScrollState fScrollState;
  TWndBorderState fBorderState;
  TCursorShapeList fCursorShapes;
  TCursorState fCursorState;
  TCursorShape fCursorShape;
  slim_int fCursorDisplayed;
  TWWWPixelMap fCursorBackPixels;
  slim_bool fSuspending;
  TSpecList fEventQueueList;
  TSpecList fWndTimerList;
  slim_int fWndTimerListSemaphore;
  slim_int fLastMouseMoveTime;
  slim_int fLastMouseMoveX;
  slim_int fLastMouseMoveY;
  slim_int fMouseMoveRate;
  slim_bool fForcePeriodicMouseMove;
  slim_int fMainMouseButton;
  EventCommandProcList *fEventCommandProcList;
  slim_int fMaxPaintDelay;
  slim_int fLastPaintTime;
  slim_int fLockScreen;
  slim_int fLastWndTimerCheckTime;
  slim_int fMinWndTimer;
  slim_bool (*fEventFilterProc)(TWave_ *, TEvent *);
  slim_int (*fModalProgressProc)(TWave_ *, slim_opaque);
  slim_opaque fModalProgressArg;
  void (*fScreenStateCallbackProc)(TWave_ *, TScreen *, slim_int);
  slim_int fScreenStateCallbackMask;
  void (*fCalc3DColorProc)(TWave_ *, TColor, slim_bool, TColor *, TColor *);
  TWaveSystemPeerInterface fPeerProc;
  TSkinCache fSkinCache;
  slim_opaque *fClassContexts;
};

typedef iTRegion_ **TRegion;

struct TWaveGraphicsPeerInterface_
{
  void (*fLockScreen)(TScreenContext, slim_int);
  void (*fUnlockScreen)(TScreenContext, slim_int);
  void (*fRefreshScreen)(TScreenContext);
  TColor (*fReduceColor)(TScreenContext, TColor);
  void (*fGetPixels)(TScreenContext, slim_int, slim_int, void *, slim_int, TRect *);
  void (*fInvalRect)(TScreenContext, TRect *);
  void *(*fLockUnlockPixel)(TScreenContext, void *, void **, void **, slim_bool);
  void (*fFillRect)(TScreenContext, TRect *, TColor);
  void (*fCopyArea)(TScreenContext, TRect *, slim_int, slim_int);
  void (*fBitBlt)(TScreenContext, slim_int, slim_int, void *, void *, slim_int, slim_int, TRect *);
  void (*fDrawText)(TScreenContext, slim_int, slim_int, slim_char *, slim_int, TColor, slim_int, TRect *);
  void (*fDrawScreenText)(TScreenContext, void *, slim_int, slim_int, slim_int, slim_char *, slim_int, TColor, slim_int, TRect *);
  void (*fStretchBlt)(TScreenContext, TRect *, void *, void *, slim_int, slim_int, TRect *);
  void (*fFrameRect)(TScreenContext, TRect *, TRect *, TColor, slim_int);
  void (*fDrawLine)(TScreenContext, slim_int, slim_int, slim_int, slim_int, TRect *, TColor);
  void (*fFramePolygon)(TScreenContext, slim_int, slim_int *, slim_int, TRect *, TColor, slim_int, slim_int);
  void (*fFillPolygon)(TScreenContext, slim_int, slim_int *, TRect *, TColor, slim_int, slim_int);
  void (*fFrameArc)(TScreenContext, TRect *, slim_int, slim_int, TRect *, TColor);
  void (*fFillArc)(TScreenContext, TRect *, slim_int, slim_int, TRect *, TColor);
};

typedef TWaveGraphicsPeerInterface_ TWaveGraphicsPeerInterface;

struct TScreen_
{
  TWave_ *fWave;
  TScreenContext fContext;
  slim_int fScreenNum;
  slim_int fType;
  slim_int fFlag;
  slim_int fPixelMapType;
  slim_int fPixelMapTypeA;
  slim_int fBytesPerPixel;
  slim_int fScanLineAlign;
  slim_int fRowBytes;
  slim_int fScreenRowBytes;
  void *fScreenBuffer;
  slim_int fCursorWidth;
  slim_int fCursorHeight;
  TWnd fDesktopWnd;
  TRect fGeometry;
  TRect fClipRect;
  TRegion fMaskRegion;
  slim_int fLockCount;
  TWWWPixelMap *fPixelMap;
  slim_int *fDirty;
  TWaveGraphicsPeerInterface fPeerProc;
};

struct TEvent_
{
  slim_int fID;
  TWnd fTarget;
  slim_int fX;
  slim_int fY;
  slim_int fKeyCode;
  slim_int fKeyChar;
  slim_int fModifiers;
  slim_opaque fArg;
};

typedef void (*EventCommandProc)(TWave_ *, TEvent *, slim_opaque);

struct EventCommandProcList_
{
  EventCommandProcList_ *fNext;
  EventCommandProc fEventCommandProc;
  slim_opaque fArg;
};

struct TFontMetrics_
{
  slim_int fAscent;
  slim_int fDescent;
  slim_int fHeight;
  slim_int fMinWidth;
  slim_int fMaxWidth;
};

struct iTRegion_
{
  TSpecList fRectList;
};

typedef TBrowserPrefSet_ TBrowserPrefSet;

struct TBrowserPrefFlag_
{
  slim_bool fAccesskeyFocusOnlySubmitReset;
  slim_bool fAllowHTTPandHTTPS;
  slim_bool fAnimateImage;
  slim_bool fAnimationImageMaxLoops;
  slim_bool fAutoLoadImageBound;
  slim_bool fAutoSetFocus;
  slim_bool fBlinkLimitTime;
  slim_bool fBlinkOffPeriod;
  slim_bool fBlinkOnPeriod;
  slim_bool fBlockHeightPolicy;
  slim_bool fBlockquoteMargin_bottom;
  slim_bool fBlockquoteMargin_left;
  slim_bool fBlockquoteMargin_right;
  slim_bool fBlockquoteMargin_top;
  slim_bool fCSSDisables;
  slim_bool fCSSMediaTypes;
  slim_bool fCacheExpirePeriod;
  slim_bool fCacheMode;
  slim_bool fCacheProtectInMemoryCrisis;
  slim_bool fCanvasMarginHeight;
  slim_bool fCanvasMarginWidth;
  slim_bool fContentParserMaxStayTime;
  slim_bool fContentPersistentMaxStayTime;
  slim_bool fCookieMode;
  slim_bool fDNSMaxCacheEntries;
  slim_bool fDNSMaxRetry;
  slim_bool fDNSPort;
  slim_bool fDNSPrimary;
  slim_bool fDNSRetryInterval;
  slim_bool fDNSSecondary;
  slim_bool fDOMSettings;
  slim_bool fDaysToExpireVisits;
  slim_bool fDefaultStyleSheet;
  slim_bool fDeleteImageBound;
  slim_bool fDisableFilep;
  slim_bool fDisplayCompact;
  slim_bool fDisplayTable;
  slim_bool fDocTypeMode;
  slim_bool fDragThreshold;
  slim_bool fEditorDrawDelayPeriod;
  slim_bool fEditorMaxStayTimeBG;
  slim_bool fEditorMaxStayTimeFG;
  slim_bool fEnableBlink;
  slim_bool fEnableCanvasElement;
  slim_bool fEnableClientPull;
  slim_bool fEnableCursor;
  slim_bool fEnableEmbed;
  slim_bool fEnableFrameSet;
  slim_bool fEnableIECompatDOM;
  slim_bool fEnableIFrame;
  slim_bool fEnableImageDefaultAlt;
  slim_bool fEnableMarquee;
  slim_bool fEnableTabIndex;
  slim_bool fEnableUserScript;
  slim_bool fFilepCharSet;
  slim_bool fFitIntoPane;
  slim_bool fFocusOutlineWidth;
  slim_bool fFocusOutlineWidthForControl;
  slim_bool fFocusOutlineWidthForIFrame;
  slim_bool fFocusOutlineWidthForPlugin;
  slim_bool fFrameSetThumbnail;
  slim_bool fHTTPConnectTimeout;
  slim_bool fHTTPKeepAliveTimeout;
  slim_bool fHTTPMaxPipelineRequests;
  slim_bool fHTTPMaxStreams;
  slim_bool fHTTPPort;
  slim_bool fHTTPReqTimeout;
  slim_bool fHTTPRspTimeout;
  slim_bool fHTTPSPort;
  slim_bool fI18NArchLangSet;
  slim_bool fI18NAutoDetectLangSet;
  slim_bool fI18NRequestedCharSet;
  slim_bool fImageDecodeMaxStayTime;
  slim_bool fImageDisables;
  slim_bool fImageMag;
  slim_bool fImageRectAlt;
  slim_bool fImageResizeAlgorithm;
  slim_bool fIncrementalReflow;
  slim_bool fJavaScriptAdjustTime;
  slim_bool fJavaScriptSettings;
  slim_bool fKeepResizedImage;
  slim_bool fKinsoku;
  slim_bool fL1ContentSize;
  slim_bool fL1Entries;
  slim_bool fL1TotalSize;
  slim_bool fL2ContentSize;
  slim_bool fL2Entries;
  slim_bool fL2TotalSize;
  slim_bool fLineHeightPolicy;
  slim_bool fListMarkerPadding;
  slim_bool fLoadPageAsIs;
  slim_bool fMag;
  slim_bool fMaxActiveDecoders;
  slim_bool fMaxCookiesPerDomain;
  slim_bool fMaxHistories;
  slim_bool fMaxImageDelayTime;
  slim_bool fMaxImageHeight;
  slim_bool fMaxImageWidth;
  slim_bool fMaxLenPerCookie;
  slim_bool fMaxPageAuth;
  slim_bool fMaxPixelsPerDecodedPixelMap;
  slim_bool fMaxPixelsPerImage;
  slim_bool fMaxProxyAuth;
  slim_bool fMaxRedirect;
  slim_bool fMaxRequestBody;
  slim_bool fMaxRequestHeader;
  slim_bool fMaxStreams;
  slim_bool fMaxTotalContentsSize;
  slim_bool fMaxTotalCookies;
  slim_bool fMaxTotalCookiesLen;
  slim_bool fMaxVisits;
  slim_bool fMinImageDelayTime;
  slim_bool fMinSleepTimeInNetworking;
  slim_bool fMobileLinkDiscovery;
  slim_bool fMultipleSelectDefaultSize;
  slim_bool fNavigatorAppCodeName;
  slim_bool fNavigatorAppMinorVersion;
  slim_bool fNavigatorAppName;
  slim_bool fNavigatorAppVersion;
  slim_bool fNavigatorBrowserLanguage;
  slim_bool fNavigatorCPUClass;
  slim_bool fNavigatorLanguage;
  slim_bool fNavigatorOSCPU;
  slim_bool fNavigatorOnLine;
  slim_bool fNavigatorPlatform;
  slim_bool fNavigatorProduct;
  slim_bool fNavigatorProductSub;
  slim_bool fNavigatorSystemLanguage;
  slim_bool fNavigatorUserAgent;
  slim_bool fNavigatorUserLanguage;
  slim_bool fNavigatorVendor;
  slim_bool fNavigatorVendorSub;
  slim_bool fNoProxyHosts;
  slim_bool fNotifyFrameSetState;
  slim_bool fNotifyInclError;
  slim_bool fNotifyStreamState;
  slim_bool fPDConfig;
  slim_bool fPageMakerMaxStayTime;
  slim_bool fPixelMapProtectInMemoryCrisis;
  slim_bool fPriorityOverMetaHTTPEquiv_cache_control;
  slim_bool fPriorityOverMetaHTTPEquiv_refresh;
  slim_bool fProgressiveOnlyDisplayed;
  slim_bool fProxyHTTPPort;
  slim_bool fProxyHTTPSPort;
  slim_bool fProxyHost;
  slim_bool fQueryRequestInclMask;
  slim_bool fQueryStartScript;
  slim_bool fRememberFormValue;
  slim_bool fRunJavaScript;
  slim_bool fSSLVersion;
  slim_bool fScriptDisables;
  slim_bool fScriptMaxStayTime;
  slim_bool fScriptTimeout;
  slim_bool fJSGCDelayPeriodOnProg;
  slim_bool fSendCookie;
  slim_bool fSendProxyKeepAlive;
  slim_bool fSendReferer;
  slim_bool fSimpleImagePlaceHolder;
  slim_bool fSingleSelectDefaultSize;
  slim_bool fSplitBltThreshold;
  slim_bool fStartPage;
  slim_bool fTabOrder;
  slim_bool fTabWidth;
  slim_bool fTableLayout;
  slim_bool fTextMag;
  slim_bool fTextareaCols;
  slim_bool fTextareaRows;
  slim_bool fUTF8EncodedURL;
  slim_bool fUseHTTP11OverProxy;
  slim_bool fUseHTTP11PipeLine;
  slim_bool fUseIDN;
  slim_bool fUseProxy;
  slim_bool fUserStyleSheet;
  slim_bool fWaitDecodeImage;
  slim_bool fWaitStartMarquee;
  slim_bool fWapMarqueeSpeedFast;
  slim_bool fWapMarqueeSpeedNormal;
  slim_bool fWapMarqueeSpeedSlow;
  slim_bool fWindowInherits;
  slim_bool fWindowInheritsX;
  slim_bool fWordWrap;
};

typedef TBrowserPrefFlag_ TBrowserPrefFlag;

struct __attribute__((aligned(8))) TBrowserPrefSet_
{
  TBrowserPref fPref;
  TBrowserPrefFlag fFlag;
};

typedef TPWSPrefSet_ TPWSPrefSet;

struct __attribute__((aligned(8))) TPWSPref_
{
  slim_int fFrameSelectType;
  slim_int fFrameSelectBorderWidth;
  slim_int fFrameSelectBorderStyle;
  TColor fFrameSelectNormalColor;
  TColor fFrameSelectFocusColor;
  slim_int fTextControlBytesLimit;
  slim_int fTextControlCharsLimit;
  slim_bool fListControlSkipOptGroupLabel;
  slim_bool fListControlSkipDisabled;
  slim_int fListControlTextFoldingLimit;
  TString fFileSelectControlButtonLabel;
  slim_int fPaneScrollBarWidth;
  slim_int fInsidePaneScrollBarWidth;
  slim_int fOffScreenFontMinSizeThreshold;
};

typedef TPWSPref_ TPWSPref;

struct TPWSPrefFlag_
{
  slim_bool fFrameSelectType;
  slim_bool fFrameSelectBorderWidth;
  slim_bool fFrameSelectBorderStyle;
  slim_bool fFrameSelectNormalColor;
  slim_bool fFrameSelectFocusColor;
  slim_bool fTextControlBytesLimit;
  slim_bool fTextControlCharsLimit;
  slim_bool fListControlSkipOptGroupLabel;
  slim_bool fListControlSkipDisabled;
  slim_bool fListControlTextFoldingLimit;
  slim_bool fFileSelectControlButtonLabel;
  slim_bool fPaneScrollBarWidth;
  slim_bool fInsidePaneScrollBarWidth;
  slim_bool fOffScreenFontMinSizeThreshold;
};

typedef TPWSPrefFlag_ TPWSPrefFlag;

struct TPWSPrefSet_
{
  TPWSPref fPref;
  TPWSPrefFlag fFlag;
};

typedef GameBrowser_LocalParam_ GameBrowser_LocalParam;

typedef void (*BRLocalParam_TidyProc)(TBRLocalParam *);

struct TBRLocalParam_
{
  slim_int fID;
  BRLocalParam_TidyProc fTidy;
};

typedef TBRLocalParam_ TBRLocalParam;

struct __attribute__((aligned(8))) GameBrowser_LocalParam_
{
  TBRLocalParam fBase;
  slim_int fJS_DlgType;
};

typedef TGraphics_ TGraphics;

struct __attribute__((aligned(8))) TGraphics_
{
  TScreen_ *fScreen;
  TFont fFont;
  slim_int fCharset;
  TColor fColor;
  slim_int fXOrigin;
  slim_int fYOrigin;
  TRegion fVisibleRegion;
  TRect fClipRect;
  TColor (*fPenProc)(slim_opaque, slim_int, slim_int, slim_int);
  slim_opaque fPenContext;
  TFontMetrics fFontMetrics;
};

typedef TUIEvent_ TUIEvent;

typedef TQueryFormatIterator_ TQueryFormatIterator;

struct TQueryFormatSite_
{
  TString fName;
  TURLString fUrl;
  slim_int fQuerycharset;
  slim_int fCharset;
  slim_int fMethod;
  slim_int fEnctype;
};

typedef TQueryFormatSite_ TQueryFormatSite;

struct TQueryFormatIterator_
{
  TQueryFormatSite fBase;
  TQueryFormatter *fQfmt;
  slim_pix fPix;
};

typedef TAccelerator_ TAccelerator;

struct TAccelerator_
{
  slim_int fKeyCode;
  slim_int fModifiers;
  slim_int fActionID;
};

typedef TNetIF_ TNetIF;

typedef TNetIFProperty_ TNetIFProperty;

struct TNetIF_
{
  slim_int fIFID;
  slim_bool fStarted;
  slim_int fState;
  slim_char *fName;
  TNetIFProperty *fProperty;
  void *fNetManager;
  slim_int fLastUsedTick;
  slim_int fDetailedState;
  slim_opaque fData;
  slim_bool (*fStartProc)(TNetIF *);
  void (*fStopProc)(TNetIF *);
  slim_bool (*fConnectProc)(TNetIF *);
  void (*fDisconnectProc)(TNetIF *);
  slim_bool (*fSetPropertyProc)(TNetIF *, TNetIFProperty *);
  slim_int (*fProgressProc)(TNetIF *);
  void (*fNotifyReadWriteProc)(TNetIF *, slim_bool, slim_int);
  slim_bool (*fDNSParamProc)(TNetIF *, slim_ip_addr *, slim_ip_addr *);
  slim_bool (*fLineStatusProc)(TNetIF *, slim_int *, slim_int *);
};

typedef TNetIPAddr_ TNetIPAddr;

struct TNetIFPPPParam_
{
  slim_int fAuthMethod;
  TString fAccount;
  TString fPassword;
  TString fOutsideLineCall;
  TString fTelephoneNumber;
  slim_int fDialType;
  slim_int fAutoAuthenticate;
};

typedef TNetIFPPPParam_ TNetIFPPPParam;

struct TNetIFLANParam_
{
  slim_int fReserve;
};

typedef TNetIFLANParam_ TNetIFLANParam;

struct TNetIFCSDParam_
{
  TString fDialUpNumber;
  TString fUserName;
  TString fPassword;
  slim_int fDataMode;
  slim_int fDataRate;
};

typedef TNetIFCSDParam_ TNetIFCSDParam;

struct TNetIFGPRSParam_
{
  TString fAPN;
  TString fUserName;
  TString fPassword;
};

typedef TNetIFGPRSParam_ TNetIFGPRSParam;

union TNetIFProperty_::$C6B6E28C6946909A2543E513776111E8
{
  TNetIFPPPParam fPPP;
  TNetIFLANParam fLAN;
  TNetIFCSDParam fCSD;
  TNetIFGPRSParam fGPRS;
};

struct TNetIFProperty_
{
  TString fName;
  TNetIPAddr *fIPAddr;
  slim_int fIFID;
  slim_int fTimeout;
  slim_ip_addr fDNS[2];
  TNetIFProperty_::$C6B6E28C6946909A2543E513776111E8 fIFParam;
};

struct TNetIPAddr_::$DBFBEB16ABC317C03B52BE31FA57A4DF::$6AD92CF03D582D085D24ABDE9558BE56
{
  slim_word fIPAddr;
  slim_word fNetmask;
  slim_word fBroadcast;
};

union TNetIPAddr_::$DBFBEB16ABC317C03B52BE31FA57A4DF
{
  TNetIPAddr_::$DBFBEB16ABC317C03B52BE31FA57A4DF::$6AD92CF03D582D085D24ABDE9558BE56 fIPv4;
  slim_ip_addr fIPv6;
};

struct TNetIPAddr_
{
  TNetIPAddr *fAlias;
  slim_int fFamily;
  TNetIPAddr_::$DBFBEB16ABC317C03B52BE31FA57A4DF fAddr;
};

typedef TRepositoryData_ TRepositoryData;

union TRepositoryData_::$F1AE27438CA17F1642AFA7FBECE8B466
{
  slim_int fInteger;
  TString fString;
  slim_vhandle fBinary;
};

struct TRepositoryData_
{
  slim_int fType;
  TRepositoryData_::$F1AE27438CA17F1642AFA7FBECE8B466 fValue;
};

typedef _tAPPExJSParam APPExJSParam;

struct _tAPPExJSParam
{
  slim_int fType;
  slim_int fCharset;
  slim_int fStatus;
  slim_char *fMessage;
  slim_char *fValue;
};

typedef TBrowserLibPageInfo_ TBrowserLibPageInfo;

struct TBrowserLibPageInfo_
{
  TURLString fURL;
  slim_int fContentType;
  slim_int fCharset;
  slim_int fInternalCharset;
  slim_int fCurrentLength;
  slim_int fContentLength;
  slim_int fOriginalLength;
  TString fTitle;
  slim_bool fIsPageSave;
  TString fHTTPHeader;
  slim_bool fNoSave;
  slim_int fHTTPStatusCode;
};

typedef slim_object TPLPlate;

typedef TDecoPrefDialogItem_ TDecoPrefDialogItem;

struct __attribute__((aligned(8))) TDecoPrefDialogItem_
{
  slim_int fCompoID;
  slim_char *fCollection;
  slim_int fItemID;
  slim_opaque fData;
  slim_int fParam;
};

typedef TCharsetDialogInfo_ TCharsetDialogInfo;

struct TCharsetDialogInfo_
{
  slim_int fID;
  slim_int fValue;
  slim_int fCompoID;
};

enum $D1678A6FD47F069EE283299DF14D13E5 : __int32
{
  SAVELINKTARGET_MIMETYPE_TEXTHTML = 0x0,
  SAVELINKTARGET_MIMETYPE_TEXTPLAIN = 0x1,
  SAVELINKTARGET_MIMETYPE_IMAGEBMP = 0x2,
  SAVELINKTARGET_MIMETYPE_IMAGEGIF = 0x3,
  SAVELINKTARGET_MIMETYPE_IMAGEJPG = 0x4,
  SAVELINKTARGET_MIMETYPE_IMAGEPNG = 0x5,
  SAVELINKTARGET_MIMETYPE_OTHER = 0x6,
  SAVELINKTARGET_MIMETYPE_UNKNOWN = 0x7,
  SAVELINKTARGET_MIMETYPE_NUM = 0x8,
};

enum $9C49219BC880E29ECB73F6013418ACAE : __int32
{
  SAVELINKTARGET_GENERIC = 0xFFFFFFFF,
  SAVELINKTARGET_CANCEL = 0x0,
  SAVELINKTARGET_OK = 0x1,
};

enum $B7709AA0E900396839AF6609146AE428 : __int32
{
  BROWSER_MENU_ACTION_SET_TO_HOMEPAGE = 0x0,
  BROWSER_MENU_ACTION_PAGE_MEMO = 0x1,
  BROWSER_MENU_ACTION_SAVE_AS_PAGEMEMO = 0x2,
  BROWSER_MENU_ACTION_SAVE_AS_LINK = 0x3,
  BROWSER_MENU_ACTION_TRANSLATE = 0x4,
  BROWSER_MENU_ACTION_NEXT_FRAME = 0x5,
  BROWSER_MENU_ACTION_LINE_CONNECT = 0x6,
  BROWSER_MENU_ACTION_EXIT = 0x7,
  BROWSER_MENU_ACTION_RENDERING = 0x8,
  BROWSER_MENU_ACTION_TEXT_SIZE = 0x9,
  BROWSER_MENU_ACTION_VIEW_MAG = 0xA,
  BROWSER_MENU_ACTION_CHARCODE = 0xB,
  BROWSER_MENU_ACTION_VIEW_DETAIL = 0xC,
  BROWSER_MENU_ACTION_PAGE_INFO = 0xD,
  BROWSER_MENU_ACTION_SERVER_CERT = 0xE,
  BROWSER_MENU_ACTION_OPEN_NEW_TAB = 0xF,
  BROWSER_MENU_ACTION_OPEN_TO_NEW_TAB = 0x10,
  BROWSER_MENU_ACTION_RIGHT_TAB = 0x11,
  BROWSER_MENU_ACTION_LEFT_TAB = 0x12,
  BROWSER_MENU_ACTION_CLOSE_TAB = 0x13,
  BROWSER_MENU_ACTION_CLOSE_OTHER_TAB = 0x14,
  BROWSER_MENU_ACTION_STARTUP = 0x15,
  BROWSER_MENU_ACTION_SECURITY = 0x16,
  BROWSER_MENU_ACTION_COOKIE = 0x17,
  BROWSER_MENU_ACTION_DELETE_COOKIE = 0x18,
  BROWSER_MENU_ACTION_CACHE = 0x19,
  BROWSER_MENU_ACTION_PROXY = 0x1A,
  BROWSER_MENU_ACTION_AUTO_CONNECTION = 0x1B,
  BROWSER_MENU_ACTION_BROWSER_INFO = 0x1C,
};

enum $7E61F7EBD197AEB5862E13FA7E1254E5 : __int32
{
  CERTDIALOG_CERTTYPE_ROOT = 0x0,
  CERTDIALOG_CERTTYPE_CA = 0x1,
  CERTDIALOG_CERTTYPES = 0x2,
};

enum $857E08675ED5F8B6B9D93A637A486EA2 : __int32
{
  SLIM_CERT_TYPE_NONE = 0xFFFFFFFF,
  SLIM_CERT_TYPE_ROOT = 0x0,
  SLIM_CERT_TYPE_CA = 0x1,
  SLIM_CERT_TYPE_SERVER = 0x2,
  SLIM_CERT_TYPE_CLIENT = 0x3,
  SLIM_CERT_TYPE_CRL = 0x4,
  SLIM_CERT_TYPES = 0x5,
};

enum $01294E80B5A15A29219DD08B35DA1472 : __int32
{
  SLIM_EVENT_INITIALIZE = 0x1000,
  SLIM_EVENT_FINALIZE = 0x1001,
  SLIM_EVENT_CALCCONTENTRECT = 0x1002,
  SLIM_EVENT_ACTIVATE = 0x1003,
  SLIM_EVENT_DEACTIVATE = 0x1004,
  SLIM_EVENT_MOUSEENTER = 0x1005,
  SLIM_EVENT_MOUSEEXIT = 0x1006,
  SLIM_EVENT_MOUSEDRAG = 0x1007,
  SLIM_EVENT_BEGINDIALOG = 0x1008,
  SLIM_EVENT_ENDDIALOG = 0x1009,
  SLIM_EVENT_KEYACTION = 0x100A,
  SLIM_EVENT_ACTION = 0x100B,
  SLIM_EVENT_GOTFOCUS = 0x100C,
  SLIM_EVENT_LOSTFOCUS = 0x100D,
  SLIM_EVENT_PICK = 0x100E,
  SLIM_EVENT_CALCSCROLLRECTS = 0x100F,
  SLIM_EVENT_SCROLLPAINT = 0x1010,
  SLIM_EVENT_SCROLLLINEUP = 0x1011,
  SLIM_EVENT_SCROLLLINEDOWN = 0x1012,
  SLIM_EVENT_SCROLLPAGEUP = 0x1013,
  SLIM_EVENT_SCROLLPAGEDOWN = 0x1014,
  SLIM_EVENT_SCROLLABSOLUTE = 0x1015,
  SLIM_EVENT_FRAMEACTIVATE = 0x1016,
  SLIM_EVENT_FRAMEDEACTIVATE = 0x1017,
  SLIM_EVENT_FRAMEPAINT = 0x1018,
  SLIM_EVENT_FRAMEMOUSEDOWN = 0x1019,
  SLIM_EVENT_FRAMEMOUSEUP = 0x101A,
  SLIM_EVENT_FRAMEMOUSEMOVE = 0x101B,
  SLIM_EVENT_FRAMEMOUSEWHEEL = 0x101C,
  SLIM_EVENT_SHOW = 0x101D,
  SLIM_EVENT_HIDE = 0x101E,
  SLIM_EVENT_ENABLE = 0x101F,
  SLIM_EVENT_DISABLE = 0x1020,
  SLIM_EVENT_RESHAPE = 0x1021,
  SLIM_EVENT_WML_ACTION = 0x1022,
  SLIM_EVENT_SKIN_CHANGED = 0x1023,
  SLIM_EVENT_UPDATEGUIDANCE = 0x1024,
};

enum $6EDC302F71403D1EBFD7F11588CF4CD9 : __int32
{
  SLIM_EDGE_LEFT = 0x0,
  SLIM_EDGE_TOP = 0x1,
  SLIM_EDGE_RIGHT = 0x2,
  SLIM_EDGE_BOTTOM = 0x3,
  SLIM_EDGES = 0x4,
};

enum $D9B9DBB96A834F6CC641BD7867CBC881 : __int32
{
  SLIM_PAGESAVE_STATE_START = 0x0,
  SLIM_PAGESAVE_STATE_HEADER = 0x1,
  SLIM_PAGESAVE_STATE_URL = 0x2,
  SLIM_PAGESAVE_STATE_REDIRECT_URL = 0x3,
  SLIM_PAGESAVE_STATE_HTTP_HEADER = 0x4,
  SLIM_PAGESAVE_STATE_CONTENT = 0x5,
  SLIM_PAGESAVE_STATE_CERT = 0x6,
  SLIM_PAGESAVE_STATE_END = 0x7,
  SLIM_PAGESAVE_STATES = 0x8,
};

typedef TSaveLinkTargetInfo_ TSaveLinkTargetInfo;

typedef TWWWAutoCrawler_ TWWWAutoCrawler;

struct TSaveLinkTargetInfo_
{
  TURLString fUrl;
  TStandardBrowser fStdBrowser;
  TString fFileName;
  TString fStatusString;
  TWWWAutoCrawler *fCrawler;
};

struct TWWWAutoCrawler_
{
  TBrowser *fBrowser;
  TBrowserWindow *fNullWindow;
  slim_bool fContentChanged;
  slim_bool fContentDone;
  slim_int fSleepTime;
  slim_int fCacheModeSave;
  TBrowserCommandHandler *fCommandHandler;
  TBrowserCommandHandler fDefaultCommandHandler;
  slim_int (*fAutoCrawlerProgressProc)(TWWWAutoCrawler *);
  slim_bool fCollectAnchors;
  TObjectList fList;
};

typedef TListCompoMode_ TListCompoMode;

struct TListCompoMode_
{
  slim_int fPageScrollPolicy;
  slim_bool fOnceExitInMultiple;
  slim_bool fCyclicScroll;
  slim_bool fDisableScrollBar;
  slim_bool fEnableTextFolding;
  slim_int fShortCutModifiers;
  slim_int fFlag;
  slim_int fMinLines;
  slim_int fMaxLines;
};

typedef TListCompoStyle_ TListCompoStyle;

struct TListCompoStyle_
{
  slim_int fMargin[4];
  slim_int fTextMargin[4];
  TColor fItemBackgroundColor[8];
  TColor fItemTextColor[8];
};

typedef TDecoPrefDialog_ TDecoPrefDialog;

struct TDecoPrefDialog_
{
  slim_int fRscID;
  TRepository *fRepository;
  TWnd fDialog;
  TDecoPrefDialogItem *fItems;
  slim_int fItemLen;
  WndBehaviorProc fDialogWBP;
  slim_opaque fUserData;
};

typedef slim_date_ slim_date;

struct slim_date_
{
  slim_int year;
  slim_int mon;
  slim_int mday;
  slim_int wday;
  slim_int yday;
  slim_int hour;
  slim_int min;
  slim_int sec;
  slim_int msec;
};

typedef iTClientCertImportDialog_ iTClientCertImportDialog;

typedef iTClientCertImportDialog **TClientCertImportDialog;

struct iTClientCertImportDialog_
{
  TWnd fWnd;
  TWnd fPasswordDialog;
  TWnd fFileNameText;
  TWnd fPasswordText;
  TStandardBrowser fStandardBrowser;
};

typedef TNetManager_ TNetManager;

typedef TNetManagerDlgCtrl_ TNetManagerDlgCtrl;

struct TNetManager_
{
  TTree fNetArena;
  slim_int fMaxNetProperties;
  slim_pix fDefaultProperty;
  slim_pix fNetIFPool;
  slim_pix fNetIFPropertyList;
  slim_pix fCurrentConnectProperty;
  slim_int fConnectRef;
  TFixedString fDefaultDNS[2];
  slim_int fInhibit;
  void (*fNotifyProc)(TNetManager *, slim_int, slim_int);
  slim_opaque (*fConnectionDlgNewProc)(TNetManager *);
  void (*fConnectionDlgCtrlProc)(slim_opaque, TNetManager *, TNetManagerDlgCtrl *);
  slim_opaque fConnectionDlgInstance;
  TApplicationManager *fApplicationManager;
};

struct TNetManagerDlgCtrl_
{
  slim_int fCtrl;
  slim_int fIFID;
  slim_int fState;
};

enum $96F75114F2B357EE024F730593D17E04 : __int32
{
  BROWSERLIB_HOOKCMD_ABORT = 0x0,
  BROWSERLIB_HOOKCMD_CMPLETE = 0x1,
  BROWSERLIB_HOOKCMD_DEFAULT = 0x2,
  BROWSERLIB_HOOKCMD_REPLYCMPLETE = 0x3,
  BROWSERLIB_HOOKCMDS = 0x4,
};

enum $D4B3C6A760AFAAB4514ED798CBD4EE67 : __int32
{
  JS_PRM_NAN = 0x0,
  JS_PRM_POSITIVEINFINITY = 0x1,
  JS_PRM_NEGATIVEINFINITY = 0x2,
  JS_PRM_DOUBLE = 0x3,
  JS_PRM_INT = 0x4,
  JS_PRM_MINUSZERO = 0x5,
  JS_PRM_UNDEFINED = 0x6,
  JS_PRM_NULL = 0x7,
  JS_PRM_BOOL = 0x8,
  JS_PRM_STRING = 0x9,
  JS_PRM_GETTERSETTER = 0xA,
  JS_PRM_OBJECT = 0xB,
  JS_PRM_DID = 0xC,
  JS_PRM_DELAYOBJECT = 0xD,
  JS_PRM_CCODE = 0xE,
  JS_PRM_FUNCTION = 0xF,
  JS_PRM_ID = 0x10,
  JS_PRM_LID = 0x11,
  JS_PRM_RESERVED = 0x12,
  JS_PRM_AUTOSEMICOLON = 0x13,
  JS_PRM_LINETERM = 0x14,
  JS_PRMS = 0x15,
};

enum $6CE6B79C1912AF3D197E7E2CA01A8C61 : __int32
{
  NETMANAGER_NOTIFY_ERROR = 0xFFFFFFFF,
  NETMANAGER_NOTIFY_STARTCONNECT = 0x0,
  NETMANAGER_NOTIFY_STARTBGCONNECT = 0x1,
  NETMANAGER_NOTIFY_CONNECTED = 0x2,
  NETMANAGER_NOTIFY_DISCONNECT = 0x3,
  NETMANAGER_NOTIFY_TIMEOUT = 0x4,
  NETMANAGER_NOTIFY_end = 0x5,
};

enum $4B4228BEB0CA90B09940493EA26AD3FA : __int32
{
  APPLICATION_EVENT_MARKREMOVED = 0xFFFFFFFF,
  APPLICATION_EVENT_INITIALIZE = 0x0,
  APPLICATION_EVENT_START = 0x1,
  APPLICATION_EVENT_STOP = 0x2,
  APPLICATION_EVENT_FINALIZE = 0x3,
  APPLICATION_EVENT_SUSPEND = 0x4,
  APPLICATION_EVENT_RESUME = 0x5,
  APPLICATION_EVENT_MESSAGE = 0x6,
  APPLICATION_EVENT_ACTIVATE = 0x7,
  APPLICATION_EVENT_DEACTIVATE = 0x8,
  APPLICATION_EVENT_NEWHANDLER = 0x9,
  APPLICATION_EVENT_MEMORYCRISIS = 0xA,
  APPLICATION_EVENT_CRISISRECOVERY = 0xB,
  APPLICATION_EVENT_FORCECOMEBACK = 0xC,
  APPLICATION_EVENT_NETWORK = 0xD,
  APPLICATION_EVENT_SYSTEM = 0xE,
  APPLICATION_EVENTS = 0xF,
  APPLICAITON_COMMAND_EXTEND = 0x1000,
};

enum $9D011409061DD82D738EF270A510811C : __int32
{
  WAVE_COMPO_TYPE_FILLRECT = 0x0,
  WAVE_COMPO_TYPE_FRAMERECT = 0x1,
  WAVE_COMPO_TYPE_FRAME3DRECT = 0x2,
  WAVE_COMPO_TYPE_ETCHEDRECT = 0x3,
  WAVE_COMPO_TYPE_BITMAP = 0x4,
  WAVE_COMPO_TYPE_LABEL = 0x5,
  WAVE_COMPO_TYPE_BUTTON = 0x6,
  WAVE_COMPO_TYPE_CHECKBOX = 0x7,
  WAVE_COMPO_TYPE_RADIOBUTTON = 0x8,
  WAVE_COMPO_TYPE_LIST = 0x9,
  WAVE_COMPO_TYPE_CHOICE = 0xA,
  WAVE_COMPO_TYPE_TEXTAREA = 0xB,
  WAVE_COMPO_TYPE_TEXTFIELD = 0xC,
  WAVE_COMPO_TYPE_PROGRESS = 0xD,
  WAVE_COMPO_TYPE_TAB = 0xE,
  WAVE_COMPO_TYPE_TABLE = 0xF,
  WAVE_COMPO_TYPE_TOOLBAR = 0x10,
  WAVE_COMPO_TYPE_MENU = 0x11,
  WAVE_COMPO_TYPES = 0x12,
};

enum $2E80A21EEF6A0C058F61C64CFF6CA028 : __int32
{
  WAVE_BUTTONCOMPO_TYPE_PUSH = 0x0,
  WAVE_BUTTONCOMPO_TYPE_CHECKBOX = 0x1,
  WAVE_BUTTONCOMPO_TYPE_RADIO = 0x2,
  WAVE_BUTTONCOMPO_TYPES = 0x3,
};

enum $3753AEEEF00F52D3E7CD1CC773627AE3 : __int32
{
  WAVE_TEXTBOXCOMPO_FORMAT_NONE = 0x0,
  WAVE_TEXTBOXCOMPO_FORMAT_INTEGER = 0x1,
  WAVE_TEXTBOXCOMPO_FORMAT_STRING = 0x2,
  WAVE_TEXTBOXCOMPO_FORMAT_EXTENDED = 0x10000000,
};

typedef TDecoPrefDialogListItem_ TDecoPrefDialogListItem;

struct TDecoPrefDialogListItem_
{
  slim_int fValue;
  slim_int fLabelID;
};

typedef TDecoPrefWizardItem_ TDecoPrefWizardItem;

typedef TDecoPrefWizard_ TDecoPrefWizard;

struct TDecoPrefWizardItem_
{
  slim_int fDlgID;
  TDecoPrefDialogItem *fItems;
  slim_int fItemLen;
  slim_bool (*fDialogWBP)(TDecoPrefWizard *, TEvent *);
};

struct TDecoPrefWizard_
{
  TDecoPrefDialog fPrefDlg;
  TDecoPrefWizardItem *fItems;
  slim_int fLen;
  slim_int fCurIdx;
  TDecoPrefWizard *fPrev;
  TDecoPrefWizard *fNext;
  slim_opaque fUserData;
};

typedef TAppNetManagerClass_ TAppNetManagerClass;

struct TAppNetManagerClass_
{
  TApplicationClass fBase;
  TNetManager *fNetManager;
};

typedef TRepositoryCollItem_ TRepositoryCollItem;

struct TRepositoryCollItem_
{
  slim_int fID;
  slim_int fClass;
  slim_char *fSection;
  slim_char *fItem;
  slim_int fType;
  slim_opaque fValue;
};

enum $7C38AED302BF605CD008863D60CDBD13 : __int32
{
  SYSTEM_PREF_ALL = 0xFFFFFFFF,
  SYSTEM_PREF_LANGUAGE = 0x0,
  SYSTEM_PREF_KEYBOARD = 0x1,
  SYSTEM_PREF_DIALUP_DEFAULT = 0x2,
  SYSTEM_PREFS = 0x3,
};

enum $BA2D09163F41CDC66B904722CBBA2928 : __int32
{
  APP_EVENT_EXTENDED_BASE_EVENT = 0x10000,
  APP_EVENT_EXT_SETLOCATION = 0x10001,
  APP_EVENT_REQ_SCROLL = 0x10002,
  APP_EVENT_EXT_JSDIALOG = 0x10003,
  APP_EVENT_EXTENDED = 0x10004,
};

enum $0B67CD1050FF80C47120D9E7A5F21913 : __int32
{
  SLIM_TKID_LNGSET_en = 0x0,
  SLIM_TKID_LNGSET_ja = 0x1,
  SLIM_TKID_LNGSET_ko = 0x2,
  SLIM_TKID_LNGSET_zn_cn = 0x3,
  SLIM_TKID_LNGSET_zn_tw = 0x4,
  SLIM_TKID_LNGSET_lv = 0x5,
  SLIM_TKID_LNGSET_hr = 0x6,
  SLIM_TKID_LNGSET_ru = 0x7,
  SLIM_TKID_LNGSET_el = 0x8,
  SLIM_TKID_LNGSET_et = 0x9,
  SLIM_TKID_LNGSET_eo = 0xA,
  SLIM_TKID_LNGSET_th = 0xB,
  SLIM_TKID_LNGSET_tu = 0xC,
  SLIM_TKID_LNGSET_ar = 0xD,
  SLIM_TKID_LNGSET_iw = 0xE,
  SLIM_TKID_LNGSET_vi = 0xF,
  SLIM_TKID_LNGSET_universal = 0x10,
  SLIM_TKID_LNGSET_ENUMS = 0x11,
};

enum $0342121C6262F04791EB24BB4D96CF94 : __int32
{
  WAVE_CURSOR_MODE_NONE = 0x0,
  WAVE_CURSOR_MODE_WAVE = 0x1,
  WAVE_CURSOR_MODE_SYSTEM = 0x2,
  WAVE_CURSOR_MODES = 0x3,
};

enum $938580A25A18C0B41991FA6CEA7F4F16 : __int32
{
  STANDARD_CONFIG_MIME_TYPE_SIMPLE_PLUGIN = 0x27D9,
  STANDARD_CONFIG_MIME_TYPES = 0x27DA,
};

enum $699BFBA23239C96D11D3395DDE2225F7 : __int32
{
  WAVE_SCREEN_ID_NULL = 0x0,
  WAVE_SCREEN_ID_PRIMARY = 0x1,
  WAVE_SCREEN_ID_SECONDARY = 0x2,
  WAVE_SCREEN_ID_PRINTER = 0x3,
  WAVE_SCREEN_ID_MAX = 0x4,
};

typedef TGraphicsCaps_ TGraphicsCaps;

struct TGraphicsCaps_
{
  slim_int fFlag;
  slim_int fWidth;
  slim_int fHeight;
  slim_int fBytesPerPixel;
  slim_int fScanLineAlign;
  slim_int fRowBytes;
  void *fBuffer;
  slim_int fCursorWidth;
  slim_int fCursorHeight;
};

enum $1C78C9CAE6A28CC3C00C1BC5F728195B : __int32
{
  WAVE_CLASSCONTEXT_CANDIDATE = 0x22,
  WAVE_CLASSCONTEXT_ITEMBOX = 0x23,
  WAVE_CLASSCONTEXTS_DECO = 0x24,
};

enum $5AB44822F307C71E806951539B17DD2A : __int32
{
  WAVE_CANDIDATECOMPO_ACTION_OK = 0x0,
  WAVE_CANDIDATECOMPO_ACTION_EXIT_CANCEL = 0x1,
  WAVE_CANDIDATECOMPO_ACTION_EXIT_FOCUS = 0x2,
  WAVE_CANDIDATECOMPO_ACTION_EXIT_DISABLE = 0x3,
  WAVE_CANDIDATECOMPO_ACTION_SELCHANGED = 0x4,
  WAVE_CANDIDATECOMPO_ACTIONS = 0x5,
};

enum $748FB66B1E873B101B22C3673DA9940F : __int32
{
  WAVE_CLASSCONTEXT_GENERIC = 0x0,
  WAVE_CLASSCONTEXT_DESKTOP = 0x1,
  WAVE_CLASSCONTEXT_BUTTON = 0x2,
  WAVE_CLASSCONTEXT_TEXTBOX = 0x3,
  WAVE_CLASSCONTEXT_TAB = 0x4,
  WAVE_CLASSCONTEXT_LABEL = 0x5,
  WAVE_CLASSCONTEXT_MENU = 0x6,
  WAVE_CLASSCONTEXT_CHOICE = 0x7,
  WAVE_CLASSCONTEXT_LIST = 0x8,
  WAVE_CLASSCONTEXT_STATIC = 0x9,
  WAVE_CLASSCONTEXT_PROGRESS = 0xA,
  WAVE_CLASSCONTEXT_DIALOG = 0xB,
  WAVE_CLASSCONTEXT_TABLE = 0xC,
  WAVE_CLASSCONTEXT_TOOLBAR = 0xD,
  WAVE_CLASSCONTEXTS = 0xE,
};

enum $00D6B2D341309906C12946D468911EE3 : __int32
{
  WAVE_COMPO_TYPE_CANDIDATE = 0x1B,
  WAVE_COMPO_TYPE_ITEMBOX = 0x1C,
  WAVE_COMPO_TYPES_DECO = 0x1D,
};

typedef TCandidateCompoStyle_ TCandidateCompoStyle;

struct TCandidateCompoStyle_
{
  slim_int fMargin[4];
  slim_int fTextMargin[4];
  slim_int fItemGapV;
  slim_int fItemGapH;
  TColor fBackgroundColor;
  TColor fItemBackgroundColor[2];
  TColor fItemFrameColor[2];
  TColor fItemTextColor[2];
};

typedef TCandidateCompoMode_ TCandidateCompoMode;

struct TCandidateCompoMode_
{
  slim_bool fCyclicScroll;
  slim_int fFlag;
};

typedef TCandidateCompoItem_ TCandidateCompoItem;

struct TCandidateCompoItem_
{
  TString fText;
  slim_int fFlag;
  slim_int fTextWidth;
  slim_int fLine;
  TRect fRect;
  slim_opaque fData;
};

typedef TCandidateCompoContext_ TCandidateCompoContext;

struct __attribute__((aligned(8))) TCandidateCompoContext_
{
  TWndClassHandle fCandidateCompoClassHandle;
  TWndClass fCandidateCompoClass;
  TCandidateCompoStyle fCandidateCompoClassStyle;
  TCandidateCompoMode fCandidateCompoClassMode;
};

typedef TCandidateCompoAuxData_ TCandidateCompoAuxData;

struct __attribute__((aligned(8))) TCandidateCompoItemList_
{
  TTree fBase;
  slim_int fItems;
};

typedef TCandidateCompoItemList_ TCandidateCompoItemList;

struct TPreviousCaretInfo_
{
  slim_int fOriginCaretIndex;
  slim_int fDestinationCaretIndex;
  slim_int fKeyCode;
};

typedef TPreviousCaretInfo_ TPreviousCaretInfo;

struct TCandidateCompoAuxData_
{
  slim_int fStateFlag;
  TCandidateCompoItemList fItemList;
  slim_int fCaretIndex;
  slim_int fCurrentPage;
  slim_int fCurrentLine;
  slim_int fAllPage;
  slim_int fAllLine;
  TCandidateCompoStyle *fStyle;
  TCandidateCompoMode *fMode;
  TPreviousCaretInfo fPreviousCaretInfo;
  slim_bool fIsCaretMoved;
};

typedef TTreeVisit_ TTreeVisit;

typedef TTreeVisit TCandidateCompoItemListVisit;

typedef TTreeItemHolder_ TTreeItemHolder;

struct TTreeVisit_
{
  slim_pix fIndex;
  slim_handle fHandle;
  TTreeItemHolder *fItemHolder;
};

struct TTreeItemHolder_
{
  slim_pix fPrev;
  slim_pix fNext;
  slim_pix fParent;
  slim_pix fFirstChild;
};

enum $D5C12DA34C75C15A5E0A3B59CBF7073C : __int32
{
  SLIM_TKID_MIME____ = 0x0,
  SLIM_TKID_MIME_text__ = 0x1,
  SLIM_TKID_MIME_application__ = 0x2,
  SLIM_TKID_MIME_image__ = 0x3,
  SLIM_TKID_MIME_audio__ = 0x4,
  SLIM_TKID_MIME_video__ = 0x5,
  SLIM_TKID_MIME_model__ = 0x6,
  SLIM_TKID_MIME_message__ = 0x7,
  SLIM_TKID_MIME_multipart__ = 0x8,
  SLIM_TKID_MIME_x_world__ = 0x9,
  SLIM_TKID_MIME_text_html = 0xA,
  SLIM_TKID_MIME_application_xhtml_xml = 0xB,
  SLIM_TKID_MIME_text_plain = 0xC,
  SLIM_TKID_MIME_text_xml = 0xD,
  SLIM_TKID_MIME_application_xml = 0xE,
  SLIM_TKID_MIME_image_gif = 0xF,
  SLIM_TKID_MIME_image_jpeg = 0x10,
  SLIM_TKID_MIME_image_pjpeg = 0x11,
  SLIM_TKID_MIME_image_png = 0x12,
  SLIM_TKID_MIME_image_bmp = 0x13,
  SLIM_TKID_MIME_video_x_mng = 0x14,
  SLIM_TKID_MIME_text_css = 0x15,
  SLIM_TKID_MIME_text_javascript = 0x16,
  SLIM_TKID_MIME_application_x_javascript = 0x17,
  SLIM_TKID_MIME_application_smil = 0x18,
  SLIM_TKID_MIME_message_rfc822 = 0x19,
  SLIM_TKID_MIME_application_javascript = 0x1A,
  SLIM_TKID_MIME_text_ecmascript = 0x1B,
  SLIM_TKID_MIME_application_ecmascript = 0x1C,
  SLIM_TKID_MIME_multipart_mixed = 0x1D,
  SLIM_TKID_MIME_multipart_related = 0x1E,
  SLIM_TKID_MIME_multipart_alternative = 0x1F,
  SLIM_TKID_MIME_multipart_byteranges = 0x20,
  SLIM_TKID_MIME_application_rdf_xml = 0x21,
  SLIM_TKID_MIME_application_rss_xml = 0x22,
  SLIM_TKID_MIME_application_atom_xml = 0x23,
  SLIM_TKID_MIME_application_opml_xml = 0x24,
  SLIM_TKID_MIME_application_x_netcdf = 0x25,
  SLIM_TKID_MIME_application_x_xbel = 0x26,
  SLIM_TKID_MIME_application_x_url = 0x27,
  SLIM_TKID_MIME_text_vnd_wap_wml = 0x28,
  SLIM_TKID_MIME_image_vnd_wap_wbmp = 0x29,
  SLIM_TKID_MIME_text_vnd_wap_wmlscript = 0x2A,
  SLIM_TKID_MIME_application_vnd_wap_xhtml_xml = 0x2B,
  SLIM_TKID_MIME_application_vnd_wap_wbxml = 0x2C,
  SLIM_TKID_MIME_application_vnd_wap_wmlc = 0x2D,
  SLIM_TKID_MIME_application_vnd_wap_wmlsc = 0x2E,
  SLIM_TKID_MIME_application_vnd_wap_wmlscriptc = 0x2F,
  SLIM_TKID_MIME_image_svg_xml = 0x30,
  SLIM_TKID_MIME_application_pdf = 0x31,
  SLIM_TKID_MIME_application_x_shockwave_flash = 0x32,
  SLIM_TKID_MIME_application_futuresplash = 0x33,
  SLIM_TKID_MIME_application_x_director = 0x34,
  SLIM_TKID_MIME_audio_x_pn_realaudio = 0x35,
  SLIM_TKID_MIME_application_x_java = 0x36,
  SLIM_TKID_MIME_audio_midi = 0x37,
  SLIM_TKID_MIME_audio_x_wav = 0x38,
  SLIM_TKID_MIME_audio_x_aiff = 0x39,
  SLIM_TKID_MIME_audio_basic = 0x3A,
  SLIM_TKID_MIME_video_mpeg = 0x3B,
  SLIM_TKID_MIME_audio_mpeg = 0x3C,
  SLIM_TKID_MIME_application_vnd_oma_drm_message = 0x3D,
  SLIM_TKID_MIME_application_vnd_oma_drm_rights_xml = 0x3E,
  SLIM_TKID_MIME_application_vnd_oma_drm_rights_wbxml = 0x3F,
  SLIM_TKID_MIME_application_vnd_oma_drm_content = 0x40,
  SLIM_TKID_MIME_application_x_www_form_urlencoded = 0x41,
  SLIM_TKID_MIME_multipart_form_data = 0x42,
  SLIM_TKID_MIME_application_octet_stream = 0x43,
  SLIM_TKID_MIME_application_x_gzip = 0x44,
  SLIM_TKID_MIME_application_x_tar = 0x45,
  SLIM_TKID_MIME_application_zip = 0x46,
  SLIM_TKID_MIME_video_x_msvideo = 0x47,
  SLIM_TKID_MIME_video_quicktime = 0x48,
  SLIM_TKID_MIME_video_3gpp = 0x49,
  SLIM_TKID_MIME_video_3gpp2 = 0x4A,
  SLIM_TKID_MIME_audio_3gpp = 0x4B,
  SLIM_TKID_MIME_audio_3gpp2 = 0x4C,
  SLIM_TKID_MIME_video_x_ms_wmv = 0x4D,
  SLIM_TKID_MIME_video_x_ms_asf = 0x4E,
  SLIM_TKID_MIME_video_x_ms_asx = 0x4F,
  SLIM_TKID_MIME_video_x_ms_wvx = 0x50,
  SLIM_TKID_MIME_video_x_ms_wm = 0x51,
  SLIM_TKID_MIME_audio_x_ms_wma = 0x52,
  SLIM_TKID_MIME_audio_x_ms_wax = 0x53,
  SLIM_TKID_MIME_audio_x_gsm = 0x54,
  SLIM_TKID_MIME_text_xsl = 0x55,
  SLIM_TKID_MIME_image_tiff = 0x56,
  SLIM_TKID_MIME_image_x_icon = 0x57,
  SLIM_TKID_MIME_image_x_xpixmap = 0x58,
  SLIM_TKID_MIME_image_x_xbitmap = 0x59,
  SLIM_TKID_MIME_model_vrml = 0x5A,
  SLIM_TKID_MIME_x_world_x_vrml = 0x5B,
  SLIM_TKID_MIME_application_x_binary_javascript = 0x5C,
  SLIM_TKID_MIME_application_word = 0x5D,
  SLIM_TKID_MIME_application_x_word = 0x5E,
  SLIM_TKID_MIME_application_msword = 0x5F,
  SLIM_TKID_MIME_application_x_msword = 0x60,
  SLIM_TKID_MIME_application_vnd_ms_word = 0x61,
  SLIM_TKID_MIME_application_excel = 0x62,
  SLIM_TKID_MIME_application_x_excel = 0x63,
  SLIM_TKID_MIME_application_msexcel = 0x64,
  SLIM_TKID_MIME_application_x_msexcel = 0x65,
  SLIM_TKID_MIME_application_vnd_ms_excel = 0x66,
  SLIM_TKID_MIME_text_csv = 0x67,
  SLIM_TKID_MIME_text_comma_separated_values = 0x68,
  SLIM_TKID_MIME_application_powerpoint = 0x69,
  SLIM_TKID_MIME_application_x_powerpoint = 0x6A,
  SLIM_TKID_MIME_application_mspowerpoint = 0x6B,
  SLIM_TKID_MIME_application_x_mspowerpoint = 0x6C,
  SLIM_TKID_MIME_application_vnd_ms_powerpoint = 0x6D,
  SLIM_TKID_MIME_ENUMS = 0x6E,
};

enum $3D066DA8D113096BAAFBB1EBAA594FEB : __int32
{
  SLIM_ITEMBOX_STATE_NORMAL = 0x0,
  SLIM_ITEMBOX_STATE_KP_NEWITEM = 0x1,
  SLIM_ITEMBOX_STATE_KP_UNOPENED = 0x2,
  SLIM_ITEMBOX_STATE_KP_OPENED = 0x3,
  SLIM_ITEMBOX_STATE_LIVE_MULTICH_MAIN = 0x4,
  SLIM_ITEMBOX_STATE_LIVE_MULTICH_SUB = 0x5,
  SLIM_ITEMBOX_STATE_INTERNET_LINK = 0x10,
};

enum $35AE5C289F1B8097FCC6CE243550DD87 : __int32
{
  SLIM_ITEMBOX_TITLE_FONT_TYPE = 0x0,
  SLIM_ITEMBOX_DESC_FONT_TYPE = 0x1,
};

enum $BE2AA4E36E6FCD0B5AE328C70A85A2FB : __int32
{
  SLIM_FONT_STRETCH_ULTRAEXPANDED = 0x0,
  SLIM_FONT_STRETCH_EXTRAEXPANDED = 0x1,
  SLIM_FONT_STRETCH_EXPANDED = 0x2,
  SLIM_FONT_STRETCH_SEMIEXPANDED = 0x3,
  SLIM_FONT_STRETCH_NORMAL = 0x4,
  SLIM_FONT_STRETCH_SEMICONDENSED = 0x5,
  SLIM_FONT_STRETCH_CONDENSED = 0x6,
  SLIM_FONT_STRETCH_EXTRACONDENSED = 0x7,
  SLIM_FONT_STRETCH_ULTRACONDENSED = 0x8,
  SLIM_FONT_STRETCH_enums = 0x9,
};

enum $9B37A940153C10EF1B2B39869CE603CA : __int32
{
  SLIM_FONT_STYLE_NORMAL = 0x0,
  SLIM_FONT_STYLE_ITALIC = 0x1,
  SLIM_FONT_STYLE_OBLIQUE = 0x2,
  SLIM_FONT_STYLE_enums = 0x3,
};

enum $4A06D517353ED81869D19D93AD52001E : __int32
{
  SLIM_FONT_VARIANT_NORMAL = 0x0,
  SLIM_FONT_VARIANT_SMALLCAPS = 0x1,
  SLIM_FONT_VARIANT_enums = 0x2,
};

enum $7A64E50234AFE43725BD03DE787FC3F0 : __int32
{
  SLIM_FONT_WEIGHT_100 = 0x0,
  SLIM_FONT_WEIGHT_200 = 0x1,
  SLIM_FONT_WEIGHT_300 = 0x2,
  SLIM_FONT_WEIGHT_400 = 0x3,
  SLIM_FONT_WEIGHT_500 = 0x4,
  SLIM_FONT_WEIGHT_600 = 0x5,
  SLIM_FONT_WEIGHT_700 = 0x6,
  SLIM_FONT_WEIGHT_800 = 0x7,
  SLIM_FONT_WEIGHT_900 = 0x8,
  SLIM_FONT_WEIGHT_enums = 0x9,
  SLIM_FONT_WEIGHT_NORMAL = 0x3,
  SLIM_FONT_WEIGHT_BOLD = 0x6,
};

enum $307B6B36A906D22EEF603969DA964273 : __int32
{
  SLIM_ITEMBOX_STATE_SHADOW_RIGHT = 0x6,
  SLIM_ITEMBOX_STATE_SHADOW_UNDER = 0x7,
  SLIM_ITEMBOX_STATE_DEFAULT_IMAGE = 0x8,
  SLIM_ITEMBOX_STATE_SEARCH_FOCUS = 0x9,
};

typedef TItemboxCompoContext_ TItemboxCompoContext;

struct __attribute__((aligned(8))) TItemboxCompoContext_
{
  TWndClass fItemboxCompoClass;
  TWndClassHandle fItemboxCompoClassHandle;
};

typedef TItemboxCompoAuxData_ TItemboxCompoAuxData;

struct __attribute__((aligned(8))) TItemboxCompoAuxData_
{
  slim_int fStateFlag;
  slim_bool fMouseDownFlag;
  slim_bool fFocusType;
  TRect fImageRect;
  TRect fFocusRect;
  TColor fBackGroundColor;
  TColor fTextColor;
  TColor fFocusGroundColor;
  TColor fFocusTextColor;
  TColor fBorderColor;
  TColor fFocusHitColor;
  slim_int fMarqueeMaxOffset;
  slim_int fMarqueeOffset;
  slim_int fIndex;
  TString fTitle;
  TString fDefaultTitle;
  TString fDescription;
  TString fDefaultDescription;
  slim_bool fIsViewTitle;
  TURLString fLink;
  TURLString fDefaultLink;
  TWWWImage fImage;
  TImageDecoder fImageDecoder;
  TWWWImageClass fWWWImageClass;
  TWWWPixelMapClassPool fWWWPixelMapClassPool;
  TGIFDecoderClass fGIFDecoderClass;
  TIJGJPEGDecoderClass fIJGJPEGDecoderClass;
  TLIBPNGDecoderClass fLIBPNGDecoderClass;
  TBMPDecoderClass fBMPDecoderClass;
  slim_bool fIsPrevFocused;
};

typedef iTWWWImage_ iTWWWImage;

typedef TItemboxCompoMarqueeArg_ TItemboxCompoMarqueeArg;

struct TItemboxCompoMarqueeArg_
{
  slim_int fInitialDelay;
  slim_int fDelay;
};

typedef TSkinPart_ TSkinPart;

typedef slim_int TSkinPixelMapResource;

struct TSkinPart_
{
  TSkinPixelMapResource fPixelMapID;
  slim_int fX0;
  slim_int fX1;
  slim_int fY0;
  slim_int fY1;
  slim_handle fPixelMap;
};

enum $AA730E165E80266642504799E8540BD3 : __int32
{
  DIALUP_PREF_ENABLE = 0x0,
  DIALUP_PREF_NAME = 0x1,
  DIALUP_PREF_NETWORKTYPE = 0x2,
  DIALUP_PREF_OUTSIDELINENUM = 0x3,
  DIALUP_PREF_TELNUM = 0x4,
  DIALUP_PREF_DIALTYPE = 0x5,
  DIALUP_PREF_AUTOOFFLINE = 0x6,
  DIALUP_PREF_ACCOUNT = 0x7,
  DIALUP_PREF_PASSWORD = 0x8,
  DIALUP_PREF_LOGINTYPE = 0x9,
  DIALUP_PREF_AUTOAUTH = 0xA,
  DIALUP_PREF_DNS1 = 0xB,
  DIALUP_PREF_DNS2 = 0xC,
  DIALUP_PREFS = 0xD,
};

enum $6BF26AFA29E727AF7B9EA69CB0720148 : __int32
{
  REPOSITORY_CLASS_SYSTEM = 0x0,
  REPOSITORY_CLASS_USER = 0x1,
  REPOSITORY_CLASS_VSYSTEM = 0x2,
  REPOSITORY_CLASS_VUSER = 0x3,
  REPOSITORY_CLASSES = 0x4,
};

enum $EFD1BC47E88EDD23E5E452199F08F4CD : __int32
{
  NETIF_TYPE_NIL = 0x0,
  NETIF_TYPE_ONDEMAND_PPP = 0x1,
  NETIF_TYPE_PERMANENT_CONNECTION = 0x2,
  NETIF_TYPE_CSD = 0x3,
  NETIF_TYPE_GPRS = 0x4,
  NETIF_TYPES = 0x5,
};

typedef iTAccessPointDialog_ iTAccessPointDialog;

typedef iTAccessPointDialog **TAccessPointDialog;

typedef TAccessPointDialogInfo_ TAccessPointDialogInfo;

typedef TAccessPointSubmenu_ TAccessPointSubmenu;

struct __attribute__((aligned(8))) iTAccessPointDialog_
{
  TWnd fWnd;
  TWnd fTableCompo;
  TAccessPointDialogInfo *fAccessPointDialogInfo;
  TNetManager *fNetManager;
  TRepository *fRepository;
  TListViewHandler fListViewHandler;
  TAccessPointSubmenu *fAccessPointSubmenu;
  TWWWPixelMap *fActiveSettingNormalImage;
  TWWWPixelMap *fActiveSettingSelctedImage;
  slim_int fCurrenetEditingIndex;
};

struct __attribute__((aligned(8))) TAccessPointDialogInfo_
{
  TListViewInfo *fListViewInfo;
  slim_int fDialogID;
  slim_int fAcceleratorsID;
  slim_int fTableID;
  slim_int fActiveSettingNormalImageRscID;
  slim_int fActiveSettingSelectedImageRscID;
  TTabbedMenuInfo *fAccessPointSubmenuInfo;
  slim_int fSubmenuAcceleratorsID;
};

struct TAccessPointSubmenu_
{
  TWnd fWnd;
  TTabbedMenuHandler fMenuHandler;
  TAccessPointDialog fAccessPointDialog;
};

typedef TDecoDialupSelect_ TDecoDialupSelect;

struct TDecoDialupSelect_
{
  TWnd fDialog;
  TWnd fChoice;
};

enum $F593FC04F7C97C31F2D25595ABA514C3 : __int32
{
  WAVE_TEXTBOXCOMPO_EXITFLAG_CANCEL = 0x0,
  WAVE_TEXTBOXCOMPO_EXITFLAG_OK = 0x1,
  WAVE_TEXTBOXCOMPO_EXITFLAGS = 0x2,
};

enum $44808710BACE98F2A3ABC56A2C88A505 : __int32
{
  SLIM_TEXTBOX_TYPE_SUPER = 0x0,
  SLIM_TEXTBOX_TYPE_AREA = 0x1,
  SLIM_TEXTBOX_TYPE_FIELD = 0x2,
};

enum $0F80CD4BCC8A31B764B429D08EBB0228 : __int32
{
  APP_EXIME_TYPE_AREA = 0x1,
  APP_EXIME_TYPE_FIELD = 0x2,
  APP_EXIME_TYPE_PASSWORD = 0x4,
  APP_EXIME_TYPES = 0x5,
};

enum $629C941CB3F8D4909073E4713E6E4776 : __int32
{
  APP_EXIME_USAGE_NONE = 0x0,
  APP_EXIME_USAGE_URL = 0x1,
  APP_EXIME_USAGE_ZEN_KANA = 0x2,
  APP_EXIME_USAGE_HAN_KANA = 0x3,
  APP_EXIME_USAGE_ALPHA = 0x4,
  APP_EXIME_USAGE_NUM = 0x5,
  APP_EXIME_USAGE_EXTENDED_BASE = 0x10000,
  APP_EXIME_USAGES = 0x10001,
};

typedef APPExIMEParam_ APPExIMEParam;

struct __attribute__((aligned(8))) APPExIMEParam_
{
  slim_char *fTemplate;
  slim_int fCharset;
  slim_int fMaxLength;
  slim_char *fFormat;
  slim_int fTextBoxCompoType;
  slim_int fTextBoxCompoUsage;
  slim_int fEchoChar;
  slim_int fSelectedRangeStart;
  slim_int fSelectedRangeEnd;
  slim_int fSelectedRangeDirection;
  TRect fTextBoxCompoRect;
  slim_int fFontID;
};

typedef TPWSInterface_ TPWSInterface;

typedef slim_object TPWSOffScreen;

struct TPWSInterface_
{
  TAWSDeviceCaps fDeviceCaps;
  TFontDatabase *fFontDatabase;
  slim_bool (*fGetButtonLabelProc)(slim_int, slim_int, slim_char **, slim_int *);
  TAWSFont (*fFindFontProc)(TAWSPane, TFontDatabaseFont *, slim_int, slim_char *, TFontStyle *, slim_int);
  void (*fForgetFontProc)(TAWSFont);
  void (*fGetFontMetricsInfoProc)(TAWSPane, TAWSFont, TFontMetricsInfo *);
  slim_bool (*fGetFontCharWidthInfoProc)(TAWSPane, TAWSFont, slim_int, TFontCharWidthInfo *);
  slim_int (*fGetCharsWidthProc)(TAWSPane, TAWSFont, slim_char *, slim_int, slim_int);
  TAWSDrawContext (*fGetDrawContextProc)(TAWSPane, TRect *);
  void (*fReleaseDrawContextProc)(TAWSPane, TAWSDrawContext);
  void (*fDrawTextProc)(TAWSPane, TAWSDrawContext, TAWSFont, slim_char *, slim_int, slim_int, slim_int, slim_int, slim_int, slim_int, TColor, slim_int);
  void (*fSetBrowserPaneProc)(TAWSPane, TBrowserPane *);
  void (*fGetPaneGeometryProc)(TAWSPane, slim_int *, slim_int *);
  void (*fGetPaneVirtualGeometryProc)(TAWSPane, slim_int *, slim_int *);
  void (*fGetPaneScrollBarSizeProc)(TAWSPane, slim_int *, slim_int *);
  slim_bool (*fGetPanePositionProc)(TAWSPane, TAWSPane, slim_int, slim_int *, slim_int *);
  void (*fFillRectProc)(TAWSPane, TAWSDrawContext, TRect *, TColor);
  void (*fBitBltProc)(TAWSPane, TAWSDrawContext, TWWWPixelMap *, TRect *, slim_int, slim_int);
  void (*fAlphaBlendOffScreenProc)(TAWSPane, TAWSDrawContext, TPWSOffScreen, TRect *, slim_int, slim_int, slim_int);
  void (*fTilePixelMapProc)(TAWSPane, TAWSDrawContext, TWWWPixelMap *, TRect *, slim_int, slim_int, slim_bool, slim_bool);
  void (*fInvalRectProc)(TAWSPane, TRect *);
  void (*fUpdatePaneProc)(TAWSPane);
  TAWSWindow (*fNewWindowProc)(slim_char *, TBrowserWindow **);
  void (*fDeleteWindowProc)(TAWSWindow);
  void (*fSetPaneTitleProc)(TAWSPane, TString, slim_int);
  void (*fShowPaneScrollProc)(TAWSPane, slim_int, slim_bool);
  void (*fSetPaneScrollPosProc)(TAWSPane, slim_int, slim_int, slim_int, slim_int);
  slim_bool (*fNewSplitPaneProc)(TAWSWindow, TAWSSplitter, TAWSPane, TAWSSplitter *, TAWSPane *);
  slim_bool (*fApplyFrameSetSchemaProc)(TAWSWindow, TAWSSplitter, TAWSPane, TFrameSetSchema *, TAWSSplitter *, TAWSPane *);
  void (*fCancelFrameSetSchemaProc)(TAWSWindow, TAWSSplitter, TAWSPane);
  void (*fDeleteSplitPaneProc)(TAWSSplitter, TAWSPane);
  slim_bool (*fSelectPaneProc)(TAWSWindow, TAWSSplitter, TAWSPane, TAWSPane, TAWSSplitter, TAWSPane, slim_bool);
  slim_bool (*fNewInsidePaneProc)(TAWSWindow, TAWSSplitter, TAWSPane, TRect *, TAWSSplitter *, TAWSPane *);
  void (*fDeleteInsidePaneProc)(TAWSSplitter, TAWSPane);
  void (*fShowInsidePaneProc)(TAWSSplitter, TAWSPane, TAWSDrawContext, slim_bool);
  void (*fMoveInsidePaneToProc)(TAWSSplitter, TAWSPane, slim_int, slim_int);
  void (*fResizeInsidePaneProc)(TAWSSplitter, TAWSPane, slim_int, slim_int);
  slim_bool (*fChangeChildPaneTypeProc)(TAWSSplitter, TAWSPane, TAWSSplitter, TAWSPane, slim_bool);
  TAWSControl (*fNewControlProc)(TAWSControlInfo *);
  slim_bool (*fSetControlValueProc)(TAWSControl, TPageInputValue *);
  slim_bool (*fGetControlValueProc)(TAWSControl, TPageInputValue *);
  slim_bool (*fAddSelectItemProc)(TAWSControl, TAWSControlInfo *, TAWSNextSelectItemInfo *);
  slim_bool (*fRemoveSelectItemProc)(TAWSControl, slim_pix, slim_int);
  slim_bool (*fAddOptGroupProc)(TAWSControl, TAWSControlInfo *, TAWSNextSelectItemInfo *, slim_opaque *);
  slim_bool (*fRemoveOptGroupProc)(TAWSControl, slim_pix, slim_opaque);
  void (*fShowControlProc)(TAWSPane, TAWSDrawContext, TAWSControl, slim_int, slim_bool);
  void (*fMoveControlToProc)(TAWSPane, TAWSControl, slim_int, slim_int, slim_int);
  void (*fDeleteControlProc)(TAWSPane, TAWSControl, slim_int);
  void (*fDrawBorderProc)(TAWSPane, TAWSDrawContext, TRect *, TRect *, TColor *, slim_int *);
  void (*fGetClipRectProc)(TAWSPane, TAWSDrawContext, TRect *);
  void (*fSetClipRectProc)(TAWSPane, TAWSDrawContext, TRect *);
  void (*fSetCursorProc)(TAWSWindow, TAWSPane, TAWSCursorInfo *);
  void (*fDrawFocusOutlineProc)(TAWSPane, TAWSDrawContext, TRect *, slim_int);
  void (*fEnterControlEditProc)(TAWSPane, TAWSControl);
  void (*fNotifyFocusProc)(TAWSWindow, TAWSPane, TAWSControl, TAWSWindow, TAWSPane, TAWSControl);
  void (*fGetSymbolMarkerMetricsProc)(TAWSPane, TAWSFont, slim_int, slim_int *, slim_int *, slim_int *);
  void (*fDrawSymbolMarkerProc)(TAWSPane, TAWSDrawContext, TAWSFont, slim_int, TRect *, TColor);
  void (*fScrollPaneProc)(TAWSPane, TAWSDrawContext, TRect *, slim_int, slim_int);
  void (*fCopyAreaProc)(TAWSPane, TAWSDrawContext, TRect *, slim_int, slim_int);
  slim_bool (*fWMLDoButtonAddProc)(TAWSPane, slim_char *, slim_int, slim_int, slim_int, slim_bool, slim_pix);
  void (*fWMLDoButtonRemoveAllProc)(TAWSPane);
};

typedef TPWSEmbedInterface_ TPWSEmbedInterface;

struct TPWSEmbedInterface_
{
  TPWSInterface *fAWSIF;
  TFontDatabase *fFontDatabase;
  TAWSEmbedWindow (*fNewWindowProc)(TAWSPane, slim_int, slim_int, TBrowserPane *, slim_pix, TAWSEmbedInfo *);
  void (*fMoveWindowProc)(TAWSPane, TAWSEmbedWindow, slim_int, slim_int);
  void (*fShowWindowProc)(TAWSPane, TAWSDrawContext, TAWSEmbedWindow, slim_bool);
  void (*fResizeWindowProc)(TAWSPane, TAWSEmbedWindow, slim_int, slim_int);
  void (*fDeleteWindowProc)(TAWSEmbedWindow);
  void (*fRequestNativeFocusProc)(TAWSPane, TAWSEmbedWindow);
  TAWSFont (*fFindFontProc)(TAWSEmbedWindow, TFontDatabaseFont *, slim_int, slim_char *, TFontStyle *, slim_int);
  void (*fForgetFontProc)(TAWSFont);
  void (*fDrawTextProc)(TAWSEmbedWindow, TAWSDrawContext, TAWSFont, slim_char *, slim_int, slim_int, slim_int, slim_int, slim_int, slim_int, TColor);
  void (*fFillRectProc)(TAWSEmbedWindow, TAWSDrawContext, TRect *, TColor);
  void (*fBitBltProc)(TAWSEmbedWindow, TAWSDrawContext, TWWWPixelMap *, TRect *, slim_int, slim_int);
  void (*fInvalRectProc)(TAWSEmbedWindow, TRect *);
  void (*fUpdateWindowProc)(TAWSEmbedWindow);
  slim_char *(*fAllocTmpFilename)(void);
  void (*fFreeTmpFilename)(slim_char *);
};

enum $EE5C6FCA8BABF245F93101A7492BEE54 : __int32
{
  APP_STATE_STARTED = 0x0,
  APP_STATE_STOPPED = 0x1,
  APP_STATE_SUSPENDED = 0x2,
  APP_STATE_RESUMED = 0x3,
  APP_STATES = 0x4,
};

enum $0036A9A11DC5D7B76157BB7D633E38B7 : __int32
{
  WAVE_RESOURCE_LANGSET_ANON = 0xFFFFFFFF,
  WAVE_RESOURCE_LANGSET_AFRIKAANS = 0x0,
  WAVE_RESOURCE_LANGSET_ALBANIAN = 0x1,
  WAVE_RESOURCE_LANGSET_ARABIC = 0x2,
  WAVE_RESOURCE_LANGSET_BASQUE = 0x3,
  WAVE_RESOURCE_LANGSET_BULGARIAN = 0x4,
  WAVE_RESOURCE_LANGSET_BYELORUSSIAN = 0x5,
  WAVE_RESOURCE_LANGSET_CATALAN = 0x6,
  WAVE_RESOURCE_LANGSET_CHINESE = 0x7,
  WAVE_RESOURCE_LANGSET_CHINESE_HONGKONG = 0x8,
  WAVE_RESOURCE_LANGSET_CHINESE_SIMPLIFIED = 0x9,
  WAVE_RESOURCE_LANGSET_CHINESE_SINGAPORE = 0xA,
  WAVE_RESOURCE_LANGSET_CHINESE_TRADITIONAL = 0xB,
  WAVE_RESOURCE_LANGSET_CROATIAN = 0xC,
  WAVE_RESOURCE_LANGSET_CZECH = 0xD,
  WAVE_RESOURCE_LANGSET_DANISH = 0xE,
  WAVE_RESOURCE_LANGSET_DUTCH = 0xF,
  WAVE_RESOURCE_LANGSET_DUTCH_BELGIAN = 0x10,
  WAVE_RESOURCE_LANGSET_ENGLISH = 0x11,
  WAVE_RESOURCE_LANGSET_ENGLISH_AUS = 0x12,
  WAVE_RESOURCE_LANGSET_ENGLISH_CAN = 0x13,
  WAVE_RESOURCE_LANGSET_ENGLISH_EIRE = 0x14,
  WAVE_RESOURCE_LANGSET_ENGLISH_NZ = 0x15,
  WAVE_RESOURCE_LANGSET_ENGLISH_UK = 0x16,
  WAVE_RESOURCE_LANGSET_ENGLISH_US = 0x17,
  WAVE_RESOURCE_LANGSET_ESTONIAN = 0x18,
  WAVE_RESOURCE_LANGSET_FINNISH = 0x19,
  WAVE_RESOURCE_LANGSET_FRENCH = 0x1A,
  WAVE_RESOURCE_LANGSET_FRENCH_BELGIAN = 0x1B,
  WAVE_RESOURCE_LANGSET_FRENCH_CANADIAN = 0x1C,
  WAVE_RESOURCE_LANGSET_FRENCH_SWISS = 0x1D,
  WAVE_RESOURCE_LANGSET_GERMAN = 0x1E,
  WAVE_RESOURCE_LANGSET_GERMAN_AUSTRIAN = 0x1F,
  WAVE_RESOURCE_LANGSET_GERMAN_SWISS = 0x20,
  WAVE_RESOURCE_LANGSET_GREEK = 0x21,
  WAVE_RESOURCE_LANGSET_HEBREW = 0x22,
  WAVE_RESOURCE_LANGSET_HUNGARIAN = 0x23,
  WAVE_RESOURCE_LANGSET_ICELANDIC = 0x24,
  WAVE_RESOURCE_LANGSET_INDONESIAN = 0x25,
  WAVE_RESOURCE_LANGSET_ITALIAN = 0x26,
  WAVE_RESOURCE_LANGSET_ITALIAN_SWISS = 0x27,
  WAVE_RESOURCE_LANGSET_JAPANESE = 0x28,
  WAVE_RESOURCE_LANGSET_KOREAN = 0x29,
  WAVE_RESOURCE_LANGSET_LATVIAN = 0x2A,
  WAVE_RESOURCE_LANGSET_LITHUANIAN = 0x2B,
  WAVE_RESOURCE_LANGSET_NORWEGIAN = 0x2C,
  WAVE_RESOURCE_LANGSET_NORWEGIAN_BOKMAL = 0x2D,
  WAVE_RESOURCE_LANGSET_NORWEGIAN_NYNORSK = 0x2E,
  WAVE_RESOURCE_LANGSET_POLISH = 0x2F,
  WAVE_RESOURCE_LANGSET_PORTUGUESE = 0x30,
  WAVE_RESOURCE_LANGSET_PORTUGUESE_BRAZILIAN = 0x31,
  WAVE_RESOURCE_LANGSET_ROMANIAN = 0x32,
  WAVE_RESOURCE_LANGSET_RUSSIAN = 0x33,
  WAVE_RESOURCE_LANGSET_SLOVAK = 0x34,
  WAVE_RESOURCE_LANGSET_SLOVENIAN = 0x35,
  WAVE_RESOURCE_LANGSET_SORBIAN = 0x36,
  WAVE_RESOURCE_LANGSET_SPANISH = 0x37,
  WAVE_RESOURCE_LANGSET_SPANISH_MEXICAN = 0x38,
  WAVE_RESOURCE_LANGSET_SPANISH_MODERN = 0x39,
  WAVE_RESOURCE_LANGSET_SWEDISH = 0x3A,
  WAVE_RESOURCE_LANGSET_THAI = 0x3B,
  WAVE_RESOURCE_LANGSET_TURKISH = 0x3C,
  WAVE_RESOURCE_LANGSET_UKRAINIAN = 0x3D,
  WAVE_RESOURCE_LANGSETS = 0x3E,
};

enum $01795711F036BB101C0F22D98F99AEB4 : __int32
{
  SNJ_BROWSER_JSTYPE_UNDEFINED = 0x0,
  SNJ_BROWSER_JSTYPE_BOOL = 0x1,
  SNJ_BROWSER_JSTYPE_INT = 0x2,
  SNJ_BROWSER_JSTYPE_FLOAT = 0x3,
  SNJ_BROWSER_JSTYPE_STRING = 0x4,
  SNJ_BROWSER_JSTYPE_INFINITY = 0x5,
  SNJ_BROWSER_JSTYPE_NULL = 0x6,
};

typedef SceNetEpollEvent SceNetEpollEvent_0;

union SceNetEpollData
{
  void *ptr;
  uint32_t u32;
};

typedef SceNetEpollData SceNetEpollData_0;

struct SceNetEpollEvent
{
  uint32_t events;
  uint32_t reserved;
  uint64_t ident;
  SceNetEpollData_0 data;
};

enum $6191564ACEA825D9F394E7E3147FAE78 : __int32
{
  APP_PPP_ERROR_GENERIC = 0xFFFFFFFF,
  APP_PPP_DORMANT = 0x0,
  APP_PPP_CONNECTING = 0x1,
  APP_PPP_CONNECTED = 0x2,
  APP_PPP_DISCONNECTING = 0x3,
  APP_PPP_IOSLEEP_CONNECTING = 0x4,
  APP_PPP_STATUS = 0x5,
};

typedef SceNetSockaddrIn SceNetSockaddrIn_0;

typedef uint8_t SceNetSaFamily_t;

struct SceNetSockaddrIn
{
  uint8_t sin_len;
  SceNetSaFamily_t sin_family;
  SceNetInPort_t sin_port;
  SceNetInAddr_0 sin_addr;
  SceNetInPort_t sin_vport;
  char sin_zero[6];
};

typedef TPPPConnectionParam_ TPPPConnectionParam;

struct TPPPConnectionParam_
{
  slim_char *fOutsideLineCall;
  slim_char *fTelephoneNum;
  slim_char *fUser;
  slim_char *fPassword;
  slim_int fDialType;
  slim_int fAuthMethod;
  slim_bool fVJComp;
  TNetIPAddr *fAddr;
  slim_opaque fUserParam;
};

typedef TPPPNetParam_ TPPPNetParam;

struct TPPPNetParam_
{
  slim_ip_addr fDns1;
  slim_ip_addr fDns2;
  slim_ip_addr fClientIP;
  slim_ip_addr fServerIP;
};

typedef __sFILE_0 FILE_0;

typedef unsigned __int16 _Wchart_0;

struct __sFILE_0
{
  unsigned __int16 _Mode;
  unsigned __int8 _Idx;
  int _Handle;
  unsigned __int8 *_Buf;
  unsigned __int8 *_Bend;
  unsigned __int8 *_Next;
  unsigned __int8 *_Rend;
  unsigned __int8 *_Wend;
  unsigned __int8 *_Rback;
  _Wchart_0 *_WRback;
  _Wchart_0 _WBack[2];
  unsigned __int8 *_Rsave;
  unsigned __int8 *_WRend;
  unsigned __int8 *_WWend;
  _Mbstatet_0 _Wstate;
  char *_Tmpnam;
  unsigned __int8 _Back[6];
  unsigned __int8 _Cbuf;
  void *_Mutex;
  unsigned __int8 *_p;
  int _r;
  int _w;
  __int16 _flags;
  __int16 _file;
  __sbuf _bf;
  int _lbfsize;
  void *_cookie;
  int (*_close)(void *);
  int (*_read)(void *, char *, int);
  fpos_t_0 (*_seek)(void *, fpos_t_0, int);
  int (*_write)(void *, const char *, int);
  __sbuf _ub;
  unsigned __int8 *_up;
  int _ur;
  unsigned __int8 _ubuf[3];
  unsigned __int8 _nbuf[1];
  __sbuf _lb;
  int _blksize;
  fpos_t_0 _offset;
  pthread_mutex *_fl_mutex;
  pthread *_fl_owner;
  int _fl_count;
  int _orientation;
  __mbstate_t _mbstate;
};

enum $FEE2D59104C559CB7B138233DF6A1781 : __int32
{
  WAVE_LOCK_SCREEN_PAINT = 0x0,
  WAVE_LOCK_SCREEN_UPDATE = 0x1,
  WAVE_LOCK_SCREEN_PROGRESS = 0x2,
};

typedef unsigned __int64 DWORD_0;

typedef TFBCCICommand_ TFBCCICommand;

struct TFBCCICommand_
{
  slim_char *fCommand;
  void (*fCCICommandProc)(TApplication, slim_char *, slim_int);
};

enum $9956678F437D5EE9D3651B5F4ABC96B4 : __int32
{
  STANDARD_NETIF_LAN_ID = 0x0,
  STANDARD_NETIF_PPP_ID = 0x1,
  STANDARD_NETIF_IDS = 0x2,
};

enum $A524E1A706E2C53F24EC6004DF5BDDF2 : __int32
{
  WAVE_SCREEN_STATE_NEW = 0x0,
  WAVE_SCREEN_STATE_DELETE = 0x1,
  WAVE_SCREEN_STATE_OFFSCREEN_NEW = 0x2,
  WAVE_SCREEN_STATE_OFFSCREEN_DELETE = 0x3,
  WAVE_SCREEN_STATE_REGISTER = 0x4,
  WAVE_SCREEN_STATE_UNREGISTER = 0x5,
  WAVE_SCREEN_STATE_SETPROC = 0x6,
};

typedef slim_opaque TWaveContext;

enum $29D213F2696DF9F7CDE1FED8E4433BC2 : __int32
{
  BOOKTREE_MOVE_BACK = 0x0,
  BOOKTREE_MOVE_FORWARD = 0x1,
};

enum $9DC3D4914BCD4D9E187371E37C53D087 : __int32
{
  BOOKMARKDIALOG_SUBMENU_VISUAL_ITEM_OPEN_IN_NEW_TAB = 0x0,
  BOOKMARKDIALOG_SUBMENU_VISUAL_ITEM_EDIT = 0x1,
  BOOKMARKDIALOG_SUBMENU_VISUAL_ITEM_LIST_VISUAL = 0x2,
  BOOKMARKDIALOG_SUBMENU_VISUAL_ITEM_SORT = 0x3,
  BOOKMARKDIALOG_SUBMENU_VISUAL_ITEM_TITLE_URL = 0x4,
  BOOKMARKDIALOG_SUBMENU_VISUAL_ITEM_DELETE = 0x5,
  BOOKMARKDIALOG_SUBMENU_VISUAL_ITEM_DELETEALL = 0x6,
  BOOKMARKDIALOG_SUBMENU_VISUAL_ITEMS = 0x7,
};

enum $CF47E839E116941FF7EA016E400E4D71 : __int32
{
  BOOKMARKDIALOG_SUBMENU_LIST_ITEM_OPEN_IN_NEW_TAB = 0x0,
  BOOKMARKDIALOG_SUBMENU_LIST_ITEM_EDIT = 0x1,
  BOOKMARKDIALOG_SUBMENU_LIST_ITEM_LIST_VISUAL = 0x2,
  BOOKMARKDIALOG_SUBMENU_LIST_ITEM_TITLE_URL = 0x3,
  BOOKMARKDIALOG_SUBMENU_LIST_ITEM_MOVEUP = 0x4,
  BOOKMARKDIALOG_SUBMENU_LIST_ITEM_MOVEDOWN = 0x5,
  BOOKMARKDIALOG_SUBMENU_LIST_ITEM_DELETE = 0x6,
  BOOKMARKDIALOG_SUBMENU_LIST_ITEM_DELETEALL = 0x7,
  BOOKMARKDIALOG_SUBMENU_LIST_ITEMS = 0x8,
};

enum $B95DD745D7BAA5CEEBA642938BD27487 : __int32
{
  TABBEDMENUHANDLER_FLAG_SELECT = 0x0,
  TABBEDMENUHANDLER_FLAG_NONSELECT = 0x1,
  TABBEDMENUHANDLER_FLAG_DISABLE = 0x2,
  TABBEDMENUHANDLER_FLAG_NOITEM = 0x3,
  TABBEDMENUHANDLER_FLAGS = 0x4,
};

enum $7ECCD1CC47B272DD81757F7AE1B9726B : __int32
{
  BOOKMARKDIALOG_EDITDIALOGMODE_EDIT = 0x0,
  BOOKMARKDIALOG_EDITDIALOGMODE_DELETE_CONFIRM = 0x1,
  BOOKMARKDIALOG_EDITDIALOGMODES = 0x2,
};

enum $FEC4CDF5C3493A65FAF9813AE06C6275 : __int32
{
  WAVE_TABLECOMPO_CFLAG_HA_RIGHT = 0x1,
  WAVE_TABLECOMPO_CFLAG_HA_CENTER = 0x2,
  WAVE_TABLECOMPO_CFLAG_VA_BOTTOM = 0x4,
  WAVE_TABLECOMPO_CFLAG_VA_CENTER = 0x8,
  WAVE_TABLECOMPO_CFLAG_IHA_RIGHT = 0x10,
  WAVE_TABLECOMPO_CFLAG_IVA_BOTTOM = 0x20,
  WAVE_TABLECOMPO_CFLAG_IVA_CENTER = 0x40,
  WAVE_TABLECOMPO_CFLAG_COLOR = 0x80,
  WAVE_TABLECOMPO_CFLAG_IMAGE_FOLLOWINDENT = 0x100,
  WAVE_TABLECOMPO_CFLAGS = 0x101,
};

typedef TBookTreeEntry_ TBookTreeEntry;

struct TBookTreeEntry_
{
  TString fName;
  TString fURL;
  slim_int fFlag;
  slim_int fCharset;
  slim_time fLastModified;
  slim_opaque fUserData;
};

typedef TBookmarkMenuItem_ TBookmarkMenuItem;

struct TBookmarkMenuItem_
{
  slim_int fTitleID;
  slim_int fActionID;
};

enum $F232793E02209C471C44C2E63A5BF196 : __int32
{
  BOOKMARK_MENU_ICON_KIND_LIST = 0x0,
  BOOKMARK_MENU_ICON_KIND_ADD = 0x1,
  BOOKMARK_MENU_ICON_KIND = 0x2,
};

enum $DC8B47418ABDF245484D29F25D0E8579 : __int32
{
  BOOKMARK_MENU_STATUS_NORMAL = 0x0,
  BOOKMARK_MENU_STATUS_FOCUSED = 0x1,
  BOOKMARK_MENU_STATUS = 0x2,
};

enum $B64FE225F29917D249B628420D2CF247 : __int32
{
  BOOKMARKMENU_SUBMENU_ACTION_OPEN_BOOKMARK_LIST = 0x0,
  BOOKMARKMENU_SUBMENU_ACTION_ADD_BOOKMARK = 0x1,
  BOOKMARKMENU_SUBMENU_ACTIONS = 0x2,
};

typedef TBackButtonContext_ TBackButtonContext;

struct TBackButtonContext_
{
  TAppBrowser fAppBrowser;
};

typedef TForwardButtonContext_ TForwardButtonContext;

struct TForwardButtonContext_
{
  TAppBrowser fAppBrowser;
};

typedef TPageLoadButtonContext_ TPageLoadButtonContext;

struct TPageLoadButtonContext_
{
  slim_bool fIsReloadButton;
  slim_int fReloadButtonSkinID;
  slim_int fAbortButtonSkinID;
  slim_char *fReloadString;
  slim_char *fAbortString;
  slim_int fReloadStringLength;
  slim_int fAbortStringLength;
};

typedef TCertInfoDialogInfo_ TCertInfoDialogInfo;

struct TCertInfoDialogInfo_
{
  slim_int fDialogID;
  slim_int fInfoTextID;
};

enum $6B52C18AE83A9E0EB0CF49465A8E5CF8 : __int32
{
  SLIM_BER_OID_DN_UNKNOWN = 0xFFFFFFFF,
  SLIM_BER_OID_DN_COUNTRY_NAME = 0x0,
  SLIM_BER_OID_DN_STATE_OR_PROVINCE_NAME = 0x1,
  SLIM_BER_OID_DN_LOCALITY_NAME = 0x2,
  SLIM_BER_OID_DN_STREET_ADDRESS = 0x3,
  SLIM_BER_OID_DN_ORGANIZATION_NAME = 0x4,
  SLIM_BER_OID_DN_ORGANIZATION_UNIT_NAME = 0x5,
  SLIM_BER_OID_DN_COMMON_NAME = 0x6,
  SLIM_BER_OID_DN_EMAIL_ADDRESS = 0x7,
  SLIM_BER_OID_DNS = 0x8,
  SLIM_BER_OID_DN_ALL = 0x9,
};

enum $DCEA94FCBD963C24AB5747BE20876FEB : __int32
{
  CERTDIALOG_SUBMENU_ITEM_VALIDATE_INVALIDATE = 0x0,
  CERTDIALOG_SUBMENU_ITEMS = 0x1,
};

typedef TClientCertImportDialogInfo_ TClientCertImportDialogInfo;

struct TClientCertImportDialogInfo_
{
  slim_int fDialogID;
  slim_int fFileNameTextID;
  slim_int fPasswordDialogID;
  slim_int fPasswordTextID;
  slim_int fFileNameTextLen;
};

typedef TClientCertSelectDialogInfo_ TClientCertSelectDialogInfo;

struct TClientCertSelectDialogInfo_
{
  slim_int fDialogID;
  slim_int fListCompoID;
};

enum $956B231887851A8DB7461C7BBE5777EE : __int32
{
  DOWNLOAD_STATUS_DONE = 0x0,
  DOWNLOAD_STATUS_ABORT = 0x1,
  DOWNLOAD_STATUS_ERROR = 0x2,
  DOWNLOAD_STATUS = 0x3,
};

typedef TEnterURLDialogInfo_ TEnterURLDialogInfo;

struct TEnterURLDialogInfo_
{
  slim_int fID;
  slim_int fOpenHistoryButtonID;
  slim_int fOpenInNewTabButtonID;
  slim_int fEditURLID;
  slim_int fMaxURLLen;
  slim_int fMaxItemNum;
};

enum $3D633B203B3403CFD9BEECC4F735B682 : __int32
{
  SKIN_PART_NORMAL = 0x0,
  SKIN_PART_FOCUSED = 0x1,
  SKIN_PART_HIT = 0x2,
  SKIN_PART_DISABLED = 0x3,
  SKIN_PARTS = 0x4,
};

enum $307A309BFF1DF28F28E630A7C42F726F : __int32
{
  WAVE_BUTTONCOMPO_STATE_HIGHLIGHT = 0x1,
  WAVE_BUTTONCOMPO_STATE_FOCUSED = 0x2,
  WAVE_BUTTONCOMPO_STATE_CHECKED = 0x4,
  WAVE_BUTTONCOMPO_STATES = 0x5,
};

enum $96F378A99280713B186AFFCC01DCB592 : __int32
{
  ALIGNED_BUTTON_ALIGN_LEFT = 0x0,
  ALIGNED_BUTTON_ALIGN_RIGHT = 0x1,
  ALIGNED_BUTTON_ALIGN_CENTER = 0x2,
  ALIGNED_BUTTON_ALIGNS = 0x3,
};

typedef slim_handle TAlignedButtonInfo;

typedef iTAlignedButtonInfo_ iTAlignedButtonInfo;

struct iTAlignedButtonInfo_
{
  slim_int fAlign;
  slim_bool fIsProgressMode;
  slim_int fPercent;
  slim_int fCurrentPercent;
  slim_int fTextMargin[4];
};

typedef TPushSkin_ TPushSkin;

struct TPushSkin_
{
  TSkinPart fPush[4];
};

typedef TButtonCompoStyle_ TButtonCompoStyle;

struct TButtonCompoStyle_::$5D30F44B45B21C4E8317BDEE9C087E43::$817EFE7CA83E4E81C6DC94696562D6A0
{
  slim_int fDummy;
};

struct TButtonCompoStyle_::$5D30F44B45B21C4E8317BDEE9C087E43::$CCF9F34BD2E61F59DFA493FF3148D8D6
{
  TColor fCheckColor;
};

struct TButtonCompoStyle_::$5D30F44B45B21C4E8317BDEE9C087E43::$047D6F5FF59444E9A635A1EF314E6023
{
  slim_int fPadding;
  TColor fCheckColor;
};

union TButtonCompoStyle_::$5D30F44B45B21C4E8317BDEE9C087E43
{
  TButtonCompoStyle_::$5D30F44B45B21C4E8317BDEE9C087E43::$817EFE7CA83E4E81C6DC94696562D6A0 fPush;
  TButtonCompoStyle_::$5D30F44B45B21C4E8317BDEE9C087E43::$CCF9F34BD2E61F59DFA493FF3148D8D6 fCheckbox;
  TButtonCompoStyle_::$5D30F44B45B21C4E8317BDEE9C087E43::$047D6F5FF59444E9A635A1EF314E6023 fRadio;
};

struct TButtonCompoStyle_
{
  slim_int fMargin[4];
  slim_int fBorder;
  slim_int fTextMargin[4];
  TColor fSurfaceColor[3];
  TColor fTextColor[2];
  TColor fDisabledTextColor[2];
  TButtonCompoStyle_::$5D30F44B45B21C4E8317BDEE9C087E43 fStyle;
};

enum $36E453F62AD234ABBD8B979F662659E5 : __int32
{
  WAVE_STATICCOMPO_TYPE_FILLRECT = 0x0,
  WAVE_STATICCOMPO_TYPE_FRAMERECT = 0x1,
  WAVE_STATICCOMPO_TYPE_FRAME3DRECT = 0x2,
  WAVE_STATICCOMPO_TYPE_ETCHEDRECT = 0x3,
  WAVE_STATICCOMPO_TYPE_BITMAP = 0x4,
  WAVE_STATICCOMPO_TYPE_BITMAP_HANDLE = 0x5,
  WAVE_STATICCOMOP_TYPES = 0x6,
};

typedef TConnectionIconContext_ TConnectionIconContext;

struct TConnectionIconContext_
{
  slim_bool fIsAnimating;
  slim_bool fIsConnected;
  TWWWPixelMap fConnectedImage;
  TWWWPixelMap fDisconnectedImage;
};

typedef TConnectStateIconContext_ TConnectStateIconContext;

struct TConnectStateIconContext_
{
  slim_bool fIsConnect;
  slim_int fConnectIconSkinID;
  slim_int fDisconnectIconSkinID;
};

typedef TSSLIconContext_ TSSLIconContext;

struct TSSLIconContext_
{
  slim_bool fIsSSL;
  slim_int fSSLIconSkinID;
  slim_int fNonSSLIconSkinID;
};

enum $C81F4D393425AB189AF537DF1811BB92 : __int32
{
  BROWSER_MENU_ITEM_PAGETASKS_SET_TO_HOMEPAGE = 0x0,
  BROWSER_MENU_ITEM_NAVIGATION_PAGE_MEMO = 0x1,
  BROWSER_MENU_ITEM_PAGETASKS_SAVE_AS_PAGEMEMO = 0x2,
  BROWSER_MENU_ITEM_SAVE_AS_LINK = 0x3,
  BROWSER_MENU_ITEM_PAGETASKS_TRANSLATE = 0x4,
  BROWSER_MENU_ITEM_PAGETASKS_NEXT_FRAME = 0x5,
  BROWSER_MENU_ITEM_PAGETASKS_LINE_CONNECT = 0x6,
  BROWSER_MENU_ITEM_NAVIGATION_EXIT = 0x7,
};

enum $17EC6942740AF8E93698C6C22E786734 : __int32
{
  BROWSER_MENU_ITEM_VIEW_RENDERING = 0x0,
  BROWSER_MENU_ITEM_VIEW_TEXT_SIZE = 0x1,
  BROWSER_MENU_ITEM_VIEW_VIEW_MAG = 0x2,
  BROWSER_MENU_ITEM_VIEW_CHARCODE = 0x3,
  BROWSER_MENU_ITEM_VIEW_VIEW_DETAIL = 0x4,
  BROWSER_MENU_ITEM_VIEW_PAGE_INFO = 0x5,
  BROWSER_MENU_ITEM_VIEW_SERVER_CERT = 0x6,
};

enum $F58BCD8B90FD601DED43D9C3BF338A30 : __int32
{
  PAGEMEMO_MENU_ACTION_OPEN_IN_NEW_TAB = 0x0,
  PAGEMEMO_MENU_ACTION_EDIT = 0x1,
  PAGEMEMO_MENU_ACTION_TITLE_URL = 0x2,
  PAGEMEMO_MENU_ACTION_MOVE_UP = 0x3,
  PAGEMEMO_MENU_ACTION_MOVE_DOWN = 0x4,
  PAGEMEMO_MENU_ACTION_DELETE = 0x5,
  PAGEMEMO_MENU_ACTION_DELETEALL = 0x6,
  PAGEMEMO_MENU_ACTIONS = 0x7,
};

enum $61A6FFBBA4C62D32F8476A2C82344C9B : __int32
{
  PAGEMEMODIALOG_SUBMENU_ITEM_OPEN_IN_NEW_TAB = 0x0,
  PAGEMEMODIALOG_SUBMENU_ITEM_EDIT = 0x1,
  PAGEMEMODIALOG_SUBMENU_ITEM_TITLE_URL = 0x2,
  PAGEMEMODIALOG_SUBMENU_ITEM_MOVEUP = 0x3,
  PAGEMEMODIALOG_SUBMENU_ITEM_MOVEDOWN = 0x4,
  PAGEMEMODIALOG_SUBMENU_ITEM_DELETE = 0x5,
  PAGEMEMODIALOG_SUBMENU_ITEM_DELETEALL = 0x6,
  PAGEMEMODIALOG_SUBMENU_ITEMS = 0x7,
};

enum $8CA395341CFE4334A5D767123EA9657E : __int32
{
  PAGEMEMODIALOG_EDITDIALOGMODE_EDIT = 0x0,
  PAGEMEMODIALOG_EDITDIALOGMODE_DELETE_CONFIRM = 0x1,
  PAGEMEMODIALOG_EDITDIALOGMODES = 0x2,
};

typedef TPageMemoListEntry_ TPageMemoListEntry;

struct TPageMemoListEntry_
{
  TURLString fURL;
  TString fTitle;
  TString fFile;
  slim_int fSize;
  slim_time fTime;
  slim_int fCharset;
  slim_int fFlag;
  slim_opaque fUserData;
};

enum $923F1C4E5EEB761C5AE7AC1B4D166458 : __int32
{
  SEARCH_MENU_ICON_KIND_WEB = 0x0,
  SEARCH_MENU_ICON_KIND_DOMESTIC = 0x1,
  SEARCH_MENU_ICON_KIND = 0x2,
};

enum $1866CAD23E8019913F8343A888DB42EC : __int32
{
  SEARCH_MENU_STATUS_NORMAL = 0x0,
  SEARCH_MENU_STATUS_FOCUSED = 0x1,
  SEARCH_MENU_STATUS = 0x2,
};

typedef TTabSelectFrameInfo_ TTabSelectFrameInfo;

struct TTabSelectFrameInfo_
{
  slim_int fSkinID;
  slim_int fBorderWidth;
};

typedef TTabSelectWndSubMenuInfo_ TTabSelectWndSubMenuInfo;

struct TTabSelectWndSubMenuInfo_
{
  slim_int fNameID;
  slim_int fIconID[2];
};

enum $E3CE3D727BCC6D0D7B26A5F0044D6721 : __int32
{
  WAVE_LABELCOMPO_VALIGN_TOP = 0x0,
  WAVE_LABELCOMPO_VALIGN_MIDDLE = 0x1,
  WAVE_LABELCOMPO_VALIGN_BOTTOM = 0x2,
  WAVE_LABELCOMPO_VALIGNS = 0x3,
};

enum $E90D61EADE027F8E70E4A15B2740046D : __int32
{
  TABSELECT_NUM_STATE_1 = 0x0,
  TABSELECT_NUM_STATE_2 = 0x1,
  TABSELECT_NUM_STATE_3 = 0x2,
  TABSELECT_NUM_STATE_4 = 0x3,
  TABSELECT_NUM_STATE_5 = 0x4,
  TABSELECT_NUM_STATE = 0x5,
};

enum $F749208605312D45FF92C25111293A8A : __int32
{
  TABSELECT_STATE_1 = 0x0,
  TABSELECT_STATE_2 = 0x1,
  TABSELECT_STATE_3 = 0x2,
  TABSELECT_STATE_4 = 0x3,
  TABSELECT_STATE_5 = 0x4,
  TABSELECT_STATE = 0x5,
};

enum $7D4B7B89F732FE90744E304B1FF4CA5E : __int32
{
  TABSELECT_SKIN_LEFT = 0x0,
  TABSELECT_SKIN_RIGHT = 0x1,
  TABSELECT_SKIN = 0x2,
};

enum $9AD5B6C8B05ABC2B668749C5C801DFC0 : __int32
{
  TABSELECT_SUBMENU_NORMAL = 0x0,
  TABSELECT_SUBMENU_SELECTED = 0x1,
  TABSELECT_SUBMENU_STATUS = 0x2,
};

enum $EC0E04CB1055396FEF54E5C4E72E0B9E : __int32
{
  TABSELECT_SUBMENU_LEFT = 0xFFFFFFFD,
  TABSELECT_SUBMENU_RIGHT = 0xFFFFFFFE,
  TABSELECT_SUBMENU_CANCEL = 0xFFFFFFFF,
  TABSELECT_SUBMENU_OPEN = 0x0,
  TABSELECT_SUBMENU_CLOSE = 0x1,
  TABSELECT_SUBMENU = 0x2,
};

typedef slim_handle TTabSelectWnd;

typedef iTTabSelectWnd_ iTTabSelectWnd;

struct __attribute__((aligned(8))) iTTabSelectWnd_
{
  TStandardBrowser fBrowser;
  TWnd fBorderWnd[4];
  TWnd fPopupWnd;
  slim_int fSkinID[4];
  TWnd fOwner;
  TColor fBorderColor;
  slim_int fBorderSize[4];
};

typedef TTabMenuButtonContext_ TTabMenuButtonContext;

struct TTabMenuButtonContext_
{
  TStandardBrowser fBrowser;
};

enum $7D8117FAB8ABD6927789CDA6892E3BBA : __int32
{
  SEARCHDIALOG_POSITION_TOP = 0x0,
  SEARCHDIALOG_POSITION_BOTTOM = 0x1,
  SEARCHDIALOG_POSITIONS = 0x2,
};

typedef TTranslateDialogInfo_ TTranslateDialogInfo;

struct TTranslateDialogInfo_
{
  slim_int fDialogID;
  slim_int fChoiceID;
  slim_int fOpenInNewTabButtonID;
};

enum $05D222A8CC06AF52777167A36E5095BE : __int32
{
  VISITHISTORYDIALOG_SUBMENU_ITEM_OPEN_IN_NEW_TAB = 0x0,
  VISITHISTORYDIALOG_SUBMENU_ITEM_TITLE_URL = 0x1,
  VISITHISTORYDIALOG_SUBMENU_ITEM_DELETE = 0x2,
  VISITHISTORYDIALOG_SUBMENU_ITEM_DELETEALL = 0x3,
  VISITHISTORYDIALOG_SUBMENU_ITEMS = 0x4,
};

typedef TBrowserVisitEntry_ TBrowserVisitEntry;

struct TBrowserVisitEntry_
{
  slim_opaque fHashNext;
  TURLString fURL;
  TString fTitle;
  slim_int fCharSet;
  slim_time fLastVisitTime;
  slim_bool fRootDoc;
};

enum $816B904BB5B373074FAFF7056128D49F : __int32
{
  VP_MENU_ICON_KIND_POINTER = 0x0,
  VP_MENU_ICON_KIND_DRAG = 0x1,
  VP_MENU_ICON_KIND = 0x2,
};

enum $D70FDFF0C91097220EF089DDC80E3744 : __int32
{
  VP_MENU_STATUS_NORMAL = 0x0,
  VP_MENU_STATUS_FOCUSED = 0x1,
  VP_MENU_STATUS = 0x2,
};

enum $39B54C54CE9E1DA24F5E74D2E39A62A9 : __int32
{
  VP_MENU_ID_ONOFF = 0x0,
  VP_MENU_ID_MODE = 0x1,
  VP_MENU_IDS = 0x2,
};

enum $E87B4A6E5FD4E171067E69D883277B1C : __int32
{
  BROWSERLIB_PLATEVP_MODE_NORMAL = 0x0,
  BROWSERLIB_PLATEVP_MODE_DRAG = 0x1,
  BROWSERLIB_PLATEVP_MODES = 0x2,
};

typedef TWebSearchDialogInfo_ TWebSearchDialogInfo;

struct TWebSearchDialogInfo_
{
  slim_int fDialogID;
  slim_int fEditID;
  slim_int fOpenInNewTabButtonID;
  slim_int fMaxLength;
};

typedef TCertFlags_ TCertFlags;

struct TCertFlags_
{
  slim_int fFlag;
  slim_int fRecFlag;
};

enum $43538A951275C1BB276653A8B9B3D050 : __int32
{
  WAVE_TABLECOMPO_FLAG_MULTISELECT = 0x1,
  WAVE_TABLECOMPO_FLAG_ROWSELECT = 0x2,
  WAVE_TABLECOMPO_FLAG_COLUMNSELECT = 0x4,
  WAVE_TABLECOMPO_FLAG_ROWHEADER = 0x8,
  WAVE_TABLECOMPO_FLAG_COLUMNHEADER = 0x10,
  WAVE_TABLECOMPO_FLAGS = 0x11,
};

enum $6E943EA78FE3987C9D840DBBA84EB0CF : __int32
{
  WAVE_TABLECOMPO_SFLAG_TOGGLE = 0x1,
  WAVE_TABLECOMPO_SFLAG_CLEARALL = 0x2,
  WAVE_TABLECOMPO_SFLAG_ALLROW = 0x4,
  WAVE_TABLECOMPO_SFLAG_ALLCOLUMN = 0x8,
  WAVE_TABLECOMPO_SFLAGS = 0x9,
};

typedef TLabelCompoStyle_ TLabelCompoStyle;

struct TLabelCompoStyle_
{
  slim_int fMargin[4];
  slim_int fTextMargin[4];
  TColor fTextColor;
};

enum $F128A471B89E9F67A9A66821BAEF72F7 : __int32
{
  NETIF_STATE_ERROR = 0xFFFFFFFF,
  NETIF_STATE_DORMANT = 0x0,
  NETIF_STATE_CONNECTING = 0x1,
  NETIF_STATE_UP = 0x2,
  NETIF_STATE_DISCONNECTING = 0x3,
  NETIF_STATE_TIMEOUT = 0x4,
  NETIF_STATES = 0x5,
};

typedef SceRtcDateTime SceRtcDateTime_0;

struct SceRtcDateTime
{
  unsigned __int16 year;
  unsigned __int16 month;
  unsigned __int16 day;
  unsigned __int16 hour;
  unsigned __int16 minute;
  unsigned __int16 second;
  unsigned int microsecond;
};

typedef TAnimationIconContext_ TAnimationIconContext;

struct __attribute__((aligned(8))) TAnimationIconContext_
{
  slim_int fFrameNum;
  slim_int fCurrentFrameNum;
  slim_handle *fPixelMapArray;
  slim_opaque fUserData;
  slim_int fTimerInterval;
  slim_int fTickCount;
  slim_bool fPainted;
};

enum nWin32Detour::eventFlag::eStatus : __int32
{
  STATUS_FREE = 0x0,
  STATUS_NOTIFIED = 0x1,
  STATUS_RECEIVED = 0x2,
};

struct MtCollisionEpa<MtGeomConvex,MtGeomConvex>
{
  MtVector3 *mpVertexBufferCSO;
  MtVector3 *mpVertexBufferA;
  MtVector3 *mpVertexBufferB;
  u16 mVertexNum;
  MtCollisionUtil::EpaFace *mpFaceBuffer;
  u32 mFaceBufferNum;
  MtCollisionUtil::EpaFace *mpFaceUseList[128];
  u16 mFaceUseListNum;
  MtCollisionUtil::EpaFace *mpFaceNoUseList[128];
  u32 mFaceNoUseListNum;
  MtCollisionUtil::EpaExpandEdge mEdgeBuffer[64];
  u32 mEdgeBufferNum;
  f32 mEpsilon;
};

struct MtReplaceFunc::detail::lookup_table
{
  __int8 gap0[1];
};

struct MtSH
{
  __int8 gap0[1];
};

struct __cppobj MtCollisionUtil::MtArrayElement : MtObject
{
  MT_CHAR mName[64];
  const MtDTI *mpParamDti;
  void *mpParam;
  u16 mType;
  bool mFlgUndefineAllocate;
  u32 mParamNum;
};

struct __cppobj MtCollisionUtil::MtArrayElement::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtDataBuffer : MtObject
{
  void *mpData;
  u16 mSize;
  u16 mMax;
};

struct __cppobj MtCollisionUtil::MtDataBuffer::MyDTI : MtDTI
{
};

struct MtCollisionUtil::MtStack
{
  void *mpTotalBuffer;
  void *mpUsingBuffer;
  void **mppPushBuffer;
  void **mppNoUseBuffer;
  u32 mElementSize;
  u32 mTotalBufferNum;
  u32 mUseStackNum;
  u32 mNoUseStackNum;
};

struct __cppobj MtCollisionUtil::MtFuncBase : MtObject
{
  MT_CHAR *mpName;
  MtObject *mpOwner;
};

struct __cppobj MtCollisionUtil::MtFuncBase::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtFunc : MtCollisionUtil::MtFuncBase
{
  MT_MFUNC mRegistParam;
  _BYTE gap20[8];
};

struct __cppobj MtCollisionUtil::MtFunc::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtFunc32 : MtCollisionUtil::MtFuncBase
{
  MT_MFUNC32 mRegistParam;
  _BYTE gap20[8];
  u32 mSendParamDefault;
};

struct __cppobj MtCollisionUtil::MtFunc32::MyDTI : MtDTI
{
};

struct __cppobj MtCollisionUtil::MtFunc32X2 : MtCollisionUtil::MtFuncBase
{
  MT_MFUNC32X2 mRegistParam;
  _BYTE gap20[8];
  u32 mSendParamDefault0;
  u32 mSendParamDefault1;
};

struct __cppobj MtCollisionUtil::MtFunc32X2::MyDTI : MtDTI
{
};

typedef void (*MtCollisionUtil::MT_FUNC_PTR)(MtObject *, void *);

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtFuncPtr : MtCollisionUtil::MtFuncBase
{
  MtCollisionUtil::MT_FUNC_PTR mRegistParam;
  _BYTE gap20[8];
};

struct __cppobj MtCollisionUtil::MtFuncPtr::MyDTI : MtDTI
{
};

typedef void (*MtCollisionUtil::MT_FUNC_PTR_32)(MtObject *, void *, u32);

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtFuncPtr32 : MtCollisionUtil::MtFuncBase
{
  MtCollisionUtil::MT_FUNC_PTR_32 mRegistParam;
  _BYTE gap20[8];
};

struct __cppobj MtCollisionUtil::MtFuncPtr32::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtListElement : MtObject
{
  MtString mName;
  MtObject *mpObject;
  MtCollisionUtil::MtListElement *mpNext;
  MtCollisionUtil::MtListElement *mpBack;
  bool mFlgAutoDelete;
};

struct __cppobj MtCollisionUtil::MtListElement::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtList : MtObject
{
  MtCollisionUtil::MtListElement *mpRoot;
  MtCollisionUtil::MtListElement *mpTail;
  bool mFlgAutoDelete;
};

struct __cppobj MtCollisionUtil::MtList::MyDTI : MtDTI
{
};

struct __cppobj __attribute__((aligned(8))) MtCollisionUtil::MtTreeDTI : MtTree
{
};

struct __cppobj MtCollisionUtil::MtTreeDTI::MyDTI : MtDTI
{
};

typedef void (*MtCollisionUtil::MT_FUNC_STRING_U32_PTR)(MtObject *, MT_CTSTR, u32, void *);

struct __cppobj MtGeomAABB4 : MtGeometry
{
  __attribute__((aligned(8))) MtAABB4 mAABB4;
};

struct __cppobj MtGeomAABB4::MyDTI : MtDTI
{
};

typedef ptrdiff_t ptrdiff;

struct __cppobj MtNetAchievement::cTrophyRegisterContextThread : MtThread
{
};

struct __cppobj MtNetAchievement::cTrophyWriteThread : MtThread
{
};

struct __cppobj MtNetAchievement::cTrophyReadThread : MtThread
{
};

enum MtNetAchievement::moveGetInfo::$7FA7B106A7E53C2DB7312A825EB48542 : __int32
{
  Phase_Check = 0x0,
  Phase_ReadReq = 0x1,
  Phase_ReadWait = 0x2,
  Phase_OkCb = 0x3,
  Phase_ErrCb = 0x4,
};

enum MtNetAchievement::moveAward::$8DC012EDCB32249A564E5892FFD4E399 : __int32
{
  Phase_Check_0 = 0x0,
  Phase_WriteReq = 0x1,
  Phase_WriteWait = 0x2,
  Phase_OkCb_0 = 0x3,
  Phase_ErrCb_0 = 0x4,
};

enum MtNetAchievement::moveGetInfoList::$6C00306420DC2175841D260886309E8A : __int32
{
  Phase_Check_1 = 0x0,
  Phase_ReadReq_0 = 0x1,
  Phase_ReadWait_0 = 0x2,
  Phase_OkCb_1 = 0x3,
  Phase_ErrCb_1 = 0x4,
};

enum MtNetAchievement::moveAwardList::$39A28BDD30EDA4F4CAA260D1A4A87C94 : __int32
{
  Phase_Check_2 = 0x0,
  Phase_WriteReq_0 = 0x1,
  Phase_WriteWait_0 = 0x2,
  Phase_OkCb_2 = 0x3,
  Phase_ErrCb_2 = 0x4,
};

typedef int32_t SceNpTrophyHandle;

typedef int32_t SceNpTrophyId;

typedef uint16_t SceNpPartyRoomEventType;

typedef SceNpPartyMemberVoiceInfo SceNpPartyMemberVoiceInfo_0;

typedef uint8_t SceNpPartyBinaryMessageEvent;

struct __cppobj MtNet::Local::Storage : MtNetStorage2
{
  MtNetStorageList mStorageList;
  bool mIsEnable;
  MtFile *mpFile;
  MT_CHAR mFileName[256];
  MtString mPath;
};

enum MtNet::Local::Storage::$D779FF3C32550D12CE8321788818F873 : __int32
{
  TYPE_NONE_2 = 0x0,
  TYPE_TITLE = 0x1,
  TYPE_USER = 0x2,
};

struct SceNetEtherAddr
{
  uint8_t data[6];
};

typedef SceNetEtherAddr SceNetEtherAddr_0;

union SceNetCtlInfo
{
  uint32_t device;
  SceNetEtherAddr_0 ether_addr;
  uint32_t mtu;
  uint32_t link;
  SceNetEtherAddr_0 bssid;
  char ssid[33];
  uint32_t wifi_security;
  int32_t rssi_dbm;
  uint8_t rssi_percentage;
  uint8_t channel;
  uint32_t ip_config;
  char dhcp_hostname[256];
  char pppoe_auth_name[128];
  char ip_address[16];
  char netmask[16];
  char default_route[16];
  char primary_dns[16];
  char secondary_dns[16];
  uint32_t http_proxy_config;
  char http_proxy_server[256];
  uint16_t http_proxy_port;
};

struct SceNpMatching2InitializeParameter
{
  size_t poolSize;
  SceKernelCpumask cpuAffinityMask;
  int32_t threadPriority;
  uint8_t padding[4];
  size_t threadStackSize;
  size_t size;
};

struct SceNpPartyInitializeParam
{
  uint32_t sdkVersion;
};

typedef void (*SceNpPartyRoomEventHandler)(SceNpPartyRoomEventType, const void *, void *);

typedef void (*SceNpPartyVoiceEventHandler)(const SceNpPartyMemberVoiceInfo_0 *, void *);

typedef void (*SceNpPartyBinaryMessageEventHandler)(SceNpPartyBinaryMessageEvent, const void *, void *);

typedef uint8_t SceNpPartyGameSessionEvent;

typedef void (*SceNpPartyGameSessionEventHandler)(SceNpPartyGameSessionEvent, const void *, void *);

struct SceNpPartyEventHandlers
{
  uint32_t sdkVersion;
  uint32_t reserved;
  SceNpPartyRoomEventHandler roomEventHandler;
  SceNpPartyVoiceEventHandler voiceEventHandler;
  SceNpPartyBinaryMessageEventHandler binaryMessageEventHandler;
  SceNpPartyGameSessionEventHandler gameSessionEventHandler;
};

typedef uint8_t SceNpPartyCreateResponseStatus;

struct SceNpPartyCreateResponseInfo
{
  SceNpPartyCreateResponseStatus status;
  uint8_t reserved;
  SceNpPartyRoomMemberId memberId;
  SceUserServiceUserId userId;
  SceNpId_0 npId;
};

typedef uint8_t SceNpPartyShowInvitationResponseStatus;

struct SceNpPartyShowInvitationResponseInfo
{
  SceNpPartyShowInvitationResponseStatus status;
  uint8_t reserved;
  SceNpPartyRoomMemberId memberId;
  SceUserServiceUserId userId;
  SceNpId_0 npId;
  uint8_t reserved2[36];
};

typedef SceNpPartyInitializeParam SceNpPartyInitializeParam_0;

typedef SceNpPartyEventHandlers SceNpPartyEventHandlers_0;

typedef SceNetCtlInfo SceNetCtlInfo_0;

typedef SceNpMatching2InitializeParameter SceNpMatching2InitializeParameter_0;

enum MtNetP2p::$E19E09E424267C2622311E022E991C9C : __int32
{
  PHASE_AUTO_FINALIZE_NONE = 0x0,
  PHASE_AUTO_FINALIZE_DROP = 0x1,
  PHASE_AUTO_FINALIZE_WAIT = 0x2,
  PHASE_AUTO_FINALIZE_END = 0x3,
};

enum MtNetRanking::ScoreList::$0B2DED3F89C28D889EB88D549578B9C4 : __int32
{
  SORT_MODE_NONE = 0x0,
  SORT_MODE_RANK_ASCEND = 0x1,
  SORT_MODE_RANK_DESCEND = 0x2,
};

enum MtNetRanking::$4F1801BB3018947C1EDE6E952AE5F130 : __int32
{
  PHASE_AUTO_FINALIZE_NONE_0 = 0x0,
  PHASE_AUTO_FINALIZE_DROP_0 = 0x1,
  PHASE_AUTO_FINALIZE_WAIT_0 = 0x2,
  PHASE_AUTO_FINALIZE_END_0 = 0x3,
};

enum MtNetRanking::moveUpdate::Phase : __int32
{
  Phase_RecordReq = 0x0,
  Phase_RecordWaitWithAbort = 0x1,
  Phase_RecordWait = 0x2,
  Phase_OkCb_3 = 0x3,
  Phase_ErrCb_3 = 0x4,
};

enum MtNetRanking::moveGetScoreListByRange::$E001717F1576A451D3158384F2A7EA88 : __int32
{
  Phase_GetReq = 0x0,
  Phase_GetWaitWithAbort = 0x1,
  Phase_GetWait = 0x2,
  Phase_OkCb_4 = 0x3,
  Phase_ErrCb_4 = 0x4,
};

enum MtNetRanking::moveGetScoreListByUniqueId::$493F8E6B7358D70724BA598C990DF045 : __int32
{
  Phase_GetReq_0 = 0x0,
  Phase_GetWaitWithAbort_0 = 0x1,
  Phase_GetWait_0 = 0x2,
  Phase_OkCb_5 = 0x3,
  Phase_ErrCb_5 = 0x4,
};

enum MtNetRanking::moveGetAttach::$97704A04F86135E5802156657672ECD2 : __int32
{
  Phase_GetReq_1 = 0x0,
  Phase_GetWaitWithAbort_1 = 0x1,
  Phase_GetWait_1 = 0x2,
  Phase_OkCb_6 = 0x3,
  Phase_ErrCb_6 = 0x4,
};

enum MtNetRequest::$62B1777E2A3209CB6F5346CBC6302D23 : __int32
{
  STATUS_NONE = 0x0,
  STATUS_START = 0x1,
  STATUS_MOVE = 0x2,
  STATUS_END = 0x3,
  STATUS_START_FAIL = 0x4,
};

enum MtNetSession::$441AD410488FC9DF62460B44EE681D3E : __int32
{
  PHASE_AUTO_FINALIZE_NONE_1 = 0x0,
  PHASE_AUTO_FINALIZE_DROP_1 = 0x1,
  PHASE_AUTO_FINALIZE_WAIT_1 = 0x2,
  PHASE_AUTO_FINALIZE_END_1 = 0x3,
};

enum MtNetStorage2::$C88FA299CCD1CBD9698E3637F2980313 : __int32
{
  PHASE_AUTO_FINALIZE_NONE_2 = 0x0,
  PHASE_AUTO_FINALIZE_DROP_2 = 0x1,
  PHASE_AUTO_FINALIZE_WAIT_2 = 0x2,
  PHASE_AUTO_FINALIZE_END_2 = 0x3,
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(4))) MtNetP2p:1568 : MtNetObject, MtNetRequestController::Listener
{
  MtNetContext *mpContext;
  MtNetRequestController mRequestController;
  bool mIsDestructor;
  _BYTE gapB1[7];
  MtNetP2p::Listener *mpListener;
  s32 mPhaseAutoFinalize;
};

struct MtNet::Lamm::P2p::Peer
{
  bool mIsUse;
  bool mIsEnable;
  MtNetAddress mAddress;
};

struct __cppobj MtNet::Lamm::P2p : MtNetP2p:1568
{
  s32 mSocketLib;
  MtNetSocket *mpSocket;
  u8 mTempRecvBuffer[1024];
  MtNet::Lamm::P2p::Peer mPeer[16];
};

enum MtNetSocket::$B26577302D30F7BBF4125F76C7E291FE : __int32
{
  TYPE_NONE_3 = 0x0,
  TYPE_TCP = 0x1,
  TYPE_UDP = 0x2,
  TYPE_SSL = 0x3,
};

enum MtNetSocket::$F620639AEB657BD08665E3955D300019 : __int32
{
  OPTION_NONE = 0x0,
  OPTION_TCP_NO_DELAY = 0x2,
};

enum MtNet::Lamm::P2p::movePeerConnect::$769568EDC61D10B33B87A4EF919B328E : __int32
{
  _PHASE_INIT = 0x0,
  _PHASE_WAIT = 0x1,
  _PHASE_ERR_CB = 0x2,
};

struct __attribute__((aligned(8))) MtNet::Lamm::Session::Peer
{
  s32 mTag;
  bool mIsLocal;
  bool mIsHost;
  bool mCanHost;
  bool mIsFirst;
  bool mIsPrivate;
  u32 mNonce;
  MtNetUniqueId mUniqueId;
  MtNetSessionInfo::General mGeneral;
  MtNetAddress mAddress;
  MtNetPort mPortPrivate;
  MT_CHAR mUsername[32];
};

struct MtNet::Lamm::Session::Session_t
{
  MtNetSessionInfo mSessionInfo;
  MT_CHAR mName[32];
  bool mIsLock;
  MtNetAddress mHostAddress;
  bool mIsHost;
  bool mIsCreate;
  bool mIsInGame;
  bool mIsHostEstablish;
  MtNet::Lamm::Session::Peer mLocal;
  bool mIsAnsReceived;
  s32 mReqResult;
};

struct __attribute__((aligned(8))) MtNet::Lamm::Session::SessionMember
{
  MtNet::Lamm::Session::Peer mPeer;
  bool mIsInSession;
  bool mNtcMemberCandidacy;
  u32 mAttribute;
  bool mIsFirst;
  bool mIsJoin;
  MtNetSession::Member mMember;
  MtNetP2pConnectInfo mP2pInfo;
  u32 mP2pReqSeq;
  s32 mP2pConnectId;
  u8 mP2pPhase;
};

struct MtNet::Lamm::Session::HostMigration
{
  u32 mPhase;
  MtNetTime::Total mTime;
};

struct __cppobj __attribute__((aligned(8))) MtNet::Lamm::Session : MtNetSession
{
  MtNet::Lamm::Session::Session_t mSession;
  MtNet::Lamm::Session::SessionMember mSessionMember[16];
  MtNet::Lamm::Session::SessionMember *mpSelfMember;
  MtNet::Lamm::Session::SessionMember *mpHostMember;
  MtNet::Lamm::Session::SessionMember *mpTmpHostMember;
  MtNetSession::SearchKeyFilterList mFilterList;
  MtNetSession::SearchResultList mSearchResultList;
  MtNetSession::Ping mSearchPing[32];
  s32 mSearchMaxNum;
  u32 mSearchSequence;
  u32 mSearchOptionFlag;
  MtNetTime::Total mSearchStartTime;
  u32 mSearchAnsBinaryNum;
  u8 mPrivateMsgBuffer[65536];
  u8 *mpPrivateMsgBuffer;
  u32 mPrivateMsgBufferSize;
  u8 mRbuf[1024];
  MtNet::Lamm::Session::HostMigration mHostMigration;
  MtNetAddress mAddressPublic;
  MtNetAddress mAddressPrivate;
  MtNetAddress mAddressP2p;
  s32 mSocketLib;
  MtNetSocket *mpSocketPublic;
  MtNetSocket *mpSocketPrivate;
  bool mCanHost;
};

enum MtNet::Lamm::Session::$1CC2AAA26DC213E99C14E90E89B1182A : __int32
{
  JOIN_RESULT_SUCCEED = 0x0,
  JOIN_RESULT_LOCKED = 0x80050385,
  JOIN_RESULT_FULL = 0x80050384,
  JOIN_RESULT_DUPLICATE_JOIN = 0x80050389,
  JOIN_RESULT_INCOMPATIBLE = 0x8005038C,
};

enum MtNet::Lamm::Session::$B6462446A657265A0C740256F5ABC224 : __int32
{
  P2P_PHASE_DISCONNECT = 0x0,
  P2P_PHASE_CONNECTING = 0x1,
  P2P_PHASE_ESTABLISH = 0x2,
};

struct __attribute__((aligned(4))) MtNet::Lamm::Session::PrivateMsgHeader
{
  s32 size;
  MtNetAddress from;
};

enum MtNetError::$3376744645C395C47CC3B10E3EAAD8FC : __int32
{
  ECAUSE_NONE = 0x0,
  ECAUSE_XBOX = 0x1000000,
  ECAUSE_XBOX_XENUMERATE = 0x1010001,
  ECAUSE_XBOX_XFRIENDS_CREATE_ENUMERATOR = 0x1020001,
  ECAUSE_XBOX_XNET_CONNECT = 0x1030001,
  ECAUSE_XBOX_XNET_CREATE_KEY = 0x1030002,
  ECAUSE_XBOX_XNET_GET_BROADCAST_VERSION_STATUS = 0x1030003,
  ECAUSE_XBOX_XNET_GET_CONNECT_STATUS = 0x1030004,
  ECAUSE_XBOX_XNET_QOS_LOOKUP = 0x1030005,
  ECAUSE_XBOX_XNET_REGISTER_KEY = 0x1030006,
  ECAUSE_XBOX_XNET_REPLACE_KEY = 0x1030007,
  ECAUSE_XBOX_XNET_XNADDR_TO_INADDR = 0x1030008,
  ECAUSE_XBOX_XNET_DNS_LOOKUP = 0x1030009,
  ECAUSE_XBOX_XSESSION_ARBITRATION_REGSITER = 0x1040001,
  ECAUSE_XBOX_XSESSION_CREATE = 0x1040002,
  ECAUSE_XBOX_XSESSION_DELETE = 0x1040003,
  ECAUSE_XBOX_XSESSION_END = 0x1040004,
  ECAUSE_XBOX_XSESSION_JOIN_LOCAL = 0x1040005,
  ECAUSE_XBOX_XSESSION_JOIN_REMOTE = 0x1040006,
  ECAUSE_XBOX_XSESSION_LEAVE_LOCAL = 0x1040007,
  ECAUSE_XBOX_XSESSION_LEAVE_REMOTE = 0x1040008,
  ECAUSE_XBOX_XSESSION_MIGRATE_HOST = 0x1040009,
  ECAUSE_XBOX_XSESSION_MODIFY = 0x104000A,
  ECAUSE_XBOX_XSESSION_SEARCH_EX = 0x104000B,
  ECAUSE_XBOX_XSESSION_SEARCH_BY_ID = 0x104000C,
  ECAUSE_XBOX_XSESSION_START = 0x104000D,
  ECAUSE_XBOX_XSESSION_WRITE_STATS = 0x104000E,
  ECAUSE_XBOX_XSOCKET_BIND = 0x1050001,
  ECAUSE_XBOX_XSOCKET_CREATE = 0x1050002,
  ECAUSE_XBOX_XSOCKET_IOCTL_SOKCET = 0x1050003,
  ECAUSE_XBOX_XSOCKET_SET_SOCK_OPT = 0x1050004,
  ECAUSE_XBOX_XSTORAGE_BUILD_SERVER_PATH = 0x1060001,
  ECAUSE_XBOX_XSTORAGE_BUILD_SERVER_PATH_BY_XUID = 0x1060002,
  ECAUSE_XBOX_XSTORAGE_DELETE = 0x1060003,
  ECAUSE_XBOX_XSTORAGE_DOWNLOAD_TO_MEMORY = 0x1060004,
  ECAUSE_XBOX_XSTORAGE_ENUMERATE = 0x1060005,
  ECAUSE_XBOX_XSTORAGE_UPLOAD_FROM_MEMORY = 0x1060006,
  ECAUSE_XBOX_XSHOW_FRIENDS_UI = 0x1070001,
  ECAUSE_XBOX_XSHOW_GAME_INVITE_UI = 0x1070002,
  ECAUSE_XBOX_XSHOW_SIGNIN_UI = 0x1070003,
  ECAUSE_XBOX_XSTRING_VERIFY = 0x1080001,
  ECAUSE_XBOX_XUSER_CREATE_STATS_ENUMERATOR_BY_RANK = 0x1090001,
  ECAUSE_XBOX_XUSER_CREATE_STATS_ENUMERATOR_BY_XUID = 0x1090002,
  ECAUSE_XBOX_XUSER_ESTIMATE_RANK_FOR_RATING = 0x1090003,
  ECAUSE_XBOX_XUSER_READ_STATS = 0x1090004,
  ECAUSE_XBOX_XUSER_READ_PROFILE_SETTINGS = 0x1090005,
  ECAUSE_XBOX_XUSER_READ_PROFILE_SETTINGS_BY_XUID = 0x1090006,
  ECAUSE_XBOX_XUSER_WRITE_ACHIEVEMENTS = 0x1090007,
  ECAUSE_WINDOWS = 0x2000000,
  ECAUSE_PS3 = 0x3000000,
  ECAUSE_GFWL = 0x4000000,
  ECAUSE_GFWL_XLIVE_CREATE_PROTECTED_DATA_CONTEXT = 0x4010001,
  ECAUSE_GFWL_XLIVE_QUERY_PROTECTED_DATA_INFORMATION = 0x4010002,
  ECAUSE_5 = 0x5000000,
  ECAUSE_6 = 0x6000000,
  ECAUSE_VITA = 0x7000000,
  ECAUSE_XBOXONE = 0xD000000,
  ECAUSE_XBOXONE_MULTIPLAYER_WRITE_SESSION_ASYNC = 0xD010001,
  ECAUSE_XBOXONE_PARTY_REGISTER_GAME_SESSION_ASYNC = 0xD020001,
};

enum MtNet::Lamm::Session::moveHostMigration::$64A3D19CE13B5818BC036BF81F590757 : __int32
{
  _PHASE_INIT_0 = 0x0,
  _PHASE_ESTAB_WAIT = 0x1,
  _PHASE_MIGRATE_TMP_HOST_WAIT = 0x2,
  _PHASE_MIGRATE_SELF = 0x3,
  _PHASE_MIGRATE_SESSION_WAIT = 0x4,
  _PHASE_OK_CB = 0x5,
  _PHASE_ERR_CLR = 0x6,
};

enum MtNet::Lamm::Session::moveCreate::$3B345BEB231D1FE50548BDF02B515FE0 : __int32
{
  _PHASE_INIT_1 = 0x0,
  _PHASE_CREATE = 0x1,
  _PHASE_CREATE_WAIT = 0x2,
  _PHASE_JOIN_LOCAL = 0x3,
  _PHASE_ESTAB_WAIT_0 = 0x4,
  _PHASE_OK_CB_0 = 0x5,
  _PHASE_ERR_CLR_0 = 0x6,
  _PHASE_ERR_CB_0 = 0x7,
};

enum MtNet::Lamm::Session::moveSearch::$4D77390E9B39460183BF0FEB61880288 : __int32
{
  _PHASE_CHECK = 0x0,
  _PHASE_INIT_2 = 0x1,
  _PHASE_SEARCH_WAIT = 0x2,
  _PHASE_BINARY_WAIT = 0x3,
  _PHASE_OK_CB_1 = 0x4,
  _PHASE_ERR_CLR_1 = 0x5,
  _PHASE_ERR_CB_1 = 0x6,
};

enum MtNet::Lamm::Session::moveJoin::$07D2CFE2343F43A538A47F8BB0F20431 : __int32
{
  _PHASE_CHECK_0 = 0x0,
  _PHASE_INIT_3 = 0x1,
  _PHASE_CREATE_0 = 0x2,
  _PHASE_REQ_JOIN_SEND = 0x3,
  _PHASE_ANS_JOIN_WAIT = 0x4,
  _PHASE_ESTAB_WAIT_1 = 0x5,
  _PHASE_OK_CB_2 = 0x6,
  _PHASE_ERR_CLR_2 = 0x7,
  _PHASE_ERR_CB_2 = 0x8,
};

enum MtNet::Lamm::Session::moveFinalize::$6B6C82D88E40F334E30C99EFAE8C6B0F : __int32
{
  _PHASE_CHECK_1 = 0x0,
  _PHASE_CLOSE = 0x1,
  _PHASE_OK_CB_3 = 0x2,
};

enum MtNet::Lamm::Session::moveLock::$4087C4B159D4262EB84DB9DD40351D42 : __int32
{
  _PHASE_INIT_4 = 0x0,
  _PHASE_LOCK = 0x1,
  _PHASE_OK_CB_4 = 0x2,
  _PHASE_ERR_CB_3 = 0x3,
};

enum MtNet::Local::Storage::moveGetList::$296E6589535CA50394F467EE7E88211E : __int32
{
  _PHASE_INIT_5 = 0x0,
  _PHASE_ERR_CB_4 = 0x1,
};

enum MtNet::Local::Storage::moveUnlink::$4AC2089BCBBCC0F4A8C9EC5B28EF6B98 : __int32
{
  _PHASE_INIT_6 = 0x0,
  _PHASE_ERR_CB_5 = 0x1,
};

enum MtNet::Local::Storage::moveOpen::$0EF7D479DB534DFA62361CCDEE48DD31 : __int32
{
  _PHASE_INIT_7 = 0x0,
  _PHASE_ERR_CB_6 = 0x1,
};

enum MtNet::Local::Storage::moveWrite::$41CD8BBDE860FD255A2495220E5C2EBD : __int32
{
  _PHASE_INIT_8 = 0x0,
  _PHASE_ERR_CB_7 = 0x1,
};

enum MtNet::Local::Storage::moveRead::$EA209E99808913AEB44D29A4FF28E43A : __int32
{
  _PHASE_INIT_9 = 0x0,
  _PHASE_ERR_CB_8 = 0x1,
};

struct SceNpParentalControlInfo
{
  bool contentRestriction;
  bool chatRestriction;
  bool ugcRestriction;
};

typedef SceNpParentalControlInfo SceNpParentalControlInfo_0;

struct __cppobj MtNet::PS4Psn::Context : MtNetContext
{
  s32 mXfUserNo;
  SceUserServiceUserId mStartSceUserId;
  bool mIsStartSucceed;
  s32 mCountry;
  MtNetFriendList mFriendList;
  s32 mSignInLevel;
  int mNpAsyncRequestId;
  SceNpId_0 mNpSelfId;
  int8_t mNpParentalControlAge;
  SceNpParentalControlInfo_0 mNpParentalControlInfo;
  MtNetUniqueId mUniqueId;
  MtNetTime::Total mStartTimer;
  s32 mStartProgress;
  s32 mStartProgressShow;
  MtNet::Utility::PS4::ReqCtxPtr mWebApiReqCtxPtr;
  int32_t mWebApiServicePushHandleId;
  int32_t mWebApiNormalPushCallbackId;
  int32_t mWebApiServicePushCallbackId;
  bool mFriendUpdateFlag;
  s32 mFriendUpdatePhase;
  MtNetFriendList mFriendUpdateTemp;
  MtNet::Utility::PS4::ReqCtxPtr mFriendReqCtxPtr;
  bool mBlockUpdateFlag;
  s32 mBlockUpdatePhase;
  MtNet::Utility::PS4::BlockList mBlockUpdateTemp;
  MtNet::Utility::PS4::ReqCtxPtr mBlockReqCtxPtr;
};

struct MtNetCountry
{
  __int8 gap0[1];
};

enum MtNetCountry::$E4307BAA13FF49F4E67D05801A68C41C : __int32
{
  NONE_5 = 0x0,
  OTHER = 0x1,
  UNITED_ARAB_EMIRATES = 0x2,
  ALBANIA = 0x3,
  ARMENIA = 0x4,
  ARGENTINA = 0x5,
  AUSTRIA = 0x6,
  AUSTRALIA = 0x7,
  AZERBAIJAN = 0x8,
  BELGIUM = 0x9,
  BULGARIA = 0xA,
  BAHRAIN = 0xB,
  BRUNEI_DARUSSALAM = 0xC,
  BOLIVIA = 0xD,
  BRAZIL = 0xE,
  BELARUS = 0xF,
  BELIZE = 0x10,
  CANADA = 0x11,
  SWITZERLAND = 0x12,
  CHILE = 0x13,
  CHINA = 0x14,
  COLOMBIA = 0x15,
  COSTA_RICA = 0x16,
  CZECH_REPUBLIC = 0x17,
  GERMANY = 0x18,
  DENMARK = 0x19,
  DOMINICAN_REPUBLIC = 0x1A,
  ALGERIA = 0x1B,
  ECUADOR = 0x1C,
  ESTONIA = 0x1D,
  EGYPT = 0x1E,
  SPAIN = 0x1F,
  FINLAND = 0x20,
  FAROE_ISLANDS = 0x21,
  FRANCE = 0x22,
  GREAT_BRITAIN = 0x23,
  GEORGIA = 0x24,
  GREECE = 0x25,
  GUATEMALA = 0x26,
  HONG_KONG = 0x27,
  HONDURAS = 0x28,
  CROATIA = 0x29,
  HUNGARY = 0x2A,
  INDONESIA = 0x2B,
  IRELAND = 0x2C,
  ISRAEL = 0x2D,
  INDIA = 0x2E,
  IRAQ = 0x2F,
  IRAN = 0x30,
  ICELAND = 0x31,
  ITALY = 0x32,
  JAMAICA = 0x33,
  JORDAN = 0x34,
  JAPAN = 0x35,
  KENYA = 0x36,
  KYRGYZSTAN = 0x37,
  KOREA = 0x38,
  KUWAIT = 0x39,
  KAZAKHSTAN = 0x3A,
  LEBANON = 0x3B,
  LIECHTENSTEIN = 0x3C,
  LITHUANIA = 0x3D,
  LUXEMBOURG = 0x3E,
  LATVIA = 0x3F,
  LIBYA = 0x40,
  MOROCCO = 0x41,
  MONACO = 0x42,
  MACEDONIA = 0x43,
  MONGOLIA = 0x44,
  MACAU = 0x45,
  MALDIVES = 0x46,
  MEXICO = 0x47,
  MALAYSIA = 0x48,
  NICARAGUA = 0x49,
  NETHERLANDS = 0x4A,
  NORWAY = 0x4B,
  NEW_ZEALAND = 0x4C,
  OMAN = 0x4D,
  PANAMA = 0x4E,
  PERU = 0x4F,
  PHILIPPINES = 0x50,
  PAKISTAN = 0x51,
  POLAND = 0x52,
  PUERTO_RICO = 0x53,
  PORTUGAL = 0x54,
  PARAGUAY = 0x55,
  QATAR = 0x56,
  ROMANIA = 0x57,
  RUSSIAN_FEDERATION = 0x58,
  SAUDI_ARABIA = 0x59,
  SWEDEN = 0x5A,
  SINGAPORE = 0x5B,
  SLOVENIA = 0x5C,
  SLOVAK_REPUBLIC = 0x5D,
  EL_SALVADOR = 0x5E,
  SYRIA = 0x5F,
  THAILAND = 0x60,
  TUNISIA = 0x61,
  TURKEY = 0x62,
  TRINIDAD_AND_TOBAGO = 0x63,
  TAIWAN = 0x64,
  UKRAINE = 0x65,
  UNITED_STATES = 0x66,
  URUGUAY = 0x67,
  UZBEKISTAN = 0x68,
  VENEZUELA = 0x69,
  VIET_NAM = 0x6A,
  YEMEN = 0x6B,
  SOUTH_AFRICA = 0x6C,
  ZIMBABWE = 0x6D,
  MALTA = 0x6E,
  CYPRUS = 0x6F,
  ANGUILLA = 0x70,
  ANTIGUA_AND_BARBUDA = 0x71,
  ARUBA = 0x72,
  BAHAMA = 0x73,
  BARBADOS = 0x74,
  BRITISH_VIRGIN = 0x75,
  CAYMAN = 0x76,
  COMMONWEALTH_OF_DOMINICAN = 0x77,
  GUIANA = 0x78,
  GRENADA = 0x79,
  GUADELOUPE = 0x7A,
  GUYANA = 0x7B,
  HAITI = 0x7C,
  MARTINIQUE = 0x7D,
  MONTSERRAT = 0x7E,
  ANTILLEN = 0x7F,
  SAINT_KITTS_AND_NEVIS = 0x80,
  SAINT_LUCIA = 0x81,
  SAINT_VINCENT_AND_GRENADINE = 0x82,
  SURINAME = 0x83,
  TURKS_AND_CAICOS = 0x84,
  UNITED_STATES_VIRGIN = 0x85,
  BOSNIA_AND_HERZEGOVINA = 0x86,
  BOTSWANA = 0x87,
  LESOTHO = 0x88,
  MONTENEGRO = 0x89,
  MOZAMBIQUE = 0x8A,
  NAMIBIA = 0x8B,
  SERBIA_AND_KOSOVO = 0x8C,
  SWAZILAND = 0x8D,
  ZAMBIA = 0x8E,
  MAURITANIA = 0x8F,
  MALI = 0x90,
  NIGER = 0x91,
  CHAD = 0x92,
  SUDAN = 0x93,
  ERITREA = 0x94,
  DJIBOUTI = 0x95,
  SOMALIA = 0x96,
  ANDORRA = 0x97,
  GIBRALTAR = 0x98,
  GUERNSEY = 0x99,
  MANN = 0x9A,
  JERSEY = 0x9B,
  SAN_MARINO = 0x9C,
  VATICAN = 0x9D,
  BERMUDA = 0x9E,
  NIGERIA = 0x9F,
  ANGOLA = 0xA0,
  GHANA = 0xA1,
  MAX_NUM = 0xA2,
};

typedef SceNpPeerAddress SceNpPeerAddress_0;

typedef int32_t SceNpPlatformType;

struct SceNpPeerAddress
{
  SceNpOnlineId_0 onlineId;
  SceNpPlatformType platform;
};

enum MtNet::PS4Psn::Context::moveStart::$DA32D9DF32F208D57420EE7B3C9C03F2 : __int32
{
  Phase_InitStartSceUserId = 0x0,
  Phase_InitDialogReq = 0x1,
  Phase_InitDialogWait = 0x2,
  Phase_Check_3 = 0x3,
  Phase_AvailabilityReq = 0x4,
  Phase_AvailabilityWait1 = 0x5,
  Phase_AvailabilityWait2 = 0x6,
  Phase_AvailabilityOk = 0x7,
  Phase_RestrictReq = 0x8,
  Phase_RestrictWait1 = 0x9,
  Phase_RestrictWait2 = 0xA,
  Phase_RestrictOk = 0xB,
  Phase_AuthReq = 0xC,
  Phase_AuthWait1 = 0xD,
  Phase_AuthWait2 = 0xE,
  Phase_AuthOk = 0xF,
  Phase_WebApiInitReq = 0x10,
  Phase_WebApiInitWait = 0x11,
  Phase_WebApiInitOk = 0x12,
  Phase_FriendInitReq = 0x13,
  Phase_FriendInitWait = 0x14,
  Phase_FriendInitOk = 0x15,
  Phase_BlockInitReq = 0x16,
  Phase_BlockInitWait = 0x17,
  Phase_BlockInitOk = 0x18,
  Phase_TitleContext = 0x19,
  Phase_AlreadyStart = 0x1A,
  Phase_TermDialogReq = 0x1B,
  Phase_TermDialogWait = 0x1C,
  Phase_RestrictChatDialogCheck = 0x1D,
  Phase_RestrictChatDialogReq = 0x1E,
  Phase_RestrictChatDialogWait = 0x1F,
  Phase_RestrictUgcDialogCheck = 0x20,
  Phase_RestrictUgcDialogReq = 0x21,
  Phase_RestrictUgcDialogWait = 0x22,
  Phase_RestrictDialogOk = 0x23,
  Phase_OkCb_7 = 0x24,
  Phase_Release = 0x25,
  Phase_ErrorDispFromProgress = 0x26,
  Phase_ErrorDispInit = 0x27,
  Phase_ErrorDialogCheck = 0x28,
  Phase_ErrorDialogReq = 0x29,
  Phase_ErrorDialogWait = 0x2A,
  Phase_SignInDialogCheck = 0x2B,
  Phase_SignInDialogReq = 0x2C,
  Phase_SignInDialogWait1 = 0x2D,
  Phase_SignInDialogWait2 = 0x2E,
  Phase_ErrorDispOk = 0x2F,
  Phase_ErrCb_7 = 0x30,
};

enum MtNet::PS4Psn::Context::moveFinalize::$A1179C14D8099EC3E3F3C30E1F35B74C : __int32
{
  _PHASE_MATCH_CONTEXT_TERM = 0x0,
  _PHASE_RELEASE = 0x1,
  _PHASE_OK_CB_5 = 0x2,
};

struct SceNpCreateAsyncRequestParameter
{
  size_t size;
  SceKernelCpumask cpuAffinityMask;
  int threadPriority;
  uint8_t padding[4];
};

typedef SceNpCreateAsyncRequestParameter SceNpCreateAsyncRequestParameter_0;

struct MtNet::PS4Psn::P2p::Peer
{
  bool mIsValid;
  bool mIsAvailable;
  SceNetSockaddrIn_0 mSockaddrInP2p;
};

struct __cppobj MtNet::PS4Psn::P2p : MtNetP2p:1568
{
  SceNetId mSocket;
  u8 mTempRecvBuf[1536];
  MtNet::PS4Psn::P2p::Peer mPeerTbl[16];
};

enum MtNet::PS4Psn::P2p::movePeerConnect::$619882DABD6A70F627D6110D4F3A1D69 : __int32
{
  Phase_Init = 0x0,
  Phase_Wait = 0x1,
  Phase_ErrCb_8 = 0x2,
};

typedef uint32_t SceNetSocklen_t;

enum MtNetSession::$AA261F99EFD49F1BBF86262EBE08D18C : __int32
{
  FILTER_ATTR_NONE = 0x0,
  FILTER_ATTR_WAN = 0x1,
  FILTER_ATTR_LAN = 0x2,
  FILTER_ATTR_VACANT = 0x4,
};

enum MtNetSessionInfo::$E5D3592A07818C86C24664A4AC61FA96 : __int32
{
  SEARCH_KEY_TYPE_NONE = 0x0,
  SEARCH_KEY_TYPE_INT32 = 0x1,
};

struct __cppobj __attribute__((packed)) __attribute__((aligned(1))) MtNetSession:1576 : MtNetObject, MtNetRequestController::Listener
{
  MtNetContext *mpContext;
  MtNetRequestController mRequestController;
  bool mIsDestructor;
  _BYTE gapB1[7];
  MtNetSession::Listener *mpListener;
  s32 mPhaseAutoFinalize;
  bool mIsNeedFinalize;
};

struct SceNpMatching2World
{
  SceNpMatching2World *next;
  SceNpMatching2WorldId worldId;
  uint32_t numOfLobby;
  uint32_t maxNumOfTotalLobbyMember;
  uint32_t curNumOfTotalLobbyMember;
  uint32_t curNumOfRoom;
  uint32_t curNumOfTotalRoomMember;
  unsigned __int8 reserved[8];
};

typedef SceNpMatching2World SceNpMatching2World_0;

typedef uint32_t SceNpMatching2RequestId;

enum MtNet::PS4Psn::Session::P2pConnectState : __int32
{
  P2pConnectState_Closed = 0x0,
  P2pConnectState_Opening = 0x1,
  P2pConnectState_Opened = 0x2,
};

struct __attribute__((aligned(8))) MtNet::PS4Psn::Session::InnerMember
{
  SceNpId_0 mNpId;
  bool mIsInNpRoom;
  SceNpMatching2RoomMemberId mNpMemberId;
  u32 mAttribute;
  u32 mNonce;
  bool mIsFirst;
  bool mIsJoinCb;
  MtNetSession::Member mMember;
  MtNetP2pConnectInfo mP2pInfo;
  u32 mP2pReqSeq;
  s32 mP2pConnectId;
  MtNet::PS4Psn::Session::P2pConnectState mP2pConnectState;
};

struct __cppobj __attribute__((aligned(8))) MtNet::PS4Psn::Session : MtNetSession:1576
{
  SceNpId_0 mSelfNpId;
  SceUserServiceUserId mSelfSceUserId;
  SceNpMatching2ContextId mNpMatchContextId;
  SceNpMatching2ServerId mNpMatchServerId;
  bool mIsNpMatchInitOk;
  SceNpMatching2World_0 mNpMatchWorldTbl[10];
  s32 mNpMatchWorldNum;
  bool mIsNpMatchJoinRoom;
  s32 mNpMatchInitPhase;
  s32 mNpMatchInitError;
  s32 mNpMatchInitResult;
  s32 mNpMatchLeavePhase;
  s32 mNpMatchLeaveResult;
  u16 mNpMatchRoomExterFlag;
  SceNpMatching2RequestId mNpMatchRoomExterRequestId;
  u16 mNpMatchRoomInterFlag;
  SceNpMatching2RequestId mNpMatchRoomInterRequestId;
  u16 mNpMatchMemberFlag;
  SceNpMatching2RequestId mNpMatchMemberRequestId;
  MtNetTime::Total mNpMatchUpdateWait;
  MtNet::Utility::PS4::ReqCtxPtr mWebApiReqCtxPtr;
  MtNetRequest *mWaitReqPtrTbl[8];
  MtNetRequest *mBurstReqPtr;
  MtNetTime::Total mDropNonceCheckLastTime;
  u32 mDropNonce[32];
  MtNetSession::SearchKeyFilterList mFilterList;
  MtNetSession::SearchResultList mSearchResultList;
  s32 mSearchResultMax;
  MtNetSessionInfo mSessionInfo;
  MtNet::PS4Psn::Session::InnerMember mInnerMemberTbl[16];
  bool mIsJoin;
  bool mIsLock;
  s32 mMemberSelfIndex;
  s32 mMemberHostIndex;
};

enum MtNet::PS4Psn::Session::NpMatchRoomExterFlag : __int32
{
  NpMatchRoomExterFlag_SearchInt = 0x1,
  NpMatchRoomExterFlag_BinAttr = 0x2,
};

enum MtNet::PS4Psn::Session::NpMatchRoomInterFlag : __int32
{
  NpMatchRoomInterFlag_HiddenCloseOn = 0x1,
  NpMatchRoomInterFlag_HiddenCloseOff = 0x2,
  NpMatchRoomInterFlag_BinAttr = 0x4,
  NpMatchRoomInterFlag_OwnerRank = 0x8,
};

enum MtNet::PS4Psn::Session::InnerMemberAttr : __int32
{
  InnerMemberAttr_CanHost = 0x1,
};

enum MtNet::PS4Psn::Session::NpMatchMemberFlag : __int32
{
  NpMatchMemberFlag_BinAttr = 0x1,
};

enum MtNet::PS4Psn::Session::GenericIndex : __int32
{
  GenericIndex_ReqId = 0x0,
  GenericIndex_Result = 0x1,
  GenericIndex_BurstMaxNum = 0x2,
  GenericIndex_BurstReqId = 0x3,
  GenericIndex_BurstResult = 0x4,
};

enum MtNet::PS4Psn::Session::$438E77BDC0417CB2BCD7EA0BFE35AE99 : __int32
{
  RoomMsgType_None = 0x0,
  RoomMsgType_AddNonce = 0x1,
  RoomMsgType_Kick = 0x2,
};

typedef SceNpMatching2RoomDataInternal SceNpMatching2RoomDataInternal_0;

typedef uint64_t SceNpMatching2RoomPasswordSlotMask;

typedef uint64_t SceNpMatching2RoomJoinedSlotMask;

typedef SceNpMatching2RoomGroup SceNpMatching2RoomGroup_0;

typedef uint32_t SceNpMatching2FlagAttr;

typedef SceNpMatching2RoomBinAttrInternal SceNpMatching2RoomBinAttrInternal_0;

struct SceNpMatching2RoomDataInternal
{
  uint16_t publicSlotNum;
  uint16_t privateSlotNum;
  uint16_t openPublicSlotNum;
  uint16_t openPrivateSlotNum;
  uint16_t maxSlot;
  SceNpMatching2ServerId serverId;
  SceNpMatching2WorldId worldId;
  SceNpMatching2LobbyId lobbyId;
  SceNpMatching2RoomId roomId;
  SceNpMatching2RoomPasswordSlotMask passwordSlotMask;
  SceNpMatching2RoomJoinedSlotMask joinedSlotMask;
  SceNpMatching2RoomGroup_0 *roomGroup;
  uint64_t roomGroupNum;
  SceNpMatching2FlagAttr flagAttr;
  uint8_t padding[4];
  SceNpMatching2RoomBinAttrInternal_0 *roomBinAttrInternal;
  uint64_t roomBinAttrInternalNum;
};

typedef unsigned __int8 SceNpMatching2RoomGroupId;

struct SceNpMatching2GroupLabel
{
  unsigned __int8 data[8];
};

typedef SceNpMatching2GroupLabel SceNpMatching2GroupLabel_0;

struct SceNpMatching2RoomGroup
{
  SceNpMatching2RoomGroupId groupId;
  bool withPassword;
  bool withLabel;
  unsigned __int8 padding[1];
  SceNpMatching2GroupLabel_0 label;
  uint32_t slotNum;
  uint32_t curGroupMemberNum;
};

typedef uint16_t SceNpMatching2AttributeId;

struct SceNpMatching2BinAttr
{
  SceNpMatching2AttributeId id;
  unsigned __int8 padding[6];
  const void *ptr;
  size_t size;
};

typedef SceNpMatching2BinAttr SceNpMatching2BinAttr_0;

struct SceNpMatching2RoomBinAttrInternal
{
  SceRtcTick_0 updateDate;
  SceNpMatching2RoomMemberId updateMemberId;
  unsigned __int8 padding[6];
  SceNpMatching2BinAttr_0 data;
};

typedef SceNpMatching2RoomMemberDataInternalList SceNpMatching2RoomMemberDataInternalList_0;

typedef SceNpMatching2RoomMemberDataInternal SceNpMatching2RoomMemberDataInternal_0;

struct SceNpMatching2RoomMemberDataInternalList
{
  SceNpMatching2RoomMemberDataInternal_0 *members;
  uint64_t membersNum;
  SceNpMatching2RoomMemberDataInternal_0 *me;
  SceNpMatching2RoomMemberDataInternal_0 *owner;
};

typedef unsigned __int8 SceNpMatching2TeamId;

typedef unsigned __int8 SceNpMatching2NatType;

typedef SceNpMatching2RoomMemberBinAttrInternal SceNpMatching2RoomMemberBinAttrInternal_0;

struct SceNpMatching2RoomMemberDataInternal
{
  SceNpMatching2RoomMemberDataInternal *next;
  SceRtcTick_0 joinDate;
  SceNpId_0 npId;
  uint8_t padding[4];
  SceNpMatching2RoomMemberId memberId;
  SceNpMatching2TeamId teamId;
  SceNpMatching2NatType natType;
  SceNpMatching2FlagAttr flagAttr;
  SceNpMatching2RoomGroup_0 *roomGroup;
  SceNpMatching2RoomMemberBinAttrInternal_0 *roomMemberBinAttrInternal;
  uint64_t roomMemberBinAttrInternalNum;
};

struct SceNpMatching2RoomMemberBinAttrInternal
{
  SceRtcTick_0 updateDate;
  SceNpMatching2BinAttr_0 data;
};

typedef SceNpMatching2RoomDataInternalUpdateInfo SceNpMatching2RoomDataInternalUpdateInfo_0;

struct SceNpMatching2RoomDataInternalUpdateInfo
{
  const SceNpMatching2RoomDataInternal_0 *newRoomDataInternal;
  const SceNpMatching2FlagAttr *newFlagAttr;
  const SceNpMatching2FlagAttr *prevFlagAttr;
  const SceNpMatching2RoomPasswordSlotMask *newRoomPasswordSlotMask;
  const SceNpMatching2RoomPasswordSlotMask *prevRoomPasswordSlotMask;
  const SceNpMatching2RoomGroup_0 **newRoomGroup;
  uint64_t newRoomGroupNum;
  const SceNpMatching2RoomBinAttrInternal_0 **newRoomBinAttrInternal;
  uint64_t newRoomBinAttrInternalNum;
};

typedef SceNpMatching2RoomMemberDataInternalUpdateInfo SceNpMatching2RoomMemberDataInternalUpdateInfo_0;

struct SceNpMatching2RoomMemberDataInternalUpdateInfo
{
  const SceNpMatching2RoomMemberDataInternal_0 *newRoomMemberDataInternal;
  const SceNpMatching2FlagAttr *newFlagAttr;
  const SceNpMatching2FlagAttr *prevFlagAttr;
  const SceNpMatching2TeamId *newTeamId;
  const SceNpMatching2RoomMemberBinAttrInternal_0 **newRoomMemberBinAttrInternal;
  uint64_t newRoomMemberBinAttrInternalNum;
};

typedef SceNpMatching2RoomOwnerUpdateInfo SceNpMatching2RoomOwnerUpdateInfo_0;

typedef SceNpMatching2SessionPassword SceNpMatching2SessionPassword_0;

struct SceNpMatching2PresenceOptionData
{
  unsigned __int8 data[16];
  size_t len;
};

typedef SceNpMatching2PresenceOptionData SceNpMatching2PresenceOptionData_0;

struct SceNpMatching2RoomOwnerUpdateInfo
{
  SceNpMatching2RoomMemberId prevOwner;
  SceNpMatching2RoomMemberId newOwner;
  SceNpMatching2EventCause eventCause;
  unsigned __int8 padding[3];
  const SceNpMatching2SessionPassword_0 *roomPassword;
  SceNpMatching2PresenceOptionData_0 optData;
};

struct SceNpMatching2SessionPassword
{
  unsigned __int8 data[8];
};

enum MtNet::PS4Psn::Session::moveCreate::$C0C7ADB62732D6F8B056B8154B8EEC9B : __int32
{
  Phase_Check_4 = 0x0,
  Phase_Init_0 = 0x1,
  Phase_CreateReq = 0x2,
  Phase_CreateWait = 0x3,
  Phase_WebCreateReq = 0x4,
  Phase_WebCreateWait = 0x5,
  Phase_OkCb_8 = 0x6,
  Phase_Leave = 0x7,
  Phase_ErrCb_9 = 0x8,
};

enum MtNet::PS4Psn::Session::moveSearch::$B8361EB9695821795AB6C51B1E8DE86B : __int32
{
  Phase_Check_5 = 0x0,
  Phase_Init_1 = 0x1,
  Phase_SearchReq = 0x2,
  Phase_SearchWait = 0x3,
  Phase_PingReq = 0x4,
  Phase_PingWait = 0x5,
  Phase_OkCb_9 = 0x6,
  Phase_ErrCb_10 = 0x7,
};

enum MtNet::PS4Psn::Session::moveJoin::$AE4E01CE78463FE91A4B476FD91465AC : __int32
{
  Phase_Check_6 = 0x0,
  Phase_Init_2 = 0x1,
  Phase_WebGetReq = 0x2,
  Phase_WebGetWait = 0x3,
  Phase_JoinReq = 0x4,
  Phase_JoinWait = 0x5,
  Phase_OpenInit = 0x6,
  Phase_OpenWait = 0x7,
  Phase_InfoReq = 0x8,
  Phase_InfoWait = 0x9,
  Phase_WebJoinReq = 0xA,
  Phase_WebJoinWait = 0xB,
  Phase_OkCb_10 = 0xC,
  Phase_Leave_0 = 0xD,
  Phase_ErrCb_11 = 0xE,
};

enum MtNet::PS4Psn::Session::moveFinalize::$FE4C156E3F8B1583944391FCB8CE1EEF : __int32
{
  Phase_Leave_1 = 0x0,
  Phase_End = 0x1,
};

enum MtNet::PS4Psn::Session::moveLock::$245FC80FBA1DF95AB9310123FA5A2B29 : __int32
{
  Phase_LockReq = 0x0,
  Phase_LockWait = 0x1,
  Phase_OkCb_11 = 0x2,
  Phase_ErrCb_12 = 0x3,
};

enum MtNet::PS4Psn::Session::moveInvite::$1959003AA8B975015E6D1EC12D25806C : __int32
{
  Phase_Req = 0x0,
  Phase_Wait1 = 0x1,
  Phase_Wait2 = 0x2,
  Phase_OkCb_12 = 0x3,
};

enum MtNet::PS4Psn::Session::initNpMatch::Phase : __int32
{
  Phase_Check_7 = 0x0,
  Phase_ContextStart = 0x1,
  Phase_WorldGetReq = 0x2,
  Phase_WorldGetWait = 0x3,
  Phase_Success = 0x4,
  Phase_Error = 0x5,
};

enum MtNet::PS4Psn::Session::leaveNpMatch::Phase : __int32
{
  Phase_P2pDisconnect = 0x0,
  Phase_LeaveReq = 0x1,
  Phase_LeaveWait = 0x2,
  Phase_WebLeaveReq = 0x3,
  Phase_WebLeaveWait = 0x4,
  Phase_Success_0 = 0x5,
};

struct SceNpMatching2IntAttr
{
  SceNpMatching2AttributeId id;
  unsigned __int8 padding[2];
  uint32_t num;
};

typedef unsigned __int8 SceNpMatching2SignalingType;

typedef unsigned __int8 SceNpMatching2SignalingFlag;

struct SceNpMatching2SignalingOptParam
{
  SceNpMatching2SignalingType type;
  SceNpMatching2SignalingFlag flag;
  SceNpMatching2RoomMemberId hubMemberId;
  uint8_t padding[4];
};

typedef SceNpMatching2RoomGroupConfig SceNpMatching2RoomGroupConfig_0;

typedef SceNpMatching2IntAttr SceNpMatching2IntAttr_0;

typedef SceNpMatching2SignalingOptParam SceNpMatching2SignalingOptParam_0;

struct SceNpMatching2CreateJoinRoomRequest
{
  uint16_t maxSlot;
  SceNpMatching2TeamId teamId;
  uint8_t padding[5];
  SceNpMatching2FlagAttr flagAttr;
  SceNpMatching2WorldId worldId;
  SceNpMatching2LobbyId lobbyId;
  const SceNpMatching2SessionPassword_0 *roomPassword;
  const SceNpMatching2RoomPasswordSlotMask *passwordSlotMask;
  const SceNpMatching2RoomGroupConfig_0 *groupConfig;
  uint64_t groupConfigNum;
  const SceNpMatching2GroupLabel_0 *joinRoomGroupLabel;
  const SceNpId_0 *allowedUser;
  uint64_t allowedUserNum;
  const SceNpId_0 *blockedUser;
  uint64_t blockedUserNum;
  const SceNpMatching2BinAttr_0 *roomBinAttrInternal;
  uint64_t roomBinAttrInternalNum;
  const SceNpMatching2IntAttr_0 *roomSearchableIntAttrExternal;
  uint64_t roomSearchableIntAttrExternalNum;
  const SceNpMatching2BinAttr_0 *roomSearchableBinAttrExternal;
  uint64_t roomSearchableBinAttrExternalNum;
  const SceNpMatching2BinAttr_0 *roomBinAttrExternal;
  uint64_t roomBinAttrExternalNum;
  const SceNpMatching2BinAttr_0 *roomMemberBinAttrInternal;
  uint64_t roomMemberBinAttrInternalNum;
  const SceNpMatching2SignalingOptParam_0 *sigOptParam;
};

struct SceNpMatching2RoomGroupConfig
{
  uint32_t slotNum;
  bool withLabel;
  SceNpMatching2GroupLabel_0 label;
  bool withPassword;
  unsigned __int8 padding[2];
};

typedef void (*SceNpMatching2RequestCallback)(SceNpMatching2ContextId, SceNpMatching2RequestId, SceNpMatching2Event, int, const void *, void *);

struct SceNpMatching2RequestOptParam
{
  SceNpMatching2RequestCallback cbFunc;
  void *cbFuncArg;
  uint32_t timeout;
  uint16_t appReqId;
  unsigned __int8 padding[2];
};

typedef unsigned __int8 SceNpMatching2Operator;

struct SceNpMatching2IntSearchFilter
{
  SceNpMatching2Operator searchOperator;
  unsigned __int8 padding[7];
  SceNpMatching2IntAttr_0 attr;
};

struct SceNpMatching2BinSearchFilter
{
  SceNpMatching2Operator searchOperator;
  unsigned __int8 padding[7];
  SceNpMatching2BinAttr_0 attr;
};

struct SceNpMatching2RangeFilter
{
  uint32_t startIndex;
  uint32_t max;
};

typedef SceNpMatching2RangeFilter SceNpMatching2RangeFilter_0;

typedef SceNpMatching2IntSearchFilter SceNpMatching2IntSearchFilter_0;

typedef SceNpMatching2BinSearchFilter SceNpMatching2BinSearchFilter_0;

struct SceNpMatching2SearchRoomRequest
{
  int option;
  SceNpMatching2WorldId worldId;
  SceNpMatching2LobbyId lobbyId;
  SceNpMatching2RangeFilter_0 rangeFilter;
  SceNpMatching2FlagAttr flagFilter;
  SceNpMatching2FlagAttr flagAttr;
  const SceNpMatching2IntSearchFilter_0 *intFilter;
  uint64_t intFilterNum;
  const SceNpMatching2BinSearchFilter_0 *binFilter;
  uint64_t binFilterNum;
  const SceNpMatching2AttributeId *attrId;
  uint64_t attrIdNum;
};

struct SceNpMatching2SignalingGetPingInfoRequest
{
  SceNpMatching2RoomId roomId;
  uint8_t reserved[16];
};

struct SceNpMatching2JoinRoomRequest
{
  SceNpMatching2RoomId roomId;
  const SceNpMatching2SessionPassword_0 *roomPassword;
  const SceNpMatching2GroupLabel_0 *joinRoomGroupLabel;
  const SceNpMatching2BinAttr_0 *roomMemberBinAttrInternal;
  uint64_t roomMemberBinAttrInternalNum;
  SceNpMatching2PresenceOptionData_0 optData;
  SceNpMatching2TeamId teamId;
  unsigned __int8 padding[3];
  SceNpMatching2FlagAttr flagAttr;
  const SceNpId_0 *blockedUser;
  uint64_t blockedUserNum;
};

struct SceNpMatching2GetRoomDataExternalListRequest
{
  const SceNpMatching2RoomId *roomId;
  uint64_t roomIdNum;
  const SceNpMatching2AttributeId *attrId;
  uint64_t attrIdNum;
};

typedef unsigned __int8 SceNpMatching2CastType;

struct SceNpMatching2RoomMessageDestination::$2C1185D4EB87954748126EA0631A22F1
{
  const SceNpMatching2RoomMemberId *memberId;
  uint64_t memberIdNum;
};

union SceNpMatching2RoomMessageDestination
{
  SceNpMatching2RoomMemberId unicastTarget;
  SceNpMatching2RoomMessageDestination::$2C1185D4EB87954748126EA0631A22F1 multicastTarget;
  SceNpMatching2TeamId multicastTargetTeamId;
};

typedef SceNpMatching2RoomMessageDestination SceNpMatching2RoomMessageDestination_0;

struct SceNpMatching2SendRoomMessageRequest
{
  SceNpMatching2RoomId roomId;
  SceNpMatching2CastType castType;
  uint8_t padding[3];
  int32_t option;
  SceNpMatching2RoomMessageDestination_0 dst;
  const void *msg;
  size_t msgLen;
};

struct SceNpMatching2SetRoomDataExternalRequest
{
  SceNpMatching2RoomId roomId;
  const SceNpMatching2IntAttr_0 *roomSearchableIntAttrExternal;
  uint64_t roomSearchableIntAttrExternalNum;
  const SceNpMatching2BinAttr_0 *roomSearchableBinAttrExternal;
  uint64_t roomSearchableBinAttrExternalNum;
  const SceNpMatching2BinAttr_0 *roomBinAttrExternal;
  uint64_t roomBinAttrExternalNum;
};

typedef SceNpMatching2RoomGroupPasswordConfig SceNpMatching2RoomGroupPasswordConfig_0;

struct SceNpMatching2SetRoomDataInternalRequest
{
  SceNpMatching2RoomId roomId;
  SceNpMatching2FlagAttr flagFilter;
  SceNpMatching2FlagAttr flagAttr;
  const SceNpMatching2BinAttr_0 *roomBinAttrInternal;
  uint64_t roomBinAttrInternalNum;
  const SceNpMatching2RoomGroupPasswordConfig_0 *passwordConfig;
  uint64_t passwordConfigNum;
  const SceNpMatching2RoomPasswordSlotMask *passwordSlotMask;
  const SceNpMatching2RoomMemberId *ownerPrivilegeRank;
  uint64_t ownerPrivilegeRankNum;
};

struct SceNpMatching2RoomGroupPasswordConfig
{
  SceNpMatching2RoomGroupId groupId;
  bool withPassword;
  unsigned __int8 padding[1];
};

struct SceNpMatching2SetRoomMemberDataInternalRequest
{
  SceNpMatching2RoomId roomId;
  SceNpMatching2RoomMemberId memberId;
  SceNpMatching2TeamId teamId;
  uint8_t padding[5];
  SceNpMatching2FlagAttr flagFilter;
  SceNpMatching2FlagAttr flagAttr;
  const SceNpMatching2BinAttr_0 *roomMemberBinAttrInternal;
  uint64_t roomMemberBinAttrInternalNum;
};

struct SceNpMatching2GetWorldInfoListRequest
{
  SceNpMatching2ServerId serverId;
};

struct SceNpMatching2LeaveRoomRequest
{
  SceNpMatching2RoomId roomId;
  SceNpMatching2PresenceOptionData_0 optData;
};

struct SceNpMatching2SignalingGetPingInfoResponse
{
  SceNpMatching2ServerId serverId;
  uint8_t padding[2];
  SceNpMatching2WorldId worldId;
  SceNpMatching2RoomId roomId;
  uint32_t rtt;
  uint8_t reserved[20];
};

struct SceNpMatching2GetWorldInfoListResponse
{
  SceNpMatching2World_0 *world;
  uint64_t worldNum;
};

struct SceNpMatching2CreateJoinRoomResponse
{
  SceNpMatching2RoomDataInternal_0 *roomDataInternal;
  SceNpMatching2RoomMemberDataInternalList_0 memberList;
};

struct SceNpMatching2JoinRoomResponse
{
  SceNpMatching2RoomDataInternal_0 *roomDataInternal;
  SceNpMatching2RoomMemberDataInternalList_0 memberList;
};

struct SceNpMatching2Range
{
  uint32_t startIndex;
  uint32_t total;
  uint32_t resultCount;
  uint8_t padding[4];
};

typedef SceNpMatching2Range SceNpMatching2Range_0;

typedef SceNpMatching2RoomDataExternal SceNpMatching2RoomDataExternal_0;

struct SceNpMatching2SearchRoomResponse
{
  SceNpMatching2Range_0 range;
  SceNpMatching2RoomDataExternal_0 *roomDataExternal;
};

typedef SceNpMatching2RoomGroupInfo SceNpMatching2RoomGroupInfo_0;

struct SceNpMatching2RoomDataExternal
{
  SceNpMatching2RoomDataExternal *next;
  uint16_t maxSlot;
  uint16_t curMemberNum;
  SceNpMatching2FlagAttr flagAttr;
  SceNpMatching2ServerId serverId;
  uint8_t padding[2];
  SceNpMatching2WorldId worldId;
  SceNpMatching2LobbyId lobbyId;
  SceNpMatching2RoomId roomId;
  SceNpMatching2RoomPasswordSlotMask passwordSlotMask;
  SceNpMatching2RoomJoinedSlotMask joinedSlotMask;
  uint16_t publicSlotNum;
  uint16_t privateSlotNum;
  uint16_t openPublicSlotNum;
  uint16_t openPrivateSlotNum;
  SceNpId_0 *owner;
  SceNpMatching2RoomGroupInfo_0 *roomGroup;
  uint64_t roomGroupNum;
  SceNpMatching2IntAttr_0 *roomSearchableIntAttrExternal;
  uint64_t roomSearchableIntAttrExternalNum;
  SceNpMatching2BinAttr_0 *roomSearchableBinAttrExternal;
  uint64_t roomSearchableBinAttrExternalNum;
  SceNpMatching2BinAttr_0 *roomBinAttrExternal;
  uint64_t roomBinAttrExternalNum;
};

struct SceNpMatching2RoomGroupInfo
{
  SceNpMatching2RoomGroupId groupId;
  bool withPassword;
  unsigned __int8 padding[2];
  uint32_t slotNum;
  uint32_t curGroupMemberNum;
};

struct SceNpMatching2GetRoomDataExternalListResponse
{
  SceNpMatching2RoomDataExternal_0 *roomDataExternal;
  uint64_t roomDataExternalNum;
};

struct SceNpMatching2RoomMemberUpdateInfo
{
  const SceNpMatching2RoomMemberDataInternal_0 *roomMemberDataInternal;
  SceNpMatching2EventCause eventCause;
  uint8_t padding[7];
  SceNpMatching2PresenceOptionData_0 optData;
};

struct SceNpMatching2RoomUpdateInfo
{
  SceNpMatching2EventCause eventCause;
  unsigned __int8 padding[3];
  int errorCode;
  SceNpMatching2PresenceOptionData_0 optData;
};

struct SceNpMatching2RoomMessageInfo
{
  bool filtered;
  SceNpMatching2CastType castType;
  unsigned __int8 padding[6];
  const SceNpMatching2RoomMessageDestination_0 *dst;
  const SceNpId_0 *srcMember;
  const void *msg;
  size_t msgLen;
};

typedef SceNpMatching2SetRoomDataInternalRequest SceNpMatching2SetRoomDataInternalRequest_0;

typedef SceNpMatching2RequestOptParam SceNpMatching2RequestOptParam_0;

typedef SceNpMatching2SetRoomDataExternalRequest SceNpMatching2SetRoomDataExternalRequest_0;

typedef SceNpMatching2SetRoomMemberDataInternalRequest SceNpMatching2SetRoomMemberDataInternalRequest_0;

typedef SceNpMatching2SendRoomMessageRequest SceNpMatching2SendRoomMessageRequest_0;

typedef SceNpMatching2CreateJoinRoomRequest SceNpMatching2CreateJoinRoomRequest_0;

typedef SceNpMatching2GetWorldInfoListRequest SceNpMatching2GetWorldInfoListRequest_0;

typedef SceNpMatching2LeaveRoomRequest SceNpMatching2LeaveRoomRequest_0;

typedef SceNpMatching2SearchRoomRequest SceNpMatching2SearchRoomRequest_0;

typedef SceNpMatching2SignalingGetPingInfoRequest SceNpMatching2SignalingGetPingInfoRequest_0;

typedef SceNpMatching2GetRoomDataExternalListRequest SceNpMatching2GetRoomDataExternalListRequest_0;

typedef SceNpMatching2JoinRoomRequest SceNpMatching2JoinRoomRequest_0;

typedef SceNpMatching2SignalingGetPingInfoResponse SceNpMatching2SignalingGetPingInfoResponse_0;

typedef SceNpMatching2GetWorldInfoListResponse SceNpMatching2GetWorldInfoListResponse_0;

typedef SceNpMatching2CreateJoinRoomResponse SceNpMatching2CreateJoinRoomResponse_0;

typedef SceNpMatching2SearchRoomResponse SceNpMatching2SearchRoomResponse_0;

typedef SceNpMatching2GetRoomDataExternalListResponse SceNpMatching2GetRoomDataExternalListResponse_0;

typedef SceNpMatching2RoomMemberUpdateInfo SceNpMatching2RoomMemberUpdateInfo_0;

typedef SceNpMatching2RoomUpdateInfo SceNpMatching2RoomUpdateInfo_0;

typedef SceNpMatching2RoomMessageInfo SceNpMatching2RoomMessageInfo_0;

struct __cppobj MtNetSocket:288 : MtNetObject:288
{
};

struct __cppobj __attribute__((aligned(4))) MtNet::PS4Psn::Socket : MtNetSocket:288
{
  MtNetAddress mAddressSelf;
  MtNetAddress mAddressPeer;
  SceNetId mSocket;
  s32 mType;
  u32 mOption;
  u8 mTempRecvBuffer[1536];
  bool mIsEnable;
};

struct SceNpTssDataStatus
{
  SceRtcTick_0 lastModified;
  int32_t statusCodeType;
  size_t contentLength;
};

typedef SceNpTssDataStatus SceNpTssDataStatus_0;

struct __cppobj MtNet::PS4Psn::Title::Storage : MtNetStorage2
{
  MtNetStorageList mStorageList;
  MtNetStorageInfo mStorageInfo;
  bool mIsEnable;
  s32 mRequestId;
  size_t mServerSize;
  SceNpTssDataStatus_0 mTssDataStatus;
};

enum MtNet::PS4Psn::Title::Storage::moveGetList::$AFED8BB265B8C186EECB7B08DEB61B8B : __int32
{
  _PHASE_INIT_10 = 0x0,
  _PHASE_ERR_CB_9 = 0x1,
};

enum MtNet::PS4Psn::Title::Storage::moveOpen::$F61F0DEF43E2D36A47517F08A9CFC898 : __int32
{
  _PHASE_INIT_11 = 0x0,
  _PHASE_ERR_CB_10 = 0x1,
};

enum MtNet::PS4Psn::Title::Storage::moveRead::$6A6D9673A04FF35F63264E7BD24A6B7A : __int32
{
  _PHASE_INIT_12 = 0x0,
  _PHASE_WAIT1 = 0x1,
  _PHASE_WAIT2 = 0x2,
  _PHASE_OK_CB_6 = 0x3,
  _PHASE_ERR_CB_11 = 0x4,
};

struct SceNpTusDataInfo
{
  size_t infoSize;
  uint8_t data[384];
};

typedef SceNpTusDataInfo SceNpTusDataInfo_0;

struct SceNpTusDataStatus
{
  SceNpId_0 ownerId;
  int hasData;
  SceRtcTick_0 lastChangedDate;
  SceNpId_0 lastChangedAuthorId;
  uint8_t pad[4];
  void *data;
  size_t dataSize;
  SceNpTusDataInfo_0 info;
};

typedef SceNpTusDataStatus SceNpTusDataStatus_0;

struct __cppobj MtNet::PS4Psn::User::Storage : MtNetStorage2
{
  SceUserServiceUserId mSceUserId;
  MtNetStorageList mStorageList;
  MtNetStorageInfo mStorageInfo;
  bool mIsEnable;
  s32 mRequestId;
  size_t mServerSize;
  SceNpId_0 mNpId;
  SceNpTusDataStatus_0 mTusDataStatus;
};

enum MtNet::PS4Psn::User::Storage::moveGetList::$9353C6E6416F60DC3AC751688997C2B0 : __int32
{
  _PHASE_INIT_13 = 0x0,
  _PHASE_ERR_CB_12 = 0x1,
};

enum MtNet::PS4Psn::User::Storage::moveUnlink::$9E90E59C43F446B1D5AFC34499874342 : __int32
{
  _PHASE_INIT_14 = 0x0,
  _PHASE_WAIT_0 = 0x1,
  _PHASE_OK_CB_7 = 0x2,
  _PHASE_ERR_CB_13 = 0x3,
};

enum MtNet::PS4Psn::User::Storage::moveOpen::$C769B8634772514AAD13B73E64B199CE : __int32
{
  _PHASE_INIT_15 = 0x0,
  _PHASE_ERR_CB_14 = 0x1,
};

enum MtNet::PS4Psn::User::Storage::moveWrite::$470B060358D92811C410CF74752C3E1A : __int32
{
  _PHASE_INIT_16 = 0x0,
  _PHASE_WAIT1_0 = 0x1,
  _PHASE_WAIT2_0 = 0x2,
  _PHASE_OK_CB_8 = 0x3,
  _PHASE_ERR_CB_15 = 0x4,
};

enum MtNet::PS4Psn::User::Storage::moveRead::$1FAFC28532AE5F1ADAC21F344A3C46B0 : __int32
{
  _PHASE_INIT_17 = 0x0,
  _PHASE_WAIT1_1 = 0x1,
  _PHASE_WAIT2_1 = 0x2,
  _PHASE_OK_CB_9 = 0x3,
  _PHASE_ERR_CB_16 = 0x4,
};

typedef int BOOL;

